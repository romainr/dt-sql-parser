// Generated from /Users/ziv/Workspace/dt-sql-parser/src/grammar/mysql/MySQLParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var MySQLParserListener = require('./MySQLParserListener').MySQLParserListener;
var MySQLParserVisitor = require('./MySQLParserVisitor').MySQLParserVisitor;

var grammarFileName = "MySQLParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u041a\u18eb\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
    "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004",
    "\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t",
    "\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004",
    "\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t",
    "\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004",
    "\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t",
    "\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004",
    "\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004\u00eb\t",
    "\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t\u00ee\u0004",
    "\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004\u00f2\t",
    "\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t\u00f5\u0004",
    "\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004\u00f9\t",
    "\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t\u00fc\u0004",
    "\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004\u0100\t",
    "\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t\u0103\u0004",
    "\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004\u0107\t",
    "\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t\u010a\u0004",
    "\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004\u010e\t",
    "\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t\u0111\u0004",
    "\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004\u0115\t",
    "\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t\u0118\u0004",
    "\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004\u011c\t",
    "\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t\u011f\u0004",
    "\u0120\t\u0120\u0004\u0121\t\u0121\u0004\u0122\t\u0122\u0004\u0123\t",
    "\u0123\u0004\u0124\t\u0124\u0004\u0125\t\u0125\u0004\u0126\t\u0126\u0004",
    "\u0127\t\u0127\u0004\u0128\t\u0128\u0004\u0129\t\u0129\u0004\u012a\t",
    "\u012a\u0004\u012b\t\u012b\u0004\u012c\t\u012c\u0004\u012d\t\u012d\u0004",
    "\u012e\t\u012e\u0004\u012f\t\u012f\u0004\u0130\t\u0130\u0004\u0131\t",
    "\u0131\u0004\u0132\t\u0132\u0004\u0133\t\u0133\u0004\u0134\t\u0134\u0004",
    "\u0135\t\u0135\u0004\u0136\t\u0136\u0004\u0137\t\u0137\u0004\u0138\t",
    "\u0138\u0004\u0139\t\u0139\u0004\u013a\t\u013a\u0004\u013b\t\u013b\u0004",
    "\u013c\t\u013c\u0003\u0002\u0005\u0002\u027a\n\u0002\u0003\u0002\u0005",
    "\u0002\u027d\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003",
    "\u0005\u0003\u0283\n\u0003\u0003\u0003\u0005\u0003\u0286\n\u0003\u0003",
    "\u0003\u0007\u0003\u0289\n\u0003\f\u0003\u000e\u0003\u028c\u000b\u0003",
    "\u0003\u0003\u0003\u0003\u0005\u0003\u0290\n\u0003\u0003\u0003\u0005",
    "\u0003\u0293\n\u0003\u0003\u0003\u0005\u0003\u0296\n\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0005\u0004\u029f\n\u0004\u0003\u0005\u0003\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u02c6\n\u0006",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u02d2\n",
    "\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0005\b\u02dd\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0005\t\u02ee\n\t\u0003\n\u0003\n\u0003\n\u0005\n\u02f3\n",
    "\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u02ff",
    "\n\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005",
    "\f\u031a\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0005\r\u0323\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0328",
    "\n\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u032c\n\u000e\f\u000e\u000e",
    "\u000e\u032f\u000b\u000e\u0003\u000f\u0003\u000f\u0005\u000f\u0333\n",
    "\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0337\n\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0005\u000f\u0340\n\u000f\u0003\u000f\u0005\u000f\u0343\n\u000f\u0003",
    "\u000f\u0005\u000f\u0346\n\u000f\u0003\u000f\u0003\u000f\u0005\u000f",
    "\u034a\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003",
    "\u0010\u0005\u0010\u0351\n\u0010\u0003\u0010\u0005\u0010\u0354\n\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0359\n\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u035f\n\u0010",
    "\f\u0010\u000e\u0010\u0362\u000b\u0010\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u0366\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010",
    "\u036b\n\u0010\u0003\u0010\u0007\u0010\u036e\n\u0010\f\u0010\u000e\u0010",
    "\u0371\u000b\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u037c",
    "\n\u0011\u0003\u0011\u0005\u0011\u037f\n\u0011\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u0383\n\u0011\u0003\u0011\u0005\u0011\u0386\n\u0011\u0003",
    "\u0011\u0003\u0011\u0005\u0011\u038a\n\u0011\u0003\u0011\u0005\u0011",
    "\u038d\n\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0391\n\u0011\u0003",
    "\u0011\u0005\u0011\u0394\n\u0011\u0003\u0011\u0005\u0011\u0397\n\u0011",
    "\u0003\u0011\u0003\u0011\u0005\u0011\u039b\n\u0011\u0003\u0011\u0005",
    "\u0011\u039e\n\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u03a2\n\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0005\u0012\u03a8\n",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u03ae",
    "\n\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u03b2\n\u0012\f\u0012\u000e",
    "\u0012\u03b5\u000b\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u03b9\n",
    "\u0012\f\u0012\u000e\u0012\u03bc\u000b\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0013\u0003\u0013\u0005\u0013\u03c2\n\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u03c8\n\u0013\u0003\u0013",
    "\u0003\u0013\u0007\u0013\u03cc\n\u0013\f\u0013\u000e\u0013\u03cf\u000b",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u03d5",
    "\n\u0013\f\u0013\u000e\u0013\u03d8\u000b\u0013\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u03dc\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u03ea\n\u0014\f\u0014\u000e",
    "\u0014\u03ed\u000b\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u03f3\n\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u03f7",
    "\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0401\n\u0015\u0003",
    "\u0015\u0003\u0015\u0005\u0015\u0405\n\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u0409\n\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u040d",
    "\n\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0411\n\u0015\u0003\u0015",
    "\u0007\u0015\u0414\n\u0015\f\u0015\u000e\u0015\u0417\u000b\u0015\u0005",
    "\u0015\u0419\n\u0015\u0003\u0015\u0005\u0015\u041c\n\u0015\u0003\u0015",
    "\u0005\u0015\u041f\n\u0015\u0003\u0015\u0005\u0015\u0422\n\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0428\n\u0015",
    "\u0003\u0015\u0003\u0015\u0005\u0015\u042c\n\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0432\n\u0015\u0003\u0015",
    "\u0007\u0015\u0435\n\u0015\f\u0015\u000e\u0015\u0438\u000b\u0015\u0005",
    "\u0015\u043a\n\u0015\u0003\u0015\u0005\u0015\u043d\n\u0015\u0005\u0015",
    "\u043f\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u044a",
    "\n\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u044e\n\u0016\u0003\u0016",
    "\u0005\u0016\u0451\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u045f\n\u0017\u0003\u0017",
    "\u0005\u0017\u0462\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0466",
    "\n\u0017\u0003\u0017\u0005\u0017\u0469\n\u0017\u0003\u0017\u0003\u0017",
    "\u0005\u0017\u046d\n\u0017\u0003\u0017\u0005\u0017\u0470\n\u0017\u0003",
    "\u0017\u0003\u0017\u0005\u0017\u0474\n\u0017\u0003\u0017\u0005\u0017",
    "\u0477\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u047b\n\u0017\u0003",
    "\u0017\u0005\u0017\u047e\n\u0017\u0003\u0017\u0005\u0017\u0481\n\u0017",
    "\u0003\u0017\u0003\u0017\u0005\u0017\u0485\n\u0017\u0003\u0017\u0005",
    "\u0017\u0488\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u048c\n\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0005\u0018\u0492\n",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005",
    "\u0018\u049f\n\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0005\u0019\u04a6\n\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0005\u0019\u04ab\n\u0019\u0003\u0019\u0005\u0019\u04ae\n\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u04b3\n\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005",
    "\u0019\u04bb\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0005\u0019\u04c1\n\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u04c5",
    "\n\u0019\u0003\u001a\u0005\u001a\u04c8\n\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0005\u001a\u04cd\n\u001a\u0003\u001a\u0005\u001a\u04d0",
    "\n\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u04d4\n\u001a\u0003\u001a",
    "\u0005\u001a\u04d7\n\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u04db",
    "\n\u001a\u0003\u001a\u0005\u001a\u04de\n\u001a\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u04e6\n",
    "\u001b\u0005\u001b\u04e8\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0007\u001c\u04ed\n\u001c\f\u001c\u000e\u001c\u04f0\u000b\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u04f5\n\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0007\u001c\u04fb\n\u001c\f\u001c",
    "\u000e\u001c\u04fe\u000b\u001c\u0005\u001c\u0500\n\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0007\u001c\u0505\n\u001c\f\u001c\u000e\u001c",
    "\u0508\u000b\u001c\u0005\u001c\u050a\n\u001c\u0005\u001c\u050c\n\u001c",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0512\n",
    "\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0518",
    "\n\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0529\n",
    "\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u0530\n \u0003!\u0003",
    "!\u0003!\u0003\"\u0003\"\u0005\"\u0537\n\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u0542\n\"\u0003#",
    "\u0005#\u0545\n#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0005%\u0552\n%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0005%\u055f\n%\u0003%\u0003",
    "%\u0003%\u0005%\u0564\n%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u0574\n&\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0007\'\u057a\n\'\f\'\u000e\'\u057d\u000b",
    "\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u0586\n",
    "(\u0003)\u0003)\u0007)\u058a\n)\f)\u000e)\u058d\u000b)\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u0596\n*\u0003*\u0005*\u0599",
    "\n*\u0003*\u0003*\u0003*\u0005*\u059e\n*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u05ab\n*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0005*\u05b2\n*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0005*\u05b9\n*\u0005*\u05bb\n*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0005*\u05c2\n*\u0003+\u0003+\u0005+\u05c6\n+\u0005+\u05c8",
    "\n+\u0003+\u0003+\u0003+\u0005+\u05cd\n+\u0003+\u0005+\u05d0\n+\u0003",
    "+\u0003+\u0007+\u05d4\n+\f+\u000e+\u05d7\u000b+\u0003+\u0003+\u0005",
    "+\u05db\n+\u0005+\u05dd\n+\u0003+\u0003+\u0005+\u05e1\n+\u0003+\u0005",
    "+\u05e4\n+\u0003+\u0005+\u05e7\n+\u0003+\u0003+\u0007+\u05eb\n+\f+\u000e",
    "+\u05ee\u000b+\u0003+\u0003+\u0005+\u05f2\n+\u0005+\u05f4\n+\u0003+",
    "\u0003+\u0003+\u0005+\u05f9\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005",
    "+\u0600\n+\u0005+\u0602\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005",
    "+\u0609\n+\u0003,\u0003,\u0003,\u0005,\u060e\n,\u0003,\u0003,\u0005",
    ",\u0612\n,\u0003,\u0005,\u0615\n,\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0005-\u061d\n-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005",
    "-\u0625\n-\u0005-\u0627\n-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0005.\u062f\n.\u0003/\u0003/\u0005/\u0633\n/\u0003/\u0005/\u0636",
    "\n/\u0003/\u0003/\u0007/\u063a\n/\f/\u000e/\u063d\u000b/\u0003/\u0003",
    "/\u0005/\u0641\n/\u0003/\u0005/\u0644\n/\u0003/\u0003/\u0007/\u0648",
    "\n/\f/\u000e/\u064b\u000b/\u0005/\u064d\n/\u00030\u00030\u00050\u0651",
    "\n0\u00030\u00030\u00030\u00050\u0656\n0\u00030\u00030\u00030\u0005",
    "0\u065b\n0\u00030\u00030\u00050\u065f\n0\u00030\u00030\u00030\u0005",
    "0\u0664\n0\u00030\u00050\u0667\n0\u00030\u00030\u00050\u066b\n0\u0003",
    "0\u00030\u00050\u066f\n0\u00030\u00030\u00050\u0673\n0\u00030\u0003",
    "0\u00050\u0677\n0\u00030\u00030\u00030\u00050\u067c\n0\u00030\u0003",
    "0\u00030\u00050\u0681\n0\u00030\u00030\u00030\u00050\u0686\n0\u0003",
    "0\u00030\u00030\u00030\u00050\u068c\n0\u00030\u00030\u00030\u00050\u0691",
    "\n0\u00030\u00030\u00030\u00050\u0696\n0\u00030\u00030\u00030\u0003",
    "0\u00050\u069c\n0\u00030\u00030\u00030\u00050\u06a1\n0\u00030\u0003",
    "0\u00030\u00050\u06a6\n0\u00030\u00030\u00030\u00050\u06ab\n0\u0003",
    "0\u00030\u00030\u00050\u06b0\n0\u00030\u00030\u00030\u00050\u06b5\n",
    "0\u00030\u00030\u00030\u00050\u06ba\n0\u00030\u00030\u00030\u00050\u06bf",
    "\n0\u00030\u00030\u00030\u00050\u06c4\n0\u00030\u00030\u00030\u0005",
    "0\u06c9\n0\u00030\u00030\u00030\u00050\u06ce\n0\u00030\u00030\u0003",
    "0\u00030\u00050\u06d4\n0\u00030\u00030\u00030\u00050\u06d9\n0\u0003",
    "0\u00030\u00030\u00030\u00050\u06df\n0\u00031\u00031\u00031\u00032\u0003",
    "2\u00032\u00032\u00032\u00052\u06e9\n2\u00032\u00032\u00032\u00032\u0003",
    "2\u00052\u06f0\n2\u00052\u06f2\n2\u00032\u00032\u00032\u00032\u0007",
    "2\u06f8\n2\f2\u000e2\u06fb\u000b2\u00032\u00032\u00052\u06ff\n2\u0003",
    "3\u00053\u0702\n3\u00033\u00033\u00033\u00033\u00033\u00033\u00053\u070a",
    "\n3\u00033\u00033\u00033\u00033\u00053\u0710\n3\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00053\u0720\n3\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00053\u072c\n3\u00053\u072e\n3\u00034\u0005",
    "4\u0731\n4\u00034\u00034\u00034\u00034\u00034\u00034\u00054\u0739\n",
    "4\u00034\u00034\u00034\u00034\u00054\u073f\n4\u00034\u00034\u00034\u0003",
    "4\u00054\u0745\n4\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00075\u0750\n5\f5\u000e5\u0753\u000b5\u00035\u00035\u0007",
    "5\u0757\n5\f5\u000e5\u075a\u000b5\u00035\u00035\u00035\u00075\u075f",
    "\n5\f5\u000e5\u0762\u000b5\u00055\u0764\n5\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00075\u076d\n5\f5\u000e5\u0770\u000b5\u0003",
    "5\u00035\u00035\u00075\u0775\n5\f5\u000e5\u0778\u000b5\u00055\u077a",
    "\n5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00075\u0784",
    "\n5\f5\u000e5\u0787\u000b5\u00035\u00035\u00075\u078b\n5\f5\u000e5\u078e",
    "\u000b5\u00035\u00035\u00035\u00075\u0793\n5\f5\u000e5\u0796\u000b5",
    "\u00055\u0798\n5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003",
    "5\u00075\u07a2\n5\f5\u000e5\u07a5\u000b5\u00035\u00035\u00075\u07a9",
    "\n5\f5\u000e5\u07ac\u000b5\u00035\u00035\u00035\u00075\u07b1\n5\f5\u000e",
    "5\u07b4\u000b5\u00055\u07b6\n5\u00035\u00035\u00035\u00075\u07bb\n5",
    "\f5\u000e5\u07be\u000b5\u00035\u00035\u00035\u00075\u07c3\n5\f5\u000e",
    "5\u07c6\u000b5\u00055\u07c8\n5\u00055\u07ca\n5\u00036\u00036\u00036",
    "\u00056\u07cf\n6\u00037\u00037\u00037\u00037\u00067\u07d5\n7\r7\u000e",
    "7\u07d6\u00037\u00037\u00038\u00038\u00038\u00078\u07de\n8\f8\u000e",
    "8\u07e1\u000b8\u00039\u00059\u07e4\n9\u00039\u00039\u00059\u07e8\n9",
    "\u00039\u00039\u00039\u00059\u07ed\n9\u00039\u00039\u00039\u00039\u0005",
    "9\u07f3\n9\u00039\u00039\u00039\u00039\u00059\u07f9\n9\u00039\u0003",
    "9\u00039\u00059\u07fe\n9\u00039\u00039\u00039\u00059\u0803\n9\u0003",
    "9\u00039\u00039\u00059\u0808\n9\u00039\u00039\u00039\u00059\u080d\n",
    "9\u00039\u00059\u0810\n9\u0003:\u0003:\u0003:\u0005:\u0815\n:\u0003",
    ":\u0006:\u0818\n:\r:\u000e:\u0819\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0005:\u0824\n:\u0003;\u0003;\u0005;\u0828\n",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u082f\n;\u0003;\u0003;\u0003",
    ";\u0005;\u0834\n;\u0003;\u0005;\u0837\n;\u0003;\u0003;\u0003;\u0005",
    ";\u083c\n;\u0003;\u0005;\u083f\n;\u0003;\u0003;\u0005;\u0843\n;\u0003",
    ";\u0003;\u0005;\u0847\n;\u0003<\u0003<\u0003<\u0003<\u0007<\u084d\n",
    "<\f<\u000e<\u0850\u000b<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0005",
    ">\u0862\n>\u0003>\u0005>\u0865\n>\u0003>\u0005>\u0868\n>\u0003>\u0003",
    ">\u0005>\u086c\n>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0007?\u0874",
    "\n?\f?\u000e?\u0877\u000b?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0007@\u0881\n@\f@\u000e@\u0884\u000b@\u0003@\u0003",
    "@\u0003A\u0003A\u0005A\u088a\nA\u0003A\u0005A\u088d\nA\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0007A\u0894\nA\fA\u000eA\u0897\u000bA\u0005",
    "A\u0899\nA\u0003A\u0005A\u089c\nA\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0005B\u08a7\nB\u0003B\u0005B\u08aa\n",
    "B\u0003B\u0003B\u0005B\u08ae\nB\u0003B\u0003B\u0003C\u0003C\u0003C\u0003",
    "C\u0005C\u08b6\nC\u0003C\u0005C\u08b9\nC\u0003C\u0003C\u0003C\u0005",
    "C\u08be\nC\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0005C\u08c6\n",
    "C\u0003C\u0003C\u0003C\u0003C\u0005C\u08cc\nC\u0003C\u0003C\u0005C\u08d0",
    "\nC\u0003D\u0003D\u0005D\u08d4\nD\u0003D\u0007D\u08d7\nD\fD\u000eD\u08da",
    "\u000bD\u0003D\u0003D\u0005D\u08de\nD\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0005D\u08e5\nD\u0003D\u0003D\u0005D\u08e9\nD\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0007D\u08f2\nD\fD\u000eD\u08f5\u000b",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u08fc\nD\u0003D\u0005D\u08ff",
    "\nD\u0003D\u0003D\u0007D\u0903\nD\fD\u000eD\u0906\u000bD\u0003D\u0003",
    "D\u0003D\u0005D\u090b\nD\u0005D\u090d\nD\u0003D\u0003D\u0003D\u0005",
    "D\u0912\nD\u0003D\u0005D\u0915\nD\u0003D\u0003D\u0007D\u0919\nD\fD\u000e",
    "D\u091c\u000bD\u0003D\u0003D\u0003D\u0005D\u0921\nD\u0005D\u0923\nD",
    "\u0003D\u0003D\u0005D\u0927\nD\u0003D\u0005D\u092a\nD\u0003D\u0005D",
    "\u092d\nD\u0003D\u0003D\u0007D\u0931\nD\fD\u000eD\u0934\u000bD\u0003",
    "D\u0003D\u0003D\u0005D\u0939\nD\u0003D\u0005D\u093c\nD\u0003D\u0003",
    "D\u0007D\u0940\nD\fD\u000eD\u0943\u000bD\u0003D\u0003D\u0003D\u0005",
    "D\u0948\nD\u0005D\u094a\nD\u0003D\u0003D\u0003D\u0005D\u094f\nD\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u0957\nD\u0005D\u0959\n",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u0962\nD\u0003",
    "D\u0003D\u0003D\u0005D\u0967\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0005D\u096f\nD\u0003D\u0003D\u0005D\u0973\nD\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0005D\u097b\nD\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0005D\u0985\nD\u0003D\u0003D\u0003D\u0005D\u098a",
    "\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u0991\nD\u0003D\u0003",
    "D\u0005D\u0995\nD\u0003D\u0003D\u0005D\u0999\nD\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0005D\u09b6\nD\u0003D\u0003D\u0005D\u09ba",
    "\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0005D\u09c6\nD\u0003D\u0005D\u09c9\nD\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0005D\u09d2\nD\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0007D\u09e1",
    "\nD\fD\u000eD\u09e4\u000bD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0005D\u09ef\nD\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0005D\u09f6\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u09fd\n",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0007D\u0a0a\nD\fD\u000eD\u0a0d\u000bD\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\u0a19\nD\u0003",
    "D\u0003D\u0003D\u0003D\u0005D\u0a1f\nD\u0003D\u0003D\u0003D\u0003D\u0005",
    "D\u0a25\nD\u0003D\u0003D\u0003D\u0003D\u0005D\u0a2b\nD\u0003D\u0003",
    "D\u0003D\u0003D\u0005D\u0a31\nD\u0003D\u0003D\u0003D\u0003D\u0005D\u0a37",
    "\nD\u0003D\u0003D\u0003D\u0003D\u0005D\u0a3d\nD\u0003E\u0003E\u0003",
    "E\u0005E\u0a42\nE\u0003E\u0003E\u0003F\u0003F\u0003F\u0005F\u0a49\n",
    "F\u0003F\u0003F\u0003G\u0003G\u0003G\u0005G\u0a50\nG\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0005G\u0a57\nG\u0003G\u0003G\u0003G\u0005G\u0a5c\n",
    "G\u0003G\u0007G\u0a5f\nG\fG\u000eG\u0a62\u000bG\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0005I\u0a6f",
    "\nI\u0003I\u0003I\u0003J\u0003J\u0003J\u0005J\u0a76\nJ\u0003J\u0003",
    "J\u0003K\u0003K\u0003K\u0005K\u0a7d\nK\u0003K\u0003K\u0003L\u0003L\u0005",
    "L\u0a83\nL\u0003L\u0003L\u0005L\u0a87\nL\u0003L\u0003L\u0005L\u0a8b",
    "\nL\u0003M\u0003M\u0003M\u0003M\u0003M\u0005M\u0a92\nM\u0003M\u0005",
    "M\u0a95\nM\u0003N\u0003N\u0003N\u0005N\u0a9a\nN\u0003N\u0003N\u0003",
    "O\u0003O\u0003O\u0005O\u0aa1\nO\u0003O\u0003O\u0003O\u0007O\u0aa6\n",
    "O\fO\u000eO\u0aa9\u000bO\u0003O\u0005O\u0aac\nO\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0007P\u0ab3\nP\fP\u000eP\u0ab6\u000bP\u0003Q\u0003",
    "Q\u0003Q\u0003Q\u0003R\u0003R\u0005R\u0abe\nR\u0003R\u0003R\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0005S\u0ac7\nS\u0003S\u0005S\u0aca\nS\u0003",
    "T\u0003T\u0005T\u0ace\nT\u0003U\u0003U\u0003U\u0003V\u0003V\u0003V\u0003",
    "V\u0005V\u0ad7\nV\u0003W\u0003W\u0005W\u0adb\nW\u0003W\u0005W\u0ade",
    "\nW\u0003W\u0005W\u0ae1\nW\u0003W\u0003W\u0003W\u0003W\u0005W\u0ae7",
    "\nW\u0003W\u0005W\u0aea\nW\u0003W\u0003W\u0003W\u0003W\u0005W\u0af0",
    "\nW\u0003W\u0003W\u0003W\u0003W\u0003W\u0007W\u0af7\nW\fW\u000eW\u0afa",
    "\u000bW\u0005W\u0afc\nW\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0007W\u0b05\nW\fW\u000eW\u0b08\u000bW\u0005W\u0b0a\nW\u0003X\u0003",
    "X\u0003X\u0005X\u0b0f\nX\u0003X\u0005X\u0b12\nX\u0003X\u0003X\u0003",
    "X\u0005X\u0b17\nX\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003",
    "X\u0005X\u0b21\nX\u0003X\u0003X\u0003X\u0005X\u0b26\nX\u0003X\u0003",
    "X\u0006X\u0b2a\nX\rX\u000eX\u0b2b\u0005X\u0b2e\nX\u0003X\u0003X\u0006",
    "X\u0b32\nX\rX\u000eX\u0b33\u0005X\u0b36\nX\u0003X\u0003X\u0003X\u0003",
    "X\u0005X\u0b3c\nX\u0003X\u0003X\u0003X\u0003X\u0007X\u0b42\nX\fX\u000e",
    "X\u0b45\u000bX\u0003X\u0003X\u0005X\u0b49\nX\u0003X\u0003X\u0003X\u0003",
    "X\u0007X\u0b4f\nX\fX\u000eX\u0b52\u000bX\u0005X\u0b54\nX\u0003Y\u0003",
    "Y\u0003Y\u0005Y\u0b59\nY\u0003Y\u0005Y\u0b5c\nY\u0003Y\u0003Y\u0003",
    "Y\u0005Y\u0b61\nY\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u0b69",
    "\nY\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u0b71\nY\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0005Y\u0b77\nY\u0003Y\u0003Y\u0003Y\u0003Y\u0007",
    "Y\u0b7d\nY\fY\u000eY\u0b80\u000bY\u0003Y\u0003Y\u0005Y\u0b84\nY\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0007Y\u0b8a\nY\fY\u000eY\u0b8d\u000bY\u0005",
    "Y\u0b8f\nY\u0003Z\u0003Z\u0005Z\u0b93\nZ\u0003Z\u0005Z\u0b96\nZ\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u0b9e\nZ\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0005Z\u0ba4\nZ\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0007Z\u0bab",
    "\nZ\fZ\u000eZ\u0bae\u000bZ\u0005Z\u0bb0\nZ\u0003[\u0003[\u0005[\u0bb4",
    "\n[\u0003[\u0003[\u0005[\u0bb8\n[\u0003[\u0003[\u0006[\u0bbc\n[\r[\u000e",
    "[\u0bbd\u0003[\u0003[\u0005[\u0bc2\n[\u0003[\u0003[\u0005[\u0bc6\n[",
    "\u0005[\u0bc8\n[\u0003[\u0005[\u0bcb\n[\u0003[\u0005[\u0bce\n[\u0003",
    "[\u0005[\u0bd1\n[\u0003[\u0003[\u0006[\u0bd5\n[\r[\u000e[\u0bd6\u0003",
    "[\u0003[\u0005[\u0bdb\n[\u0003[\u0005[\u0bde\n[\u0003[\u0005[\u0be1",
    "\n[\u0003[\u0005[\u0be4\n[\u0003[\u0005[\u0be7\n[\u0005[\u0be9\n[\u0003",
    "\\\u0003\\\u0005\\\u0bed\n\\\u0003]\u0003]\u0003]\u0003]\u0005]\u0bf3",
    "\n]\u0003]\u0003]\u0003]\u0003]\u0005]\u0bf9\n]\u0003]\u0007]\u0bfc",
    "\n]\f]\u000e]\u0bff\u000b]\u0005]\u0c01\n]\u0003^\u0003^\u0003^\u0003",
    "^\u0005^\u0c07\n^\u0003_\u0003_\u0005_\u0c0b\n_\u0003`\u0003`\u0003",
    "`\u0003`\u0003`\u0003`\u0005`\u0c13\n`\u0003a\u0003a\u0005a\u0c17\n",
    "a\u0003a\u0005a\u0c1a\na\u0003a\u0005a\u0c1d\na\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0005a\u0c26\na\u0003a\u0003a\u0005a\u0c2a",
    "\na\u0003a\u0005a\u0c2d\na\u0003a\u0003a\u0005a\u0c31\na\u0003b\u0003",
    "b\u0005b\u0c35\nb\u0003b\u0005b\u0c38\nb\u0003b\u0005b\u0c3b\nb\u0003",
    "b\u0003b\u0003b\u0005b\u0c40\nb\u0003b\u0003b\u0003b\u0003b\u0005b\u0c46",
    "\nb\u0007b\u0c48\nb\fb\u000eb\u0c4b\u000bb\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0005b\u0c54\nb\u0003b\u0003b\u0003b\u0003b\u0005",
    "b\u0c5a\nb\u0007b\u0c5c\nb\fb\u000eb\u0c5f\u000bb\u0003b\u0003b\u0003",
    "b\u0005b\u0c64\nb\u0003b\u0003b\u0005b\u0c68\nb\u0003c\u0003c\u0003",
    "c\u0003c\u0005c\u0c6e\nc\u0003c\u0005c\u0c71\nc\u0003d\u0003d\u0003",
    "d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0005d\u0c7d\nd\u0003",
    "d\u0003d\u0005d\u0c81\nd\u0003d\u0003d\u0005d\u0c85\nd\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0005e\u0c8d\ne\u0003e\u0003e\u0005e\u0c91",
    "\ne\u0003f\u0003f\u0003f\u0003f\u0003g\u0003g\u0005g\u0c99\ng\u0003",
    "g\u0005g\u0c9c\ng\u0003g\u0003g\u0005g\u0ca0\ng\u0003g\u0005g\u0ca3",
    "\ng\u0003g\u0003g\u0003g\u0003g\u0007g\u0ca9\ng\fg\u000eg\u0cac\u000b",
    "g\u0003g\u0003g\u0005g\u0cb0\ng\u0003g\u0005g\u0cb3\ng\u0003g\u0005",
    "g\u0cb6\ng\u0003h\u0003h\u0005h\u0cba\nh\u0003h\u0005h\u0cbd\nh\u0003",
    "h\u0003h\u0003h\u0003h\u0003h\u0007h\u0cc4\nh\fh\u000eh\u0cc7\u000b",
    "h\u0003h\u0003h\u0005h\u0ccb\nh\u0003i\u0003i\u0003i\u0003i\u0003i\u0007",
    "i\u0cd2\ni\fi\u000ei\u0cd5\u000bi\u0003j\u0003j\u0005j\u0cd9\nj\u0003",
    "k\u0003k\u0003k\u0007k\u0cde\nk\fk\u000ek\u0ce1\u000bk\u0003l\u0003",
    "l\u0007l\u0ce5\nl\fl\u000el\u0ce8\u000bl\u0003l\u0003l\u0003l\u0007",
    "l\u0ced\nl\fl\u000el\u0cf0\u000bl\u0003l\u0003l\u0005l\u0cf4\nl\u0003",
    "m\u0003m\u0003m\u0003m\u0003m\u0003m\u0005m\u0cfc\nm\u0003m\u0005m\u0cff",
    "\nm\u0003m\u0005m\u0d02\nm\u0003m\u0003m\u0003m\u0007m\u0d07\nm\fm\u000e",
    "m\u0d0a\u000bm\u0005m\u0d0c\nm\u0003m\u0003m\u0003m\u0003m\u0003m\u0005",
    "m\u0d13\nm\u0003m\u0005m\u0d16\nm\u0003m\u0003m\u0003m\u0003m\u0003",
    "m\u0003m\u0005m\u0d1e\nm\u0003n\u0003n\u0003n\u0003n\u0005n\u0d24\n",
    "n\u0003n\u0003n\u0003n\u0003n\u0003o\u0003o\u0003o\u0003o\u0003o\u0005",
    "o\u0d2f\no\u0003p\u0005p\u0d32\np\u0003p\u0003p\u0003p\u0003p\u0003",
    "p\u0003p\u0003p\u0003p\u0003p\u0005p\u0d3d\np\u0003p\u0003p\u0003p\u0003",
    "p\u0005p\u0d43\np\u0003p\u0003p\u0005p\u0d47\np\u0003p\u0003p\u0003",
    "p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0005p\u0d52\np\u0003p\u0003",
    "p\u0003p\u0005p\u0d57\np\u0005p\u0d59\np\u0003p\u0003p\u0005p\u0d5d",
    "\np\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0005q\u0d67",
    "\nq\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0005r\u0d71",
    "\nr\u0003s\u0003s\u0007s\u0d75\ns\fs\u000es\u0d78\u000bs\u0003s\u0003",
    "s\u0005s\u0d7c\ns\u0003s\u0005s\u0d7f\ns\u0003s\u0005s\u0d82\ns\u0003",
    "s\u0005s\u0d85\ns\u0003s\u0003s\u0007s\u0d89\ns\fs\u000es\u0d8c\u000b",
    "s\u0003s\u0003s\u0005s\u0d90\ns\u0003s\u0005s\u0d93\ns\u0003s\u0005",
    "s\u0d96\ns\u0003s\u0005s\u0d99\ns\u0005s\u0d9b\ns\u0003t\u0003t\u0007",
    "t\u0d9f\nt\ft\u000et\u0da2\u000bt\u0003t\u0003t\u0005t\u0da6\nt\u0003",
    "t\u0005t\u0da9\nt\u0003t\u0005t\u0dac\nt\u0003u\u0003u\u0005u\u0db0",
    "\nu\u0003u\u0003u\u0003v\u0003v\u0005v\u0db6\nv\u0003v\u0003v\u0005",
    "v\u0dba\nv\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0005",
    "w\u0dc4\nw\u0003x\u0003x\u0005x\u0dc8\nx\u0003x\u0003x\u0007x\u0dcc",
    "\nx\fx\u000ex\u0dcf\u000bx\u0003y\u0003y\u0003y\u0003y\u0003y\u0003",
    "y\u0005y\u0dd7\ny\u0003y\u0005y\u0dda\ny\u0003y\u0003y\u0005y\u0dde",
    "\ny\u0003y\u0005y\u0de1\ny\u0003y\u0003y\u0005y\u0de5\ny\u0003y\u0003",
    "y\u0005y\u0de9\ny\u0003y\u0005y\u0dec\ny\u0005y\u0dee\ny\u0003z\u0003",
    "z\u0003z\u0003z\u0007z\u0df4\nz\fz\u000ez\u0df7\u000bz\u0003z\u0003",
    "z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0005z\u0e02\nz\u0003",
    "z\u0003z\u0006z\u0e06\nz\rz\u000ez\u0e07\u0005z\u0e0a\nz\u0003z\u0003",
    "z\u0006z\u0e0e\nz\rz\u000ez\u0e0f\u0005z\u0e12\nz\u0005z\u0e14\nz\u0003",
    "{\u0003{\u0003{\u0003{\u0005{\u0e1a\n{\u0003{\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0005{\u0e22\n{\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0005",
    "|\u0e2a\n|\u0003}\u0003}\u0003}\u0003}\u0005}\u0e30\n}\u0003}\u0003",
    "}\u0003}\u0003}\u0003}\u0007}\u0e37\n}\f}\u000e}\u0e3a\u000b}\u0003",
    "}\u0003}\u0005}\u0e3e\n}\u0005}\u0e40\n}\u0003}\u0003}\u0005}\u0e44",
    "\n}\u0003~\u0003~\u0005~\u0e48\n~\u0003\u007f\u0003\u007f\u0003\u007f",
    "\u0003\u007f\u0005\u007f\u0e4e\n\u007f\u0003\u007f\u0003\u007f\u0003",
    "\u007f\u0003\u007f\u0003\u007f\u0005\u007f\u0e55\n\u007f\u0003\u0080",
    "\u0003\u0080\u0005\u0080\u0e59\n\u0080\u0003\u0081\u0003\u0081\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0007\u0081\u0e60\n\u0081\f\u0081\u000e",
    "\u0081\u0e63\u000b\u0081\u0005\u0081\u0e65\n\u0081\u0003\u0082\u0003",
    "\u0082\u0005\u0082\u0e69\n\u0082\u0003\u0083\u0003\u0083\u0005\u0083",
    "\u0e6d\n\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u0e71\n\u0083\u0003",
    "\u0083\u0005\u0083\u0e74\n\u0083\u0003\u0083\u0005\u0083\u0e77\n\u0083",
    "\u0003\u0083\u0005\u0083\u0e7a\n\u0083\u0003\u0084\u0003\u0084\u0005",
    "\u0084\u0e7e\n\u0084\u0003\u0084\u0003\u0084\u0005\u0084\u0e82\n\u0084",
    "\u0003\u0084\u0005\u0084\u0e85\n\u0084\u0003\u0084\u0005\u0084\u0e88",
    "\n\u0084\u0003\u0084\u0005\u0084\u0e8b\n\u0084\u0003\u0085\u0003\u0085",
    "\u0003\u0085\u0003\u0086\u0003\u0086\u0005\u0086\u0e92\n\u0086\u0003",
    "\u0086\u0003\u0086\u0005\u0086\u0e96\n\u0086\u0003\u0086\u0003\u0086",
    "\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0088\u0003\u0088",
    "\u0003\u0088\u0003\u0088\u0003\u0088\u0007\u0088\u0ea3\n\u0088\f\u0088",
    "\u000e\u0088\u0ea6\u000b\u0088\u0003\u0089\u0003\u0089\u0003\u0089\u0003",
    "\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008b\u0003",
    "\u008b\u0005\u008b\u0eb2\n\u008b\u0003\u008b\u0003\u008b\u0003\u008b",
    "\u0003\u008b\u0007\u008b\u0eb8\n\u008b\f\u008b\u000e\u008b\u0ebb\u000b",
    "\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003",
    "\u008c\u0003\u008c\u0005\u008c\u0ec4\n\u008c\u0003\u008d\u0003\u008d",
    "\u0005\u008d\u0ec8\n\u008d\u0003\u008d\u0005\u008d\u0ecb\n\u008d\u0003",
    "\u008d\u0003\u008d\u0003\u008e\u0003\u008e\u0005\u008e\u0ed1\n\u008e",
    "\u0003\u008e\u0005\u008e\u0ed4\n\u008e\u0003\u008e\u0005\u008e\u0ed7",
    "\n\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f",
    "\u0003\u008f\u0003\u008f\u0005\u008f\u0ee0\n\u008f\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0005",
    "\u0090\u0ee9\n\u0090\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0091\u0003\u0091\u0007\u0091\u0ef1\n\u0091\f\u0091\u000e\u0091",
    "\u0ef4\u000b\u0091\u0003\u0091\u0005\u0091\u0ef7\n\u0091\u0003\u0092",
    "\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0007\u0092",
    "\u0eff\n\u0092\f\u0092\u000e\u0092\u0f02\u000b\u0092\u0003\u0093\u0003",
    "\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0005",
    "\u0093\u0f0b\n\u0093\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0095",
    "\u0003\u0095\u0003\u0095\u0005\u0095\u0f13\n\u0095\u0003\u0095\u0005",
    "\u0095\u0f16\n\u0095\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096",
    "\u0003\u0096\u0007\u0096\u0f1d\n\u0096\f\u0096\u000e\u0096\u0f20\u000b",
    "\u0096\u0005\u0096\u0f22\n\u0096\u0003\u0096\u0003\u0096\u0005\u0096",
    "\u0f26\n\u0096\u0003\u0096\u0007\u0096\u0f29\n\u0096\f\u0096\u000e\u0096",
    "\u0f2c\u000b\u0096\u0003\u0096\u0005\u0096\u0f2f\n\u0096\u0003\u0097",
    "\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0007\u0097\u0f36\n",
    "\u0097\f\u0097\u000e\u0097\u0f39\u000b\u0097\u0005\u0097\u0f3b\n\u0097",
    "\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0099\u0003\u0099\u0003\u0099",
    "\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0003\u009a\u0007\u009a\u0f58\n\u009a\f\u009a",
    "\u000e\u009a\u0f5b\u000b\u009a\u0005\u009a\u0f5d\n\u009a\u0003\u009a",
    "\u0005\u009a\u0f60\n\u009a\u0003\u009b\u0003\u009b\u0003\u009c\u0003",
    "\u009c\u0003\u009d\u0003\u009d\u0003\u009e\u0003\u009e\u0003\u009e\u0003",
    "\u009e\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0007\u009f\u0f96\n\u009f\f\u009f\u000e\u009f\u0f99\u000b\u009f",
    "\u0003\u009f\u0003\u009f\u0005\u009f\u0f9d\n\u009f\u0003\u00a0\u0003",
    "\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a2\u0005\u00a2\u0fb9\n\u00a2\u0003\u00a3\u0003\u00a3\u0003\u00a3",
    "\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3",
    "\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0005\u00a3\u0fc7\n\u00a3\u0003",
    "\u00a4\u0003\u00a4\u0003\u00a4\u0007\u00a4\u0fcc\n\u00a4\f\u00a4\u000e",
    "\u00a4\u0fcf\u000b\u00a4\u0003\u00a4\u0005\u00a4\u0fd2\n\u00a4\u0003",
    "\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0005\u00a5\u0fd8\n\u00a5",
    "\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6",
    "\u0005\u00a6\u0fe0\n\u00a6\u0005\u00a6\u0fe2\n\u00a6\u0003\u00a7\u0003",
    "\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003",
    "\u00a8\u0003\u00a8\u0005\u00a8\u0fed\n\u00a8\u0003\u00a9\u0003\u00a9",
    "\u0003\u00a9\u0003\u00a9\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa",
    "\u0005\u00aa\u0ff7\n\u00aa\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003",
    "\u00ab\u0003\u00ab\u0005\u00ab\u0ffe\n\u00ab\u0003\u00ac\u0003\u00ac",
    "\u0003\u00ac\u0003\u00ac\u0005\u00ac\u1004\n\u00ac\u0003\u00ad\u0003",
    "\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0005\u00ae\u100c",
    "\n\u00ae\u0003\u00af\u0003\u00af\u0003\u00af\u0005\u00af\u1011\n\u00af",
    "\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0007\u00af\u1017\n",
    "\u00af\f\u00af\u000e\u00af\u101a\u000b\u00af\u0003\u00af\u0003\u00af",
    "\u0003\u00af\u0007\u00af\u101f\n\u00af\f\u00af\u000e\u00af\u1022\u000b",
    "\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0007\u00af\u1027\n\u00af",
    "\f\u00af\u000e\u00af\u102a\u000b\u00af\u0003\u00af\u0003\u00af\u0003",
    "\u00af\u0007\u00af\u102f\n\u00af\f\u00af\u000e\u00af\u1032\u000b\u00af",
    "\u0003\u00af\u0007\u00af\u1035\n\u00af\f\u00af\u000e\u00af\u1038\u000b",
    "\u00af\u0005\u00af\u103a\n\u00af\u0003\u00af\u0003\u00af\u0005\u00af",
    "\u103e\n\u00af\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u1043",
    "\n\u00b0\u0003\u00b0\u0006\u00b0\u1046\n\u00b0\r\u00b0\u000e\u00b0\u1047",
    "\u0003\u00b0\u0003\u00b0\u0006\u00b0\u104c\n\u00b0\r\u00b0\u000e\u00b0",
    "\u104d\u0005\u00b0\u1050\n\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0",
    "\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0006\u00b1\u1059\n",
    "\u00b1\r\u00b1\u000e\u00b1\u105a\u0003\u00b1\u0007\u00b1\u105e\n\u00b1",
    "\f\u00b1\u000e\u00b1\u1061\u000b\u00b1\u0003\u00b1\u0003\u00b1\u0006",
    "\u00b1\u1065\n\u00b1\r\u00b1\u000e\u00b1\u1066\u0005\u00b1\u1069\n\u00b1",
    "\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b2\u0003\u00b2\u0003\u00b2",
    "\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b4\u0003\u00b4\u0003\u00b4",
    "\u0005\u00b4\u1077\n\u00b4\u0003\u00b4\u0003\u00b4\u0006\u00b4\u107b",
    "\n\u00b4\r\u00b4\u000e\u00b4\u107c\u0003\u00b4\u0003\u00b4\u0003\u00b4",
    "\u0005\u00b4\u1082\n\u00b4\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0005",
    "\u00b5\u1087\n\u00b5\u0003\u00b5\u0003\u00b5\u0006\u00b5\u108b\n\u00b5",
    "\r\u00b5\u000e\u00b5\u108c\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003",
    "\u00b5\u0003\u00b5\u0005\u00b5\u1094\n\u00b5\u0003\u00b6\u0003\u00b6",
    "\u0003\u00b6\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u109c\n",
    "\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0006\u00b7\u10a2",
    "\n\u00b7\r\u00b7\u000e\u00b7\u10a3\u0003\u00b7\u0003\u00b7\u0003\u00b7",
    "\u0005\u00b7\u10a9\n\u00b7\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003",
    "\u00b8\u0005\u00b8\u10af\n\u00b8\u0003\u00b8\u0005\u00b8\u10b2\n\u00b8",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8",
    "\u0005\u00b8\u10ba\n\u00b8\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003",
    "\u00b9\u0003\u00b9\u0005\u00b9\u10c1\n\u00b9\u0003\u00ba\u0003\u00ba",
    "\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba",
    "\u10ca\n\u00ba\u0003\u00ba\u0005\u00ba\u10cd\n\u00ba\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bc\u0003",
    "\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0007",
    "\u00bc\u10dc\n\u00bc\f\u00bc\u000e\u00bc\u10df\u000b\u00bc\u0003\u00bc",
    "\u0003\u00bc\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd\u10e6\n",
    "\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003",
    "\u00bd\u0005\u00bd\u10ee\n\u00bd\u0003\u00be\u0003\u00be\u0005\u00be",
    "\u10f2\n\u00be\u0003\u00be\u0003\u00be\u0003\u00bf\u0003\u00bf\u0003",
    "\u00bf\u0005\u00bf\u10f9\n\u00bf\u0003\u00bf\u0003\u00bf\u0006\u00bf",
    "\u10fd\n\u00bf\r\u00bf\u000e\u00bf\u10fe\u0003\u00c0\u0003\u00c0\u0003",
    "\u00c0\u0003\u00c0\u0006\u00c0\u1105\n\u00c0\r\u00c0\u000e\u00c0\u1106",
    "\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0007\u00c1",
    "\u110e\n\u00c1\f\u00c1\u000e\u00c1\u1111\u000b\u00c1\u0003\u00c1\u0003",
    "\u00c1\u0003\u00c1\u0005\u00c1\u1116\n\u00c1\u0003\u00c1\u0003\u00c1",
    "\u0003\u00c1\u0007\u00c1\u111b\n\u00c1\f\u00c1\u000e\u00c1\u111e\u000b",
    "\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0005\u00c1\u1124",
    "\n\u00c1\u0003\u00c1\u0007\u00c1\u1127\n\u00c1\f\u00c1\u000e\u00c1\u112a",
    "\u000b\u00c1\u0005\u00c1\u112c\n\u00c1\u0005\u00c1\u112e\n\u00c1\u0003",
    "\u00c1\u0003\u00c1\u0006\u00c1\u1132\n\u00c1\r\u00c1\u000e\u00c1\u1133",
    "\u0005\u00c1\u1136\n\u00c1\u0003\u00c1\u0003\u00c1\u0007\u00c1\u113a",
    "\n\u00c1\f\u00c1\u000e\u00c1\u113d\u000b\u00c1\u0005\u00c1\u113f\n\u00c1",
    "\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0007\u00c2",
    "\u1146\n\u00c2\f\u00c2\u000e\u00c2\u1149\u000b\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0005\u00c2\u114e\n\u00c2\u0003\u00c2\u0003\u00c2",
    "\u0003\u00c2\u0007\u00c2\u1153\n\u00c2\f\u00c2\u000e\u00c2\u1156\u000b",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0005\u00c2\u115c",
    "\n\u00c2\u0003\u00c2\u0007\u00c2\u115f\n\u00c2\f\u00c2\u000e\u00c2\u1162",
    "\u000b\u00c2\u0005\u00c2\u1164\n\u00c2\u0005\u00c2\u1166\n\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0006\u00c2\u116a\n\u00c2\r\u00c2\u000e\u00c2\u116b",
    "\u0005\u00c2\u116e\n\u00c2\u0003\u00c2\u0003\u00c2\u0007\u00c2\u1172",
    "\n\u00c2\f\u00c2\u000e\u00c2\u1175\u000b\u00c2\u0005\u00c2\u1177\n\u00c2",
    "\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0005\u00c3\u117c\n\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0007\u00c3\u1181\n\u00c3\f\u00c3\u000e",
    "\u00c3\u1184\u000b\u00c3\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4",
    "\u0007\u00c4\u118a\n\u00c4\f\u00c4\u000e\u00c4\u118d\u000b\u00c4\u0003",
    "\u00c4\u0003\u00c4\u0005\u00c4\u1191\n\u00c4\u0003\u00c4\u0003\u00c4",
    "\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0007\u00c4\u1198\n\u00c4\f\u00c4",
    "\u000e\u00c4\u119b\u000b\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003",
    "\u00c4\u0005\u00c4\u11a1\n\u00c4\u0003\u00c4\u0007\u00c4\u11a4\n\u00c4",
    "\f\u00c4\u000e\u00c4\u11a7\u000b\u00c4\u0005\u00c4\u11a9\n\u00c4\u0005",
    "\u00c4\u11ab\n\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4",
    "\u0007\u00c4\u11b1\n\u00c4\f\u00c4\u000e\u00c4\u11b4\u000b\u00c4\u0005",
    "\u00c4\u11b6\n\u00c4\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0007\u00c5\u11c0\n",
    "\u00c5\f\u00c5\u000e\u00c5\u11c3\u000b\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0005\u00c5\u11c8\n\u00c5\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0007\u00c6\u11cf\n\u00c6\f\u00c6\u000e",
    "\u00c6\u11d2\u000b\u00c6\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7",
    "\u0007\u00c7\u11d8\n\u00c7\f\u00c7\u000e\u00c7\u11db\u000b\u00c7\u0003",
    "\u00c7\u0003\u00c7\u0005\u00c7\u11df\n\u00c7\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0007\u00c7\u11e6\n\u00c7\f\u00c7",
    "\u000e\u00c7\u11e9\u000b\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005",
    "\u00c7\u11ee\n\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0007\u00c7\u11f7\n\u00c7\f\u00c7",
    "\u000e\u00c7\u11fa\u000b\u00c7\u0005\u00c7\u11fc\n\u00c7\u0003\u00c8",
    "\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8",
    "\u0003\u00c8\u0007\u00c8\u1206\n\u00c8\f\u00c8\u000e\u00c8\u1209\u000b",
    "\u00c8\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u120f",
    "\n\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u1214\n\u00c9",
    "\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00cb\u0003\u00cb\u0003\u00cb",
    "\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb",
    "\u0003\u00cb\u0005\u00cb\u1223\n\u00cb\u0003\u00cb\u0003\u00cb\u0003",
    "\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003",
    "\u00cb\u0005\u00cb\u122e\n\u00cb\u0003\u00cb\u0005\u00cb\u1231\n\u00cb",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc",
    "\u0003\u00cc\u0003\u00cc\u0005\u00cc\u123b\n\u00cc\u0003\u00cd\u0003",
    "\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003",
    "\u00cd\u0005\u00cd\u1245\n\u00cd\u0003\u00ce\u0003\u00ce\u0003\u00ce",
    "\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce",
    "\u124f\n\u00ce\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00d0\u0003",
    "\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0005\u00d0\u1259\n\u00d0",
    "\u0003\u00d1\u0003\u00d1\u0005\u00d1\u125d\n\u00d1\u0003\u00d1\u0003",
    "\u00d1\u0005\u00d1\u1261\n\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0005\u00d1",
    "\u126b\n\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0005\u00d1\u1270",
    "\n\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1",
    "\u0003\u00d1\u0005\u00d1\u12a2\n\u00d1\u0003\u00d2\u0003\u00d2\u0003",
    "\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003",
    "\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003",
    "\u00d2\u0003\u00d2\u0005\u00d2\u12b4\n\u00d2\u0003\u00d3\u0003\u00d3",
    "\u0003\u00d3\u0003\u00d3\u0003\u00d4\u0003\u00d4\u0005\u00d4\u12bc\n",
    "\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d5\u0003\u00d5\u0003",
    "\u00d5\u0003\u00d5\u0007\u00d5\u12c5\n\u00d5\f\u00d5\u000e\u00d5\u12c8",
    "\u000b\u00d5\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0005\u00d6",
    "\u12ce\n\u00d6\u0003\u00d7\u0003\u00d7\u0005\u00d7\u12d2\n\u00d7\u0003",
    "\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d8\u0003\u00d8\u0005\u00d8\u12d9",
    "\n\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0005\u00d8\u12de\n\u00d8",
    "\u0003\u00d8\u0005\u00d8\u12e1\n\u00d8\u0003\u00d8\u0005\u00d8\u12e4",
    "\n\u00d8\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9",
    "\u0003\u00d9\u0003\u00d9\u0005\u00d9\u12ed\n\u00d9\u0003\u00da\u0003",
    "\u00da\u0005\u00da\u12f1\n\u00da\u0003\u00da\u0003\u00da\u0003\u00da",
    "\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00db\u0003\u00db",
    "\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00dc\u0003\u00dc",
    "\u0003\u00dc\u0003\u00dc\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0007\u00dd",
    "\u130d\n\u00dd\f\u00dd\u000e\u00dd\u1310\u000b\u00dd\u0003\u00dd\u0003",
    "\u00dd\u0003\u00dd\u0003\u00dd\u0005\u00dd\u1316\n\u00dd\u0003\u00dd",
    "\u0003\u00dd\u0005\u00dd\u131a\n\u00dd\u0003\u00dd\u0003\u00dd\u0003",
    "\u00dd\u0003\u00dd\u0003\u00dd\u0005\u00dd\u1321\n\u00dd\u0003\u00dd",
    "\u0005\u00dd\u1324\n\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003",
    "\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003",
    "\u00dd\u0003\u00dd\u0003\u00dd\u0007\u00dd\u1332\n\u00dd\f\u00dd\u000e",
    "\u00dd\u1335\u000b\u00dd\u0005\u00dd\u1337\n\u00dd\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0005\u00de\u1341\n\u00de\u0003\u00de\u0003\u00de\u0005\u00de",
    "\u1345\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0005",
    "\u00de\u134b\n\u00de\u0003\u00de\u0005\u00de\u134e\n\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0005\u00de\u1353\n\u00de\u0003\u00de\u0003",
    "\u00de\u0005\u00de\u1357\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0005\u00de\u135e\n\u00de\u0003\u00de\u0005",
    "\u00de\u1361\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0005\u00de\u1367\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0005\u00de\u137f\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0005\u00de\u138c\n\u00de\u0003\u00de\u0005",
    "\u00de\u138f\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0005\u00de\u1399\n",
    "\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0005\u00de\u13a1\n\u00de\u0003\u00de\u0003\u00de\u0005\u00de",
    "\u13a5\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0005\u00de\u13ac\n\u00de\u0003\u00de\u0005\u00de\u13af\n\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0007\u00de",
    "\u13b6\n\u00de\f\u00de\u000e\u00de\u13b9\u000b\u00de\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0005\u00de\u13be\n\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0005\u00de\u13c4\n\u00de\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0005\u00de\u13ce\n\u00de\u0005\u00de\u13d0\n\u00de\u0003\u00df",
    "\u0003\u00df\u0003\u00df\u0003\u00df\u0005\u00df\u13d6\n\u00df\u0003",
    "\u00df\u0005\u00df\u13d9\n\u00df\u0003\u00df\u0005\u00df\u13dc\n\u00df",
    "\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0",
    "\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0005\u00e0\u13e8\n",
    "\u00e0\u0003\u00e0\u0005\u00e0\u13eb\n\u00e0\u0003\u00e1\u0003\u00e1",
    "\u0003\u00e1\u0003\u00e1\u0005\u00e1\u13f1\n\u00e1\u0003\u00e2\u0005",
    "\u00e2\u13f4\n\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2",
    "\u0003\u00e2\u0003\u00e2\u0005\u00e2\u13fc\n\u00e2\u0003\u00e2\u0003",
    "\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0005\u00e2\u1404",
    "\n\u00e2\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0005\u00e3",
    "\u140a\n\u00e3\u0003\u00e3\u0003\u00e3\u0005\u00e3\u140e\n\u00e3\u0003",
    "\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003",
    "\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0005",
    "\u00e4\u141c\n\u00e4\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e6",
    "\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0007\u00e6\u1426\n",
    "\u00e6\f\u00e6\u000e\u00e6\u1429\u000b\u00e6\u0003\u00e6\u0003\u00e6",
    "\u0003\u00e6\u0003\u00e6\u0005\u00e6\u142f\n\u00e6\u0003\u00e6\u0005",
    "\u00e6\u1432\n\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e7",
    "\u0003\u00e7\u0005\u00e7\u1439\n\u00e7\u0003\u00e7\u0003\u00e7\u0003",
    "\u00e7\u0007\u00e7\u143e\n\u00e7\f\u00e7\u000e\u00e7\u1441\u000b\u00e7",
    "\u0003\u00e8\u0003\u00e8\u0005\u00e8\u1445\n\u00e8\u0003\u00e8\u0006",
    "\u00e8\u1448\n\u00e8\r\u00e8\u000e\u00e8\u1449\u0003\u00e9\u0003\u00e9",
    "\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0007\u00e9",
    "\u1453\n\u00e9\f\u00e9\u000e\u00e9\u1456\u000b\u00e9\u0003\u00ea\u0003",
    "\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00eb\u0003\u00eb\u0003\u00ec\u0003",
    "\u00ec\u0005\u00ec\u1460\n\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec",
    "\u0003\u00ec\u0005\u00ec\u1466\n\u00ec\u0003\u00ed\u0003\u00ed\u0003",
    "\u00ed\u0005\u00ed\u146b\n\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed",
    "\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed",
    "\u0003\u00ed\u0003\u00ed\u0005\u00ed\u1478\n\u00ed\u0005\u00ed\u147a",
    "\n\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0005\u00ed\u147f\n\u00ed",
    "\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0005\u00ed\u1484\n\u00ed\u0005",
    "\u00ed\u1486\n\u00ed\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee",
    "\u0003\u00ee\u0005\u00ee\u148d\n\u00ee\u0003\u00ef\u0003\u00ef\u0003",
    "\u00ef\u0003\u00ef\u0003\u00ef\u0005\u00ef\u1494\n\u00ef\u0003\u00ef",
    "\u0005\u00ef\u1497\n\u00ef\u0003\u00ef\u0005\u00ef\u149a\n\u00ef\u0003",
    "\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0005\u00ef\u14a0\n\u00ef",
    "\u0003\u00ef\u0003\u00ef\u0005\u00ef\u14a4\n\u00ef\u0003\u00f0\u0003",
    "\u00f0\u0003\u00f0\u0003\u00f0\u0005\u00f0\u14aa\n\u00f0\u0003\u00f1",
    "\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0005\u00f1\u14b0\n\u00f1\u0003",
    "\u00f1\u0003\u00f1\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f3\u0003",
    "\u00f3\u0003\u00f3\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0005\u00f4\u14bd",
    "\n\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0005\u00f4\u14c2\n\u00f4",
    "\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0007\u00f4\u14c8\n",
    "\u00f4\f\u00f4\u000e\u00f4\u14cb\u000b\u00f4\u0005\u00f4\u14cd\n\u00f4",
    "\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0005\u00f5\u14d2\n\u00f5\u0003",
    "\u00f5\u0003\u00f5\u0003\u00f5\u0005\u00f5\u14d7\n\u00f5\u0003\u00f5",
    "\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0007\u00f5\u14dd\n\u00f5\f\u00f5",
    "\u000e\u00f5\u14e0\u000b\u00f5\u0005\u00f5\u14e2\n\u00f5\u0003\u00f6",
    "\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0005\u00f6\u14e8\n\u00f6\u0003",
    "\u00f7\u0003\u00f7\u0005\u00f7\u14ec\n\u00f7\u0003\u00f7\u0003\u00f7",
    "\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7",
    "\u0003\u00f7\u0007\u00f7\u14f7\n\u00f7\f\u00f7\u000e\u00f7\u14fa\u000b",
    "\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0005\u00f7\u14ff\n\u00f7",
    "\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7",
    "\u0003\u00f7\u0003\u00f7\u0007\u00f7\u1509\n\u00f7\f\u00f7\u000e\u00f7",
    "\u150c\u000b\u00f7\u0005\u00f7\u150e\n\u00f7\u0003\u00f8\u0003\u00f8",
    "\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0005\u00f9",
    "\u1517\n\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0005\u00f9\u151c",
    "\n\u00f9\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0005\u00fa",
    "\u1522\n\u00fa\u0003\u00fb\u0003\u00fb\u0003\u00fc\u0003\u00fc\u0003",
    "\u00fc\u0005\u00fc\u1529\n\u00fc\u0005\u00fc\u152b\n\u00fc\u0003\u00fd",
    "\u0003\u00fd\u0005\u00fd\u152f\n\u00fd\u0003\u00fd\u0003\u00fd\u0003",
    "\u00fd\u0003\u00fd\u0005\u00fd\u1535\n\u00fd\u0003\u00fd\u0005\u00fd",
    "\u1538\n\u00fd\u0003\u00fe\u0003\u00fe\u0003\u00ff\u0003\u00ff\u0003",
    "\u0100\u0003\u0100\u0003\u0100\u0003\u0100\u0005\u0100\u1542\n\u0100",
    "\u0003\u0101\u0003\u0101\u0005\u0101\u1546\n\u0101\u0003\u0102\u0003",
    "\u0102\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003",
    "\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003",
    "\u0103\u0003\u0103\u0003\u0103\u0006\u0103\u1558\n\u0103\r\u0103\u000e",
    "\u0103\u1559\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104",
    "\u0005\u0104\u1561\n\u0104\u0005\u0104\u1563\n\u0104\u0003\u0105\u0003",
    "\u0105\u0003\u0105\u0006\u0105\u1568\n\u0105\r\u0105\u000e\u0105\u1569",
    "\u0005\u0105\u156c\n\u0105\u0003\u0106\u0003\u0106\u0005\u0106\u1570",
    "\n\u0106\u0003\u0107\u0003\u0107\u0003\u0107\u0005\u0107\u1575\n\u0107",
    "\u0003\u0108\u0003\u0108\u0003\u0108\u0003\u0108\u0003\u0108\u0003\u0108",
    "\u0003\u0108\u0003\u0108\u0003\u0108\u0005\u0108\u1580\n\u0108\u0003",
    "\u0109\u0003\u0109\u0003\u0109\u0005\u0109\u1585\n\u0109\u0003\u010a",
    "\u0003\u010a\u0003\u010b\u0003\u010b\u0005\u010b\u158b\n\u010b\u0003",
    "\u010c\u0005\u010c\u158e\n\u010c\u0003\u010c\u0003\u010c\u0005\u010c",
    "\u1592\n\u010c\u0003\u010c\u0006\u010c\u1595\n\u010c\r\u010c\u000e\u010c",
    "\u1596\u0003\u010c\u0005\u010c\u159a\n\u010c\u0003\u010c\u0003\u010c",
    "\u0005\u010c\u159e\n\u010c\u0003\u010c\u0003\u010c\u0005\u010c\u15a2",
    "\n\u010c\u0005\u010c\u15a4\n\u010c\u0003\u010d\u0003\u010d\u0003\u010e",
    "\u0005\u010e\u15a9\n\u010e\u0003\u010e\u0003\u010e\u0003\u010f\u0005",
    "\u010f\u15ae\n\u010f\u0003\u010f\u0003\u010f\u0003\u0110\u0003\u0110",
    "\u0003\u0110\u0003\u0110\u0003\u0110\u0003\u0110\u0003\u0110\u0003\u0110",
    "\u0003\u0110\u0005\u0110\u15bb\n\u0110\u0003\u0110\u0005\u0110\u15be",
    "\n\u0110\u0003\u0111\u0003\u0111\u0005\u0111\u15c2\n\u0111\u0003\u0111",
    "\u0005\u0111\u15c5\n\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0005",
    "\u0111\u15ca\n\u0111\u0003\u0111\u0005\u0111\u15cd\n\u0111\u0003\u0111",
    "\u0003\u0111\u0005\u0111\u15d1\n\u0111\u0003\u0111\u0003\u0111\u0003",
    "\u0111\u0005\u0111\u15d6\n\u0111\u0003\u0111\u0005\u0111\u15d9\n\u0111",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u15de\n\u0111\u0003",
    "\u0111\u0005\u0111\u15e1\n\u0111\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0005\u0111\u15e7\n\u0111\u0003\u0111\u0005\u0111\u15ea",
    "\n\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u15ee\n\u0111\u0003\u0111",
    "\u0005\u0111\u15f1\n\u0111\u0003\u0111\u0005\u0111\u15f4\n\u0111\u0003",
    "\u0111\u0003\u0111\u0005\u0111\u15f8\n\u0111\u0003\u0111\u0005\u0111",
    "\u15fb\n\u0111\u0003\u0111\u0005\u0111\u15fe\n\u0111\u0003\u0111\u0003",
    "\u0111\u0005\u0111\u1602\n\u0111\u0003\u0111\u0005\u0111\u1605\n\u0111",
    "\u0003\u0111\u0005\u0111\u1608\n\u0111\u0003\u0111\u0005\u0111\u160b",
    "\n\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u160f\n\u0111\u0003\u0111",
    "\u0005\u0111\u1612\n\u0111\u0003\u0111\u0005\u0111\u1615\n\u0111\u0003",
    "\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u161a\n\u0111\u0003\u0111",
    "\u0003\u0111\u0003\u0111\u0005\u0111\u161f\n\u0111\u0003\u0111\u0003",
    "\u0111\u0003\u0111\u0005\u0111\u1624\n\u0111\u0003\u0111\u0005\u0111",
    "\u1627\n\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u162c",
    "\n\u0111\u0003\u0111\u0005\u0111\u162f\n\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0005\u0111\u1634\n\u0111\u0003\u0111\u0005\u0111\u1637",
    "\n\u0111\u0003\u0111\u0003\u0111\u0005\u0111\u163b\n\u0111\u0003\u0111",
    "\u0003\u0111\u0005\u0111\u163f\n\u0111\u0003\u0112\u0003\u0112\u0003",
    "\u0112\u0003\u0112\u0007\u0112\u1645\n\u0112\f\u0112\u000e\u0112\u1648",
    "\u000b\u0112\u0003\u0112\u0003\u0112\u0003\u0113\u0003\u0113\u0005\u0113",
    "\u164e\n\u0113\u0003\u0113\u0003\u0113\u0005\u0113\u1652\n\u0113\u0003",
    "\u0113\u0003\u0113\u0003\u0113\u0005\u0113\u1657\n\u0113\u0003\u0113",
    "\u0005\u0113\u165a\n\u0113\u0003\u0113\u0003\u0113\u0003\u0113\u0005",
    "\u0113\u165f\n\u0113\u0003\u0113\u0003\u0113\u0005\u0113\u1663\n\u0113",
    "\u0005\u0113\u1665\n\u0113\u0003\u0114\u0003\u0114\u0003\u0114\u0003",
    "\u0114\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0005\u0116\u1675",
    "\n\u0116\u0003\u0116\u0003\u0116\u0003\u0117\u0003\u0117\u0003\u0117",
    "\u0007\u0117\u167c\n\u0117\f\u0117\u000e\u0117\u167f\u000b\u0117\u0003",
    "\u0118\u0003\u0118\u0003\u0118\u0007\u0118\u1684\n\u0118\f\u0118\u000e",
    "\u0118\u1687\u000b\u0118\u0003\u0119\u0003\u0119\u0003\u0119\u0003\u0119",
    "\u0007\u0119\u168d\n\u0119\f\u0119\u000e\u0119\u1690\u000b\u0119\u0003",
    "\u0119\u0003\u0119\u0003\u011a\u0003\u011a\u0003\u011a\u0007\u011a\u1697",
    "\n\u011a\f\u011a\u000e\u011a\u169a\u000b\u011a\u0003\u011b\u0003\u011b",
    "\u0003\u011b\u0007\u011b\u169f\n\u011b\f\u011b\u000e\u011b\u16a2\u000b",
    "\u011b\u0003\u011c\u0003\u011c\u0003\u011c\u0007\u011c\u16a7\n\u011c",
    "\f\u011c\u000e\u011c\u16aa\u000b\u011c\u0003\u011d\u0003\u011d\u0003",
    "\u011d\u0007\u011d\u16af\n\u011d\f\u011d\u000e\u011d\u16b2\u000b\u011d",
    "\u0003\u011e\u0003\u011e\u0003\u011e\u0007\u011e\u16b7\n\u011e\f\u011e",
    "\u000e\u011e\u16ba\u000b\u011e\u0003\u011f\u0003\u011f\u0005\u011f\u16be",
    "\n\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f",
    "\u0005\u011f\u16c5\n\u011f\u0005\u011f\u16c7\n\u011f\u0003\u0120\u0003",
    "\u0120\u0003\u0120\u0005\u0120\u16cc\n\u0120\u0003\u0120\u0005\u0120",
    "\u16cf\n\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u16d4",
    "\n\u0120\u0003\u0120\u0005\u0120\u16d7\n\u0120\u0003\u0121\u0003\u0121",
    "\u0005\u0121\u16db\n\u0121\u0003\u0122\u0003\u0122\u0003\u0122\u0003",
    "\u0123\u0003\u0123\u0003\u0123\u0003\u0123\u0003\u0124\u0003\u0124\u0003",
    "\u0124\u0003\u0124\u0003\u0124\u0005\u0124\u16e9\n\u0124\u0003\u0124",
    "\u0003\u0124\u0003\u0124\u0003\u0124\u0003\u0124\u0005\u0124\u16f0\n",
    "\u0124\u0003\u0124\u0003\u0124\u0003\u0124\u0005\u0124\u16f5\n\u0124",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0006\u0125\u1715\n\u0125\r\u0125\u000e\u0125\u1716\u0003\u0125\u0003",
    "\u0125\u0005\u0125\u171b\n\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0006\u0125\u1721\n\u0125\r\u0125\u000e\u0125\u1722\u0003",
    "\u0125\u0003\u0125\u0005\u0125\u1727\n\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125",
    "\u1730\n\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0005\u0125\u1738\n\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0005\u0125\u173d\n\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u1745\n\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u174a\n\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u174f\n\u0125\u0005\u0125",
    "\u1751\n\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u175a\n\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0005\u0125\u175f\n\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u1767",
    "\n\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u176c\n\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0005\u0125\u1774\n\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u177c\n\u0125\u0003\u0125",
    "\u0005\u0125\u177f\n\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u1789",
    "\n\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u1794\n",
    "\u0125\u0003\u0126\u0003\u0126\u0003\u0126\u0003\u0126\u0003\u0126\u0003",
    "\u0127\u0003\u0127\u0003\u0127\u0003\u0127\u0007\u0127\u179f\n\u0127",
    "\f\u0127\u000e\u0127\u17a2\u000b\u0127\u0003\u0127\u0003\u0127\u0003",
    "\u0127\u0003\u0127\u0003\u0127\u0005\u0127\u17a9\n\u0127\u0003\u0128",
    "\u0003\u0128\u0005\u0128\u17ad\n\u0128\u0003\u0129\u0003\u0129\u0003",
    "\u0129\u0005\u0129\u17b2\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u17bb\n",
    "\u0129\u0003\u0129\u0005\u0129\u17be\n\u0129\u0003\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0005\u0129\u17ca\n\u0129\u0003\u0129\u0003",
    "\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u17d2",
    "\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0003\u0129\u0007\u0129\u17da\n\u0129\f\u0129\u000e\u0129\u17dd\u000b",
    "\u0129\u0005\u0129\u17df\n\u0129\u0003\u0129\u0003\u0129\u0005\u0129",
    "\u17e3\n\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u17e7\n\u0129\u0003",
    "\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003",
    "\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003",
    "\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003",
    "\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0005\u012a\u1800",
    "\n\u012a\u0003\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0003\u012b",
    "\u0003\u012c\u0003\u012c\u0003\u012c\u0003\u012c\u0005\u012c\u180b\n",
    "\u012c\u0003\u012c\u0003\u012c\u0003\u012c\u0003\u012c\u0003\u012c\u0005",
    "\u012c\u1812\n\u012c\u0007\u012c\u1814\n\u012c\f\u012c\u000e\u012c\u1817",
    "\u000b\u012c\u0003\u012d\u0003\u012d\u0003\u012d\u0003\u012d\u0005\u012d",
    "\u181d\n\u012d\u0003\u012e\u0003\u012e\u0003\u012e\u0003\u012e\u0003",
    "\u012e\u0003\u012e\u0005\u012e\u1825\n\u012e\u0003\u012e\u0003\u012e",
    "\u0003\u012e\u0005\u012e\u182a\n\u012e\u0003\u012e\u0003\u012e\u0003",
    "\u012e\u0003\u012e\u0007\u012e\u1830\n\u012e\f\u012e\u000e\u012e\u1833",
    "\u000b\u012e\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f\u1838\n",
    "\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003",
    "\u012f\u0003\u012f\u0003\u012f\u0005\u012f\u1842\n\u012f\u0003\u012f",
    "\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f",
    "\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f\u184f\n",
    "\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f\u1855",
    "\n\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f",
    "\u185b\n\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003",
    "\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003",
    "\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f\u186b\n\u012f",
    "\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f\u1871\n",
    "\u012f\u0007\u012f\u1873\n\u012f\f\u012f\u000e\u012f\u1876\u000b\u012f",
    "\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130",
    "\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130",
    "\u0003\u0130\u0003\u0130\u0007\u0130\u1886\n\u0130\f\u0130\u000e\u0130",
    "\u1889\u000b\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003",
    "\u0130\u0003\u0130\u0003\u0130\u0006\u0130\u1892\n\u0130\r\u0130\u000e",
    "\u0130\u1893\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130",
    "\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130",
    "\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0005\u0130\u18a5\n",
    "\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003",
    "\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0007",
    "\u0130\u18b2\n\u0130\f\u0130\u000e\u0130\u18b5\u000b\u0130\u0003\u0131",
    "\u0003\u0131\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132",
    "\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132",
    "\u0003\u0132\u0003\u0132\u0003\u0132\u0005\u0132\u18c7\n\u0132\u0003",
    "\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003",
    "\u0133\u0005\u0133\u18d0\n\u0133\u0003\u0134\u0003\u0134\u0003\u0134",
    "\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0134\u0005\u0134\u18d9\n",
    "\u0134\u0003\u0135\u0003\u0135\u0003\u0136\u0003\u0136\u0003\u0137\u0003",
    "\u0137\u0003\u0138\u0003\u0138\u0003\u0139\u0003\u0139\u0003\u013a\u0003",
    "\u013a\u0003\u013b\u0003\u013b\u0003\u013c\u0003\u013c\u0003\u013c\u0002",
    "\u0005\u025a\u025c\u025e\u013d\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e",
    "\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6",
    "\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be",
    "\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6",
    "\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee",
    "\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106",
    "\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e",
    "\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136",
    "\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e",
    "\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166",
    "\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e",
    "\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196",
    "\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae",
    "\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6",
    "\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de",
    "\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6",
    "\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e",
    "\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226",
    "\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e",
    "\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256",
    "\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e",
    "\u0270\u0272\u0274\u0276\u0002\u0080\u0004\u0002%%\u0089\u0089\u0004",
    "\u0002\u01c5\u01c5\u01ca\u01ca\u0005\u0002@@\u0090\u0090\u00a5\u00a5",
    "\u0005\u0002((\u0142\u0142\u0181\u0181\u0006\u0002((\u0162\u0162\u01c4",
    "\u01c4\u020a\u020a\u0004\u0002\u01bb\u01bb\u040d\u040d\u0004\u0002H",
    "H\u0081\u0081\u0004\u0002\u000f\u000f\u0112\u0112\u0005\u0002**NN\u00a8",
    "\u00a8\u0004\u0002\u016f\u016f\u01dc\u01dc\u0005\u0002\u01b3\u01b3\u0230",
    "\u0230\u0237\u0237\u0004\u0002\u0149\u0149\u0186\u0186\u0004\u0002\u0124",
    "\u0124\u0194\u0194\u0004\u0002\u0122\u0122\u0178\u0178\u0005\u0002I",
    "IMMrr\u0005\u0002((\u0153\u0153\u016d\u016d\u0005\u0002((\u014f\u014f",
    "\u02ac\u02ac\u0004\u0002\u0224\u0224\u0245\u0245\u0004\u0002JJTT\u0005",
    "\u0002\u0171\u0171\u01d3\u01d3\u020c\u020c\u0004\u0002@@\u0090\u0090",
    "\u0003\u0002\u0128\u0129\u0003\u0002\u0403\u0404\u0004\u0002\u040d\u040d",
    "\u0415\u0415\u0005\u0002\u016c\u016c\u018f\u018f\u01c2\u01c2\u0004\u0002",
    "((\u0403\u0404\b\u0002((\u0135\u0135\u0137\u0137\u0153\u0153\u016d\u016d",
    "\u01e9\u01e9\u0003\u0002\u0404\u0405\u0004\u0002\u0007\u000711\u0004",
    "\u0002\u0185\u0185\u0246\u0246\u0004\u0002\r\r\u009f\u009f\u0004\u0002",
    "\u00b0\u00b0\u0249\u0249\u0004\u0002\u0014\u0014\u0084\u0084\u0005\u0002",
    "))FFaa\u0004\u0002aa\u0139\u0139\u0004\u0002\u0130\u0130\u0169\u0169",
    "\u0004\u0002]]\u0202\u0202\u0004\u0002))aa\u0004\u0002\b\b//\u0004\u0002",
    "\u00ac\u00ac\u0242\u0242\u0006\u0002\u016c\u016c\u018f\u018f\u01c1\u01c1",
    "\u01df\u01df\u0004\u0002\u016c\u016c\u01c1\u01c1\u0004\u0002\u000e\u000e",
    "++\u0005\u0002==HH\u00aa\u00aa\u0004\u0002!!LL\u0004\u0002YY\u0087\u0087",
    "\u0004\u0002\b\b/0\u0003\u0002\u0219\u021a\u0004\u0002\u0174\u0174\u0208",
    "\u0208\u0004\u0002\u00d2\u00d2\u0197\u0197\u0007\u0002bb\u019c\u019d",
    "\u019f\u019f\u01a3\u01ab\u01eb\u01eb\u0006\u0002\u0199\u019a\u019e\u019e",
    "\u01a0\u01a1\u01ec\u01ec\u0005\u0002cc\u0198\u0198\u01a2\u01a2\u0004",
    "\u0002\u0188\u0188\u021b\u021b\u0004\u0002\u0215\u0215\u0217\u0217\u0004",
    "\u0002\u011c\u011c\u021c\u021c\u0004\u0002SS\u01fa\u01fa\u0004\u0002",
    "11\u0147\u0147\u0005\u0002\u001e\u001e88\u00a3\u00a3\u0005\u0002ww\u009c",
    "\u009c\u0172\u0172\u0004\u0002__\u00a6\u00a6\u0004\u0002\u012c\u012c",
    "\u020d\u020d\u0004\u0002&&\u0244\u0244\u0004\u0002ii\u0194\u0194\u0004",
    "\u0002\u0165\u0165\u01e5\u01e5\u0006\u0002\u00be\u00be\u00c0\u00c0\u00c6",
    "\u00c6\u0225\u0225\u0004\u0002\u03e4\u03e4\u03f5\u03f5\u0004\u0002\u011d",
    "\u011d\u01ed\u01ed\u0004\u0002??II\b\u0002ww\u009c\u009c\u00a1\u00a1",
    "\u015e\u015e\u0172\u0172\u0244\u0244\u0004\u0002\u01ba\u01ba\u0221\u0221",
    "\u0004\u0002\u015b\u015b\u0248\u0248\u0004\u0002ww\u0172\u0172\u0005",
    "\u0002JJUU\u017f\u017f\u0005\u0002\u0174\u0174\u0194\u0194\u0208\u0208",
    "\u0004\u0002\u0221\u0221\u0243\u0243\u0004\u0002\u013a\u013a\u01e4\u01e4",
    "\b\u0002\u00d2\u00d2\u0158\u0158\u015a\u015a\u0173\u0173\u01ea\u01ea",
    "\u020e\u020e\u0004\u0002+,99\u0005\u0002\u0165\u0165\u01d5\u01d5\u0308",
    "\u0308\u0004\u0002\u018c\u018c\u0232\u0232\f\u0002\u012b\u012b\u0132",
    "\u0132\u013c\u013e\u0144\u0144\u01b4\u01b4\u01bc\u01bc\u0226\u0226\u022d",
    "\u022d\u02d8\u02d8\u037e\u037e\u0004\u0002\"\"\u0099\u0099\u0004\u0002",
    "kk\u0376\u0376\r\u0002\u012b\u012b\u0132\u0132\u013c\u013e\u0144\u0144",
    "\u01b4\u01b4\u01bc\u01bc\u01fb\u01fb\u0226\u0226\u022d\u022d\u02d8\u02d8",
    "\u037e\u037e\u0005\u0002\u040d\u040d\u0415\u0415\u0417\u0417\u0003\u0002",
    "\u0418\u0419\u0005\u0002\u02a7\u02b2\u040d\u040d\u0415\u0416\u0004\u0002",
    "\u0403\u0405\u040e\u040e\u0004\u0002::\u00a2\u00a2\u0004\u0002jj\u0411",
    "\u0411\u0007\u0002\u0018\u0018\u00ce\u00d0\u00d7\u00d7\u00d9\u00dc\u01bf",
    "\u01bf\u0004\u0002\u0018\u0018\u00cf\u00cf\u0004\u0002\u0018\u0018\u00ce",
    "\u00ce\u0003\u0002\u00b4\u00bf\u0004\u0002\u00a7\u00a7\u020b\u020b\u0004",
    "\u0002\u00c3\u00c8\u016d\u016d\u0007\u0002\u00c9\u00c9\u00d4\u00d6\u00d8",
    "\u00d8\u00df\u00df\u0120\u0121\u0005\u0002\u00ca\u00cd\u00d2\u00d3\u011e",
    "\u011e\u0004\u0002\u008c\u008c\u00dd\u00dd\u0004\u0002\u018c\u018c\u02b7",
    "\u02bf\u0004\u0002\u00d2\u00d2\u01bf\u01bf\u0005\u0002\u00c9\u00ca\u00cc",
    "\u00cc\u018c\u018c\u0004\u0002\u00ff\u0100\u0106\u0106\u0004\u0002#",
    "#\u00fd\u0100\u0003\u0002\u0109\u010a\u0005\u0002\u0011\u0011WW\u00a0",
    "\u00a0\u0004\u0002\u00ce\u00ce\u00d2\u00d2\u0004\u0002\u00c9\u00ca\u00cc",
    "\u00cc\u0005\u0002\u000e\u000e++\u0374\u0374\u0005\u0002\u00ed\u00ed",
    "\u00f3\u00f4\u00f9\u00f9\u0005\u0002\u00ee\u00f0\u00f5\u00f8\u00fa\u00fc",
    "\u0004\u0002\u01c8\u01c8\u01d6\u01d6\u0004\u0002hh\u03f8\u03f8\u0005",
    "\u0002::\u00a2\u00a2\u023b\u023b\u0004\u0002}}\u0088\u0088\u0005\u0002",
    "\b\b\u0115\u0115\u0211\u0211\u0006\u0002hh\u03f0\u03f0\u03f2\u03f2\u03f8",
    "\u03f9\u0003\u0002\u03ed\u03f4\u0003\u0002\u027f\u02a6\u0003\u0002\u02b3",
    "\u02b6\u0003\u0002\u025c\u0264\u0003\u0002\u0254\u025b\u0005\u0002\u00c9",
    "\u00cd\u00da\u00da\u00dd\u00dd\u0010\u0002\"\"..kk\u0099\u0099\u00df",
    "\u00df\u0110\u0184\u0186\u0223\u0225\u0244\u0247\u024e\u0253\u0253\u0266",
    "\u027e\u02ac\u02ac\u02d8\u02d8\u037e\u037e\u0012\u0002%%YY\u0087\u0087",
    "\u00c9\u00cb\u00cd\u00cd\u00eb\u00ec\u00f1\u00f1\u0108\u0108\u0185\u0185",
    "\u0246\u0246\u0254\u025b\u0278\u0278\u02b7\u02b7\u02ba\u02d7\u02d9\u037d",
    "\u037f\u03e3\u0002\u1d4d\u0002\u0279\u0003\u0002\u0002\u0002\u0004\u028a",
    "\u0003\u0002\u0002\u0002\u0006\u029e\u0003\u0002\u0002\u0002\b\u02a0",
    "\u0003\u0002\u0002\u0002\n\u02c5\u0003\u0002\u0002\u0002\f\u02d1\u0003",
    "\u0002\u0002\u0002\u000e\u02dc\u0003\u0002\u0002\u0002\u0010\u02ed\u0003",
    "\u0002\u0002\u0002\u0012\u02f2\u0003\u0002\u0002\u0002\u0014\u02fe\u0003",
    "\u0002\u0002\u0002\u0016\u0319\u0003\u0002\u0002\u0002\u0018\u0322\u0003",
    "\u0002\u0002\u0002\u001a\u0324\u0003\u0002\u0002\u0002\u001c\u0330\u0003",
    "\u0002\u0002\u0002\u001e\u034e\u0003\u0002\u0002\u0002 \u0372\u0003",
    "\u0002\u0002\u0002\"\u03a5\u0003\u0002\u0002\u0002$\u03bf\u0003\u0002",
    "\u0002\u0002&\u03dd\u0003\u0002\u0002\u0002(\u043e\u0003\u0002\u0002",
    "\u0002*\u0440\u0003\u0002\u0002\u0002,\u0452\u0003\u0002\u0002\u0002",
    ".\u048f\u0003\u0002\u0002\u00020\u04a2\u0003\u0002\u0002\u00022\u04dd",
    "\u0003\u0002\u0002\u00024\u04df\u0003\u0002\u0002\u00026\u050b\u0003",
    "\u0002\u0002\u00028\u0511\u0003\u0002\u0002\u0002:\u0513\u0003\u0002",
    "\u0002\u0002<\u0528\u0003\u0002\u0002\u0002>\u052f\u0003\u0002\u0002",
    "\u0002@\u0531\u0003\u0002\u0002\u0002B\u0541\u0003\u0002\u0002\u0002",
    "D\u0544\u0003\u0002\u0002\u0002F\u0549\u0003\u0002\u0002\u0002H\u0563",
    "\u0003\u0002\u0002\u0002J\u0573\u0003\u0002\u0002\u0002L\u0575\u0003",
    "\u0002\u0002\u0002N\u0585\u0003\u0002\u0002\u0002P\u0587\u0003\u0002",
    "\u0002\u0002R\u05c1\u0003\u0002\u0002\u0002T\u0608\u0003\u0002\u0002",
    "\u0002V\u060a\u0003\u0002\u0002\u0002X\u0626\u0003\u0002\u0002\u0002",
    "Z\u062e\u0003\u0002\u0002\u0002\\\u064c\u0003\u0002\u0002\u0002^\u06de",
    "\u0003\u0002\u0002\u0002`\u06e0\u0003\u0002\u0002\u0002b\u06e3\u0003",
    "\u0002\u0002\u0002d\u072d\u0003\u0002\u0002\u0002f\u0744\u0003\u0002",
    "\u0002\u0002h\u07c9\u0003\u0002\u0002\u0002j\u07ce\u0003\u0002\u0002",
    "\u0002l\u07d0\u0003\u0002\u0002\u0002n\u07da\u0003\u0002\u0002\u0002",
    "p\u080f\u0003\u0002\u0002\u0002r\u0823\u0003\u0002\u0002\u0002t\u0825",
    "\u0003\u0002\u0002\u0002v\u0848\u0003\u0002\u0002\u0002x\u0851\u0003",
    "\u0002\u0002\u0002z\u0858\u0003\u0002\u0002\u0002|\u086f\u0003\u0002",
    "\u0002\u0002~\u0878\u0003\u0002\u0002\u0002\u0080\u0887\u0003\u0002",
    "\u0002\u0002\u0082\u089d\u0003\u0002\u0002\u0002\u0084\u08b1\u0003\u0002",
    "\u0002\u0002\u0086\u0a3c\u0003\u0002\u0002\u0002\u0088\u0a3e\u0003\u0002",
    "\u0002\u0002\u008a\u0a45\u0003\u0002\u0002\u0002\u008c\u0a4c\u0003\u0002",
    "\u0002\u0002\u008e\u0a63\u0003\u0002\u0002\u0002\u0090\u0a6b\u0003\u0002",
    "\u0002\u0002\u0092\u0a72\u0003\u0002\u0002\u0002\u0094\u0a79\u0003\u0002",
    "\u0002\u0002\u0096\u0a80\u0003\u0002\u0002\u0002\u0098\u0a8c\u0003\u0002",
    "\u0002\u0002\u009a\u0a96\u0003\u0002\u0002\u0002\u009c\u0a9d\u0003\u0002",
    "\u0002\u0002\u009e\u0aad\u0003\u0002\u0002\u0002\u00a0\u0ab7\u0003\u0002",
    "\u0002\u0002\u00a2\u0abb\u0003\u0002\u0002\u0002\u00a4\u0ac1\u0003\u0002",
    "\u0002\u0002\u00a6\u0acd\u0003\u0002\u0002\u0002\u00a8\u0acf\u0003\u0002",
    "\u0002\u0002\u00aa\u0ad6\u0003\u0002\u0002\u0002\u00ac\u0ad8\u0003\u0002",
    "\u0002\u0002\u00ae\u0b0b\u0003\u0002\u0002\u0002\u00b0\u0b55\u0003\u0002",
    "\u0002\u0002\u00b2\u0b90\u0003\u0002\u0002\u0002\u00b4\u0be8\u0003\u0002",
    "\u0002\u0002\u00b6\u0bec\u0003\u0002\u0002\u0002\u00b8\u0c00\u0003\u0002",
    "\u0002\u0002\u00ba\u0c02\u0003\u0002\u0002\u0002\u00bc\u0c0a\u0003\u0002",
    "\u0002\u0002\u00be\u0c12\u0003\u0002\u0002\u0002\u00c0\u0c14\u0003\u0002",
    "\u0002\u0002\u00c2\u0c32\u0003\u0002\u0002\u0002\u00c4\u0c69\u0003\u0002",
    "\u0002\u0002\u00c6\u0c72\u0003\u0002\u0002\u0002\u00c8\u0c86\u0003\u0002",
    "\u0002\u0002\u00ca\u0c92\u0003\u0002\u0002\u0002\u00cc\u0c96\u0003\u0002",
    "\u0002\u0002\u00ce\u0cb7\u0003\u0002\u0002\u0002\u00d0\u0ccc\u0003\u0002",
    "\u0002\u0002\u00d2\u0cd6\u0003\u0002\u0002\u0002\u00d4\u0cda\u0003\u0002",
    "\u0002\u0002\u00d6\u0cf3\u0003\u0002\u0002\u0002\u00d8\u0d1d\u0003\u0002",
    "\u0002\u0002\u00da\u0d1f\u0003\u0002\u0002\u0002\u00dc\u0d2e\u0003\u0002",
    "\u0002\u0002\u00de\u0d5c\u0003\u0002\u0002\u0002\u00e0\u0d66\u0003\u0002",
    "\u0002\u0002\u00e2\u0d70\u0003\u0002\u0002\u0002\u00e4\u0d9a\u0003\u0002",
    "\u0002\u0002\u00e6\u0d9c\u0003\u0002\u0002\u0002\u00e8\u0dad\u0003\u0002",
    "\u0002\u0002\u00ea\u0db3\u0003\u0002\u0002\u0002\u00ec\u0dc3\u0003\u0002",
    "\u0002\u0002\u00ee\u0dc7\u0003\u0002\u0002\u0002\u00f0\u0ded\u0003\u0002",
    "\u0002\u0002\u00f2\u0e13\u0003\u0002\u0002\u0002\u00f4\u0e21\u0003\u0002",
    "\u0002\u0002\u00f6\u0e29\u0003\u0002\u0002\u0002\u00f8\u0e2b\u0003\u0002",
    "\u0002\u0002\u00fa\u0e45\u0003\u0002\u0002\u0002\u00fc\u0e49\u0003\u0002",
    "\u0002\u0002\u00fe\u0e58\u0003\u0002\u0002\u0002\u0100\u0e5a\u0003\u0002",
    "\u0002\u0002\u0102\u0e66\u0003\u0002\u0002\u0002\u0104\u0e6a\u0003\u0002",
    "\u0002\u0002\u0106\u0e7b\u0003\u0002\u0002\u0002\u0108\u0e8c\u0003\u0002",
    "\u0002\u0002\u010a\u0e8f\u0003\u0002\u0002\u0002\u010c\u0e99\u0003\u0002",
    "\u0002\u0002\u010e\u0e9d\u0003\u0002\u0002\u0002\u0110\u0ea7\u0003\u0002",
    "\u0002\u0002\u0112\u0eaa\u0003\u0002\u0002\u0002\u0114\u0eaf\u0003\u0002",
    "\u0002\u0002\u0116\u0ec3\u0003\u0002\u0002\u0002\u0118\u0ec5\u0003\u0002",
    "\u0002\u0002\u011a\u0ed6\u0003\u0002\u0002\u0002\u011c\u0edf\u0003\u0002",
    "\u0002\u0002\u011e\u0ee8\u0003\u0002\u0002\u0002\u0120\u0eea\u0003\u0002",
    "\u0002\u0002\u0122\u0ef8\u0003\u0002\u0002\u0002\u0124\u0f03\u0003\u0002",
    "\u0002\u0002\u0126\u0f0c\u0003\u0002\u0002\u0002\u0128\u0f0f\u0003\u0002",
    "\u0002\u0002\u012a\u0f17\u0003\u0002\u0002\u0002\u012c\u0f30\u0003\u0002",
    "\u0002\u0002\u012e\u0f3c\u0003\u0002\u0002\u0002\u0130\u0f3f\u0003\u0002",
    "\u0002\u0002\u0132\u0f5f\u0003\u0002\u0002\u0002\u0134\u0f61\u0003\u0002",
    "\u0002\u0002\u0136\u0f63\u0003\u0002\u0002\u0002\u0138\u0f65\u0003\u0002",
    "\u0002\u0002\u013a\u0f67\u0003\u0002\u0002\u0002\u013c\u0f9c\u0003\u0002",
    "\u0002\u0002\u013e\u0f9e\u0003\u0002\u0002\u0002\u0140\u0fa4\u0003\u0002",
    "\u0002\u0002\u0142\u0fb8\u0003\u0002\u0002\u0002\u0144\u0fc6\u0003\u0002",
    "\u0002\u0002\u0146\u0fd1\u0003\u0002\u0002\u0002\u0148\u0fd3\u0003\u0002",
    "\u0002\u0002\u014a\u0fd9\u0003\u0002\u0002\u0002\u014c\u0fe3\u0003\u0002",
    "\u0002\u0002\u014e\u0fe7\u0003\u0002\u0002\u0002\u0150\u0fee\u0003\u0002",
    "\u0002\u0002\u0152\u0ff2\u0003\u0002\u0002\u0002\u0154\u0ff8\u0003\u0002",
    "\u0002\u0002\u0156\u0fff\u0003\u0002\u0002\u0002\u0158\u1005\u0003\u0002",
    "\u0002\u0002\u015a\u100b\u0003\u0002\u0002\u0002\u015c\u1010\u0003\u0002",
    "\u0002\u0002\u015e\u103f\u0003\u0002\u0002\u0002\u0160\u1054\u0003\u0002",
    "\u0002\u0002\u0162\u106d\u0003\u0002\u0002\u0002\u0164\u1070\u0003\u0002",
    "\u0002\u0002\u0166\u1076\u0003\u0002\u0002\u0002\u0168\u1086\u0003\u0002",
    "\u0002\u0002\u016a\u1095\u0003\u0002\u0002\u0002\u016c\u109b\u0003\u0002",
    "\u0002\u0002\u016e\u10b9\u0003\u0002\u0002\u0002\u0170\u10bb\u0003\u0002",
    "\u0002\u0002\u0172\u10c2\u0003\u0002\u0002\u0002\u0174\u10ce\u0003\u0002",
    "\u0002\u0002\u0176\u10d4\u0003\u0002\u0002\u0002\u0178\u10ed\u0003\u0002",
    "\u0002\u0002\u017a\u10f1\u0003\u0002\u0002\u0002\u017c\u10f5\u0003\u0002",
    "\u0002\u0002\u017e\u1100\u0003\u0002\u0002\u0002\u0180\u113e\u0003\u0002",
    "\u0002\u0002\u0182\u1176\u0003\u0002\u0002\u0002\u0184\u1178\u0003\u0002",
    "\u0002\u0002\u0186\u1185\u0003\u0002\u0002\u0002\u0188\u11b7\u0003\u0002",
    "\u0002\u0002\u018a\u11c9\u0003\u0002\u0002\u0002\u018c\u11fb\u0003\u0002",
    "\u0002\u0002\u018e\u11fd\u0003\u0002\u0002\u0002\u0190\u120a\u0003\u0002",
    "\u0002\u0002\u0192\u1215\u0003\u0002\u0002\u0002\u0194\u1230\u0003\u0002",
    "\u0002\u0002\u0196\u123a\u0003\u0002\u0002\u0002\u0198\u1244\u0003\u0002",
    "\u0002\u0002\u019a\u1246\u0003\u0002\u0002\u0002\u019c\u1250\u0003\u0002",
    "\u0002\u0002\u019e\u1253\u0003\u0002\u0002\u0002\u01a0\u12a1\u0003\u0002",
    "\u0002\u0002\u01a2\u12b3\u0003\u0002\u0002\u0002\u01a4\u12b5\u0003\u0002",
    "\u0002\u0002\u01a6\u12b9\u0003\u0002\u0002\u0002\u01a8\u12c0\u0003\u0002",
    "\u0002\u0002\u01aa\u12c9\u0003\u0002\u0002\u0002\u01ac\u12cf\u0003\u0002",
    "\u0002\u0002\u01ae\u12d6\u0003\u0002\u0002\u0002\u01b0\u12ec\u0003\u0002",
    "\u0002\u0002\u01b2\u12ee\u0003\u0002\u0002\u0002\u01b4\u12f9\u0003\u0002",
    "\u0002\u0002\u01b6\u12ff\u0003\u0002\u0002\u0002\u01b8\u1336\u0003\u0002",
    "\u0002\u0002\u01ba\u13cf\u0003\u0002\u0002\u0002\u01bc\u13db\u0003\u0002",
    "\u0002\u0002\u01be\u13ea\u0003\u0002\u0002\u0002\u01c0\u13f0\u0003\u0002",
    "\u0002\u0002\u01c2\u1403\u0003\u0002\u0002\u0002\u01c4\u140d\u0003\u0002",
    "\u0002\u0002\u01c6\u141b\u0003\u0002\u0002\u0002\u01c8\u141d\u0003\u0002",
    "\u0002\u0002\u01ca\u1420\u0003\u0002\u0002\u0002\u01cc\u1436\u0003\u0002",
    "\u0002\u0002\u01ce\u1442\u0003\u0002\u0002\u0002\u01d0\u144b\u0003\u0002",
    "\u0002\u0002\u01d2\u1457\u0003\u0002\u0002\u0002\u01d4\u145b\u0003\u0002",
    "\u0002\u0002\u01d6\u145d\u0003\u0002\u0002\u0002\u01d8\u1485\u0003\u0002",
    "\u0002\u0002\u01da\u148c\u0003\u0002\u0002\u0002\u01dc\u148e\u0003\u0002",
    "\u0002\u0002\u01de\u14a5\u0003\u0002\u0002\u0002\u01e0\u14ab\u0003\u0002",
    "\u0002\u0002\u01e2\u14b3\u0003\u0002\u0002\u0002\u01e4\u14b6\u0003\u0002",
    "\u0002\u0002\u01e6\u14b9\u0003\u0002\u0002\u0002\u01e8\u14ce\u0003\u0002",
    "\u0002\u0002\u01ea\u14e3\u0003\u0002\u0002\u0002\u01ec\u14e9\u0003\u0002",
    "\u0002\u0002\u01ee\u150f\u0003\u0002\u0002\u0002\u01f0\u151b\u0003\u0002",
    "\u0002\u0002\u01f2\u151d\u0003\u0002\u0002\u0002\u01f4\u1523\u0003\u0002",
    "\u0002\u0002\u01f6\u1525\u0003\u0002\u0002\u0002\u01f8\u152e\u0003\u0002",
    "\u0002\u0002\u01fa\u1539\u0003\u0002\u0002\u0002\u01fc\u153b\u0003\u0002",
    "\u0002\u0002\u01fe\u1541\u0003\u0002\u0002\u0002\u0200\u1545\u0003\u0002",
    "\u0002\u0002\u0202\u1547\u0003\u0002\u0002\u0002\u0204\u1549\u0003\u0002",
    "\u0002\u0002\u0206\u155b\u0003\u0002\u0002\u0002\u0208\u156b\u0003\u0002",
    "\u0002\u0002\u020a\u156f\u0003\u0002\u0002\u0002\u020c\u1574\u0003\u0002",
    "\u0002\u0002\u020e\u157f\u0003\u0002\u0002\u0002\u0210\u1584\u0003\u0002",
    "\u0002\u0002\u0212\u1586\u0003\u0002\u0002\u0002\u0214\u158a\u0003\u0002",
    "\u0002\u0002\u0216\u15a3\u0003\u0002\u0002\u0002\u0218\u15a5\u0003\u0002",
    "\u0002\u0002\u021a\u15a8\u0003\u0002\u0002\u0002\u021c\u15ad\u0003\u0002",
    "\u0002\u0002\u021e\u15bd\u0003\u0002\u0002\u0002\u0220\u163e\u0003\u0002",
    "\u0002\u0002\u0222\u1640\u0003\u0002\u0002\u0002\u0224\u1664\u0003\u0002",
    "\u0002\u0002\u0226\u1666\u0003\u0002\u0002\u0002\u0228\u166a\u0003\u0002",
    "\u0002\u0002\u022a\u1670\u0003\u0002\u0002\u0002\u022c\u1678\u0003\u0002",
    "\u0002\u0002\u022e\u1680\u0003\u0002\u0002\u0002\u0230\u1688\u0003\u0002",
    "\u0002\u0002\u0232\u1693\u0003\u0002\u0002\u0002\u0234\u169b\u0003\u0002",
    "\u0002\u0002\u0236\u16a3\u0003\u0002\u0002\u0002\u0238\u16ab\u0003\u0002",
    "\u0002\u0002\u023a\u16b3\u0003\u0002\u0002\u0002\u023c\u16c6\u0003\u0002",
    "\u0002\u0002\u023e\u16d6\u0003\u0002\u0002\u0002\u0240\u16da\u0003\u0002",
    "\u0002\u0002\u0242\u16dc\u0003\u0002\u0002\u0002\u0244\u16df\u0003\u0002",
    "\u0002\u0002\u0246\u16f4\u0003\u0002\u0002\u0002\u0248\u1793\u0003\u0002",
    "\u0002\u0002\u024a\u1795\u0003\u0002\u0002\u0002\u024c\u17a8\u0003\u0002",
    "\u0002\u0002\u024e\u17aa\u0003\u0002\u0002\u0002\u0250\u17e6\u0003\u0002",
    "\u0002\u0002\u0252\u17ff\u0003\u0002\u0002\u0002\u0254\u1801\u0003\u0002",
    "\u0002\u0002\u0256\u180a\u0003\u0002\u0002\u0002\u0258\u181c\u0003\u0002",
    "\u0002\u0002\u025a\u1829\u0003\u0002\u0002\u0002\u025c\u1834\u0003\u0002",
    "\u0002\u0002\u025e\u18a4\u0003\u0002\u0002\u0002\u0260\u18b6\u0003\u0002",
    "\u0002\u0002\u0262\u18c6\u0003\u0002\u0002\u0002\u0264\u18cf\u0003\u0002",
    "\u0002\u0002\u0266\u18d8\u0003\u0002\u0002\u0002\u0268\u18da\u0003\u0002",
    "\u0002\u0002\u026a\u18dc\u0003\u0002\u0002\u0002\u026c\u18de\u0003\u0002",
    "\u0002\u0002\u026e\u18e0\u0003\u0002\u0002\u0002\u0270\u18e2\u0003\u0002",
    "\u0002\u0002\u0272\u18e4\u0003\u0002\u0002\u0002\u0274\u18e6\u0003\u0002",
    "\u0002\u0002\u0276\u18e8\u0003\u0002\u0002\u0002\u0278\u027a\u0005\u0004",
    "\u0003\u0002\u0279\u0278\u0003\u0002\u0002\u0002\u0279\u027a\u0003\u0002",
    "\u0002\u0002\u027a\u027c\u0003\u0002\u0002\u0002\u027b\u027d\u0007\u03f1",
    "\u0002\u0002\u027c\u027b\u0003\u0002\u0002\u0002\u027c\u027d\u0003\u0002",
    "\u0002\u0002\u027d\u027e\u0003\u0002\u0002\u0002\u027e\u027f\u0007\u0002",
    "\u0002\u0003\u027f\u0003\u0003\u0002\u0002\u0002\u0280\u0282\u0005\u0006",
    "\u0004\u0002\u0281\u0283\u0007\u03f1\u0002\u0002\u0282\u0281\u0003\u0002",
    "\u0002\u0002\u0282\u0283\u0003\u0002\u0002\u0002\u0283\u0285\u0003\u0002",
    "\u0002\u0002\u0284\u0286\u0007\u0401\u0002\u0002\u0285\u0284\u0003\u0002",
    "\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u0289\u0003\u0002",
    "\u0002\u0002\u0287\u0289\u0005\b\u0005\u0002\u0288\u0280\u0003\u0002",
    "\u0002\u0002\u0288\u0287\u0003\u0002\u0002\u0002\u0289\u028c\u0003\u0002",
    "\u0002\u0002\u028a\u0288\u0003\u0002\u0002\u0002\u028a\u028b\u0003\u0002",
    "\u0002\u0002\u028b\u0295\u0003\u0002\u0002\u0002\u028c\u028a\u0003\u0002",
    "\u0002\u0002\u028d\u0292\u0005\u0006\u0004\u0002\u028e\u0290\u0007\u03f1",
    "\u0002\u0002\u028f\u028e\u0003\u0002\u0002\u0002\u028f\u0290\u0003\u0002",
    "\u0002\u0002\u0290\u0291\u0003\u0002\u0002\u0002\u0291\u0293\u0007\u0401",
    "\u0002\u0002\u0292\u028f\u0003\u0002\u0002\u0002\u0292\u0293\u0003\u0002",
    "\u0002\u0002\u0293\u0296\u0003\u0002\u0002\u0002\u0294\u0296\u0005\b",
    "\u0005\u0002\u0295\u028d\u0003\u0002\u0002\u0002\u0295\u0294\u0003\u0002",
    "\u0002\u0002\u0296\u0005\u0003\u0002\u0002\u0002\u0297\u029f\u0005\n",
    "\u0006\u0002\u0298\u029f\u0005\f\u0007\u0002\u0299\u029f\u0005\u000e",
    "\b\u0002\u029a\u029f\u0005\u0010\t\u0002\u029b\u029f\u0005\u0012\n\u0002",
    "\u029c\u029f\u0005\u0016\f\u0002\u029d\u029f\u0005\u0018\r\u0002\u029e",
    "\u0297\u0003\u0002\u0002\u0002\u029e\u0298\u0003\u0002\u0002\u0002\u029e",
    "\u0299\u0003\u0002\u0002\u0002\u029e\u029a\u0003\u0002\u0002\u0002\u029e",
    "\u029b\u0003\u0002\u0002\u0002\u029e\u029c\u0003\u0002\u0002\u0002\u029e",
    "\u029d\u0003\u0002\u0002\u0002\u029f\u0007\u0003\u0002\u0002\u0002\u02a0",
    "\u02a1\u0007\u0401\u0002\u0002\u02a1\t\u0003\u0002\u0002\u0002\u02a2",
    "\u02c6\u0005\u001a\u000e\u0002\u02a3\u02c6\u0005\u001c\u000f\u0002\u02a4",
    "\u02c6\u0005\u001e\u0010\u0002\u02a5\u02c6\u0005 \u0011\u0002\u02a6",
    "\u02c6\u0005\"\u0012\u0002\u02a7\u02c6\u0005$\u0013\u0002\u02a8\u02c6",
    "\u0005&\u0014\u0002\u02a9\u02c6\u0005(\u0015\u0002\u02aa\u02c6\u0005",
    "*\u0016\u0002\u02ab\u02c6\u0005,\u0017\u0002\u02ac\u02c6\u0005.\u0018",
    "\u0002\u02ad\u02c6\u00050\u0019\u0002\u02ae\u02c6\u0005r:\u0002\u02af",
    "\u02c6\u0005t;\u0002\u02b0\u02c6\u0005v<\u0002\u02b1\u02c6\u0005x=\u0002",
    "\u02b2\u02c6\u0005z>\u0002\u02b3\u02c6\u0005|?\u0002\u02b4\u02c6\u0005",
    "~@\u0002\u02b5\u02c6\u0005\u0080A\u0002\u02b6\u02c6\u0005\u0082B\u0002",
    "\u02b7\u02c6\u0005\u0084C\u0002\u02b8\u02c6\u0005\u0088E\u0002\u02b9",
    "\u02c6\u0005\u008aF\u0002\u02ba\u02c6\u0005\u008cG\u0002\u02bb\u02c6",
    "\u0005\u008eH\u0002\u02bc\u02c6\u0005\u0090I\u0002\u02bd\u02c6\u0005",
    "\u0092J\u0002\u02be\u02c6\u0005\u0094K\u0002\u02bf\u02c6\u0005\u0096",
    "L\u0002\u02c0\u02c6\u0005\u0098M\u0002\u02c1\u02c6\u0005\u009aN\u0002",
    "\u02c2\u02c6\u0005\u009cO\u0002\u02c3\u02c6\u0005\u009eP\u0002\u02c4",
    "\u02c6\u0005\u00a2R\u0002\u02c5\u02a2\u0003\u0002\u0002\u0002\u02c5",
    "\u02a3\u0003\u0002\u0002\u0002\u02c5\u02a4\u0003\u0002\u0002\u0002\u02c5",
    "\u02a5\u0003\u0002\u0002\u0002\u02c5\u02a6\u0003\u0002\u0002\u0002\u02c5",
    "\u02a7\u0003\u0002\u0002\u0002\u02c5\u02a8\u0003\u0002\u0002\u0002\u02c5",
    "\u02a9\u0003\u0002\u0002\u0002\u02c5\u02aa\u0003\u0002\u0002\u0002\u02c5",
    "\u02ab\u0003\u0002\u0002\u0002\u02c5\u02ac\u0003\u0002\u0002\u0002\u02c5",
    "\u02ad\u0003\u0002\u0002\u0002\u02c5\u02ae\u0003\u0002\u0002\u0002\u02c5",
    "\u02af\u0003\u0002\u0002\u0002\u02c5\u02b0\u0003\u0002\u0002\u0002\u02c5",
    "\u02b1\u0003\u0002\u0002\u0002\u02c5\u02b2\u0003\u0002\u0002\u0002\u02c5",
    "\u02b3\u0003\u0002\u0002\u0002\u02c5\u02b4\u0003\u0002\u0002\u0002\u02c5",
    "\u02b5\u0003\u0002\u0002\u0002\u02c5\u02b6\u0003\u0002\u0002\u0002\u02c5",
    "\u02b7\u0003\u0002\u0002\u0002\u02c5\u02b8\u0003\u0002\u0002\u0002\u02c5",
    "\u02b9\u0003\u0002\u0002\u0002\u02c5\u02ba\u0003\u0002\u0002\u0002\u02c5",
    "\u02bb\u0003\u0002\u0002\u0002\u02c5\u02bc\u0003\u0002\u0002\u0002\u02c5",
    "\u02bd\u0003\u0002\u0002\u0002\u02c5\u02be\u0003\u0002\u0002\u0002\u02c5",
    "\u02bf\u0003\u0002\u0002\u0002\u02c5\u02c0\u0003\u0002\u0002\u0002\u02c5",
    "\u02c1\u0003\u0002\u0002\u0002\u02c5\u02c2\u0003\u0002\u0002\u0002\u02c5",
    "\u02c3\u0003\u0002\u0002\u0002\u02c5\u02c4\u0003\u0002\u0002\u0002\u02c6",
    "\u000b\u0003\u0002\u0002\u0002\u02c7\u02d2\u0005\u00b4[\u0002\u02c8",
    "\u02d2\u0005\u00acW\u0002\u02c9\u02d2\u0005\u00b6\\\u0002\u02ca\u02d2",
    "\u0005\u00a6T\u0002\u02cb\u02d2\u0005\u00b2Z\u0002\u02cc\u02d2\u0005",
    "\u00a4S\u0002\u02cd\u02d2\u0005\u00aeX\u0002\u02ce\u02d2\u0005\u00b0",
    "Y\u0002\u02cf\u02d2\u0005\u00a8U\u0002\u02d0\u02d2\u0005\u00aaV\u0002",
    "\u02d1\u02c7\u0003\u0002\u0002\u0002\u02d1\u02c8\u0003\u0002\u0002\u0002",
    "\u02d1\u02c9\u0003\u0002\u0002\u0002\u02d1\u02ca\u0003\u0002\u0002\u0002",
    "\u02d1\u02cb\u0003\u0002\u0002\u0002\u02d1\u02cc\u0003\u0002\u0002\u0002",
    "\u02d1\u02cd\u0003\u0002\u0002\u0002\u02d1\u02ce\u0003\u0002\u0002\u0002",
    "\u02d1\u02cf\u0003\u0002\u0002\u0002\u02d1\u02d0\u0003\u0002\u0002\u0002",
    "\u02d2\r\u0003\u0002\u0002\u0002\u02d3\u02dd\u0005\u0100\u0081\u0002",
    "\u02d4\u02dd\u0005\u0102\u0082\u0002\u02d5\u02dd\u0005\u0104\u0083\u0002",
    "\u02d6\u02dd\u0005\u0106\u0084\u0002\u02d7\u02dd\u0005\u0108\u0085\u0002",
    "\u02d8\u02dd\u0005\u010a\u0086\u0002\u02d9\u02dd\u0005\u010c\u0087\u0002",
    "\u02da\u02dd\u0005\u010e\u0088\u0002\u02db\u02dd\u0005\u0110\u0089\u0002",
    "\u02dc\u02d3\u0003\u0002\u0002\u0002\u02dc\u02d4\u0003\u0002\u0002\u0002",
    "\u02dc\u02d5\u0003\u0002\u0002\u0002\u02dc\u02d6\u0003\u0002\u0002\u0002",
    "\u02dc\u02d7\u0003\u0002\u0002\u0002\u02dc\u02d8\u0003\u0002\u0002\u0002",
    "\u02dc\u02d9\u0003\u0002\u0002\u0002\u02dc\u02da\u0003\u0002\u0002\u0002",
    "\u02dc\u02db\u0003\u0002\u0002\u0002\u02dd\u000f\u0003\u0002\u0002\u0002",
    "\u02de\u02ee\u0005\u0120\u0091\u0002\u02df\u02ee\u0005\u0122\u0092\u0002",
    "\u02e0\u02ee\u0005\u0124\u0093\u0002\u02e1\u02ee\u0005\u0126\u0094\u0002",
    "\u02e2\u02ee\u0005\u0128\u0095\u0002\u02e3\u02ee\u0005\u012a\u0096\u0002",
    "\u02e4\u02ee\u0005\u012c\u0097\u0002\u02e5\u02ee\u0005\u012e\u0098\u0002",
    "\u02e6\u02ee\u0005\u0130\u0099\u0002\u02e7\u02ee\u0005\u0148\u00a5\u0002",
    "\u02e8\u02ee\u0005\u014a\u00a6\u0002\u02e9\u02ee\u0005\u014c\u00a7\u0002",
    "\u02ea\u02ee\u0005\u014e\u00a8\u0002\u02eb\u02ee\u0005\u0150\u00a9\u0002",
    "\u02ec\u02ee\u0005\u0152\u00aa\u0002\u02ed\u02de\u0003\u0002\u0002\u0002",
    "\u02ed\u02df\u0003\u0002\u0002\u0002\u02ed\u02e0\u0003\u0002\u0002\u0002",
    "\u02ed\u02e1\u0003\u0002\u0002\u0002\u02ed\u02e2\u0003\u0002\u0002\u0002",
    "\u02ed\u02e3\u0003\u0002\u0002\u0002\u02ed\u02e4\u0003\u0002\u0002\u0002",
    "\u02ed\u02e5\u0003\u0002\u0002\u0002\u02ed\u02e6\u0003\u0002\u0002\u0002",
    "\u02ed\u02e7\u0003\u0002\u0002\u0002\u02ed\u02e8\u0003\u0002\u0002\u0002",
    "\u02ed\u02e9\u0003\u0002\u0002\u0002\u02ed\u02ea\u0003\u0002\u0002\u0002",
    "\u02ed\u02eb\u0003\u0002\u0002\u0002\u02ed\u02ec\u0003\u0002\u0002\u0002",
    "\u02ee\u0011\u0003\u0002\u0002\u0002\u02ef\u02f3\u0005\u0154\u00ab\u0002",
    "\u02f0\u02f3\u0005\u0156\u00ac\u0002\u02f1\u02f3\u0005\u0158\u00ad\u0002",
    "\u02f2\u02ef\u0003\u0002\u0002\u0002\u02f2\u02f0\u0003\u0002\u0002\u0002",
    "\u02f2\u02f1\u0003\u0002\u0002\u0002\u02f3\u0013\u0003\u0002\u0002\u0002",
    "\u02f4\u02ff\u0005\u015c\u00af\u0002\u02f5\u02ff\u0005\u015e\u00b0\u0002",
    "\u02f6\u02ff\u0005\u0160\u00b1\u0002\u02f7\u02ff\u0005\u0164\u00b3\u0002",
    "\u02f8\u02ff\u0005\u0166\u00b4\u0002\u02f9\u02ff\u0005\u0168\u00b5\u0002",
    "\u02fa\u02ff\u0005\u016c\u00b7\u0002\u02fb\u02ff\u0005\u0162\u00b2\u0002",
    "\u02fc\u02ff\u0005\u016a\u00b6\u0002\u02fd\u02ff\u0005\u016e\u00b8\u0002",
    "\u02fe\u02f4\u0003\u0002\u0002\u0002\u02fe\u02f5\u0003\u0002\u0002\u0002",
    "\u02fe\u02f6\u0003\u0002\u0002\u0002\u02fe\u02f7\u0003\u0002\u0002\u0002",
    "\u02fe\u02f8\u0003\u0002\u0002\u0002\u02fe\u02f9\u0003\u0002\u0002\u0002",
    "\u02fe\u02fa\u0003\u0002\u0002\u0002\u02fe\u02fb\u0003\u0002\u0002\u0002",
    "\u02fe\u02fc\u0003\u0002\u0002\u0002\u02fe\u02fd\u0003\u0002\u0002\u0002",
    "\u02ff\u0015\u0003\u0002\u0002\u0002\u0300\u031a\u0005\u0180\u00c1\u0002",
    "\u0301\u031a\u0005\u0182\u00c2\u0002\u0302\u031a\u0005\u0184\u00c3\u0002",
    "\u0303\u031a\u0005\u0186\u00c4\u0002\u0304\u031a\u0005\u0188\u00c5\u0002",
    "\u0305\u031a\u0005\u018a\u00c6\u0002\u0306\u031a\u0005\u018c\u00c7\u0002",
    "\u0307\u031a\u0005\u018e\u00c8\u0002\u0308\u031a\u0005\u01a6\u00d4\u0002",
    "\u0309\u031a\u0005\u01a8\u00d5\u0002\u030a\u031a\u0005\u01aa\u00d6\u0002",
    "\u030b\u031a\u0005\u01ac\u00d7\u0002\u030c\u031a\u0005\u01ae\u00d8\u0002",
    "\u030d\u031a\u0005\u01b2\u00da\u0002\u030e\u031a\u0005\u01b4\u00db\u0002",
    "\u030f\u031a\u0005\u01b6\u00dc\u0002\u0310\u031a\u0005\u01b8\u00dd\u0002",
    "\u0311\u031a\u0005\u01ba\u00de\u0002\u0312\u031a\u0005\u01c8\u00e5\u0002",
    "\u0313\u031a\u0005\u01ca\u00e6\u0002\u0314\u031a\u0005\u01cc\u00e7\u0002",
    "\u0315\u031a\u0005\u01ce\u00e8\u0002\u0316\u031a\u0005\u01d0\u00e9\u0002",
    "\u0317\u031a\u0005\u01d2\u00ea\u0002\u0318\u031a\u0005\u01d4\u00eb\u0002",
    "\u0319\u0300\u0003\u0002\u0002\u0002\u0319\u0301\u0003\u0002\u0002\u0002",
    "\u0319\u0302\u0003\u0002\u0002\u0002\u0319\u0303\u0003\u0002\u0002\u0002",
    "\u0319\u0304\u0003\u0002\u0002\u0002\u0319\u0305\u0003\u0002\u0002\u0002",
    "\u0319\u0306\u0003\u0002\u0002\u0002\u0319\u0307\u0003\u0002\u0002\u0002",
    "\u0319\u0308\u0003\u0002\u0002\u0002\u0319\u0309\u0003\u0002\u0002\u0002",
    "\u0319\u030a\u0003\u0002\u0002\u0002\u0319\u030b\u0003\u0002\u0002\u0002",
    "\u0319\u030c\u0003\u0002\u0002\u0002\u0319\u030d\u0003\u0002\u0002\u0002",
    "\u0319\u030e\u0003\u0002\u0002\u0002\u0319\u030f\u0003\u0002\u0002\u0002",
    "\u0319\u0310\u0003\u0002\u0002\u0002\u0319\u0311\u0003\u0002\u0002\u0002",
    "\u0319\u0312\u0003\u0002\u0002\u0002\u0319\u0313\u0003\u0002\u0002\u0002",
    "\u0319\u0314\u0003\u0002\u0002\u0002\u0319\u0315\u0003\u0002\u0002\u0002",
    "\u0319\u0316\u0003\u0002\u0002\u0002\u0319\u0317\u0003\u0002\u0002\u0002",
    "\u0319\u0318\u0003\u0002\u0002\u0002\u031a\u0017\u0003\u0002\u0002\u0002",
    "\u031b\u0323\u0005\u01de\u00f0\u0002\u031c\u0323\u0005\u01e0\u00f1\u0002",
    "\u031d\u0323\u0005\u01e2\u00f2\u0002\u031e\u0323\u0005\u01e4\u00f3\u0002",
    "\u031f\u0323\u0005\u01e6\u00f4\u0002\u0320\u0323\u0005\u01e8\u00f5\u0002",
    "\u0321\u0323\u0005\u01ec\u00f7\u0002\u0322\u031b\u0003\u0002\u0002\u0002",
    "\u0322\u031c\u0003\u0002\u0002\u0002\u0322\u031d\u0003\u0002\u0002\u0002",
    "\u0322\u031e\u0003\u0002\u0002\u0002\u0322\u031f\u0003\u0002\u0002\u0002",
    "\u0322\u0320\u0003\u0002\u0002\u0002\u0322\u0321\u0003\u0002\u0002\u0002",
    "\u0323\u0019\u0003\u0002\u0002\u0002\u0324\u0325\u0007 \u0002\u0002",
    "\u0325\u0327\t\u0002\u0002\u0002\u0326\u0328\u0005\u0244\u0123\u0002",
    "\u0327\u0326\u0003\u0002\u0002\u0002\u0327\u0328\u0003\u0002\u0002\u0002",
    "\u0328\u0329\u0003\u0002\u0002\u0002\u0329\u032d\u0005\u020c\u0107\u0002",
    "\u032a\u032c\u00052\u001a\u0002\u032b\u032a\u0003\u0002\u0002\u0002",
    "\u032c\u032f\u0003\u0002\u0002\u0002\u032d\u032b\u0003\u0002\u0002\u0002",
    "\u032d\u032e\u0003\u0002\u0002\u0002\u032e\u001b\u0003\u0002\u0002\u0002",
    "\u032f\u032d\u0003\u0002\u0002\u0002\u0330\u0332\u0007 \u0002\u0002",
    "\u0331\u0333\u00054\u001b\u0002\u0332\u0331\u0003\u0002\u0002\u0002",
    "\u0332\u0333\u0003\u0002\u0002\u0002\u0333\u0334\u0003\u0002\u0002\u0002",
    "\u0334\u0336\u0007\u015e\u0002\u0002\u0335\u0337\u0005\u0244\u0123\u0002",
    "\u0336\u0335\u0003\u0002\u0002\u0002\u0336\u0337\u0003\u0002\u0002\u0002",
    "\u0337\u0338\u0003\u0002\u0002\u0002\u0338\u0339\u0005\u01f2\u00fa\u0002",
    "\u0339\u033a\u0007l\u0002\u0002\u033a\u033b\u0007\u0205\u0002\u0002",
    "\u033b\u0342\u00056\u001c\u0002\u033c\u033d\u0007l\u0002\u0002\u033d",
    "\u033f\u0007\u0136\u0002\u0002\u033e\u0340\u0007h\u0002\u0002\u033f",
    "\u033e\u0003\u0002\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002\u0340",
    "\u0341\u0003\u0002\u0002\u0002\u0341\u0343\u0007\u01de\u0002\u0002\u0342",
    "\u033c\u0003\u0002\u0002\u0002\u0342\u0343\u0003\u0002\u0002\u0002\u0343",
    "\u0345\u0003\u0002\u0002\u0002\u0344\u0346\u0005> \u0002\u0345\u0344",
    "\u0003\u0002\u0002\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u0349",
    "\u0003\u0002\u0002\u0002\u0347\u0348\u0007\u0133\u0002\u0002\u0348\u034a",
    "\u0007\u040d\u0002\u0002\u0349\u0347\u0003\u0002\u0002\u0002\u0349\u034a",
    "\u0003\u0002\u0002\u0002\u034a\u034b\u0003\u0002\u0002\u0002\u034b\u034c",
    "\u0007\u0150\u0002\u0002\u034c\u034d\u0005\u015a\u00ae\u0002\u034d\u001d",
    "\u0003\u0002\u0002\u0002\u034e\u0350\u0007 \u0002\u0002\u034f\u0351",
    "\t\u0003\u0002\u0002\u0350\u034f\u0003\u0002\u0002\u0002\u0350\u0351",
    "\u0003\u0002\u0002\u0002\u0351\u0353\u0003\u0002\u0002\u0002\u0352\u0354",
    "\t\u0004\u0002\u0002\u0353\u0352\u0003\u0002\u0002\u0002\u0353\u0354",
    "\u0003\u0002\u0002\u0002\u0354\u0355\u0003\u0002\u0002\u0002\u0355\u0356",
    "\u0007J\u0002\u0002\u0356\u0358\u0005\u020c\u0107\u0002\u0357\u0359",
    "\u0005@!\u0002\u0358\u0357\u0003\u0002\u0002\u0002\u0358\u0359\u0003",
    "\u0002\u0002\u0002\u0359\u035a\u0003\u0002\u0002\u0002\u035a\u035b\u0007",
    "l\u0002\u0002\u035b\u035c\u0005\u01f4\u00fb\u0002\u035c\u0360\u0005",
    "\u0230\u0119\u0002\u035d\u035f\u0005B\"\u0002\u035e\u035d\u0003\u0002",
    "\u0002\u0002\u035f\u0362\u0003\u0002\u0002\u0002\u0360\u035e\u0003\u0002",
    "\u0002\u0002\u0360\u0361\u0003\u0002\u0002\u0002\u0361\u036f\u0003\u0002",
    "\u0002\u0002\u0362\u0360\u0003\u0002\u0002\u0002\u0363\u0365\u0007\u0114",
    "\u0002\u0002\u0364\u0366\u0007\u03f5\u0002\u0002\u0365\u0364\u0003\u0002",
    "\u0002\u0002\u0365\u0366\u0003\u0002\u0002\u0002\u0366\u0367\u0003\u0002",
    "\u0002\u0002\u0367\u036e\t\u0005\u0002\u0002\u0368\u036a\u0007_\u0002",
    "\u0002\u0369\u036b\u0007\u03f5\u0002\u0002\u036a\u0369\u0003\u0002\u0002",
    "\u0002\u036a\u036b\u0003\u0002\u0002\u0002\u036b\u036c\u0003\u0002\u0002",
    "\u0002\u036c\u036e\t\u0006\u0002\u0002\u036d\u0363\u0003\u0002\u0002",
    "\u0002\u036d\u0368\u0003\u0002\u0002\u0002\u036e\u0371\u0003\u0002\u0002",
    "\u0002\u036f\u036d\u0003\u0002\u0002\u0002\u036f\u0370\u0003\u0002\u0002",
    "\u0002\u0370\u001f\u0003\u0002\u0002\u0002\u0371\u036f\u0003\u0002\u0002",
    "\u0002\u0372\u0373\u0007 \u0002\u0002\u0373\u0374\u0007\u0195\u0002",
    "\u0002\u0374\u0375\u0007D\u0002\u0002\u0375\u0376\u0005\u020c\u0107",
    "\u0002\u0376\u0377\u0007\u0007\u0002\u0002\u0377\u0378\u0007\u0238\u0002",
    "\u0002\u0378\u037e\u0007\u040d\u0002\u0002\u0379\u037b\u0007\u0180\u0002",
    "\u0002\u037a\u037c\u0007\u03f5\u0002\u0002\u037b\u037a\u0003\u0002\u0002",
    "\u0002\u037b\u037c\u0003\u0002\u0002\u0002\u037c\u037d\u0003\u0002\u0002",
    "\u0002\u037d\u037f\u0005\u0214\u010b\u0002\u037e\u0379\u0003\u0002\u0002",
    "\u0002\u037e\u037f\u0003\u0002\u0002\u0002\u037f\u0385\u0003\u0002\u0002",
    "\u0002\u0380\u0382\u0007\u0239\u0002\u0002\u0381\u0383\u0007\u03f5\u0002",
    "\u0002\u0382\u0381\u0003\u0002\u0002\u0002\u0382\u0383\u0003\u0002\u0002",
    "\u0002\u0383\u0384\u0003\u0002\u0002\u0002\u0384\u0386\u0005\u0214\u010b",
    "\u0002\u0385\u0380\u0003\u0002\u0002\u0002\u0385\u0386\u0003\u0002\u0002",
    "\u0002\u0386\u038c\u0003\u0002\u0002\u0002\u0387\u0389\u0007\u01e8\u0002",
    "\u0002\u0388\u038a\u0007\u03f5\u0002\u0002\u0389\u0388\u0003\u0002\u0002",
    "\u0002\u0389\u038a\u0003\u0002\u0002\u0002\u038a\u038b\u0003\u0002\u0002",
    "\u0002\u038b\u038d\u0005\u0214\u010b\u0002\u038c\u0387\u0003\u0002\u0002",
    "\u0002\u038c\u038d\u0003\u0002\u0002\u0002\u038d\u0393\u0003\u0002\u0002",
    "\u0002\u038e\u0390\u0007\u01c3\u0002\u0002\u038f\u0391\u0007\u03f5\u0002",
    "\u0002\u0390\u038f\u0003\u0002\u0002\u0002\u0390\u0391\u0003\u0002\u0002",
    "\u0002\u0391\u0392\u0003\u0002\u0002\u0002\u0392\u0394\u0005\u020c\u0107",
    "\u0002\u0393\u038e\u0003\u0002\u0002\u0002\u0393\u0394\u0003\u0002\u0002",
    "\u0002\u0394\u0396\u0003\u0002\u0002\u0002\u0395\u0397\u0007\u0247\u0002",
    "\u0002\u0396\u0395\u0003\u0002\u0002\u0002\u0396\u0397\u0003\u0002\u0002",
    "\u0002\u0397\u039d\u0003\u0002\u0002\u0002\u0398\u039a\u0007\u0133\u0002",
    "\u0002\u0399\u039b\u0007\u03f5\u0002\u0002\u039a\u0399\u0003\u0002\u0002",
    "\u0002\u039a\u039b\u0003\u0002\u0002\u0002\u039b\u039c\u0003\u0002\u0002",
    "\u0002\u039c\u039e\u0007\u040d\u0002\u0002\u039d\u0398\u0003\u0002\u0002",
    "\u0002\u039d\u039e\u0003\u0002\u0002\u0002\u039e\u039f\u0003\u0002\u0002",
    "\u0002\u039f\u03a1\u0007\u0158\u0002\u0002\u03a0\u03a2\u0007\u03f5\u0002",
    "\u0002\u03a1\u03a0\u0003\u0002\u0002\u0002\u03a1\u03a2\u0003\u0002\u0002",
    "\u0002\u03a2\u03a3\u0003\u0002\u0002\u0002\u03a3\u03a4\u0005\u0202\u0102",
    "\u0002\u03a4!\u0003\u0002\u0002\u0002\u03a5\u03a7\u0007 \u0002\u0002",
    "\u03a6\u03a8\u00054\u001b\u0002\u03a7\u03a6\u0003\u0002\u0002\u0002",
    "\u03a7\u03a8\u0003\u0002\u0002\u0002\u03a8\u03a9\u0003\u0002\u0002\u0002",
    "\u03a9\u03aa\u0007w\u0002\u0002\u03aa\u03ab\u0005\u01f2\u00fa\u0002",
    "\u03ab\u03ad\u0007\u03fe\u0002\u0002\u03ac\u03ae\u0005D#\u0002\u03ad",
    "\u03ac\u0003\u0002\u0002\u0002\u03ad\u03ae\u0003\u0002\u0002\u0002\u03ae",
    "\u03b3\u0003\u0002\u0002\u0002\u03af\u03b0\u0007\u0400\u0002\u0002\u03b0",
    "\u03b2\u0005D#\u0002\u03b1\u03af\u0003\u0002\u0002\u0002\u03b2\u03b5",
    "\u0003\u0002\u0002\u0002\u03b3\u03b1\u0003\u0002\u0002\u0002\u03b3\u03b4",
    "\u0003\u0002\u0002\u0002\u03b4\u03b6\u0003\u0002\u0002\u0002\u03b5\u03b3",
    "\u0003\u0002\u0002\u0002\u03b6\u03ba\u0007\u03ff\u0002\u0002\u03b7\u03b9",
    "\u0005H%\u0002\u03b8\u03b7\u0003\u0002\u0002\u0002\u03b9\u03bc\u0003",
    "\u0002\u0002\u0002\u03ba\u03b8\u0003\u0002\u0002\u0002\u03ba\u03bb\u0003",
    "\u0002\u0002\u0002\u03bb\u03bd\u0003\u0002\u0002\u0002\u03bc\u03ba\u0003",
    "\u0002\u0002\u0002\u03bd\u03be\u0005\u015a\u00ae\u0002\u03be#\u0003",
    "\u0002\u0002\u0002\u03bf\u03c1\u0007 \u0002\u0002\u03c0\u03c2\u0005",
    "4\u001b\u0002\u03c1\u03c0\u0003\u0002\u0002\u0002\u03c1\u03c2\u0003",
    "\u0002\u0002\u0002\u03c2\u03c3\u0003\u0002\u0002\u0002\u03c3\u03c4\u0007",
    "\u0172\u0002\u0002\u03c4\u03c5\u0005\u01f2\u00fa\u0002\u03c5\u03c7\u0007",
    "\u03fe\u0002\u0002\u03c6\u03c8\u0005F$\u0002\u03c7\u03c6\u0003\u0002",
    "\u0002\u0002\u03c7\u03c8\u0003\u0002\u0002\u0002\u03c8\u03cd\u0003\u0002",
    "\u0002\u0002\u03c9\u03ca\u0007\u0400\u0002\u0002\u03ca\u03cc\u0005F",
    "$\u0002\u03cb\u03c9\u0003\u0002\u0002\u0002\u03cc\u03cf\u0003\u0002",
    "\u0002\u0002\u03cd\u03cb\u0003\u0002\u0002\u0002\u03cd\u03ce\u0003\u0002",
    "\u0002\u0002\u03ce\u03d0\u0003\u0002\u0002\u0002\u03cf\u03cd\u0003\u0002",
    "\u0002\u0002\u03d0\u03d1\u0007\u03ff\u0002\u0002\u03d1\u03d2\u0007\u01fc",
    "\u0002\u0002\u03d2\u03d6\u0005\u0220\u0111\u0002\u03d3\u03d5\u0005H",
    "%\u0002\u03d4\u03d3\u0003\u0002\u0002\u0002\u03d5\u03d8\u0003\u0002",
    "\u0002\u0002\u03d6\u03d4\u0003\u0002\u0002\u0002\u03d6\u03d7\u0003\u0002",
    "\u0002\u0002\u03d7\u03db\u0003\u0002\u0002\u0002\u03d8\u03d6\u0003\u0002",
    "\u0002\u0002\u03d9\u03dc\u0005\u015a\u00ae\u0002\u03da\u03dc\u0005\u016a",
    "\u00b6\u0002\u03db\u03d9\u0003\u0002\u0002\u0002\u03db\u03da\u0003\u0002",
    "\u0002\u0002\u03dc%\u0003\u0002\u0002\u0002\u03dd\u03de\u0007 \u0002",
    "\u0002\u03de\u03df\u0007\u0207\u0002\u0002\u03df\u03e0\u0005\u020c\u0107",
    "\u0002\u03e0\u03e1\u0007>\u0002\u0002\u03e1\u03e2\u0007\u0145\u0002",
    "\u0002\u03e2\u03e3\u0007\u024b\u0002\u0002\u03e3\u03e4\t\u0007\u0002",
    "\u0002\u03e4\u03e5\u0007\u01ce\u0002\u0002\u03e5\u03e6\u0007\u03fe\u0002",
    "\u0002\u03e6\u03eb\u0005J&\u0002\u03e7\u03e8\u0007\u0400\u0002\u0002",
    "\u03e8\u03ea\u0005J&\u0002\u03e9\u03e7\u0003\u0002\u0002\u0002\u03ea",
    "\u03ed\u0003\u0002\u0002\u0002\u03eb\u03e9\u0003\u0002\u0002\u0002\u03eb",
    "\u03ec\u0003\u0002\u0002\u0002\u03ec\u03ee\u0003\u0002\u0002\u0002\u03ed",
    "\u03eb\u0003\u0002\u0002\u0002\u03ee\u03ef\u0007\u03ff\u0002\u0002\u03ef",
    "\'\u0003\u0002\u0002\u0002\u03f0\u03f2\u0007 \u0002\u0002\u03f1\u03f3",
    "\u0007\u022f\u0002\u0002\u03f2\u03f1\u0003\u0002\u0002\u0002\u03f2\u03f3",
    "\u0003\u0002\u0002\u0002\u03f3\u03f4\u0003\u0002\u0002\u0002\u03f4\u03f6",
    "\u0007\u009c\u0002\u0002\u03f5\u03f7\u0005\u0244\u0123\u0002\u03f6\u03f5",
    "\u0003\u0002\u0002\u0002\u03f6\u03f7\u0003\u0002\u0002\u0002\u03f7\u03f8",
    "\u0003\u0002\u0002\u0002\u03f8\u0400\u0005\u01f4\u00fb\u0002\u03f9\u03fa",
    "\u0007Z\u0002\u0002\u03fa\u0401\u0005\u01f4\u00fb\u0002\u03fb\u03fc",
    "\u0007\u03fe\u0002\u0002\u03fc\u03fd\u0007Z\u0002\u0002\u03fd\u03fe",
    "\u0005\u01f4\u00fb\u0002\u03fe\u03ff\u0007\u03ff\u0002\u0002\u03ff\u0401",
    "\u0003\u0002\u0002\u0002\u0400\u03f9\u0003\u0002\u0002\u0002\u0400\u03fb",
    "\u0003\u0002\u0002\u0002\u0401\u043f\u0003\u0002\u0002\u0002\u0402\u0404",
    "\u0007 \u0002\u0002\u0403\u0405\u0007\u022f\u0002\u0002\u0404\u0403",
    "\u0003\u0002\u0002\u0002\u0404\u0405\u0003\u0002\u0002\u0002\u0405\u0406",
    "\u0003\u0002\u0002\u0002\u0406\u0408\u0007\u009c\u0002\u0002\u0407\u0409",
    "\u0005\u0244\u0123\u0002\u0408\u0407\u0003\u0002\u0002\u0002\u0408\u0409",
    "\u0003\u0002\u0002\u0002\u0409\u040a\u0003\u0002\u0002\u0002\u040a\u040c",
    "\u0005\u01f4\u00fb\u0002\u040b\u040d\u0005L\'\u0002\u040c\u040b\u0003",
    "\u0002\u0002\u0002\u040c\u040d\u0003\u0002\u0002\u0002\u040d\u0418\u0003",
    "\u0002\u0002\u0002\u040e\u0415\u0005^0\u0002\u040f\u0411\u0007\u0400",
    "\u0002\u0002\u0410\u040f\u0003\u0002\u0002\u0002\u0410\u0411\u0003\u0002",
    "\u0002\u0002\u0411\u0412\u0003\u0002\u0002\u0002\u0412\u0414\u0005^",
    "0\u0002\u0413\u0410\u0003\u0002\u0002\u0002\u0414\u0417\u0003\u0002",
    "\u0002\u0002\u0415\u0413\u0003\u0002\u0002\u0002\u0415\u0416\u0003\u0002",
    "\u0002\u0002\u0416\u0419\u0003\u0002\u0002\u0002\u0417\u0415\u0003\u0002",
    "\u0002\u0002\u0418\u040e\u0003\u0002\u0002\u0002\u0418\u0419\u0003\u0002",
    "\u0002\u0002\u0419\u041b\u0003\u0002\u0002\u0002\u041a\u041c\u0005b",
    "2\u0002\u041b\u041a\u0003\u0002\u0002\u0002\u041b\u041c\u0003\u0002",
    "\u0002\u0002\u041c\u041e\u0003\u0002\u0002\u0002\u041d\u041f\t\b\u0002",
    "\u0002\u041e\u041d\u0003\u0002\u0002\u0002\u041e\u041f\u0003\u0002\u0002",
    "\u0002\u041f\u0421\u0003\u0002\u0002\u0002\u0420\u0422\u0007\r\u0002",
    "\u0002\u0421\u0420\u0003\u0002\u0002\u0002\u0421\u0422\u0003\u0002\u0002",
    "\u0002\u0422\u0423\u0003\u0002\u0002\u0002\u0423\u0424\u0005\u00b4[",
    "\u0002\u0424\u043f\u0003\u0002\u0002\u0002\u0425\u0427\u0007 \u0002",
    "\u0002\u0426\u0428\u0007\u022f\u0002\u0002\u0427\u0426\u0003\u0002\u0002",
    "\u0002\u0427\u0428\u0003\u0002\u0002\u0002\u0428\u0429\u0003\u0002\u0002",
    "\u0002\u0429\u042b\u0007\u009c\u0002\u0002\u042a\u042c\u0005\u0244\u0123",
    "\u0002\u042b\u042a\u0003\u0002\u0002\u0002\u042b\u042c\u0003\u0002\u0002",
    "\u0002\u042c\u042d\u0003\u0002\u0002\u0002\u042d\u042e\u0005\u01f4\u00fb",
    "\u0002\u042e\u0439\u0005L\'\u0002\u042f\u0436\u0005^0\u0002\u0430\u0432",
    "\u0007\u0400\u0002\u0002\u0431\u0430\u0003\u0002\u0002\u0002\u0431\u0432",
    "\u0003\u0002\u0002\u0002\u0432\u0433\u0003\u0002\u0002\u0002\u0433\u0435",
    "\u0005^0\u0002\u0434\u0431\u0003\u0002\u0002\u0002\u0435\u0438\u0003",
    "\u0002\u0002\u0002\u0436\u0434\u0003\u0002\u0002\u0002\u0436\u0437\u0003",
    "\u0002\u0002\u0002\u0437\u043a\u0003\u0002\u0002\u0002\u0438\u0436\u0003",
    "\u0002\u0002\u0002\u0439\u042f\u0003\u0002\u0002\u0002\u0439\u043a\u0003",
    "\u0002\u0002\u0002\u043a\u043c\u0003\u0002\u0002\u0002\u043b\u043d\u0005",
    "b2\u0002\u043c\u043b\u0003\u0002\u0002\u0002\u043c\u043d\u0003\u0002",
    "\u0002\u0002\u043d\u043f\u0003\u0002\u0002\u0002\u043e\u03f0\u0003\u0002",
    "\u0002\u0002\u043e\u0402\u0003\u0002\u0002\u0002\u043e\u0425\u0003\u0002",
    "\u0002\u0002\u043f)\u0003\u0002\u0002\u0002\u0440\u0441\u0007 \u0002",
    "\u0002\u0441\u0442\u0007\u022e\u0002\u0002\u0442\u0443\u0005\u020c\u0107",
    "\u0002\u0443\u0444\u0007\u0007\u0002\u0002\u0444\u0445\u0007\u0146\u0002",
    "\u0002\u0445\u0449\u0007\u040d\u0002\u0002\u0446\u0447\u0007\u016a\u0002",
    "\u0002\u0447\u0448\u0007\u03f5\u0002\u0002\u0448\u044a\u0005\u0214\u010b",
    "\u0002\u0449\u0446\u0003\u0002\u0002\u0002\u0449\u044a\u0003\u0002\u0002",
    "\u0002\u044a\u0450\u0003\u0002\u0002\u0002\u044b\u044d\u0007\u0158\u0002",
    "\u0002\u044c\u044e\u0007\u03f5\u0002\u0002\u044d\u044c\u0003\u0002\u0002",
    "\u0002\u044d\u044e\u0003\u0002\u0002\u0002\u044e\u044f\u0003\u0002\u0002",
    "\u0002\u044f\u0451\u0005\u0202\u0102\u0002\u0450\u044b\u0003\u0002\u0002",
    "\u0002\u0450\u0451\u0003\u0002\u0002\u0002\u0451+\u0003\u0002\u0002",
    "\u0002\u0452\u0453\u0007 \u0002\u0002\u0453\u0454\u0007\u022e\u0002",
    "\u0002\u0454\u0455\u0005\u020c\u0107\u0002\u0455\u0456\u0007\u0007\u0002",
    "\u0002\u0456\u0457\u0007\u0146\u0002\u0002\u0457\u0458\u0007\u040d\u0002",
    "\u0002\u0458\u0459\u0007\u00aa\u0002\u0002\u0459\u045a\u0007\u0195\u0002",
    "\u0002\u045a\u045b\u0007D\u0002\u0002\u045b\u0461\u0005\u020c\u0107",
    "\u0002\u045c\u045e\u0007\u0166\u0002\u0002\u045d\u045f\u0007\u03f5\u0002",
    "\u0002\u045e\u045d\u0003\u0002\u0002\u0002\u045e\u045f\u0003\u0002\u0002",
    "\u0002\u045f\u0460\u0003\u0002\u0002\u0002\u0460\u0462\u0005\u0214\u010b",
    "\u0002\u0461\u045c\u0003\u0002\u0002\u0002\u0461\u0462\u0003\u0002\u0002",
    "\u0002\u0462\u0468\u0003\u0002\u0002\u0002\u0463\u0465\u0007\u0180\u0002",
    "\u0002\u0464\u0466\u0007\u03f5\u0002\u0002\u0465\u0464\u0003\u0002\u0002",
    "\u0002\u0465\u0466\u0003\u0002\u0002\u0002\u0466\u0467\u0003\u0002\u0002",
    "\u0002\u0467\u0469\u0005\u0214\u010b\u0002\u0468\u0463\u0003\u0002\u0002",
    "\u0002\u0468\u0469\u0003\u0002\u0002\u0002\u0469\u046f\u0003\u0002\u0002",
    "\u0002\u046a\u046c\u0007\u0119\u0002\u0002\u046b\u046d\u0007\u03f5\u0002",
    "\u0002\u046c\u046b\u0003\u0002\u0002\u0002\u046c\u046d\u0003\u0002\u0002",
    "\u0002\u046d\u046e\u0003\u0002\u0002\u0002\u046e\u0470\u0005\u0214\u010b",
    "\u0002\u046f\u046a\u0003\u0002\u0002\u0002\u046f\u0470\u0003\u0002\u0002",
    "\u0002\u0470\u0476\u0003\u0002\u0002\u0002\u0471\u0473\u0007\u01af\u0002",
    "\u0002\u0472\u0474\u0007\u03f5\u0002\u0002\u0473\u0472\u0003\u0002\u0002",
    "\u0002\u0473\u0474\u0003\u0002\u0002\u0002\u0474\u0475\u0003\u0002\u0002",
    "\u0002\u0475\u0477\u0005\u0214\u010b\u0002\u0476\u0471\u0003\u0002\u0002",
    "\u0002\u0476\u0477\u0003\u0002\u0002\u0002\u0477\u047d\u0003\u0002\u0002",
    "\u0002\u0478\u047a\u0007\u01c3\u0002\u0002\u0479\u047b\u0007\u03f5\u0002",
    "\u0002\u047a\u0479\u0003\u0002\u0002\u0002\u047a\u047b\u0003\u0002\u0002",
    "\u0002\u047b\u047c\u0003\u0002\u0002\u0002\u047c\u047e\u0005\u020c\u0107",
    "\u0002\u047d\u0478\u0003\u0002\u0002\u0002\u047d\u047e\u0003\u0002\u0002",
    "\u0002\u047e\u0480\u0003\u0002\u0002\u0002\u047f\u0481\u0007\u0247\u0002",
    "\u0002\u0480\u047f\u0003\u0002\u0002\u0002\u0480\u0481\u0003\u0002\u0002",
    "\u0002\u0481\u0487\u0003\u0002\u0002\u0002\u0482\u0484\u0007\u0133\u0002",
    "\u0002\u0483\u0485\u0007\u03f5\u0002\u0002\u0484\u0483\u0003\u0002\u0002",
    "\u0002\u0484\u0485\u0003\u0002\u0002\u0002\u0485\u0486\u0003\u0002\u0002",
    "\u0002\u0486\u0488\u0007\u040d\u0002\u0002\u0487\u0482\u0003\u0002\u0002",
    "\u0002\u0487\u0488\u0003\u0002\u0002\u0002\u0488\u0489\u0003\u0002\u0002",
    "\u0002\u0489\u048b\u0007\u0158\u0002\u0002\u048a\u048c\u0007\u03f5\u0002",
    "\u0002\u048b\u048a\u0003\u0002\u0002\u0002\u048b\u048c\u0003\u0002\u0002",
    "\u0002\u048c\u048d\u0003\u0002\u0002\u0002\u048d\u048e\u0005\u0202\u0102",
    "\u0002\u048e-\u0003\u0002\u0002\u0002\u048f\u0491\u0007 \u0002\u0002",
    "\u0490\u0492\u00054\u001b\u0002\u0491\u0490\u0003\u0002\u0002\u0002",
    "\u0491\u0492\u0003\u0002\u0002\u0002\u0492\u0493\u0003\u0002\u0002\u0002",
    "\u0493\u0494\u0007\u00a1\u0002\u0002\u0494\u0495\u0005\u01f2\u00fa\u0002",
    "\u0495\u0496\t\t\u0002\u0002\u0496\u0497\t\n\u0002\u0002\u0497\u0498",
    "\u0007l\u0002\u0002\u0498\u0499\u0005\u01f4\u00fb\u0002\u0499\u049a",
    "\u0007<\u0002\u0002\u049a\u049b\u00072\u0002\u0002\u049b\u049e\u0007",
    "\u0201\u0002\u0002\u049c\u049d\t\u000b\u0002\u0002\u049d\u049f\u0005",
    "\u01f2\u00fa\u0002\u049e\u049c\u0003\u0002\u0002\u0002\u049e\u049f\u0003",
    "\u0002\u0002\u0002\u049f\u04a0\u0003\u0002\u0002\u0002\u04a0\u04a1\u0005",
    "\u015a\u00ae\u0002\u04a1/\u0003\u0002\u0002\u0002\u04a2\u04a5\u0007",
    " \u0002\u0002\u04a3\u04a4\u0007p\u0002\u0002\u04a4\u04a6\u0007\u0081",
    "\u0002\u0002\u04a5\u04a3\u0003\u0002\u0002\u0002\u04a5\u04a6\u0003\u0002",
    "\u0002\u0002\u04a6\u04aa\u0003\u0002\u0002\u0002\u04a7\u04a8\u0007\u0114",
    "\u0002\u0002\u04a8\u04a9\u0007\u03f5\u0002\u0002\u04a9\u04ab\t\f\u0002",
    "\u0002\u04aa\u04a7\u0003\u0002\u0002\u0002\u04aa\u04ab\u0003\u0002\u0002",
    "\u0002\u04ab\u04ad\u0003\u0002\u0002\u0002\u04ac\u04ae\u00054\u001b",
    "\u0002\u04ad\u04ac\u0003\u0002\u0002\u0002\u04ad\u04ae\u0003\u0002\u0002",
    "\u0002\u04ae\u04b2\u0003\u0002\u0002\u0002\u04af\u04b0\u0007\u0091\u0002",
    "\u0002\u04b0\u04b1\u0007\u0206\u0002\u0002\u04b1\u04b3\t\r\u0002\u0002",
    "\u04b2\u04af\u0003\u0002\u0002\u0002\u04b2\u04b3\u0003\u0002\u0002\u0002",
    "\u04b3\u04b4\u0003\u0002\u0002\u0002\u04b4\u04b5\u0007\u0244\u0002\u0002",
    "\u04b5\u04ba\u0005\u01f2\u00fa\u0002\u04b6\u04b7\u0007\u03fe\u0002\u0002",
    "\u04b7\u04b8\u0005\u022c\u0117\u0002\u04b8\u04b9\u0007\u03ff\u0002\u0002",
    "\u04b9\u04bb\u0003\u0002\u0002\u0002\u04ba\u04b6\u0003\u0002\u0002\u0002",
    "\u04ba\u04bb\u0003\u0002\u0002\u0002\u04bb\u04bc\u0003\u0002\u0002\u0002",
    "\u04bc\u04bd\u0007\r\u0002\u0002\u04bd\u04c4\u0005\u00b4[\u0002\u04be",
    "\u04c0\u0007\u00b0\u0002\u0002\u04bf\u04c1\t\u000e\u0002\u0002\u04c0",
    "\u04bf\u0003\u0002\u0002\u0002\u04c0\u04c1\u0003\u0002\u0002\u0002\u04c1",
    "\u04c2\u0003\u0002\u0002\u0002\u04c2\u04c3\u0007\u0019\u0002\u0002\u04c3",
    "\u04c5\u0007n\u0002\u0002\u04c4\u04be\u0003\u0002\u0002\u0002\u04c4",
    "\u04c5\u0003\u0002\u0002\u0002\u04c51\u0003\u0002\u0002\u0002\u04c6",
    "\u04c8\u0007(\u0002\u0002\u04c7\u04c6\u0003\u0002\u0002\u0002\u04c7",
    "\u04c8\u0003\u0002\u0002\u0002\u04c8\u04cc\u0003\u0002\u0002\u0002\u04c9",
    "\u04ca\u0007\u0018\u0002\u0002\u04ca\u04cd\u0007\u008c\u0002\u0002\u04cb",
    "\u04cd\u0007\u02dd\u0002\u0002\u04cc\u04c9\u0003\u0002\u0002\u0002\u04cc",
    "\u04cb\u0003\u0002\u0002\u0002\u04cd\u04cf\u0003\u0002\u0002\u0002\u04ce",
    "\u04d0\u0007\u03f5\u0002\u0002\u04cf\u04ce\u0003\u0002\u0002\u0002\u04cf",
    "\u04d0\u0003\u0002\u0002\u0002\u04d0\u04d3\u0003\u0002\u0002\u0002\u04d1",
    "\u04d4\u0005\u01fe\u0100\u0002\u04d2\u04d4\u0007(\u0002\u0002\u04d3",
    "\u04d1\u0003\u0002\u0002\u0002\u04d3\u04d2\u0003\u0002\u0002\u0002\u04d4",
    "\u04de\u0003\u0002\u0002\u0002\u04d5\u04d7\u0007(\u0002\u0002\u04d6",
    "\u04d5\u0003\u0002\u0002\u0002\u04d6\u04d7\u0003\u0002\u0002\u0002\u04d7",
    "\u04d8\u0003\u0002\u0002\u0002\u04d8\u04da\u0007\u001a\u0002\u0002\u04d9",
    "\u04db\u0007\u03f5\u0002\u0002\u04da\u04d9\u0003\u0002\u0002\u0002\u04da",
    "\u04db\u0003\u0002\u0002\u0002\u04db\u04dc\u0003\u0002\u0002\u0002\u04dc",
    "\u04de\u0005\u0200\u0101\u0002\u04dd\u04c7\u0003\u0002\u0002\u0002\u04dd",
    "\u04d6\u0003\u0002\u0002\u0002\u04de3\u0003\u0002\u0002\u0002\u04df",
    "\u04e0\u0007\u0149\u0002\u0002\u04e0\u04e7\u0007\u03f5\u0002\u0002\u04e1",
    "\u04e8\u0005\u01fa\u00fe\u0002\u04e2\u04e5\u0007#\u0002\u0002\u04e3",
    "\u04e4\u0007\u03fe\u0002\u0002\u04e4\u04e6\u0007\u03ff\u0002\u0002\u04e5",
    "\u04e3\u0003\u0002\u0002\u0002\u04e5\u04e6\u0003\u0002\u0002\u0002\u04e6",
    "\u04e8\u0003\u0002\u0002\u0002\u04e7\u04e1\u0003\u0002\u0002\u0002\u04e7",
    "\u04e2\u0003\u0002\u0002\u0002\u04e85\u0003\u0002\u0002\u0002\u04e9",
    "\u04ea\u0007\u0116\u0002\u0002\u04ea\u04ee\u00058\u001d\u0002\u04eb",
    "\u04ed\u0005:\u001e\u0002\u04ec\u04eb\u0003\u0002\u0002\u0002\u04ed",
    "\u04f0\u0003\u0002\u0002\u0002\u04ee\u04ec\u0003\u0002\u0002\u0002\u04ee",
    "\u04ef\u0003\u0002\u0002\u0002\u04ef\u050c\u0003\u0002\u0002\u0002\u04f0",
    "\u04ee\u0003\u0002\u0002\u0002\u04f1\u04f4\u0007\u0160\u0002\u0002\u04f2",
    "\u04f5\u0005\u0212\u010a\u0002\u04f3\u04f5\u0005\u025a\u012e\u0002\u04f4",
    "\u04f2\u0003\u0002\u0002\u0002\u04f4\u04f3\u0003\u0002\u0002\u0002\u04f5",
    "\u04f6\u0003\u0002\u0002\u0002\u04f6\u04ff\u0005<\u001f\u0002\u04f7",
    "\u04f8\u0007\u021d\u0002\u0002\u04f8\u04fc\u00058\u001d\u0002\u04f9",
    "\u04fb\u0005:\u001e\u0002\u04fa\u04f9\u0003\u0002\u0002\u0002\u04fb",
    "\u04fe\u0003\u0002\u0002\u0002\u04fc\u04fa\u0003\u0002\u0002\u0002\u04fc",
    "\u04fd\u0003\u0002\u0002\u0002\u04fd\u0500\u0003\u0002\u0002\u0002\u04fe",
    "\u04fc\u0003\u0002\u0002\u0002\u04ff\u04f7\u0003\u0002\u0002\u0002\u04ff",
    "\u0500\u0003\u0002\u0002\u0002\u0500\u0509\u0003\u0002\u0002\u0002\u0501",
    "\u0502\u0007\u0157\u0002\u0002\u0502\u0506\u00058\u001d\u0002\u0503",
    "\u0505\u0005:\u001e\u0002\u0504\u0503\u0003\u0002\u0002\u0002\u0505",
    "\u0508\u0003\u0002\u0002\u0002\u0506\u0504\u0003\u0002\u0002\u0002\u0506",
    "\u0507\u0003\u0002\u0002\u0002\u0507\u050a\u0003\u0002\u0002\u0002\u0508",
    "\u0506\u0003\u0002\u0002\u0002\u0509\u0501\u0003\u0002\u0002\u0002\u0509",
    "\u050a\u0003\u0002\u0002\u0002\u050a\u050c\u0003\u0002\u0002\u0002\u050b",
    "\u04e9\u0003\u0002\u0002\u0002\u050b\u04f1\u0003\u0002\u0002\u0002\u050c",
    "7\u0003\u0002\u0002\u0002\u050d\u0512\u0007\u00ff\u0002\u0002\u050e",
    "\u0512\u0005\u0216\u010c\u0002\u050f\u0512\u0005\u0212\u010a\u0002\u0510",
    "\u0512\u0005\u025a\u012e\u0002\u0511\u050d\u0003\u0002\u0002\u0002\u0511",
    "\u050e\u0003\u0002\u0002\u0002\u0511\u050f\u0003\u0002\u0002\u0002\u0511",
    "\u0510\u0003\u0002\u0002\u0002\u05129\u0003\u0002\u0002\u0002\u0513",
    "\u0514\u0007\u03f0\u0002\u0002\u0514\u0517\u0007O\u0002\u0002\u0515",
    "\u0518\u0005\u0212\u010a\u0002\u0516\u0518\u0005\u025a\u012e\u0002\u0517",
    "\u0515\u0003\u0002\u0002\u0002\u0517\u0516\u0003\u0002\u0002\u0002\u0518",
    "\u0519\u0003\u0002\u0002\u0002\u0519\u051a\u0005<\u001f\u0002\u051a",
    ";\u0003\u0002\u0002\u0002\u051b\u0529\u0005\u0270\u0139\u0002\u051c",
    "\u0529\u0007\u00cd\u0002\u0002\u051d\u0529\u0007\u00e0\u0002\u0002\u051e",
    "\u0529\u0007\u00e1\u0002\u0002\u051f\u0529\u0007\u00e2\u0002\u0002\u0520",
    "\u0529\u0007\u00e3\u0002\u0002\u0521\u0529\u0007\u00e4\u0002\u0002\u0522",
    "\u0529\u0007\u00e5\u0002\u0002\u0523\u0529\u0007\u00e6\u0002\u0002\u0524",
    "\u0529\u0007\u00e7\u0002\u0002\u0525\u0529\u0007\u00e8\u0002\u0002\u0526",
    "\u0529\u0007\u00e9\u0002\u0002\u0527\u0529\u0007\u00ea\u0002\u0002\u0528",
    "\u051b\u0003\u0002\u0002\u0002\u0528\u051c\u0003\u0002\u0002\u0002\u0528",
    "\u051d\u0003\u0002\u0002\u0002\u0528\u051e\u0003\u0002\u0002\u0002\u0528",
    "\u051f\u0003\u0002\u0002\u0002\u0528\u0520\u0003\u0002\u0002\u0002\u0528",
    "\u0521\u0003\u0002\u0002\u0002\u0528\u0522\u0003\u0002\u0002\u0002\u0528",
    "\u0523\u0003\u0002\u0002\u0002\u0528\u0524\u0003\u0002\u0002\u0002\u0528",
    "\u0525\u0003\u0002\u0002\u0002\u0528\u0526\u0003\u0002\u0002\u0002\u0528",
    "\u0527\u0003\u0002\u0002\u0002\u0529=\u0003\u0002\u0002\u0002\u052a",
    "\u0530\u0007\u0154\u0002\u0002\u052b\u0530\u0007\u014d\u0002\u0002\u052c",
    "\u052d\u0007\u014d\u0002\u0002\u052d\u052e\u0007l\u0002\u0002\u052e",
    "\u0530\u0007\u020d\u0002\u0002\u052f\u052a\u0003\u0002\u0002\u0002\u052f",
    "\u052b\u0003\u0002\u0002\u0002\u052f\u052c\u0003\u0002\u0002\u0002\u0530",
    "?\u0003\u0002\u0002\u0002\u0531\u0532\u0007\u00ab\u0002\u0002\u0532",
    "\u0533\t\u000f\u0002\u0002\u0533A\u0003\u0002\u0002\u0002\u0534\u0536",
    "\u0007\u018d\u0002\u0002\u0535\u0537\u0007\u03f5\u0002\u0002\u0536\u0535",
    "\u0003\u0002\u0002\u0002\u0536\u0537\u0003\u0002\u0002\u0002\u0537\u0538",
    "\u0003\u0002\u0002\u0002\u0538\u0542\u0005\u0214\u010b\u0002\u0539\u0542",
    "\u0005@!\u0002\u053a\u053b\u0007\u00b0\u0002\u0002\u053b\u053c\u0007",
    "\u01d2\u0002\u0002\u053c\u0542\u0005\u020c\u0107\u0002\u053d\u053e\u0007",
    "\u0133\u0002\u0002\u053e\u0542\u0007\u040d\u0002\u0002\u053f\u0542\u0007",
    "\u0185\u0002\u0002\u0540\u0542\u0007\u0246\u0002\u0002\u0541\u0534\u0003",
    "\u0002\u0002\u0002\u0541\u0539\u0003\u0002\u0002\u0002\u0541\u053a\u0003",
    "\u0002\u0002\u0002\u0541\u053d\u0003\u0002\u0002\u0002\u0541\u053f\u0003",
    "\u0002\u0002\u0002\u0541\u0540\u0003\u0002\u0002\u0002\u0542C\u0003",
    "\u0002\u0002\u0002\u0543\u0545\t\u0010\u0002\u0002\u0544\u0543\u0003",
    "\u0002\u0002\u0002\u0544\u0545\u0003\u0002\u0002\u0002\u0545\u0546\u0003",
    "\u0002\u0002\u0002\u0546\u0547\u0005\u020c\u0107\u0002\u0547\u0548\u0005",
    "\u0220\u0111\u0002\u0548E\u0003\u0002\u0002\u0002\u0549\u054a\u0005",
    "\u020c\u0107\u0002\u054a\u054b\u0005\u0220\u0111\u0002\u054bG\u0003",
    "\u0002\u0002\u0002\u054c\u054d\u0007\u0133\u0002\u0002\u054d\u0564\u0007",
    "\u040d\u0002\u0002\u054e\u054f\u0007\u018e\u0002\u0002\u054f\u0564\u0007",
    "\u0091\u0002\u0002\u0550\u0552\u0007h\u0002\u0002\u0551\u0550\u0003",
    "\u0002\u0002\u0002\u0551\u0552\u0003\u0002\u0002\u0002\u0552\u0553\u0003",
    "\u0002\u0002\u0002\u0553\u0564\u0007-\u0002\u0002\u0554\u0555\u0007",
    "\u013f\u0002\u0002\u0555\u055f\u0007\u0091\u0002\u0002\u0556\u0557\u0007",
    "\u01c2\u0002\u0002\u0557\u055f\u0007\u0091\u0002\u0002\u0558\u0559\u0007",
    "{\u0002\u0002\u0559\u055a\u0007\u0091\u0002\u0002\u055a\u055f\u0007",
    "\u0145\u0002\u0002\u055b\u055c\u0007f\u0002\u0002\u055c\u055d\u0007",
    "\u0091\u0002\u0002\u055d\u055f\u0007\u0145\u0002\u0002\u055e\u0554\u0003",
    "\u0002\u0002\u0002\u055e\u0556\u0003\u0002\u0002\u0002\u055e\u0558\u0003",
    "\u0002\u0002\u0002\u055e\u055b\u0003\u0002\u0002\u0002\u055f\u0564\u0003",
    "\u0002\u0002\u0002\u0560\u0561\u0007\u0091\u0002\u0002\u0561\u0562\u0007",
    "\u0206\u0002\u0002\u0562\u0564\t\r\u0002\u0002\u0563\u054c\u0003\u0002",
    "\u0002\u0002\u0563\u054e\u0003\u0002\u0002\u0002\u0563\u0551\u0003\u0002",
    "\u0002\u0002\u0563\u055e\u0003\u0002\u0002\u0002\u0563\u0560\u0003\u0002",
    "\u0002\u0002\u0564I\u0003\u0002\u0002\u0002\u0565\u0566\u0007\u017a",
    "\u0002\u0002\u0566\u0574\u0007\u040d\u0002\u0002\u0567\u0568\u0007%",
    "\u0002\u0002\u0568\u0574\u0007\u040d\u0002\u0002\u0569\u056a\u0007\u023e",
    "\u0002\u0002\u056a\u0574\u0007\u040d\u0002\u0002\u056b\u056c\u0007\u01d6",
    "\u0002\u0002\u056c\u0574\u0007\u040d\u0002\u0002\u056d\u056e\u0007\u0210",
    "\u0002\u0002\u056e\u0574\u0007\u040d\u0002\u0002\u056f\u0570\u0007\u01cf",
    "\u0002\u0002\u0570\u0574\u0007\u040d\u0002\u0002\u0571\u0572\u0007\u01db",
    "\u0002\u0002\u0572\u0574\u0005\u0212\u010a\u0002\u0573\u0565\u0003\u0002",
    "\u0002\u0002\u0573\u0567\u0003\u0002\u0002\u0002\u0573\u0569\u0003\u0002",
    "\u0002\u0002\u0573\u056b\u0003\u0002\u0002\u0002\u0573\u056d\u0003\u0002",
    "\u0002\u0002\u0573\u056f\u0003\u0002\u0002\u0002\u0573\u0571\u0003\u0002",
    "\u0002\u0002\u0574K\u0003\u0002\u0002\u0002\u0575\u0576\u0007\u03fe",
    "\u0002\u0002\u0576\u057b\u0005N(\u0002\u0577\u0578\u0007\u0400\u0002",
    "\u0002\u0578\u057a\u0005N(\u0002\u0579\u0577\u0003\u0002\u0002\u0002",
    "\u057a\u057d\u0003\u0002\u0002\u0002\u057b\u0579\u0003\u0002\u0002\u0002",
    "\u057b\u057c\u0003\u0002\u0002\u0002\u057c\u057e\u0003\u0002\u0002\u0002",
    "\u057d\u057b\u0003\u0002\u0002\u0002\u057e\u057f\u0007\u03ff\u0002\u0002",
    "\u057fM\u0003\u0002\u0002\u0002\u0580\u0581\u0005\u020c\u0107\u0002",
    "\u0581\u0582\u0005P)\u0002\u0582\u0586\u0003\u0002\u0002\u0002\u0583",
    "\u0586\u0005T+\u0002\u0584\u0586\u0005\\/\u0002\u0585\u0580\u0003\u0002",
    "\u0002\u0002\u0585\u0583\u0003\u0002\u0002\u0002\u0585\u0584\u0003\u0002",
    "\u0002\u0002\u0586O\u0003\u0002\u0002\u0002\u0587\u058b\u0005\u0220",
    "\u0111\u0002\u0588\u058a\u0005R*\u0002\u0589\u0588\u0003\u0002\u0002",
    "\u0002\u058a\u058d\u0003\u0002\u0002\u0002\u058b\u0589\u0003\u0002\u0002",
    "\u0002\u058b\u058c\u0003\u0002\u0002\u0002\u058cQ\u0003\u0002\u0002",
    "\u0002\u058d\u058b\u0003\u0002\u0002\u0002\u058e\u05c2\u0005\u021c\u010f",
    "\u0002\u058f\u0590\u0007(\u0002\u0002\u0590\u05c2\u0005\u023c\u011f",
    "\u0002\u0591\u0596\u0007\u011a\u0002\u0002\u0592\u0593\u0007l\u0002",
    "\u0002\u0593\u0594\u0007\u00a8\u0002\u0002\u0594\u0596\u0005\u023e\u0120",
    "\u0002\u0595\u0591\u0003\u0002\u0002\u0002\u0595\u0592\u0003\u0002\u0002",
    "\u0002\u0596\u05c2\u0003\u0002\u0002\u0002\u0597\u0599\u0007v\u0002",
    "\u0002\u0598\u0597\u0003\u0002\u0002\u0002\u0598\u0599\u0003\u0002\u0002",
    "\u0002\u0599\u059a\u0003\u0002\u0002\u0002\u059a\u05c2\u0007T\u0002",
    "\u0002\u059b\u059d\u0007\u00a5\u0002\u0002\u059c\u059e\u0007T\u0002",
    "\u0002\u059d\u059c\u0003\u0002\u0002\u0002\u059d\u059e\u0003\u0002\u0002",
    "\u0002\u059e\u05c2\u0003\u0002\u0002\u0002\u059f\u05a0\u0007\u0133\u0002",
    "\u0002\u05a0\u05c2\u0007\u040d\u0002\u0002\u05a1\u05a2\u0007\u0131\u0002",
    "\u0002\u05a2\u05c2\t\u0011\u0002\u0002\u05a3\u05a4\u0007\u0223\u0002",
    "\u0002\u05a4\u05c2\t\u0012\u0002\u0002\u05a5\u05c2\u0005V,\u0002\u05a6",
    "\u05a7\u0007\u001a\u0002\u0002\u05a7\u05c2\u0005\u0200\u0101\u0002\u05a8",
    "\u05a9\u0007A\u0002\u0002\u05a9\u05ab\u0007\n\u0002\u0002\u05aa\u05a8",
    "\u0003\u0002\u0002\u0002\u05aa\u05ab\u0003\u0002\u0002\u0002\u05ab\u05ac",
    "\u0003\u0002\u0002\u0002\u05ac\u05ad\u0007\r\u0002\u0002\u05ad\u05ae",
    "\u0007\u03fe\u0002\u0002\u05ae\u05af\u0005\u025a\u012e\u0002\u05af\u05b1",
    "\u0007\u03ff\u0002\u0002\u05b0\u05b2\t\u0013\u0002\u0002\u05b1\u05b0",
    "\u0003\u0002\u0002\u0002\u05b1\u05b2\u0003\u0002\u0002\u0002\u05b2\u05c2",
    "\u0003\u0002\u0002\u0002\u05b3\u05b4\u0007\u00df\u0002\u0002\u05b4\u05b5",
    "\u0007(\u0002\u0002\u05b5\u05c2\u0007\u0242\u0002\u0002\u05b6\u05b8",
    "\u0007\u001d\u0002\u0002\u05b7\u05b9\u0005\u020c\u0107\u0002\u05b8\u05b7",
    "\u0003\u0002\u0002\u0002\u05b8\u05b9\u0003\u0002\u0002\u0002\u05b9\u05bb",
    "\u0003\u0002\u0002\u0002\u05ba\u05b6\u0003\u0002\u0002\u0002\u05ba\u05bb",
    "\u0003\u0002\u0002\u0002\u05bb\u05bc\u0003\u0002\u0002\u0002\u05bc\u05bd",
    "\u0007\u0019\u0002\u0002\u05bd\u05be\u0007\u03fe\u0002\u0002\u05be\u05bf",
    "\u0005\u025a\u012e\u0002\u05bf\u05c0\u0007\u03ff\u0002\u0002\u05c0\u05c2",
    "\u0003\u0002\u0002\u0002\u05c1\u058e\u0003\u0002\u0002\u0002\u05c1\u058f",
    "\u0003\u0002\u0002\u0002\u05c1\u0595\u0003\u0002\u0002\u0002\u05c1\u0598",
    "\u0003\u0002\u0002\u0002\u05c1\u059b\u0003\u0002\u0002\u0002\u05c1\u059f",
    "\u0003\u0002\u0002\u0002\u05c1\u05a1\u0003\u0002\u0002\u0002\u05c1\u05a3",
    "\u0003\u0002\u0002\u0002\u05c1\u05a5\u0003\u0002\u0002\u0002\u05c1\u05a6",
    "\u0003\u0002\u0002\u0002\u05c1\u05aa\u0003\u0002\u0002\u0002\u05c1\u05b3",
    "\u0003\u0002\u0002\u0002\u05c1\u05ba\u0003\u0002\u0002\u0002\u05c2S",
    "\u0003\u0002\u0002\u0002\u05c3\u05c5\u0007\u001d\u0002\u0002\u05c4\u05c6",
    "\u0005\u020c\u0107\u0002\u05c5\u05c4\u0003\u0002\u0002\u0002\u05c5\u05c6",
    "\u0003\u0002\u0002\u0002\u05c6\u05c8\u0003\u0002\u0002\u0002\u05c7\u05c3",
    "\u0003\u0002\u0002\u0002\u05c7\u05c8\u0003\u0002\u0002\u0002\u05c8\u05c9",
    "\u0003\u0002\u0002\u0002\u05c9\u05ca\u0007v\u0002\u0002\u05ca\u05cc",
    "\u0007T\u0002\u0002\u05cb\u05cd\u0005\u020c\u0107\u0002\u05cc\u05cb",
    "\u0003\u0002\u0002\u0002\u05cc\u05cd\u0003\u0002\u0002\u0002\u05cd\u05cf",
    "\u0003\u0002\u0002\u0002\u05ce\u05d0\u0005@!\u0002\u05cf\u05ce\u0003",
    "\u0002\u0002\u0002\u05cf\u05d0\u0003\u0002\u0002\u0002\u05d0\u05d1\u0003",
    "\u0002\u0002\u0002\u05d1\u05d5\u0005\u0230\u0119\u0002\u05d2\u05d4\u0005",
    "B\"\u0002\u05d3\u05d2\u0003\u0002\u0002\u0002\u05d4\u05d7\u0003\u0002",
    "\u0002\u0002\u05d5\u05d3\u0003\u0002\u0002\u0002\u05d5\u05d6\u0003\u0002",
    "\u0002\u0002\u05d6\u0609\u0003\u0002\u0002\u0002\u05d7\u05d5\u0003\u0002",
    "\u0002\u0002\u05d8\u05da\u0007\u001d\u0002\u0002\u05d9\u05db\u0005\u020c",
    "\u0107\u0002\u05da\u05d9\u0003\u0002\u0002\u0002\u05da\u05db\u0003\u0002",
    "\u0002\u0002\u05db\u05dd\u0003\u0002\u0002\u0002\u05dc\u05d8\u0003\u0002",
    "\u0002\u0002\u05dc\u05dd\u0003\u0002\u0002\u0002\u05dd\u05de\u0003\u0002",
    "\u0002\u0002\u05de\u05e0\u0007\u00a5\u0002\u0002\u05df\u05e1\t\u0014",
    "\u0002\u0002\u05e0\u05df\u0003\u0002\u0002\u0002\u05e0\u05e1\u0003\u0002",
    "\u0002\u0002\u05e1\u05e3\u0003\u0002\u0002\u0002\u05e2\u05e4\u0005\u020c",
    "\u0107\u0002\u05e3\u05e2\u0003\u0002\u0002\u0002\u05e3\u05e4\u0003\u0002",
    "\u0002\u0002\u05e4\u05e6\u0003\u0002\u0002\u0002\u05e5\u05e7\u0005@",
    "!\u0002\u05e6\u05e5\u0003\u0002\u0002\u0002\u05e6\u05e7\u0003\u0002",
    "\u0002\u0002\u05e7\u05e8\u0003\u0002\u0002\u0002\u05e8\u05ec\u0005\u0230",
    "\u0119\u0002\u05e9\u05eb\u0005B\"\u0002\u05ea\u05e9\u0003\u0002\u0002",
    "\u0002\u05eb\u05ee\u0003\u0002\u0002\u0002\u05ec\u05ea\u0003\u0002\u0002",
    "\u0002\u05ec\u05ed\u0003\u0002\u0002\u0002\u05ed\u0609\u0003\u0002\u0002",
    "\u0002\u05ee\u05ec\u0003\u0002\u0002\u0002\u05ef\u05f1\u0007\u001d\u0002",
    "\u0002\u05f0\u05f2\u0005\u020c\u0107\u0002\u05f1\u05f0\u0003\u0002\u0002",
    "\u0002\u05f1\u05f2\u0003\u0002\u0002\u0002\u05f2\u05f4\u0003\u0002\u0002",
    "\u0002\u05f3\u05ef\u0003\u0002\u0002\u0002\u05f3\u05f4\u0003\u0002\u0002",
    "\u0002\u05f4\u05f5\u0003\u0002\u0002\u0002\u05f5\u05f6\u0007>\u0002",
    "\u0002\u05f6\u05f8\u0007T\u0002\u0002\u05f7\u05f9\u0005\u020c\u0107",
    "\u0002\u05f8\u05f7\u0003\u0002\u0002\u0002\u05f8\u05f9\u0003\u0002\u0002",
    "\u0002\u05f9\u05fa\u0003\u0002\u0002\u0002\u05fa\u05fb\u0005\u0230\u0119",
    "\u0002\u05fb\u05fc\u0005V,\u0002\u05fc\u0609\u0003\u0002\u0002\u0002",
    "\u05fd\u05ff\u0007\u001d\u0002\u0002\u05fe\u0600\u0005\u020c\u0107\u0002",
    "\u05ff\u05fe\u0003\u0002\u0002\u0002\u05ff\u0600\u0003\u0002\u0002\u0002",
    "\u0600\u0602\u0003\u0002\u0002\u0002\u0601\u05fd\u0003\u0002\u0002\u0002",
    "\u0601\u0602\u0003\u0002\u0002\u0002\u0602\u0603\u0003\u0002\u0002\u0002",
    "\u0603\u0604\u0007\u0019\u0002\u0002\u0604\u0605\u0007\u03fe\u0002\u0002",
    "\u0605\u0606\u0005\u025a\u012e\u0002\u0606\u0607\u0007\u03ff\u0002\u0002",
    "\u0607\u0609\u0003\u0002\u0002\u0002\u0608\u05c7\u0003\u0002\u0002\u0002",
    "\u0608\u05dc\u0003\u0002\u0002\u0002\u0608\u05f3\u0003\u0002\u0002\u0002",
    "\u0608\u0601\u0003\u0002\u0002\u0002\u0609U\u0003\u0002\u0002\u0002",
    "\u060a\u060b\u0007|\u0002\u0002\u060b\u060d\u0005\u01f4\u00fb\u0002",
    "\u060c\u060e\u0005\u0230\u0119\u0002\u060d\u060c\u0003\u0002\u0002\u0002",
    "\u060d\u060e\u0003\u0002\u0002\u0002\u060e\u0611\u0003\u0002\u0002\u0002",
    "\u060f\u0610\u0007d\u0002\u0002\u0610\u0612\t\u0015\u0002\u0002\u0611",
    "\u060f\u0003\u0002\u0002\u0002\u0611\u0612\u0003\u0002\u0002\u0002\u0612",
    "\u0614\u0003\u0002\u0002\u0002\u0613\u0615\u0005X-\u0002\u0614\u0613",
    "\u0003\u0002\u0002\u0002\u0614\u0615\u0003\u0002\u0002\u0002\u0615W",
    "\u0003\u0002\u0002\u0002\u0616\u0617\u0007l\u0002\u0002\u0617\u0618",
    "\u0007*\u0002\u0002\u0618\u061c\u0005Z.\u0002\u0619\u061a\u0007l\u0002",
    "\u0002\u061a\u061b\u0007\u00a8\u0002\u0002\u061b\u061d\u0005Z.\u0002",
    "\u061c\u0619\u0003\u0002\u0002\u0002\u061c\u061d\u0003\u0002\u0002\u0002",
    "\u061d\u0627\u0003\u0002\u0002\u0002\u061e\u061f\u0007l\u0002\u0002",
    "\u061f\u0620\u0007\u00a8\u0002\u0002\u0620\u0624\u0005Z.\u0002\u0621",
    "\u0622\u0007l\u0002\u0002\u0622\u0623\u0007*\u0002\u0002\u0623\u0625",
    "\u0005Z.\u0002\u0624\u0621\u0003\u0002\u0002\u0002\u0624\u0625\u0003",
    "\u0002\u0002\u0002\u0625\u0627\u0003\u0002\u0002\u0002\u0626\u0616\u0003",
    "\u0002\u0002\u0002\u0626\u061e\u0003\u0002\u0002\u0002\u0627Y\u0003",
    "\u0002\u0002\u0002\u0628\u062f\u0007\u0084\u0002\u0002\u0629\u062f\u0007",
    "\u0014\u0002\u0002\u062a\u062b\u0007\u008c\u0002\u0002\u062b\u062f\u0007",
    "j\u0002\u0002\u062c\u062d\u0007\u01c2\u0002\u0002\u062d\u062f\u0007",
    "\u0111\u0002\u0002\u062e\u0628\u0003\u0002\u0002\u0002\u062e\u0629\u0003",
    "\u0002\u0002\u0002\u062e\u062a\u0003\u0002\u0002\u0002\u062e\u062c\u0003",
    "\u0002\u0002\u0002\u062f[\u0003\u0002\u0002\u0002\u0630\u0632\t\u0014",
    "\u0002\u0002\u0631\u0633\u0005\u020c\u0107\u0002\u0632\u0631\u0003\u0002",
    "\u0002\u0002\u0632\u0633\u0003\u0002\u0002\u0002\u0633\u0635\u0003\u0002",
    "\u0002\u0002\u0634\u0636\u0005@!\u0002\u0635\u0634\u0003\u0002\u0002",
    "\u0002\u0635\u0636\u0003\u0002\u0002\u0002\u0636\u0637\u0003\u0002\u0002",
    "\u0002\u0637\u063b\u0005\u0230\u0119\u0002\u0638\u063a\u0005B\"\u0002",
    "\u0639\u0638\u0003\u0002\u0002\u0002\u063a\u063d\u0003\u0002\u0002\u0002",
    "\u063b\u0639\u0003\u0002\u0002\u0002\u063b\u063c\u0003\u0002\u0002\u0002",
    "\u063c\u064d\u0003\u0002\u0002\u0002\u063d\u063b\u0003\u0002\u0002\u0002",
    "\u063e\u0640\t\u0016\u0002\u0002\u063f\u0641\t\u0014\u0002\u0002\u0640",
    "\u063f\u0003\u0002\u0002\u0002\u0640\u0641\u0003\u0002\u0002\u0002\u0641",
    "\u0643\u0003\u0002\u0002\u0002\u0642\u0644\u0005\u020c\u0107\u0002\u0643",
    "\u0642\u0003\u0002\u0002\u0002\u0643\u0644\u0003\u0002\u0002\u0002\u0644",
    "\u0645\u0003\u0002\u0002\u0002\u0645\u0649\u0005\u0230\u0119\u0002\u0646",
    "\u0648\u0005B\"\u0002\u0647\u0646\u0003\u0002\u0002\u0002\u0648\u064b",
    "\u0003\u0002\u0002\u0002\u0649\u0647\u0003\u0002\u0002\u0002\u0649\u064a",
    "\u0003\u0002\u0002\u0002\u064a\u064d\u0003\u0002\u0002\u0002\u064b\u0649",
    "\u0003\u0002\u0002\u0002\u064c\u0630\u0003\u0002\u0002\u0002\u064c\u063e",
    "\u0003\u0002\u0002\u0002\u064d]\u0003\u0002\u0002\u0002\u064e\u0650",
    "\u0007\u0158\u0002\u0002\u064f\u0651\u0007\u03f5\u0002\u0002\u0650\u064f",
    "\u0003\u0002\u0002\u0002\u0650\u0651\u0003\u0002\u0002\u0002\u0651\u0652",
    "\u0003\u0002\u0002\u0002\u0652\u06df\u0005\u0202\u0102\u0002\u0653\u0655",
    "\u0007\u011a\u0002\u0002\u0654\u0656\u0007\u03f5\u0002\u0002\u0655\u0654",
    "\u0003\u0002\u0002\u0002\u0655\u0656\u0003\u0002\u0002\u0002\u0656\u0657",
    "\u0003\u0002\u0002\u0002\u0657\u06df\u0005\u0212\u010a\u0002\u0658\u065a",
    "\u0007\u011b\u0002\u0002\u0659\u065b\u0007\u03f5\u0002\u0002\u065a\u0659",
    "\u0003\u0002\u0002\u0002\u065a\u065b\u0003\u0002\u0002\u0002\u065b\u065c",
    "\u0003\u0002\u0002\u0002\u065c\u06df\u0005\u0212\u010a\u0002\u065d\u065f",
    "\u0007(\u0002\u0002\u065e\u065d\u0003\u0002\u0002\u0002\u065e\u065f",
    "\u0003\u0002\u0002\u0002\u065f\u0663\u0003\u0002\u0002\u0002\u0660\u0661",
    "\u0007\u0018\u0002\u0002\u0661\u0664\u0007\u008c\u0002\u0002\u0662\u0664",
    "\u0007\u02dd\u0002\u0002\u0663\u0660\u0003\u0002\u0002\u0002\u0663\u0662",
    "\u0003\u0002\u0002\u0002\u0664\u0666\u0003\u0002\u0002\u0002\u0665\u0667",
    "\u0007\u03f5\u0002\u0002\u0666\u0665\u0003\u0002\u0002\u0002\u0666\u0667",
    "\u0003\u0002\u0002\u0002\u0667\u066a\u0003\u0002\u0002\u0002\u0668\u066b",
    "\u0005\u01fe\u0100\u0002\u0669\u066b\u0007(\u0002\u0002\u066a\u0668",
    "\u0003\u0002\u0002\u0002\u066a\u0669\u0003\u0002\u0002\u0002\u066b\u06df",
    "\u0003\u0002\u0002\u0002\u066c\u066e\t\u0017\u0002\u0002\u066d\u066f",
    "\u0007\u03f5\u0002\u0002\u066e\u066d\u0003\u0002\u0002\u0002\u066e\u066f",
    "\u0003\u0002\u0002\u0002\u066f\u0670\u0003\u0002\u0002\u0002\u0670\u06df",
    "\t\u0018\u0002\u0002\u0671\u0673\u0007(\u0002\u0002\u0672\u0671\u0003",
    "\u0002\u0002\u0002\u0672\u0673\u0003\u0002\u0002\u0002\u0673\u0674\u0003",
    "\u0002\u0002\u0002\u0674\u0676\u0007\u001a\u0002\u0002\u0675\u0677\u0007",
    "\u03f5\u0002\u0002\u0676\u0675\u0003\u0002\u0002\u0002\u0676\u0677\u0003",
    "\u0002\u0002\u0002\u0677\u0678\u0003\u0002\u0002\u0002\u0678\u06df\u0005",
    "\u0200\u0101\u0002\u0679\u067b\u0007\u0133\u0002\u0002\u067a\u067c\u0007",
    "\u03f5\u0002\u0002\u067b\u067a\u0003\u0002\u0002\u0002\u067b\u067c\u0003",
    "\u0002\u0002\u0002\u067c\u067d\u0003\u0002\u0002\u0002\u067d\u06df\u0007",
    "\u040d\u0002\u0002\u067e\u0680\u0007\u0138\u0002\u0002\u067f\u0681\u0007",
    "\u03f5\u0002\u0002\u0680\u067f\u0003\u0002\u0002\u0002\u0680\u0681\u0003",
    "\u0002\u0002\u0002\u0681\u0682\u0003\u0002\u0002\u0002\u0682\u06df\t",
    "\u0019\u0002\u0002\u0683\u0685\u0007\u013a\u0002\u0002\u0684\u0686\u0007",
    "\u03f5\u0002\u0002\u0685\u0684\u0003\u0002\u0002\u0002\u0685\u0686\u0003",
    "\u0002\u0002\u0002\u0686\u0687\u0003\u0002\u0002\u0002\u0687\u06df\u0007",
    "\u040d\u0002\u0002\u0688\u0689\u0007\u0145\u0002\u0002\u0689\u068b\u0007",
    "\u014c\u0002\u0002\u068a\u068c\u0007\u03f5\u0002\u0002\u068b\u068a\u0003",
    "\u0002\u0002\u0002\u068b\u068c\u0003\u0002\u0002\u0002\u068c\u068d\u0003",
    "\u0002\u0002\u0002\u068d\u06df\u0007\u040d\u0002\u0002\u068e\u0690\u0007",
    "\u014a\u0002\u0002\u068f\u0691\u0007\u03f5\u0002\u0002\u0690\u068f\u0003",
    "\u0002\u0002\u0002\u0690\u0691\u0003\u0002\u0002\u0002\u0691\u0692\u0003",
    "\u0002\u0002\u0002\u0692\u06df\t\u0018\u0002\u0002\u0693\u0695\u0007",
    "\u0155\u0002\u0002\u0694\u0696\u0007\u03f5\u0002\u0002\u0695\u0694\u0003",
    "\u0002\u0002\u0002\u0695\u0696\u0003\u0002\u0002\u0002\u0696\u0697\u0003",
    "\u0002\u0002\u0002\u0697\u06df\u0007\u040d\u0002\u0002\u0698\u0699\u0007",
    "J\u0002\u0002\u0699\u069b\u0007\u014c\u0002\u0002\u069a\u069c\u0007",
    "\u03f5\u0002\u0002\u069b\u069a\u0003\u0002\u0002\u0002\u069b\u069c\u0003",
    "\u0002\u0002\u0002\u069c\u069d\u0003\u0002\u0002\u0002\u069d\u06df\u0007",
    "\u040d\u0002\u0002\u069e\u06a0\u0007\u0182\u0002\u0002\u069f\u06a1\u0007",
    "\u03f5\u0002\u0002\u06a0\u069f\u0003\u0002\u0002\u0002\u06a0\u06a1\u0003",
    "\u0002\u0002\u0002\u06a1\u06a2\u0003\u0002\u0002\u0002\u06a2\u06df\t",
    "\u001a\u0002\u0002\u06a3\u06a5\u0007\u018d\u0002\u0002\u06a4\u06a6\u0007",
    "\u03f5\u0002\u0002\u06a5\u06a4\u0003\u0002\u0002\u0002\u06a5\u06a6\u0003",
    "\u0002\u0002\u0002\u06a6\u06a7\u0003\u0002\u0002\u0002\u06a7\u06df\u0005",
    "\u0214\u010b\u0002\u06a8\u06aa\u0007\u01ae\u0002\u0002\u06a9\u06ab\u0007",
    "\u03f5\u0002\u0002\u06aa\u06a9\u0003\u0002\u0002\u0002\u06aa\u06ab\u0003",
    "\u0002\u0002\u0002\u06ab\u06ac\u0003\u0002\u0002\u0002\u06ac\u06df\u0005",
    "\u0212\u010a\u0002\u06ad\u06af\u0007\u01b7\u0002\u0002\u06ae\u06b0\u0007",
    "\u03f5\u0002\u0002\u06af\u06ae\u0003\u0002\u0002\u0002\u06af\u06b0\u0003",
    "\u0002\u0002\u0002\u06b0\u06b1\u0003\u0002\u0002\u0002\u06b1\u06df\u0005",
    "\u0212\u010a\u0002\u06b2\u06b4\u0007\u01d0\u0002\u0002\u06b3\u06b5\u0007",
    "\u03f5\u0002\u0002\u06b4\u06b3\u0003\u0002\u0002\u0002\u06b4\u06b5\u0003",
    "\u0002\u0002\u0002\u06b5\u06b6\u0003\u0002\u0002\u0002\u06b6\u06df\t",
    "\u001b\u0002\u0002\u06b7\u06b9\u0007\u01d6\u0002\u0002\u06b8\u06ba\u0007",
    "\u03f5\u0002\u0002\u06b9\u06b8\u0003\u0002\u0002\u0002\u06b9\u06ba\u0003",
    "\u0002\u0002\u0002\u06ba\u06bb\u0003\u0002\u0002\u0002\u06bb\u06df\u0007",
    "\u040d\u0002\u0002\u06bc\u06be\u0007\u0203\u0002\u0002\u06bd\u06bf\u0007",
    "\u03f5\u0002\u0002\u06be\u06bd\u0003\u0002\u0002\u0002\u06be\u06bf\u0003",
    "\u0002\u0002\u0002\u06bf\u06c0\u0003\u0002\u0002\u0002\u06c0\u06df\t",
    "\u001c\u0002\u0002\u06c1\u06c3\u0007\u021e\u0002\u0002\u06c2\u06c4\u0007",
    "\u03f5\u0002\u0002\u06c3\u06c2\u0003\u0002\u0002\u0002\u06c3\u06c4\u0003",
    "\u0002\u0002\u0002\u06c4\u06c5\u0003\u0002\u0002\u0002\u06c5\u06df\t",
    "\u001b\u0002\u0002\u06c6\u06c8\u0007\u021f\u0002\u0002\u06c7\u06c9\u0007",
    "\u03f5\u0002\u0002\u06c8\u06c7\u0003\u0002\u0002\u0002\u06c8\u06c9\u0003",
    "\u0002\u0002\u0002\u06c9\u06ca\u0003\u0002\u0002\u0002\u06ca\u06df\t",
    "\u001b\u0002\u0002\u06cb\u06cd\u0007\u0220\u0002\u0002\u06cc\u06ce\u0007",
    "\u03f5\u0002\u0002\u06cd\u06cc\u0003\u0002\u0002\u0002\u06cd\u06ce\u0003",
    "\u0002\u0002\u0002\u06ce\u06cf\u0003\u0002\u0002\u0002\u06cf\u06df\u0005",
    "\u0212\u010a\u0002\u06d0\u06d1\u0007\u022e\u0002\u0002\u06d1\u06d3\u0005",
    "\u020c\u0107\u0002\u06d2\u06d4\u0005`1\u0002\u06d3\u06d2\u0003\u0002",
    "\u0002\u0002\u06d3\u06d4\u0003\u0002\u0002\u0002\u06d4\u06df\u0003\u0002",
    "\u0002\u0002\u06d5\u06df\u0005`1\u0002\u06d6\u06d8\u0007\u00a4\u0002",
    "\u0002\u06d7\u06d9\u0007\u03f5\u0002\u0002\u06d8\u06d7\u0003\u0002\u0002",
    "\u0002\u06d8\u06d9\u0003\u0002\u0002\u0002\u06d9\u06da\u0003\u0002\u0002",
    "\u0002\u06da\u06db\u0007\u03fe\u0002\u0002\u06db\u06dc\u0005\u022e\u0118",
    "\u0002\u06dc\u06dd\u0007\u03ff\u0002\u0002\u06dd\u06df\u0003\u0002\u0002",
    "\u0002\u06de\u064e\u0003\u0002\u0002\u0002\u06de\u0653\u0003\u0002\u0002",
    "\u0002\u06de\u0658\u0003\u0002\u0002\u0002\u06de\u065e\u0003\u0002\u0002",
    "\u0002\u06de\u066c\u0003\u0002\u0002\u0002\u06de\u0672\u0003\u0002\u0002",
    "\u0002\u06de\u0679\u0003\u0002\u0002\u0002\u06de\u067e\u0003\u0002\u0002",
    "\u0002\u06de\u0683\u0003\u0002\u0002\u0002\u06de\u0688\u0003\u0002\u0002",
    "\u0002\u06de\u068e\u0003\u0002\u0002\u0002\u06de\u0693\u0003\u0002\u0002",
    "\u0002\u06de\u0698\u0003\u0002\u0002\u0002\u06de\u069e\u0003\u0002\u0002",
    "\u0002\u06de\u06a3\u0003\u0002\u0002\u0002\u06de\u06a8\u0003\u0002\u0002",
    "\u0002\u06de\u06ad\u0003\u0002\u0002\u0002\u06de\u06b2\u0003\u0002\u0002",
    "\u0002\u06de\u06b7\u0003\u0002\u0002\u0002\u06de\u06bc\u0003\u0002\u0002",
    "\u0002\u06de\u06c1\u0003\u0002\u0002\u0002\u06de\u06c6\u0003\u0002\u0002",
    "\u0002\u06de\u06cb\u0003\u0002\u0002\u0002\u06de\u06d0\u0003\u0002\u0002",
    "\u0002\u06de\u06d5\u0003\u0002\u0002\u0002\u06de\u06d6\u0003\u0002\u0002",
    "\u0002\u06df_\u0003\u0002\u0002\u0002\u06e0\u06e1\u0007\u0223\u0002",
    "\u0002\u06e1\u06e2\t\u0012\u0002\u0002\u06e2a\u0003\u0002\u0002\u0002",
    "\u06e3\u06e4\u0007u\u0002\u0002\u06e4\u06e5\u0007\u0012\u0002\u0002",
    "\u06e5\u06e8\u0005d3\u0002\u06e6\u06e7\u0007\u01d5\u0002\u0002\u06e7",
    "\u06e9\u0005\u0212\u010a\u0002\u06e8\u06e6\u0003\u0002\u0002\u0002\u06e8",
    "\u06e9\u0003\u0002\u0002\u0002\u06e9\u06f1\u0003\u0002\u0002\u0002\u06ea",
    "\u06eb\u0007\u0228\u0002\u0002\u06eb\u06ec\u0007\u0012\u0002\u0002\u06ec",
    "\u06ef\u0005f4\u0002\u06ed\u06ee\u0007\u0229\u0002\u0002\u06ee\u06f0",
    "\u0005\u0212\u010a\u0002\u06ef\u06ed\u0003\u0002\u0002\u0002\u06ef\u06f0",
    "\u0003\u0002\u0002\u0002\u06f0\u06f2\u0003\u0002\u0002\u0002\u06f1\u06ea",
    "\u0003\u0002\u0002\u0002\u06f1\u06f2\u0003\u0002\u0002\u0002\u06f2\u06fe",
    "\u0003\u0002\u0002\u0002\u06f3\u06f4\u0007\u03fe\u0002\u0002\u06f4\u06f9",
    "\u0005h5\u0002\u06f5\u06f6\u0007\u0400\u0002\u0002\u06f6\u06f8\u0005",
    "h5\u0002\u06f7\u06f5\u0003\u0002\u0002\u0002\u06f8\u06fb\u0003\u0002",
    "\u0002\u0002\u06f9\u06f7\u0003\u0002\u0002\u0002\u06f9\u06fa\u0003\u0002",
    "\u0002\u0002\u06fa\u06fc\u0003\u0002\u0002\u0002\u06fb\u06f9\u0003\u0002",
    "\u0002\u0002\u06fc\u06fd\u0007\u03ff\u0002\u0002\u06fd\u06ff\u0003\u0002",
    "\u0002\u0002\u06fe\u06f3\u0003\u0002\u0002\u0002\u06fe\u06ff\u0003\u0002",
    "\u0002\u0002\u06ffc\u0003\u0002\u0002\u0002\u0700\u0702\u0007\\\u0002",
    "\u0002\u0701\u0700\u0003\u0002\u0002\u0002\u0701\u0702\u0003\u0002\u0002",
    "\u0002\u0702\u0703\u0003\u0002\u0002\u0002\u0703\u0704\u0007\u0178\u0002",
    "\u0002\u0704\u0705\u0007\u03fe\u0002\u0002\u0705\u0706\u0005\u025a\u012e",
    "\u0002\u0706\u0707\u0007\u03ff\u0002\u0002\u0707\u072e\u0003\u0002\u0002",
    "\u0002\u0708\u070a\u0007\\\u0002\u0002\u0709\u0708\u0003\u0002\u0002",
    "\u0002\u0709\u070a\u0003\u0002\u0002\u0002\u070a\u070b\u0003\u0002\u0002",
    "\u0002\u070b\u070f\u0007T\u0002\u0002\u070c\u070d\u0007\u0114\u0002",
    "\u0002\u070d\u070e\u0007\u03f5\u0002\u0002\u070e\u0710\t\u001d\u0002",
    "\u0002\u070f\u070c\u0003\u0002\u0002\u0002\u070f\u0710\u0003\u0002\u0002",
    "\u0002\u0710\u0711\u0003\u0002\u0002\u0002\u0711\u0712\u0007\u03fe\u0002",
    "\u0002\u0712\u0713\u0005\u022c\u0117\u0002\u0713\u0714\u0007\u03ff\u0002",
    "\u0002\u0714\u072e\u0003\u0002\u0002\u0002\u0715\u071f\u0007y\u0002",
    "\u0002\u0716\u0717\u0007\u03fe\u0002\u0002\u0717\u0718\u0005\u025a\u012e",
    "\u0002\u0718\u0719\u0007\u03ff\u0002\u0002\u0719\u0720\u0003\u0002\u0002",
    "\u0002\u071a\u071b\u0007\u0130\u0002\u0002\u071b\u071c\u0007\u03fe\u0002",
    "\u0002\u071c\u071d\u0005\u022c\u0117\u0002\u071d\u071e\u0007\u03ff\u0002",
    "\u0002\u071e\u0720\u0003\u0002\u0002\u0002\u071f\u0716\u0003\u0002\u0002",
    "\u0002\u071f\u071a\u0003\u0002\u0002\u0002\u0720\u072e\u0003\u0002\u0002",
    "\u0002\u0721\u072b\u0007\u0193\u0002\u0002\u0722\u0723\u0007\u03fe\u0002",
    "\u0002\u0723\u0724\u0005\u025a\u012e\u0002\u0724\u0725\u0007\u03ff\u0002",
    "\u0002\u0725\u072c\u0003\u0002\u0002\u0002\u0726\u0727\u0007\u0130\u0002",
    "\u0002\u0727\u0728\u0007\u03fe\u0002\u0002\u0728\u0729\u0005\u022c\u0117",
    "\u0002\u0729\u072a\u0007\u03ff\u0002\u0002\u072a\u072c\u0003\u0002\u0002",
    "\u0002\u072b\u0722\u0003\u0002\u0002\u0002\u072b\u0726\u0003\u0002\u0002",
    "\u0002\u072c\u072e\u0003\u0002\u0002\u0002\u072d\u0701\u0003\u0002\u0002",
    "\u0002\u072d\u0709\u0003\u0002\u0002\u0002\u072d\u0715\u0003\u0002\u0002",
    "\u0002\u072d\u0721\u0003\u0002\u0002\u0002\u072ee\u0003\u0002\u0002",
    "\u0002\u072f\u0731\u0007\\\u0002\u0002\u0730\u072f\u0003\u0002\u0002",
    "\u0002\u0730\u0731\u0003\u0002\u0002\u0002\u0731\u0732\u0003\u0002\u0002",
    "\u0002\u0732\u0733\u0007\u0178\u0002\u0002\u0733\u0734\u0007\u03fe\u0002",
    "\u0002\u0734\u0735\u0005\u025a\u012e\u0002\u0735\u0736\u0007\u03ff\u0002",
    "\u0002\u0736\u0745\u0003\u0002\u0002\u0002\u0737\u0739\u0007\\\u0002",
    "\u0002\u0738\u0737\u0003\u0002\u0002\u0002\u0738\u0739\u0003\u0002\u0002",
    "\u0002\u0739\u073a\u0003\u0002\u0002\u0002\u073a\u073e\u0007T\u0002",
    "\u0002\u073b\u073c\u0007\u0114\u0002\u0002\u073c\u073d\u0007\u03f5\u0002",
    "\u0002\u073d\u073f\t\u001d\u0002\u0002\u073e\u073b\u0003\u0002\u0002",
    "\u0002\u073e\u073f\u0003\u0002\u0002\u0002\u073f\u0740\u0003\u0002\u0002",
    "\u0002\u0740\u0741\u0007\u03fe\u0002\u0002\u0741\u0742\u0005\u022c\u0117",
    "\u0002\u0742\u0743\u0007\u03ff\u0002\u0002\u0743\u0745\u0003\u0002\u0002",
    "\u0002\u0744\u0730\u0003\u0002\u0002\u0002\u0744\u0738\u0003\u0002\u0002",
    "\u0002\u0745g\u0003\u0002\u0002\u0002\u0746\u0747\u0007u\u0002\u0002",
    "\u0747\u0748\u0005\u020c\u0107\u0002\u0748\u0749\u0007\u00ac\u0002\u0002",
    "\u0749\u074a\u0007\u0191\u0002\u0002\u074a\u074b\u0007\u0231\u0002\u0002",
    "\u074b\u074c\u0007\u03fe\u0002\u0002\u074c\u0751\u0005j6\u0002\u074d",
    "\u074e\u0007\u0400\u0002\u0002\u074e\u0750\u0005j6\u0002\u074f\u074d",
    "\u0003\u0002\u0002\u0002\u0750\u0753\u0003\u0002\u0002\u0002\u0751\u074f",
    "\u0003\u0002\u0002\u0002\u0751\u0752\u0003\u0002\u0002\u0002\u0752\u0754",
    "\u0003\u0002\u0002\u0002\u0753\u0751\u0003\u0002\u0002\u0002\u0754\u0758",
    "\u0007\u03ff\u0002\u0002\u0755\u0757\u0005p9\u0002\u0756\u0755\u0003",
    "\u0002\u0002\u0002\u0757\u075a\u0003\u0002\u0002\u0002\u0758\u0756\u0003",
    "\u0002\u0002\u0002\u0758\u0759\u0003\u0002\u0002\u0002\u0759\u0763\u0003",
    "\u0002\u0002\u0002\u075a\u0758\u0003\u0002\u0002\u0002\u075b\u0760\u0005",
    "n8\u0002\u075c\u075d\u0007\u0400\u0002\u0002\u075d\u075f\u0005n8\u0002",
    "\u075e\u075c\u0003\u0002\u0002\u0002\u075f\u0762\u0003\u0002\u0002\u0002",
    "\u0760\u075e\u0003\u0002\u0002\u0002\u0760\u0761\u0003\u0002\u0002\u0002",
    "\u0761\u0764\u0003\u0002\u0002\u0002\u0762\u0760\u0003\u0002\u0002\u0002",
    "\u0763\u075b\u0003\u0002\u0002\u0002\u0763\u0764\u0003\u0002\u0002\u0002",
    "\u0764\u07ca\u0003\u0002\u0002\u0002\u0765\u0766\u0007u\u0002\u0002",
    "\u0766\u0767\u0005\u020c\u0107\u0002\u0767\u0768\u0007\u00ac\u0002\u0002",
    "\u0768\u0769\u0007\u0191\u0002\u0002\u0769\u076a\u0007\u0231\u0002\u0002",
    "\u076a\u076e\u0005j6\u0002\u076b\u076d\u0005p9\u0002\u076c\u076b\u0003",
    "\u0002\u0002\u0002\u076d\u0770\u0003\u0002\u0002\u0002\u076e\u076c\u0003",
    "\u0002\u0002\u0002\u076e\u076f\u0003\u0002\u0002\u0002\u076f\u0779\u0003",
    "\u0002\u0002\u0002\u0770\u076e\u0003\u0002\u0002\u0002\u0771\u0776\u0005",
    "n8\u0002\u0772\u0773\u0007\u0400\u0002\u0002\u0773\u0775\u0005n8\u0002",
    "\u0774\u0772\u0003\u0002\u0002\u0002\u0775\u0778\u0003\u0002\u0002\u0002",
    "\u0776\u0774\u0003\u0002\u0002\u0002\u0776\u0777\u0003\u0002\u0002\u0002",
    "\u0777\u077a\u0003\u0002\u0002\u0002\u0778\u0776\u0003\u0002\u0002\u0002",
    "\u0779\u0771\u0003\u0002\u0002\u0002\u0779\u077a\u0003\u0002\u0002\u0002",
    "\u077a\u07ca\u0003\u0002\u0002\u0002\u077b\u077c\u0007u\u0002\u0002",
    "\u077c\u077d\u0005\u020c\u0107\u0002\u077d\u077e\u0007\u00ac\u0002\u0002",
    "\u077e\u077f\u0007I\u0002\u0002\u077f\u0780\u0007\u03fe\u0002\u0002",
    "\u0780\u0785\u0005j6\u0002\u0781\u0782\u0007\u0400\u0002\u0002\u0782",
    "\u0784\u0005j6\u0002\u0783\u0781\u0003\u0002\u0002\u0002\u0784\u0787",
    "\u0003\u0002\u0002\u0002\u0785\u0783\u0003\u0002\u0002\u0002\u0785\u0786",
    "\u0003\u0002\u0002\u0002\u0786\u0788\u0003\u0002\u0002\u0002\u0787\u0785",
    "\u0003\u0002\u0002\u0002\u0788\u078c\u0007\u03ff\u0002\u0002\u0789\u078b",
    "\u0005p9\u0002\u078a\u0789\u0003\u0002\u0002\u0002\u078b\u078e\u0003",
    "\u0002\u0002\u0002\u078c\u078a\u0003\u0002\u0002\u0002\u078c\u078d\u0003",
    "\u0002\u0002\u0002\u078d\u0797\u0003\u0002\u0002\u0002\u078e\u078c\u0003",
    "\u0002\u0002\u0002\u078f\u0794\u0005n8\u0002\u0790\u0791\u0007\u0400",
    "\u0002\u0002\u0791\u0793\u0005n8\u0002\u0792\u0790\u0003\u0002\u0002",
    "\u0002\u0793\u0796\u0003\u0002\u0002\u0002\u0794\u0792\u0003\u0002\u0002",
    "\u0002\u0794\u0795\u0003\u0002\u0002\u0002\u0795\u0798\u0003\u0002\u0002",
    "\u0002\u0796\u0794\u0003\u0002\u0002\u0002\u0797\u078f\u0003\u0002\u0002",
    "\u0002\u0797\u0798\u0003\u0002\u0002\u0002\u0798\u07ca\u0003\u0002\u0002",
    "\u0002\u0799\u079a\u0007u\u0002\u0002\u079a\u079b\u0005\u020c\u0107",
    "\u0002\u079b\u079c\u0007\u00ac\u0002\u0002\u079c\u079d\u0007I\u0002",
    "\u0002\u079d\u079e\u0007\u03fe\u0002\u0002\u079e\u07a3\u0005l7\u0002",
    "\u079f\u07a0\u0007\u0400\u0002\u0002\u07a0\u07a2\u0005l7\u0002\u07a1",
    "\u079f\u0003\u0002\u0002\u0002\u07a2\u07a5\u0003\u0002\u0002\u0002\u07a3",
    "\u07a1\u0003\u0002\u0002\u0002\u07a3\u07a4\u0003\u0002\u0002\u0002\u07a4",
    "\u07a6\u0003\u0002\u0002\u0002\u07a5\u07a3\u0003\u0002\u0002\u0002\u07a6",
    "\u07aa\u0007\u03ff\u0002\u0002\u07a7\u07a9\u0005p9\u0002\u07a8\u07a7",
    "\u0003\u0002\u0002\u0002\u07a9\u07ac\u0003\u0002\u0002\u0002\u07aa\u07a8",
    "\u0003\u0002\u0002\u0002\u07aa\u07ab\u0003\u0002\u0002\u0002\u07ab\u07b5",
    "\u0003\u0002\u0002\u0002\u07ac\u07aa\u0003\u0002\u0002\u0002\u07ad\u07b2",
    "\u0005n8\u0002\u07ae\u07af\u0007\u0400\u0002\u0002\u07af\u07b1\u0005",
    "n8\u0002\u07b0\u07ae\u0003\u0002\u0002\u0002\u07b1\u07b4\u0003\u0002",
    "\u0002\u0002\u07b2\u07b0\u0003\u0002\u0002\u0002\u07b2\u07b3\u0003\u0002",
    "\u0002\u0002\u07b3\u07b6\u0003\u0002\u0002\u0002\u07b4\u07b2\u0003\u0002",
    "\u0002\u0002\u07b5\u07ad\u0003\u0002\u0002\u0002\u07b5\u07b6\u0003\u0002",
    "\u0002\u0002\u07b6\u07ca\u0003\u0002\u0002\u0002\u07b7\u07b8\u0007u",
    "\u0002\u0002\u07b8\u07bc\u0005\u020c\u0107\u0002\u07b9\u07bb\u0005p",
    "9\u0002\u07ba\u07b9\u0003\u0002\u0002\u0002\u07bb\u07be\u0003\u0002",
    "\u0002\u0002\u07bc\u07ba\u0003\u0002\u0002\u0002\u07bc\u07bd\u0003\u0002",
    "\u0002\u0002\u07bd\u07c7\u0003\u0002\u0002\u0002\u07be\u07bc\u0003\u0002",
    "\u0002\u0002\u07bf\u07c4\u0005n8\u0002\u07c0\u07c1\u0007\u0400\u0002",
    "\u0002\u07c1\u07c3\u0005n8\u0002\u07c2\u07c0\u0003\u0002\u0002\u0002",
    "\u07c3\u07c6\u0003\u0002\u0002\u0002\u07c4\u07c2\u0003\u0002\u0002\u0002",
    "\u07c4\u07c5\u0003\u0002\u0002\u0002\u07c5\u07c8\u0003\u0002\u0002\u0002",
    "\u07c6\u07c4\u0003\u0002\u0002\u0002\u07c7\u07bf\u0003\u0002\u0002\u0002",
    "\u07c7\u07c8\u0003\u0002\u0002\u0002\u07c8\u07ca\u0003\u0002\u0002\u0002",
    "\u07c9\u0746\u0003\u0002\u0002\u0002\u07c9\u0765\u0003\u0002\u0002\u0002",
    "\u07c9\u077b\u0003\u0002\u0002\u0002\u07c9\u0799\u0003\u0002\u0002\u0002",
    "\u07c9\u07b7\u0003\u0002\u0002\u0002\u07cai\u0003\u0002\u0002\u0002",
    "\u07cb\u07cf\u0005\u021e\u0110\u0002\u07cc\u07cf\u0005\u025a\u012e\u0002",
    "\u07cd\u07cf\u0007e\u0002\u0002\u07ce\u07cb\u0003\u0002\u0002\u0002",
    "\u07ce\u07cc\u0003\u0002\u0002\u0002\u07ce\u07cd\u0003\u0002\u0002\u0002",
    "\u07cfk\u0003\u0002\u0002\u0002\u07d0\u07d1\u0007\u03fe\u0002\u0002",
    "\u07d1\u07d4\u0005j6\u0002\u07d2\u07d3\u0007\u0400\u0002\u0002\u07d3",
    "\u07d5\u0005j6\u0002\u07d4\u07d2\u0003\u0002\u0002\u0002\u07d5\u07d6",
    "\u0003\u0002\u0002\u0002\u07d6\u07d4\u0003\u0002\u0002\u0002\u07d6\u07d7",
    "\u0003\u0002\u0002\u0002\u07d7\u07d8\u0003\u0002\u0002\u0002\u07d8\u07d9",
    "\u0007\u03ff\u0002\u0002\u07d9m\u0003\u0002\u0002\u0002\u07da\u07db",
    "\u0007\u0228\u0002\u0002\u07db\u07df\u0005\u020c\u0107\u0002\u07dc\u07de",
    "\u0005p9\u0002\u07dd\u07dc\u0003\u0002\u0002\u0002\u07de\u07e1\u0003",
    "\u0002\u0002\u0002\u07df\u07dd\u0003\u0002\u0002\u0002\u07df\u07e0\u0003",
    "\u0002\u0002\u0002\u07e0o\u0003\u0002\u0002\u0002\u07e1\u07df\u0003",
    "\u0002\u0002\u0002\u07e2\u07e4\u0007\u0223\u0002\u0002\u07e3\u07e2\u0003",
    "\u0002\u0002\u0002\u07e3\u07e4\u0003\u0002\u0002\u0002\u07e4\u07e5\u0003",
    "\u0002\u0002\u0002\u07e5\u07e7\u0007\u0158\u0002\u0002\u07e6\u07e8\u0007",
    "\u03f5\u0002\u0002\u07e7\u07e6\u0003\u0002\u0002\u0002\u07e7\u07e8\u0003",
    "\u0002\u0002\u0002\u07e8\u07e9\u0003\u0002\u0002\u0002\u07e9\u0810\u0005",
    "\u0202\u0102\u0002\u07ea\u07ec\u0007\u0133\u0002\u0002\u07eb\u07ed\u0007",
    "\u03f5\u0002\u0002\u07ec\u07eb\u0003\u0002\u0002\u0002\u07ec\u07ed\u0003",
    "\u0002\u0002\u0002\u07ed\u07ee\u0003\u0002\u0002\u0002\u07ee\u0810\u0007",
    "\u040d\u0002\u0002\u07ef\u07f0\u0007\u0145\u0002\u0002\u07f0\u07f2\u0007",
    "\u014c\u0002\u0002\u07f1\u07f3\u0007\u03f5\u0002\u0002\u07f2\u07f1\u0003",
    "\u0002\u0002\u0002\u07f2\u07f3\u0003\u0002\u0002\u0002\u07f3\u07f4\u0003",
    "\u0002\u0002\u0002\u07f4\u0810\u0007\u040d\u0002\u0002\u07f5\u07f6\u0007",
    "J\u0002\u0002\u07f6\u07f8\u0007\u014c\u0002\u0002\u07f7\u07f9\u0007",
    "\u03f5\u0002\u0002\u07f8\u07f7\u0003\u0002\u0002\u0002\u07f8\u07f9\u0003",
    "\u0002\u0002\u0002\u07f9\u07fa\u0003\u0002\u0002\u0002\u07fa\u0810\u0007",
    "\u040d\u0002\u0002\u07fb\u07fd\u0007\u01ae\u0002\u0002\u07fc\u07fe\u0007",
    "\u03f5\u0002\u0002\u07fd\u07fc\u0003\u0002\u0002\u0002\u07fd\u07fe\u0003",
    "\u0002\u0002\u0002\u07fe\u07ff\u0003\u0002\u0002\u0002\u07ff\u0810\u0005",
    "\u0212\u010a\u0002\u0800\u0802\u0007\u01b7\u0002\u0002\u0801\u0803\u0007",
    "\u03f5\u0002\u0002\u0802\u0801\u0003\u0002\u0002\u0002\u0802\u0803\u0003",
    "\u0002\u0002\u0002\u0803\u0804\u0003\u0002\u0002\u0002\u0804\u0810\u0005",
    "\u0212\u010a\u0002\u0805\u0807\u0007\u022e\u0002\u0002\u0806\u0808\u0007",
    "\u03f5\u0002\u0002\u0807\u0806\u0003\u0002\u0002\u0002\u0807\u0808\u0003",
    "\u0002\u0002\u0002\u0808\u0809\u0003\u0002\u0002\u0002\u0809\u0810\u0005",
    "\u020c\u0107\u0002\u080a\u080c\u0007\u01c3\u0002\u0002\u080b\u080d\u0007",
    "\u03f5\u0002\u0002\u080c\u080b\u0003\u0002\u0002\u0002\u080c\u080d\u0003",
    "\u0002\u0002\u0002\u080d\u080e\u0003\u0002\u0002\u0002\u080e\u0810\u0005",
    "\u020c\u0107\u0002\u080f\u07e3\u0003\u0002\u0002\u0002\u080f\u07ea\u0003",
    "\u0002\u0002\u0002\u080f\u07ef\u0003\u0002\u0002\u0002\u080f\u07f5\u0003",
    "\u0002\u0002\u0002\u080f\u07fb\u0003\u0002\u0002\u0002\u080f\u0800\u0003",
    "\u0002\u0002\u0002\u080f\u0805\u0003\u0002\u0002\u0002\u080f\u080a\u0003",
    "\u0002\u0002\u0002\u0810q\u0003\u0002\u0002\u0002\u0811\u0812\u0007",
    "\t\u0002\u0002\u0812\u0814\t\u0002\u0002\u0002\u0813\u0815\u0005\u020c",
    "\u0107\u0002\u0814\u0813\u0003\u0002\u0002\u0002\u0814\u0815\u0003\u0002",
    "\u0002\u0002\u0815\u0817\u0003\u0002\u0002\u0002\u0816\u0818\u00052",
    "\u001a\u0002\u0817\u0816\u0003\u0002\u0002\u0002\u0818\u0819\u0003\u0002",
    "\u0002\u0002\u0819\u0817\u0003\u0002\u0002\u0002\u0819\u081a\u0003\u0002",
    "\u0002\u0002\u081a\u0824\u0003\u0002\u0002\u0002\u081b\u081c\u0007\t",
    "\u0002\u0002\u081c\u081d\t\u0002\u0002\u0002\u081d\u081e\u0005\u020c",
    "\u0107\u0002\u081e\u081f\u0007\u023d\u0002\u0002\u081f\u0820\u0007\u0145",
    "\u0002\u0002\u0820\u0821\u0007\u014c\u0002\u0002\u0821\u0822\u0007\u01bd",
    "\u0002\u0002\u0822\u0824\u0003\u0002\u0002\u0002\u0823\u0811\u0003\u0002",
    "\u0002\u0002\u0823\u081b\u0003\u0002\u0002\u0002\u0824s\u0003\u0002",
    "\u0002\u0002\u0825\u0827\u0007\t\u0002\u0002\u0826\u0828\u00054\u001b",
    "\u0002\u0827\u0826\u0003\u0002\u0002\u0002\u0827\u0828\u0003\u0002\u0002",
    "\u0002\u0828\u0829\u0003\u0002\u0002\u0002\u0829\u082a\u0007\u015e\u0002",
    "\u0002\u082a\u082e\u0005\u01f2\u00fa\u0002\u082b\u082c\u0007l\u0002",
    "\u0002\u082c\u082d\u0007\u0205\u0002\u0002\u082d\u082f\u00056\u001c",
    "\u0002\u082e\u082b\u0003\u0002\u0002\u0002\u082e\u082f\u0003\u0002\u0002",
    "\u0002\u082f\u0836\u0003\u0002\u0002\u0002\u0830\u0831\u0007l\u0002",
    "\u0002\u0831\u0833\u0007\u0136\u0002\u0002\u0832\u0834\u0007h\u0002",
    "\u0002\u0833\u0832\u0003\u0002\u0002\u0002\u0833\u0834\u0003\u0002\u0002",
    "\u0002\u0834\u0835\u0003\u0002\u0002\u0002\u0835\u0837\u0007\u01de\u0002",
    "\u0002\u0836\u0830\u0003\u0002\u0002\u0002\u0836\u0837\u0003\u0002\u0002",
    "\u0002\u0837\u083b\u0003\u0002\u0002\u0002\u0838\u0839\u0007\u007f\u0002",
    "\u0002\u0839\u083a\u0007\u009f\u0002\u0002\u083a\u083c\u0005\u01f2\u00fa",
    "\u0002\u083b\u0838\u0003\u0002\u0002\u0002\u083b\u083c\u0003\u0002\u0002",
    "\u0002\u083c\u083e\u0003\u0002\u0002\u0002\u083d\u083f\u0005> \u0002",
    "\u083e\u083d\u0003\u0002\u0002\u0002\u083e\u083f\u0003\u0002\u0002\u0002",
    "\u083f\u0842\u0003\u0002\u0002\u0002\u0840\u0841\u0007\u0133\u0002\u0002",
    "\u0841\u0843\u0007\u040d\u0002\u0002\u0842\u0840\u0003\u0002\u0002\u0002",
    "\u0842\u0843\u0003\u0002\u0002\u0002\u0843\u0846\u0003\u0002\u0002\u0002",
    "\u0844\u0845\u0007\u0150\u0002\u0002\u0845\u0847\u0005\u015a\u00ae\u0002",
    "\u0846\u0844\u0003\u0002\u0002\u0002\u0846\u0847\u0003\u0002\u0002\u0002",
    "\u0847u\u0003\u0002\u0002\u0002\u0848\u0849\u0007\t\u0002\u0002\u0849",
    "\u084a\u0007\u0172\u0002\u0002\u084a\u084e\u0005\u01f2\u00fa\u0002\u084b",
    "\u084d\u0005H%\u0002\u084c\u084b\u0003\u0002\u0002\u0002\u084d\u0850",
    "\u0003\u0002\u0002\u0002\u084e\u084c\u0003\u0002\u0002\u0002\u084e\u084f",
    "\u0003\u0002\u0002\u0002\u084fw\u0003\u0002\u0002\u0002\u0850\u084e",
    "\u0003\u0002\u0002\u0002\u0851\u0852\u0007\t\u0002\u0002\u0852\u0853",
    "\u0007\u0184\u0002\u0002\u0853\u0854\u0007\u0200\u0002\u0002\u0854\u0855",
    "\u0007\u02ab\u0002\u0002\u0855\u0856\u0007\u0197\u0002\u0002\u0856\u0857",
    "\u0007T\u0002\u0002\u0857y\u0003\u0002\u0002\u0002\u0858\u0859\u0007",
    "\t\u0002\u0002\u0859\u085a\u0007\u0195\u0002\u0002\u085a\u085b\u0007",
    "D\u0002\u0002\u085b\u085c\u0005\u020c\u0107\u0002\u085c\u085d\u0007",
    "\u0007\u0002\u0002\u085d\u085e\u0007\u0238\u0002\u0002\u085e\u0864\u0007",
    "\u040d\u0002\u0002\u085f\u0861\u0007\u0180\u0002\u0002\u0860\u0862\u0007",
    "\u03f5\u0002\u0002\u0861\u0860\u0003\u0002\u0002\u0002\u0861\u0862\u0003",
    "\u0002\u0002\u0002\u0862\u0863\u0003\u0002\u0002\u0002\u0863\u0865\u0005",
    "\u0214\u010b\u0002\u0864\u085f\u0003\u0002\u0002\u0002\u0864\u0865\u0003",
    "\u0002\u0002\u0002\u0865\u0867\u0003\u0002\u0002\u0002\u0866\u0868\u0007",
    "\u0247\u0002\u0002\u0867\u0866\u0003\u0002\u0002\u0002\u0867\u0868\u0003",
    "\u0002\u0002\u0002\u0868\u0869\u0003\u0002\u0002\u0002\u0869\u086b\u0007",
    "\u0158\u0002\u0002\u086a\u086c\u0007\u03f5\u0002\u0002\u086b\u086a\u0003",
    "\u0002\u0002\u0002\u086b\u086c\u0003\u0002\u0002\u0002\u086c\u086d\u0003",
    "\u0002\u0002\u0002\u086d\u086e\u0005\u0202\u0102\u0002\u086e{\u0003",
    "\u0002\u0002\u0002\u086f\u0870\u0007\t\u0002\u0002\u0870\u0871\u0007",
    "w\u0002\u0002\u0871\u0875\u0005\u01f2\u00fa\u0002\u0872\u0874\u0005",
    "H%\u0002\u0873\u0872\u0003\u0002\u0002\u0002\u0874\u0877\u0003\u0002",
    "\u0002\u0002\u0875\u0873\u0003\u0002\u0002\u0002\u0875\u0876\u0003\u0002",
    "\u0002\u0002\u0876}\u0003\u0002\u0002\u0002\u0877\u0875\u0003\u0002",
    "\u0002\u0002\u0878\u0879\u0007\t\u0002\u0002\u0879\u087a\u0007\u0207",
    "\u0002\u0002\u087a\u087b\u0005\u020c\u0107\u0002\u087b\u087c\u0007\u01ce",
    "\u0002\u0002\u087c\u087d\u0007\u03fe\u0002\u0002\u087d\u0882\u0005J",
    "&\u0002\u087e\u087f\u0007\u0400\u0002\u0002\u087f\u0881\u0005J&\u0002",
    "\u0880\u087e\u0003\u0002\u0002\u0002\u0881\u0884\u0003\u0002\u0002\u0002",
    "\u0882\u0880\u0003\u0002\u0002\u0002\u0882\u0883\u0003\u0002\u0002\u0002",
    "\u0883\u0885\u0003\u0002\u0002\u0002\u0884\u0882\u0003\u0002\u0002\u0002",
    "\u0885\u0886\u0007\u03ff\u0002\u0002\u0886\u007f\u0003\u0002\u0002\u0002",
    "\u0887\u0889\u0007\t\u0002\u0002\u0888\u088a\t\u0003\u0002\u0002\u0889",
    "\u0888\u0003\u0002\u0002\u0002\u0889\u088a\u0003\u0002\u0002\u0002\u088a",
    "\u088c\u0003\u0002\u0002\u0002\u088b\u088d\u0007H\u0002\u0002\u088c",
    "\u088b\u0003\u0002\u0002\u0002\u088c\u088d\u0003\u0002\u0002\u0002\u088d",
    "\u088e\u0003\u0002\u0002\u0002\u088e\u088f\u0007\u009c\u0002\u0002\u088f",
    "\u0898\u0005\u01f4\u00fb\u0002\u0890\u0895\u0005\u0086D\u0002\u0891",
    "\u0892\u0007\u0400\u0002\u0002\u0892\u0894\u0005\u0086D\u0002\u0893",
    "\u0891\u0003\u0002\u0002\u0002\u0894\u0897\u0003\u0002\u0002\u0002\u0895",
    "\u0893\u0003\u0002\u0002\u0002\u0895\u0896\u0003\u0002\u0002\u0002\u0896",
    "\u0899\u0003\u0002\u0002\u0002\u0897\u0895\u0003\u0002\u0002\u0002\u0898",
    "\u0890\u0003\u0002\u0002\u0002\u0898\u0899\u0003\u0002\u0002\u0002\u0899",
    "\u089b\u0003\u0002\u0002\u0002\u089a\u089c\u0005b2\u0002\u089b\u089a",
    "\u0003\u0002\u0002\u0002\u089b\u089c\u0003\u0002\u0002\u0002\u089c\u0081",
    "\u0003\u0002\u0002\u0002\u089d\u089e\u0007\t\u0002\u0002\u089e\u089f",
    "\u0007\u022e\u0002\u0002\u089f\u08a0\u0005\u020c\u0107\u0002\u08a0\u08a1",
    "\t\u001e\u0002\u0002\u08a1\u08a2\u0007\u0146\u0002\u0002\u08a2\u08a6",
    "\u0007\u040d\u0002\u0002\u08a3\u08a4\u0007\u0180\u0002\u0002\u08a4\u08a5",
    "\u0007\u03f5\u0002\u0002\u08a5\u08a7\u0005\u0214\u010b\u0002\u08a6\u08a3",
    "\u0003\u0002\u0002\u0002\u08a6\u08a7\u0003\u0002\u0002\u0002\u08a7\u08a9",
    "\u0003\u0002\u0002\u0002\u08a8\u08aa\u0007\u0247\u0002\u0002\u08a9\u08a8",
    "\u0003\u0002\u0002\u0002\u08a9\u08aa\u0003\u0002\u0002\u0002\u08aa\u08ab",
    "\u0003\u0002\u0002\u0002\u08ab\u08ad\u0007\u0158\u0002\u0002\u08ac\u08ae",
    "\u0007\u03f5\u0002\u0002\u08ad\u08ac\u0003\u0002\u0002\u0002\u08ad\u08ae",
    "\u0003\u0002\u0002\u0002\u08ae\u08af\u0003\u0002\u0002\u0002\u08af\u08b0",
    "\u0005\u0202\u0102\u0002\u08b0\u0083\u0003\u0002\u0002\u0002\u08b1\u08b5",
    "\u0007\t\u0002\u0002\u08b2\u08b3\u0007\u0114\u0002\u0002\u08b3\u08b4",
    "\u0007\u03f5\u0002\u0002\u08b4\u08b6\t\f\u0002\u0002\u08b5\u08b2\u0003",
    "\u0002\u0002\u0002\u08b5\u08b6\u0003\u0002\u0002\u0002\u08b6\u08b8\u0003",
    "\u0002\u0002\u0002\u08b7\u08b9\u00054\u001b\u0002\u08b8\u08b7\u0003",
    "\u0002\u0002\u0002\u08b8\u08b9\u0003\u0002\u0002\u0002\u08b9\u08bd\u0003",
    "\u0002\u0002\u0002\u08ba\u08bb\u0007\u0091\u0002\u0002\u08bb\u08bc\u0007",
    "\u0206\u0002\u0002\u08bc\u08be\t\r\u0002\u0002\u08bd\u08ba\u0003\u0002",
    "\u0002\u0002\u08bd\u08be\u0003\u0002\u0002\u0002\u08be\u08bf\u0003\u0002",
    "\u0002\u0002\u08bf\u08c0\u0007\u0244\u0002\u0002\u08c0\u08c5\u0005\u01f2",
    "\u00fa\u0002\u08c1\u08c2\u0007\u03fe\u0002\u0002\u08c2\u08c3\u0005\u022c",
    "\u0117\u0002\u08c3\u08c4\u0007\u03ff\u0002\u0002\u08c4\u08c6\u0003\u0002",
    "\u0002\u0002\u08c5\u08c1\u0003\u0002\u0002\u0002\u08c5\u08c6\u0003\u0002",
    "\u0002\u0002\u08c6\u08c7\u0003\u0002\u0002\u0002\u08c7\u08c8\u0007\r",
    "\u0002\u0002\u08c8\u08cf\u0005\u00b4[\u0002\u08c9\u08cb\u0007\u00b0",
    "\u0002\u0002\u08ca\u08cc\t\u000e\u0002\u0002\u08cb\u08ca\u0003\u0002",
    "\u0002\u0002\u08cb\u08cc\u0003\u0002\u0002\u0002\u08cc\u08cd\u0003\u0002",
    "\u0002\u0002\u08cd\u08ce\u0007\u0019\u0002\u0002\u08ce\u08d0\u0007n",
    "\u0002\u0002\u08cf\u08c9\u0003\u0002\u0002\u0002\u08cf\u08d0\u0003\u0002",
    "\u0002\u0002\u08d0\u0085\u0003\u0002\u0002\u0002\u08d1\u08d8\u0005^",
    "0\u0002\u08d2\u08d4\u0007\u0400\u0002\u0002\u08d3\u08d2\u0003\u0002",
    "\u0002\u0002\u08d3\u08d4\u0003\u0002\u0002\u0002\u08d4\u08d5\u0003\u0002",
    "\u0002\u0002\u08d5\u08d7\u0005^0\u0002\u08d6\u08d3\u0003\u0002\u0002",
    "\u0002\u08d7\u08da\u0003\u0002\u0002\u0002\u08d8\u08d6\u0003\u0002\u0002",
    "\u0002\u08d8\u08d9\u0003\u0002\u0002\u0002\u08d9\u0a3d\u0003\u0002\u0002",
    "\u0002\u08da\u08d8\u0003\u0002\u0002\u0002\u08db\u08dd\u0007\u0007\u0002",
    "\u0002\u08dc\u08de\u0007\u001b\u0002\u0002\u08dd\u08dc\u0003\u0002\u0002",
    "\u0002\u08dd\u08de\u0003\u0002\u0002\u0002\u08de\u08df\u0003\u0002\u0002",
    "\u0002\u08df\u08e0\u0005\u020c\u0107\u0002\u08e0\u08e4\u0005P)\u0002",
    "\u08e1\u08e5\u0007\u016c\u0002\u0002\u08e2\u08e3\u0007\u0112\u0002\u0002",
    "\u08e3\u08e5\u0005\u020c\u0107\u0002\u08e4\u08e1\u0003\u0002\u0002\u0002",
    "\u08e4\u08e2\u0003\u0002\u0002\u0002\u08e4\u08e5\u0003\u0002\u0002\u0002",
    "\u08e5\u0a3d\u0003\u0002\u0002\u0002\u08e6\u08e8\u0007\u0007\u0002\u0002",
    "\u08e7\u08e9\u0007\u001b\u0002\u0002\u08e8\u08e7\u0003\u0002\u0002\u0002",
    "\u08e8\u08e9\u0003\u0002\u0002\u0002\u08e9\u08ea\u0003\u0002\u0002\u0002",
    "\u08ea\u08eb\u0007\u03fe\u0002\u0002\u08eb\u08ec\u0005\u020c\u0107\u0002",
    "\u08ec\u08f3\u0005P)\u0002\u08ed\u08ee\u0007\u0400\u0002\u0002\u08ee",
    "\u08ef\u0005\u020c\u0107\u0002\u08ef\u08f0\u0005P)\u0002\u08f0\u08f2",
    "\u0003\u0002\u0002\u0002\u08f1\u08ed\u0003\u0002\u0002\u0002\u08f2\u08f5",
    "\u0003\u0002\u0002\u0002\u08f3\u08f1\u0003\u0002\u0002\u0002\u08f3\u08f4",
    "\u0003\u0002\u0002\u0002\u08f4\u08f6\u0003\u0002\u0002\u0002\u08f5\u08f3",
    "\u0003\u0002\u0002\u0002\u08f6\u08f7\u0007\u03ff\u0002\u0002\u08f7\u0a3d",
    "\u0003\u0002\u0002\u0002\u08f8\u08f9\u0007\u0007\u0002\u0002\u08f9\u08fb",
    "\t\u0014\u0002\u0002\u08fa\u08fc\u0005\u020c\u0107\u0002\u08fb\u08fa",
    "\u0003\u0002\u0002\u0002\u08fb\u08fc\u0003\u0002\u0002\u0002\u08fc\u08fe",
    "\u0003\u0002\u0002\u0002\u08fd\u08ff\u0005@!\u0002\u08fe\u08fd\u0003",
    "\u0002\u0002\u0002\u08fe\u08ff\u0003\u0002\u0002\u0002\u08ff\u0900\u0003",
    "\u0002\u0002\u0002\u0900\u0904\u0005\u0230\u0119\u0002\u0901\u0903\u0005",
    "B\"\u0002\u0902\u0901\u0003\u0002\u0002\u0002\u0903\u0906\u0003\u0002",
    "\u0002\u0002\u0904\u0902\u0003\u0002\u0002\u0002\u0904\u0905\u0003\u0002",
    "\u0002\u0002\u0905\u0a3d\u0003\u0002\u0002\u0002\u0906\u0904\u0003\u0002",
    "\u0002\u0002\u0907\u090c\u0007\u0007\u0002\u0002\u0908\u090a\u0007\u001d",
    "\u0002\u0002\u0909\u090b\u0005\u020c\u0107\u0002\u090a\u0909\u0003\u0002",
    "\u0002\u0002\u090a\u090b\u0003\u0002\u0002\u0002\u090b\u090d\u0003\u0002",
    "\u0002\u0002\u090c\u0908\u0003\u0002\u0002\u0002\u090c\u090d\u0003\u0002",
    "\u0002\u0002\u090d\u090e\u0003\u0002\u0002\u0002\u090e\u090f\u0007v",
    "\u0002\u0002\u090f\u0911\u0007T\u0002\u0002\u0910\u0912\u0005\u020c",
    "\u0107\u0002\u0911\u0910\u0003\u0002\u0002\u0002\u0911\u0912\u0003\u0002",
    "\u0002\u0002\u0912\u0914\u0003\u0002\u0002\u0002\u0913\u0915\u0005@",
    "!\u0002\u0914\u0913\u0003\u0002\u0002\u0002\u0914\u0915\u0003\u0002",
    "\u0002\u0002\u0915\u0916\u0003\u0002\u0002\u0002\u0916\u091a\u0005\u0230",
    "\u0119\u0002\u0917\u0919\u0005B\"\u0002\u0918\u0917\u0003\u0002\u0002",
    "\u0002\u0919\u091c\u0003\u0002\u0002\u0002\u091a\u0918\u0003\u0002\u0002",
    "\u0002\u091a\u091b\u0003\u0002\u0002\u0002\u091b\u0a3d\u0003\u0002\u0002",
    "\u0002\u091c\u091a\u0003\u0002\u0002\u0002\u091d\u0922\u0007\u0007\u0002",
    "\u0002\u091e\u0920\u0007\u001d\u0002\u0002\u091f\u0921\u0005\u020c\u0107",
    "\u0002\u0920\u091f\u0003\u0002\u0002\u0002\u0920\u0921\u0003\u0002\u0002",
    "\u0002\u0921\u0923\u0003\u0002\u0002\u0002\u0922\u091e\u0003\u0002\u0002",
    "\u0002\u0922\u0923\u0003\u0002\u0002\u0002\u0923\u0924\u0003\u0002\u0002",
    "\u0002\u0924\u0926\u0007\u00a5\u0002\u0002\u0925\u0927\t\u0014\u0002",
    "\u0002\u0926\u0925\u0003\u0002\u0002\u0002\u0926\u0927\u0003\u0002\u0002",
    "\u0002\u0927\u0929\u0003\u0002\u0002\u0002\u0928\u092a\u0005\u020c\u0107",
    "\u0002\u0929\u0928\u0003\u0002\u0002\u0002\u0929\u092a\u0003\u0002\u0002",
    "\u0002\u092a\u092c\u0003\u0002\u0002\u0002\u092b\u092d\u0005@!\u0002",
    "\u092c\u092b\u0003\u0002\u0002\u0002\u092c\u092d\u0003\u0002\u0002\u0002",
    "\u092d\u092e\u0003\u0002\u0002\u0002\u092e\u0932\u0005\u0230\u0119\u0002",
    "\u092f\u0931\u0005B\"\u0002\u0930\u092f\u0003\u0002\u0002\u0002\u0931",
    "\u0934\u0003\u0002\u0002\u0002\u0932\u0930\u0003\u0002\u0002\u0002\u0932",
    "\u0933\u0003\u0002\u0002\u0002\u0933\u0a3d\u0003\u0002\u0002\u0002\u0934",
    "\u0932\u0003\u0002\u0002\u0002\u0935\u0936\u0007\u0007\u0002\u0002\u0936",
    "\u0938\t\u0016\u0002\u0002\u0937\u0939\t\u0014\u0002\u0002\u0938\u0937",
    "\u0003\u0002\u0002\u0002\u0938\u0939\u0003\u0002\u0002\u0002\u0939\u093b",
    "\u0003\u0002\u0002\u0002\u093a\u093c\u0005\u020c\u0107\u0002\u093b\u093a",
    "\u0003\u0002\u0002\u0002\u093b\u093c\u0003\u0002\u0002\u0002\u093c\u093d",
    "\u0003\u0002\u0002\u0002\u093d\u0941\u0005\u0230\u0119\u0002\u093e\u0940",
    "\u0005B\"\u0002\u093f\u093e\u0003\u0002\u0002\u0002\u0940\u0943\u0003",
    "\u0002\u0002\u0002\u0941\u093f\u0003\u0002\u0002\u0002\u0941\u0942\u0003",
    "\u0002\u0002\u0002\u0942\u0a3d\u0003\u0002\u0002\u0002\u0943\u0941\u0003",
    "\u0002\u0002\u0002\u0944\u0949\u0007\u0007\u0002\u0002\u0945\u0947\u0007",
    "\u001d\u0002\u0002\u0946\u0948\u0005\u020c\u0107\u0002\u0947\u0946\u0003",
    "\u0002\u0002\u0002\u0947\u0948\u0003\u0002\u0002\u0002\u0948\u094a\u0003",
    "\u0002\u0002\u0002\u0949\u0945\u0003\u0002\u0002\u0002\u0949\u094a\u0003",
    "\u0002\u0002\u0002\u094a\u094b\u0003\u0002\u0002\u0002\u094b\u094c\u0007",
    ">\u0002\u0002\u094c\u094e\u0007T\u0002\u0002\u094d\u094f\u0005\u020c",
    "\u0107\u0002\u094e\u094d\u0003\u0002\u0002\u0002\u094e\u094f\u0003\u0002",
    "\u0002\u0002\u094f\u0950\u0003\u0002\u0002\u0002\u0950\u0951\u0005\u0230",
    "\u0119\u0002\u0951\u0952\u0005V,\u0002\u0952\u0a3d\u0003\u0002\u0002",
    "\u0002\u0953\u0958\u0007\u0007\u0002\u0002\u0954\u0956\u0007\u001d\u0002",
    "\u0002\u0955\u0957\u0005\u020c\u0107\u0002\u0956\u0955\u0003\u0002\u0002",
    "\u0002\u0956\u0957\u0003\u0002\u0002\u0002\u0957\u0959\u0003\u0002\u0002",
    "\u0002\u0958\u0954\u0003\u0002\u0002\u0002\u0958\u0959\u0003\u0002\u0002",
    "\u0002\u0959\u095a\u0003\u0002\u0002\u0002\u095a\u095b\u0007\u0019\u0002",
    "\u0002\u095b\u095c\u0007\u03fe\u0002\u0002\u095c\u095d\u0005\u025a\u012e",
    "\u0002\u095d\u095e\u0007\u03ff\u0002\u0002\u095e\u0a3d\u0003\u0002\u0002",
    "\u0002\u095f\u0961\u0007\u0114\u0002\u0002\u0960\u0962\u0007\u03f5\u0002",
    "\u0002\u0961\u0960\u0003\u0002\u0002\u0002\u0961\u0962\u0003\u0002\u0002",
    "\u0002\u0962\u0963\u0003\u0002\u0002\u0002\u0963\u0a3d\t\u0005\u0002",
    "\u0002\u0964\u0966\u0007\t\u0002\u0002\u0965\u0967\u0007\u001b\u0002",
    "\u0002\u0966\u0965\u0003\u0002\u0002\u0002\u0966\u0967\u0003\u0002\u0002",
    "\u0002\u0967\u0968\u0003\u0002\u0002\u0002\u0968\u096e\u0005\u020c\u0107",
    "\u0002\u0969\u096a\u0007\u008c\u0002\u0002\u096a\u096b\u0007(\u0002",
    "\u0002\u096b\u096f\u0005\u023c\u011f\u0002\u096c\u096d\u00071\u0002",
    "\u0002\u096d\u096f\u0007(\u0002\u0002\u096e\u0969\u0003\u0002\u0002",
    "\u0002\u096e\u096c\u0003\u0002\u0002\u0002\u096f\u0a3d\u0003\u0002\u0002",
    "\u0002\u0970\u0972\u0007\u0017\u0002\u0002\u0971\u0973\u0007\u001b\u0002",
    "\u0002\u0972\u0971\u0003\u0002\u0002\u0002\u0972\u0973\u0003\u0002\u0002",
    "\u0002\u0973\u0974\u0003\u0002\u0002\u0002\u0974\u0975\u0005\u020c\u0107",
    "\u0002\u0975\u0976\u0005\u020c\u0107\u0002\u0976\u097a\u0005P)\u0002",
    "\u0977\u097b\u0007\u016c\u0002\u0002\u0978\u0979\u0007\u0112\u0002\u0002",
    "\u0979\u097b\u0005\u020c\u0107\u0002\u097a\u0977\u0003\u0002\u0002\u0002",
    "\u097a\u0978\u0003\u0002\u0002\u0002\u097a\u097b\u0003\u0002\u0002\u0002",
    "\u097b\u0a3d\u0003\u0002\u0002\u0002\u097c\u097d\u0007\u007f\u0002\u0002",
    "\u097d\u097e\u0007\u001b\u0002\u0002\u097e\u097f\u0005\u020c\u0107\u0002",
    "\u097f\u0980\u0007\u009f\u0002\u0002\u0980\u0981\u0005\u020c\u0107\u0002",
    "\u0981\u0a3d\u0003\u0002\u0002\u0002\u0982\u0984\u0007_\u0002\u0002",
    "\u0983\u0985\u0007\u03f5\u0002\u0002\u0984\u0983\u0003\u0002\u0002\u0002",
    "\u0984\u0985\u0003\u0002\u0002\u0002\u0985\u0986\u0003\u0002\u0002\u0002",
    "\u0986\u0a3d\t\u0006\u0002\u0002\u0987\u0989\u0007\u01b9\u0002\u0002",
    "\u0988\u098a\u0007\u001b\u0002\u0002\u0989\u0988\u0003\u0002\u0002\u0002",
    "\u0989\u098a\u0003\u0002\u0002\u0002\u098a\u098b\u0003\u0002\u0002\u0002",
    "\u098b\u098c\u0005\u020c\u0107\u0002\u098c\u0990\u0005P)\u0002\u098d",
    "\u0991\u0007\u016c\u0002\u0002\u098e\u098f\u0007\u0112\u0002\u0002\u098f",
    "\u0991\u0005\u020c\u0107\u0002\u0990\u098d\u0003\u0002\u0002\u0002\u0990",
    "\u098e\u0003\u0002\u0002\u0002\u0990\u0991\u0003\u0002\u0002\u0002\u0991",
    "\u0a3d\u0003\u0002\u0002\u0002\u0992\u0994\u00071\u0002\u0002\u0993",
    "\u0995\u0007\u001b\u0002\u0002\u0994\u0993\u0003\u0002\u0002\u0002\u0994",
    "\u0995\u0003\u0002\u0002\u0002\u0995\u0996\u0003\u0002\u0002\u0002\u0996",
    "\u0998\u0005\u020c\u0107\u0002\u0997\u0999\u0007\u0084\u0002\u0002\u0998",
    "\u0997\u0003\u0002\u0002\u0002\u0998\u0999\u0003\u0002\u0002\u0002\u0999",
    "\u0a3d\u0003\u0002\u0002\u0002\u099a\u099b\u00071\u0002\u0002\u099b",
    "\u099c\u0007v\u0002\u0002\u099c\u0a3d\u0007T\u0002\u0002\u099d\u099e",
    "\u0007\u007f\u0002\u0002\u099e\u099f\t\u0014\u0002\u0002\u099f\u09a0",
    "\u0005\u020c\u0107\u0002\u09a0\u09a1\u0007\u009f\u0002\u0002\u09a1\u09a2",
    "\u0005\u020c\u0107\u0002\u09a2\u0a3d\u0003\u0002\u0002\u0002\u09a3\u09a4",
    "\u0007\t\u0002\u0002\u09a4\u09a5\u0007J\u0002\u0002\u09a5\u09a6\u0005",
    "\u020c\u0107\u0002\u09a6\u09a7\t\u001f\u0002\u0002\u09a7\u0a3d\u0003",
    "\u0002\u0002\u0002\u09a8\u09a9\u00071\u0002\u0002\u09a9\u09aa\t\u0014",
    "\u0002\u0002\u09aa\u0a3d\u0005\u020c\u0107\u0002\u09ab\u09ac\u00071",
    "\u0002\u0002\u09ac\u09ad\u0007>\u0002\u0002\u09ad\u09ae\u0007T\u0002",
    "\u0002\u09ae\u0a3d\u0005\u020c\u0107\u0002\u09af\u09b0\u0007\u014d\u0002",
    "\u0002\u09b0\u0a3d\u0007U\u0002\u0002\u09b1\u09b2\u0007\u0154\u0002",
    "\u0002\u09b2\u0a3d\u0007U\u0002\u0002\u09b3\u09b5\u0007\u007f\u0002",
    "\u0002\u09b4\u09b6\t \u0002\u0002\u09b5\u09b4\u0003\u0002\u0002\u0002",
    "\u09b5\u09b6\u0003\u0002\u0002\u0002\u09b6\u09b9\u0003\u0002\u0002\u0002",
    "\u09b7\u09ba\u0005\u020c\u0107\u0002\u09b8\u09ba\u0005\u01f2\u00fa\u0002",
    "\u09b9\u09b7\u0003\u0002\u0002\u0002\u09b9\u09b8\u0003\u0002\u0002\u0002",
    "\u09ba\u0a3d\u0003\u0002\u0002\u0002\u09bb\u09bc\u0007q\u0002\u0002",
    "\u09bc\u09bd\u0007\u0012\u0002\u0002\u09bd\u0a3d\u0005\u022c\u0117\u0002",
    "\u09be\u09bf\u0007\u001f\u0002\u0002\u09bf\u09c0\u0007\u009f\u0002\u0002",
    "\u09c0\u09c1\u0007\u0018\u0002\u0002\u09c1\u09c2\u0007\u008c\u0002\u0002",
    "\u09c2\u09c5\u0005\u01fe\u0100\u0002\u09c3\u09c4\u0007\u001a\u0002\u0002",
    "\u09c4\u09c6\u0005\u0200\u0101\u0002\u09c5\u09c3\u0003\u0002\u0002\u0002",
    "\u09c5\u09c6\u0003\u0002\u0002\u0002\u09c6\u0a3d\u0003\u0002\u0002\u0002",
    "\u09c7\u09c9\u0007(\u0002\u0002\u09c8\u09c7\u0003\u0002\u0002\u0002",
    "\u09c8\u09c9\u0003\u0002\u0002\u0002\u09c9\u09ca\u0003\u0002\u0002\u0002",
    "\u09ca\u09cb\u0007\u0018\u0002\u0002\u09cb\u09cc\u0007\u008c\u0002\u0002",
    "\u09cc\u09cd\u0007\u03f5\u0002\u0002\u09cd\u09d1\u0005\u01fe\u0100\u0002",
    "\u09ce\u09cf\u0007\u001a\u0002\u0002\u09cf\u09d0\u0007\u03f5\u0002\u0002",
    "\u09d0\u09d2\u0005\u0200\u0101\u0002\u09d1\u09ce\u0003\u0002\u0002\u0002",
    "\u09d1\u09d2\u0003\u0002\u0002\u0002\u09d2\u0a3d\u0003\u0002\u0002\u0002",
    "\u09d3\u09d4\u0007\u014e\u0002\u0002\u09d4\u0a3d\u0007\u022e\u0002\u0002",
    "\u09d5\u09d6\u0007\u017e\u0002\u0002\u09d6\u0a3d\u0007\u022e\u0002\u0002",
    "\u09d7\u0a3d\u0007=\u0002\u0002\u09d8\u09d9\t!\u0002\u0002\u09d9\u0a3d",
    "\u0007\u0241\u0002\u0002\u09da\u09db\u0007\u0007\u0002\u0002\u09db\u09dc",
    "\u0007u\u0002\u0002\u09dc\u09dd\u0007\u03fe\u0002\u0002\u09dd\u09e2",
    "\u0005h5\u0002\u09de\u09df\u0007\u0400\u0002\u0002\u09df\u09e1\u0005",
    "h5\u0002\u09e0\u09de\u0003\u0002\u0002\u0002\u09e1\u09e4\u0003\u0002",
    "\u0002\u0002\u09e2\u09e0\u0003\u0002\u0002\u0002\u09e2\u09e3\u0003\u0002",
    "\u0002\u0002\u09e3\u09e5\u0003\u0002\u0002\u0002\u09e4\u09e2\u0003\u0002",
    "\u0002\u0002\u09e5\u09e6\u0007\u03ff\u0002\u0002\u09e6\u0a3d\u0003\u0002",
    "\u0002\u0002\u09e7\u09e8\u00071\u0002\u0002\u09e8\u09e9\u0007u\u0002",
    "\u0002\u09e9\u0a3d\u0005\u022c\u0117\u0002\u09ea\u09eb\u0007\u014e\u0002",
    "\u0002\u09eb\u09ee\u0007u\u0002\u0002\u09ec\u09ef\u0005\u022c\u0117",
    "\u0002\u09ed\u09ef\u0007\b\u0002\u0002\u09ee\u09ec\u0003\u0002\u0002",
    "\u0002\u09ee\u09ed\u0003\u0002\u0002\u0002\u09ef\u09f0\u0003\u0002\u0002",
    "\u0002\u09f0\u0a3d\u0007\u022e\u0002\u0002\u09f1\u09f2\u0007\u017e\u0002",
    "\u0002\u09f2\u09f5\u0007u\u0002\u0002\u09f3\u09f6\u0005\u022c\u0117",
    "\u0002\u09f4\u09f6\u0007\b\u0002\u0002\u09f5\u09f3\u0003\u0002\u0002",
    "\u0002\u09f5\u09f4\u0003\u0002\u0002\u0002\u09f6\u09f7\u0003\u0002\u0002",
    "\u0002\u09f7\u0a3d\u0007\u022e\u0002\u0002\u09f8\u09f9\u0007\u0236\u0002",
    "\u0002\u09f9\u09fc\u0007u\u0002\u0002\u09fa\u09fd\u0005\u022c\u0117",
    "\u0002\u09fb\u09fd\u0007\b\u0002\u0002\u09fc\u09fa\u0003\u0002\u0002",
    "\u0002\u09fc\u09fb\u0003\u0002\u0002\u0002\u09fd\u0a3d\u0003\u0002\u0002",
    "\u0002\u09fe\u09ff\u0007\u012e\u0002\u0002\u09ff\u0a00\u0007u\u0002",
    "\u0002\u0a00\u0a3d\u0005\u0212\u010a\u0002\u0a01\u0a02\u0007\u01ef\u0002",
    "\u0002\u0a02\u0a03\u0007u\u0002\u0002\u0a03\u0a04\u0005\u022c\u0117",
    "\u0002\u0a04\u0a05\u0007P\u0002\u0002\u0a05\u0a06\u0007\u03fe\u0002",
    "\u0002\u0a06\u0a0b\u0005h5\u0002\u0a07\u0a08\u0007\u0400\u0002\u0002",
    "\u0a08\u0a0a\u0005h5\u0002\u0a09\u0a07\u0003\u0002\u0002\u0002\u0a0a",
    "\u0a0d\u0003\u0002\u0002\u0002\u0a0b\u0a09\u0003\u0002\u0002\u0002\u0a0b",
    "\u0a0c\u0003\u0002\u0002\u0002\u0a0c\u0a0e\u0003\u0002\u0002\u0002\u0a0d",
    "\u0a0b\u0003\u0002\u0002\u0002\u0a0e\u0a0f\u0007\u03ff\u0002\u0002\u0a0f",
    "\u0a3d\u0003\u0002\u0002\u0002\u0a10\u0a11\u0007\u0161\u0002\u0002\u0a11",
    "\u0a12\u0007u\u0002\u0002\u0a12\u0a13\u0005\u020c\u0107\u0002\u0a13",
    "\u0a14\u0007\u00b0\u0002\u0002\u0a14\u0a15\u0007\u009c\u0002\u0002\u0a15",
    "\u0a18\u0005\u01f4\u00fb\u0002\u0a16\u0a17\t!\u0002\u0002\u0a17\u0a19",
    "\u0007\u0241\u0002\u0002\u0a18\u0a16\u0003\u0002\u0002\u0002\u0a18\u0a19",
    "\u0003\u0002\u0002\u0002\u0a19\u0a3d\u0003\u0002\u0002\u0002\u0a1a\u0a1b",
    "\u0007\u000b\u0002\u0002\u0a1b\u0a1e\u0007u\u0002\u0002\u0a1c\u0a1f",
    "\u0005\u022c\u0117\u0002\u0a1d\u0a1f\u0007\b\u0002\u0002\u0a1e\u0a1c",
    "\u0003\u0002\u0002\u0002\u0a1e\u0a1d\u0003\u0002\u0002\u0002\u0a1f\u0a3d",
    "\u0003\u0002\u0002\u0002\u0a20\u0a21\u0007\u0019\u0002\u0002\u0a21\u0a24",
    "\u0007u\u0002\u0002\u0a22\u0a25\u0005\u022c\u0117\u0002\u0a23\u0a25",
    "\u0007\b\u0002\u0002\u0a24\u0a22\u0003\u0002\u0002\u0002\u0a24\u0a23",
    "\u0003\u0002\u0002\u0002\u0a25\u0a3d\u0003\u0002\u0002\u0002\u0a26\u0a27",
    "\u0007m\u0002\u0002\u0a27\u0a2a\u0007u\u0002\u0002\u0a28\u0a2b\u0005",
    "\u022c\u0117\u0002\u0a29\u0a2b\u0007\b\u0002\u0002\u0a2a\u0a28\u0003",
    "\u0002\u0002\u0002\u0a2a\u0a29\u0003\u0002\u0002\u0002\u0a2b\u0a3d\u0003",
    "\u0002\u0002\u0002\u0a2c\u0a2d\u0007\u01e6\u0002\u0002\u0a2d\u0a30\u0007",
    "u\u0002\u0002\u0a2e\u0a31\u0005\u022c\u0117\u0002\u0a2f\u0a31\u0007",
    "\b\u0002\u0002\u0a30\u0a2e\u0003\u0002\u0002\u0002\u0a30\u0a2f\u0003",
    "\u0002\u0002\u0002\u0a31\u0a3d\u0003\u0002\u0002\u0002\u0a32\u0a33\u0007",
    "\u01f0\u0002\u0002\u0a33\u0a36\u0007u\u0002\u0002\u0a34\u0a37\u0005",
    "\u022c\u0117\u0002\u0a35\u0a37\u0007\b\u0002\u0002\u0a36\u0a34\u0003",
    "\u0002\u0002\u0002\u0a36\u0a35\u0003\u0002\u0002\u0002\u0a37\u0a3d\u0003",
    "\u0002\u0002\u0002\u0a38\u0a39\u0007\u01ee\u0002\u0002\u0a39\u0a3d\u0007",
    "\u01d4\u0002\u0002\u0a3a\u0a3b\u0007\u023d\u0002\u0002\u0a3b\u0a3d\u0007",
    "\u01d4\u0002\u0002\u0a3c\u08d1\u0003\u0002\u0002\u0002\u0a3c\u08db\u0003",
    "\u0002\u0002\u0002\u0a3c\u08e6\u0003\u0002\u0002\u0002\u0a3c\u08f8\u0003",
    "\u0002\u0002\u0002\u0a3c\u0907\u0003\u0002\u0002\u0002\u0a3c\u091d\u0003",
    "\u0002\u0002\u0002\u0a3c\u0935\u0003\u0002\u0002\u0002\u0a3c\u0944\u0003",
    "\u0002\u0002\u0002\u0a3c\u0953\u0003\u0002\u0002\u0002\u0a3c\u095f\u0003",
    "\u0002\u0002\u0002\u0a3c\u0964\u0003\u0002\u0002\u0002\u0a3c\u0970\u0003",
    "\u0002\u0002\u0002\u0a3c\u097c\u0003\u0002\u0002\u0002\u0a3c\u0982\u0003",
    "\u0002\u0002\u0002\u0a3c\u0987\u0003\u0002\u0002\u0002\u0a3c\u0992\u0003",
    "\u0002\u0002\u0002\u0a3c\u099a\u0003\u0002\u0002\u0002\u0a3c\u099d\u0003",
    "\u0002\u0002\u0002\u0a3c\u09a3\u0003\u0002\u0002\u0002\u0a3c\u09a8\u0003",
    "\u0002\u0002\u0002\u0a3c\u09ab\u0003\u0002\u0002\u0002\u0a3c\u09af\u0003",
    "\u0002\u0002\u0002\u0a3c\u09b1\u0003\u0002\u0002\u0002\u0a3c\u09b3\u0003",
    "\u0002\u0002\u0002\u0a3c\u09bb\u0003\u0002\u0002\u0002\u0a3c\u09be\u0003",
    "\u0002\u0002\u0002\u0a3c\u09c8\u0003\u0002\u0002\u0002\u0a3c\u09d3\u0003",
    "\u0002\u0002\u0002\u0a3c\u09d5\u0003\u0002\u0002\u0002\u0a3c\u09d7\u0003",
    "\u0002\u0002\u0002\u0a3c\u09d8\u0003\u0002\u0002\u0002\u0a3c\u09da\u0003",
    "\u0002\u0002\u0002\u0a3c\u09e7\u0003\u0002\u0002\u0002\u0a3c\u09ea\u0003",
    "\u0002\u0002\u0002\u0a3c\u09f1\u0003\u0002\u0002\u0002\u0a3c\u09f8\u0003",
    "\u0002\u0002\u0002\u0a3c\u09fe\u0003\u0002\u0002\u0002\u0a3c\u0a01\u0003",
    "\u0002\u0002\u0002\u0a3c\u0a10\u0003\u0002\u0002\u0002\u0a3c\u0a1a\u0003",
    "\u0002\u0002\u0002\u0a3c\u0a20\u0003\u0002\u0002\u0002\u0a3c\u0a26\u0003",
    "\u0002\u0002\u0002\u0a3c\u0a2c\u0003\u0002\u0002\u0002\u0a3c\u0a32\u0003",
    "\u0002\u0002\u0002\u0a3c\u0a38\u0003\u0002\u0002\u0002\u0a3c\u0a3a\u0003",
    "\u0002\u0002\u0002\u0a3d\u0087\u0003\u0002\u0002\u0002\u0a3e\u0a3f\u0007",
    "1\u0002\u0002\u0a3f\u0a41\t\u0002\u0002\u0002\u0a40\u0a42\u0005\u0242",
    "\u0122\u0002\u0a41\u0a40\u0003\u0002\u0002\u0002\u0a41\u0a42\u0003\u0002",
    "\u0002\u0002\u0a42\u0a43\u0003\u0002\u0002\u0002\u0a43\u0a44\u0005\u020c",
    "\u0107\u0002\u0a44\u0089\u0003\u0002\u0002\u0002\u0a45\u0a46\u00071",
    "\u0002\u0002\u0a46\u0a48\u0007\u015e\u0002\u0002\u0a47\u0a49\u0005\u0242",
    "\u0122\u0002\u0a48\u0a47\u0003\u0002\u0002\u0002\u0a48\u0a49\u0003\u0002",
    "\u0002\u0002\u0a49\u0a4a\u0003\u0002\u0002\u0002\u0a4a\u0a4b\u0005\u01f2",
    "\u00fa\u0002\u0a4b\u008b\u0003\u0002\u0002\u0002\u0a4c\u0a4d\u00071",
    "\u0002\u0002\u0a4d\u0a4f\u0007J\u0002\u0002\u0a4e\u0a50\t\u0003\u0002",
    "\u0002\u0a4f\u0a4e\u0003\u0002\u0002\u0002\u0a4f\u0a50\u0003\u0002\u0002",
    "\u0002\u0a50\u0a51\u0003\u0002\u0002\u0002\u0a51\u0a52\u0005\u020c\u0107",
    "\u0002\u0a52\u0a53\u0007l\u0002\u0002\u0a53\u0a60\u0005\u01f4\u00fb",
    "\u0002\u0a54\u0a56\u0007\u0114\u0002\u0002\u0a55\u0a57\u0007\u03f5\u0002",
    "\u0002\u0a56\u0a55\u0003\u0002\u0002\u0002\u0a56\u0a57\u0003\u0002\u0002",
    "\u0002\u0a57\u0a58\u0003\u0002\u0002\u0002\u0a58\u0a5f\t\u0005\u0002",
    "\u0002\u0a59\u0a5b\u0007_\u0002\u0002\u0a5a\u0a5c\u0007\u03f5\u0002",
    "\u0002\u0a5b\u0a5a\u0003\u0002\u0002\u0002\u0a5b\u0a5c\u0003\u0002\u0002",
    "\u0002\u0a5c\u0a5d\u0003\u0002\u0002\u0002\u0a5d\u0a5f\t\u0006\u0002",
    "\u0002\u0a5e\u0a54\u0003\u0002\u0002\u0002\u0a5e\u0a59\u0003\u0002\u0002",
    "\u0002\u0a5f\u0a62\u0003\u0002\u0002\u0002\u0a60\u0a5e\u0003\u0002\u0002",
    "\u0002\u0a60\u0a61\u0003\u0002\u0002\u0002\u0a61\u008d\u0003\u0002\u0002",
    "\u0002\u0a62\u0a60\u0003\u0002\u0002\u0002\u0a63\u0a64\u00071\u0002",
    "\u0002\u0a64\u0a65\u0007\u0195\u0002\u0002\u0a65\u0a66\u0007D\u0002",
    "\u0002\u0a66\u0a67\u0005\u020c\u0107\u0002\u0a67\u0a68\u0007\u0158\u0002",
    "\u0002\u0a68\u0a69\u0007\u03f5\u0002\u0002\u0a69\u0a6a\u0005\u0202\u0102",
    "\u0002\u0a6a\u008f\u0003\u0002\u0002\u0002\u0a6b\u0a6c\u00071\u0002",
    "\u0002\u0a6c\u0a6e\u0007w\u0002\u0002\u0a6d\u0a6f\u0005\u0242\u0122",
    "\u0002\u0a6e\u0a6d\u0003\u0002\u0002\u0002\u0a6e\u0a6f\u0003\u0002\u0002",
    "\u0002\u0a6f\u0a70\u0003\u0002\u0002\u0002\u0a70\u0a71\u0005\u01f2\u00fa",
    "\u0002\u0a71\u0091\u0003\u0002\u0002\u0002\u0a72\u0a73\u00071\u0002",
    "\u0002\u0a73\u0a75\u0007\u0172\u0002\u0002\u0a74\u0a76\u0005\u0242\u0122",
    "\u0002\u0a75\u0a74\u0003\u0002\u0002\u0002\u0a75\u0a76\u0003\u0002\u0002",
    "\u0002\u0a76\u0a77\u0003\u0002\u0002\u0002\u0a77\u0a78\u0005\u01f2\u00fa",
    "\u0002\u0a78\u0093\u0003\u0002\u0002\u0002\u0a79\u0a7a\u00071\u0002",
    "\u0002\u0a7a\u0a7c\u0007\u0207\u0002\u0002\u0a7b\u0a7d\u0005\u0242\u0122",
    "\u0002\u0a7c\u0a7b\u0003\u0002\u0002\u0002\u0a7c\u0a7d\u0003\u0002\u0002",
    "\u0002\u0a7d\u0a7e\u0003\u0002\u0002\u0002\u0a7e\u0a7f\u0005\u020c\u0107",
    "\u0002\u0a7f\u0095\u0003\u0002\u0002\u0002\u0a80\u0a82\u00071\u0002",
    "\u0002\u0a81\u0a83\u0007\u022f\u0002\u0002\u0a82\u0a81\u0003\u0002\u0002",
    "\u0002\u0a82\u0a83\u0003\u0002\u0002\u0002\u0a83\u0a84\u0003\u0002\u0002",
    "\u0002\u0a84\u0a86\u0007\u009c\u0002\u0002\u0a85\u0a87\u0005\u0242\u0122",
    "\u0002\u0a86\u0a85\u0003\u0002\u0002\u0002\u0a86\u0a87\u0003\u0002\u0002",
    "\u0002\u0a87\u0a88\u0003\u0002\u0002\u0002\u0a88\u0a8a\u0005\u022e\u0118",
    "\u0002\u0a89\u0a8b\t\"\u0002\u0002\u0a8a\u0a89\u0003\u0002\u0002\u0002",
    "\u0a8a\u0a8b\u0003\u0002\u0002\u0002\u0a8b\u0097\u0003\u0002\u0002\u0002",
    "\u0a8c\u0a8d\u00071\u0002\u0002\u0a8d\u0a8e\u0007\u022e\u0002\u0002",
    "\u0a8e\u0a94\u0005\u020c\u0107\u0002\u0a8f\u0a91\u0007\u0158\u0002\u0002",
    "\u0a90\u0a92\u0007\u03f5\u0002\u0002\u0a91\u0a90\u0003\u0002\u0002\u0002",
    "\u0a91\u0a92\u0003\u0002\u0002\u0002\u0a92\u0a93\u0003\u0002\u0002\u0002",
    "\u0a93\u0a95\u0005\u0202\u0102\u0002\u0a94\u0a8f\u0003\u0002\u0002\u0002",
    "\u0a94\u0a95\u0003\u0002\u0002\u0002\u0a95\u0099\u0003\u0002\u0002\u0002",
    "\u0a96\u0a97\u00071\u0002\u0002\u0a97\u0a99\u0007\u00a1\u0002\u0002",
    "\u0a98\u0a9a\u0005\u0242\u0122\u0002\u0a99\u0a98\u0003\u0002\u0002\u0002",
    "\u0a99\u0a9a\u0003\u0002\u0002\u0002\u0a9a\u0a9b\u0003\u0002\u0002\u0002",
    "\u0a9b\u0a9c\u0005\u01f2\u00fa\u0002\u0a9c\u009b\u0003\u0002\u0002\u0002",
    "\u0a9d\u0a9e\u00071\u0002\u0002\u0a9e\u0aa0\u0007\u0244\u0002\u0002",
    "\u0a9f\u0aa1\u0005\u0242\u0122\u0002\u0aa0\u0a9f\u0003\u0002\u0002\u0002",
    "\u0aa0\u0aa1\u0003\u0002\u0002\u0002\u0aa1\u0aa2\u0003\u0002\u0002\u0002",
    "\u0aa2\u0aa7\u0005\u01f2\u00fa\u0002\u0aa3\u0aa4\u0007\u0400\u0002\u0002",
    "\u0aa4\u0aa6\u0005\u01f2\u00fa\u0002\u0aa5\u0aa3\u0003\u0002\u0002\u0002",
    "\u0aa6\u0aa9\u0003\u0002\u0002\u0002\u0aa7\u0aa5\u0003\u0002\u0002\u0002",
    "\u0aa7\u0aa8\u0003\u0002\u0002\u0002\u0aa8\u0aab\u0003\u0002\u0002\u0002",
    "\u0aa9\u0aa7\u0003\u0002\u0002\u0002\u0aaa\u0aac\t\"\u0002\u0002\u0aab",
    "\u0aaa\u0003\u0002\u0002\u0002\u0aab\u0aac\u0003\u0002\u0002\u0002\u0aac",
    "\u009d\u0003\u0002\u0002\u0002\u0aad\u0aae\u0007\u007f\u0002\u0002\u0aae",
    "\u0aaf\u0007\u009c\u0002\u0002\u0aaf\u0ab4\u0005\u00a0Q\u0002\u0ab0",
    "\u0ab1\u0007\u0400\u0002\u0002\u0ab1\u0ab3\u0005\u00a0Q\u0002\u0ab2",
    "\u0ab0\u0003\u0002\u0002\u0002\u0ab3\u0ab6\u0003\u0002\u0002\u0002\u0ab4",
    "\u0ab2\u0003\u0002\u0002\u0002\u0ab4\u0ab5\u0003\u0002\u0002\u0002\u0ab5",
    "\u009f\u0003\u0002\u0002\u0002\u0ab6\u0ab4\u0003\u0002\u0002\u0002\u0ab7",
    "\u0ab8\u0005\u01f4\u00fb\u0002\u0ab8\u0ab9\u0007\u009f\u0002\u0002\u0ab9",
    "\u0aba\u0005\u01f4\u00fb\u0002\u0aba\u00a1\u0003\u0002\u0002\u0002\u0abb",
    "\u0abd\u0007\u0236\u0002\u0002\u0abc\u0abe\u0007\u009c\u0002\u0002\u0abd",
    "\u0abc\u0003\u0002\u0002\u0002\u0abd\u0abe\u0003\u0002\u0002\u0002\u0abe",
    "\u0abf\u0003\u0002\u0002\u0002\u0abf\u0ac0\u0005\u01f4\u00fb\u0002\u0ac0",
    "\u00a3\u0003\u0002\u0002\u0002\u0ac1\u0ac2\u0007\u0013\u0002\u0002\u0ac2",
    "\u0ac9\u0005\u01f2\u00fa\u0002\u0ac3\u0ac6\u0007\u03fe\u0002\u0002\u0ac4",
    "\u0ac7\u0005\u0236\u011c\u0002\u0ac5\u0ac7\u0005\u0232\u011a\u0002\u0ac6",
    "\u0ac4\u0003\u0002\u0002\u0002\u0ac6\u0ac5\u0003\u0002\u0002\u0002\u0ac6",
    "\u0ac7\u0003\u0002\u0002\u0002\u0ac7\u0ac8\u0003\u0002\u0002\u0002\u0ac8",
    "\u0aca\u0007\u03ff\u0002\u0002\u0ac9\u0ac3\u0003\u0002\u0002\u0002\u0ac9",
    "\u0aca\u0003\u0002\u0002\u0002\u0aca\u00a5\u0003\u0002\u0002\u0002\u0acb",
    "\u0ace\u0005\u00c0a\u0002\u0acc\u0ace\u0005\u00c2b\u0002\u0acd\u0acb",
    "\u0003\u0002\u0002\u0002\u0acd\u0acc\u0003\u0002\u0002\u0002\u0ace\u00a7",
    "\u0003\u0002\u0002\u0002\u0acf\u0ad0\u0007\u0150\u0002\u0002\u0ad0\u0ad1",
    "\u0005\u0232\u011a\u0002\u0ad1\u00a9\u0003\u0002\u0002\u0002\u0ad2\u0ad7",
    "\u0005\u00c4c\u0002\u0ad3\u0ad7\u0005\u00c6d\u0002\u0ad4\u0ad7\u0005",
    "\u00c8e\u0002\u0ad5\u0ad7\u0005\u00caf\u0002\u0ad6\u0ad2\u0003\u0002",
    "\u0002\u0002\u0ad6\u0ad3\u0003\u0002\u0002\u0002\u0ad6\u0ad4\u0003\u0002",
    "\u0002\u0002\u0ad6\u0ad5\u0003\u0002\u0002\u0002\u0ad7\u00ab\u0003\u0002",
    "\u0002\u0002\u0ad8\u0ada\u0007N\u0002\u0002\u0ad9\u0adb\t#\u0002\u0002",
    "\u0ada\u0ad9\u0003\u0002\u0002\u0002\u0ada\u0adb\u0003\u0002\u0002\u0002",
    "\u0adb\u0add\u0003\u0002\u0002\u0002\u0adc\u0ade\u0007H\u0002\u0002",
    "\u0add\u0adc\u0003\u0002\u0002\u0002\u0add\u0ade\u0003\u0002\u0002\u0002",
    "\u0ade\u0ae0\u0003\u0002\u0002\u0002\u0adf\u0ae1\u0007P\u0002\u0002",
    "\u0ae0\u0adf\u0003\u0002\u0002\u0002\u0ae0\u0ae1\u0003\u0002\u0002\u0002",
    "\u0ae1\u0ae2\u0003\u0002\u0002\u0002\u0ae2\u0ae9\u0005\u01f4\u00fb\u0002",
    "\u0ae3\u0ae4\u0007u\u0002\u0002\u0ae4\u0ae6\u0007\u03fe\u0002\u0002",
    "\u0ae5\u0ae7\u0005\u022c\u0117\u0002\u0ae6\u0ae5\u0003\u0002\u0002\u0002",
    "\u0ae6\u0ae7\u0003\u0002\u0002\u0002\u0ae7\u0ae8\u0003\u0002\u0002\u0002",
    "\u0ae8\u0aea\u0007\u03ff\u0002\u0002\u0ae9\u0ae3\u0003\u0002\u0002\u0002",
    "\u0ae9\u0aea\u0003\u0002\u0002\u0002\u0aea\u0afb\u0003\u0002\u0002\u0002",
    "\u0aeb\u0aec\u0007\u03fe\u0002\u0002\u0aec\u0aed\u0005\u022c\u0117\u0002",
    "\u0aed\u0aee\u0007\u03ff\u0002\u0002\u0aee\u0af0\u0003\u0002\u0002\u0002",
    "\u0aef\u0aeb\u0003\u0002\u0002\u0002\u0aef\u0af0\u0003\u0002\u0002\u0002",
    "\u0af0\u0af1\u0003\u0002\u0002\u0002\u0af1\u0afc\u0005\u00b8]\u0002",
    "\u0af2\u0af3\u0007\u008c\u0002\u0002\u0af3\u0af8\u0005\u00ba^\u0002",
    "\u0af4\u0af5\u0007\u0400\u0002\u0002\u0af5\u0af7\u0005\u00ba^\u0002",
    "\u0af6\u0af4\u0003\u0002\u0002\u0002\u0af7\u0afa\u0003\u0002\u0002\u0002",
    "\u0af8\u0af6\u0003\u0002\u0002\u0002\u0af8\u0af9\u0003\u0002\u0002\u0002",
    "\u0af9\u0afc\u0003\u0002\u0002\u0002\u0afa\u0af8\u0003\u0002\u0002\u0002",
    "\u0afb\u0aef\u0003\u0002\u0002\u0002\u0afb\u0af2\u0003\u0002\u0002\u0002",
    "\u0afc\u0b09\u0003\u0002\u0002\u0002\u0afd\u0afe\u0007l\u0002\u0002",
    "\u0afe\u0aff\u0007\u0152\u0002\u0002\u0aff\u0b00\u0007T\u0002\u0002",
    "\u0b00\u0b01\u0007\u00a8\u0002\u0002\u0b01\u0b06\u0005\u00ba^\u0002",
    "\u0b02\u0b03\u0007\u0400\u0002\u0002\u0b03\u0b05\u0005\u00ba^\u0002",
    "\u0b04\u0b02\u0003\u0002\u0002\u0002\u0b05\u0b08\u0003\u0002\u0002\u0002",
    "\u0b06\u0b04\u0003\u0002\u0002\u0002\u0b06\u0b07\u0003\u0002\u0002\u0002",
    "\u0b07\u0b0a\u0003\u0002\u0002\u0002\u0b08\u0b06\u0003\u0002\u0002\u0002",
    "\u0b09\u0afd\u0003\u0002\u0002\u0002\u0b09\u0b0a\u0003\u0002\u0002\u0002",
    "\u0b0a\u00ad\u0003\u0002\u0002\u0002\u0b0b\u0b0c\u0007^\u0002\u0002",
    "\u0b0c\u0b0e\u0007\u0145\u0002\u0002\u0b0d\u0b0f\t$\u0002\u0002\u0b0e",
    "\u0b0d\u0003\u0002\u0002\u0002\u0b0e\u0b0f\u0003\u0002\u0002\u0002\u0b0f",
    "\u0b11\u0003\u0002\u0002\u0002\u0b10\u0b12\u0007\u0194\u0002\u0002\u0b11",
    "\u0b10\u0003\u0002\u0002\u0002\u0b11\u0b12\u0003\u0002\u0002\u0002\u0b12",
    "\u0b13\u0003\u0002\u0002\u0002\u0b13\u0b14\u0007K\u0002\u0002\u0b14",
    "\u0b16\u0007\u040d\u0002\u0002\u0b15\u0b17\t\b\u0002\u0002\u0b16\u0b15",
    "\u0003\u0002\u0002\u0002\u0b16\u0b17\u0003\u0002\u0002\u0002\u0b17\u0b18",
    "\u0003\u0002\u0002\u0002\u0b18\u0b19\u0007P\u0002\u0002\u0b19\u0b1a",
    "\u0007\u009c\u0002\u0002\u0b1a\u0b20\u0005\u01f4\u00fb\u0002\u0b1b\u0b1c",
    "\u0007u\u0002\u0002\u0b1c\u0b1d\u0007\u03fe\u0002\u0002\u0b1d\u0b1e",
    "\u0005\u022c\u0117\u0002\u0b1e\u0b1f\u0007\u03ff\u0002\u0002\u0b1f\u0b21",
    "\u0003\u0002\u0002\u0002\u0b20\u0b1b\u0003\u0002\u0002\u0002\u0b20\u0b21",
    "\u0003\u0002\u0002\u0002\u0b21\u0b25\u0003\u0002\u0002\u0002\u0b22\u0b23",
    "\u0007\u0018\u0002\u0002\u0b23\u0b24\u0007\u008c\u0002\u0002\u0b24\u0b26",
    "\u0005\u01fe\u0100\u0002\u0b25\u0b22\u0003\u0002\u0002\u0002\u0b25\u0b26",
    "\u0003\u0002\u0002\u0002\u0b26\u0b2d\u0003\u0002\u0002\u0002\u0b27\u0b29",
    "\t%\u0002\u0002\u0b28\u0b2a\u0005\u00f4{\u0002\u0b29\u0b28\u0003\u0002",
    "\u0002\u0002\u0b2a\u0b2b\u0003\u0002\u0002\u0002\u0b2b\u0b29\u0003\u0002",
    "\u0002\u0002\u0b2b\u0b2c\u0003\u0002\u0002\u0002\u0b2c\u0b2e\u0003\u0002",
    "\u0002\u0002\u0b2d\u0b27\u0003\u0002\u0002\u0002\u0b2d\u0b2e\u0003\u0002",
    "\u0002\u0002\u0b2e\u0b35\u0003\u0002\u0002\u0002\u0b2f\u0b31\u0007]",
    "\u0002\u0002\u0b30\u0b32\u0005\u00f6|\u0002\u0b31\u0b30\u0003\u0002",
    "\u0002\u0002\u0b32\u0b33\u0003\u0002\u0002\u0002\u0b33\u0b31\u0003\u0002",
    "\u0002\u0002\u0b33\u0b34\u0003\u0002\u0002\u0002\u0b34\u0b36\u0003\u0002",
    "\u0002\u0002\u0b35\u0b2f\u0003\u0002\u0002\u0002\u0b35\u0b36\u0003\u0002",
    "\u0002\u0002\u0b36\u0b3b\u0003\u0002\u0002\u0002\u0b37\u0b38\u0007H",
    "\u0002\u0002\u0b38\u0b39\u0005\u0212\u010a\u0002\u0b39\u0b3a\t&\u0002",
    "\u0002\u0b3a\u0b3c\u0003\u0002\u0002\u0002\u0b3b\u0b37\u0003\u0002\u0002",
    "\u0002\u0b3b\u0b3c\u0003\u0002\u0002\u0002\u0b3c\u0b48\u0003\u0002\u0002",
    "\u0002\u0b3d\u0b3e\u0007\u03fe\u0002\u0002\u0b3e\u0b43\u0005\u00bc_",
    "\u0002\u0b3f\u0b40\u0007\u0400\u0002\u0002\u0b40\u0b42\u0005\u00bc_",
    "\u0002\u0b41\u0b3f\u0003\u0002\u0002\u0002\u0b42\u0b45\u0003\u0002\u0002",
    "\u0002\u0b43\u0b41\u0003\u0002\u0002\u0002\u0b43\u0b44\u0003\u0002\u0002",
    "\u0002\u0b44\u0b46\u0003\u0002\u0002\u0002\u0b45\u0b43\u0003\u0002\u0002",
    "\u0002\u0b46\u0b47\u0007\u03ff\u0002\u0002\u0b47\u0b49\u0003\u0002\u0002",
    "\u0002\u0b48\u0b3d\u0003\u0002\u0002\u0002\u0b48\u0b49\u0003\u0002\u0002",
    "\u0002\u0b49\u0b53\u0003\u0002\u0002\u0002\u0b4a\u0b4b\u0007\u008c\u0002",
    "\u0002\u0b4b\u0b50\u0005\u00ba^\u0002\u0b4c\u0b4d\u0007\u0400\u0002",
    "\u0002\u0b4d\u0b4f\u0005\u00ba^\u0002\u0b4e\u0b4c\u0003\u0002\u0002",
    "\u0002\u0b4f\u0b52\u0003\u0002\u0002\u0002\u0b50\u0b4e\u0003\u0002\u0002",
    "\u0002\u0b50\u0b51\u0003\u0002\u0002\u0002\u0b51\u0b54\u0003\u0002\u0002",
    "\u0002\u0b52\u0b50\u0003\u0002\u0002\u0002\u0b53\u0b4a\u0003\u0002\u0002",
    "\u0002\u0b53\u0b54\u0003\u0002\u0002\u0002\u0b54\u00af\u0003\u0002\u0002",
    "\u0002\u0b55\u0b56\u0007^\u0002\u0002\u0b56\u0b58\u0007\u024e\u0002",
    "\u0002\u0b57\u0b59\t$\u0002\u0002\u0b58\u0b57\u0003\u0002\u0002\u0002",
    "\u0b58\u0b59\u0003\u0002\u0002\u0002\u0b59\u0b5b\u0003\u0002\u0002\u0002",
    "\u0b5a\u0b5c\u0007\u0194\u0002\u0002\u0b5b\u0b5a\u0003\u0002\u0002\u0002",
    "\u0b5b\u0b5c\u0003\u0002\u0002\u0002\u0b5c\u0b5d\u0003\u0002\u0002\u0002",
    "\u0b5d\u0b5e\u0007K\u0002\u0002\u0b5e\u0b60\u0007\u040d\u0002\u0002",
    "\u0b5f\u0b61\t\b\u0002\u0002\u0b60\u0b5f\u0003\u0002\u0002\u0002\u0b60",
    "\u0b61\u0003\u0002\u0002\u0002\u0b61\u0b62\u0003\u0002\u0002\u0002\u0b62",
    "\u0b63\u0007P\u0002\u0002\u0b63\u0b64\u0007\u009c\u0002\u0002\u0b64",
    "\u0b68\u0005\u01f4\u00fb\u0002\u0b65\u0b66\u0007\u0018\u0002\u0002\u0b66",
    "\u0b67\u0007\u008c\u0002\u0002\u0b67\u0b69\u0005\u01fe\u0100\u0002\u0b68",
    "\u0b65\u0003\u0002\u0002\u0002\u0b68\u0b69\u0003\u0002\u0002\u0002\u0b69",
    "\u0b70\u0003\u0002\u0002\u0002\u0b6a\u0b6b\u0007\u0202\u0002\u0002\u0b6b",
    "\u0b6c\u0007\u017c\u0002\u0002\u0b6c\u0b6d\u0007\u0012\u0002\u0002\u0b6d",
    "\u0b6e\u0007\u03f7\u0002\u0002\u0b6e\u0b6f\u0007\u040d\u0002\u0002\u0b6f",
    "\u0b71\u0007\u03f6\u0002\u0002\u0b70\u0b6a\u0003\u0002\u0002\u0002\u0b70",
    "\u0b71\u0003\u0002\u0002\u0002\u0b71\u0b76\u0003\u0002\u0002\u0002\u0b72",
    "\u0b73\u0007H\u0002\u0002\u0b73\u0b74\u0005\u0212\u010a\u0002\u0b74",
    "\u0b75\t&\u0002\u0002\u0b75\u0b77\u0003\u0002\u0002\u0002\u0b76\u0b72",
    "\u0003\u0002\u0002\u0002\u0b76\u0b77\u0003\u0002\u0002\u0002\u0b77\u0b83",
    "\u0003\u0002\u0002\u0002\u0b78\u0b79\u0007\u03fe\u0002\u0002\u0b79\u0b7e",
    "\u0005\u00bc_\u0002\u0b7a\u0b7b\u0007\u0400\u0002\u0002\u0b7b\u0b7d",
    "\u0005\u00bc_\u0002\u0b7c\u0b7a\u0003\u0002\u0002\u0002\u0b7d\u0b80",
    "\u0003\u0002\u0002\u0002\u0b7e\u0b7c\u0003\u0002\u0002\u0002\u0b7e\u0b7f",
    "\u0003\u0002\u0002\u0002\u0b7f\u0b81\u0003\u0002\u0002\u0002\u0b80\u0b7e",
    "\u0003\u0002\u0002\u0002\u0b81\u0b82\u0007\u03ff\u0002\u0002\u0b82\u0b84",
    "\u0003\u0002\u0002\u0002\u0b83\u0b78\u0003\u0002\u0002\u0002\u0b83\u0b84",
    "\u0003\u0002\u0002\u0002\u0b84\u0b8e\u0003\u0002\u0002\u0002\u0b85\u0b86",
    "\u0007\u008c\u0002\u0002\u0b86\u0b8b\u0005\u00ba^\u0002\u0b87\u0b88",
    "\u0007\u0400\u0002\u0002\u0b88\u0b8a\u0005\u00ba^\u0002\u0b89\u0b87",
    "\u0003\u0002\u0002\u0002\u0b8a\u0b8d\u0003\u0002\u0002\u0002\u0b8b\u0b89",
    "\u0003\u0002\u0002\u0002\u0b8b\u0b8c\u0003\u0002\u0002\u0002\u0b8c\u0b8f",
    "\u0003\u0002\u0002\u0002\u0b8d\u0b8b\u0003\u0002\u0002\u0002\u0b8e\u0b85",
    "\u0003\u0002\u0002\u0002\u0b8e\u0b8f\u0003\u0002\u0002\u0002\u0b8f\u00b1",
    "\u0003\u0002\u0002\u0002\u0b90\u0b92\u0007\u0081\u0002\u0002\u0b91\u0b93",
    "\t\'\u0002\u0002\u0b92\u0b91\u0003\u0002\u0002\u0002\u0b92\u0b93\u0003",
    "\u0002\u0002\u0002\u0b93\u0b95\u0003\u0002\u0002\u0002\u0b94\u0b96\u0007",
    "P\u0002\u0002\u0b95\u0b94\u0003\u0002\u0002\u0002\u0b95\u0b96\u0003",
    "\u0002\u0002\u0002\u0b96\u0b97\u0003\u0002\u0002\u0002\u0b97\u0b9d\u0005",
    "\u01f4\u00fb\u0002\u0b98\u0b99\u0007u\u0002\u0002\u0b99\u0b9a\u0007",
    "\u03fe\u0002\u0002\u0b9a\u0b9b\u0005\u022c\u0117\u0002\u0b9b\u0b9c\u0007",
    "\u03ff\u0002\u0002\u0b9c\u0b9e\u0003\u0002\u0002\u0002\u0b9d\u0b98\u0003",
    "\u0002\u0002\u0002\u0b9d\u0b9e\u0003\u0002\u0002\u0002\u0b9e\u0baf\u0003",
    "\u0002\u0002\u0002\u0b9f\u0ba0\u0007\u03fe\u0002\u0002\u0ba0\u0ba1\u0005",
    "\u022c\u0117\u0002\u0ba1\u0ba2\u0007\u03ff\u0002\u0002\u0ba2\u0ba4\u0003",
    "\u0002\u0002\u0002\u0ba3\u0b9f\u0003\u0002\u0002\u0002\u0ba3\u0ba4\u0003",
    "\u0002\u0002\u0002\u0ba4\u0ba5\u0003\u0002\u0002\u0002\u0ba5\u0bb0\u0005",
    "\u00b8]\u0002\u0ba6\u0ba7\u0007\u008c\u0002\u0002\u0ba7\u0bac\u0005",
    "\u00ba^\u0002\u0ba8\u0ba9\u0007\u0400\u0002\u0002\u0ba9\u0bab\u0005",
    "\u00ba^\u0002\u0baa\u0ba8\u0003\u0002\u0002\u0002\u0bab\u0bae\u0003",
    "\u0002\u0002\u0002\u0bac\u0baa\u0003\u0002\u0002\u0002\u0bac\u0bad\u0003",
    "\u0002\u0002\u0002\u0bad\u0bb0\u0003\u0002\u0002\u0002\u0bae\u0bac\u0003",
    "\u0002\u0002\u0002\u0baf\u0ba3\u0003\u0002\u0002\u0002\u0baf\u0ba6\u0003",
    "\u0002\u0002\u0002\u0bb0\u00b3\u0003\u0002\u0002\u0002\u0bb1\u0bb3\u0005",
    "\u00e4s\u0002\u0bb2\u0bb4\u0005\u00be`\u0002\u0bb3\u0bb2\u0003\u0002",
    "\u0002\u0002\u0bb3\u0bb4\u0003\u0002\u0002\u0002\u0bb4\u0be9\u0003\u0002",
    "\u0002\u0002\u0bb5\u0bb7\u0005\u00e0q\u0002\u0bb6\u0bb8\u0005\u00be",
    "`\u0002\u0bb7\u0bb6\u0003\u0002\u0002\u0002\u0bb7\u0bb8\u0003\u0002",
    "\u0002\u0002\u0bb8\u0be9\u0003\u0002\u0002\u0002\u0bb9\u0bbb\u0005\u00e6",
    "t\u0002\u0bba\u0bbc\u0005\u00eav\u0002\u0bbb\u0bba\u0003\u0002\u0002",
    "\u0002\u0bbc\u0bbd\u0003\u0002\u0002\u0002\u0bbd\u0bbb\u0003\u0002\u0002",
    "\u0002\u0bbd\u0bbe\u0003\u0002\u0002\u0002\u0bbe\u0bc7\u0003\u0002\u0002",
    "\u0002\u0bbf\u0bc1\u0007\u00a4\u0002\u0002\u0bc0\u0bc2\t(\u0002\u0002",
    "\u0bc1\u0bc0\u0003\u0002\u0002\u0002\u0bc1\u0bc2\u0003\u0002\u0002\u0002",
    "\u0bc2\u0bc5\u0003\u0002\u0002\u0002\u0bc3\u0bc6\u0005\u00e4s\u0002",
    "\u0bc4\u0bc6\u0005\u00e0q\u0002\u0bc5\u0bc3\u0003\u0002\u0002\u0002",
    "\u0bc5\u0bc4\u0003\u0002\u0002\u0002\u0bc6\u0bc8\u0003\u0002\u0002\u0002",
    "\u0bc7\u0bbf\u0003\u0002\u0002\u0002\u0bc7\u0bc8\u0003\u0002\u0002\u0002",
    "\u0bc8\u0bca\u0003\u0002\u0002\u0002\u0bc9\u0bcb\u0005\u00d0i\u0002",
    "\u0bca\u0bc9\u0003\u0002\u0002\u0002\u0bca\u0bcb\u0003\u0002\u0002\u0002",
    "\u0bcb\u0bcd\u0003\u0002\u0002\u0002\u0bcc\u0bce\u0005\u00fc\u007f\u0002",
    "\u0bcd\u0bcc\u0003\u0002\u0002\u0002\u0bcd\u0bce\u0003\u0002\u0002\u0002",
    "\u0bce\u0bd0\u0003\u0002\u0002\u0002\u0bcf\u0bd1\u0005\u00be`\u0002",
    "\u0bd0\u0bcf\u0003\u0002\u0002\u0002\u0bd0\u0bd1\u0003\u0002\u0002\u0002",
    "\u0bd1\u0be9\u0003\u0002\u0002\u0002\u0bd2\u0bd4\u0005\u00e2r\u0002",
    "\u0bd3\u0bd5\u0005\u00e8u\u0002\u0bd4\u0bd3\u0003\u0002\u0002\u0002",
    "\u0bd5\u0bd6\u0003\u0002\u0002\u0002\u0bd6\u0bd4\u0003\u0002\u0002\u0002",
    "\u0bd6\u0bd7\u0003\u0002\u0002\u0002\u0bd7\u0bdd\u0003\u0002\u0002\u0002",
    "\u0bd8\u0bda\u0007\u00a4\u0002\u0002\u0bd9\u0bdb\t(\u0002\u0002\u0bda",
    "\u0bd9\u0003\u0002\u0002\u0002\u0bda\u0bdb\u0003\u0002\u0002\u0002\u0bdb",
    "\u0bdc\u0003\u0002\u0002\u0002\u0bdc\u0bde\u0005\u00e0q\u0002\u0bdd",
    "\u0bd8\u0003\u0002\u0002\u0002\u0bdd\u0bde\u0003\u0002\u0002\u0002\u0bde",
    "\u0be0\u0003\u0002\u0002\u0002\u0bdf\u0be1\u0005\u00d0i\u0002\u0be0",
    "\u0bdf\u0003\u0002\u0002\u0002\u0be0\u0be1\u0003\u0002\u0002\u0002\u0be1",
    "\u0be3\u0003\u0002\u0002\u0002\u0be2\u0be4\u0005\u00fc\u007f\u0002\u0be3",
    "\u0be2\u0003\u0002\u0002\u0002\u0be3\u0be4\u0003\u0002\u0002\u0002\u0be4",
    "\u0be6\u0003\u0002\u0002\u0002\u0be5\u0be7\u0005\u00be`\u0002\u0be6",
    "\u0be5\u0003\u0002\u0002\u0002\u0be6\u0be7\u0003\u0002\u0002\u0002\u0be7",
    "\u0be9\u0003\u0002\u0002\u0002\u0be8\u0bb1\u0003\u0002\u0002\u0002\u0be8",
    "\u0bb5\u0003\u0002\u0002\u0002\u0be8\u0bb9\u0003\u0002\u0002\u0002\u0be8",
    "\u0bd2\u0003\u0002\u0002\u0002\u0be9\u00b5\u0003\u0002\u0002\u0002\u0bea",
    "\u0bed\u0005\u00ccg\u0002\u0beb\u0bed\u0005\u00ceh\u0002\u0bec\u0bea",
    "\u0003\u0002\u0002\u0002\u0bec\u0beb\u0003\u0002\u0002\u0002\u0bed\u00b7",
    "\u0003\u0002\u0002\u0002\u0bee\u0c01\u0005\u00b4[\u0002\u0bef\u0bf0",
    "\t)\u0002\u0002\u0bf0\u0bf2\u0007\u03fe\u0002\u0002\u0bf1\u0bf3\u0005",
    "\u0234\u011b\u0002\u0bf2\u0bf1\u0003\u0002\u0002\u0002\u0bf2\u0bf3\u0003",
    "\u0002\u0002\u0002\u0bf3\u0bf4\u0003\u0002\u0002\u0002\u0bf4\u0bfd\u0007",
    "\u03ff\u0002\u0002\u0bf5\u0bf6\u0007\u0400\u0002\u0002\u0bf6\u0bf8\u0007",
    "\u03fe\u0002\u0002\u0bf7\u0bf9\u0005\u0234\u011b\u0002\u0bf8\u0bf7\u0003",
    "\u0002\u0002\u0002\u0bf8\u0bf9\u0003\u0002\u0002\u0002\u0bf9\u0bfa\u0003",
    "\u0002\u0002\u0002\u0bfa\u0bfc\u0007\u03ff\u0002\u0002\u0bfb\u0bf5\u0003",
    "\u0002\u0002\u0002\u0bfc\u0bff\u0003\u0002\u0002\u0002\u0bfd\u0bfb\u0003",
    "\u0002\u0002\u0002\u0bfd\u0bfe\u0003\u0002\u0002\u0002\u0bfe\u0c01\u0003",
    "\u0002\u0002\u0002\u0bff\u0bfd\u0003\u0002\u0002\u0002\u0c00\u0bee\u0003",
    "\u0002\u0002\u0002\u0c00\u0bef\u0003\u0002\u0002\u0002\u0c01\u00b9\u0003",
    "\u0002\u0002\u0002\u0c02\u0c03\u0005\u01f6\u00fc\u0002\u0c03\u0c06\u0007",
    "\u03f5\u0002\u0002\u0c04\u0c07\u0005\u025a\u012e\u0002\u0c05\u0c07\u0007",
    "(\u0002\u0002\u0c06\u0c04\u0003\u0002\u0002\u0002\u0c06\u0c05\u0003",
    "\u0002\u0002\u0002\u0c07\u00bb\u0003\u0002\u0002\u0002\u0c08\u0c0b\u0005",
    "\u020c\u0107\u0002\u0c09\u0c0b\u0007\u0418\u0002\u0002\u0c0a\u0c08\u0003",
    "\u0002\u0002\u0002\u0c0a\u0c09\u0003\u0002\u0002\u0002\u0c0b\u00bd\u0003",
    "\u0002\u0002\u0002\u0c0c\u0c0d\u0007<\u0002\u0002\u0c0d\u0c13\u0007",
    "\u00a8\u0002\u0002\u0c0e\u0c0f\u0007_\u0002\u0002\u0c0f\u0c10\u0007",
    "I\u0002\u0002\u0c10\u0c11\u0007\u0209\u0002\u0002\u0c11\u0c13\u0007",
    "\u01b8\u0002\u0002\u0c12\u0c0c\u0003\u0002\u0002\u0002\u0c12\u0c0e\u0003",
    "\u0002\u0002\u0002\u0c13\u00bf\u0003\u0002\u0002\u0002\u0c14\u0c16\u0007",
    "*\u0002\u0002\u0c15\u0c17\u0007a\u0002\u0002\u0c16\u0c15\u0003\u0002",
    "\u0002\u0002\u0c16\u0c17\u0003\u0002\u0002\u0002\u0c17\u0c19\u0003\u0002",
    "\u0002\u0002\u0c18\u0c1a\u0007\u01e5\u0002\u0002\u0c19\u0c18\u0003\u0002",
    "\u0002\u0002\u0c19\u0c1a\u0003\u0002\u0002\u0002\u0c1a\u0c1c\u0003\u0002",
    "\u0002\u0002\u0c1b\u0c1d\u0007H\u0002\u0002\u0c1c\u0c1b\u0003\u0002",
    "\u0002\u0002\u0c1c\u0c1d\u0003\u0002\u0002\u0002\u0c1d\u0c1e\u0003\u0002",
    "\u0002\u0002\u0c1e\u0c1f\u0007?\u0002\u0002\u0c1f\u0c25\u0005\u01f4",
    "\u00fb\u0002\u0c20\u0c21\u0007u\u0002\u0002\u0c21\u0c22\u0007\u03fe",
    "\u0002\u0002\u0c22\u0c23\u0005\u022c\u0117\u0002\u0c23\u0c24\u0007\u03ff",
    "\u0002\u0002\u0c24\u0c26\u0003\u0002\u0002\u0002\u0c25\u0c20\u0003\u0002",
    "\u0002\u0002\u0c25\u0c26\u0003\u0002\u0002\u0002\u0c26\u0c29\u0003\u0002",
    "\u0002\u0002\u0c27\u0c28\u0007\u00ae\u0002\u0002\u0c28\u0c2a\u0005\u025a",
    "\u012e\u0002\u0c29\u0c27\u0003\u0002\u0002\u0002\u0c29\u0c2a\u0003\u0002",
    "\u0002\u0002\u0c2a\u0c2c\u0003\u0002\u0002\u0002\u0c2b\u0c2d\u0005\u00d0",
    "i\u0002\u0c2c\u0c2b\u0003\u0002\u0002\u0002\u0c2c\u0c2d\u0003\u0002",
    "\u0002\u0002\u0c2d\u0c30\u0003\u0002\u0002\u0002\u0c2e\u0c2f\u0007[",
    "\u0002\u0002\u0c2f\u0c31\u0005\u00fe\u0080\u0002\u0c30\u0c2e\u0003\u0002",
    "\u0002\u0002\u0c30\u0c31\u0003\u0002\u0002\u0002\u0c31\u00c1\u0003\u0002",
    "\u0002\u0002\u0c32\u0c34\u0007*\u0002\u0002\u0c33\u0c35\u0007a\u0002",
    "\u0002\u0c34\u0c33\u0003\u0002\u0002\u0002\u0c34\u0c35\u0003\u0002\u0002",
    "\u0002\u0c35\u0c37\u0003\u0002\u0002\u0002\u0c36\u0c38\u0007\u01e5\u0002",
    "\u0002\u0c37\u0c36\u0003\u0002\u0002\u0002\u0c37\u0c38\u0003\u0002\u0002",
    "\u0002\u0c38\u0c3a\u0003\u0002\u0002\u0002\u0c39\u0c3b\u0007H\u0002",
    "\u0002\u0c3a\u0c39\u0003\u0002\u0002\u0002\u0c3a\u0c3b\u0003\u0002\u0002",
    "\u0002\u0c3b\u0c63\u0003\u0002\u0002\u0002\u0c3c\u0c3f\u0005\u01f4\u00fb",
    "\u0002\u0c3d\u0c3e\u0007\u03fd\u0002\u0002\u0c3e\u0c40\u0007\u03ed\u0002",
    "\u0002\u0c3f\u0c3d\u0003\u0002\u0002\u0002\u0c3f\u0c40\u0003\u0002\u0002",
    "\u0002\u0c40\u0c49\u0003\u0002\u0002\u0002\u0c41\u0c42\u0007\u0400\u0002",
    "\u0002\u0c42\u0c45\u0005\u01f4\u00fb\u0002\u0c43\u0c44\u0007\u03fd\u0002",
    "\u0002\u0c44\u0c46\u0007\u03ed\u0002\u0002\u0c45\u0c43\u0003\u0002\u0002",
    "\u0002\u0c45\u0c46\u0003\u0002\u0002\u0002\u0c46\u0c48\u0003\u0002\u0002",
    "\u0002\u0c47\u0c41\u0003\u0002\u0002\u0002\u0c48\u0c4b\u0003\u0002\u0002",
    "\u0002\u0c49\u0c47\u0003\u0002\u0002\u0002\u0c49\u0c4a\u0003\u0002\u0002",
    "\u0002\u0c4a\u0c4c\u0003\u0002\u0002\u0002\u0c4b\u0c49\u0003\u0002\u0002",
    "\u0002\u0c4c\u0c4d\u0007?\u0002\u0002\u0c4d\u0c4e\u0005\u00d4k\u0002",
    "\u0c4e\u0c64\u0003\u0002\u0002\u0002\u0c4f\u0c50\u0007?\u0002\u0002",
    "\u0c50\u0c53\u0005\u01f4\u00fb\u0002\u0c51\u0c52\u0007\u03fd\u0002\u0002",
    "\u0c52\u0c54\u0007\u03ed\u0002\u0002\u0c53\u0c51\u0003\u0002\u0002\u0002",
    "\u0c53\u0c54\u0003\u0002\u0002\u0002\u0c54\u0c5d\u0003\u0002\u0002\u0002",
    "\u0c55\u0c56\u0007\u0400\u0002\u0002\u0c56\u0c59\u0005\u01f4\u00fb\u0002",
    "\u0c57\u0c58\u0007\u03fd\u0002\u0002\u0c58\u0c5a\u0007\u03ed\u0002\u0002",
    "\u0c59\u0c57\u0003\u0002\u0002\u0002\u0c59\u0c5a\u0003\u0002\u0002\u0002",
    "\u0c5a\u0c5c\u0003\u0002\u0002\u0002\u0c5b\u0c55\u0003\u0002\u0002\u0002",
    "\u0c5c\u0c5f\u0003\u0002\u0002\u0002\u0c5d\u0c5b\u0003\u0002\u0002\u0002",
    "\u0c5d\u0c5e\u0003\u0002\u0002\u0002\u0c5e\u0c60\u0003\u0002\u0002\u0002",
    "\u0c5f\u0c5d\u0003\u0002\u0002\u0002\u0c60\u0c61\u0007\u00ab\u0002\u0002",
    "\u0c61\u0c62\u0005\u00d4k\u0002\u0c62\u0c64\u0003\u0002\u0002\u0002",
    "\u0c63\u0c3c\u0003\u0002\u0002\u0002\u0c63\u0c4f\u0003\u0002\u0002\u0002",
    "\u0c64\u0c67\u0003\u0002\u0002\u0002\u0c65\u0c66\u0007\u00ae\u0002\u0002",
    "\u0c66\u0c68\u0005\u025a\u012e\u0002\u0c67\u0c65\u0003\u0002\u0002\u0002",
    "\u0c67\u0c68\u0003\u0002\u0002\u0002\u0c68\u00c3\u0003\u0002\u0002\u0002",
    "\u0c69\u0c6a\u0007\u0177\u0002\u0002\u0c6a\u0c6b\u0005\u01f4\u00fb\u0002",
    "\u0c6b\u0c70\u0007\u01cc\u0002\u0002\u0c6c\u0c6e\u0007\r\u0002\u0002",
    "\u0c6d\u0c6c\u0003\u0002\u0002\u0002\u0c6d\u0c6e\u0003\u0002\u0002\u0002",
    "\u0c6e\u0c6f\u0003\u0002\u0002\u0002\u0c6f\u0c71\u0005\u020c\u0107\u0002",
    "\u0c70\u0c6d\u0003\u0002\u0002\u0002\u0c70\u0c71\u0003\u0002\u0002\u0002",
    "\u0c71\u00c5\u0003\u0002\u0002\u0002\u0c72\u0c73\u0007\u0177\u0002\u0002",
    "\u0c73\u0c74\u0005\u01f4\u00fb\u0002\u0c74\u0c75\u0007z\u0002\u0002",
    "\u0c75\u0c7c\u0005\u020c\u0107\u0002\u0c76\u0c77\u0005\u0262\u0132\u0002",
    "\u0c77\u0c78\u0007\u03fe\u0002\u0002\u0c78\u0c79\u0005\u0236\u011c\u0002",
    "\u0c79\u0c7a\u0007\u03ff\u0002\u0002\u0c7a\u0c7d\u0003\u0002\u0002\u0002",
    "\u0c7b\u0c7d\t*\u0002\u0002\u0c7c\u0c76\u0003\u0002\u0002\u0002\u0c7c",
    "\u0c7b\u0003\u0002\u0002\u0002\u0c7d\u0c80\u0003\u0002\u0002\u0002\u0c7e",
    "\u0c7f\u0007\u00ae\u0002\u0002\u0c7f\u0c81\u0005\u025a\u012e\u0002\u0c80",
    "\u0c7e\u0003\u0002\u0002\u0002\u0c80\u0c81\u0003\u0002\u0002\u0002\u0c81",
    "\u0c84\u0003\u0002\u0002\u0002\u0c82\u0c83\u0007[\u0002\u0002\u0c83",
    "\u0c85\u0005\u00fe\u0080\u0002\u0c84\u0c82\u0003\u0002\u0002\u0002\u0c84",
    "\u0c85\u0003\u0002\u0002\u0002\u0c85\u00c7\u0003\u0002\u0002\u0002\u0c86",
    "\u0c87\u0007\u0177\u0002\u0002\u0c87\u0c88\u0005\u01f4\u00fb\u0002\u0c88",
    "\u0c89\u0007z\u0002\u0002\u0c89\u0c8c\t+\u0002\u0002\u0c8a\u0c8b\u0007",
    "\u00ae\u0002\u0002\u0c8b\u0c8d\u0005\u025a\u012e\u0002\u0c8c\u0c8a\u0003",
    "\u0002\u0002\u0002\u0c8c\u0c8d\u0003\u0002\u0002\u0002\u0c8d\u0c90\u0003",
    "\u0002\u0002\u0002\u0c8e\u0c8f\u0007[\u0002\u0002\u0c8f\u0c91\u0005",
    "\u00fe\u0080\u0002\u0c90\u0c8e\u0003\u0002\u0002\u0002\u0c90\u0c91\u0003",
    "\u0002\u0002\u0002\u0c91\u00c9\u0003\u0002\u0002\u0002\u0c92\u0c93\u0007",
    "\u0177\u0002\u0002\u0c93\u0c94\u0005\u01f4\u00fb\u0002\u0c94\u0c95\u0007",
    "\u012d\u0002\u0002\u0c95\u00cb\u0003\u0002\u0002\u0002\u0c96\u0c98\u0007",
    "\u00a8\u0002\u0002\u0c97\u0c99\u0007a\u0002\u0002\u0c98\u0c97\u0003",
    "\u0002\u0002\u0002\u0c98\u0c99\u0003\u0002\u0002\u0002\u0c99\u0c9b\u0003",
    "\u0002\u0002\u0002\u0c9a\u0c9c\u0007H\u0002\u0002\u0c9b\u0c9a\u0003",
    "\u0002\u0002\u0002\u0c9b\u0c9c\u0003\u0002\u0002\u0002\u0c9c\u0c9d\u0003",
    "\u0002\u0002\u0002\u0c9d\u0ca2\u0005\u01f4\u00fb\u0002\u0c9e\u0ca0\u0007",
    "\r\u0002\u0002\u0c9f\u0c9e\u0003\u0002\u0002\u0002\u0c9f\u0ca0\u0003",
    "\u0002\u0002\u0002\u0ca0\u0ca1\u0003\u0002\u0002\u0002\u0ca1\u0ca3\u0005",
    "\u020c\u0107\u0002\u0ca2\u0c9f\u0003\u0002\u0002\u0002\u0ca2\u0ca3\u0003",
    "\u0002\u0002\u0002\u0ca3\u0ca4\u0003\u0002\u0002\u0002\u0ca4\u0ca5\u0007",
    "\u008c\u0002\u0002\u0ca5\u0caa\u0005\u00ba^\u0002\u0ca6\u0ca7\u0007",
    "\u0400\u0002\u0002\u0ca7\u0ca9\u0005\u00ba^\u0002\u0ca8\u0ca6\u0003",
    "\u0002\u0002\u0002\u0ca9\u0cac\u0003\u0002\u0002\u0002\u0caa\u0ca8\u0003",
    "\u0002\u0002\u0002\u0caa\u0cab\u0003\u0002\u0002\u0002\u0cab\u0caf\u0003",
    "\u0002\u0002\u0002\u0cac\u0caa\u0003\u0002\u0002\u0002\u0cad\u0cae\u0007",
    "\u00ae\u0002\u0002\u0cae\u0cb0\u0005\u025a\u012e\u0002\u0caf\u0cad\u0003",
    "\u0002\u0002\u0002\u0caf\u0cb0\u0003\u0002\u0002\u0002\u0cb0\u0cb2\u0003",
    "\u0002\u0002\u0002\u0cb1\u0cb3\u0005\u00d0i\u0002\u0cb2\u0cb1\u0003",
    "\u0002\u0002\u0002\u0cb2\u0cb3\u0003\u0002\u0002\u0002\u0cb3\u0cb5\u0003",
    "\u0002\u0002\u0002\u0cb4\u0cb6\u0005\u00fc\u007f\u0002\u0cb5\u0cb4\u0003",
    "\u0002\u0002\u0002\u0cb5\u0cb6\u0003\u0002\u0002\u0002\u0cb6\u00cd\u0003",
    "\u0002\u0002\u0002\u0cb7\u0cb9\u0007\u00a8\u0002\u0002\u0cb8\u0cba\u0007",
    "a\u0002\u0002\u0cb9\u0cb8\u0003\u0002\u0002\u0002\u0cb9\u0cba\u0003",
    "\u0002\u0002\u0002\u0cba\u0cbc\u0003\u0002\u0002\u0002\u0cbb\u0cbd\u0007",
    "H\u0002\u0002\u0cbc\u0cbb\u0003\u0002\u0002\u0002\u0cbc\u0cbd\u0003",
    "\u0002\u0002\u0002\u0cbd\u0cbe\u0003\u0002\u0002\u0002\u0cbe\u0cbf\u0005",
    "\u00d4k\u0002\u0cbf\u0cc0\u0007\u008c\u0002\u0002\u0cc0\u0cc5\u0005",
    "\u00ba^\u0002\u0cc1\u0cc2\u0007\u0400\u0002\u0002\u0cc2\u0cc4\u0005",
    "\u00ba^\u0002\u0cc3\u0cc1\u0003\u0002\u0002\u0002\u0cc4\u0cc7\u0003",
    "\u0002\u0002\u0002\u0cc5\u0cc3\u0003\u0002\u0002\u0002\u0cc5\u0cc6\u0003",
    "\u0002\u0002\u0002\u0cc6\u0cca\u0003\u0002\u0002\u0002\u0cc7\u0cc5\u0003",
    "\u0002\u0002\u0002\u0cc8\u0cc9\u0007\u00ae\u0002\u0002\u0cc9\u0ccb\u0005",
    "\u025a\u012e\u0002\u0cca\u0cc8\u0003\u0002\u0002\u0002\u0cca\u0ccb\u0003",
    "\u0002\u0002\u0002\u0ccb\u00cf\u0003\u0002\u0002\u0002\u0ccc\u0ccd\u0007",
    "q\u0002\u0002\u0ccd\u0cce\u0007\u0012\u0002\u0002\u0cce\u0cd3\u0005",
    "\u00d2j\u0002\u0ccf\u0cd0\u0007\u0400\u0002\u0002\u0cd0\u0cd2\u0005",
    "\u00d2j\u0002\u0cd1\u0ccf\u0003\u0002\u0002\u0002\u0cd2\u0cd5\u0003",
    "\u0002\u0002\u0002\u0cd3\u0cd1\u0003\u0002\u0002\u0002\u0cd3\u0cd4\u0003",
    "\u0002\u0002\u0002\u0cd4\u00d1\u0003\u0002\u0002\u0002\u0cd5\u0cd3\u0003",
    "\u0002\u0002\u0002\u0cd6\u0cd8\u0005\u025a\u012e\u0002\u0cd7\u0cd9\t",
    ",\u0002\u0002\u0cd8\u0cd7\u0003\u0002\u0002\u0002\u0cd8\u0cd9\u0003",
    "\u0002\u0002\u0002\u0cd9\u00d3\u0003\u0002\u0002\u0002\u0cda\u0cdf\u0005",
    "\u00d6l\u0002\u0cdb\u0cdc\u0007\u0400\u0002\u0002\u0cdc\u0cde\u0005",
    "\u00d6l\u0002\u0cdd\u0cdb\u0003\u0002\u0002\u0002\u0cde\u0ce1\u0003",
    "\u0002\u0002\u0002\u0cdf\u0cdd\u0003\u0002\u0002\u0002\u0cdf\u0ce0\u0003",
    "\u0002\u0002\u0002\u0ce0\u00d5\u0003\u0002\u0002\u0002\u0ce1\u0cdf\u0003",
    "\u0002\u0002\u0002\u0ce2\u0ce6\u0005\u00d8m\u0002\u0ce3\u0ce5\u0005",
    "\u00dep\u0002\u0ce4\u0ce3\u0003\u0002\u0002\u0002\u0ce5\u0ce8\u0003",
    "\u0002\u0002\u0002\u0ce6\u0ce4\u0003\u0002\u0002\u0002\u0ce6\u0ce7\u0003",
    "\u0002\u0002\u0002\u0ce7\u0cf4\u0003\u0002\u0002\u0002\u0ce8\u0ce6\u0003",
    "\u0002\u0002\u0002\u0ce9\u0cea\u0007\u03fe\u0002\u0002\u0cea\u0cee\u0005",
    "\u00d8m\u0002\u0ceb\u0ced\u0005\u00dep\u0002\u0cec\u0ceb\u0003\u0002",
    "\u0002\u0002\u0ced\u0cf0\u0003\u0002\u0002\u0002\u0cee\u0cec\u0003\u0002",
    "\u0002\u0002\u0cee\u0cef\u0003\u0002\u0002\u0002\u0cef\u0cf1\u0003\u0002",
    "\u0002\u0002\u0cf0\u0cee\u0003\u0002\u0002\u0002\u0cf1\u0cf2\u0007\u03ff",
    "\u0002\u0002\u0cf2\u0cf4\u0003\u0002\u0002\u0002\u0cf3\u0ce2\u0003\u0002",
    "\u0002\u0002\u0cf3\u0ce9\u0003\u0002\u0002\u0002\u0cf4\u00d7\u0003\u0002",
    "\u0002\u0002\u0cf5\u0cfb\u0005\u01f4\u00fb\u0002\u0cf6\u0cf7\u0007u",
    "\u0002\u0002\u0cf7\u0cf8\u0007\u03fe\u0002\u0002\u0cf8\u0cf9\u0005\u022c",
    "\u0117\u0002\u0cf9\u0cfa\u0007\u03ff\u0002\u0002\u0cfa\u0cfc\u0003\u0002",
    "\u0002\u0002\u0cfb\u0cf6\u0003\u0002\u0002\u0002\u0cfb\u0cfc\u0003\u0002",
    "\u0002\u0002\u0cfc\u0d01\u0003\u0002\u0002\u0002\u0cfd\u0cff\u0007\r",
    "\u0002\u0002\u0cfe\u0cfd\u0003\u0002\u0002\u0002\u0cfe\u0cff\u0003\u0002",
    "\u0002\u0002\u0cff\u0d00\u0003\u0002\u0002\u0002\u0d00\u0d02\u0005\u020c",
    "\u0107\u0002\u0d01\u0cfe\u0003\u0002\u0002\u0002\u0d01\u0d02\u0003\u0002",
    "\u0002\u0002\u0d02\u0d0b\u0003\u0002\u0002\u0002\u0d03\u0d08\u0005\u00da",
    "n\u0002\u0d04\u0d05\u0007\u0400\u0002\u0002\u0d05\u0d07\u0005\u00da",
    "n\u0002\u0d06\u0d04\u0003\u0002\u0002\u0002\u0d07\u0d0a\u0003\u0002",
    "\u0002\u0002\u0d08\u0d06\u0003\u0002\u0002\u0002\u0d08\u0d09\u0003\u0002",
    "\u0002\u0002\u0d09\u0d0c\u0003\u0002\u0002\u0002\u0d0a\u0d08\u0003\u0002",
    "\u0002\u0002\u0d0b\u0d03\u0003\u0002\u0002\u0002\u0d0b\u0d0c\u0003\u0002",
    "\u0002\u0002\u0d0c\u0d1e\u0003\u0002\u0002\u0002\u0d0d\u0d13\u0005\u00b4",
    "[\u0002\u0d0e\u0d0f\u0007\u03fe\u0002\u0002\u0d0f\u0d10\u0005\u00b4",
    "[\u0002\u0d10\u0d11\u0007\u03ff\u0002\u0002\u0d11\u0d13\u0003\u0002",
    "\u0002\u0002\u0d12\u0d0d\u0003\u0002\u0002\u0002\u0d12\u0d0e\u0003\u0002",
    "\u0002\u0002\u0d13\u0d15\u0003\u0002\u0002\u0002\u0d14\u0d16\u0007\r",
    "\u0002\u0002\u0d15\u0d14\u0003\u0002\u0002\u0002\u0d15\u0d16\u0003\u0002",
    "\u0002\u0002\u0d16\u0d17\u0003\u0002\u0002\u0002\u0d17\u0d18\u0005\u020c",
    "\u0107\u0002\u0d18\u0d1e\u0003\u0002\u0002\u0002\u0d19\u0d1a\u0007\u03fe",
    "\u0002\u0002\u0d1a\u0d1b\u0005\u00d4k\u0002\u0d1b\u0d1c\u0007\u03ff",
    "\u0002\u0002\u0d1c\u0d1e\u0003\u0002\u0002\u0002\u0d1d\u0cf5\u0003\u0002",
    "\u0002\u0002\u0d1d\u0d12\u0003\u0002\u0002\u0002\u0d1d\u0d19\u0003\u0002",
    "\u0002\u0002\u0d1e\u00d9\u0003\u0002\u0002\u0002\u0d1f\u0d20\t-\u0002",
    "\u0002\u0d20\u0d23\t\u0014\u0002\u0002\u0d21\u0d22\u0007<\u0002\u0002",
    "\u0d22\u0d24\u0005\u00dco\u0002\u0d23\u0d21\u0003\u0002\u0002\u0002",
    "\u0d23\u0d24\u0003\u0002\u0002\u0002\u0d24\u0d25\u0003\u0002\u0002\u0002",
    "\u0d25\u0d26\u0007\u03fe\u0002\u0002\u0d26\u0d27\u0005\u022c\u0117\u0002",
    "\u0d27\u0d28\u0007\u03ff\u0002\u0002\u0d28\u00db\u0003\u0002\u0002\u0002",
    "\u0d29\u0d2f\u0007S\u0002\u0002\u0d2a\u0d2b\u0007q\u0002\u0002\u0d2b",
    "\u0d2f\u0007\u0012\u0002\u0002\u0d2c\u0d2d\u0007D\u0002\u0002\u0d2d",
    "\u0d2f\u0007\u0012\u0002\u0002\u0d2e\u0d29\u0003\u0002\u0002\u0002\u0d2e",
    "\u0d2a\u0003\u0002\u0002\u0002\u0d2e\u0d2c\u0003\u0002\u0002\u0002\u0d2f",
    "\u00dd\u0003\u0002\u0002\u0002\u0d30\u0d32\t.\u0002\u0002\u0d31\u0d30",
    "\u0003\u0002\u0002\u0002\u0d31\u0d32\u0003\u0002\u0002\u0002\u0d32\u0d33",
    "\u0003\u0002\u0002\u0002\u0d33\u0d34\u0007S\u0002\u0002\u0d34\u0d3c",
    "\u0005\u00d8m\u0002\u0d35\u0d36\u0007l\u0002\u0002\u0d36\u0d3d\u0005",
    "\u025a\u012e\u0002\u0d37\u0d38\u0007\u00ab\u0002\u0002\u0d38\u0d39\u0007",
    "\u03fe\u0002\u0002\u0d39\u0d3a\u0005\u022c\u0117\u0002\u0d3a\u0d3b\u0007",
    "\u03ff\u0002\u0002\u0d3b\u0d3d\u0003\u0002\u0002\u0002\u0d3c\u0d35\u0003",
    "\u0002\u0002\u0002\u0d3c\u0d37\u0003\u0002\u0002\u0002\u0d3c\u0d3d\u0003",
    "\u0002\u0002\u0002\u0d3d\u0d5d\u0003\u0002\u0002\u0002\u0d3e\u0d3f\u0007",
    "\u009b\u0002\u0002\u0d3f\u0d42\u0005\u00d8m\u0002\u0d40\u0d41\u0007",
    "l\u0002\u0002\u0d41\u0d43\u0005\u025a\u012e\u0002\u0d42\u0d40\u0003",
    "\u0002\u0002\u0002\u0d42\u0d43\u0003\u0002\u0002\u0002\u0d43\u0d5d\u0003",
    "\u0002\u0002\u0002\u0d44\u0d46\t/\u0002\u0002\u0d45\u0d47\u0007s\u0002",
    "\u0002\u0d46\u0d45\u0003\u0002\u0002\u0002\u0d46\u0d47\u0003\u0002\u0002",
    "\u0002\u0d47\u0d48\u0003\u0002\u0002\u0002\u0d48\u0d49\u0007S\u0002",
    "\u0002\u0d49\u0d51\u0005\u00d8m\u0002\u0d4a\u0d4b\u0007l\u0002\u0002",
    "\u0d4b\u0d52\u0005\u025a\u012e\u0002\u0d4c\u0d4d\u0007\u00ab\u0002\u0002",
    "\u0d4d\u0d4e\u0007\u03fe\u0002\u0002\u0d4e\u0d4f\u0005\u022c\u0117\u0002",
    "\u0d4f\u0d50\u0007\u03ff\u0002\u0002\u0d50\u0d52\u0003\u0002\u0002\u0002",
    "\u0d51\u0d4a\u0003\u0002\u0002\u0002\u0d51\u0d4c\u0003\u0002\u0002\u0002",
    "\u0d52\u0d5d\u0003\u0002\u0002\u0002\u0d53\u0d58\u0007g\u0002\u0002",
    "\u0d54\u0d56\t/\u0002\u0002\u0d55\u0d57\u0007s\u0002\u0002\u0d56\u0d55",
    "\u0003\u0002\u0002\u0002\u0d56\u0d57\u0003\u0002\u0002\u0002\u0d57\u0d59",
    "\u0003\u0002\u0002\u0002\u0d58\u0d54\u0003\u0002\u0002\u0002\u0d58\u0d59",
    "\u0003\u0002\u0002\u0002\u0d59\u0d5a\u0003\u0002\u0002\u0002\u0d5a\u0d5b",
    "\u0007S\u0002\u0002\u0d5b\u0d5d\u0005\u00d8m\u0002\u0d5c\u0d31\u0003",
    "\u0002\u0002\u0002\u0d5c\u0d3e\u0003\u0002\u0002\u0002\u0d5c\u0d44\u0003",
    "\u0002\u0002\u0002\u0d5c\u0d53\u0003\u0002\u0002\u0002\u0d5d\u00df\u0003",
    "\u0002\u0002\u0002\u0d5e\u0d5f\u0007\u03fe\u0002\u0002\u0d5f\u0d60\u0005",
    "\u00e4s\u0002\u0d60\u0d61\u0007\u03ff\u0002\u0002\u0d61\u0d67\u0003",
    "\u0002\u0002\u0002\u0d62\u0d63\u0007\u03fe\u0002\u0002\u0d63\u0d64\u0005",
    "\u00e0q\u0002\u0d64\u0d65\u0007\u03ff\u0002\u0002\u0d65\u0d67\u0003",
    "\u0002\u0002\u0002\u0d66\u0d5e\u0003\u0002\u0002\u0002\u0d66\u0d62\u0003",
    "\u0002\u0002\u0002\u0d67\u00e1\u0003\u0002\u0002\u0002\u0d68\u0d69\u0007",
    "\u03fe\u0002\u0002\u0d69\u0d6a\u0005\u00e6t\u0002\u0d6a\u0d6b\u0007",
    "\u03ff\u0002\u0002\u0d6b\u0d71\u0003\u0002\u0002\u0002\u0d6c\u0d6d\u0007",
    "\u03fe\u0002\u0002\u0d6d\u0d6e\u0005\u00e2r\u0002\u0d6e\u0d6f\u0007",
    "\u03ff\u0002\u0002\u0d6f\u0d71\u0003\u0002\u0002\u0002\u0d70\u0d68\u0003",
    "\u0002\u0002\u0002\u0d70\u0d6c\u0003\u0002\u0002\u0002\u0d71\u00e3\u0003",
    "\u0002\u0002\u0002\u0d72\u0d76\u0007\u008b\u0002\u0002\u0d73\u0d75\u0005",
    "\u00ecw\u0002\u0d74\u0d73\u0003\u0002\u0002\u0002\u0d75\u0d78\u0003",
    "\u0002\u0002\u0002\u0d76\u0d74\u0003\u0002\u0002\u0002\u0d76\u0d77\u0003",
    "\u0002\u0002\u0002\u0d77\u0d79\u0003\u0002\u0002\u0002\u0d78\u0d76\u0003",
    "\u0002\u0002\u0002\u0d79\u0d7b\u0005\u00eex\u0002\u0d7a\u0d7c\u0005",
    "\u00f2z\u0002\u0d7b\u0d7a\u0003\u0002\u0002\u0002\u0d7b\u0d7c\u0003",
    "\u0002\u0002\u0002\u0d7c\u0d7e\u0003\u0002\u0002\u0002\u0d7d\u0d7f\u0005",
    "\u00f8}\u0002\u0d7e\u0d7d\u0003\u0002\u0002\u0002\u0d7e\u0d7f\u0003",
    "\u0002\u0002\u0002\u0d7f\u0d81\u0003\u0002\u0002\u0002\u0d80\u0d82\u0005",
    "\u00d0i\u0002\u0d81\u0d80\u0003\u0002\u0002\u0002\u0d81\u0d82\u0003",
    "\u0002\u0002\u0002\u0d82\u0d84\u0003\u0002\u0002\u0002\u0d83\u0d85\u0005",
    "\u00fc\u007f\u0002\u0d84\u0d83\u0003\u0002\u0002\u0002\u0d84\u0d85\u0003",
    "\u0002\u0002\u0002\u0d85\u0d9b\u0003\u0002\u0002\u0002\u0d86\u0d8a\u0007",
    "\u008b\u0002\u0002\u0d87\u0d89\u0005\u00ecw\u0002\u0d88\u0d87\u0003",
    "\u0002\u0002\u0002\u0d89\u0d8c\u0003\u0002\u0002\u0002\u0d8a\u0d88\u0003",
    "\u0002\u0002\u0002\u0d8a\u0d8b\u0003\u0002\u0002\u0002\u0d8b\u0d8d\u0003",
    "\u0002\u0002\u0002\u0d8c\u0d8a\u0003\u0002\u0002\u0002\u0d8d\u0d8f\u0005",
    "\u00eex\u0002\u0d8e\u0d90\u0005\u00f8}\u0002\u0d8f\u0d8e\u0003\u0002",
    "\u0002\u0002\u0d8f\u0d90\u0003\u0002\u0002\u0002\u0d90\u0d92\u0003\u0002",
    "\u0002\u0002\u0d91\u0d93\u0005\u00d0i\u0002\u0d92\u0d91\u0003\u0002",
    "\u0002\u0002\u0d92\u0d93\u0003\u0002\u0002\u0002\u0d93\u0d95\u0003\u0002",
    "\u0002\u0002\u0d94\u0d96\u0005\u00fc\u007f\u0002\u0d95\u0d94\u0003\u0002",
    "\u0002\u0002\u0d95\u0d96\u0003\u0002\u0002\u0002\u0d96\u0d98\u0003\u0002",
    "\u0002\u0002\u0d97\u0d99\u0005\u00f2z\u0002\u0d98\u0d97\u0003\u0002",
    "\u0002\u0002\u0d98\u0d99\u0003\u0002\u0002\u0002\u0d99\u0d9b\u0003\u0002",
    "\u0002\u0002\u0d9a\u0d72\u0003\u0002\u0002\u0002\u0d9a\u0d86\u0003\u0002",
    "\u0002\u0002\u0d9b\u00e5\u0003\u0002\u0002\u0002\u0d9c\u0da0\u0007\u008b",
    "\u0002\u0002\u0d9d\u0d9f\u0005\u00ecw\u0002\u0d9e\u0d9d\u0003\u0002",
    "\u0002\u0002\u0d9f\u0da2\u0003\u0002\u0002\u0002\u0da0\u0d9e\u0003\u0002",
    "\u0002\u0002\u0da0\u0da1\u0003\u0002\u0002\u0002\u0da1\u0da3\u0003\u0002",
    "\u0002\u0002\u0da2\u0da0\u0003\u0002\u0002\u0002\u0da3\u0da5\u0005\u00ee",
    "x\u0002\u0da4\u0da6\u0005\u00f8}\u0002\u0da5\u0da4\u0003\u0002\u0002",
    "\u0002\u0da5\u0da6\u0003\u0002\u0002\u0002\u0da6\u0da8\u0003\u0002\u0002",
    "\u0002\u0da7\u0da9\u0005\u00d0i\u0002\u0da8\u0da7\u0003\u0002\u0002",
    "\u0002\u0da8\u0da9\u0003\u0002\u0002\u0002\u0da9\u0dab\u0003\u0002\u0002",
    "\u0002\u0daa\u0dac\u0005\u00fc\u007f\u0002\u0dab\u0daa\u0003\u0002\u0002",
    "\u0002\u0dab\u0dac\u0003\u0002\u0002\u0002\u0dac\u00e7\u0003\u0002\u0002",
    "\u0002\u0dad\u0daf\u0007\u00a4\u0002\u0002\u0dae\u0db0\t(\u0002\u0002",
    "\u0daf\u0dae\u0003\u0002\u0002\u0002\u0daf\u0db0\u0003\u0002\u0002\u0002",
    "\u0db0\u0db1\u0003\u0002\u0002\u0002\u0db1\u0db2\u0005\u00e2r\u0002",
    "\u0db2\u00e9\u0003\u0002\u0002\u0002\u0db3\u0db5\u0007\u00a4\u0002\u0002",
    "\u0db4\u0db6\t(\u0002\u0002\u0db5\u0db4\u0003\u0002\u0002\u0002\u0db5",
    "\u0db6\u0003\u0002\u0002\u0002\u0db6\u0db9\u0003\u0002\u0002\u0002\u0db7",
    "\u0dba\u0005\u00e6t\u0002\u0db8\u0dba\u0005\u00e2r\u0002\u0db9\u0db7",
    "\u0003\u0002\u0002\u0002\u0db9\u0db8\u0003\u0002\u0002\u0002\u0dba\u00eb",
    "\u0003\u0002\u0002\u0002\u0dbb\u0dc4\t0\u0002\u0002\u0dbc\u0dc4\u0007",
    "F\u0002\u0002\u0dbd\u0dc4\u0007\u009b\u0002\u0002\u0dbe\u0dc4\u0007",
    "\u0097\u0002\u0002\u0dbf\u0dc4\u0007\u0095\u0002\u0002\u0dc0\u0dc4\u0007",
    "\u0218\u0002\u0002\u0dc1\u0dc4\t1\u0002\u0002\u0dc2\u0dc4\u0007\u0096",
    "\u0002\u0002\u0dc3\u0dbb\u0003\u0002\u0002\u0002\u0dc3\u0dbc\u0003\u0002",
    "\u0002\u0002\u0dc3\u0dbd\u0003\u0002\u0002\u0002\u0dc3\u0dbe\u0003\u0002",
    "\u0002\u0002\u0dc3\u0dbf\u0003\u0002\u0002\u0002\u0dc3\u0dc0\u0003\u0002",
    "\u0002\u0002\u0dc3\u0dc1\u0003\u0002\u0002\u0002\u0dc3\u0dc2\u0003\u0002",
    "\u0002\u0002\u0dc4\u00ed\u0003\u0002\u0002\u0002\u0dc5\u0dc8\u0007\u03ed",
    "\u0002\u0002\u0dc6\u0dc8\u0005\u00f0y\u0002\u0dc7\u0dc5\u0003\u0002",
    "\u0002\u0002\u0dc7\u0dc6\u0003\u0002\u0002\u0002\u0dc8\u0dcd\u0003\u0002",
    "\u0002\u0002\u0dc9\u0dca\u0007\u0400\u0002\u0002\u0dca\u0dcc\u0005\u00f0",
    "y\u0002\u0dcb\u0dc9\u0003\u0002\u0002\u0002\u0dcc\u0dcf\u0003\u0002",
    "\u0002\u0002\u0dcd\u0dcb\u0003\u0002\u0002\u0002\u0dcd\u0dce\u0003\u0002",
    "\u0002\u0002\u0dce\u00ef\u0003\u0002\u0002\u0002\u0dcf\u0dcd\u0003\u0002",
    "\u0002\u0002\u0dd0\u0dd1\u0005\u01f2\u00fa\u0002\u0dd1\u0dd2\u0007\u03fd",
    "\u0002\u0002\u0dd2\u0dd3\u0007\u03ed\u0002\u0002\u0dd3\u0dee\u0003\u0002",
    "\u0002\u0002\u0dd4\u0dd9\u0005\u01f6\u00fc\u0002\u0dd5\u0dd7\u0007\r",
    "\u0002\u0002\u0dd6\u0dd5\u0003\u0002\u0002\u0002\u0dd6\u0dd7\u0003\u0002",
    "\u0002\u0002\u0dd7\u0dd8\u0003\u0002\u0002\u0002\u0dd8\u0dda\u0005\u020c",
    "\u0107\u0002\u0dd9\u0dd6\u0003\u0002\u0002\u0002\u0dd9\u0dda\u0003\u0002",
    "\u0002\u0002\u0dda\u0dee\u0003\u0002\u0002\u0002\u0ddb\u0de0\u0005\u0246",
    "\u0124\u0002\u0ddc\u0dde\u0007\r\u0002\u0002\u0ddd\u0ddc\u0003\u0002",
    "\u0002\u0002\u0ddd\u0dde\u0003\u0002\u0002\u0002\u0dde\u0ddf\u0003\u0002",
    "\u0002\u0002\u0ddf\u0de1\u0005\u020c\u0107\u0002\u0de0\u0ddd\u0003\u0002",
    "\u0002\u0002\u0de0\u0de1\u0003\u0002\u0002\u0002\u0de1\u0dee\u0003\u0002",
    "\u0002\u0002\u0de2\u0de3\u0007\u0418\u0002\u0002\u0de3\u0de5\u0007\u03e4",
    "\u0002\u0002\u0de4\u0de2\u0003\u0002\u0002\u0002\u0de4\u0de5\u0003\u0002",
    "\u0002\u0002\u0de5\u0de6\u0003\u0002\u0002\u0002\u0de6\u0deb\u0005\u025a",
    "\u012e\u0002\u0de7\u0de9\u0007\r\u0002\u0002\u0de8\u0de7\u0003\u0002",
    "\u0002\u0002\u0de8\u0de9\u0003\u0002\u0002\u0002\u0de9\u0dea\u0003\u0002",
    "\u0002\u0002\u0dea\u0dec\u0005\u020c\u0107\u0002\u0deb\u0de8\u0003\u0002",
    "\u0002\u0002\u0deb\u0dec\u0003\u0002\u0002\u0002\u0dec\u0dee\u0003\u0002",
    "\u0002\u0002\u0ded\u0dd0\u0003\u0002\u0002\u0002\u0ded\u0dd4\u0003\u0002",
    "\u0002\u0002\u0ded\u0ddb\u0003\u0002\u0002\u0002\u0ded\u0de4\u0003\u0002",
    "\u0002\u0002\u0dee\u00f1\u0003\u0002\u0002\u0002\u0def\u0df0\u0007P",
    "\u0002\u0002\u0df0\u0df5\u0005\u00bc_\u0002\u0df1\u0df2\u0007\u0400",
    "\u0002\u0002\u0df2\u0df4\u0005\u00bc_\u0002\u0df3\u0df1\u0003\u0002",
    "\u0002\u0002\u0df4\u0df7\u0003\u0002\u0002\u0002\u0df5\u0df3\u0003\u0002",
    "\u0002\u0002\u0df5\u0df6\u0003\u0002\u0002\u0002\u0df6\u0e14\u0003\u0002",
    "\u0002\u0002\u0df7\u0df5\u0003\u0002\u0002\u0002\u0df8\u0df9\u0007P",
    "\u0002\u0002\u0df9\u0dfa\u0007\u0151\u0002\u0002\u0dfa\u0e14\u0007\u040d",
    "\u0002\u0002\u0dfb\u0dfc\u0007P\u0002\u0002\u0dfc\u0dfd\u0007t\u0002",
    "\u0002\u0dfd\u0e01\u0007\u040d\u0002\u0002\u0dfe\u0dff\u0007\u0018\u0002",
    "\u0002\u0dff\u0e00\u0007\u008c\u0002\u0002\u0e00\u0e02\u0005\u01fe\u0100",
    "\u0002\u0e01\u0dfe\u0003\u0002\u0002\u0002\u0e01\u0e02\u0003\u0002\u0002",
    "\u0002\u0e02\u0e09\u0003\u0002\u0002\u0002\u0e03\u0e05\t%\u0002\u0002",
    "\u0e04\u0e06\u0005\u00f4{\u0002\u0e05\u0e04\u0003\u0002\u0002\u0002",
    "\u0e06\u0e07\u0003\u0002\u0002\u0002\u0e07\u0e05\u0003\u0002\u0002\u0002",
    "\u0e07\u0e08\u0003\u0002\u0002\u0002\u0e08\u0e0a\u0003\u0002\u0002\u0002",
    "\u0e09\u0e03\u0003\u0002\u0002\u0002\u0e09\u0e0a\u0003\u0002\u0002\u0002",
    "\u0e0a\u0e11\u0003\u0002\u0002\u0002\u0e0b\u0e0d\u0007]\u0002\u0002",
    "\u0e0c\u0e0e\u0005\u00f6|\u0002\u0e0d\u0e0c\u0003\u0002\u0002\u0002",
    "\u0e0e\u0e0f\u0003\u0002\u0002\u0002\u0e0f\u0e0d\u0003\u0002\u0002\u0002",
    "\u0e0f\u0e10\u0003\u0002\u0002\u0002\u0e10\u0e12\u0003\u0002\u0002\u0002",
    "\u0e11\u0e0b\u0003\u0002\u0002\u0002\u0e11\u0e12\u0003\u0002\u0002\u0002",
    "\u0e12\u0e14\u0003\u0002\u0002\u0002\u0e13\u0def\u0003\u0002\u0002\u0002",
    "\u0e13\u0df8\u0003\u0002\u0002\u0002\u0e13\u0dfb\u0003\u0002\u0002\u0002",
    "\u0e14\u00f3\u0003\u0002\u0002\u0002\u0e15\u0e16\u0007\u009d\u0002\u0002",
    "\u0e16\u0e17\u0007\u0012\u0002\u0002\u0e17\u0e22\u0007\u040d\u0002\u0002",
    "\u0e18\u0e1a\u0007o\u0002\u0002\u0e19\u0e18\u0003\u0002\u0002\u0002",
    "\u0e19\u0e1a\u0003\u0002\u0002\u0002\u0e1a\u0e1b\u0003\u0002\u0002\u0002",
    "\u0e1b\u0e1c\u00075\u0002\u0002\u0e1c\u0e1d\u0007\u0012\u0002\u0002",
    "\u0e1d\u0e22\u0007\u040d\u0002\u0002\u0e1e\u0e1f\u00076\u0002\u0002",
    "\u0e1f\u0e20\u0007\u0012\u0002\u0002\u0e20\u0e22\u0007\u040d\u0002\u0002",
    "\u0e21\u0e15\u0003\u0002\u0002\u0002\u0e21\u0e19\u0003\u0002\u0002\u0002",
    "\u0e21\u0e1e\u0003\u0002\u0002\u0002\u0e22\u00f5\u0003\u0002\u0002\u0002",
    "\u0e23\u0e24\u0007\u009a\u0002\u0002\u0e24\u0e25\u0007\u0012\u0002\u0002",
    "\u0e25\u0e2a\u0007\u040d\u0002\u0002\u0e26\u0e27\u0007\u009d\u0002\u0002",
    "\u0e27\u0e28\u0007\u0012\u0002\u0002\u0e28\u0e2a\u0007\u040d\u0002\u0002",
    "\u0e29\u0e23\u0003\u0002\u0002\u0002\u0e29\u0e26\u0003\u0002\u0002\u0002",
    "\u0e2a\u00f7\u0003\u0002\u0002\u0002\u0e2b\u0e2c\u0007?\u0002\u0002",
    "\u0e2c\u0e2f\u0005\u00d4k\u0002\u0e2d\u0e2e\u0007\u00ae\u0002\u0002",
    "\u0e2e\u0e30\u0005\u025a\u012e\u0002\u0e2f\u0e2d\u0003\u0002\u0002\u0002",
    "\u0e2f\u0e30\u0003\u0002\u0002\u0002\u0e30\u0e3f\u0003\u0002\u0002\u0002",
    "\u0e31\u0e32\u0007D\u0002\u0002\u0e32\u0e33\u0007\u0012\u0002\u0002",
    "\u0e33\u0e38\u0005\u00fa~\u0002\u0e34\u0e35\u0007\u0400\u0002\u0002",
    "\u0e35\u0e37\u0005\u00fa~\u0002\u0e36\u0e34\u0003\u0002\u0002\u0002",
    "\u0e37\u0e3a\u0003\u0002\u0002\u0002\u0e38\u0e36\u0003\u0002\u0002\u0002",
    "\u0e38\u0e39\u0003\u0002\u0002\u0002\u0e39\u0e3d\u0003\u0002\u0002\u0002",
    "\u0e3a\u0e38\u0003\u0002\u0002\u0002\u0e3b\u0e3c\u0007\u00b0\u0002\u0002",
    "\u0e3c\u0e3e\u0007\u01ff\u0002\u0002\u0e3d\u0e3b\u0003\u0002\u0002\u0002",
    "\u0e3d\u0e3e\u0003\u0002\u0002\u0002\u0e3e\u0e40\u0003\u0002\u0002\u0002",
    "\u0e3f\u0e31\u0003\u0002\u0002\u0002\u0e3f\u0e40\u0003\u0002\u0002\u0002",
    "\u0e40\u0e43\u0003\u0002\u0002\u0002\u0e41\u0e42\u0007E\u0002\u0002",
    "\u0e42\u0e44\u0005\u025a\u012e\u0002\u0e43\u0e41\u0003\u0002\u0002\u0002",
    "\u0e43\u0e44\u0003\u0002\u0002\u0002\u0e44\u00f9\u0003\u0002\u0002\u0002",
    "\u0e45\u0e47\u0005\u025a\u012e\u0002\u0e46\u0e48\t,\u0002\u0002\u0e47",
    "\u0e46\u0003\u0002\u0002\u0002\u0e47\u0e48\u0003\u0002\u0002\u0002\u0e48",
    "\u00fb\u0003\u0002\u0002\u0002\u0e49\u0e54\u0007[\u0002\u0002\u0e4a",
    "\u0e4b\u0005\u00fe\u0080\u0002\u0e4b\u0e4c\u0007\u0400\u0002\u0002\u0e4c",
    "\u0e4e\u0003\u0002\u0002\u0002\u0e4d\u0e4a\u0003\u0002\u0002\u0002\u0e4d",
    "\u0e4e\u0003\u0002\u0002\u0002\u0e4e\u0e4f\u0003\u0002\u0002\u0002\u0e4f",
    "\u0e55\u0005\u00fe\u0080\u0002\u0e50\u0e51\u0005\u00fe\u0080\u0002\u0e51",
    "\u0e52\u0007\u01c6\u0002\u0002\u0e52\u0e53\u0005\u00fe\u0080\u0002\u0e53",
    "\u0e55\u0003\u0002\u0002\u0002\u0e54\u0e4d\u0003\u0002\u0002\u0002\u0e54",
    "\u0e50\u0003\u0002\u0002\u0002\u0e55\u00fd\u0003\u0002\u0002\u0002\u0e56",
    "\u0e59\u0005\u0212\u010a\u0002\u0e57\u0e59\u0005\u01fc\u00ff\u0002\u0e58",
    "\u0e56\u0003\u0002\u0002\u0002\u0e58\u0e57\u0003\u0002\u0002\u0002\u0e59",
    "\u00ff\u0003\u0002\u0002\u0002\u0e5a\u0e5b\u0007\u021c\u0002\u0002\u0e5b",
    "\u0e64\u0007\u0233\u0002\u0002\u0e5c\u0e61\u0005\u0116\u008c\u0002\u0e5d",
    "\u0e5e\u0007\u0400\u0002\u0002\u0e5e\u0e60\u0005\u0116\u008c\u0002\u0e5f",
    "\u0e5d\u0003\u0002\u0002\u0002\u0e60\u0e63\u0003\u0002\u0002\u0002\u0e61",
    "\u0e5f\u0003\u0002\u0002\u0002\u0e61\u0e62\u0003\u0002\u0002\u0002\u0e62",
    "\u0e65\u0003\u0002\u0002\u0002\u0e63\u0e61\u0003\u0002\u0002\u0002\u0e64",
    "\u0e5c\u0003\u0002\u0002\u0002\u0e64\u0e65\u0003\u0002\u0002\u0002\u0e65",
    "\u0101\u0003\u0002\u0002\u0002\u0e66\u0e68\u0007\u011c\u0002\u0002\u0e67",
    "\u0e69\u0007\u024a\u0002\u0002\u0e68\u0e67\u0003\u0002\u0002\u0002\u0e68",
    "\u0e69\u0003\u0002\u0002\u0002\u0e69\u0103\u0003\u0002\u0002\u0002\u0e6a",
    "\u0e6c\u0007\u0134\u0002\u0002\u0e6b\u0e6d\u0007\u024a\u0002\u0002\u0e6c",
    "\u0e6b\u0003\u0002\u0002\u0002\u0e6c\u0e6d\u0003\u0002\u0002\u0002\u0e6d",
    "\u0e73\u0003\u0002\u0002\u0002\u0e6e\u0e70\u0007\f\u0002\u0002\u0e6f",
    "\u0e71\u0007\u01c2\u0002\u0002\u0e70\u0e6f\u0003\u0002\u0002\u0002\u0e70",
    "\u0e71\u0003\u0002\u0002\u0002\u0e71\u0e72\u0003\u0002\u0002\u0002\u0e72",
    "\u0e74\u0007\u0125\u0002\u0002\u0e73\u0e6e\u0003\u0002\u0002\u0002\u0e73",
    "\u0e74\u0003\u0002\u0002\u0002\u0e74\u0e79\u0003\u0002\u0002\u0002\u0e75",
    "\u0e77\u0007\u01c2\u0002\u0002\u0e76\u0e75\u0003\u0002\u0002\u0002\u0e76",
    "\u0e77\u0003\u0002\u0002\u0002\u0e77\u0e78\u0003\u0002\u0002\u0002\u0e78",
    "\u0e7a\u0007~\u0002\u0002\u0e79\u0e76\u0003\u0002\u0002\u0002\u0e79",
    "\u0e7a\u0003\u0002\u0002\u0002\u0e7a\u0105\u0003\u0002\u0002\u0002\u0e7b",
    "\u0e7d\u0007\u01fe\u0002\u0002\u0e7c\u0e7e\u0007\u024a\u0002\u0002\u0e7d",
    "\u0e7c\u0003\u0002\u0002\u0002\u0e7d\u0e7e\u0003\u0002\u0002\u0002\u0e7e",
    "\u0e84\u0003\u0002\u0002\u0002\u0e7f\u0e81\u0007\f\u0002\u0002\u0e80",
    "\u0e82\u0007\u01c2\u0002\u0002\u0e81\u0e80\u0003\u0002\u0002\u0002\u0e81",
    "\u0e82\u0003\u0002\u0002\u0002\u0e82\u0e83\u0003\u0002\u0002\u0002\u0e83",
    "\u0e85\u0007\u0125\u0002\u0002\u0e84\u0e7f\u0003\u0002\u0002\u0002\u0e84",
    "\u0e85\u0003\u0002\u0002\u0002\u0e85\u0e8a\u0003\u0002\u0002\u0002\u0e86",
    "\u0e88\u0007\u01c2\u0002\u0002\u0e87\u0e86\u0003\u0002\u0002\u0002\u0e87",
    "\u0e88\u0003\u0002\u0002\u0002\u0e88\u0e89\u0003\u0002\u0002\u0002\u0e89",
    "\u0e8b\u0007~\u0002\u0002\u0e8a\u0e87\u0003\u0002\u0002\u0002\u0e8a",
    "\u0e8b\u0003\u0002\u0002\u0002\u0e8b\u0107\u0003\u0002\u0002\u0002\u0e8c",
    "\u0e8d\u0007\u0204\u0002\u0002\u0e8d\u0e8e\u0005\u020c\u0107\u0002\u0e8e",
    "\u0109\u0003\u0002\u0002\u0002\u0e8f\u0e91\u0007\u01fe\u0002\u0002\u0e90",
    "\u0e92\u0007\u024a\u0002\u0002\u0e91\u0e90\u0003\u0002\u0002\u0002\u0e91",
    "\u0e92\u0003\u0002\u0002\u0002\u0e92\u0e93\u0003\u0002\u0002\u0002\u0e93",
    "\u0e95\u0007\u009f\u0002\u0002\u0e94\u0e96\u0007\u0204\u0002\u0002\u0e95",
    "\u0e94\u0003\u0002\u0002\u0002\u0e95\u0e96\u0003\u0002\u0002\u0002\u0e96",
    "\u0e97\u0003\u0002\u0002\u0002\u0e97\u0e98\u0005\u020c\u0107\u0002\u0e98",
    "\u010b\u0003\u0002\u0002\u0002\u0e99\u0e9a\u0007~\u0002\u0002\u0e9a",
    "\u0e9b\u0007\u0204\u0002\u0002\u0e9b\u0e9c\u0005\u020c\u0107\u0002\u0e9c",
    "\u010d\u0003\u0002\u0002\u0002\u0e9d\u0e9e\u0007_\u0002\u0002\u0e9e",
    "\u0e9f\u0007\u025c\u0002\u0002\u0e9f\u0ea4\u0005\u0118\u008d\u0002\u0ea0",
    "\u0ea1\u0007\u0400\u0002\u0002\u0ea1\u0ea3\u0005\u0118\u008d\u0002\u0ea2",
    "\u0ea0\u0003\u0002\u0002\u0002\u0ea3\u0ea6\u0003\u0002\u0002\u0002\u0ea4",
    "\u0ea2\u0003\u0002\u0002\u0002\u0ea4\u0ea5\u0003\u0002\u0002\u0002\u0ea5",
    "\u010f\u0003\u0002\u0002\u0002\u0ea6\u0ea4\u0003\u0002\u0002\u0002\u0ea7",
    "\u0ea8\u0007\u00a6\u0002\u0002\u0ea8\u0ea9\u0007\u025c\u0002\u0002\u0ea9",
    "\u0111\u0003\u0002\u0002\u0002\u0eaa\u0eab\u0007\u008c\u0002\u0002\u0eab",
    "\u0eac\u0007\u0118\u0002\u0002\u0eac\u0ead\u0007\u03f5\u0002\u0002\u0ead",
    "\u0eae\t\u0018\u0002\u0002\u0eae\u0113\u0003\u0002\u0002\u0002\u0eaf",
    "\u0eb1\u0007\u008c\u0002\u0002\u0eb0\u0eb2\t2\u0002\u0002\u0eb1\u0eb0",
    "\u0003\u0002\u0002\u0002\u0eb1\u0eb2\u0003\u0002\u0002\u0002\u0eb2\u0eb3",
    "\u0003\u0002\u0002\u0002\u0eb3\u0eb4\u0007\u0233\u0002\u0002\u0eb4\u0eb9",
    "\u0005\u011c\u008f\u0002\u0eb5\u0eb6\u0007\u0400\u0002\u0002\u0eb6\u0eb8",
    "\u0005\u011c\u008f\u0002\u0eb7\u0eb5\u0003\u0002\u0002\u0002\u0eb8\u0ebb",
    "\u0003\u0002\u0002\u0002\u0eb9\u0eb7\u0003\u0002\u0002\u0002\u0eb9\u0eba",
    "\u0003\u0002\u0002\u0002\u0eba\u0115\u0003\u0002\u0002\u0002\u0ebb\u0eb9",
    "\u0003\u0002\u0002\u0002\u0ebc\u0ebd\u0007\u00b0\u0002\u0002\u0ebd\u0ebe",
    "\u0007\u013b\u0002\u0002\u0ebe\u0ec4\u0007\u020f\u0002\u0002\u0ebf\u0ec0",
    "\u0007z\u0002\u0002\u0ec0\u0ec4\u0007\u00b1\u0002\u0002\u0ec1\u0ec2",
    "\u0007z\u0002\u0002\u0ec2\u0ec4\u0007\u01cb\u0002\u0002\u0ec3\u0ebc",
    "\u0003\u0002\u0002\u0002\u0ec3\u0ebf\u0003\u0002\u0002\u0002\u0ec3\u0ec1",
    "\u0003\u0002\u0002\u0002\u0ec4\u0117\u0003\u0002\u0002\u0002\u0ec5\u0eca",
    "\u0005\u01f4\u00fb\u0002\u0ec6\u0ec8\u0007\r\u0002\u0002\u0ec7\u0ec6",
    "\u0003\u0002\u0002\u0002\u0ec7\u0ec8\u0003\u0002\u0002\u0002\u0ec8\u0ec9",
    "\u0003\u0002\u0002\u0002\u0ec9\u0ecb\u0005\u020c\u0107\u0002\u0eca\u0ec7",
    "\u0003\u0002\u0002\u0002\u0eca\u0ecb\u0003\u0002\u0002\u0002\u0ecb\u0ecc",
    "\u0003\u0002\u0002\u0002\u0ecc\u0ecd\u0005\u011a\u008e\u0002\u0ecd\u0119",
    "\u0003\u0002\u0002\u0002\u0ece\u0ed0\u0007z\u0002\u0002\u0ecf\u0ed1",
    "\u0007\u0194\u0002\u0002\u0ed0\u0ecf\u0003\u0002\u0002\u0002\u0ed0\u0ed1",
    "\u0003\u0002\u0002\u0002\u0ed1\u0ed7\u0003\u0002\u0002\u0002\u0ed2\u0ed4",
    "\u0007a\u0002\u0002\u0ed3\u0ed2\u0003\u0002\u0002\u0002\u0ed3\u0ed4",
    "\u0003\u0002\u0002\u0002\u0ed4\u0ed5\u0003\u0002\u0002\u0002\u0ed5\u0ed7",
    "\u0007\u00b1\u0002\u0002\u0ed6\u0ece\u0003\u0002\u0002\u0002\u0ed6\u0ed3",
    "\u0003\u0002\u0002\u0002\u0ed7\u011b\u0003\u0002\u0002\u0002\u0ed8\u0ed9",
    "\u0007\u018a\u0002\u0002\u0ed9\u0eda\u0007\u0192\u0002\u0002\u0eda\u0ee0",
    "\u0005\u011e\u0090\u0002\u0edb\u0edc\u0007z\u0002\u0002\u0edc\u0ee0",
    "\u0007\u00b1\u0002\u0002\u0edd\u0ede\u0007z\u0002\u0002\u0ede\u0ee0",
    "\u0007\u01cb\u0002\u0002\u0edf\u0ed8\u0003\u0002\u0002\u0002\u0edf\u0edb",
    "\u0003\u0002\u0002\u0002\u0edf\u0edd\u0003\u0002\u0002\u0002\u0ee0\u011d",
    "\u0003\u0002\u0002\u0002\u0ee1\u0ee2\u0007\u02b3\u0002\u0002\u0ee2\u0ee9",
    "\u0007z\u0002\u0002\u0ee3\u0ee4\u0007z\u0002\u0002\u0ee4\u0ee9\u0007",
    "\u02b4\u0002\u0002\u0ee5\u0ee6\u0007z\u0002\u0002\u0ee6\u0ee9\u0007",
    "\u02b5\u0002\u0002\u0ee7\u0ee9\u0007\u02b6\u0002\u0002\u0ee8\u0ee1\u0003",
    "\u0002\u0002\u0002\u0ee8\u0ee3\u0003\u0002\u0002\u0002\u0ee8\u0ee5\u0003",
    "\u0002\u0002\u0002\u0ee8\u0ee7\u0003\u0002\u0002\u0002\u0ee9\u011f\u0003",
    "\u0002\u0002\u0002\u0eea\u0eeb\u0007\u0017\u0002\u0002\u0eeb\u0eec\u0007",
    "\u0197\u0002\u0002\u0eec\u0eed\u0007\u009f\u0002\u0002\u0eed\u0ef2\u0005",
    "\u0132\u009a\u0002\u0eee\u0eef\u0007\u0400\u0002\u0002\u0eef\u0ef1\u0005",
    "\u0132\u009a\u0002\u0ef0\u0eee\u0003\u0002\u0002\u0002\u0ef1\u0ef4\u0003",
    "\u0002\u0002\u0002\u0ef2\u0ef0\u0003\u0002\u0002\u0002\u0ef2\u0ef3\u0003",
    "\u0002\u0002\u0002\u0ef3\u0ef6\u0003\u0002\u0002\u0002\u0ef4\u0ef2\u0003",
    "\u0002\u0002\u0002\u0ef5\u0ef7\u0005\u013a\u009e\u0002\u0ef6\u0ef5\u0003",
    "\u0002\u0002\u0002\u0ef6\u0ef7\u0003\u0002\u0002\u0002\u0ef7\u0121\u0003",
    "\u0002\u0002\u0002\u0ef8\u0ef9\u0007\u0017\u0002\u0002\u0ef9\u0efa\u0007",
    "\u01f8\u0002\u0002\u0efa\u0efb\u0007\u016b\u0002\u0002\u0efb\u0f00\u0005",
    "\u013c\u009f\u0002\u0efc\u0efd\u0007\u0400\u0002\u0002\u0efd\u0eff\u0005",
    "\u013c\u009f\u0002\u0efe\u0efc\u0003\u0002\u0002\u0002\u0eff\u0f02\u0003",
    "\u0002\u0002\u0002\u0f00\u0efe\u0003\u0002\u0002\u0002\u0f00\u0f01\u0003",
    "\u0002\u0002\u0002\u0f01\u0123\u0003\u0002\u0002\u0002\u0f02\u0f00\u0003",
    "\u0002\u0002\u0002\u0f03\u0f04\u0007x\u0002\u0002\u0f04\u0f05\t3\u0002",
    "\u0002\u0f05\u0f0a\u0007\u0196\u0002\u0002\u0f06\u0f07\u0007\u009f\u0002",
    "\u0002\u0f07\u0f0b\u0007\u040d\u0002\u0002\u0f08\u0f09\u0007\u000f\u0002",
    "\u0002\u0f09\u0f0b\u0007\u040d\u0002\u0002\u0f0a\u0f06\u0003\u0002\u0002",
    "\u0002\u0f0a\u0f08\u0003\u0002\u0002\u0002\u0f0b\u0125\u0003\u0002\u0002",
    "\u0002\u0f0c\u0f0d\u0007\u01f9\u0002\u0002\u0f0d\u0f0e\u0007\u0197\u0002",
    "\u0002\u0f0e\u0127\u0003\u0002\u0002\u0002\u0f0f\u0f10\u0007\u01f9\u0002",
    "\u0002\u0f10\u0f12\u0007\u020d\u0002\u0002\u0f11\u0f13\u0007\b\u0002",
    "\u0002\u0f12\u0f11\u0003\u0002\u0002\u0002\u0f12\u0f13\u0003\u0002\u0002",
    "\u0002\u0f13\u0f15\u0003\u0002\u0002\u0002\u0f14\u0f16\u0005\u013a\u009e",
    "\u0002\u0f15\u0f14\u0003\u0002\u0002\u0002\u0f15\u0f16\u0003\u0002\u0002",
    "\u0002\u0f16\u0129\u0003\u0002\u0002\u0002\u0f17\u0f18\u0007\u021c\u0002",
    "\u0002\u0f18\u0f21\u0007\u020d\u0002\u0002\u0f19\u0f1e\u0005\u0140\u00a1",
    "\u0002\u0f1a\u0f1b\u0007\u0400\u0002\u0002\u0f1b\u0f1d\u0005\u0140\u00a1",
    "\u0002\u0f1c\u0f1a\u0003\u0002\u0002\u0002\u0f1d\u0f20\u0003\u0002\u0002",
    "\u0002\u0f1e\u0f1c\u0003\u0002\u0002\u0002\u0f1e\u0f1f\u0003\u0002\u0002",
    "\u0002\u0f1f\u0f22\u0003\u0002\u0002\u0002\u0f20\u0f1e\u0003\u0002\u0002",
    "\u0002\u0f21\u0f19\u0003\u0002\u0002\u0002\u0f21\u0f22\u0003\u0002\u0002",
    "\u0002\u0f22\u0f25\u0003\u0002\u0002\u0002\u0f23\u0f24\u0007\u023c\u0002",
    "\u0002\u0f24\u0f26\u0005\u0142\u00a2\u0002\u0f25\u0f23\u0003\u0002\u0002",
    "\u0002\u0f25\u0f26\u0003\u0002\u0002\u0002\u0f26\u0f2a\u0003\u0002\u0002",
    "\u0002\u0f27\u0f29\u0005\u0144\u00a3\u0002\u0f28\u0f27\u0003\u0002\u0002",
    "\u0002\u0f29\u0f2c\u0003\u0002\u0002\u0002\u0f2a\u0f28\u0003\u0002\u0002",
    "\u0002\u0f2a\u0f2b\u0003\u0002\u0002\u0002\u0f2b\u0f2e\u0003\u0002\u0002",
    "\u0002\u0f2c\u0f2a\u0003\u0002\u0002\u0002\u0f2d\u0f2f\u0005\u013a\u009e",
    "\u0002\u0f2e\u0f2d\u0003\u0002\u0002\u0002\u0f2e\u0f2f\u0003\u0002\u0002",
    "\u0002\u0f2f\u012b\u0003\u0002\u0002\u0002\u0f30\u0f31\u0007\u0222\u0002",
    "\u0002\u0f31\u0f3a\u0007\u020d\u0002\u0002\u0f32\u0f37\u0005\u0140\u00a1",
    "\u0002\u0f33\u0f34\u0007\u0400\u0002\u0002\u0f34\u0f36\u0005\u0140\u00a1",
    "\u0002\u0f35\u0f33\u0003\u0002\u0002\u0002\u0f36\u0f39\u0003\u0002\u0002",
    "\u0002\u0f37\u0f35\u0003\u0002\u0002\u0002\u0f37\u0f38\u0003\u0002\u0002",
    "\u0002\u0f38\u0f3b\u0003\u0002\u0002\u0002\u0f39\u0f37\u0003\u0002\u0002",
    "\u0002\u0f3a\u0f32\u0003\u0002\u0002\u0002\u0f3a\u0f3b\u0003\u0002\u0002",
    "\u0002\u0f3b\u012d\u0003\u0002\u0002\u0002\u0f3c\u0f3d\u0007\u021c\u0002",
    "\u0002\u0f3d\u0f3e\u0007\u0176\u0002\u0002\u0f3e\u012f\u0003\u0002\u0002",
    "\u0002\u0f3f\u0f40\u0007\u0222\u0002\u0002\u0f40\u0f41\u0007\u0176\u0002",
    "\u0002\u0f41\u0131\u0003\u0002\u0002\u0002\u0f42\u0f43\u0005\u0134\u009b",
    "\u0002\u0f43\u0f44\u0007\u03f5\u0002\u0002\u0f44\u0f45\u0007\u040d\u0002",
    "\u0002\u0f45\u0f60\u0003\u0002\u0002\u0002\u0f46\u0f47\u0005\u0136\u009c",
    "\u0002\u0f47\u0f48\u0007\u03f5\u0002\u0002\u0f48\u0f49\u0005\u0212\u010a",
    "\u0002\u0f49\u0f60\u0003\u0002\u0002\u0002\u0f4a\u0f4b\u0005\u0138\u009d",
    "\u0002\u0f4b\u0f4c\u0007\u03f5\u0002\u0002\u0f4c\u0f4d\t\u0018\u0002",
    "\u0002\u0f4d\u0f60\u0003\u0002\u0002\u0002\u0f4e\u0f4f\u0007\u019b\u0002",
    "\u0002\u0f4f\u0f50\u0007\u03f5\u0002\u0002\u0f50\u0f60\u0007\u0410\u0002",
    "\u0002\u0f51\u0f52\u0007\u017d\u0002\u0002\u0f52\u0f53\u0007\u03f5\u0002",
    "\u0002\u0f53\u0f5c\u0007\u03fe\u0002\u0002\u0f54\u0f59\u0005\u020c\u0107",
    "\u0002\u0f55\u0f56\u0007\u0400\u0002\u0002\u0f56\u0f58\u0005\u020c\u0107",
    "\u0002\u0f57\u0f55\u0003\u0002\u0002\u0002\u0f58\u0f5b\u0003\u0002\u0002",
    "\u0002\u0f59\u0f57\u0003\u0002\u0002\u0002\u0f59\u0f5a\u0003\u0002\u0002",
    "\u0002\u0f5a\u0f5d\u0003\u0002\u0002\u0002\u0f5b\u0f59\u0003\u0002\u0002",
    "\u0002\u0f5c\u0f54\u0003\u0002\u0002\u0002\u0f5c\u0f5d\u0003\u0002\u0002",
    "\u0002\u0f5d\u0f5e\u0003\u0002\u0002\u0002\u0f5e\u0f60\u0007\u03ff\u0002",
    "\u0002\u0f5f\u0f42\u0003\u0002\u0002\u0002\u0f5f\u0f46\u0003\u0002\u0002",
    "\u0002\u0f5f\u0f4a\u0003\u0002\u0002\u0002\u0f5f\u0f4e\u0003\u0002\u0002",
    "\u0002\u0f5f\u0f51\u0003\u0002\u0002\u0002\u0f60\u0133\u0003\u0002\u0002",
    "\u0002\u0f61\u0f62\t4\u0002\u0002\u0f62\u0135\u0003\u0002\u0002\u0002",
    "\u0f63\u0f64\t5\u0002\u0002\u0f64\u0137\u0003\u0002\u0002\u0002\u0f65",
    "\u0f66\t6\u0002\u0002\u0f66\u0139\u0003\u0002\u0002\u0002\u0f67\u0f68",
    "\u0007<\u0002\u0002\u0f68\u0f69\u0007\u0127\u0002\u0002\u0f69\u0f6a",
    "\u0007\u040d\u0002\u0002\u0f6a\u013b\u0003\u0002\u0002\u0002\u0f6b\u0f6c",
    "\u0007\u01f1\u0002\u0002\u0f6c\u0f6d\u0007\u03f5\u0002\u0002\u0f6d\u0f6e",
    "\u0007\u03fe\u0002\u0002\u0f6e\u0f6f\u0005\u022c\u0117\u0002\u0f6f\u0f70",
    "\u0007\u03ff\u0002\u0002\u0f70\u0f9d\u0003\u0002\u0002\u0002\u0f71\u0f72",
    "\u0007\u01f3\u0002\u0002\u0f72\u0f73\u0007\u03f5\u0002\u0002\u0f73\u0f74",
    "\u0007\u03fe\u0002\u0002\u0f74\u0f75\u0005\u022c\u0117\u0002\u0f75\u0f76",
    "\u0007\u03ff\u0002\u0002\u0f76\u0f9d\u0003\u0002\u0002\u0002\u0f77\u0f78",
    "\u0007\u01f2\u0002\u0002\u0f78\u0f79\u0007\u03f5\u0002\u0002\u0f79\u0f7a",
    "\u0007\u03fe\u0002\u0002\u0f7a\u0f7b\u0005\u022e\u0118\u0002\u0f7b\u0f7c",
    "\u0007\u03ff\u0002\u0002\u0f7c\u0f9d\u0003\u0002\u0002\u0002\u0f7d\u0f7e",
    "\u0007\u01f4\u0002\u0002\u0f7e\u0f7f\u0007\u03f5\u0002\u0002\u0f7f\u0f80",
    "\u0007\u03fe\u0002\u0002\u0f80\u0f81\u0005\u022e\u0118\u0002\u0f81\u0f82",
    "\u0007\u03ff\u0002\u0002\u0f82\u0f9d\u0003\u0002\u0002\u0002\u0f83\u0f84",
    "\u0007\u01f6\u0002\u0002\u0f84\u0f85\u0007\u03f5\u0002\u0002\u0f85\u0f86",
    "\u0007\u03fe\u0002\u0002\u0f86\u0f87\u0005\u0238\u011d\u0002\u0f87\u0f88",
    "\u0007\u03ff\u0002\u0002\u0f88\u0f9d\u0003\u0002\u0002\u0002\u0f89\u0f8a",
    "\u0007\u01f7\u0002\u0002\u0f8a\u0f8b\u0007\u03f5\u0002\u0002\u0f8b\u0f8c",
    "\u0007\u03fe\u0002\u0002\u0f8c\u0f8d\u0005\u0238\u011d\u0002\u0f8d\u0f8e",
    "\u0007\u03ff\u0002\u0002\u0f8e\u0f9d\u0003\u0002\u0002\u0002\u0f8f\u0f90",
    "\u0007\u01f5\u0002\u0002\u0f90\u0f91\u0007\u03f5\u0002\u0002\u0f91\u0f92",
    "\u0007\u03fe\u0002\u0002\u0f92\u0f97\u0005\u013e\u00a0\u0002\u0f93\u0f94",
    "\u0007\u0400\u0002\u0002\u0f94\u0f96\u0005\u013e\u00a0\u0002\u0f95\u0f93",
    "\u0003\u0002\u0002\u0002\u0f96\u0f99\u0003\u0002\u0002\u0002\u0f97\u0f95",
    "\u0003\u0002\u0002\u0002\u0f97\u0f98\u0003\u0002\u0002\u0002\u0f98\u0f9a",
    "\u0003\u0002\u0002\u0002\u0f99\u0f97\u0003\u0002\u0002\u0002\u0f9a\u0f9b",
    "\u0007\u03ff\u0002\u0002\u0f9b\u0f9d\u0003\u0002\u0002\u0002\u0f9c\u0f6b",
    "\u0003\u0002\u0002\u0002\u0f9c\u0f71\u0003\u0002\u0002\u0002\u0f9c\u0f77",
    "\u0003\u0002\u0002\u0002\u0f9c\u0f7d\u0003\u0002\u0002\u0002\u0f9c\u0f83",
    "\u0003\u0002\u0002\u0002\u0f9c\u0f89\u0003\u0002\u0002\u0002\u0f9c\u0f8f",
    "\u0003\u0002\u0002\u0002\u0f9d\u013d\u0003\u0002\u0002\u0002\u0f9e\u0f9f",
    "\u0007\u03fe\u0002\u0002\u0f9f\u0fa0\u0005\u01f4\u00fb\u0002\u0fa0\u0fa1",
    "\u0007\u0400\u0002\u0002\u0fa1\u0fa2\u0005\u01f4\u00fb\u0002\u0fa2\u0fa3",
    "\u0007\u03ff\u0002\u0002\u0fa3\u013f\u0003\u0002\u0002\u0002\u0fa4\u0fa5",
    "\t7\u0002\u0002\u0fa5\u0141\u0003\u0002\u0002\u0002\u0fa6\u0fa7\t8\u0002",
    "\u0002\u0fa7\u0fa8\u0007\u03f5\u0002\u0002\u0fa8\u0fb9\u0005\u0146\u00a4",
    "\u0002\u0fa9\u0faa\u0007\u019d\u0002\u0002\u0faa\u0fab\u0007\u03f5\u0002",
    "\u0002\u0fab\u0fac\u0007\u040d\u0002\u0002\u0fac\u0fad\u0007\u0400\u0002",
    "\u0002\u0fad\u0fae\u0007\u019e\u0002\u0002\u0fae\u0faf\u0007\u03f5\u0002",
    "\u0002\u0faf\u0fb9\u0005\u0212\u010a\u0002\u0fb0\u0fb1\u0007\u01eb\u0002",
    "\u0002\u0fb1\u0fb2\u0007\u03f5\u0002\u0002\u0fb2\u0fb3\u0007\u040d\u0002",
    "\u0002\u0fb3\u0fb4\u0007\u0400\u0002\u0002\u0fb4\u0fb5\u0007\u01ec\u0002",
    "\u0002\u0fb5\u0fb6\u0007\u03f5\u0002\u0002\u0fb6\u0fb9\u0005\u0212\u010a",
    "\u0002\u0fb7\u0fb9\u0007\u0216\u0002\u0002\u0fb8\u0fa6\u0003\u0002\u0002",
    "\u0002\u0fb8\u0fa9\u0003\u0002\u0002\u0002\u0fb8\u0fb0\u0003\u0002\u0002",
    "\u0002\u0fb8\u0fb7\u0003\u0002\u0002\u0002\u0fb9\u0143\u0003\u0002\u0002",
    "\u0002\u0fba\u0fbb\u0007\u023e\u0002\u0002\u0fbb\u0fbc\u0007\u03f5\u0002",
    "\u0002\u0fbc\u0fc7\u0007\u040d\u0002\u0002\u0fbd\u0fbe\u0007\u01d6\u0002",
    "\u0002\u0fbe\u0fbf\u0007\u03f5\u0002\u0002\u0fbf\u0fc7\u0007\u040d\u0002",
    "\u0002\u0fc0\u0fc1\u0007\u0148\u0002\u0002\u0fc1\u0fc2\u0007\u03f5\u0002",
    "\u0002\u0fc2\u0fc7\u0007\u040d\u0002\u0002\u0fc3\u0fc4\u0007\u01d9\u0002",
    "\u0002\u0fc4\u0fc5\u0007\u03f5\u0002\u0002\u0fc5\u0fc7\u0007\u040d\u0002",
    "\u0002\u0fc6\u0fba\u0003\u0002\u0002\u0002\u0fc6\u0fbd\u0003\u0002\u0002",
    "\u0002\u0fc6\u0fc0\u0003\u0002\u0002\u0002\u0fc6\u0fc3\u0003\u0002\u0002",
    "\u0002\u0fc7\u0145\u0003\u0002\u0002\u0002\u0fc8\u0fcd\u0005\u0204\u0103",
    "\u0002\u0fc9\u0fca\u0007\u0400\u0002\u0002\u0fca\u0fcc\u0005\u0204\u0103",
    "\u0002\u0fcb\u0fc9\u0003\u0002\u0002\u0002\u0fcc\u0fcf\u0003\u0002\u0002",
    "\u0002\u0fcd\u0fcb\u0003\u0002\u0002\u0002\u0fcd\u0fce\u0003\u0002\u0002",
    "\u0002\u0fce\u0fd2\u0003\u0002\u0002\u0002\u0fcf\u0fcd\u0003\u0002\u0002",
    "\u0002\u0fd0\u0fd2\u0007\u040d\u0002\u0002\u0fd1\u0fc8\u0003\u0002\u0002",
    "\u0002\u0fd1\u0fd0\u0003\u0002\u0002\u0002\u0fd2\u0147\u0003\u0002\u0002",
    "\u0002\u0fd3\u0fd4\u0007\u024d\u0002\u0002\u0fd4\u0fd5\t9\u0002\u0002",
    "\u0fd5\u0fd7\u0005\u0206\u0104\u0002\u0fd6\u0fd8\t:\u0002\u0002\u0fd7",
    "\u0fd6\u0003\u0002\u0002\u0002\u0fd7\u0fd8\u0003\u0002\u0002\u0002\u0fd8",
    "\u0149\u0003\u0002\u0002\u0002\u0fd9\u0fda\u0007\u024d\u0002\u0002\u0fda",
    "\u0fdb\u0007\u0156\u0002\u0002\u0fdb\u0fe1\u0005\u0206\u0104\u0002\u0fdc",
    "\u0fdf\u0007\u022a\u0002\u0002\u0fdd\u0fde\u0007<\u0002\u0002\u0fde",
    "\u0fe0\u0007\u01b6\u0002\u0002\u0fdf\u0fdd\u0003\u0002\u0002\u0002\u0fdf",
    "\u0fe0\u0003\u0002\u0002\u0002\u0fe0\u0fe2\u0003\u0002\u0002\u0002\u0fe1",
    "\u0fdc\u0003\u0002\u0002\u0002\u0fe1\u0fe2\u0003\u0002\u0002\u0002\u0fe2",
    "\u014b\u0003\u0002\u0002\u0002\u0fe3\u0fe4\u0007\u024d\u0002\u0002\u0fe4",
    "\u0fe5\u0007\u01dd\u0002\u0002\u0fe5\u0fe6\u0005\u0206\u0104\u0002\u0fe6",
    "\u014d\u0003\u0002\u0002\u0002\u0fe7\u0fe8\u0007\u024d\u0002\u0002\u0fe8",
    "\u0fe9\u0007\u0134\u0002\u0002\u0fe9\u0fec\u0005\u0206\u0104\u0002\u0fea",
    "\u0feb\u0007\u01c9\u0002\u0002\u0feb\u0fed\u0007\u01d7\u0002\u0002\u0fec",
    "\u0fea\u0003\u0002\u0002\u0002\u0fec\u0fed\u0003\u0002\u0002\u0002\u0fed",
    "\u014f\u0003\u0002\u0002\u0002\u0fee\u0fef\u0007\u024d\u0002\u0002\u0fef",
    "\u0ff0\u0007\u01fe\u0002\u0002\u0ff0\u0ff1\u0005\u0206\u0104\u0002\u0ff1",
    "\u0151\u0003\u0002\u0002\u0002\u0ff2\u0ff3\u0007\u024d\u0002\u0002\u0ff3",
    "\u0ff6\u0007\u01e7\u0002\u0002\u0ff4\u0ff5\u0007\u001f\u0002\u0002\u0ff5",
    "\u0ff7\u0005\u0206\u0104\u0002\u0ff6\u0ff4\u0003\u0002\u0002\u0002\u0ff6",
    "\u0ff7\u0003\u0002\u0002\u0002\u0ff7\u0153\u0003\u0002\u0002\u0002\u0ff8",
    "\u0ff9\u0007\u01dd\u0002\u0002\u0ff9\u0ffa\u0005\u020c\u0107\u0002\u0ffa",
    "\u0ffd\u0007?\u0002\u0002\u0ffb\u0ffe\u0007\u040d\u0002\u0002\u0ffc",
    "\u0ffe\u0007\u0418\u0002\u0002\u0ffd\u0ffb\u0003\u0002\u0002\u0002\u0ffd",
    "\u0ffc\u0003\u0002\u0002\u0002\u0ffe\u0155\u0003\u0002\u0002\u0002\u0fff",
    "\u1000\u0007\u025e\u0002\u0002\u1000\u1003\u0005\u020c\u0107\u0002\u1001",
    "\u1002\u0007\u00ab\u0002\u0002\u1002\u1004\u0005\u023a\u011e\u0002\u1003",
    "\u1001\u0003\u0002\u0002\u0002\u1003\u1004\u0003\u0002\u0002\u0002\u1004",
    "\u0157\u0003\u0002\u0002\u0002\u1005\u1006\t;\u0002\u0002\u1006\u1007",
    "\u0007\u01dd\u0002\u0002\u1007\u1008\u0005\u020c\u0107\u0002\u1008\u0159",
    "\u0003\u0002\u0002\u0002\u1009\u100c\u0005\u015c\u00af\u0002\u100a\u100c",
    "\u0005\u0006\u0004\u0002\u100b\u1009\u0003\u0002\u0002\u0002\u100b\u100a",
    "\u0003\u0002\u0002\u0002\u100c\u015b\u0003\u0002\u0002\u0002\u100d\u100e",
    "\u0005\u020c\u0107\u0002\u100e\u100f\u0007\u0409\u0002\u0002\u100f\u1011",
    "\u0003\u0002\u0002\u0002\u1010\u100d\u0003\u0002\u0002\u0002\u1010\u1011",
    "\u0003\u0002\u0002\u0002\u1011\u1012\u0003\u0002\u0002\u0002\u1012\u1039",
    "\u0007\u011c\u0002\u0002\u1013\u1014\u0005\u0170\u00b9\u0002\u1014\u1015",
    "\u0007\u0401\u0002\u0002\u1015\u1017\u0003\u0002\u0002\u0002\u1016\u1013",
    "\u0003\u0002\u0002\u0002\u1017\u101a\u0003\u0002\u0002\u0002\u1018\u1016",
    "\u0003\u0002\u0002\u0002\u1018\u1019\u0003\u0002\u0002\u0002\u1019\u1020",
    "\u0003\u0002\u0002\u0002\u101a\u1018\u0003\u0002\u0002\u0002\u101b\u101c",
    "\u0005\u0172\u00ba\u0002\u101c\u101d\u0007\u0401\u0002\u0002\u101d\u101f",
    "\u0003\u0002\u0002\u0002\u101e\u101b\u0003\u0002\u0002\u0002\u101f\u1022",
    "\u0003\u0002\u0002\u0002\u1020\u101e\u0003\u0002\u0002\u0002\u1020\u1021",
    "\u0003\u0002\u0002\u0002\u1021\u1028\u0003\u0002\u0002\u0002\u1022\u1020",
    "\u0003\u0002\u0002\u0002\u1023\u1024\u0005\u0174\u00bb\u0002\u1024\u1025",
    "\u0007\u0401\u0002\u0002\u1025\u1027\u0003\u0002\u0002\u0002\u1026\u1023",
    "\u0003\u0002\u0002\u0002\u1027\u102a\u0003\u0002\u0002\u0002\u1028\u1026",
    "\u0003\u0002\u0002\u0002\u1028\u1029\u0003\u0002\u0002\u0002\u1029\u1030",
    "\u0003\u0002\u0002\u0002\u102a\u1028\u0003\u0002\u0002\u0002\u102b\u102c",
    "\u0005\u0176\u00bc\u0002\u102c\u102d\u0007\u0401\u0002\u0002\u102d\u102f",
    "\u0003\u0002\u0002\u0002\u102e\u102b\u0003\u0002\u0002\u0002\u102f\u1032",
    "\u0003\u0002\u0002\u0002\u1030\u102e\u0003\u0002\u0002\u0002\u1030\u1031",
    "\u0003\u0002\u0002\u0002\u1031\u1036\u0003\u0002\u0002\u0002\u1032\u1030",
    "\u0003\u0002\u0002\u0002\u1033\u1035\u0005\u017a\u00be\u0002\u1034\u1033",
    "\u0003\u0002\u0002\u0002\u1035\u1038\u0003\u0002\u0002\u0002\u1036\u1034",
    "\u0003\u0002\u0002\u0002\u1036\u1037\u0003\u0002\u0002\u0002\u1037\u103a",
    "\u0003\u0002\u0002\u0002\u1038\u1036\u0003\u0002\u0002\u0002\u1039\u1018",
    "\u0003\u0002\u0002\u0002\u1039\u103a\u0003\u0002\u0002\u0002\u103a\u103b",
    "\u0003\u0002\u0002\u0002\u103b\u103d\u0007\u0156\u0002\u0002\u103c\u103e",
    "\u0005\u020c\u0107\u0002\u103d\u103c\u0003\u0002\u0002\u0002\u103d\u103e",
    "\u0003\u0002\u0002\u0002\u103e\u015d\u0003\u0002\u0002\u0002\u103f\u1042",
    "\u0007\u0015\u0002\u0002\u1040\u1043\u0005\u020c\u0107\u0002\u1041\u1043",
    "\u0005\u025a\u012e\u0002\u1042\u1040\u0003\u0002\u0002\u0002\u1042\u1041",
    "\u0003\u0002\u0002\u0002\u1042\u1043\u0003\u0002\u0002\u0002\u1043\u1045",
    "\u0003\u0002\u0002\u0002\u1044\u1046\u0005\u017c\u00bf\u0002\u1045\u1044",
    "\u0003\u0002\u0002\u0002\u1046\u1047\u0003\u0002\u0002\u0002\u1047\u1045",
    "\u0003\u0002\u0002\u0002\u1047\u1048\u0003\u0002\u0002\u0002\u1048\u104f",
    "\u0003\u0002\u0002\u0002\u1049\u104b\u00073\u0002\u0002\u104a\u104c",
    "\u0005\u017a\u00be\u0002\u104b\u104a\u0003\u0002\u0002\u0002\u104c\u104d",
    "\u0003\u0002\u0002\u0002\u104d\u104b\u0003\u0002\u0002\u0002\u104d\u104e",
    "\u0003\u0002\u0002\u0002\u104e\u1050\u0003\u0002\u0002\u0002\u104f\u1049",
    "\u0003\u0002\u0002\u0002\u104f\u1050\u0003\u0002\u0002\u0002\u1050\u1051",
    "\u0003\u0002\u0002\u0002\u1051\u1052\u0007\u0156\u0002\u0002\u1052\u1053",
    "\u0007\u0015\u0002\u0002\u1053\u015f\u0003\u0002\u0002\u0002\u1054\u1055",
    "\u0007G\u0002\u0002\u1055\u1056\u0005\u025a\u012e\u0002\u1056\u1058",
    "\u0007\u009e\u0002\u0002\u1057\u1059\u0005\u017a\u00be\u0002\u1058\u1057",
    "\u0003\u0002\u0002\u0002\u1059\u105a\u0003\u0002\u0002\u0002\u105a\u1058",
    "\u0003\u0002\u0002\u0002\u105a\u105b\u0003\u0002\u0002\u0002\u105b\u105f",
    "\u0003\u0002\u0002\u0002\u105c\u105e\u0005\u017e\u00c0\u0002\u105d\u105c",
    "\u0003\u0002\u0002\u0002\u105e\u1061\u0003\u0002\u0002\u0002\u105f\u105d",
    "\u0003\u0002\u0002\u0002\u105f\u1060\u0003\u0002\u0002\u0002\u1060\u1068",
    "\u0003\u0002\u0002\u0002\u1061\u105f\u0003\u0002\u0002\u0002\u1062\u1064",
    "\u00073\u0002\u0002\u1063\u1065\u0005\u017a\u00be\u0002\u1064\u1063",
    "\u0003\u0002\u0002\u0002\u1065\u1066\u0003\u0002\u0002\u0002\u1066\u1064",
    "\u0003\u0002\u0002\u0002\u1066\u1067\u0003\u0002\u0002\u0002\u1067\u1069",
    "\u0003\u0002\u0002\u0002\u1068\u1062\u0003\u0002\u0002\u0002\u1068\u1069",
    "\u0003\u0002\u0002\u0002\u1069\u106a\u0003\u0002\u0002\u0002\u106a\u106b",
    "\u0007\u0156\u0002\u0002\u106b\u106c\u0007G\u0002\u0002\u106c\u0161",
    "\u0003\u0002\u0002\u0002\u106d\u106e\u0007R\u0002\u0002\u106e\u106f",
    "\u0005\u020c\u0107\u0002\u106f\u0163\u0003\u0002\u0002\u0002\u1070\u1071",
    "\u0007X\u0002\u0002\u1071\u1072\u0005\u020c\u0107\u0002\u1072\u0165",
    "\u0003\u0002\u0002\u0002\u1073\u1074\u0005\u020c\u0107\u0002\u1074\u1075",
    "\u0007\u0409\u0002\u0002\u1075\u1077\u0003\u0002\u0002\u0002\u1076\u1073",
    "\u0003\u0002\u0002\u0002\u1076\u1077\u0003\u0002\u0002\u0002\u1077\u1078",
    "\u0003\u0002\u0002\u0002\u1078\u107a\u0007`\u0002\u0002\u1079\u107b",
    "\u0005\u017a\u00be\u0002\u107a\u1079\u0003\u0002\u0002\u0002\u107b\u107c",
    "\u0003\u0002\u0002\u0002\u107c\u107a\u0003\u0002\u0002\u0002\u107c\u107d",
    "\u0003\u0002\u0002\u0002\u107d\u107e\u0003\u0002\u0002\u0002\u107e\u107f",
    "\u0007\u0156\u0002\u0002\u107f\u1081\u0007`\u0002\u0002\u1080\u1082",
    "\u0005\u020c\u0107\u0002\u1081\u1080\u0003\u0002\u0002\u0002\u1081\u1082",
    "\u0003\u0002\u0002\u0002\u1082\u0167\u0003\u0002\u0002\u0002\u1083\u1084",
    "\u0005\u020c\u0107\u0002\u1084\u1085\u0007\u0409\u0002\u0002\u1085\u1087",
    "\u0003\u0002\u0002\u0002\u1086\u1083\u0003\u0002\u0002\u0002\u1086\u1087",
    "\u0003\u0002\u0002\u0002\u1087\u1088\u0003\u0002\u0002\u0002\u1088\u108a",
    "\u0007\u0080\u0002\u0002\u1089\u108b\u0005\u017a\u00be\u0002\u108a\u1089",
    "\u0003\u0002\u0002\u0002\u108b\u108c\u0003\u0002\u0002\u0002\u108c\u108a",
    "\u0003\u0002\u0002\u0002\u108c\u108d\u0003\u0002\u0002\u0002\u108d\u108e",
    "\u0003\u0002\u0002\u0002\u108e\u108f\u0007\u023c\u0002\u0002\u108f\u1090",
    "\u0005\u025a\u012e\u0002\u1090\u1091\u0007\u0156\u0002\u0002\u1091\u1093",
    "\u0007\u0080\u0002\u0002\u1092\u1094\u0005\u020c\u0107\u0002\u1093\u1092",
    "\u0003\u0002\u0002\u0002\u1093\u1094\u0003\u0002\u0002\u0002\u1094\u0169",
    "\u0003\u0002\u0002\u0002\u1095\u1096\u0007\u0085\u0002\u0002\u1096\u1097",
    "\u0005\u025a\u012e\u0002\u1097\u016b\u0003\u0002\u0002\u0002\u1098\u1099",
    "\u0005\u020c\u0107\u0002\u1099\u109a\u0007\u0409\u0002\u0002\u109a\u109c",
    "\u0003\u0002\u0002\u0002\u109b\u1098\u0003\u0002\u0002\u0002\u109b\u109c",
    "\u0003\u0002\u0002\u0002\u109c\u109d\u0003\u0002\u0002\u0002\u109d\u109e",
    "\u0007\u00af\u0002\u0002\u109e\u109f\u0005\u025a\u012e\u0002\u109f\u10a1",
    "\u0007\u0150\u0002\u0002\u10a0\u10a2\u0005\u017a\u00be\u0002\u10a1\u10a0",
    "\u0003\u0002\u0002\u0002\u10a2\u10a3\u0003\u0002\u0002\u0002\u10a3\u10a1",
    "\u0003\u0002\u0002\u0002\u10a3\u10a4\u0003\u0002\u0002\u0002\u10a4\u10a5",
    "\u0003\u0002\u0002\u0002\u10a5\u10a6\u0007\u0156\u0002\u0002\u10a6\u10a8",
    "\u0007\u00af\u0002\u0002\u10a7\u10a9\u0005\u020c\u0107\u0002\u10a8\u10a7",
    "\u0003\u0002\u0002\u0002\u10a8\u10a9\u0003\u0002\u0002\u0002\u10a9\u016d",
    "\u0003\u0002\u0002\u0002\u10aa\u10ab\u0007\u012d\u0002\u0002\u10ab\u10ba",
    "\u0005\u020c\u0107\u0002\u10ac\u10b1\u0007;\u0002\u0002\u10ad\u10af",
    "\u0007\u01c1\u0002\u0002\u10ae\u10ad\u0003\u0002\u0002\u0002\u10ae\u10af",
    "\u0003\u0002\u0002\u0002\u10af\u10b0\u0003\u0002\u0002\u0002\u10b0\u10b2",
    "\u0007?\u0002\u0002\u10b1\u10ae\u0003\u0002\u0002\u0002\u10b1\u10b2",
    "\u0003\u0002\u0002\u0002\u10b2\u10b3\u0003\u0002\u0002\u0002\u10b3\u10b4",
    "\u0005\u020c\u0107\u0002\u10b4\u10b5\u0007P\u0002\u0002\u10b5\u10b6",
    "\u0005\u022c\u0117\u0002\u10b6\u10ba\u0003\u0002\u0002\u0002\u10b7\u10b8",
    "\u0007\u01cc\u0002\u0002\u10b8\u10ba\u0005\u020c\u0107\u0002\u10b9\u10aa",
    "\u0003\u0002\u0002\u0002\u10b9\u10ac\u0003\u0002\u0002\u0002\u10b9\u10b7",
    "\u0003\u0002\u0002\u0002\u10ba\u016f\u0003\u0002\u0002\u0002\u10bb\u10bc",
    "\u0007\'\u0002\u0002\u10bc\u10bd\u0005\u022c\u0117\u0002\u10bd\u10c0",
    "\u0005\u0220\u0111\u0002\u10be\u10bf\u0007(\u0002\u0002\u10bf\u10c1",
    "\u0005\u023c\u011f\u0002\u10c0\u10be\u0003\u0002\u0002\u0002\u10c0\u10c1",
    "\u0003\u0002\u0002\u0002\u10c1\u0171\u0003\u0002\u0002\u0002\u10c2\u10c3",
    "\u0007\'\u0002\u0002\u10c3\u10c4\u0005\u020c\u0107\u0002\u10c4\u10c5",
    "\u0007\u001c\u0002\u0002\u10c5\u10cc\u0007<\u0002\u0002\u10c6\u10cd",
    "\u0005\u0212\u010a\u0002\u10c7\u10c9\u0007\u0093\u0002\u0002\u10c8\u10ca",
    "\u0007\u0242\u0002\u0002\u10c9\u10c8\u0003\u0002\u0002\u0002\u10c9\u10ca",
    "\u0003\u0002\u0002\u0002\u10ca\u10cb\u0003\u0002\u0002\u0002\u10cb\u10cd",
    "\u0007\u040d\u0002\u0002\u10cc\u10c6\u0003\u0002\u0002\u0002\u10cc\u10c7",
    "\u0003\u0002\u0002\u0002\u10cd\u0173\u0003\u0002\u0002\u0002\u10ce\u10cf",
    "\u0007\'\u0002\u0002\u10cf\u10d0\u0005\u020c\u0107\u0002\u10d0\u10d1",
    "\u0007$\u0002\u0002\u10d1\u10d2\u0007<\u0002\u0002\u10d2\u10d3\u0005",
    "\u00b4[\u0002\u10d3\u0175\u0003\u0002\u0002\u0002\u10d4\u10d5\u0007",
    "\'\u0002\u0002\u10d5\u10d6\t<\u0002\u0002\u10d6\u10d7\u0007\u0177\u0002",
    "\u0002\u10d7\u10d8\u0007<\u0002\u0002\u10d8\u10dd\u0005\u0178\u00bd",
    "\u0002\u10d9\u10da\u0007\u0400\u0002\u0002\u10da\u10dc\u0005\u0178\u00bd",
    "\u0002\u10db\u10d9\u0003\u0002\u0002\u0002\u10dc\u10df\u0003\u0002\u0002",
    "\u0002\u10dd\u10db\u0003\u0002\u0002\u0002\u10dd\u10de\u0003\u0002\u0002",
    "\u0002\u10de\u10e0\u0003\u0002\u0002\u0002\u10df\u10dd\u0003\u0002\u0002",
    "\u0002\u10e0\u10e1\u0005\u015a\u00ae\u0002\u10e1\u0177\u0003\u0002\u0002",
    "\u0002\u10e2\u10ee\u0005\u0212\u010a\u0002\u10e3\u10e5\u0007\u0093\u0002",
    "\u0002\u10e4\u10e6\u0007\u0242\u0002\u0002\u10e5\u10e4\u0003\u0002\u0002",
    "\u0002\u10e5\u10e6\u0003\u0002\u0002\u0002\u10e6\u10e7\u0003\u0002\u0002",
    "\u0002\u10e7\u10ee\u0007\u040d\u0002\u0002\u10e8\u10ee\u0005\u020c\u0107",
    "\u0002\u10e9\u10ee\u0007\u0094\u0002\u0002\u10ea\u10eb\u0007h\u0002",
    "\u0002\u10eb\u10ee\u0007\u0170\u0002\u0002\u10ec\u10ee\u0007\u0092\u0002",
    "\u0002\u10ed\u10e2\u0003\u0002\u0002\u0002\u10ed\u10e3\u0003\u0002\u0002",
    "\u0002\u10ed\u10e8\u0003\u0002\u0002\u0002\u10ed\u10e9\u0003\u0002\u0002",
    "\u0002\u10ed\u10ea\u0003\u0002\u0002\u0002\u10ed\u10ec\u0003\u0002\u0002",
    "\u0002\u10ee\u0179\u0003\u0002\u0002\u0002\u10ef\u10f2\u0005\u0014\u000b",
    "\u0002\u10f0\u10f2\u0005\u0006\u0004\u0002\u10f1\u10ef\u0003\u0002\u0002",
    "\u0002\u10f1\u10f0\u0003\u0002\u0002\u0002\u10f2\u10f3\u0003\u0002\u0002",
    "\u0002\u10f3\u10f4\u0007\u0401\u0002\u0002\u10f4\u017b\u0003\u0002\u0002",
    "\u0002\u10f5\u10f8\u0007\u00ad\u0002\u0002\u10f6\u10f9\u0005\u021e\u0110",
    "\u0002\u10f7\u10f9\u0005\u025a\u012e\u0002\u10f8\u10f6\u0003\u0002\u0002",
    "\u0002\u10f8\u10f7\u0003\u0002\u0002\u0002\u10f9\u10fa\u0003\u0002\u0002",
    "\u0002\u10fa\u10fc\u0007\u009e\u0002\u0002\u10fb\u10fd\u0005\u017a\u00be",
    "\u0002\u10fc\u10fb\u0003\u0002\u0002\u0002\u10fd\u10fe\u0003\u0002\u0002",
    "\u0002\u10fe\u10fc\u0003\u0002\u0002\u0002\u10fe\u10ff\u0003\u0002\u0002",
    "\u0002\u10ff\u017d\u0003\u0002\u0002\u0002\u1100\u1101\u00074\u0002",
    "\u0002\u1101\u1102\u0005\u025a\u012e\u0002\u1102\u1104\u0007\u009e\u0002",
    "\u0002\u1103\u1105\u0005\u017a\u00be\u0002\u1104\u1103\u0003\u0002\u0002",
    "\u0002\u1105\u1106\u0003\u0002\u0002\u0002\u1106\u1104\u0003\u0002\u0002",
    "\u0002\u1106\u1107\u0003\u0002\u0002\u0002\u1107\u017f\u0003\u0002\u0002",
    "\u0002\u1108\u1109\u0007\t\u0002\u0002\u1109\u110a\u0007\u023e\u0002",
    "\u0002\u110a\u110f\u0005\u0192\u00ca\u0002\u110b\u110c\u0007\u0400\u0002",
    "\u0002\u110c\u110e\u0005\u0192\u00ca\u0002\u110d\u110b\u0003\u0002\u0002",
    "\u0002\u110e\u1111\u0003\u0002\u0002\u0002\u110f\u110d\u0003\u0002\u0002",
    "\u0002\u110f\u1110\u0003\u0002\u0002\u0002\u1110\u113f\u0003\u0002\u0002",
    "\u0002\u1111\u110f\u0003\u0002\u0002\u0002\u1112\u1113\u0007\t\u0002",
    "\u0002\u1113\u1115\u0007\u023e\u0002\u0002\u1114\u1116\u0005\u0242\u0122",
    "\u0002\u1115\u1114\u0003\u0002\u0002\u0002\u1115\u1116\u0003\u0002\u0002",
    "\u0002\u1116\u1117\u0003\u0002\u0002\u0002\u1117\u111c\u0005\u0194\u00cb",
    "\u0002\u1118\u1119\u0007\u0400\u0002\u0002\u1119\u111b\u0005\u0194\u00cb",
    "\u0002\u111a\u1118\u0003\u0002\u0002\u0002\u111b\u111e\u0003\u0002\u0002",
    "\u0002\u111c\u111a\u0003\u0002\u0002\u0002\u111c\u111d\u0003\u0002\u0002",
    "\u0002\u111d\u112d\u0003\u0002\u0002\u0002\u111e\u111c\u0003\u0002\u0002",
    "\u0002\u111f\u112b\u0007\u0082\u0002\u0002\u1120\u112c\u0007\u01c4\u0002",
    "\u0002\u1121\u1128\u0005\u0196\u00cc\u0002\u1122\u1124\u0007\f\u0002",
    "\u0002\u1123\u1122\u0003\u0002\u0002\u0002\u1123\u1124\u0003\u0002\u0002",
    "\u0002\u1124\u1125\u0003\u0002\u0002\u0002\u1125\u1127\u0005\u0196\u00cc",
    "\u0002\u1126\u1123\u0003\u0002\u0002\u0002\u1127\u112a\u0003\u0002\u0002",
    "\u0002\u1128\u1126\u0003\u0002\u0002\u0002\u1128\u1129\u0003\u0002\u0002",
    "\u0002\u1129\u112c\u0003\u0002\u0002\u0002\u112a\u1128\u0003\u0002\u0002",
    "\u0002\u112b\u1120\u0003\u0002\u0002\u0002\u112b\u1121\u0003\u0002\u0002",
    "\u0002\u112c\u112e\u0003\u0002\u0002\u0002\u112d\u111f\u0003\u0002\u0002",
    "\u0002\u112d\u112e\u0003\u0002\u0002\u0002\u112e\u1135\u0003\u0002\u0002",
    "\u0002\u112f\u1131\u0007\u00b0\u0002\u0002\u1130\u1132\u0005\u0198\u00cd",
    "\u0002\u1131\u1130\u0003\u0002\u0002\u0002\u1132\u1133\u0003\u0002\u0002",
    "\u0002\u1133\u1131\u0003\u0002\u0002\u0002\u1133\u1134\u0003\u0002\u0002",
    "\u0002\u1134\u1136\u0003\u0002\u0002\u0002\u1135\u112f\u0003\u0002\u0002",
    "\u0002\u1135\u1136\u0003\u0002\u0002\u0002\u1136\u113b\u0003\u0002\u0002",
    "\u0002\u1137\u113a\u0005\u019a\u00ce\u0002\u1138\u113a\u0005\u019c\u00cf",
    "\u0002\u1139\u1137\u0003\u0002\u0002\u0002\u1139\u1138\u0003\u0002\u0002",
    "\u0002\u113a\u113d\u0003\u0002\u0002\u0002\u113b\u1139\u0003\u0002\u0002",
    "\u0002\u113b\u113c\u0003\u0002\u0002\u0002\u113c\u113f\u0003\u0002\u0002",
    "\u0002\u113d\u113b\u0003\u0002\u0002\u0002\u113e\u1108\u0003\u0002\u0002",
    "\u0002\u113e\u1112\u0003\u0002\u0002\u0002\u113f\u0181\u0003\u0002\u0002",
    "\u0002\u1140\u1141\u0007 \u0002\u0002\u1141\u1142\u0007\u023e\u0002",
    "\u0002\u1142\u1147\u0005\u0194\u00cb\u0002\u1143\u1144\u0007\u0400\u0002",
    "\u0002\u1144\u1146\u0005\u0194\u00cb\u0002\u1145\u1143\u0003\u0002\u0002",
    "\u0002\u1146\u1149\u0003\u0002\u0002\u0002\u1147\u1145\u0003\u0002\u0002",
    "\u0002\u1147\u1148\u0003\u0002\u0002\u0002\u1148\u1177\u0003\u0002\u0002",
    "\u0002\u1149\u1147\u0003\u0002\u0002\u0002\u114a\u114b\u0007 \u0002",
    "\u0002\u114b\u114d\u0007\u023e\u0002\u0002\u114c\u114e\u0005\u0244\u0123",
    "\u0002\u114d\u114c\u0003\u0002\u0002\u0002\u114d\u114e\u0003\u0002\u0002",
    "\u0002\u114e\u114f\u0003\u0002\u0002\u0002\u114f\u1154\u0005\u0194\u00cb",
    "\u0002\u1150\u1151\u0007\u0400\u0002\u0002\u1151\u1153\u0005\u0194\u00cb",
    "\u0002\u1152\u1150\u0003\u0002\u0002\u0002\u1153\u1156\u0003\u0002\u0002",
    "\u0002\u1154\u1152\u0003\u0002\u0002\u0002\u1154\u1155\u0003\u0002\u0002",
    "\u0002\u1155\u1165\u0003\u0002\u0002\u0002\u1156\u1154\u0003\u0002\u0002",
    "\u0002\u1157\u1163\u0007\u0082\u0002\u0002\u1158\u1164\u0007\u01c4\u0002",
    "\u0002\u1159\u1160\u0005\u0196\u00cc\u0002\u115a\u115c\u0007\f\u0002",
    "\u0002\u115b\u115a\u0003\u0002\u0002\u0002\u115b\u115c\u0003\u0002\u0002",
    "\u0002\u115c\u115d\u0003\u0002\u0002\u0002\u115d\u115f\u0005\u0196\u00cc",
    "\u0002\u115e\u115b\u0003\u0002\u0002\u0002\u115f\u1162\u0003\u0002\u0002",
    "\u0002\u1160\u115e\u0003\u0002\u0002\u0002\u1160\u1161\u0003\u0002\u0002",
    "\u0002\u1161\u1164\u0003\u0002\u0002\u0002\u1162\u1160\u0003\u0002\u0002",
    "\u0002\u1163\u1158\u0003\u0002\u0002\u0002\u1163\u1159\u0003\u0002\u0002",
    "\u0002\u1164\u1166\u0003\u0002\u0002\u0002\u1165\u1157\u0003\u0002\u0002",
    "\u0002\u1165\u1166\u0003\u0002\u0002\u0002\u1166\u116d\u0003\u0002\u0002",
    "\u0002\u1167\u1169\u0007\u00b0\u0002\u0002\u1168\u116a\u0005\u0198\u00cd",
    "\u0002\u1169\u1168\u0003\u0002\u0002\u0002\u116a\u116b\u0003\u0002\u0002",
    "\u0002\u116b\u1169\u0003\u0002\u0002\u0002\u116b\u116c\u0003\u0002\u0002",
    "\u0002\u116c\u116e\u0003\u0002\u0002\u0002\u116d\u1167\u0003\u0002\u0002",
    "\u0002\u116d\u116e\u0003\u0002\u0002\u0002\u116e\u1173\u0003\u0002\u0002",
    "\u0002\u116f\u1172\u0005\u019a\u00ce\u0002\u1170\u1172\u0005\u019c\u00cf",
    "\u0002\u1171\u116f\u0003\u0002\u0002\u0002\u1171\u1170\u0003\u0002\u0002",
    "\u0002\u1172\u1175\u0003\u0002\u0002\u0002\u1173\u1171\u0003\u0002\u0002",
    "\u0002\u1173\u1174\u0003\u0002\u0002\u0002\u1174\u1177\u0003\u0002\u0002",
    "\u0002\u1175\u1173\u0003\u0002\u0002\u0002\u1176\u1140\u0003\u0002\u0002",
    "\u0002\u1176\u114a\u0003\u0002\u0002\u0002\u1177\u0183\u0003\u0002\u0002",
    "\u0002\u1178\u1179\u00071\u0002\u0002\u1179\u117b\u0007\u023e\u0002",
    "\u0002\u117a\u117c\u0005\u0242\u0122\u0002\u117b\u117a\u0003\u0002\u0002",
    "\u0002\u117b\u117c\u0003\u0002\u0002\u0002\u117c\u117d\u0003\u0002\u0002",
    "\u0002\u117d\u1182\u0005\u01fa\u00fe\u0002\u117e\u117f\u0007\u0400\u0002",
    "\u0002\u117f\u1181\u0005\u01fa\u00fe\u0002\u1180\u117e\u0003\u0002\u0002",
    "\u0002\u1181\u1184\u0003\u0002\u0002\u0002\u1182\u1180\u0003\u0002\u0002",
    "\u0002\u1182\u1183\u0003\u0002\u0002\u0002\u1183\u0185\u0003\u0002\u0002",
    "\u0002\u1184\u1182\u0003\u0002\u0002\u0002\u1185\u1186\u0007C\u0002",
    "\u0002\u1186\u118b\u0005\u019e\u00d0\u0002\u1187\u1188\u0007\u0400\u0002",
    "\u0002\u1188\u118a\u0005\u019e\u00d0\u0002\u1189\u1187\u0003\u0002\u0002",
    "\u0002\u118a\u118d\u0003\u0002\u0002\u0002\u118b\u1189\u0003\u0002\u0002",
    "\u0002\u118b\u118c\u0003\u0002\u0002\u0002\u118c\u118e\u0003\u0002\u0002",
    "\u0002\u118d\u118b\u0003\u0002\u0002\u0002\u118e\u1190\u0007l\u0002",
    "\u0002\u118f\u1191\t=\u0002\u0002\u1190\u118f\u0003\u0002\u0002\u0002",
    "\u1190\u1191\u0003\u0002\u0002\u0002\u1191\u1192\u0003\u0002\u0002\u0002",
    "\u1192\u1193\u0005\u01a2\u00d2\u0002\u1193\u1194\u0007\u009f\u0002\u0002",
    "\u1194\u1199\u0005\u0194\u00cb\u0002\u1195\u1196\u0007\u0400\u0002\u0002",
    "\u1196\u1198\u0005\u0194\u00cb\u0002\u1197\u1195\u0003\u0002\u0002\u0002",
    "\u1198\u119b\u0003\u0002\u0002\u0002\u1199\u1197\u0003\u0002\u0002\u0002",
    "\u1199\u119a\u0003\u0002\u0002\u0002\u119a\u11aa\u0003\u0002\u0002\u0002",
    "\u119b\u1199\u0003\u0002\u0002\u0002\u119c\u11a8\u0007\u0082\u0002\u0002",
    "\u119d\u11a9\u0007\u01c4\u0002\u0002\u119e\u11a5\u0005\u0196\u00cc\u0002",
    "\u119f\u11a1\u0007\f\u0002\u0002\u11a0\u119f\u0003\u0002\u0002\u0002",
    "\u11a0\u11a1\u0003\u0002\u0002\u0002\u11a1\u11a2\u0003\u0002\u0002\u0002",
    "\u11a2\u11a4\u0005\u0196\u00cc\u0002\u11a3\u11a0\u0003\u0002\u0002\u0002",
    "\u11a4\u11a7\u0003\u0002\u0002\u0002\u11a5\u11a3\u0003\u0002\u0002\u0002",
    "\u11a5\u11a6\u0003\u0002\u0002\u0002\u11a6\u11a9\u0003\u0002\u0002\u0002",
    "\u11a7\u11a5\u0003\u0002\u0002\u0002\u11a8\u119d\u0003\u0002\u0002\u0002",
    "\u11a8\u119e\u0003\u0002\u0002\u0002\u11a9\u11ab\u0003\u0002\u0002\u0002",
    "\u11aa\u119c\u0003\u0002\u0002\u0002\u11aa\u11ab\u0003\u0002\u0002\u0002",
    "\u11ab\u11b5\u0003\u0002\u0002\u0002\u11ac\u11b2\u0007\u00b0\u0002\u0002",
    "\u11ad\u11ae\u0007C\u0002\u0002\u11ae\u11b1\u0007n\u0002\u0002\u11af",
    "\u11b1\u0005\u0198\u00cd\u0002\u11b0\u11ad\u0003\u0002\u0002\u0002\u11b0",
    "\u11af\u0003\u0002\u0002\u0002\u11b1\u11b4\u0003\u0002\u0002\u0002\u11b2",
    "\u11b0\u0003\u0002\u0002\u0002\u11b2\u11b3\u0003\u0002\u0002\u0002\u11b3",
    "\u11b6\u0003\u0002\u0002\u0002\u11b4\u11b2\u0003\u0002\u0002\u0002\u11b5",
    "\u11ac\u0003\u0002\u0002\u0002\u11b5\u11b6\u0003\u0002\u0002\u0002\u11b6",
    "\u0187\u0003\u0002\u0002\u0002\u11b7\u11b8\u0007C\u0002\u0002\u11b8",
    "\u11b9\u0007\u01e3\u0002\u0002\u11b9\u11ba\u0007l\u0002\u0002\u11ba",
    "\u11bb\u0005\u01fa\u00fe\u0002\u11bb\u11bc\u0007\u009f\u0002\u0002\u11bc",
    "\u11c1\u0005\u01fa\u00fe\u0002\u11bd\u11be\u0007\u0400\u0002\u0002\u11be",
    "\u11c0\u0005\u01fa\u00fe\u0002\u11bf\u11bd\u0003\u0002\u0002\u0002\u11c0",
    "\u11c3\u0003\u0002\u0002\u0002\u11c1\u11bf\u0003\u0002\u0002\u0002\u11c1",
    "\u11c2\u0003\u0002\u0002\u0002\u11c2\u11c7\u0003\u0002\u0002\u0002\u11c3",
    "\u11c1\u0003\u0002\u0002\u0002\u11c4\u11c5\u0007\u00b0\u0002\u0002\u11c5",
    "\u11c6\u0007C\u0002\u0002\u11c6\u11c8\u0007n\u0002\u0002\u11c7\u11c4",
    "\u0003\u0002\u0002\u0002\u11c7\u11c8\u0003\u0002\u0002\u0002\u11c8\u0189",
    "\u0003\u0002\u0002\u0002\u11c9\u11ca\u0007\u007f\u0002\u0002\u11ca\u11cb",
    "\u0007\u023e\u0002\u0002\u11cb\u11d0\u0005\u01a4\u00d3\u0002\u11cc\u11cd",
    "\u0007\u0400\u0002\u0002\u11cd\u11cf\u0005\u01a4\u00d3\u0002\u11ce\u11cc",
    "\u0003\u0002\u0002\u0002\u11cf\u11d2\u0003\u0002\u0002\u0002\u11d0\u11ce",
    "\u0003\u0002\u0002\u0002\u11d0\u11d1\u0003\u0002\u0002\u0002\u11d1\u018b",
    "\u0003\u0002\u0002\u0002\u11d2\u11d0\u0003\u0002\u0002\u0002\u11d3\u11d4",
    "\u0007\u0086\u0002\u0002\u11d4\u11d9\u0005\u019e\u00d0\u0002\u11d5\u11d6",
    "\u0007\u0400\u0002\u0002\u11d6\u11d8\u0005\u019e\u00d0\u0002\u11d7\u11d5",
    "\u0003\u0002\u0002\u0002\u11d8\u11db\u0003\u0002\u0002\u0002\u11d9\u11d7",
    "\u0003\u0002\u0002\u0002\u11d9\u11da\u0003\u0002\u0002\u0002\u11da\u11dc",
    "\u0003\u0002\u0002\u0002\u11db\u11d9\u0003\u0002\u0002\u0002\u11dc\u11de",
    "\u0007l\u0002\u0002\u11dd\u11df\t=\u0002\u0002\u11de\u11dd\u0003\u0002",
    "\u0002\u0002\u11de\u11df\u0003\u0002\u0002\u0002\u11df\u11e0\u0003\u0002",
    "\u0002\u0002\u11e0\u11e1\u0005\u01a2\u00d2\u0002\u11e1\u11e2\u0007?",
    "\u0002\u0002\u11e2\u11e7\u0005\u01fa\u00fe\u0002\u11e3\u11e4\u0007\u0400",
    "\u0002\u0002\u11e4\u11e6\u0005\u01fa\u00fe\u0002\u11e5\u11e3\u0003\u0002",
    "\u0002\u0002\u11e6\u11e9\u0003\u0002\u0002\u0002\u11e7\u11e5\u0003\u0002",
    "\u0002\u0002\u11e7\u11e8\u0003\u0002\u0002\u0002\u11e8\u11fc\u0003\u0002",
    "\u0002\u0002\u11e9\u11e7\u0003\u0002\u0002\u0002\u11ea\u11eb\u0007\u0086",
    "\u0002\u0002\u11eb\u11ed\u0007\b\u0002\u0002\u11ec\u11ee\u0007\u0264",
    "\u0002\u0002\u11ed\u11ec\u0003\u0002\u0002\u0002\u11ed\u11ee\u0003\u0002",
    "\u0002\u0002\u11ee\u11ef\u0003\u0002\u0002\u0002\u11ef\u11f0\u0007\u0400",
    "\u0002\u0002\u11f0\u11f1\u0007C\u0002\u0002\u11f1\u11f2\u0007n\u0002",
    "\u0002\u11f2\u11f3\u0007?\u0002\u0002\u11f3\u11f8\u0005\u01fa\u00fe",
    "\u0002\u11f4\u11f5\u0007\u0400\u0002\u0002\u11f5\u11f7\u0005\u01fa\u00fe",
    "\u0002\u11f6\u11f4\u0003\u0002\u0002\u0002\u11f7\u11fa\u0003\u0002\u0002",
    "\u0002\u11f8\u11f6\u0003\u0002\u0002\u0002\u11f8\u11f9\u0003\u0002\u0002",
    "\u0002\u11f9\u11fc\u0003\u0002\u0002\u0002\u11fa\u11f8\u0003\u0002\u0002",
    "\u0002\u11fb\u11d3\u0003\u0002\u0002\u0002\u11fb\u11ea\u0003\u0002\u0002",
    "\u0002\u11fc\u018d\u0003\u0002\u0002\u0002\u11fd\u11fe\u0007\u0086\u0002",
    "\u0002\u11fe\u11ff\u0007\u01e3\u0002\u0002\u11ff\u1200\u0007l\u0002",
    "\u0002\u1200\u1201\u0005\u01fa\u00fe\u0002\u1201\u1202\u0007?\u0002",
    "\u0002\u1202\u1207\u0005\u01fa\u00fe\u0002\u1203\u1204\u0007\u0400\u0002",
    "\u0002\u1204\u1206\u0005\u01fa\u00fe\u0002\u1205\u1203\u0003\u0002\u0002",
    "\u0002\u1206\u1209\u0003\u0002\u0002\u0002\u1207\u1205\u0003\u0002\u0002",
    "\u0002\u1207\u1208\u0003\u0002\u0002\u0002\u1208\u018f\u0003\u0002\u0002",
    "\u0002\u1209\u1207\u0003\u0002\u0002\u0002\u120a\u120b\u0007\u008c\u0002",
    "\u0002\u120b\u120e\u0007\u01d6\u0002\u0002\u120c\u120d\u0007<\u0002",
    "\u0002\u120d\u120f\u0005\u01fa\u00fe\u0002\u120e\u120c\u0003\u0002\u0002",
    "\u0002\u120e\u120f\u0003\u0002\u0002\u0002\u120f\u1210\u0003\u0002\u0002",
    "\u0002\u1210\u1213\u0007\u03f5\u0002\u0002\u1211\u1214\u0005\u0254\u012b",
    "\u0002\u1212\u1214\u0007\u040d\u0002\u0002\u1213\u1211\u0003\u0002\u0002",
    "\u0002\u1213\u1212\u0003\u0002\u0002\u0002\u1214\u0191\u0003\u0002\u0002",
    "\u0002\u1215\u1216\u0005\u01fa\u00fe\u0002\u1216\u1217\u0005\u019a\u00ce",
    "\u0002\u1217\u0193\u0003\u0002\u0002\u0002\u1218\u1219\u0005\u01fa\u00fe",
    "\u0002\u1219\u121a\u0007\u017c\u0002\u0002\u121a\u121b\u0007\u0012\u0002",
    "\u0002\u121b\u121c\u0007\u01d6\u0002\u0002\u121c\u121d\u0007\u040d\u0002",
    "\u0002\u121d\u1231\u0003\u0002\u0002\u0002\u121e\u121f\u0005\u01fa\u00fe",
    "\u0002\u121f\u1222\u0007\u017c\u0002\u0002\u1220\u1221\u0007\u00b0\u0002",
    "\u0002\u1221\u1223\u0005\u020a\u0106\u0002\u1222\u1220\u0003\u0002\u0002",
    "\u0002\u1222\u1223\u0003\u0002\u0002\u0002\u1223\u1224\u0003\u0002\u0002",
    "\u0002\u1224\u1225\u0007\u0012\u0002\u0002\u1225\u1226\u0007\u040d\u0002",
    "\u0002\u1226\u1231\u0003\u0002\u0002\u0002\u1227\u1228\u0005\u01fa\u00fe",
    "\u0002\u1228\u1229\u0007\u017c\u0002\u0002\u1229\u122a\u0007\u00b0\u0002",
    "\u0002\u122a\u122d\u0005\u020a\u0106\u0002\u122b\u122c\u0007\r\u0002",
    "\u0002\u122c\u122e\u0007\u040d\u0002\u0002\u122d\u122b\u0003\u0002\u0002",
    "\u0002\u122d\u122e\u0003\u0002\u0002\u0002\u122e\u1231\u0003\u0002\u0002",
    "\u0002\u122f\u1231\u0005\u01fa\u00fe\u0002\u1230\u1218\u0003\u0002\u0002",
    "\u0002\u1230\u121e\u0003\u0002\u0002\u0002\u1230\u1227\u0003\u0002\u0002",
    "\u0002\u1230\u122f\u0003\u0002\u0002\u0002\u1231\u0195\u0003\u0002\u0002",
    "\u0002\u1232\u123b\u0007\u0098\u0002\u0002\u1233\u123b\u0007\u024c\u0002",
    "\u0002\u1234\u1235\u0007\u012a\u0002\u0002\u1235\u123b\u0007\u040d\u0002",
    "\u0002\u1236\u1237\u0007\u018b\u0002\u0002\u1237\u123b\u0007\u040d\u0002",
    "\u0002\u1238\u1239\u0007\u0227\u0002\u0002\u1239\u123b\u0007\u040d\u0002",
    "\u0002\u123a\u1232\u0003\u0002\u0002\u0002\u123a\u1233\u0003\u0002\u0002",
    "\u0002\u123a\u1234\u0003\u0002\u0002\u0002\u123a\u1236\u0003\u0002\u0002",
    "\u0002\u123a\u1238\u0003\u0002\u0002\u0002\u123b\u0197\u0003\u0002\u0002",
    "\u0002\u123c\u123d\u0007\u01ad\u0002\u0002\u123d\u1245\u0005\u0212\u010a",
    "\u0002\u123e\u123f\u0007\u01b0\u0002\u0002\u123f\u1245\u0005\u0212\u010a",
    "\u0002\u1240\u1241\u0007\u01ac\u0002\u0002\u1241\u1245\u0005\u0212\u010a",
    "\u0002\u1242\u1243\u0007\u01b1\u0002\u0002\u1243\u1245\u0005\u0212\u010a",
    "\u0002\u1244\u123c\u0003\u0002\u0002\u0002\u1244\u123e\u0003\u0002\u0002",
    "\u0002\u1244\u1240\u0003\u0002\u0002\u0002\u1244\u1242\u0003\u0002\u0002",
    "\u0002\u1245\u0199\u0003\u0002\u0002\u0002\u1246\u1247\u0007\u01d6\u0002",
    "\u0002\u1247\u124e\u0007\u0163\u0002\u0002\u1248\u124f\u0007(\u0002",
    "\u0002\u1249\u124f\u0007\u01c0\u0002\u0002\u124a\u124b\u0007O\u0002",
    "\u0002\u124b\u124c\u0005\u0212\u010a\u0002\u124c\u124d\u0007\u0256\u0002",
    "\u0002\u124d\u124f\u0003\u0002\u0002\u0002\u124e\u1248\u0003\u0002\u0002",
    "\u0002\u124e\u1249\u0003\u0002\u0002\u0002\u124e\u124a\u0003\u0002\u0002",
    "\u0002\u124e\u124f\u0003\u0002\u0002\u0002\u124f\u019b\u0003\u0002\u0002",
    "\u0002\u1250\u1251\u0007\u0110\u0002\u0002\u1251\u1252\t>\u0002\u0002",
    "\u1252\u019d\u0003\u0002\u0002\u0002\u1253\u1258\u0005\u01a0\u00d1\u0002",
    "\u1254\u1255\u0007\u03fe\u0002\u0002\u1255\u1256\u0005\u022c\u0117\u0002",
    "\u1256\u1257\u0007\u03ff\u0002\u0002\u1257\u1259\u0003\u0002\u0002\u0002",
    "\u1258\u1254\u0003\u0002\u0002\u0002\u1258\u1259\u0003\u0002\u0002\u0002",
    "\u1259\u019f\u0003\u0002\u0002\u0002\u125a\u125c\u0007\b\u0002\u0002",
    "\u125b\u125d\u0007\u0264\u0002\u0002\u125c\u125b\u0003\u0002\u0002\u0002",
    "\u125c\u125d\u0003\u0002\u0002\u0002\u125d\u12a2\u0003\u0002\u0002\u0002",
    "\u125e\u1260\u0007\t\u0002\u0002\u125f\u1261\u0007\u025d\u0002\u0002",
    "\u1260\u125f\u0003\u0002\u0002\u0002\u1260\u1261\u0003\u0002\u0002\u0002",
    "\u1261\u12a2\u0003\u0002\u0002\u0002\u1262\u126a\u0007 \u0002\u0002",
    "\u1263\u1264\u0007\u022f\u0002\u0002\u1264\u126b\u0007\u025c\u0002\u0002",
    "\u1265\u126b\u0007\u025d\u0002\u0002\u1266\u126b\u0007\u0244\u0002\u0002",
    "\u1267\u126b\u0007\u023e\u0002\u0002\u1268\u126b\u0007\u022e\u0002\u0002",
    "\u1269\u126b\u0007\u01fd\u0002\u0002\u126a\u1263\u0003\u0002\u0002\u0002",
    "\u126a\u1265\u0003\u0002\u0002\u0002\u126a\u1266\u0003\u0002\u0002\u0002",
    "\u126a\u1267\u0003\u0002\u0002\u0002\u126a\u1268\u0003\u0002\u0002\u0002",
    "\u126a\u1269\u0003\u0002\u0002\u0002\u126a\u126b\u0003\u0002\u0002\u0002",
    "\u126b\u12a2\u0003\u0002\u0002\u0002\u126c\u12a2\u0007*\u0002\u0002",
    "\u126d\u126f\u00071\u0002\u0002\u126e\u1270\u0007\u01fd\u0002\u0002",
    "\u126f\u126e\u0003\u0002\u0002\u0002\u126f\u1270\u0003\u0002\u0002\u0002",
    "\u1270\u12a2\u0003\u0002\u0002\u0002\u1271\u12a2\u0007\u015e\u0002\u0002",
    "\u1272\u12a2\u0007\u025e\u0002\u0002\u1273\u12a2\u0007\u025f\u0002\u0002",
    "\u1274\u1275\u0007C\u0002\u0002\u1275\u12a2\u0007n\u0002\u0002\u1276",
    "\u12a2\u0007J\u0002\u0002\u1277\u12a2\u0007N\u0002\u0002\u1278\u1279",
    "\u0007_\u0002\u0002\u1279\u12a2\u0007\u025c\u0002\u0002\u127a\u12a2",
    "\u0007\u0260\u0002\u0002\u127b\u12a2\u0007\u01e3\u0002\u0002\u127c\u12a2",
    "\u0007|\u0002\u0002\u127d\u12a2\u0007\u0261\u0002\u0002\u127e\u127f",
    "\u0007\u01f8\u0002\u0002\u127f\u12a2\t?\u0002\u0002\u1280\u12a2\u0007",
    "\u008b\u0002\u0002\u1281\u1282\u0007\u008e\u0002\u0002\u1282\u12a2\t",
    "@\u0002\u0002\u1283\u12a2\u0007\u0262\u0002\u0002\u1284\u12a2\u0007",
    "\u0263\u0002\u0002\u1285\u12a2\u0007\u00a1\u0002\u0002\u1286\u12a2\u0007",
    "\u00a8\u0002\u0002\u1287\u12a2\u0007\u00a9\u0002\u0002\u1288\u12a2\u0007",
    "\u0266\u0002\u0002\u1289\u12a2\u0007\u0267\u0002\u0002\u128a\u12a2\u0007",
    "\u0268\u0002\u0002\u128b\u12a2\u0007\u0269\u0002\u0002\u128c\u12a2\u0007",
    "\u026a\u0002\u0002\u128d\u12a2\u0007\u026b\u0002\u0002\u128e\u12a2\u0007",
    "\u026c\u0002\u0002\u128f\u12a2\u0007\u026d\u0002\u0002\u1290\u12a2\u0007",
    "\u026e\u0002\u0002\u1291\u12a2\u0007\u026f\u0002\u0002\u1292\u12a2\u0007",
    "\u0270\u0002\u0002\u1293\u12a2\u0007\u0271\u0002\u0002\u1294\u12a2\u0007",
    "\u0272\u0002\u0002\u1295\u12a2\u0007\u0273\u0002\u0002\u1296\u12a2\u0007",
    "\u0274\u0002\u0002\u1297\u12a2\u0007\u0275\u0002\u0002\u1298\u12a2\u0007",
    "\u0276\u0002\u0002\u1299\u12a2\u0007\u0277\u0002\u0002\u129a\u12a2\u0007",
    "\u0278\u0002\u0002\u129b\u12a2\u0007\u0279\u0002\u0002\u129c\u12a2\u0007",
    "\u027a\u0002\u0002\u129d\u12a2\u0007\u027b\u0002\u0002\u129e\u12a2\u0007",
    "\u027c\u0002\u0002\u129f\u12a2\u0007\u027d\u0002\u0002\u12a0\u12a2\u0007",
    "\u027e\u0002\u0002\u12a1\u125a\u0003\u0002\u0002\u0002\u12a1\u125e\u0003",
    "\u0002\u0002\u0002\u12a1\u1262\u0003\u0002\u0002\u0002\u12a1\u126c\u0003",
    "\u0002\u0002\u0002\u12a1\u126d\u0003\u0002\u0002\u0002\u12a1\u1271\u0003",
    "\u0002\u0002\u0002\u12a1\u1272\u0003\u0002\u0002\u0002\u12a1\u1273\u0003",
    "\u0002\u0002\u0002\u12a1\u1274\u0003\u0002\u0002\u0002\u12a1\u1276\u0003",
    "\u0002\u0002\u0002\u12a1\u1277\u0003\u0002\u0002\u0002\u12a1\u1278\u0003",
    "\u0002\u0002\u0002\u12a1\u127a\u0003\u0002\u0002\u0002\u12a1\u127b\u0003",
    "\u0002\u0002\u0002\u12a1\u127c\u0003\u0002\u0002\u0002\u12a1\u127d\u0003",
    "\u0002\u0002\u0002\u12a1\u127e\u0003\u0002\u0002\u0002\u12a1\u1280\u0003",
    "\u0002\u0002\u0002\u12a1\u1281\u0003\u0002\u0002\u0002\u12a1\u1283\u0003",
    "\u0002\u0002\u0002\u12a1\u1284\u0003\u0002\u0002\u0002\u12a1\u1285\u0003",
    "\u0002\u0002\u0002\u12a1\u1286\u0003\u0002\u0002\u0002\u12a1\u1287\u0003",
    "\u0002\u0002\u0002\u12a1\u1288\u0003\u0002\u0002\u0002\u12a1\u1289\u0003",
    "\u0002\u0002\u0002\u12a1\u128a\u0003\u0002\u0002\u0002\u12a1\u128b\u0003",
    "\u0002\u0002\u0002\u12a1\u128c\u0003\u0002\u0002\u0002\u12a1\u128d\u0003",
    "\u0002\u0002\u0002\u12a1\u128e\u0003\u0002\u0002\u0002\u12a1\u128f\u0003",
    "\u0002\u0002\u0002\u12a1\u1290\u0003\u0002\u0002\u0002\u12a1\u1291\u0003",
    "\u0002\u0002\u0002\u12a1\u1292\u0003\u0002\u0002\u0002\u12a1\u1293\u0003",
    "\u0002\u0002\u0002\u12a1\u1294\u0003\u0002\u0002\u0002\u12a1\u1295\u0003",
    "\u0002\u0002\u0002\u12a1\u1296\u0003\u0002\u0002\u0002\u12a1\u1297\u0003",
    "\u0002\u0002\u0002\u12a1\u1298\u0003\u0002\u0002\u0002\u12a1\u1299\u0003",
    "\u0002\u0002\u0002\u12a1\u129a\u0003\u0002\u0002\u0002\u12a1\u129b\u0003",
    "\u0002\u0002\u0002\u12a1\u129c\u0003\u0002\u0002\u0002\u12a1\u129d\u0003",
    "\u0002\u0002\u0002\u12a1\u129e\u0003\u0002\u0002\u0002\u12a1\u129f\u0003",
    "\u0002\u0002\u0002\u12a1\u12a0\u0003\u0002\u0002\u0002\u12a2\u01a1\u0003",
    "\u0002\u0002\u0002\u12a3\u12b4\u0007\u03ed\u0002\u0002\u12a4\u12a5\u0007",
    "\u03ed\u0002\u0002\u12a5\u12a6\u0007\u03fd\u0002\u0002\u12a6\u12b4\u0007",
    "\u03ed\u0002\u0002\u12a7\u12a8\u0005\u020c\u0107\u0002\u12a8\u12a9\u0007",
    "\u03fd\u0002\u0002\u12a9\u12aa\u0007\u03ed\u0002\u0002\u12aa\u12b4\u0003",
    "\u0002\u0002\u0002\u12ab\u12ac\u0005\u020c\u0107\u0002\u12ac\u12ad\u0007",
    "\u03fd\u0002\u0002\u12ad\u12ae\u0005\u020c\u0107\u0002\u12ae\u12b4\u0003",
    "\u0002\u0002\u0002\u12af\u12b0\u0005\u020c\u0107\u0002\u12b0\u12b1\u0005",
    "\u0210\u0109\u0002\u12b1\u12b4\u0003\u0002\u0002\u0002\u12b2\u12b4\u0005",
    "\u020c\u0107\u0002\u12b3\u12a3\u0003\u0002\u0002\u0002\u12b3\u12a4\u0003",
    "\u0002\u0002\u0002\u12b3\u12a7\u0003\u0002\u0002\u0002\u12b3\u12ab\u0003",
    "\u0002\u0002\u0002\u12b3\u12af\u0003\u0002\u0002\u0002\u12b3\u12b2\u0003",
    "\u0002\u0002\u0002\u12b4\u01a3\u0003\u0002\u0002\u0002\u12b5\u12b6\u0005",
    "\u01fa\u00fe\u0002\u12b6\u12b7\u0007\u009f\u0002\u0002\u12b7\u12b8\u0005",
    "\u01fa\u00fe\u0002\u12b8\u01a5\u0003\u0002\u0002\u0002\u12b9\u12bb\u0007",
    "\u000b\u0002\u0002\u12ba\u12bc\tA\u0002\u0002\u12bb\u12ba\u0003\u0002",
    "\u0002\u0002\u12bb\u12bc\u0003\u0002\u0002\u0002\u12bc\u12bd\u0003\u0002",
    "\u0002\u0002\u12bd\u12be\u0007\u009c\u0002\u0002\u12be\u12bf\u0005\u022e",
    "\u0118\u0002\u12bf\u01a7\u0003\u0002\u0002\u0002\u12c0\u12c1\u0007\u0019",
    "\u0002\u0002\u12c1\u12c2\u0007\u009c\u0002\u0002\u12c2\u12c6\u0005\u022e",
    "\u0118\u0002\u12c3\u12c5\u0005\u01b0\u00d9\u0002\u12c4\u12c3\u0003\u0002",
    "\u0002\u0002\u12c5\u12c8\u0003\u0002\u0002\u0002\u12c6\u12c4\u0003\u0002",
    "\u0002\u0002\u12c6\u12c7\u0003\u0002\u0002\u0002\u12c7\u01a9\u0003\u0002",
    "\u0002\u0002\u12c8\u12c6\u0003\u0002\u0002\u0002\u12c9\u12ca\u0007\u0128",
    "\u0002\u0002\u12ca\u12cb\u0007\u009c\u0002\u0002\u12cb\u12cd\u0005\u022e",
    "\u0118\u0002\u12cc\u12ce\tB\u0002\u0002\u12cd\u12cc\u0003\u0002\u0002",
    "\u0002\u12cd\u12ce\u0003\u0002\u0002\u0002\u12ce\u01ab\u0003\u0002\u0002",
    "\u0002\u12cf\u12d1\u0007m\u0002\u0002\u12d0\u12d2\tA\u0002\u0002\u12d1",
    "\u12d0\u0003\u0002\u0002\u0002\u12d1\u12d2\u0003\u0002\u0002\u0002\u12d2",
    "\u12d3\u0003\u0002\u0002\u0002\u12d3\u12d4\u0007\u009c\u0002\u0002\u12d4",
    "\u12d5\u0005\u022e\u0118\u0002\u12d5\u01ad\u0003\u0002\u0002\u0002\u12d6",
    "\u12d8\u0007\u01f0\u0002\u0002\u12d7\u12d9\tA\u0002\u0002\u12d8\u12d7",
    "\u0003\u0002\u0002\u0002\u12d8\u12d9\u0003\u0002\u0002\u0002\u12d9\u12da",
    "\u0003\u0002\u0002\u0002\u12da\u12db\u0007\u009c\u0002\u0002\u12db\u12dd",
    "\u0005\u022e\u0118\u0002\u12dc\u12de\u0007\u01e5\u0002\u0002\u12dd\u12dc",
    "\u0003\u0002\u0002\u0002\u12dd\u12de\u0003\u0002\u0002\u0002\u12de\u12e0",
    "\u0003\u0002\u0002\u0002\u12df\u12e1\u0007\u0165\u0002\u0002\u12e0\u12df",
    "\u0003\u0002\u0002\u0002\u12e0\u12e1\u0003\u0002\u0002\u0002\u12e1\u12e3",
    "\u0003\u0002\u0002\u0002\u12e2\u12e4\u0007\u023f\u0002\u0002\u12e3\u12e2",
    "\u0003\u0002\u0002\u0002\u12e3\u12e4\u0003\u0002\u0002\u0002\u12e4\u01af",
    "\u0003\u0002\u0002\u0002\u12e5\u12e6\u0007<\u0002\u0002\u12e6\u12ed",
    "\u0007\u023d\u0002\u0002\u12e7\u12ed\u0007\u01e5\u0002\u0002\u12e8\u12ed",
    "\u0007\u0167\u0002\u0002\u12e9\u12ed\u0007\u01b2\u0002\u0002\u12ea\u12ed",
    "\u0007\u0165\u0002\u0002\u12eb\u12ed\u0007\u0126\u0002\u0002\u12ec\u12e5",
    "\u0003\u0002\u0002\u0002\u12ec\u12e7\u0003\u0002\u0002\u0002\u12ec\u12e8",
    "\u0003\u0002\u0002\u0002\u12ec\u12e9\u0003\u0002\u0002\u0002\u12ec\u12ea",
    "\u0003\u0002\u0002\u0002\u12ec\u12eb\u0003\u0002\u0002\u0002\u12ed\u01b1",
    "\u0003\u0002\u0002\u0002\u12ee\u12f0\u0007 \u0002\u0002\u12ef\u12f1",
    "\u0007\u0113\u0002\u0002\u12f0\u12ef\u0003\u0002\u0002\u0002\u12f0\u12f1",
    "\u0003\u0002\u0002\u0002\u12f1\u12f2\u0003\u0002\u0002\u0002\u12f2\u12f3",
    "\u0007\u0172\u0002\u0002\u12f3\u12f4\u0005\u020c\u0107\u0002\u12f4\u12f5",
    "\u0007\u01fc\u0002\u0002\u12f5\u12f6\tC\u0002\u0002\u12f6\u12f7\u0007",
    "\u0212\u0002\u0002\u12f7\u12f8\u0007\u040d\u0002\u0002\u12f8\u01b3\u0003",
    "\u0002\u0002\u0002\u12f9\u12fa\u0007\u0183\u0002\u0002\u12fa\u12fb\u0007",
    "\u01d8\u0002\u0002\u12fb\u12fc\u0005\u020c\u0107\u0002\u12fc\u12fd\u0007",
    "\u0212\u0002\u0002\u12fd\u12fe\u0007\u040d\u0002\u0002\u12fe\u01b5\u0003",
    "\u0002\u0002\u0002\u12ff\u1300\u0007\u023a\u0002\u0002\u1300\u1301\u0007",
    "\u01d8\u0002\u0002\u1301\u1302\u0005\u020c\u0107\u0002\u1302\u01b7\u0003",
    "\u0002\u0002\u0002\u1303\u1304\u0007\u008c\u0002\u0002\u1304\u1305\u0005",
    "\u01bc\u00df\u0002\u1305\u1306\tD\u0002\u0002\u1306\u130e\u0005\u025a",
    "\u012e\u0002\u1307\u1308\u0007\u0400\u0002\u0002\u1308\u1309\u0005\u01bc",
    "\u00df\u0002\u1309\u130a\tD\u0002\u0002\u130a\u130b\u0005\u025a\u012e",
    "\u0002\u130b\u130d\u0003\u0002\u0002\u0002\u130c\u1307\u0003\u0002\u0002",
    "\u0002\u130d\u1310\u0003\u0002\u0002\u0002\u130e\u130c\u0003\u0002\u0002",
    "\u0002\u130e\u130f\u0003\u0002\u0002\u0002\u130f\u1337\u0003\u0002\u0002",
    "\u0002\u1310\u130e\u0003\u0002\u0002\u0002\u1311\u1315\u0007\u008c\u0002",
    "\u0002\u1312\u1313\u0007\u0018\u0002\u0002\u1313\u1316\u0007\u008c\u0002",
    "\u0002\u1314\u1316\u0007\u02dd\u0002\u0002\u1315\u1312\u0003\u0002\u0002",
    "\u0002\u1315\u1314\u0003\u0002\u0002\u0002\u1316\u1319\u0003\u0002\u0002",
    "\u0002\u1317\u131a\u0005\u01fe\u0100\u0002\u1318\u131a\u0007(\u0002",
    "\u0002\u1319\u1317\u0003\u0002\u0002\u0002\u1319\u1318\u0003\u0002\u0002",
    "\u0002\u131a\u1337\u0003\u0002\u0002\u0002\u131b\u131c\u0007\u008c\u0002",
    "\u0002\u131c\u1323\u0007\u01be\u0002\u0002\u131d\u1320\u0005\u01fe\u0100",
    "\u0002\u131e\u131f\u0007\u001a\u0002\u0002\u131f\u1321\u0005\u0200\u0101",
    "\u0002\u1320\u131e\u0003\u0002\u0002\u0002\u1320\u1321\u0003\u0002\u0002",
    "\u0002\u1321\u1324\u0003\u0002\u0002\u0002\u1322\u1324\u0007(\u0002",
    "\u0002\u1323\u131d\u0003\u0002\u0002\u0002\u1323\u1322\u0003\u0002\u0002",
    "\u0002\u1324\u1337\u0003\u0002\u0002\u0002\u1325\u1337\u0005\u0190\u00c9",
    "\u0002\u1326\u1337\u0005\u0114\u008b\u0002\u1327\u1337\u0005\u0112\u008a",
    "\u0002\u1328\u1329\u0007\u008c\u0002\u0002\u1329\u132a\u0005\u01f2\u00fa",
    "\u0002\u132a\u132b\tD\u0002\u0002\u132b\u1333\u0005\u025a\u012e\u0002",
    "\u132c\u132d\u0007\u0400\u0002\u0002\u132d\u132e\u0005\u01f2\u00fa\u0002",
    "\u132e\u132f\tD\u0002\u0002\u132f\u1330\u0005\u025a\u012e\u0002\u1330",
    "\u1332\u0003\u0002\u0002\u0002\u1331\u132c\u0003\u0002\u0002\u0002\u1332",
    "\u1335\u0003\u0002\u0002\u0002\u1333\u1331\u0003\u0002\u0002\u0002\u1333",
    "\u1334\u0003\u0002\u0002\u0002\u1334\u1337\u0003\u0002\u0002\u0002\u1335",
    "\u1333\u0003\u0002\u0002\u0002\u1336\u1303\u0003\u0002\u0002\u0002\u1336",
    "\u1311\u0003\u0002\u0002\u0002\u1336\u131b\u0003\u0002\u0002\u0002\u1336",
    "\u1325\u0003\u0002\u0002\u0002\u1336\u1326\u0003\u0002\u0002\u0002\u1336",
    "\u1327\u0003\u0002\u0002\u0002\u1336\u1328\u0003\u0002\u0002\u0002\u1337",
    "\u01b9\u0003\u0002\u0002\u0002\u1338\u1339\u0007\u008e\u0002\u0002\u1339",
    "\u133a\t3\u0002\u0002\u133a\u13d0\u0007\u0196\u0002\u0002\u133b\u133c",
    "\u0007\u008e\u0002\u0002\u133c\u133d\tE\u0002\u0002\u133d\u1340\u0007",
    "\u015f\u0002\u0002\u133e\u133f\u0007I\u0002\u0002\u133f\u1341\u0007",
    "\u040d\u0002\u0002\u1340\u133e\u0003\u0002\u0002\u0002\u1340\u1341\u0003",
    "\u0002\u0002\u0002\u1341\u1344\u0003\u0002\u0002\u0002\u1342\u1343\u0007",
    "?\u0002\u0002\u1343\u1345\u0005\u0212\u010a\u0002\u1344\u1342\u0003",
    "\u0002\u0002\u0002\u1344\u1345\u0003\u0002\u0002\u0002\u1345\u134d\u0003",
    "\u0002\u0002\u0002\u1346\u134a\u0007[\u0002\u0002\u1347\u1348\u0005",
    "\u0212\u010a\u0002\u1348\u1349\u0007\u0400\u0002\u0002\u1349\u134b\u0003",
    "\u0002\u0002\u0002\u134a\u1347\u0003\u0002\u0002\u0002\u134a\u134b\u0003",
    "\u0002\u0002\u0002\u134b\u134c\u0003\u0002\u0002\u0002\u134c\u134e\u0005",
    "\u0212\u010a\u0002\u134d\u1346\u0003\u0002\u0002\u0002\u134d\u134e\u0003",
    "\u0002\u0002\u0002\u134e\u13d0\u0003\u0002\u0002\u0002\u134f\u1350\u0007",
    "\u008e\u0002\u0002\u1350\u1352\u0005\u01be\u00e0\u0002\u1351\u1353\u0005",
    "\u01c0\u00e1\u0002\u1352\u1351\u0003\u0002\u0002\u0002\u1352\u1353\u0003",
    "\u0002\u0002\u0002\u1353\u13d0\u0003\u0002\u0002\u0002\u1354\u1356\u0007",
    "\u008e\u0002\u0002\u1355\u1357\u0007\u0171\u0002\u0002\u1356\u1355\u0003",
    "\u0002\u0002\u0002\u1356\u1357\u0003\u0002\u0002\u0002\u1357\u1358\u0003",
    "\u0002\u0002\u0002\u1358\u1359\t%\u0002\u0002\u1359\u135a\tF\u0002\u0002",
    "\u135a\u135d\u0005\u01f4\u00fb\u0002\u135b\u135c\tF\u0002\u0002\u135c",
    "\u135e\u0005\u020c\u0107\u0002\u135d\u135b\u0003\u0002\u0002\u0002\u135d",
    "\u135e\u0003\u0002\u0002\u0002\u135e\u1360\u0003\u0002\u0002\u0002\u135f",
    "\u1361\u0005\u01c0\u00e1\u0002\u1360\u135f\u0003\u0002\u0002\u0002\u1360",
    "\u1361\u0003\u0002\u0002\u0002\u1361\u13d0\u0003\u0002\u0002\u0002\u1362",
    "\u1363\u0007\u008e\u0002\u0002\u1363\u1364\u0007 \u0002\u0002\u1364",
    "\u1366\t\u0002\u0002\u0002\u1365\u1367\u0005\u0244\u0123\u0002\u1366",
    "\u1365\u0003\u0002\u0002\u0002\u1366\u1367\u0003\u0002\u0002\u0002\u1367",
    "\u1368\u0003\u0002\u0002\u0002\u1368\u13d0\u0005\u020c\u0107\u0002\u1369",
    "\u136a\u0007\u008e\u0002\u0002\u136a\u136b\u0007 \u0002\u0002\u136b",
    "\u136c\tG\u0002\u0002\u136c\u13d0\u0005\u01f2\u00fa\u0002\u136d\u136e",
    "\u0007\u008e\u0002\u0002\u136e\u136f\u0007 \u0002\u0002\u136f\u1370",
    "\u0007\u023e\u0002\u0002\u1370\u13d0\u0005\u01fa\u00fe\u0002\u1371\u1372",
    "\u0007\u008e\u0002\u0002\u1372\u1373\u0007\u0158\u0002\u0002\u1373\u1374",
    "\u0005\u0202\u0102\u0002\u1374\u1375\tH\u0002\u0002\u1375\u13d0\u0003",
    "\u0002\u0002\u0002\u1376\u1377\u0007\u008e\u0002\u0002\u1377\u13d0\u0005",
    "\u01c2\u00e2\u0002\u1378\u1379\u0007\u008e\u0002\u0002\u1379\u137a\t",
    "I\u0002\u0002\u137a\u137e\u0007[\u0002\u0002\u137b\u137c\u0005\u0212",
    "\u010a\u0002\u137c\u137d\u0007\u0400\u0002\u0002\u137d\u137f\u0003\u0002",
    "\u0002\u0002\u137e\u137b\u0003\u0002\u0002\u0002\u137e\u137f\u0003\u0002",
    "\u0002\u0002\u137f\u1380\u0003\u0002\u0002\u0002\u1380\u13d0\u0005\u0212",
    "\u010a\u0002\u1381\u1382\u0007\u008e\u0002\u0002\u1382\u1383\u0007\u00f1",
    "\u0002\u0002\u1383\u1384\u0007\u03fe\u0002\u0002\u1384\u1385\u0007\u03ed",
    "\u0002\u0002\u1385\u1386\u0007\u03ff\u0002\u0002\u1386\u13d0\tI\u0002",
    "\u0002\u1387\u1388\u0007\u008e\u0002\u0002\u1388\u138b\u0005\u01c4\u00e3",
    "\u0002\u1389\u138a\tF\u0002\u0002\u138a\u138c\u0005\u020c\u0107\u0002",
    "\u138b\u1389\u0003\u0002\u0002\u0002\u138b\u138c\u0003\u0002\u0002\u0002",
    "\u138c\u138e\u0003\u0002\u0002\u0002\u138d\u138f\u0005\u01c0\u00e1\u0002",
    "\u138e\u138d\u0003\u0002\u0002\u0002\u138e\u138f\u0003\u0002\u0002\u0002",
    "\u138f\u13d0\u0003\u0002\u0002\u0002\u1390\u1391\u0007\u008e\u0002\u0002",
    "\u1391\u1392\tJ\u0002\u0002\u1392\u1393\u0007\u012f\u0002\u0002\u1393",
    "\u13d0\u0005\u01f2\u00fa\u0002\u1394\u1395\u0007\u008e\u0002\u0002\u1395",
    "\u1398\u0007\u0175\u0002\u0002\u1396\u1397\u0007<\u0002\u0002\u1397",
    "\u1399\u0005\u01fa\u00fe\u0002\u1398\u1396\u0003\u0002\u0002\u0002\u1398",
    "\u1399\u0003\u0002\u0002\u0002\u1399\u13d0\u0003\u0002\u0002\u0002\u139a",
    "\u139b\u0007\u008e\u0002\u0002\u139b\u139c\tK\u0002\u0002\u139c\u139d",
    "\tF\u0002\u0002\u139d\u13a0\u0005\u01f4\u00fb\u0002\u139e\u139f\tF\u0002",
    "\u0002\u139f\u13a1\u0005\u020c\u0107\u0002\u13a0\u139e\u0003\u0002\u0002",
    "\u0002\u13a0\u13a1\u0003\u0002\u0002\u0002\u13a1\u13a4\u0003\u0002\u0002",
    "\u0002\u13a2\u13a3\u0007\u00ae\u0002\u0002\u13a3\u13a5\u0005\u025a\u012e",
    "\u0002\u13a4\u13a2\u0003\u0002\u0002\u0002\u13a4\u13a5\u0003\u0002\u0002",
    "\u0002\u13a5\u13d0\u0003\u0002\u0002\u0002\u13a6\u13a7\u0007\u008e\u0002",
    "\u0002\u13a7\u13a8\u0007\u01cc\u0002\u0002\u13a8\u13ab\u0007\u025c\u0002",
    "\u0002\u13a9\u13aa\tF\u0002\u0002\u13aa\u13ac\u0005\u020c\u0107\u0002",
    "\u13ab\u13a9\u0003\u0002\u0002\u0002\u13ab\u13ac\u0003\u0002\u0002\u0002",
    "\u13ac\u13ae\u0003\u0002\u0002\u0002\u13ad\u13af\u0005\u01c0\u00e1\u0002",
    "\u13ae\u13ad\u0003\u0002\u0002\u0002\u13ae\u13af\u0003\u0002\u0002\u0002",
    "\u13af\u13d0\u0003\u0002\u0002\u0002\u13b0\u13b1\u0007\u008e\u0002\u0002",
    "\u13b1\u13b2\u0007\u01e1\u0002\u0002\u13b2\u13b7\u0005\u01c6\u00e4\u0002",
    "\u13b3\u13b4\u0007\u0400\u0002\u0002\u13b4\u13b6\u0005\u01c6\u00e4\u0002",
    "\u13b5\u13b3\u0003\u0002\u0002\u0002\u13b6\u13b9\u0003\u0002\u0002\u0002",
    "\u13b7\u13b5\u0003\u0002\u0002\u0002\u13b7\u13b8\u0003\u0002\u0002\u0002",
    "\u13b8\u13bd\u0003\u0002\u0002\u0002\u13b9\u13b7\u0003\u0002\u0002\u0002",
    "\u13ba\u13bb\u0007<\u0002\u0002\u13bb\u13bc\u0007\u01e4\u0002\u0002",
    "\u13bc\u13be\u0005\u0212\u010a\u0002\u13bd\u13ba\u0003\u0002\u0002\u0002",
    "\u13bd\u13be\u0003\u0002\u0002\u0002\u13be\u13bf\u0003\u0002\u0002\u0002",
    "\u13bf\u13c3\u0007[\u0002\u0002\u13c0\u13c1\u0005\u0212\u010a\u0002",
    "\u13c1\u13c2\u0007\u0400\u0002\u0002\u13c2\u13c4\u0003\u0002\u0002\u0002",
    "\u13c3\u13c0\u0003\u0002\u0002\u0002\u13c3\u13c4\u0003\u0002\u0002\u0002",
    "\u13c4\u13c5\u0003\u0002\u0002\u0002\u13c5\u13c6\u0005\u0212\u010a\u0002",
    "\u13c6\u13d0\u0003\u0002\u0002\u0002\u13c7\u13c8\u0007\u008e\u0002\u0002",
    "\u13c8\u13c9\u0007\u020d\u0002\u0002\u13c9\u13cd\u0007\u0221\u0002\u0002",
    "\u13ca\u13cb\u0007<\u0002\u0002\u13cb\u13cc\u0007\u0127\u0002\u0002",
    "\u13cc\u13ce\u0007\u040d\u0002\u0002\u13cd\u13ca\u0003\u0002\u0002\u0002",
    "\u13cd\u13ce\u0003\u0002\u0002\u0002\u13ce\u13d0\u0003\u0002\u0002\u0002",
    "\u13cf\u1338\u0003\u0002\u0002\u0002\u13cf\u133b\u0003\u0002\u0002\u0002",
    "\u13cf\u134f\u0003\u0002\u0002\u0002\u13cf\u1354\u0003\u0002\u0002\u0002",
    "\u13cf\u1362\u0003\u0002\u0002\u0002\u13cf\u1369\u0003\u0002\u0002\u0002",
    "\u13cf\u136d\u0003\u0002\u0002\u0002\u13cf\u1371\u0003\u0002\u0002\u0002",
    "\u13cf\u1376\u0003\u0002\u0002\u0002\u13cf\u1378\u0003\u0002\u0002\u0002",
    "\u13cf\u1381\u0003\u0002\u0002\u0002\u13cf\u1387\u0003\u0002\u0002\u0002",
    "\u13cf\u1390\u0003\u0002\u0002\u0002\u13cf\u1394\u0003\u0002\u0002\u0002",
    "\u13cf\u139a\u0003\u0002\u0002\u0002\u13cf\u13a6\u0003\u0002\u0002\u0002",
    "\u13cf\u13b0\u0003\u0002\u0002\u0002\u13cf\u13c7\u0003\u0002\u0002\u0002",
    "\u13d0\u01bb\u0003\u0002\u0002\u0002\u13d1\u13dc\u0007\u0418\u0002\u0002",
    "\u13d2\u13dc\u0007\u0419\u0002\u0002\u13d3\u13d4\u0007\u0402\u0002\u0002",
    "\u13d4\u13d6\u0007\u0402\u0002\u0002\u13d5\u13d3\u0003\u0002\u0002\u0002",
    "\u13d5\u13d6\u0003\u0002\u0002\u0002\u13d6\u13d7\u0003\u0002\u0002\u0002",
    "\u13d7\u13d9\tL\u0002\u0002\u13d8\u13d5\u0003\u0002\u0002\u0002\u13d8",
    "\u13d9\u0003\u0002\u0002\u0002\u13d9\u13da\u0003\u0002\u0002\u0002\u13da",
    "\u13dc\u0005\u020c\u0107\u0002\u13db\u13d1\u0003\u0002\u0002\u0002\u13db",
    "\u13d2\u0003\u0002\u0002\u0002\u13db\u13d8\u0003\u0002\u0002\u0002\u13dc",
    "\u01bd\u0003\u0002\u0002\u0002\u13dd\u13de\u0007\u0018\u0002\u0002\u13de",
    "\u13eb\u0007\u008c\u0002\u0002\u13df\u13eb\u0007\u02e0\u0002\u0002\u13e0",
    "\u13eb\u0007&\u0002\u0002\u13e1\u13eb\u0007\u008a\u0002\u0002\u13e2",
    "\u13e3\u0007\u0172\u0002\u0002\u13e3\u13eb\u0007\u0221\u0002\u0002\u13e4",
    "\u13e5\u0007w\u0002\u0002\u13e5\u13eb\u0007\u0221\u0002\u0002\u13e6",
    "\u13e8\t2\u0002\u0002\u13e7\u13e6\u0003\u0002\u0002\u0002\u13e7\u13e8",
    "\u0003\u0002\u0002\u0002\u13e8\u13e9\u0003\u0002\u0002\u0002\u13e9\u13eb",
    "\tM\u0002\u0002\u13ea\u13dd\u0003\u0002\u0002\u0002\u13ea\u13df\u0003",
    "\u0002\u0002\u0002\u13ea\u13e0\u0003\u0002\u0002\u0002\u13ea\u13e1\u0003",
    "\u0002\u0002\u0002\u13ea\u13e2\u0003\u0002\u0002\u0002\u13ea\u13e4\u0003",
    "\u0002\u0002\u0002\u13ea\u13e7\u0003\u0002\u0002\u0002\u13eb\u01bf\u0003",
    "\u0002\u0002\u0002\u13ec\u13ed\u0007Z\u0002\u0002\u13ed\u13f1\u0007",
    "\u040d\u0002\u0002\u13ee\u13ef\u0007\u00ae\u0002\u0002\u13ef\u13f1\u0005",
    "\u025a\u012e\u0002\u13f0\u13ec\u0003\u0002\u0002\u0002\u13f0\u13ee\u0003",
    "\u0002\u0002\u0002\u13f1\u01c1\u0003\u0002\u0002\u0002\u13f2\u13f4\u0007",
    "\u0223\u0002\u0002\u13f3\u13f2\u0003\u0002\u0002\u0002\u13f3\u13f4\u0003",
    "\u0002\u0002\u0002\u13f4\u13f5\u0003\u0002\u0002\u0002\u13f5\u1404\u0007",
    "\u0159\u0002\u0002\u13f6\u13f7\u0007\u0197\u0002\u0002\u13f7\u1404\u0007",
    "\u0221\u0002\u0002\u13f8\u1404\u0007\u01da\u0002\u0002\u13f9\u1404\u0007",
    "\u0264\u0002\u0002\u13fa\u13fc\u0007\u0171\u0002\u0002\u13fb\u13fa\u0003",
    "\u0002\u0002\u0002\u13fb\u13fc\u0003\u0002\u0002\u0002\u13fc\u13fd\u0003",
    "\u0002\u0002\u0002\u13fd\u1404\u0007\u01e0\u0002\u0002\u13fe\u1404\u0007",
    "\u01e2\u0002\u0002\u13ff\u1400\u0007\u020d\u0002\u0002\u1400\u1404\u0007",
    "\u017b\u0002\u0002\u1401\u1404\u0007\u0117\u0002\u0002\u1402\u1404\u0007",
    "\u0141\u0002\u0002\u1403\u13f3\u0003\u0002\u0002\u0002\u1403\u13f6\u0003",
    "\u0002\u0002\u0002\u1403\u13f8\u0003\u0002\u0002\u0002\u1403\u13f9\u0003",
    "\u0002\u0002\u0002\u1403\u13fb\u0003\u0002\u0002\u0002\u1403\u13fe\u0003",
    "\u0002\u0002\u0002\u1403\u13ff\u0003\u0002\u0002\u0002\u1403\u1401\u0003",
    "\u0002\u0002\u0002\u1403\u1402\u0003\u0002\u0002\u0002\u1404\u01c3\u0003",
    "\u0002\u0002\u0002\u1405\u140e\u0007\u015f\u0002\u0002\u1406\u1407\u0007",
    "\u009c\u0002\u0002\u1407\u140e\u0007\u0221\u0002\u0002\u1408\u140a\u0007",
    "\u0171\u0002\u0002\u1409\u1408\u0003\u0002\u0002\u0002\u1409\u140a\u0003",
    "\u0002\u0002\u0002\u140a\u140b\u0003\u0002\u0002\u0002\u140b\u140e\u0007",
    "\u025c\u0002\u0002\u140c\u140e\u0007\u0235\u0002\u0002\u140d\u1405\u0003",
    "\u0002\u0002\u0002\u140d\u1406\u0003\u0002\u0002\u0002\u140d\u1409\u0003",
    "\u0002\u0002\u0002\u140d\u140c\u0003\u0002\u0002\u0002\u140e\u01c5\u0003",
    "\u0002\u0002\u0002\u140f\u141c\u0007\b\u0002\u0002\u1410\u1411\u0007",
    "\u011f\u0002\u0002\u1411\u141c\u0007\u0187\u0002\u0002\u1412\u1413\u0007",
    "\u0140\u0002\u0002\u1413\u141c\u0007\u022c\u0002\u0002\u1414\u141c\u0007",
    "\u0143\u0002\u0002\u1415\u141c\u0007\u0189\u0002\u0002\u1416\u141c\u0007",
    "\u02ac\u0002\u0002\u1417\u1418\u0007\u01d1\u0002\u0002\u1418\u141c\u0007",
    "\u0168\u0002\u0002\u1419\u141c\u0007\u0214\u0002\u0002\u141a\u141c\u0007",
    "\u022b\u0002\u0002\u141b\u140f\u0003\u0002\u0002\u0002\u141b\u1410\u0003",
    "\u0002\u0002\u0002\u141b\u1412\u0003\u0002\u0002\u0002\u141b\u1414\u0003",
    "\u0002\u0002\u0002\u141b\u1415\u0003\u0002\u0002\u0002\u141b\u1416\u0003",
    "\u0002\u0002\u0002\u141b\u1417\u0003\u0002\u0002\u0002\u141b\u1419\u0003",
    "\u0002\u0002\u0002\u141b\u141a\u0003\u0002\u0002\u0002\u141c\u01c7\u0003",
    "\u0002\u0002\u0002\u141d\u141e\u0007\u011d\u0002\u0002\u141e\u141f\u0007",
    "\u040d\u0002\u0002\u141f\u01c9\u0003\u0002\u0002\u0002\u1420\u1421\u0007",
    "\u0123\u0002\u0002\u1421\u1422\u0007J\u0002\u0002\u1422\u1427\u0005",
    "\u01d6\u00ec\u0002\u1423\u1424\u0007\u0400\u0002\u0002\u1424\u1426\u0005",
    "\u01d6\u00ec\u0002\u1425\u1423\u0003\u0002\u0002\u0002\u1426\u1429\u0003",
    "\u0002\u0002\u0002\u1427\u1425\u0003\u0002\u0002\u0002\u1427\u1428\u0003",
    "\u0002\u0002\u0002\u1428\u1431\u0003\u0002\u0002\u0002\u1429\u1427\u0003",
    "\u0002\u0002\u0002\u142a\u142b\u0007u\u0002\u0002\u142b\u142e\u0007",
    "\u03fe\u0002\u0002\u142c\u142f\u0005\u022c\u0117\u0002\u142d\u142f\u0007",
    "\b\u0002\u0002\u142e\u142c\u0003\u0002\u0002\u0002\u142e\u142d\u0003",
    "\u0002\u0002\u0002\u142f\u1430\u0003\u0002\u0002\u0002\u1430\u1432\u0007",
    "\u03ff\u0002\u0002\u1431\u142a\u0003\u0002\u0002\u0002\u1431\u1432\u0003",
    "\u0002\u0002\u0002\u1432\u1433\u0003\u0002\u0002\u0002\u1433\u1434\u0007",
    "I\u0002\u0002\u1434\u1435\u0005\u020c\u0107\u0002\u1435\u01cb\u0003",
    "\u0002\u0002\u0002\u1436\u1438\u0007\u016e\u0002\u0002\u1437\u1439\t",
    "A\u0002\u0002\u1438\u1437\u0003\u0002\u0002\u0002\u1438\u1439\u0003",
    "\u0002\u0002\u0002\u1439\u143a\u0003\u0002\u0002\u0002\u143a\u143f\u0005",
    "\u01d8\u00ed\u0002\u143b\u143c\u0007\u0400\u0002\u0002\u143c\u143e\u0005",
    "\u01d8\u00ed\u0002\u143d\u143b\u0003\u0002\u0002\u0002\u143e\u1441\u0003",
    "\u0002\u0002\u0002\u143f\u143d\u0003\u0002\u0002\u0002\u143f\u1440\u0003",
    "\u0002\u0002\u0002\u1440\u01cd\u0003\u0002\u0002\u0002\u1441\u143f\u0003",
    "\u0002\u0002\u0002\u1442\u1444\u0007V\u0002\u0002\u1443\u1445\tN\u0002",
    "\u0002\u1444\u1443\u0003\u0002\u0002\u0002\u1444\u1445\u0003\u0002\u0002",
    "\u0002\u1445\u1447\u0003\u0002\u0002\u0002\u1446\u1448\u0005\u0212\u010a",
    "\u0002\u1447\u1446\u0003\u0002\u0002\u0002\u1448\u1449\u0003\u0002\u0002",
    "\u0002\u1449\u1447\u0003\u0002\u0002\u0002\u1449\u144a\u0003\u0002\u0002",
    "\u0002\u144a\u01cf\u0003\u0002\u0002\u0002\u144b\u144c\u0007^\u0002",
    "\u0002\u144c\u144d\u0007J\u0002\u0002\u144d\u144e\u0007P\u0002\u0002",
    "\u144e\u144f\u0007\u0123\u0002\u0002\u144f\u1454\u0005\u01dc\u00ef\u0002",
    "\u1450\u1451\u0007\u0400\u0002\u0002\u1451\u1453\u0005\u01dc\u00ef\u0002",
    "\u1452\u1450\u0003\u0002\u0002\u0002\u1453\u1456\u0003\u0002\u0002\u0002",
    "\u1454\u1452\u0003\u0002\u0002\u0002\u1454\u1455\u0003\u0002\u0002\u0002",
    "\u1455\u01d1\u0003\u0002\u0002\u0002\u1456\u1454\u0003\u0002\u0002\u0002",
    "\u1457\u1458\u0007\u01f9\u0002\u0002\u1458\u1459\u0007\u01e4\u0002\u0002",
    "\u1459\u145a\u0007\u0123\u0002\u0002\u145a\u01d3\u0003\u0002\u0002\u0002",
    "\u145b\u145c\u0007\u0262\u0002\u0002\u145c\u01d5\u0003\u0002\u0002\u0002",
    "\u145d\u1465\u0005\u01f4\u00fb\u0002\u145e\u1460\t\u0014\u0002\u0002",
    "\u145f\u145e\u0003\u0002\u0002\u0002\u145f\u1460\u0003\u0002\u0002\u0002",
    "\u1460\u1461\u0003\u0002\u0002\u0002\u1461\u1462\u0007\u03fe\u0002\u0002",
    "\u1462\u1463\u0005\u022c\u0117\u0002\u1463\u1464\u0007\u03ff\u0002\u0002",
    "\u1464\u1466\u0003\u0002\u0002\u0002\u1465\u145f\u0003\u0002\u0002\u0002",
    "\u1465\u1466\u0003\u0002\u0002\u0002\u1466\u01d7\u0003\u0002\u0002\u0002",
    "\u1467\u147a\u0007\u014b\u0002\u0002\u1468\u147a\u0007\u017b\u0002\u0002",
    "\u1469\u146b\tO\u0002\u0002\u146a\u1469\u0003\u0002\u0002\u0002\u146a",
    "\u146b\u0003\u0002\u0002\u0002\u146b\u146c\u0003\u0002\u0002\u0002\u146c",
    "\u147a\u0007\u0196\u0002\u0002\u146d\u147a\u0007\u01cd\u0002\u0002\u146e",
    "\u147a\u0007\u0264\u0002\u0002\u146f\u1470\u0007\u01e4\u0002\u0002\u1470",
    "\u147a\u0007\u0123\u0002\u0002\u1471\u147a\u0007\u0221\u0002\u0002\u1472",
    "\u147a\u0007\u0240\u0002\u0002\u1473\u1477\u0007\u025c\u0002\u0002\u1474",
    "\u1475\u0007\u00b0\u0002\u0002\u1475\u1476\u0007z\u0002\u0002\u1476",
    "\u1478\u0007_\u0002\u0002\u1477\u1474\u0003\u0002\u0002\u0002\u1477",
    "\u1478\u0003\u0002\u0002\u0002\u1478\u147a\u0003\u0002\u0002\u0002\u1479",
    "\u1467\u0003\u0002\u0002\u0002\u1479\u1468\u0003\u0002\u0002\u0002\u1479",
    "\u146a\u0003\u0002\u0002\u0002\u1479\u146d\u0003\u0002\u0002\u0002\u1479",
    "\u146e\u0003\u0002\u0002\u0002\u1479\u146f\u0003\u0002\u0002\u0002\u1479",
    "\u1471\u0003\u0002\u0002\u0002\u1479\u1472\u0003\u0002\u0002\u0002\u1479",
    "\u1473\u0003\u0002\u0002\u0002\u147a\u1486\u0003\u0002\u0002\u0002\u147b",
    "\u147c\u0007\u01ea\u0002\u0002\u147c\u147e\u0007\u0196\u0002\u0002\u147d",
    "\u147f\u0005\u013a\u009e\u0002\u147e\u147d\u0003\u0002\u0002\u0002\u147e",
    "\u147f\u0003\u0002\u0002\u0002\u147f\u1486\u0003\u0002\u0002\u0002\u1480",
    "\u1481\u0007\u025c\u0002\u0002\u1481\u1483\u0005\u022e\u0118\u0002\u1482",
    "\u1484\u0005\u01da\u00ee\u0002\u1483\u1482\u0003\u0002\u0002\u0002\u1483",
    "\u1484\u0003\u0002\u0002\u0002\u1484\u1486\u0003\u0002\u0002\u0002\u1485",
    "\u1479\u0003\u0002\u0002\u0002\u1485\u147b\u0003\u0002\u0002\u0002\u1485",
    "\u1480\u0003\u0002\u0002\u0002\u1486\u01d9\u0003\u0002\u0002\u0002\u1487",
    "\u1488\u0007\u00b0\u0002\u0002\u1488\u1489\u0007z\u0002\u0002\u1489",
    "\u148d\u0007_\u0002\u0002\u148a\u148b\u0007<\u0002\u0002\u148b\u148d",
    "\u0007\u0164\u0002\u0002\u148c\u1487\u0003\u0002\u0002\u0002\u148c\u148a",
    "\u0003\u0002\u0002\u0002\u148d\u01db\u0003\u0002\u0002\u0002\u148e\u1496",
    "\u0005\u01f4\u00fb\u0002\u148f\u1490\u0007u\u0002\u0002\u1490\u1493",
    "\u0007\u03fe\u0002\u0002\u1491\u1494\u0005\u022c\u0117\u0002\u1492\u1494",
    "\u0007\b\u0002\u0002\u1493\u1491\u0003\u0002\u0002\u0002\u1493\u1492",
    "\u0003\u0002\u0002\u0002\u1494\u1495\u0003\u0002\u0002\u0002\u1495\u1497",
    "\u0007\u03ff\u0002\u0002\u1496\u148f\u0003\u0002\u0002\u0002\u1496\u1497",
    "\u0003\u0002\u0002\u0002\u1497\u149f\u0003\u0002\u0002\u0002\u1498\u149a",
    "\t\u0014\u0002\u0002\u1499\u1498\u0003\u0002\u0002\u0002\u1499\u149a",
    "\u0003\u0002\u0002\u0002\u149a\u149b\u0003\u0002\u0002\u0002\u149b\u149c",
    "\u0007\u03fe\u0002\u0002\u149c\u149d\u0005\u022c\u0117\u0002\u149d\u149e",
    "\u0007\u03ff\u0002\u0002\u149e\u14a0\u0003\u0002\u0002\u0002\u149f\u1499",
    "\u0003\u0002\u0002\u0002\u149f\u14a0\u0003\u0002\u0002\u0002\u14a0\u14a3",
    "\u0003\u0002\u0002\u0002\u14a1\u14a2\u0007H\u0002\u0002\u14a2\u14a4",
    "\u0007\u0190\u0002\u0002\u14a3\u14a1\u0003\u0002\u0002\u0002\u14a3\u14a4",
    "\u0003\u0002\u0002\u0002\u14a4\u01dd\u0003\u0002\u0002\u0002\u14a5\u14a6",
    "\tP\u0002\u0002\u14a6\u14a9\u0005\u01f4\u00fb\u0002\u14a7\u14aa\u0005",
    "\u020c\u0107\u0002\u14a8\u14aa\u0007\u040d\u0002\u0002\u14a9\u14a7\u0003",
    "\u0002\u0002\u0002\u14a9\u14a8\u0003\u0002\u0002\u0002\u14a9\u14aa\u0003",
    "\u0002\u0002\u0002\u14aa\u01df\u0003\u0002\u0002\u0002\u14ab\u14af\t",
    "P\u0002\u0002\u14ac\u14ad\tQ\u0002\u0002\u14ad\u14ae\u0007\u03f5\u0002",
    "\u0002\u14ae\u14b0\tR\u0002\u0002\u14af\u14ac\u0003\u0002\u0002\u0002",
    "\u14af\u14b0\u0003\u0002\u0002\u0002\u14b0\u14b1\u0003\u0002\u0002\u0002",
    "\u14b1\u14b2\u0005\u01f0\u00f9\u0002\u14b2\u01e1\u0003\u0002\u0002\u0002",
    "\u14b3\u14b4\u0007\u0179\u0002\u0002\u14b4\u14b5\u0007\u040d\u0002\u0002",
    "\u14b5\u01e3\u0003\u0002\u0002\u0002\u14b6\u14b7\u0007\u00aa\u0002\u0002",
    "\u14b7\u14b8\u0005\u020c\u0107\u0002\u14b8\u01e5\u0003\u0002\u0002\u0002",
    "\u14b9\u14c1\u0007\u008f\u0002\u0002\u14ba\u14bc\u0007\u0093\u0002\u0002",
    "\u14bb\u14bd\u0007\u0242\u0002\u0002\u14bc\u14bb\u0003\u0002\u0002\u0002",
    "\u14bc\u14bd\u0003\u0002\u0002\u0002\u14bd\u14be\u0003\u0002\u0002\u0002",
    "\u14be\u14c2\u0005\u0216\u010c\u0002\u14bf\u14c2\u0007\u0415\u0002\u0002",
    "\u14c0\u14c2\u0007\u0416\u0002\u0002\u14c1\u14ba\u0003\u0002\u0002\u0002",
    "\u14c1\u14bf\u0003\u0002\u0002\u0002\u14c1\u14c0\u0003\u0002\u0002\u0002",
    "\u14c2\u14cc\u0003\u0002\u0002\u0002\u14c3\u14c4\u0007\u008c\u0002\u0002",
    "\u14c4\u14c9\u0005\u01ea\u00f6\u0002\u14c5\u14c6\u0007\u0400\u0002\u0002",
    "\u14c6\u14c8\u0005\u01ea\u00f6\u0002\u14c7\u14c5\u0003\u0002\u0002\u0002",
    "\u14c8\u14cb\u0003\u0002\u0002\u0002\u14c9\u14c7\u0003\u0002\u0002\u0002",
    "\u14c9\u14ca\u0003\u0002\u0002\u0002\u14ca\u14cd\u0003\u0002\u0002\u0002",
    "\u14cb\u14c9\u0003\u0002\u0002\u0002\u14cc\u14c3\u0003\u0002\u0002\u0002",
    "\u14cc\u14cd\u0003\u0002\u0002\u0002\u14cd\u01e7\u0003\u0002\u0002\u0002",
    "\u14ce\u14d6\u0007\u0083\u0002\u0002\u14cf\u14d1\u0007\u0093\u0002\u0002",
    "\u14d0\u14d2\u0007\u0242\u0002\u0002\u14d1\u14d0\u0003\u0002\u0002\u0002",
    "\u14d1\u14d2\u0003\u0002\u0002\u0002\u14d2\u14d3\u0003\u0002\u0002\u0002",
    "\u14d3\u14d7\u0005\u0216\u010c\u0002\u14d4\u14d7\u0007\u0415\u0002\u0002",
    "\u14d5\u14d7\u0007\u0416\u0002\u0002\u14d6\u14cf\u0003\u0002\u0002\u0002",
    "\u14d6\u14d4\u0003\u0002\u0002\u0002\u14d6\u14d5\u0003\u0002\u0002\u0002",
    "\u14d6\u14d7\u0003\u0002\u0002\u0002\u14d7\u14e1\u0003\u0002\u0002\u0002",
    "\u14d8\u14d9\u0007\u008c\u0002\u0002\u14d9\u14de\u0005\u01ea\u00f6\u0002",
    "\u14da\u14db\u0007\u0400\u0002\u0002\u14db\u14dd\u0005\u01ea\u00f6\u0002",
    "\u14dc\u14da\u0003\u0002\u0002\u0002\u14dd\u14e0\u0003\u0002\u0002\u0002",
    "\u14de\u14dc\u0003\u0002\u0002\u0002\u14de\u14df\u0003\u0002\u0002\u0002",
    "\u14df\u14e2\u0003\u0002\u0002\u0002\u14e0\u14de\u0003\u0002\u0002\u0002",
    "\u14e1\u14d8\u0003\u0002\u0002\u0002\u14e1\u14e2\u0003\u0002\u0002\u0002",
    "\u14e2\u01e9\u0003\u0002\u0002\u0002\u14e3\u14e4\tS\u0002\u0002\u14e4",
    "\u14e7\u0007\u03f5\u0002\u0002\u14e5\u14e8\u0005\u0216\u010c\u0002\u14e6",
    "\u14e8\u0007\u040e\u0002\u0002\u14e7\u14e5\u0003\u0002\u0002\u0002\u14e7",
    "\u14e6\u0003\u0002\u0002\u0002\u14e8\u01eb\u0003\u0002\u0002\u0002\u14e9",
    "\u14eb\u0007B\u0002\u0002\u14ea\u14ec\tT\u0002\u0002\u14eb\u14ea\u0003",
    "\u0002\u0002\u0002\u14eb\u14ec\u0003\u0002\u0002\u0002\u14ec\u14ed\u0003",
    "\u0002\u0002\u0002\u14ed\u150d\u0007.\u0002\u0002\u14ee\u14ef\u0005",
    "\u01bc\u00df\u0002\u14ef\u14f0\u0007\u03f5\u0002\u0002\u14f0\u14f8\t",
    "U\u0002\u0002\u14f1\u14f2\u0007\u0400\u0002\u0002\u14f2\u14f3\u0005",
    "\u01bc\u00df\u0002\u14f3\u14f4\u0007\u03f5\u0002\u0002\u14f4\u14f5\t",
    "U\u0002\u0002\u14f5\u14f7\u0003\u0002\u0002\u0002\u14f6\u14f1\u0003",
    "\u0002\u0002\u0002\u14f7\u14fa\u0003\u0002\u0002\u0002\u14f8\u14f6\u0003",
    "\u0002\u0002\u0002\u14f8\u14f9\u0003\u0002\u0002\u0002\u14f9\u150e\u0003",
    "\u0002\u0002\u0002\u14fa\u14f8\u0003\u0002\u0002\u0002\u14fb\u14fe\u0007",
    "\u001c\u0002\u0002\u14fc\u14ff\u0005\u0212\u010a\u0002\u14fd\u14ff\u0005",
    "\u01bc\u00df\u0002\u14fe\u14fc\u0003\u0002\u0002\u0002\u14fe\u14fd\u0003",
    "\u0002\u0002\u0002\u14ff\u1500\u0003\u0002\u0002\u0002\u1500\u1501\u0005",
    "\u01bc\u00df\u0002\u1501\u1502\u0007\u03f5\u0002\u0002\u1502\u150a\u0005",
    "\u01ee\u00f8\u0002\u1503\u1504\u0007\u0400\u0002\u0002\u1504\u1505\u0005",
    "\u01bc\u00df\u0002\u1505\u1506\u0007\u03f5\u0002\u0002\u1506\u1507\u0005",
    "\u01ee\u00f8\u0002\u1507\u1509\u0003\u0002\u0002\u0002\u1508\u1503\u0003",
    "\u0002\u0002\u0002\u1509\u150c\u0003\u0002\u0002\u0002\u150a\u1508\u0003",
    "\u0002\u0002\u0002\u150a\u150b\u0003\u0002\u0002\u0002\u150b\u150e\u0003",
    "\u0002\u0002\u0002\u150c\u150a\u0003\u0002\u0002\u0002\u150d\u14ee\u0003",
    "\u0002\u0002\u0002\u150d\u14fb\u0003\u0002\u0002\u0002\u150e\u01ed\u0003",
    "\u0002\u0002\u0002\u150f\u1510\tV\u0002\u0002\u1510\u01ef\u0003\u0002",
    "\u0002\u0002\u1511\u1517\u0005\u00b4[\u0002\u1512\u1517\u0005\u00a6",
    "T\u0002\u1513\u1517\u0005\u00acW\u0002\u1514\u1517\u0005\u00b2Z\u0002",
    "\u1515\u1517\u0005\u00b6\\\u0002\u1516\u1511\u0003\u0002\u0002\u0002",
    "\u1516\u1512\u0003\u0002\u0002\u0002\u1516\u1513\u0003\u0002\u0002\u0002",
    "\u1516\u1514\u0003\u0002\u0002\u0002\u1516\u1515\u0003\u0002\u0002\u0002",
    "\u1517\u151c\u0003\u0002\u0002\u0002\u1518\u1519\u0007<\u0002\u0002",
    "\u1519\u151a\u0007\u013a\u0002\u0002\u151a\u151c\u0005\u020c\u0107\u0002",
    "\u151b\u1516\u0003\u0002\u0002\u0002\u151b\u1518\u0003\u0002\u0002\u0002",
    "\u151c\u01f1\u0003\u0002\u0002\u0002\u151d\u1521\u0005\u020c\u0107\u0002",
    "\u151e\u1522\u0007\u0414\u0002\u0002\u151f\u1520\u0007\u03fd\u0002\u0002",
    "\u1520\u1522\u0005\u020c\u0107\u0002\u1521\u151e\u0003\u0002\u0002\u0002",
    "\u1521\u151f\u0003\u0002\u0002\u0002\u1521\u1522\u0003\u0002\u0002\u0002",
    "\u1522\u01f3\u0003\u0002\u0002\u0002\u1523\u1524\u0005\u01f2\u00fa\u0002",
    "\u1524\u01f5\u0003\u0002\u0002\u0002\u1525\u152a\u0005\u020c\u0107\u0002",
    "\u1526\u1528\u0005\u0210\u0109\u0002\u1527\u1529\u0005\u0210\u0109\u0002",
    "\u1528\u1527\u0003\u0002\u0002\u0002\u1528\u1529\u0003\u0002\u0002\u0002",
    "\u1529\u152b\u0003\u0002\u0002\u0002\u152a\u1526\u0003\u0002\u0002\u0002",
    "\u152a\u152b\u0003\u0002\u0002\u0002\u152b\u01f7\u0003\u0002\u0002\u0002",
    "\u152c\u152f\u0005\u020c\u0107\u0002\u152d\u152f\u0007\u040d\u0002\u0002",
    "\u152e\u152c\u0003\u0002\u0002\u0002\u152e\u152d\u0003\u0002\u0002\u0002",
    "\u152f\u1534\u0003\u0002\u0002\u0002\u1530\u1531\u0007\u03fe\u0002\u0002",
    "\u1531\u1532\u0005\u0212\u010a\u0002\u1532\u1533\u0007\u03ff\u0002\u0002",
    "\u1533\u1535\u0003\u0002\u0002\u0002\u1534\u1530\u0003\u0002\u0002\u0002",
    "\u1534\u1535\u0003\u0002\u0002\u0002\u1535\u1537\u0003\u0002\u0002\u0002",
    "\u1536\u1538\t,\u0002\u0002\u1537\u1536\u0003\u0002\u0002\u0002\u1537",
    "\u1538\u0003\u0002\u0002\u0002\u1538\u01f9\u0003\u0002\u0002\u0002\u1539",
    "\u153a\tW\u0002\u0002\u153a\u01fb\u0003\u0002\u0002\u0002\u153b\u153c",
    "\tX\u0002\u0002\u153c\u01fd\u0003\u0002\u0002\u0002\u153d\u1542\u0007",
    "\u00d2\u0002\u0002\u153e\u1542\u0005\u026a\u0136\u0002\u153f\u1542\u0007",
    "\u040d\u0002\u0002\u1540\u1542\u0007\u040a\u0002\u0002\u1541\u153d\u0003",
    "\u0002\u0002\u0002\u1541\u153e\u0003\u0002\u0002\u0002\u1541\u153f\u0003",
    "\u0002\u0002\u0002\u1541\u1540\u0003\u0002\u0002\u0002\u1542\u01ff\u0003",
    "\u0002\u0002\u0002\u1543\u1546\u0005\u020c\u0107\u0002\u1544\u1546\u0007",
    "\u040d\u0002\u0002\u1545\u1543\u0003\u0002\u0002\u0002\u1545\u1544\u0003",
    "\u0002\u0002\u0002\u1546\u0201\u0003\u0002\u0002\u0002\u1547\u1548\t",
    "Y\u0002\u0002\u1548\u0203\u0003\u0002\u0002\u0002\u1549\u154a\u0005",
    "\u0212\u010a\u0002\u154a\u154b\u0007\u03f2\u0002\u0002\u154b\u154c\u0005",
    "\u0212\u010a\u0002\u154c\u154d\u0007\u03f2\u0002\u0002\u154d\u154e\u0005",
    "\u0212\u010a\u0002\u154e\u154f\u0007\u03f2\u0002\u0002\u154f\u1550\u0005",
    "\u0212\u010a\u0002\u1550\u1551\u0007\u03f2\u0002\u0002\u1551\u1557\u0005",
    "\u0212\u010a\u0002\u1552\u1553\u0007\u0409\u0002\u0002\u1553\u1554\u0005",
    "\u0212\u010a\u0002\u1554\u1555\u0007\u03f2\u0002\u0002\u1555\u1556\u0005",
    "\u0212\u010a\u0002\u1556\u1558\u0003\u0002\u0002\u0002\u1557\u1552\u0003",
    "\u0002\u0002\u0002\u1558\u1559\u0003\u0002\u0002\u0002\u1559\u1557\u0003",
    "\u0002\u0002\u0002\u1559\u155a\u0003\u0002\u0002\u0002\u155a\u0205\u0003",
    "\u0002\u0002\u0002\u155b\u1562\u0005\u0208\u0105\u0002\u155c\u155d\u0007",
    "\u0400\u0002\u0002\u155d\u1560\u0005\u0208\u0105\u0002\u155e\u155f\u0007",
    "\u0400\u0002\u0002\u155f\u1561\u0005\u0212\u010a\u0002\u1560\u155e\u0003",
    "\u0002\u0002\u0002\u1560\u1561\u0003\u0002\u0002\u0002\u1561\u1563\u0003",
    "\u0002\u0002\u0002\u1562\u155c\u0003\u0002\u0002\u0002\u1562\u1563\u0003",
    "\u0002\u0002\u0002\u1563\u0207\u0003\u0002\u0002\u0002\u1564\u156c\u0007",
    "\u040d\u0002\u0002\u1565\u156c\u0007\u0412\u0002\u0002\u1566\u1568\u0007",
    "\u040f\u0002\u0002\u1567\u1566\u0003\u0002\u0002\u0002\u1568\u1569\u0003",
    "\u0002\u0002\u0002\u1569\u1567\u0003\u0002\u0002\u0002\u1569\u156a\u0003",
    "\u0002\u0002\u0002\u156a\u156c\u0003\u0002\u0002\u0002\u156b\u1564\u0003",
    "\u0002\u0002\u0002\u156b\u1565\u0003\u0002\u0002\u0002\u156b\u1567\u0003",
    "\u0002\u0002\u0002\u156c\u0209\u0003\u0002\u0002\u0002\u156d\u1570\u0005",
    "\u020c\u0107\u0002\u156e\u1570\u0007\u040d\u0002\u0002\u156f\u156d\u0003",
    "\u0002\u0002\u0002\u156f\u156e\u0003\u0002\u0002\u0002\u1570\u020b\u0003",
    "\u0002\u0002\u0002\u1571\u1575\u0005\u020e\u0108\u0002\u1572\u1575\u0007",
    "\u0416\u0002\u0002\u1573\u1575\u0007\u040a\u0002\u0002\u1574\u1571\u0003",
    "\u0002\u0002\u0002\u1574\u1572\u0003\u0002\u0002\u0002\u1574\u1573\u0003",
    "\u0002\u0002\u0002\u1575\u020d\u0003\u0002\u0002\u0002\u1576\u1580\u0007",
    "\u0415\u0002\u0002\u1577\u1580\u0005\u026a\u0136\u0002\u1578\u1580\u0005",
    "\u026c\u0137\u0002\u1579\u1580\u0005\u0202\u0102\u0002\u157a\u1580\u0005",
    "\u026e\u0138\u0002\u157b\u1580\u0005\u0270\u0139\u0002\u157c\u1580\u0005",
    "\u0272\u013a\u0002\u157d\u1580\u0005\u0274\u013b\u0002\u157e\u1580\u0005",
    "\u0276\u013c\u0002\u157f\u1576\u0003\u0002\u0002\u0002\u157f\u1577\u0003",
    "\u0002\u0002\u0002\u157f\u1578\u0003\u0002\u0002\u0002\u157f\u1579\u0003",
    "\u0002\u0002\u0002\u157f\u157a\u0003\u0002\u0002\u0002\u157f\u157b\u0003",
    "\u0002\u0002\u0002\u157f\u157c\u0003\u0002\u0002\u0002\u157f\u157d\u0003",
    "\u0002\u0002\u0002\u157f\u157e\u0003\u0002\u0002\u0002\u1580\u020f\u0003",
    "\u0002\u0002\u0002\u1581\u1585\u0007\u0414\u0002\u0002\u1582\u1583\u0007",
    "\u03fd\u0002\u0002\u1583\u1585\u0005\u020c\u0107\u0002\u1584\u1581\u0003",
    "\u0002\u0002\u0002\u1584\u1582\u0003\u0002\u0002\u0002\u1585\u0211\u0003",
    "\u0002\u0002\u0002\u1586\u1587\tZ\u0002\u0002\u1587\u0213\u0003\u0002",
    "\u0002\u0002\u1588\u158b\u0007\u040b\u0002\u0002\u1589\u158b\u0005\u0212",
    "\u010a\u0002\u158a\u1588\u0003\u0002\u0002\u0002\u158a\u1589\u0003\u0002",
    "\u0002\u0002\u158b\u0215\u0003\u0002\u0002\u0002\u158c\u158e\u0007\u0413",
    "\u0002\u0002\u158d\u158c\u0003\u0002\u0002\u0002\u158d\u158e\u0003\u0002",
    "\u0002\u0002\u158e\u158f\u0003\u0002\u0002\u0002\u158f\u1592\u0007\u040d",
    "\u0002\u0002\u1590\u1592\u0007\u040c\u0002\u0002\u1591\u158d\u0003\u0002",
    "\u0002\u0002\u1591\u1590\u0003\u0002\u0002\u0002\u1592\u1594\u0003\u0002",
    "\u0002\u0002\u1593\u1595\u0007\u040d\u0002\u0002\u1594\u1593\u0003\u0002",
    "\u0002\u0002\u1595\u1596\u0003\u0002\u0002\u0002\u1596\u1594\u0003\u0002",
    "\u0002\u0002\u1596\u1597\u0003\u0002\u0002\u0002\u1597\u15a4\u0003\u0002",
    "\u0002\u0002\u1598\u159a\u0007\u0413\u0002\u0002\u1599\u1598\u0003\u0002",
    "\u0002\u0002\u1599\u159a\u0003\u0002\u0002\u0002\u159a\u159b\u0003\u0002",
    "\u0002\u0002\u159b\u159e\u0007\u040d\u0002\u0002\u159c\u159e\u0007\u040c",
    "\u0002\u0002\u159d\u1599\u0003\u0002\u0002\u0002\u159d\u159c\u0003\u0002",
    "\u0002\u0002\u159e\u15a1\u0003\u0002\u0002\u0002\u159f\u15a0\u0007\u001a",
    "\u0002\u0002\u15a0\u15a2\u0005\u0200\u0101\u0002\u15a1\u159f\u0003\u0002",
    "\u0002\u0002\u15a1\u15a2\u0003\u0002\u0002\u0002\u15a2\u15a4\u0003\u0002",
    "\u0002\u0002\u15a3\u1591\u0003\u0002\u0002\u0002\u15a3\u159d\u0003\u0002",
    "\u0002\u0002\u15a4\u0217\u0003\u0002\u0002\u0002\u15a5\u15a6\t[\u0002",
    "\u0002\u15a6\u0219\u0003\u0002\u0002\u0002\u15a7\u15a9\u0007\u0413\u0002",
    "\u0002\u15a8\u15a7\u0003\u0002\u0002\u0002\u15a8\u15a9\u0003\u0002\u0002",
    "\u0002\u15a9\u15aa\u0003\u0002\u0002\u0002\u15aa\u15ab\u0007\u040f\u0002",
    "\u0002\u15ab\u021b\u0003\u0002\u0002\u0002\u15ac\u15ae\u0007h\u0002",
    "\u0002\u15ad\u15ac\u0003\u0002\u0002\u0002\u15ad\u15ae\u0003\u0002\u0002",
    "\u0002\u15ae\u15af\u0003\u0002\u0002\u0002\u15af\u15b0\t\\\u0002\u0002",
    "\u15b0\u021d\u0003\u0002\u0002\u0002\u15b1\u15be\u0005\u0216\u010c\u0002",
    "\u15b2\u15be\u0005\u0212\u010a\u0002\u15b3\u15b4\u0007\u03f2\u0002\u0002",
    "\u15b4\u15be\u0005\u0212\u010a\u0002\u15b5\u15be\u0005\u021a\u010e\u0002",
    "\u15b6\u15be\u0005\u0218\u010d\u0002\u15b7\u15be\u0007\u0410\u0002\u0002",
    "\u15b8\u15be\u0007\u0412\u0002\u0002\u15b9\u15bb\u0007h\u0002\u0002",
    "\u15ba\u15b9\u0003\u0002\u0002\u0002\u15ba\u15bb\u0003\u0002\u0002\u0002",
    "\u15bb\u15bc\u0003\u0002\u0002\u0002\u15bc\u15be\t\\\u0002\u0002\u15bd",
    "\u15b1\u0003\u0002\u0002\u0002\u15bd\u15b2\u0003\u0002\u0002\u0002\u15bd",
    "\u15b3\u0003\u0002\u0002\u0002\u15bd\u15b5\u0003\u0002\u0002\u0002\u15bd",
    "\u15b6\u0003\u0002\u0002\u0002\u15bd\u15b7\u0003\u0002\u0002\u0002\u15bd",
    "\u15b8\u0003\u0002\u0002\u0002\u15bd\u15ba\u0003\u0002\u0002\u0002\u15be",
    "\u021f\u0003\u0002\u0002\u0002\u15bf\u15c1\t]\u0002\u0002\u15c0\u15c2",
    "\u0005\u0226\u0114\u0002\u15c1\u15c0\u0003\u0002\u0002\u0002\u15c1\u15c2",
    "\u0003\u0002\u0002\u0002\u15c2\u15c4\u0003\u0002\u0002\u0002\u15c3\u15c5",
    "\u0007\u00d2\u0002\u0002\u15c4\u15c3\u0003\u0002\u0002\u0002\u15c4\u15c5",
    "\u0003\u0002\u0002\u0002\u15c5\u15cc\u0003\u0002\u0002\u0002\u15c6\u15c7",
    "\u0007\u0018\u0002\u0002\u15c7\u15ca\u0007\u008c\u0002\u0002\u15c8\u15ca",
    "\u0007\u02dd\u0002\u0002\u15c9\u15c6\u0003\u0002\u0002\u0002\u15c9\u15c8",
    "\u0003\u0002\u0002\u0002\u15ca\u15cb\u0003\u0002\u0002\u0002\u15cb\u15cd",
    "\u0005\u01fe\u0100\u0002\u15cc\u15c9\u0003\u0002\u0002\u0002\u15cc\u15cd",
    "\u0003\u0002\u0002\u0002\u15cd\u15d0\u0003\u0002\u0002\u0002\u15ce\u15cf",
    "\u0007\u001a\u0002\u0002\u15cf\u15d1\u0005\u0200\u0101\u0002\u15d0\u15ce",
    "\u0003\u0002\u0002\u0002\u15d0\u15d1\u0003\u0002\u0002\u0002\u15d1\u163f",
    "\u0003\u0002\u0002\u0002\u15d2\u15d3\u0007\u00d1\u0002\u0002\u15d3\u15d5",
    "\t^\u0002\u0002\u15d4\u15d6\u0005\u0226\u0114\u0002\u15d5\u15d4\u0003",
    "\u0002\u0002\u0002\u15d5\u15d6\u0003\u0002\u0002\u0002\u15d6\u15d8\u0003",
    "\u0002\u0002\u0002\u15d7\u15d9\u0007\u00d2\u0002\u0002\u15d8\u15d7\u0003",
    "\u0002\u0002\u0002\u15d8\u15d9\u0003\u0002\u0002\u0002\u15d9\u163f\u0003",
    "\u0002\u0002\u0002\u15da\u15db\u0007\u01bf\u0002\u0002\u15db\u15dd\u0007",
    "\u00cf\u0002\u0002\u15dc\u15de\u0005\u0226\u0114\u0002\u15dd\u15dc\u0003",
    "\u0002\u0002\u0002\u15dd\u15de\u0003\u0002\u0002\u0002\u15de\u15e0\u0003",
    "\u0002\u0002\u0002\u15df\u15e1\u0007\u00d2\u0002\u0002\u15e0\u15df\u0003",
    "\u0002\u0002\u0002\u15e0\u15e1\u0003\u0002\u0002\u0002\u15e1\u163f\u0003",
    "\u0002\u0002\u0002\u15e2\u15e3\u0007\u00d1\u0002\u0002\u15e3\u15e4\t",
    "_\u0002\u0002\u15e4\u15e6\u0007\u00de\u0002\u0002\u15e5\u15e7\u0005",
    "\u0226\u0114\u0002\u15e6\u15e5\u0003\u0002\u0002\u0002\u15e6\u15e7\u0003",
    "\u0002\u0002\u0002\u15e7\u15e9\u0003\u0002\u0002\u0002\u15e8\u15ea\u0007",
    "\u00d2\u0002\u0002\u15e9\u15e8\u0003\u0002\u0002\u0002\u15e9\u15ea\u0003",
    "\u0002\u0002\u0002\u15ea\u163f\u0003\u0002\u0002\u0002\u15eb\u15ed\t",
    "`\u0002\u0002\u15ec\u15ee\u0005\u0226\u0114\u0002\u15ed\u15ec\u0003",
    "\u0002\u0002\u0002\u15ed\u15ee\u0003\u0002\u0002\u0002\u15ee\u15f0\u0003",
    "\u0002\u0002\u0002\u15ef\u15f1\ta\u0002\u0002\u15f0\u15ef\u0003\u0002",
    "\u0002\u0002\u15f0\u15f1\u0003\u0002\u0002\u0002\u15f1\u15f3\u0003\u0002",
    "\u0002\u0002\u15f2\u15f4\u0007\u00b3\u0002\u0002\u15f3\u15f2\u0003\u0002",
    "\u0002\u0002\u15f3\u15f4\u0003\u0002\u0002\u0002\u15f4\u163f\u0003\u0002",
    "\u0002\u0002\u15f5\u15f7\u0007\u00c0\u0002\u0002\u15f6\u15f8\u0005\u0228",
    "\u0115\u0002\u15f7\u15f6\u0003\u0002\u0002\u0002\u15f7\u15f8\u0003\u0002",
    "\u0002\u0002\u15f8\u15fa\u0003\u0002\u0002\u0002\u15f9\u15fb\ta\u0002",
    "\u0002\u15fa\u15f9\u0003\u0002\u0002\u0002\u15fa\u15fb\u0003\u0002\u0002",
    "\u0002\u15fb\u15fd\u0003\u0002\u0002\u0002\u15fc\u15fe\u0007\u00b3\u0002",
    "\u0002\u15fd\u15fc\u0003\u0002\u0002\u0002\u15fd\u15fe\u0003\u0002\u0002",
    "\u0002\u15fe\u163f\u0003\u0002\u0002\u0002\u15ff\u1601\u0007\u00c1\u0002",
    "\u0002\u1600\u1602\u0007\u00c2\u0002\u0002\u1601\u1600\u0003\u0002\u0002",
    "\u0002\u1601\u1602\u0003\u0002\u0002\u0002\u1602\u1604\u0003\u0002\u0002",
    "\u0002\u1603\u1605\u0005\u0228\u0115\u0002\u1604\u1603\u0003\u0002\u0002",
    "\u0002\u1604\u1605\u0003\u0002\u0002\u0002\u1605\u1607\u0003\u0002\u0002",
    "\u0002\u1606\u1608\ta\u0002\u0002\u1607\u1606\u0003\u0002\u0002\u0002",
    "\u1607\u1608\u0003\u0002\u0002\u0002\u1608\u160a\u0003\u0002\u0002\u0002",
    "\u1609\u160b\u0007\u00b3\u0002\u0002\u160a\u1609\u0003\u0002\u0002\u0002",
    "\u160a\u160b\u0003\u0002\u0002\u0002\u160b\u163f\u0003\u0002\u0002\u0002",
    "\u160c\u160e\tb\u0002\u0002\u160d\u160f\u0005\u022a\u0116\u0002\u160e",
    "\u160d\u0003\u0002\u0002\u0002\u160e\u160f\u0003\u0002\u0002\u0002\u160f",
    "\u1611\u0003\u0002\u0002\u0002\u1610\u1612\ta\u0002\u0002\u1611\u1610",
    "\u0003\u0002\u0002\u0002\u1611\u1612\u0003\u0002\u0002\u0002\u1612\u1614",
    "\u0003\u0002\u0002\u0002\u1613\u1615\u0007\u00b3\u0002\u0002\u1614\u1613",
    "\u0003\u0002\u0002\u0002\u1614\u1615\u0003\u0002\u0002\u0002\u1615\u163f",
    "\u0003\u0002\u0002\u0002\u1616\u163f\tc\u0002\u0002\u1617\u1619\td\u0002",
    "\u0002\u1618\u161a\u0005\u0226\u0114\u0002\u1619\u1618\u0003\u0002\u0002",
    "\u0002\u1619\u161a\u0003\u0002\u0002\u0002\u161a\u163f\u0003\u0002\u0002",
    "\u0002\u161b\u161c\te\u0002\u0002\u161c\u161e\u0005\u0222\u0112\u0002",
    "\u161d\u161f\u0007\u00d2\u0002\u0002\u161e\u161d\u0003\u0002\u0002\u0002",
    "\u161e\u161f\u0003\u0002\u0002\u0002\u161f\u1626\u0003\u0002\u0002\u0002",
    "\u1620\u1621\u0007\u0018\u0002\u0002\u1621\u1624\u0007\u008c\u0002\u0002",
    "\u1622\u1624\u0007\u02dd\u0002\u0002\u1623\u1620\u0003\u0002\u0002\u0002",
    "\u1623\u1622\u0003\u0002\u0002\u0002\u1624\u1625\u0003\u0002\u0002\u0002",
    "\u1625\u1627\u0005\u01fe\u0100\u0002\u1626\u1623\u0003\u0002\u0002\u0002",
    "\u1626\u1627\u0003\u0002\u0002\u0002\u1627\u163f\u0003\u0002\u0002\u0002",
    "\u1628\u163f\tf\u0002\u0002\u1629\u162b\u0007\u00d7\u0002\u0002\u162a",
    "\u162c\u0007\u00cf\u0002\u0002\u162b\u162a\u0003\u0002\u0002\u0002\u162b",
    "\u162c\u0003\u0002\u0002\u0002\u162c\u162e\u0003\u0002\u0002\u0002\u162d",
    "\u162f\u0007\u00d2\u0002\u0002\u162e\u162d\u0003\u0002\u0002\u0002\u162e",
    "\u162f\u0003\u0002\u0002\u0002\u162f\u1636\u0003\u0002\u0002\u0002\u1630",
    "\u1631\u0007\u0018\u0002\u0002\u1631\u1634\u0007\u008c\u0002\u0002\u1632",
    "\u1634\u0007\u02dd\u0002\u0002\u1633\u1630\u0003\u0002\u0002\u0002\u1633",
    "\u1632\u0003\u0002\u0002\u0002\u1634\u1635\u0003\u0002\u0002\u0002\u1635",
    "\u1637\u0005\u01fe\u0100\u0002\u1636\u1633\u0003\u0002\u0002\u0002\u1636",
    "\u1637\u0003\u0002\u0002\u0002\u1637\u163a\u0003\u0002\u0002\u0002\u1638",
    "\u1639\u0007\u001a\u0002\u0002\u1639\u163b\u0005\u0200\u0101\u0002\u163a",
    "\u1638\u0003\u0002\u0002\u0002\u163a\u163b\u0003\u0002\u0002\u0002\u163b",
    "\u163f\u0003\u0002\u0002\u0002\u163c\u163d\u0007\u00d7\u0002\u0002\u163d",
    "\u163f\u0007\u00d3\u0002\u0002\u163e\u15bf\u0003\u0002\u0002\u0002\u163e",
    "\u15d2\u0003\u0002\u0002\u0002\u163e\u15da\u0003\u0002\u0002\u0002\u163e",
    "\u15e2\u0003\u0002\u0002\u0002\u163e\u15eb\u0003\u0002\u0002\u0002\u163e",
    "\u15f5\u0003\u0002\u0002\u0002\u163e\u15ff\u0003\u0002\u0002\u0002\u163e",
    "\u160c\u0003\u0002\u0002\u0002\u163e\u1616\u0003\u0002\u0002\u0002\u163e",
    "\u1617\u0003\u0002\u0002\u0002\u163e\u161b\u0003\u0002\u0002\u0002\u163e",
    "\u1628\u0003\u0002\u0002\u0002\u163e\u1629\u0003\u0002\u0002\u0002\u163e",
    "\u163c\u0003\u0002\u0002\u0002\u163f\u0221\u0003\u0002\u0002\u0002\u1640",
    "\u1641\u0007\u03fe\u0002\u0002\u1641\u1646\u0007\u040d\u0002\u0002\u1642",
    "\u1643\u0007\u0400\u0002\u0002\u1643\u1645\u0007\u040d\u0002\u0002\u1644",
    "\u1642\u0003\u0002\u0002\u0002\u1645\u1648\u0003\u0002\u0002\u0002\u1646",
    "\u1644\u0003\u0002\u0002\u0002\u1646\u1647\u0003\u0002\u0002\u0002\u1647",
    "\u1649\u0003\u0002\u0002\u0002\u1648\u1646\u0003\u0002\u0002\u0002\u1649",
    "\u164a\u0007\u03ff\u0002\u0002\u164a\u0223\u0003\u0002\u0002\u0002\u164b",
    "\u164d\tg\u0002\u0002\u164c\u164e\u0005\u0226\u0114\u0002\u164d\u164c",
    "\u0003\u0002\u0002\u0002\u164d\u164e\u0003\u0002\u0002\u0002\u164e\u1665",
    "\u0003\u0002\u0002\u0002\u164f\u1651\u0007\u00ce\u0002\u0002\u1650\u1652",
    "\u0005\u0226\u0114\u0002\u1651\u1650\u0003\u0002\u0002\u0002\u1651\u1652",
    "\u0003\u0002\u0002\u0002\u1652\u1659\u0003\u0002\u0002\u0002\u1653\u1654",
    "\u0007\u0018\u0002\u0002\u1654\u1657\u0007\u008c\u0002\u0002\u1655\u1657",
    "\u0007\u02dd\u0002\u0002\u1656\u1653\u0003\u0002\u0002\u0002\u1656\u1655",
    "\u0003\u0002\u0002\u0002\u1657\u1658\u0003\u0002\u0002\u0002\u1658\u165a",
    "\u0005\u01fe\u0100\u0002\u1659\u1656\u0003\u0002\u0002\u0002\u1659\u165a",
    "\u0003\u0002\u0002\u0002\u165a\u1665\u0003\u0002\u0002\u0002\u165b\u1665",
    "\th\u0002\u0002\u165c\u165e\u0007\u00c6\u0002\u0002\u165d\u165f\u0005",
    "\u0228\u0115\u0002\u165e\u165d\u0003\u0002\u0002\u0002\u165e\u165f\u0003",
    "\u0002\u0002\u0002\u165f\u1665\u0003\u0002\u0002\u0002\u1660\u1662\t",
    "a\u0002\u0002\u1661\u1663\u0007\u00be\u0002\u0002\u1662\u1661\u0003",
    "\u0002\u0002\u0002\u1662\u1663\u0003\u0002\u0002\u0002\u1663\u1665\u0003",
    "\u0002\u0002\u0002\u1664\u164b\u0003\u0002\u0002\u0002\u1664\u164f\u0003",
    "\u0002\u0002\u0002\u1664\u165b\u0003\u0002\u0002\u0002\u1664\u165c\u0003",
    "\u0002\u0002\u0002\u1664\u1660\u0003\u0002\u0002\u0002\u1665\u0225\u0003",
    "\u0002\u0002\u0002\u1666\u1667\u0007\u03fe\u0002\u0002\u1667\u1668\u0005",
    "\u0212\u010a\u0002\u1668\u1669\u0007\u03ff\u0002\u0002\u1669\u0227\u0003",
    "\u0002\u0002\u0002\u166a\u166b\u0007\u03fe\u0002\u0002\u166b\u166c\u0005",
    "\u0212\u010a\u0002\u166c\u166d\u0007\u0400\u0002\u0002\u166d\u166e\u0005",
    "\u0212\u010a\u0002\u166e\u166f\u0007\u03ff\u0002\u0002\u166f\u0229\u0003",
    "\u0002\u0002\u0002\u1670\u1671\u0007\u03fe\u0002\u0002\u1671\u1674\u0005",
    "\u0212\u010a\u0002\u1672\u1673\u0007\u0400\u0002\u0002\u1673\u1675\u0005",
    "\u0212\u010a\u0002\u1674\u1672\u0003\u0002\u0002\u0002\u1674\u1675\u0003",
    "\u0002\u0002\u0002\u1675\u1676\u0003\u0002\u0002\u0002\u1676\u1677\u0007",
    "\u03ff\u0002\u0002\u1677\u022b\u0003\u0002\u0002\u0002\u1678\u167d\u0005",
    "\u020c\u0107\u0002\u1679\u167a\u0007\u0400\u0002\u0002\u167a\u167c\u0005",
    "\u020c\u0107\u0002\u167b\u1679\u0003\u0002\u0002\u0002\u167c\u167f\u0003",
    "\u0002\u0002\u0002\u167d\u167b\u0003\u0002\u0002\u0002\u167d\u167e\u0003",
    "\u0002\u0002\u0002\u167e\u022d\u0003\u0002\u0002\u0002\u167f\u167d\u0003",
    "\u0002\u0002\u0002\u1680\u1685\u0005\u01f4\u00fb\u0002\u1681\u1682\u0007",
    "\u0400\u0002\u0002\u1682\u1684\u0005\u01f4\u00fb\u0002\u1683\u1681\u0003",
    "\u0002\u0002\u0002\u1684\u1687\u0003\u0002\u0002\u0002\u1685\u1683\u0003",
    "\u0002\u0002\u0002\u1685\u1686\u0003\u0002\u0002\u0002\u1686\u022f\u0003",
    "\u0002\u0002\u0002\u1687\u1685\u0003\u0002\u0002\u0002\u1688\u1689\u0007",
    "\u03fe\u0002\u0002\u1689\u168e\u0005\u01f8\u00fd\u0002\u168a\u168b\u0007",
    "\u0400\u0002\u0002\u168b\u168d\u0005\u01f8\u00fd\u0002\u168c\u168a\u0003",
    "\u0002\u0002\u0002\u168d\u1690\u0003\u0002\u0002\u0002\u168e\u168c\u0003",
    "\u0002\u0002\u0002\u168e\u168f\u0003\u0002\u0002\u0002\u168f\u1691\u0003",
    "\u0002\u0002\u0002\u1690\u168e\u0003\u0002\u0002\u0002\u1691\u1692\u0007",
    "\u03ff\u0002\u0002\u1692\u0231\u0003\u0002\u0002\u0002\u1693\u1698\u0005",
    "\u025a\u012e\u0002\u1694\u1695\u0007\u0400\u0002\u0002\u1695\u1697\u0005",
    "\u025a\u012e\u0002\u1696\u1694\u0003\u0002\u0002\u0002\u1697\u169a\u0003",
    "\u0002\u0002\u0002\u1698\u1696\u0003\u0002\u0002\u0002\u1698\u1699\u0003",
    "\u0002\u0002\u0002\u1699\u0233\u0003\u0002\u0002\u0002\u169a\u1698\u0003",
    "\u0002\u0002\u0002\u169b\u16a0\u0005\u0240\u0121\u0002\u169c\u169d\u0007",
    "\u0400\u0002\u0002\u169d\u169f\u0005\u0240\u0121\u0002\u169e\u169c\u0003",
    "\u0002\u0002\u0002\u169f\u16a2\u0003\u0002\u0002\u0002\u16a0\u169e\u0003",
    "\u0002\u0002\u0002\u16a0\u16a1\u0003\u0002\u0002\u0002\u16a1\u0235\u0003",
    "\u0002\u0002\u0002\u16a2\u16a0\u0003\u0002\u0002\u0002\u16a3\u16a8\u0005",
    "\u021e\u0110\u0002\u16a4\u16a5\u0007\u0400\u0002\u0002\u16a5\u16a7\u0005",
    "\u021e\u0110\u0002\u16a6\u16a4\u0003\u0002\u0002\u0002\u16a7\u16aa\u0003",
    "\u0002\u0002\u0002\u16a8\u16a6\u0003\u0002\u0002\u0002\u16a8\u16a9\u0003",
    "\u0002\u0002\u0002\u16a9\u0237\u0003\u0002\u0002\u0002\u16aa\u16a8\u0003",
    "\u0002\u0002\u0002\u16ab\u16b0\u0007\u040d\u0002\u0002\u16ac\u16ad\u0007",
    "\u0400\u0002\u0002\u16ad\u16af\u0007\u040d\u0002\u0002\u16ae\u16ac\u0003",
    "\u0002\u0002\u0002\u16af\u16b2\u0003\u0002\u0002\u0002\u16b0\u16ae\u0003",
    "\u0002\u0002\u0002\u16b0\u16b1\u0003\u0002\u0002\u0002\u16b1\u0239\u0003",
    "\u0002\u0002\u0002\u16b2\u16b0\u0003\u0002\u0002\u0002\u16b3\u16b8\u0007",
    "\u0418\u0002\u0002\u16b4\u16b5\u0007\u0400\u0002\u0002\u16b5\u16b7\u0007",
    "\u0418\u0002\u0002\u16b6\u16b4\u0003\u0002\u0002\u0002\u16b7\u16ba\u0003",
    "\u0002\u0002\u0002\u16b8\u16b6\u0003\u0002\u0002\u0002\u16b8\u16b9\u0003",
    "\u0002\u0002\u0002\u16b9\u023b\u0003\u0002\u0002\u0002\u16ba\u16b8\u0003",
    "\u0002\u0002\u0002\u16bb\u16c7\u0007j\u0002\u0002\u16bc\u16be\u0005",
    "\u0260\u0131\u0002\u16bd\u16bc\u0003\u0002\u0002\u0002\u16bd\u16be\u0003",
    "\u0002\u0002\u0002\u16be\u16bf\u0003\u0002\u0002\u0002\u16bf\u16c7\u0005",
    "\u021e\u0110\u0002\u16c0\u16c4\u0005\u023e\u0120\u0002\u16c1\u16c2\u0007",
    "l\u0002\u0002\u16c2\u16c3\u0007\u00a8\u0002\u0002\u16c3\u16c5\u0005",
    "\u023e\u0120\u0002\u16c4\u16c1\u0003\u0002\u0002\u0002\u16c4\u16c5\u0003",
    "\u0002\u0002\u0002\u16c5\u16c7\u0003\u0002\u0002\u0002\u16c6\u16bb\u0003",
    "\u0002\u0002\u0002\u16c6\u16bd\u0003\u0002\u0002\u0002\u16c6\u16c0\u0003",
    "\u0002\u0002\u0002\u16c7\u023d\u0003\u0002\u0002\u0002\u16c8\u16ce\t",
    "i\u0002\u0002\u16c9\u16cb\u0007\u03fe\u0002\u0002\u16ca\u16cc\u0005",
    "\u0212\u010a\u0002\u16cb\u16ca\u0003\u0002\u0002\u0002\u16cb\u16cc\u0003",
    "\u0002\u0002\u0002\u16cc\u16cd\u0003\u0002\u0002\u0002\u16cd\u16cf\u0007",
    "\u03ff\u0002\u0002\u16ce\u16c9\u0003\u0002\u0002\u0002\u16ce\u16cf\u0003",
    "\u0002\u0002\u0002\u16cf\u16d7\u0003\u0002\u0002\u0002\u16d0\u16d1\u0007",
    "\u0107\u0002\u0002\u16d1\u16d3\u0007\u03fe\u0002\u0002\u16d2\u16d4\u0005",
    "\u0212\u010a\u0002\u16d3\u16d2\u0003\u0002\u0002\u0002\u16d3\u16d4\u0003",
    "\u0002\u0002\u0002\u16d4\u16d5\u0003\u0002\u0002\u0002\u16d5\u16d7\u0007",
    "\u03ff\u0002\u0002\u16d6\u16c8\u0003\u0002\u0002\u0002\u16d6\u16d0\u0003",
    "\u0002\u0002\u0002\u16d7\u023f\u0003\u0002\u0002\u0002\u16d8\u16db\u0005",
    "\u025a\u012e\u0002\u16d9\u16db\u0007(\u0002\u0002\u16da\u16d8\u0003",
    "\u0002\u0002\u0002\u16da\u16d9\u0003\u0002\u0002\u0002\u16db\u0241\u0003",
    "\u0002\u0002\u0002\u16dc\u16dd\u0007G\u0002\u0002\u16dd\u16de\u0007",
    "7\u0002\u0002\u16de\u0243\u0003\u0002\u0002\u0002\u16df\u16e0\u0007",
    "G\u0002\u0002\u16e0\u16e1\u0007h\u0002\u0002\u16e1\u16e2\u00077\u0002",
    "\u0002\u16e2\u0245\u0003\u0002\u0002\u0002\u16e3\u16f5\u0005\u0248\u0125",
    "\u0002\u16e4\u16f5\u0005\u0250\u0129\u0002\u16e5\u16e6\u0005\u0252\u012a",
    "\u0002\u16e6\u16e8\u0007\u03fe\u0002\u0002\u16e7\u16e9\u0005\u0256\u012c",
    "\u0002\u16e8\u16e7\u0003\u0002\u0002\u0002\u16e8\u16e9\u0003\u0002\u0002",
    "\u0002\u16e9\u16ea\u0003\u0002\u0002\u0002\u16ea\u16eb\u0007\u03ff\u0002",
    "\u0002\u16eb\u16f5\u0003\u0002\u0002\u0002\u16ec\u16ed\u0005\u01f2\u00fa",
    "\u0002\u16ed\u16ef\u0007\u03fe\u0002\u0002\u16ee\u16f0\u0005\u0256\u012c",
    "\u0002\u16ef\u16ee\u0003\u0002\u0002\u0002\u16ef\u16f0\u0003\u0002\u0002",
    "\u0002\u16f0\u16f1\u0003\u0002\u0002\u0002\u16f1\u16f2\u0007\u03ff\u0002",
    "\u0002\u16f2\u16f5\u0003\u0002\u0002\u0002\u16f3\u16f5\u0005\u0254\u012b",
    "\u0002\u16f4\u16e3\u0003\u0002\u0002\u0002\u16f4\u16e4\u0003\u0002\u0002",
    "\u0002\u16f4\u16e5\u0003\u0002\u0002\u0002\u16f4\u16ec\u0003\u0002\u0002",
    "\u0002\u16f4\u16f3\u0003\u0002\u0002\u0002\u16f5\u0247\u0003\u0002\u0002",
    "\u0002\u16f6\u1794\tj\u0002\u0002\u16f7\u16f8\u0007\u001f\u0002\u0002",
    "\u16f8\u16f9\u0007\u03fe\u0002\u0002\u16f9\u16fa\u0005\u025a\u012e\u0002",
    "\u16fa\u16fb\u0007\u0400\u0002\u0002\u16fb\u16fc\u0005\u0224\u0113\u0002",
    "\u16fc\u16fd\u0007\u03ff\u0002\u0002\u16fd\u1794\u0003\u0002\u0002\u0002",
    "\u16fe\u16ff\u0007\u001f\u0002\u0002\u16ff\u1700\u0007\u03fe\u0002\u0002",
    "\u1700\u1701\u0005\u025a\u012e\u0002\u1701\u1702\u0007\u00ab\u0002\u0002",
    "\u1702\u1703\u0005\u01fe\u0100\u0002\u1703\u1704\u0007\u03ff\u0002\u0002",
    "\u1704\u1794\u0003\u0002\u0002\u0002\u1705\u1706\u0007\u0016\u0002\u0002",
    "\u1706\u1707\u0007\u03fe\u0002\u0002\u1707\u1708\u0005\u025a\u012e\u0002",
    "\u1708\u1709\u0007\r\u0002\u0002\u1709\u170a\u0005\u0224\u0113\u0002",
    "\u170a\u170b\u0007\u03ff\u0002\u0002\u170b\u1794\u0003\u0002\u0002\u0002",
    "\u170c\u170d\u0007\u00ac\u0002\u0002\u170d\u170e\u0007\u03fe\u0002\u0002",
    "\u170e\u170f\u0005\u01f6\u00fc\u0002\u170f\u1710\u0007\u03ff\u0002\u0002",
    "\u1710\u1794\u0003\u0002\u0002\u0002\u1711\u1712\u0007\u0015\u0002\u0002",
    "\u1712\u1714\u0005\u025a\u012e\u0002\u1713\u1715\u0005\u024a\u0126\u0002",
    "\u1714\u1713\u0003\u0002\u0002\u0002\u1715\u1716\u0003\u0002\u0002\u0002",
    "\u1716\u1714\u0003\u0002\u0002\u0002\u1716\u1717\u0003\u0002\u0002\u0002",
    "\u1717\u171a\u0003\u0002\u0002\u0002\u1718\u1719\u00073\u0002\u0002",
    "\u1719\u171b\u0005\u0258\u012d\u0002\u171a\u1718\u0003\u0002\u0002\u0002",
    "\u171a\u171b\u0003\u0002\u0002\u0002\u171b\u171c\u0003\u0002\u0002\u0002",
    "\u171c\u171d\u0007\u0156\u0002\u0002\u171d\u1794\u0003\u0002\u0002\u0002",
    "\u171e\u1720\u0007\u0015\u0002\u0002\u171f\u1721\u0005\u024a\u0126\u0002",
    "\u1720\u171f\u0003\u0002\u0002\u0002\u1721\u1722\u0003\u0002\u0002\u0002",
    "\u1722\u1720\u0003\u0002\u0002\u0002\u1722\u1723\u0003\u0002\u0002\u0002",
    "\u1723\u1726\u0003\u0002\u0002\u0002\u1724\u1725\u00073\u0002\u0002",
    "\u1725\u1727\u0005\u0258\u012d\u0002\u1726\u1724\u0003\u0002\u0002\u0002",
    "\u1726\u1727\u0003\u0002\u0002\u0002\u1727\u1728\u0003\u0002\u0002\u0002",
    "\u1728\u1729\u0007\u0156\u0002\u0002\u1729\u1794\u0003\u0002\u0002\u0002",
    "\u172a\u172b\u0007\u00ce\u0002\u0002\u172b\u172c\u0007\u03fe\u0002\u0002",
    "\u172c\u172f\u0005\u0256\u012c\u0002\u172d\u172e\u0007\u00ab\u0002\u0002",
    "\u172e\u1730\u0005\u01fe\u0100\u0002\u172f\u172d\u0003\u0002\u0002\u0002",
    "\u172f\u1730\u0003\u0002\u0002\u0002\u1730\u1731\u0003\u0002\u0002\u0002",
    "\u1731\u1732\u0007\u03ff\u0002\u0002\u1732\u1794\u0003\u0002\u0002\u0002",
    "\u1733\u1734\u0007\u0108\u0002\u0002\u1734\u1737\u0007\u03fe\u0002\u0002",
    "\u1735\u1738\u0005\u0216\u010c\u0002\u1736\u1738\u0005\u025a\u012e\u0002",
    "\u1737\u1735\u0003\u0002\u0002\u0002\u1737\u1736\u0003\u0002\u0002\u0002",
    "\u1738\u1739\u0003\u0002\u0002\u0002\u1739\u173c\u0007I\u0002\u0002",
    "\u173a\u173d\u0005\u0216\u010c\u0002\u173b\u173d\u0005\u025a\u012e\u0002",
    "\u173c\u173a\u0003\u0002\u0002\u0002\u173c\u173b\u0003\u0002\u0002\u0002",
    "\u173d\u173e\u0003\u0002\u0002\u0002\u173e\u173f\u0007\u03ff\u0002\u0002",
    "\u173f\u1794\u0003\u0002\u0002\u0002\u1740\u1741\tk\u0002\u0002\u1741",
    "\u1744\u0007\u03fe\u0002\u0002\u1742\u1745\u0005\u0216\u010c\u0002\u1743",
    "\u1745\u0005\u025a\u012e\u0002\u1744\u1742\u0003\u0002\u0002\u0002\u1744",
    "\u1743\u0003\u0002\u0002\u0002\u1745\u1746\u0003\u0002\u0002\u0002\u1746",
    "\u1749\u0007?\u0002\u0002\u1747\u174a\u0005\u0212\u010a\u0002\u1748",
    "\u174a\u0005\u025a\u012e\u0002\u1749\u1747\u0003\u0002\u0002\u0002\u1749",
    "\u1748\u0003\u0002\u0002\u0002\u174a\u1750\u0003\u0002\u0002\u0002\u174b",
    "\u174e\u0007<\u0002\u0002\u174c\u174f\u0005\u0212\u010a\u0002\u174d",
    "\u174f\u0005\u025a\u012e\u0002\u174e\u174c\u0003\u0002\u0002\u0002\u174e",
    "\u174d\u0003\u0002\u0002\u0002\u174f\u1751\u0003\u0002\u0002\u0002\u1750",
    "\u174b\u0003\u0002\u0002\u0002\u1750\u1751\u0003\u0002\u0002\u0002\u1751",
    "\u1752\u0003\u0002\u0002\u0002\u1752\u1753\u0007\u03ff\u0002\u0002\u1753",
    "\u1794\u0003\u0002\u0002\u0002\u1754\u1755\u0007\u010c\u0002\u0002\u1755",
    "\u1756\u0007\u03fe\u0002\u0002\u1756\u1759\tl\u0002\u0002\u1757\u175a",
    "\u0005\u0216\u010c\u0002\u1758\u175a\u0005\u025a\u012e\u0002\u1759\u1757",
    "\u0003\u0002\u0002\u0002\u1759\u1758\u0003\u0002\u0002\u0002\u1759\u175a",
    "\u0003\u0002\u0002\u0002\u175a\u175b\u0003\u0002\u0002\u0002\u175b\u175e",
    "\u0007?\u0002\u0002\u175c\u175f\u0005\u0216\u010c\u0002\u175d\u175f",
    "\u0005\u025a\u012e\u0002\u175e\u175c\u0003\u0002\u0002\u0002\u175e\u175d",
    "\u0003\u0002\u0002\u0002\u175f\u1760\u0003\u0002\u0002\u0002\u1760\u1761",
    "\u0007\u03ff\u0002\u0002\u1761\u1794\u0003\u0002\u0002\u0002\u1762\u1763",
    "\u0007\u010c\u0002\u0002\u1763\u1766\u0007\u03fe\u0002\u0002\u1764\u1767",
    "\u0005\u0216\u010c\u0002\u1765\u1767\u0005\u025a\u012e\u0002\u1766\u1764",
    "\u0003\u0002\u0002\u0002\u1766\u1765\u0003\u0002\u0002\u0002\u1767\u1768",
    "\u0003\u0002\u0002\u0002\u1768\u176b\u0007?\u0002\u0002\u1769\u176c",
    "\u0005\u0216\u010c\u0002\u176a\u176c\u0005\u025a\u012e\u0002\u176b\u1769",
    "\u0003\u0002\u0002\u0002\u176b\u176a\u0003\u0002\u0002\u0002\u176c\u176d",
    "\u0003\u0002\u0002\u0002\u176d\u176e\u0007\u03ff\u0002\u0002\u176e\u1794",
    "\u0003\u0002\u0002\u0002\u176f\u1770\u0007\u03df\u0002\u0002\u1770\u1773",
    "\u0007\u03fe\u0002\u0002\u1771\u1774\u0005\u0216\u010c\u0002\u1772\u1774",
    "\u0005\u025a\u012e\u0002\u1773\u1771\u0003\u0002\u0002\u0002\u1773\u1772",
    "\u0003\u0002\u0002\u0002\u1774\u177b\u0003\u0002\u0002\u0002\u1775\u1776",
    "\u0007\r\u0002\u0002\u1776\u1777\tm\u0002\u0002\u1777\u1778\u0007\u03fe",
    "\u0002\u0002\u1778\u1779\u0005\u0212\u010a\u0002\u1779\u177a\u0007\u03ff",
    "\u0002\u0002\u177a\u177c\u0003\u0002\u0002\u0002\u177b\u1775\u0003\u0002",
    "\u0002\u0002\u177b\u177c\u0003\u0002\u0002\u0002\u177c\u177e\u0003\u0002",
    "\u0002\u0002\u177d\u177f\u0005\u024c\u0127\u0002\u177e\u177d\u0003\u0002",
    "\u0002\u0002\u177e\u177f\u0003\u0002\u0002\u0002\u177f\u1780\u0003\u0002",
    "\u0002\u0002\u1780\u1781\u0007\u03ff\u0002\u0002\u1781\u1794\u0003\u0002",
    "\u0002\u0002\u1782\u1783\u0007\u0105\u0002\u0002\u1783\u1784\u0007\u03fe",
    "\u0002\u0002\u1784\u1785\u0005<\u001f\u0002\u1785\u1788\u0007?\u0002",
    "\u0002\u1786\u1789\u0005\u0216\u010c\u0002\u1787\u1789\u0005\u025a\u012e",
    "\u0002\u1788\u1786\u0003\u0002\u0002\u0002\u1788\u1787\u0003\u0002\u0002",
    "\u0002\u1789\u178a\u0003\u0002\u0002\u0002\u178a\u178b\u0007\u03ff\u0002",
    "\u0002\u178b\u1794\u0003\u0002\u0002\u0002\u178c\u178d\u0007\u0317\u0002",
    "\u0002\u178d\u178e\u0007\u03fe\u0002\u0002\u178e\u178f\tn\u0002\u0002",
    "\u178f\u1790\u0007\u0400\u0002\u0002\u1790\u1791\u0005\u0216\u010c\u0002",
    "\u1791\u1792\u0007\u03ff\u0002\u0002\u1792\u1794\u0003\u0002\u0002\u0002",
    "\u1793\u16f6\u0003\u0002\u0002\u0002\u1793\u16f7\u0003\u0002\u0002\u0002",
    "\u1793\u16fe\u0003\u0002\u0002\u0002\u1793\u1705\u0003\u0002\u0002\u0002",
    "\u1793\u170c\u0003\u0002\u0002\u0002\u1793\u1711\u0003\u0002\u0002\u0002",
    "\u1793\u171e\u0003\u0002\u0002\u0002\u1793\u172a\u0003\u0002\u0002\u0002",
    "\u1793\u1733\u0003\u0002\u0002\u0002\u1793\u1740\u0003\u0002\u0002\u0002",
    "\u1793\u1754\u0003\u0002\u0002\u0002\u1793\u1762\u0003\u0002\u0002\u0002",
    "\u1793\u176f\u0003\u0002\u0002\u0002\u1793\u1782\u0003\u0002\u0002\u0002",
    "\u1793\u178c\u0003\u0002\u0002\u0002\u1794\u0249\u0003\u0002\u0002\u0002",
    "\u1795\u1796\u0007\u00ad\u0002\u0002\u1796\u1797\u0005\u0258\u012d\u0002",
    "\u1797\u1798\u0007\u009e\u0002\u0002\u1798\u1799\u0005\u0258\u012d\u0002",
    "\u1799\u024b\u0003\u0002\u0002\u0002\u179a\u179b\u0007\u0192\u0002\u0002",
    "\u179b\u17a0\u0005\u024e\u0128\u0002\u179c\u179d\u0007\u0400\u0002\u0002",
    "\u179d\u179f\u0005\u024e\u0128\u0002\u179e\u179c\u0003\u0002\u0002\u0002",
    "\u179f\u17a2\u0003\u0002\u0002\u0002\u17a0\u179e\u0003\u0002\u0002\u0002",
    "\u17a0\u17a1\u0003\u0002\u0002\u0002\u17a1\u17a9\u0003\u0002\u0002\u0002",
    "\u17a2\u17a0\u0003\u0002\u0002\u0002\u17a3\u17a4\u0007\u0192\u0002\u0002",
    "\u17a4\u17a5\u0005\u0212\u010a\u0002\u17a5\u17a6\u0007\u03f2\u0002\u0002",
    "\u17a6\u17a7\u0005\u0212\u010a\u0002\u17a7\u17a9\u0003\u0002\u0002\u0002",
    "\u17a8\u179a\u0003\u0002\u0002\u0002\u17a8\u17a3\u0003\u0002\u0002\u0002",
    "\u17a9\u024d\u0003\u0002\u0002\u0002\u17aa\u17ac\u0005\u0212\u010a\u0002",
    "\u17ab\u17ad\to\u0002\u0002\u17ac\u17ab\u0003\u0002\u0002\u0002\u17ac",
    "\u17ad\u0003\u0002\u0002\u0002\u17ad\u024f\u0003\u0002\u0002\u0002\u17ae",
    "\u17af\tp\u0002\u0002\u17af\u17b1\u0007\u03fe\u0002\u0002\u17b0\u17b2",
    "\t(\u0002\u0002\u17b1\u17b0\u0003\u0002\u0002\u0002\u17b1\u17b2\u0003",
    "\u0002\u0002\u0002\u17b2\u17b3\u0003\u0002\u0002\u0002\u17b3\u17b4\u0005",
    "\u0258\u012d\u0002\u17b4\u17b5\u0007\u03ff\u0002\u0002\u17b5\u17e7\u0003",
    "\u0002\u0002\u0002\u17b6\u17b7\u0007\u00f1\u0002\u0002\u17b7\u17bd\u0007",
    "\u03fe\u0002\u0002\u17b8\u17be\u0007\u03ed\u0002\u0002\u17b9\u17bb\u0007",
    "\b\u0002\u0002\u17ba\u17b9\u0003\u0002\u0002\u0002\u17ba\u17bb\u0003",
    "\u0002\u0002\u0002\u17bb\u17bc\u0003\u0002\u0002\u0002\u17bc\u17be\u0005",
    "\u0258\u012d\u0002\u17bd\u17b8\u0003\u0002\u0002\u0002\u17bd\u17ba\u0003",
    "\u0002\u0002\u0002\u17be\u17bf\u0003\u0002\u0002\u0002\u17bf\u17e7\u0007",
    "\u03ff\u0002\u0002\u17c0\u17c1\u0007\u00f1\u0002\u0002\u17c1\u17c2\u0007",
    "\u03fe\u0002\u0002\u17c2\u17c3\u0007/\u0002\u0002\u17c3\u17c4\u0005",
    "\u0256\u012c\u0002\u17c4\u17c5\u0007\u03ff\u0002\u0002\u17c5\u17e7\u0003",
    "\u0002\u0002\u0002\u17c6\u17c7\tq\u0002\u0002\u17c7\u17c9\u0007\u03fe",
    "\u0002\u0002\u17c8\u17ca\u0007\b\u0002\u0002\u17c9\u17c8\u0003\u0002",
    "\u0002\u0002\u17c9\u17ca\u0003\u0002\u0002\u0002\u17ca\u17cb\u0003\u0002",
    "\u0002\u0002\u17cb\u17cc\u0005\u0258\u012d\u0002\u17cc\u17cd\u0007\u03ff",
    "\u0002\u0002\u17cd\u17e7\u0003\u0002\u0002\u0002\u17ce\u17cf\u0007\u00f2",
    "\u0002\u0002\u17cf\u17d1\u0007\u03fe\u0002\u0002\u17d0\u17d2\u0007/",
    "\u0002\u0002\u17d1\u17d0\u0003\u0002\u0002\u0002\u17d1\u17d2\u0003\u0002",
    "\u0002\u0002\u17d2\u17d3\u0003\u0002\u0002\u0002\u17d3\u17de\u0005\u0256",
    "\u012c\u0002\u17d4\u17d5\u0007q\u0002\u0002\u17d5\u17d6\u0007\u0012",
    "\u0002\u0002\u17d6\u17db\u0005\u00d2j\u0002\u17d7\u17d8\u0007\u0400",
    "\u0002\u0002\u17d8\u17da\u0005\u00d2j\u0002\u17d9\u17d7\u0003\u0002",
    "\u0002\u0002\u17da\u17dd\u0003\u0002\u0002\u0002\u17db\u17d9\u0003\u0002",
    "\u0002\u0002\u17db\u17dc\u0003\u0002\u0002\u0002\u17dc\u17df\u0003\u0002",
    "\u0002\u0002\u17dd\u17db\u0003\u0002\u0002\u0002\u17de\u17d4\u0003\u0002",
    "\u0002\u0002\u17de\u17df\u0003\u0002\u0002\u0002\u17df\u17e2\u0003\u0002",
    "\u0002\u0002\u17e0\u17e1\u0007\u008d\u0002\u0002\u17e1\u17e3\u0007\u040d",
    "\u0002\u0002\u17e2\u17e0\u0003\u0002\u0002\u0002\u17e2\u17e3\u0003\u0002",
    "\u0002\u0002\u17e3\u17e4\u0003\u0002\u0002\u0002\u17e4\u17e5\u0007\u03ff",
    "\u0002\u0002\u17e5\u17e7\u0003\u0002\u0002\u0002\u17e6\u17ae\u0003\u0002",
    "\u0002\u0002\u17e6\u17b6\u0003\u0002\u0002\u0002\u17e6\u17c0\u0003\u0002",
    "\u0002\u0002\u17e6\u17c6\u0003\u0002\u0002\u0002\u17e6\u17ce\u0003\u0002",
    "\u0002\u0002\u17e7\u0251\u0003\u0002\u0002\u0002\u17e8\u1800\u0005\u0276",
    "\u013c\u0002\u17e9\u1800\u0007\u0280\u0002\u0002\u17ea\u1800\u0007\u0101",
    "\u0002\u0002\u17eb\u1800\u0007\u00fd\u0002\u0002\u17ec\u1800\u0007\u00fe",
    "\u0002\u0002\u17ed\u1800\u0007\u00ff\u0002\u0002\u17ee\u1800\u0007\u0102",
    "\u0002\u0002\u17ef\u1800\u0007\u0103\u0002\u0002\u17f0\u1800\u0007\u0104",
    "\u0002\u0002\u17f1\u1800\u0007G\u0002\u0002\u17f2\u1800\u0007N\u0002",
    "\u0002\u17f3\u1800\u0007\u0100\u0002\u0002\u17f4\u1800\u0007\u0106\u0002",
    "\u0002\u17f5\u1800\u0007\u01b5\u0002\u0002\u17f6\u1800\u0007\u0107\u0002",
    "\u0002\u17f7\u1800\u0007\u0081\u0002\u0002\u17f8\u1800\u0007\u0109\u0002",
    "\u0002\u17f9\u1800\u0007\u010a\u0002\u0002\u17fa\u1800\u0007\u010b\u0002",
    "\u0002\u17fb\u1800\u0007\u010c\u0002\u0002\u17fc\u1800\u0007\u010d\u0002",
    "\u0002\u17fd\u1800\u0007\u010e\u0002\u0002\u17fe\u1800\u0007\u010f\u0002",
    "\u0002\u17ff\u17e8\u0003\u0002\u0002\u0002\u17ff\u17e9\u0003\u0002\u0002",
    "\u0002\u17ff\u17ea\u0003\u0002\u0002\u0002\u17ff\u17eb\u0003\u0002\u0002",
    "\u0002\u17ff\u17ec\u0003\u0002\u0002\u0002\u17ff\u17ed\u0003\u0002\u0002",
    "\u0002\u17ff\u17ee\u0003\u0002\u0002\u0002\u17ff\u17ef\u0003\u0002\u0002",
    "\u0002\u17ff\u17f0\u0003\u0002\u0002\u0002\u17ff\u17f1\u0003\u0002\u0002",
    "\u0002\u17ff\u17f2\u0003\u0002\u0002\u0002\u17ff\u17f3\u0003\u0002\u0002",
    "\u0002\u17ff\u17f4\u0003\u0002\u0002\u0002\u17ff\u17f5\u0003\u0002\u0002",
    "\u0002\u17ff\u17f6\u0003\u0002\u0002\u0002\u17ff\u17f7\u0003\u0002\u0002",
    "\u0002\u17ff\u17f8\u0003\u0002\u0002\u0002\u17ff\u17f9\u0003\u0002\u0002",
    "\u0002\u17ff\u17fa\u0003\u0002\u0002\u0002\u17ff\u17fb\u0003\u0002\u0002",
    "\u0002\u17ff\u17fc\u0003\u0002\u0002\u0002\u17ff\u17fd\u0003\u0002\u0002",
    "\u0002\u17ff\u17fe\u0003\u0002\u0002\u0002\u1800\u0253\u0003\u0002\u0002",
    "\u0002\u1801\u1802\tr\u0002\u0002\u1802\u1803\u0007\u03fe\u0002\u0002",
    "\u1803\u1804\u0005\u0258\u012d\u0002\u1804\u1805\u0007\u03ff\u0002\u0002",
    "\u1805\u0255\u0003\u0002\u0002\u0002\u1806\u180b\u0005\u021e\u0110\u0002",
    "\u1807\u180b\u0005\u01f6\u00fc\u0002\u1808\u180b\u0005\u0246\u0124\u0002",
    "\u1809\u180b\u0005\u025a\u012e\u0002\u180a\u1806\u0003\u0002\u0002\u0002",
    "\u180a\u1807\u0003\u0002\u0002\u0002\u180a\u1808\u0003\u0002\u0002\u0002",
    "\u180a\u1809\u0003\u0002\u0002\u0002\u180b\u1815\u0003\u0002\u0002\u0002",
    "\u180c\u1811\u0007\u0400\u0002\u0002\u180d\u1812\u0005\u021e\u0110\u0002",
    "\u180e\u1812\u0005\u01f6\u00fc\u0002\u180f\u1812\u0005\u0246\u0124\u0002",
    "\u1810\u1812\u0005\u025a\u012e\u0002\u1811\u180d\u0003\u0002\u0002\u0002",
    "\u1811\u180e\u0003\u0002\u0002\u0002\u1811\u180f\u0003\u0002\u0002\u0002",
    "\u1811\u1810\u0003\u0002\u0002\u0002\u1812\u1814\u0003\u0002\u0002\u0002",
    "\u1813\u180c\u0003\u0002\u0002\u0002\u1814\u1817\u0003\u0002\u0002\u0002",
    "\u1815\u1813\u0003\u0002\u0002\u0002\u1815\u1816\u0003\u0002\u0002\u0002",
    "\u1816\u0257\u0003\u0002\u0002\u0002\u1817\u1815\u0003\u0002\u0002\u0002",
    "\u1818\u181d\u0005\u021e\u0110\u0002\u1819\u181d\u0005\u01f6\u00fc\u0002",
    "\u181a\u181d\u0005\u0246\u0124\u0002\u181b\u181d\u0005\u025a\u012e\u0002",
    "\u181c\u1818\u0003\u0002\u0002\u0002\u181c\u1819\u0003\u0002\u0002\u0002",
    "\u181c\u181a\u0003\u0002\u0002\u0002\u181c\u181b\u0003\u0002\u0002\u0002",
    "\u181d\u0259\u0003\u0002\u0002\u0002\u181e\u181f\b\u012e\u0001\u0002",
    "\u181f\u1820\ts\u0002\u0002\u1820\u182a\u0005\u025a\u012e\u0006\u1821",
    "\u1822\u0005\u025c\u012f\u0002\u1822\u1824\u0007Q\u0002\u0002\u1823",
    "\u1825\u0007h\u0002\u0002\u1824\u1823\u0003\u0002\u0002\u0002\u1824",
    "\u1825\u0003\u0002\u0002\u0002\u1825\u1826\u0003\u0002\u0002\u0002\u1826",
    "\u1827\tt\u0002\u0002\u1827\u182a\u0003\u0002\u0002\u0002\u1828\u182a",
    "\u0005\u025c\u012f\u0002\u1829\u181e\u0003\u0002\u0002\u0002\u1829\u1821",
    "\u0003\u0002\u0002\u0002\u1829\u1828\u0003\u0002\u0002\u0002\u182a\u1831",
    "\u0003\u0002\u0002\u0002\u182b\u182c\f\u0005\u0002\u0002\u182c\u182d",
    "\u0005\u0264\u0133\u0002\u182d\u182e\u0005\u025a\u012e\u0006\u182e\u1830",
    "\u0003\u0002\u0002\u0002\u182f\u182b\u0003\u0002\u0002\u0002\u1830\u1833",
    "\u0003\u0002\u0002\u0002\u1831\u182f\u0003\u0002\u0002\u0002\u1831\u1832",
    "\u0003\u0002\u0002\u0002\u1832\u025b\u0003\u0002\u0002\u0002\u1833\u1831",
    "\u0003\u0002\u0002\u0002\u1834\u1837\b\u012f\u0001\u0002\u1835\u1836",
    "\u0007\u0418\u0002\u0002\u1836\u1838\u0007\u03e4\u0002\u0002\u1837\u1835",
    "\u0003\u0002\u0002\u0002\u1837\u1838\u0003\u0002\u0002\u0002\u1838\u1839",
    "\u0003\u0002\u0002\u0002\u1839\u183a\u0005\u025e\u0130\u0002\u183a\u1874",
    "\u0003\u0002\u0002\u0002\u183b\u183c\f\t\u0002\u0002\u183c\u183d\u0005",
    "\u0262\u0132\u0002\u183d\u183e\u0005\u025c\u012f\n\u183e\u1873\u0003",
    "\u0002\u0002\u0002\u183f\u1841\f\u0007\u0002\u0002\u1840\u1842\u0007",
    "h\u0002\u0002\u1841\u1840\u0003\u0002\u0002\u0002\u1841\u1842\u0003",
    "\u0002\u0002\u0002\u1842\u1843\u0003\u0002\u0002\u0002\u1843\u1844\u0007",
    "\u0010\u0002\u0002\u1844\u1845\u0005\u025c\u012f\u0002\u1845\u1846\u0007",
    "\f\u0002\u0002\u1846\u1847\u0005\u025c\u012f\b\u1847\u1873\u0003\u0002",
    "\u0002\u0002\u1848\u1849\f\u0006\u0002\u0002\u1849\u184a\u0007\u0213",
    "\u0002\u0002\u184a\u184b\u0007Z\u0002\u0002\u184b\u1873\u0005\u025c",
    "\u012f\u0007\u184c\u184e\f\u0004\u0002\u0002\u184d\u184f\u0007h\u0002",
    "\u0002\u184e\u184d\u0003\u0002\u0002\u0002\u184e\u184f\u0003\u0002\u0002",
    "\u0002\u184f\u1850\u0003\u0002\u0002\u0002\u1850\u1851\tu\u0002\u0002",
    "\u1851\u1873\u0005\u025c\u012f\u0005\u1852\u1854\f\u000b\u0002\u0002",
    "\u1853\u1855\u0007h\u0002\u0002\u1854\u1853\u0003\u0002\u0002\u0002",
    "\u1854\u1855\u0003\u0002\u0002\u0002\u1855\u1856\u0003\u0002\u0002\u0002",
    "\u1856\u1857\u0007I\u0002\u0002\u1857\u185a\u0007\u03fe\u0002\u0002",
    "\u1858\u185b\u0005\u00b4[\u0002\u1859\u185b\u0005\u0232\u011a\u0002",
    "\u185a\u1858\u0003\u0002\u0002\u0002\u185a\u1859\u0003\u0002\u0002\u0002",
    "\u185b\u185c\u0003\u0002\u0002\u0002\u185c\u185d\u0007\u03ff\u0002\u0002",
    "\u185d\u1873\u0003\u0002\u0002\u0002\u185e\u185f\f\n\u0002\u0002\u185f",
    "\u1860\u0007Q\u0002\u0002\u1860\u1873\u0005\u021c\u010f\u0002\u1861",
    "\u1862\f\b\u0002\u0002\u1862\u1863\u0005\u0262\u0132\u0002\u1863\u1864",
    "\tv\u0002\u0002\u1864\u1865\u0007\u03fe\u0002\u0002\u1865\u1866\u0005",
    "\u00b4[\u0002\u1866\u1867\u0007\u03ff\u0002\u0002\u1867\u1873\u0003",
    "\u0002\u0002\u0002\u1868\u186a\f\u0005\u0002\u0002\u1869\u186b\u0007",
    "h\u0002\u0002\u186a\u1869\u0003\u0002\u0002\u0002\u186a\u186b\u0003",
    "\u0002\u0002\u0002\u186b\u186c\u0003\u0002\u0002\u0002\u186c\u186d\u0007",
    "Z\u0002\u0002\u186d\u1870\u0005\u025c\u012f\u0002\u186e\u186f\u0007",
    "\u015c\u0002\u0002\u186f\u1871\u0007\u040d\u0002\u0002\u1870\u186e\u0003",
    "\u0002\u0002\u0002\u1870\u1871\u0003\u0002\u0002\u0002\u1871\u1873\u0003",
    "\u0002\u0002\u0002\u1872\u183b\u0003\u0002\u0002\u0002\u1872\u183f\u0003",
    "\u0002\u0002\u0002\u1872\u1848\u0003\u0002\u0002\u0002\u1872\u184c\u0003",
    "\u0002\u0002\u0002\u1872\u1852\u0003\u0002\u0002\u0002\u1872\u185e\u0003",
    "\u0002\u0002\u0002\u1872\u1861\u0003\u0002\u0002\u0002\u1872\u1868\u0003",
    "\u0002\u0002\u0002\u1873\u1876\u0003\u0002\u0002\u0002\u1874\u1872\u0003",
    "\u0002\u0002\u0002\u1874\u1875\u0003\u0002\u0002\u0002\u1875\u025d\u0003",
    "\u0002\u0002\u0002\u1876\u1874\u0003\u0002\u0002\u0002\u1877\u1878\b",
    "\u0130\u0001\u0002\u1878\u18a5\u0005\u021e\u0110\u0002\u1879\u18a5\u0005",
    "\u01f6\u00fc\u0002\u187a\u18a5\u0005\u0246\u0124\u0002\u187b\u18a5\u0005",
    "\u01fc\u00ff\u0002\u187c\u187d\u0005\u0260\u0131\u0002\u187d\u187e\u0005",
    "\u025e\u0130\u000b\u187e\u18a5\u0003\u0002\u0002\u0002\u187f\u1880\u0007",
    "\u00d2\u0002\u0002\u1880\u18a5\u0005\u025e\u0130\n\u1881\u1882\u0007",
    "\u03fe\u0002\u0002\u1882\u1887\u0005\u025a\u012e\u0002\u1883\u1884\u0007",
    "\u0400\u0002\u0002\u1884\u1886\u0005\u025a\u012e\u0002\u1885\u1883\u0003",
    "\u0002\u0002\u0002\u1886\u1889\u0003\u0002\u0002\u0002\u1887\u1885\u0003",
    "\u0002\u0002\u0002\u1887\u1888\u0003\u0002\u0002\u0002\u1888\u188a\u0003",
    "\u0002\u0002\u0002\u1889\u1887\u0003\u0002\u0002\u0002\u188a\u188b\u0007",
    "\u03ff\u0002\u0002\u188b\u18a5\u0003\u0002\u0002\u0002\u188c\u188d\u0007",
    "\u0201\u0002\u0002\u188d\u188e\u0007\u03fe\u0002\u0002\u188e\u1891\u0005",
    "\u025a\u012e\u0002\u188f\u1890\u0007\u0400\u0002\u0002\u1890\u1892\u0005",
    "\u025a\u012e\u0002\u1891\u188f\u0003\u0002\u0002\u0002\u1892\u1893\u0003",
    "\u0002\u0002\u0002\u1893\u1891\u0003\u0002\u0002\u0002\u1893\u1894\u0003",
    "\u0002\u0002\u0002\u1894\u1895\u0003\u0002\u0002\u0002\u1895\u1896\u0007",
    "\u03ff\u0002\u0002\u1896\u18a5\u0003\u0002\u0002\u0002\u1897\u1898\u0007",
    "7\u0002\u0002\u1898\u1899\u0007\u03fe\u0002\u0002\u1899\u189a\u0005",
    "\u00b4[\u0002\u189a\u189b\u0007\u03ff\u0002\u0002\u189b\u18a5\u0003",
    "\u0002\u0002\u0002\u189c\u189d\u0007\u03fe\u0002\u0002\u189d\u189e\u0005",
    "\u00b4[\u0002\u189e\u189f\u0007\u03ff\u0002\u0002\u189f\u18a5\u0003",
    "\u0002\u0002\u0002\u18a0\u18a1\u0007O\u0002\u0002\u18a1\u18a2\u0005",
    "\u025a\u012e\u0002\u18a2\u18a3\u0005<\u001f\u0002\u18a3\u18a5\u0003",
    "\u0002\u0002\u0002\u18a4\u1877\u0003\u0002\u0002\u0002\u18a4\u1879\u0003",
    "\u0002\u0002\u0002\u18a4\u187a\u0003\u0002\u0002\u0002\u18a4\u187b\u0003",
    "\u0002\u0002\u0002\u18a4\u187c\u0003\u0002\u0002\u0002\u18a4\u187f\u0003",
    "\u0002\u0002\u0002\u18a4\u1881\u0003\u0002\u0002\u0002\u18a4\u188c\u0003",
    "\u0002\u0002\u0002\u18a4\u1897\u0003\u0002\u0002\u0002\u18a4\u189c\u0003",
    "\u0002\u0002\u0002\u18a4\u18a0\u0003\u0002\u0002\u0002\u18a5\u18b3\u0003",
    "\u0002\u0002\u0002\u18a6\u18a7\f\u0004\u0002\u0002\u18a7\u18a8\u0005",
    "\u0266\u0134\u0002\u18a8\u18a9\u0005\u025e\u0130\u0005\u18a9\u18b2\u0003",
    "\u0002\u0002\u0002\u18aa\u18ab\f\u0003\u0002\u0002\u18ab\u18ac\u0005",
    "\u0268\u0135\u0002\u18ac\u18ad\u0005\u025e\u0130\u0004\u18ad\u18b2\u0003",
    "\u0002\u0002\u0002\u18ae\u18af\f\r\u0002\u0002\u18af\u18b0\u0007\u001a",
    "\u0002\u0002\u18b0\u18b2\u0005\u0200\u0101\u0002\u18b1\u18a6\u0003\u0002",
    "\u0002\u0002\u18b1\u18aa\u0003\u0002\u0002\u0002\u18b1\u18ae\u0003\u0002",
    "\u0002\u0002\u18b2\u18b5\u0003\u0002\u0002\u0002\u18b3\u18b1\u0003\u0002",
    "\u0002\u0002\u18b3\u18b4\u0003\u0002\u0002\u0002\u18b4\u025f\u0003\u0002",
    "\u0002\u0002\u18b5\u18b3\u0003\u0002\u0002\u0002\u18b6\u18b7\tw\u0002",
    "\u0002\u18b7\u0261\u0003\u0002\u0002\u0002\u18b8\u18c7\u0007\u03f5\u0002",
    "\u0002\u18b9\u18c7\u0007\u03f6\u0002\u0002\u18ba\u18c7\u0007\u03f7\u0002",
    "\u0002\u18bb\u18bc\u0007\u03f7\u0002\u0002\u18bc\u18c7\u0007\u03f5\u0002",
    "\u0002\u18bd\u18be\u0007\u03f6\u0002\u0002\u18be\u18c7\u0007\u03f5\u0002",
    "\u0002\u18bf\u18c0\u0007\u03f7\u0002\u0002\u18c0\u18c7\u0007\u03f6\u0002",
    "\u0002\u18c1\u18c2\u0007\u03f8\u0002\u0002\u18c2\u18c7\u0007\u03f5\u0002",
    "\u0002\u18c3\u18c4\u0007\u03f7\u0002\u0002\u18c4\u18c5\u0007\u03f5\u0002",
    "\u0002\u18c5\u18c7\u0007\u03f6\u0002\u0002\u18c6\u18b8\u0003\u0002\u0002",
    "\u0002\u18c6\u18b9\u0003\u0002\u0002\u0002\u18c6\u18ba\u0003\u0002\u0002",
    "\u0002\u18c6\u18bb\u0003\u0002\u0002\u0002\u18c6\u18bd\u0003\u0002\u0002",
    "\u0002\u18c6\u18bf\u0003\u0002\u0002\u0002\u18c6\u18c1\u0003\u0002\u0002",
    "\u0002\u18c6\u18c3\u0003\u0002\u0002\u0002\u18c7\u0263\u0003\u0002\u0002",
    "\u0002\u18c8\u18d0\u0007\f\u0002\u0002\u18c9\u18ca\u0007\u03fb\u0002",
    "\u0002\u18ca\u18d0\u0007\u03fb\u0002\u0002\u18cb\u18d0\u0007\u00b2\u0002",
    "\u0002\u18cc\u18d0\u0007p\u0002\u0002\u18cd\u18ce\u0007\u03fa\u0002",
    "\u0002\u18ce\u18d0\u0007\u03fa\u0002\u0002\u18cf\u18c8\u0003\u0002\u0002",
    "\u0002\u18cf\u18c9\u0003\u0002\u0002\u0002\u18cf\u18cb\u0003\u0002\u0002",
    "\u0002\u18cf\u18cc\u0003\u0002\u0002\u0002\u18cf\u18cd\u0003\u0002\u0002",
    "\u0002\u18d0\u0265\u0003\u0002\u0002\u0002\u18d1\u18d2\u0007\u03f7\u0002",
    "\u0002\u18d2\u18d9\u0007\u03f7\u0002\u0002\u18d3\u18d4\u0007\u03f6\u0002",
    "\u0002\u18d4\u18d9\u0007\u03f6\u0002\u0002\u18d5\u18d9\u0007\u03fb\u0002",
    "\u0002\u18d6\u18d9\u0007\u03fc\u0002\u0002\u18d7\u18d9\u0007\u03fa\u0002",
    "\u0002\u18d8\u18d1\u0003\u0002\u0002\u0002\u18d8\u18d3\u0003\u0002\u0002",
    "\u0002\u18d8\u18d5\u0003\u0002\u0002\u0002\u18d8\u18d6\u0003\u0002\u0002",
    "\u0002\u18d8\u18d7\u0003\u0002\u0002\u0002\u18d9\u0267\u0003\u0002\u0002",
    "\u0002\u18da\u18db\tx\u0002\u0002\u18db\u0269\u0003\u0002\u0002\u0002",
    "\u18dc\u18dd\ty\u0002\u0002\u18dd\u026b\u0003\u0002\u0002\u0002\u18de",
    "\u18df\tz\u0002\u0002\u18df\u026d\u0003\u0002\u0002\u0002\u18e0\u18e1",
    "\t{\u0002\u0002\u18e1\u026f\u0003\u0002\u0002\u0002\u18e2\u18e3\t|\u0002",
    "\u0002\u18e3\u0271\u0003\u0002\u0002\u0002\u18e4\u18e5\t}\u0002\u0002",
    "\u18e5\u0273\u0003\u0002\u0002\u0002\u18e6\u18e7\t~\u0002\u0002\u18e7",
    "\u0275\u0003\u0002\u0002\u0002\u18e8\u18e9\t\u007f\u0002\u0002\u18e9",
    "\u0277\u0003\u0002\u0002\u0002\u03a2\u0279\u027c\u0282\u0285\u0288\u028a",
    "\u028f\u0292\u0295\u029e\u02c5\u02d1\u02dc\u02ed\u02f2\u02fe\u0319\u0322",
    "\u0327\u032d\u0332\u0336\u033f\u0342\u0345\u0349\u0350\u0353\u0358\u0360",
    "\u0365\u036a\u036d\u036f\u037b\u037e\u0382\u0385\u0389\u038c\u0390\u0393",
    "\u0396\u039a\u039d\u03a1\u03a7\u03ad\u03b3\u03ba\u03c1\u03c7\u03cd\u03d6",
    "\u03db\u03eb\u03f2\u03f6\u0400\u0404\u0408\u040c\u0410\u0415\u0418\u041b",
    "\u041e\u0421\u0427\u042b\u0431\u0436\u0439\u043c\u043e\u0449\u044d\u0450",
    "\u045e\u0461\u0465\u0468\u046c\u046f\u0473\u0476\u047a\u047d\u0480\u0484",
    "\u0487\u048b\u0491\u049e\u04a5\u04aa\u04ad\u04b2\u04ba\u04c0\u04c4\u04c7",
    "\u04cc\u04cf\u04d3\u04d6\u04da\u04dd\u04e5\u04e7\u04ee\u04f4\u04fc\u04ff",
    "\u0506\u0509\u050b\u0511\u0517\u0528\u052f\u0536\u0541\u0544\u0551\u055e",
    "\u0563\u0573\u057b\u0585\u058b\u0595\u0598\u059d\u05aa\u05b1\u05b8\u05ba",
    "\u05c1\u05c5\u05c7\u05cc\u05cf\u05d5\u05da\u05dc\u05e0\u05e3\u05e6\u05ec",
    "\u05f1\u05f3\u05f8\u05ff\u0601\u0608\u060d\u0611\u0614\u061c\u0624\u0626",
    "\u062e\u0632\u0635\u063b\u0640\u0643\u0649\u064c\u0650\u0655\u065a\u065e",
    "\u0663\u0666\u066a\u066e\u0672\u0676\u067b\u0680\u0685\u068b\u0690\u0695",
    "\u069b\u06a0\u06a5\u06aa\u06af\u06b4\u06b9\u06be\u06c3\u06c8\u06cd\u06d3",
    "\u06d8\u06de\u06e8\u06ef\u06f1\u06f9\u06fe\u0701\u0709\u070f\u071f\u072b",
    "\u072d\u0730\u0738\u073e\u0744\u0751\u0758\u0760\u0763\u076e\u0776\u0779",
    "\u0785\u078c\u0794\u0797\u07a3\u07aa\u07b2\u07b5\u07bc\u07c4\u07c7\u07c9",
    "\u07ce\u07d6\u07df\u07e3\u07e7\u07ec\u07f2\u07f8\u07fd\u0802\u0807\u080c",
    "\u080f\u0814\u0819\u0823\u0827\u082e\u0833\u0836\u083b\u083e\u0842\u0846",
    "\u084e\u0861\u0864\u0867\u086b\u0875\u0882\u0889\u088c\u0895\u0898\u089b",
    "\u08a6\u08a9\u08ad\u08b5\u08b8\u08bd\u08c5\u08cb\u08cf\u08d3\u08d8\u08dd",
    "\u08e4\u08e8\u08f3\u08fb\u08fe\u0904\u090a\u090c\u0911\u0914\u091a\u0920",
    "\u0922\u0926\u0929\u092c\u0932\u0938\u093b\u0941\u0947\u0949\u094e\u0956",
    "\u0958\u0961\u0966\u096e\u0972\u097a\u0984\u0989\u0990\u0994\u0998\u09b5",
    "\u09b9\u09c5\u09c8\u09d1\u09e2\u09ee\u09f5\u09fc\u0a0b\u0a18\u0a1e\u0a24",
    "\u0a2a\u0a30\u0a36\u0a3c\u0a41\u0a48\u0a4f\u0a56\u0a5b\u0a5e\u0a60\u0a6e",
    "\u0a75\u0a7c\u0a82\u0a86\u0a8a\u0a91\u0a94\u0a99\u0aa0\u0aa7\u0aab\u0ab4",
    "\u0abd\u0ac6\u0ac9\u0acd\u0ad6\u0ada\u0add\u0ae0\u0ae6\u0ae9\u0aef\u0af8",
    "\u0afb\u0b06\u0b09\u0b0e\u0b11\u0b16\u0b20\u0b25\u0b2b\u0b2d\u0b33\u0b35",
    "\u0b3b\u0b43\u0b48\u0b50\u0b53\u0b58\u0b5b\u0b60\u0b68\u0b70\u0b76\u0b7e",
    "\u0b83\u0b8b\u0b8e\u0b92\u0b95\u0b9d\u0ba3\u0bac\u0baf\u0bb3\u0bb7\u0bbd",
    "\u0bc1\u0bc5\u0bc7\u0bca\u0bcd\u0bd0\u0bd6\u0bda\u0bdd\u0be0\u0be3\u0be6",
    "\u0be8\u0bec\u0bf2\u0bf8\u0bfd\u0c00\u0c06\u0c0a\u0c12\u0c16\u0c19\u0c1c",
    "\u0c25\u0c29\u0c2c\u0c30\u0c34\u0c37\u0c3a\u0c3f\u0c45\u0c49\u0c53\u0c59",
    "\u0c5d\u0c63\u0c67\u0c6d\u0c70\u0c7c\u0c80\u0c84\u0c8c\u0c90\u0c98\u0c9b",
    "\u0c9f\u0ca2\u0caa\u0caf\u0cb2\u0cb5\u0cb9\u0cbc\u0cc5\u0cca\u0cd3\u0cd8",
    "\u0cdf\u0ce6\u0cee\u0cf3\u0cfb\u0cfe\u0d01\u0d08\u0d0b\u0d12\u0d15\u0d1d",
    "\u0d23\u0d2e\u0d31\u0d3c\u0d42\u0d46\u0d51\u0d56\u0d58\u0d5c\u0d66\u0d70",
    "\u0d76\u0d7b\u0d7e\u0d81\u0d84\u0d8a\u0d8f\u0d92\u0d95\u0d98\u0d9a\u0da0",
    "\u0da5\u0da8\u0dab\u0daf\u0db5\u0db9\u0dc3\u0dc7\u0dcd\u0dd6\u0dd9\u0ddd",
    "\u0de0\u0de4\u0de8\u0deb\u0ded\u0df5\u0e01\u0e07\u0e09\u0e0f\u0e11\u0e13",
    "\u0e19\u0e21\u0e29\u0e2f\u0e38\u0e3d\u0e3f\u0e43\u0e47\u0e4d\u0e54\u0e58",
    "\u0e61\u0e64\u0e68\u0e6c\u0e70\u0e73\u0e76\u0e79\u0e7d\u0e81\u0e84\u0e87",
    "\u0e8a\u0e91\u0e95\u0ea4\u0eb1\u0eb9\u0ec3\u0ec7\u0eca\u0ed0\u0ed3\u0ed6",
    "\u0edf\u0ee8\u0ef2\u0ef6\u0f00\u0f0a\u0f12\u0f15\u0f1e\u0f21\u0f25\u0f2a",
    "\u0f2e\u0f37\u0f3a\u0f59\u0f5c\u0f5f\u0f97\u0f9c\u0fb8\u0fc6\u0fcd\u0fd1",
    "\u0fd7\u0fdf\u0fe1\u0fec\u0ff6\u0ffd\u1003\u100b\u1010\u1018\u1020\u1028",
    "\u1030\u1036\u1039\u103d\u1042\u1047\u104d\u104f\u105a\u105f\u1066\u1068",
    "\u1076\u107c\u1081\u1086\u108c\u1093\u109b\u10a3\u10a8\u10ae\u10b1\u10b9",
    "\u10c0\u10c9\u10cc\u10dd\u10e5\u10ed\u10f1\u10f8\u10fe\u1106\u110f\u1115",
    "\u111c\u1123\u1128\u112b\u112d\u1133\u1135\u1139\u113b\u113e\u1147\u114d",
    "\u1154\u115b\u1160\u1163\u1165\u116b\u116d\u1171\u1173\u1176\u117b\u1182",
    "\u118b\u1190\u1199\u11a0\u11a5\u11a8\u11aa\u11b0\u11b2\u11b5\u11c1\u11c7",
    "\u11d0\u11d9\u11de\u11e7\u11ed\u11f8\u11fb\u1207\u120e\u1213\u1222\u122d",
    "\u1230\u123a\u1244\u124e\u1258\u125c\u1260\u126a\u126f\u12a1\u12b3\u12bb",
    "\u12c6\u12cd\u12d1\u12d8\u12dd\u12e0\u12e3\u12ec\u12f0\u130e\u1315\u1319",
    "\u1320\u1323\u1333\u1336\u1340\u1344\u134a\u134d\u1352\u1356\u135d\u1360",
    "\u1366\u137e\u138b\u138e\u1398\u13a0\u13a4\u13ab\u13ae\u13b7\u13bd\u13c3",
    "\u13cd\u13cf\u13d5\u13d8\u13db\u13e7\u13ea\u13f0\u13f3\u13fb\u1403\u1409",
    "\u140d\u141b\u1427\u142e\u1431\u1438\u143f\u1444\u1449\u1454\u145f\u1465",
    "\u146a\u1477\u1479\u147e\u1483\u1485\u148c\u1493\u1496\u1499\u149f\u14a3",
    "\u14a9\u14af\u14bc\u14c1\u14c9\u14cc\u14d1\u14d6\u14de\u14e1\u14e7\u14eb",
    "\u14f8\u14fe\u150a\u150d\u1516\u151b\u1521\u1528\u152a\u152e\u1534\u1537",
    "\u1541\u1545\u1559\u1560\u1562\u1569\u156b\u156f\u1574\u157f\u1584\u158a",
    "\u158d\u1591\u1596\u1599\u159d\u15a1\u15a3\u15a8\u15ad\u15ba\u15bd\u15c1",
    "\u15c4\u15c9\u15cc\u15d0\u15d5\u15d8\u15dd\u15e0\u15e6\u15e9\u15ed\u15f0",
    "\u15f3\u15f7\u15fa\u15fd\u1601\u1604\u1607\u160a\u160e\u1611\u1614\u1619",
    "\u161e\u1623\u1626\u162b\u162e\u1633\u1636\u163a\u163e\u1646\u164d\u1651",
    "\u1656\u1659\u165e\u1662\u1664\u1674\u167d\u1685\u168e\u1698\u16a0\u16a8",
    "\u16b0\u16b8\u16bd\u16c4\u16c6\u16cb\u16ce\u16d3\u16d6\u16da\u16e8\u16ef",
    "\u16f4\u1716\u171a\u1722\u1726\u172f\u1737\u173c\u1744\u1749\u174e\u1750",
    "\u1759\u175e\u1766\u176b\u1773\u177b\u177e\u1788\u1793\u17a0\u17a8\u17ac",
    "\u17b1\u17ba\u17bd\u17c9\u17d1\u17db\u17de\u17e2\u17e6\u17ff\u180a\u1811",
    "\u1815\u181c\u1824\u1829\u1831\u1837\u1841\u184e\u1854\u185a\u186a\u1870",
    "\u1872\u1874\u1887\u1893\u18a4\u18b1\u18b3\u18c6\u18cf\u18d8"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", 
                     "'ALWAYS'", "'ANALYZE'", "'AND'", "'AS'", "'ASC'", 
                     "'BEFORE'", "'BETWEEN'", "'BOTH'", "'BY'", "'CALL'", 
                     "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", 
                     "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", 
                     "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", 
                     "'CROSS'", "'CURRENT'", "'CURRENT_USER'", "'CURSOR'", 
                     "'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", 
                     "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
                     "'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", 
                     "'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'", "'ESCAPED'", 
                     "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", 
                     "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", 
                     "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", "'HAVING'", 
                     "'HIGH_PRIORITY'", "'IF'", "'IGNORE'", "'IN'", "'INDEX'", 
                     "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", 
                     "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", 
                     "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", 
                     "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", 
                     "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
                     "'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", 
                     "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", "'NUMBER'", 
                     "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", 
                     "'ORDER'", "'OUT'", "'OUTER'", "'OUTFILE'", "'PARTITION'", 
                     "'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", 
                     "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
                     "'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", 
                     "'RESTRICT'", "'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", 
                     "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", 
                     "'SHOW'", "'SIGNAL'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", 
                     "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
                     "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", "'STARTING'", 
                     "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", "'THEN'", 
                     "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", 
                     "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
                     "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", 
                     "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", 
                     "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", 
                     "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", 
                     "'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", 
                     "'DOUBLE'", "'PRECISION'", "'FLOAT'", "'FLOAT4'", "'FLOAT8'", 
                     "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", 
                     "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", 
                     "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", 
                     "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", 
                     "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", 
                     "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", 
                     "'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", 
                     "'HOUR_SECOND'", "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", 
                     "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", 
                     "'JSON_VALID'", "'JSON_SCHEMA_VALID'", "'AVG'", "'BIT_AND'", 
                     "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'GROUP_CONCAT'", 
                     "'MAX'", "'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
                     "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", 
                     "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'", 
                     "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
                     "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", 
                     "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", 
                     "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
                     "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", 
                     "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
                     "'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", 
                     "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", 
                     "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
                     "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", 
                     "'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", 
                     "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", "'COMPACT'", 
                     "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", 
                     "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", 
                     "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", "'CONTAINS'", 
                     "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CURSOR_NAME'", 
                     "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", 
                     "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
                     "'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", 
                     "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", 
                     "'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", 
                     "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", 
                     "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", 
                     "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
                     "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", 
                     "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWS'", 
                     "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", 
                     "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", 
                     "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", 
                     "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", 
                     "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INVISIBLE'", 
                     "'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", 
                     "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", 
                     "'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", 
                     "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", 
                     "'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", 
                     "'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", 
                     "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
                     "'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", 
                     "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", 
                     "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", 
                     "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", 
                     "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
                     "'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MERGE'", "'MESSAGE_TEXT'", 
                     "'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", 
                     "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", "'NAMES'", 
                     "'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NODEGROUP'", 
                     "'NONE'", "'OFFLINE'", "'OFFSET'", "'OJ'", "'OLD_PASSWORD'", 
                     "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", 
                     "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", 
                     "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", 
                     "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", 
                     "'PORT'", "'PRECEDES'", "'PREPARE'", "'PRESERVE'", 
                     "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", 
                     "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", 
                     "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", 
                     "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", 
                     "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
                     "'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", 
                     "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
                     "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", 
                     "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNS'", "'ROLE'", 
                     "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", 
                     "'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", 
                     "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", 
                     "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", 
                     "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", 
                     "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", 
                     "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", 
                     "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", 
                     "'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", 
                     "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", 
                     "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", 
                     "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", "'TEMPORARY'", 
                     "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", 
                     "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", "'UNDEFINED'", 
                     "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", 
                     "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", 
                     "'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", "'VARIABLES'", 
                     "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", "'WARNINGS'", 
                     "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", "'XA'", 
                     "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", 
                     "'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", 
                     "'WEEK'", "'SECOND'", "'MICROSECOND'", "'TABLES'", 
                     "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
                     "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
                     "'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", 
                     "'BINLOG_ENCRYPTION_ADMIN'", "'CLONE_ADMIN'", "'CONNECTION_ADMIN'", 
                     "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", "'FIREWALL_USER'", 
                     "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
                     "'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", 
                     "'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", 
                     "'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'", 
                     "'ROLE_ADMIN'", null, "'SET_USER_ID'", "'SHOW_ROUTINE'", 
                     "'SYSTEM_VARIABLES_ADMIN'", "'TABLE_ENCRYPTION_ADMIN'", 
                     "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", "'ARMSCII8'", 
                     "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
                     "'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", 
                     "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB2312'", "'GBK'", 
                     "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", 
                     "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", 
                     "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", 
                     "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", 
                     "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", 
                     "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", 
                     "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", 
                     "'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'", 
                     "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", 
                     "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
                     "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
                     "'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", 
                     "'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", "'ASIN'", 
                     "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
                     "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", 
                     "'ASYMMETRIC_VERIFY'", "'ATAN'", "'ATAN2'", "'BENCHMARK'", 
                     "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", 
                     "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", 
                     "'CHARACTER_LENGTH'", "'CHARSET'", "'CHAR_LENGTH'", 
                     "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", "'CONCAT'", 
                     "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
                     "'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", 
                     "'CREATE_ASYMMETRIC_PUB_KEY'", "'CREATE_DH_PARAMETERS'", 
                     "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", "'DATE_FORMAT'", 
                     "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
                     "'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", 
                     "'DIMENSION'", "'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", 
                     "'ENDPOINT'", "'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", 
                     "'EXTERIORRING'", "'EXTRACTVALUE'", "'FIELD'", "'FIND_IN_SET'", 
                     "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
                     "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", 
                     "'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", 
                     "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
                     "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", 
                     "'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", 
                     "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", "'GTID_SUBSET'", 
                     "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
                     "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", 
                     "'INTERIORRINGN'", "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", 
                     "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", "'IS_IPV4'", 
                     "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", 
                     "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
                     "'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
                     "'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", 
                     "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
                     "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", 
                     "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
                     "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", 
                     "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
                     "'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", 
                     "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
                     "'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", 
                     "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", 
                     "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", 
                     "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
                     "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", 
                     "'POINTFROMTEXT'", "'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", 
                     "'POLYFROMWKB'", "'POLYGONFROMTEXT'", "'POLYGONFROMWKB'", 
                     "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
                     "'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", 
                     "'ROW_COUNT'", "'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", 
                     "'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", 
                     "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", 
                     "'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", 
                     "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", 
                     "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", 
                     "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
                     "'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", 
                     "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
                     "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
                     "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
                     "'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", 
                     "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", 
                     "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", "'ST_INTERSECTS'", 
                     "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
                     "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
                     "'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
                     "'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", 
                     "'ST_POINTFROMWKB'", "'ST_POINTN'", "'ST_POLYFROMTEXT'", 
                     "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", "'ST_POLYGONFROMWKB'", 
                     "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
                     "'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", 
                     "'ST_Y'", "'SUBDATE'", "'SUBSTRING_INDEX'", "'SUBTIME'", 
                     "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", "'TIMESTAMPADD'", 
                     "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
                     "'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", 
                     "'UCASE'", "'UNCOMPRESS'", "'UNCOMPRESSED_LENGTH'", 
                     "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", "'UPPER'", 
                     "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
                     "'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", 
                     "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", "'WITHIN'", 
                     "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", 
                     "'/'", "'%'", "'+'", "'--'", "'-'", "'DIV'", "'MOD'", 
                     "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", 
                     "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", 
                     "'2'", "'''", "'\"'", "'`'", "':'" ];

var symbolicNames = [ null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", 
                      "LINE_COMMENT", "ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", 
                      "AND", "AS", "ASC", "BEFORE", "BETWEEN", "BOTH", "BY", 
                      "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", 
                      "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", 
                      "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", 
                      "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", 
                      "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", 
                      "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", 
                      "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", "ENCLOSED", 
                      "ESCAPED", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", 
                      "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERATED", 
                      "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
                      "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", 
                      "INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", 
                      "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE", 
                      "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", 
                      "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
                      "MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", 
                      "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", "ON", 
                      "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", 
                      "OUT", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", 
                      "PROCEDURE", "PURGE", "RANGE", "READ", "READS", "REFERENCES", 
                      "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", 
                      "REQUIRE", "RESIGNAL", "RESTRICT", "RETURN", "REVOKE", 
                      "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", 
                      "SEPARATOR", "SHOW", "SIGNAL", "SPATIAL", "SQL", "SQLEXCEPTION", 
                      "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
                      "SQL_SMALL_RESULT", "SSL", "STACKED", "STARTING", 
                      "STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", 
                      "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
                      "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", 
                      "VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", 
                      "XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", 
                      "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", 
                      "INT8", "INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", 
                      "FLOAT", "FLOAT4", "FLOAT8", "DECIMAL", "DEC", "NUMERIC", 
                      "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", 
                      "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
                      "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", 
                      "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", 
                      "VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", 
                      "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", 
                      "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
                      "DAY_MICROSECOND", "JSON_VALID", "JSON_SCHEMA_VALID", 
                      "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "GROUP_CONCAT", 
                      "MAX", "MIN", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", 
                      "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", "CURRENT_DATE", 
                      "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", 
                      "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", 
                      "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", "SUBSTRING", 
                      "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", 
                      "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", 
                      "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", 
                      "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", 
                      "BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", 
                      "CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", 
                      "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", 
                      "CLOSE", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", 
                      "COLUMN_NAME", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", 
                      "COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECTION", 
                      "CONSISTENT", "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", 
                      "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
                      "COPY", "CPU", "CURSOR_NAME", "DATA", "DATAFILE", 
                      "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", 
                      "DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", 
                      "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", 
                      "ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", 
                      "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", 
                      "EVERY", "EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", 
                      "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", 
                      "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", 
                      "FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", 
                      "GLOBAL", "GRANTS", "GROUP_REPLICATION", "HANDLER", 
                      "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", 
                      "IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", 
                      "INSTALL", "INSTANCE", "INVISIBLE", "INVOKER", "IO", 
                      "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", 
                      "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS", 
                      "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", 
                      "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
                      "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", 
                      "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", 
                      "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", 
                      "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
                      "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", 
                      "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
                      "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
                      "MAX_USER_CONNECTIONS", "MEDIUM", "MERGE", "MESSAGE_TEXT", 
                      "MID", "MIGRATE", "MIN_ROWS", "MODE", "MODIFY", "MUTEX", 
                      "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", 
                      "NEVER", "NEXT", "NO", "NODEGROUP", "NONE", "OFFLINE", 
                      "OFFSET", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", 
                      "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", 
                      "PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", 
                      "PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", 
                      "PORT", "PRECEDES", "PREPARE", "PRESERVE", "PREV", 
                      "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", 
                      "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", 
                      "REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", 
                      "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", 
                      "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
                      "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
                      "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", 
                      "RESUME", "RETURNED_SQLSTATE", "RETURNS", "ROLE", 
                      "ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", 
                      "SAVEPOINT", "SCHEDULE", "SECURITY", "SERVER", "SESSION", 
                      "SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", 
                      "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
                      "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", 
                      "SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", 
                      "SQL_NO_CACHE", "SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", 
                      "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", "STATUS", 
                      "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", 
                      "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", 
                      "SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TEMPORARY", 
                      "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", 
                      "TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNDEFINED", 
                      "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", 
                      "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
                      "VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", 
                      "VISIBLE", "WAIT", "WARNINGS", "WITHOUT", "WORK", 
                      "WRAPPER", "X509", "XA", "XML", "EUR", "USA", "JIS", 
                      "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", 
                      "MINUTE", "WEEK", "SECOND", "MICROSECOND", "TABLES", 
                      "ROUTINE", "EXECUTE", "FILE", "PROCESS", "RELOAD", 
                      "SHUTDOWN", "SUPER", "PRIVILEGES", "APPLICATION_PASSWORD_ADMIN", 
                      "AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", 
                      "CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", 
                      "FIREWALL_ADMIN", "FIREWALL_USER", "GROUP_REPLICATION_ADMIN", 
                      "INNODB_REDO_LOG_ARCHIVE", "NDB_STORED_USER", "PERSIST_RO_VARIABLES_ADMIN", 
                      "REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", 
                      "RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", "ROLE_ADMIN", 
                      "SESSION_VARIABLES_ADMIN", "SET_USER_ID", "SHOW_ROUTINE", 
                      "SYSTEM_VARIABLES_ADMIN", "TABLE_ENCRYPTION_ADMIN", 
                      "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", "ARMSCII8", 
                      "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
                      "CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", 
                      "EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", 
                      "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", 
                      "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", 
                      "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", 
                      "UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", 
                      "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", 
                      "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", 
                      "TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", 
                      "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION", 
                      "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
                      "MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", 
                      "ADDDATE", "ADDTIME", "AES_DECRYPT", "AES_ENCRYPT", 
                      "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", "ASWKT", 
                      "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
                      "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", 
                      "BENCHMARK", "BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", 
                      "CATALOG_NAME", "CEIL", "CEILING", "CENTROID", "CHARACTER_LENGTH", 
                      "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
                      "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", 
                      "CONV", "CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", 
                      "CREATE_ASYMMETRIC_PUB_KEY", "CREATE_DH_PARAMETERS", 
                      "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
                      "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", 
                      "DECODE", "DEGREES", "DES_DECRYPT", "DES_ENCRYPT", 
                      "DIMENSION", "DISJOINT", "ELT", "ENCODE", "ENCRYPT", 
                      "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", 
                      "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
                      "FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", 
                      "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
                      "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", 
                      "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", 
                      "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", 
                      "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", 
                      "GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", 
                      "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
                      "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", 
                      "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
                      "IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", 
                      "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
                      "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", 
                      "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
                      "LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", 
                      "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", 
                      "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", 
                      "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", 
                      "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
                      "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
                      "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", 
                      "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
                      "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", 
                      "PERIOD_DIFF", "PI", "POINTFROMTEXT", "POINTFROMWKB", 
                      "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
                      "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
                      "RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", 
                      "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
                      "SESSION_USER", "SHA", "SHA1", "SHA2", "SCHEMA_NAME", 
                      "SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", 
                      "SQRT", "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", 
                      "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
                      "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
                      "ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", 
                      "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", 
                      "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
                      "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
                      "ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", 
                      "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
                      "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", 
                      "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
                      "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", 
                      "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
                      "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", 
                      "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
                      "ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", 
                      "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
                      "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
                      "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", 
                      "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", "TAN", 
                      "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", 
                      "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", 
                      "TO_SECONDS", "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", 
                      "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", "UUID", 
                      "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", 
                      "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
                      "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
                      "X_FUNCTION", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
                      "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
                      "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
                      "PLUS", "MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", 
                      "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
                      "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
                      "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", 
                      "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", 
                      "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", 
                      "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
                      "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
                      "NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", 
                      "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
                      "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION" ];

var ruleNames =  [ "statement", "sqlStatements", "sqlStatement", "emptyStatement", 
                   "ddlStatement", "dmlStatement", "transactionStatement", 
                   "replicationStatement", "preparedStatement", "compoundStatement", 
                   "administrationStatement", "utilityStatement", "createDatabase", 
                   "createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
                   "createFunction", "createServer", "createTable", "createTablespaceInnodb", 
                   "createTablespaceNdb", "createTrigger", "createView", 
                   "createDatabaseOption", "ownerStatement", "scheduleExpression", 
                   "timestampValue", "intervalExpr", "intervalType", "enableType", 
                   "indexType", "indexOption", "procedureParameter", "functionParameter", 
                   "routineOption", "serverOption", "createDefinitions", 
                   "createDefinition", "columnDefinition", "columnConstraint", 
                   "tableConstraint", "referenceDefinition", "referenceAction", 
                   "referenceControlType", "indexColumnDefinition", "tableOption", 
                   "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
                   "subpartitionFunctionDefinition", "partitionDefinition", 
                   "partitionDefinerAtom", "partitionDefinerVector", "subpartitionDefinition", 
                   "partitionOption", "alterDatabase", "alterEvent", "alterFunction", 
                   "alterInstance", "alterLogfileGroup", "alterProcedure", 
                   "alterServer", "alterTable", "alterTablespace", "alterView", 
                   "alterSpecification", "dropDatabase", "dropEvent", "dropIndex", 
                   "dropLogfileGroup", "dropProcedure", "dropFunction", 
                   "dropServer", "dropTable", "dropTablespace", "dropTrigger", 
                   "dropView", "renameTable", "renameTableClause", "truncateTable", 
                   "callStatement", "deleteStatement", "doStatement", "handlerStatement", 
                   "insertStatement", "loadDataStatement", "loadXmlStatement", 
                   "replaceStatement", "selectStatement", "updateStatement", 
                   "insertStatementValue", "updatedElement", "assignmentField", 
                   "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
                   "handlerOpenStatement", "handlerReadIndexStatement", 
                   "handlerReadStatement", "handlerCloseStatement", "singleUpdateStatement", 
                   "multipleUpdateStatement", "orderByClause", "orderByExpression", 
                   "tableSources", "tableSource", "tableSourceItem", "indexHint", 
                   "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
                   "querySpecification", "querySpecificationNointo", "unionParenthesis", 
                   "unionStatement", "selectSpec", "selectElements", "selectElement", 
                   "selectIntoExpression", "selectFieldsInto", "selectLinesInto", 
                   "fromClause", "groupByItem", "limitClause", "limitClauseAtom", 
                   "startTransaction", "beginWork", "commitWork", "rollbackWork", 
                   "savepointStatement", "rollbackStatement", "releaseStatement", 
                   "lockTables", "unlockTables", "setAutocommitStatement", 
                   "setTransactionStatement", "transactionMode", "lockTableElement", 
                   "lockAction", "transactionOption", "transactionLevel", 
                   "changeMaster", "changeReplicationFilter", "purgeBinaryLogs", 
                   "resetMaster", "resetSlave", "startSlave", "stopSlave", 
                   "startGroupReplication", "stopGroupReplication", "masterOption", 
                   "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
                   "channelOption", "replicationFilter", "tablePair", "threadType", 
                   "untilOption", "connectionOption", "gtuidSet", "xaStartTransaction", 
                   "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
                   "xaRollbackWork", "xaRecoverWork", "prepareStatement", 
                   "executeStatement", "deallocatePrepare", "routineBody", 
                   "blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
                   "leaveStatement", "loopStatement", "repeatStatement", 
                   "returnStatement", "whileStatement", "cursorStatement", 
                   "declareVariable", "declareCondition", "declareCursor", 
                   "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
                   "caseAlternative", "elifAlternative", "alterUser", "createUser", 
                   "dropUser", "grantStatement", "grantProxy", "renameUser", 
                   "revokeStatement", "revokeProxy", "setPasswordStatement", 
                   "userSpecification", "userAuthOption", "tlsOption", "userResourceOption", 
                   "userPasswordOption", "userLockOption", "privelegeClause", 
                   "privilege", "privilegeLevel", "renameUserClause", "analyzeTable", 
                   "checkTable", "checksumTable", "optimizeTable", "repairTable", 
                   "checkTableOption", "createUdfunction", "installPlugin", 
                   "uninstallPlugin", "setStatement", "showStatement", "variableClause", 
                   "showCommonEntity", "showFilter", "showGlobalInfoClause", 
                   "showSchemaEntity", "showProfileType", "binlogStatement", 
                   "cacheIndexStatement", "flushStatement", "killStatement", 
                   "loadIndexIntoCache", "resetStatement", "shutdownStatement", 
                   "tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", 
                   "simpleDescribeStatement", "fullDescribeStatement", "helpStatement", 
                   "useStatement", "signalStatement", "resignalStatement", 
                   "signalConditionInformation", "diagnosticsStatement", 
                   "diagnosticsConditionInformationName", "describeObjectClause", 
                   "fullId", "tableName", "fullColumnName", "indexColumnName", 
                   "userName", "mysqlVariable", "charsetName", "collationName", 
                   "engineName", "uuidSet", "xid", "xuidStringId", "authPlugin", 
                   "uid", "simpleId", "dottedId", "decimalLiteral", "fileSizeLiteral", 
                   "stringLiteral", "booleanLiteral", "hexadecimalLiteral", 
                   "nullNotnull", "constant", "dataType", "collectionOptions", 
                   "convertedDataType", "lengthOneDimension", "lengthTwoDimension", 
                   "lengthTwoOptionalDimension", "uidList", "tables", "indexColumnNames", 
                   "expressions", "expressionsWithDefaults", "constants", 
                   "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
                   "expressionOrDefault", "ifExists", "ifNotExists", "functionCall", 
                   "specificFunction", "caseFuncAlternative", "levelsInWeightString", 
                   "levelInWeightListElement", "aggregateWindowedFunction", 
                   "scalarFunctionName", "passwordFunctionClause", "functionArgs", 
                   "functionArg", "expression", "predicate", "expressionAtom", 
                   "unaryOperator", "comparisonOperator", "logicalOperator", 
                   "bitOperator", "mathOperator", "charsetNameBase", "transactionLevelBase", 
                   "privilegesBase", "intervalTypeBase", "dataTypeBase", 
                   "keywordsCanBeId", "functionNameBase" ];

function MySQLParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

MySQLParser.prototype = Object.create(antlr4.Parser.prototype);
MySQLParser.prototype.constructor = MySQLParser;

Object.defineProperty(MySQLParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

MySQLParser.EOF = antlr4.Token.EOF;
MySQLParser.SPACE = 1;
MySQLParser.SPEC_MYSQL_COMMENT = 2;
MySQLParser.COMMENT_INPUT = 3;
MySQLParser.LINE_COMMENT = 4;
MySQLParser.ADD = 5;
MySQLParser.ALL = 6;
MySQLParser.ALTER = 7;
MySQLParser.ALWAYS = 8;
MySQLParser.ANALYZE = 9;
MySQLParser.AND = 10;
MySQLParser.AS = 11;
MySQLParser.ASC = 12;
MySQLParser.BEFORE = 13;
MySQLParser.BETWEEN = 14;
MySQLParser.BOTH = 15;
MySQLParser.BY = 16;
MySQLParser.CALL = 17;
MySQLParser.CASCADE = 18;
MySQLParser.CASE = 19;
MySQLParser.CAST = 20;
MySQLParser.CHANGE = 21;
MySQLParser.CHARACTER = 22;
MySQLParser.CHECK = 23;
MySQLParser.COLLATE = 24;
MySQLParser.COLUMN = 25;
MySQLParser.CONDITION = 26;
MySQLParser.CONSTRAINT = 27;
MySQLParser.CONTINUE = 28;
MySQLParser.CONVERT = 29;
MySQLParser.CREATE = 30;
MySQLParser.CROSS = 31;
MySQLParser.CURRENT = 32;
MySQLParser.CURRENT_USER = 33;
MySQLParser.CURSOR = 34;
MySQLParser.DATABASE = 35;
MySQLParser.DATABASES = 36;
MySQLParser.DECLARE = 37;
MySQLParser.DEFAULT = 38;
MySQLParser.DELAYED = 39;
MySQLParser.DELETE = 40;
MySQLParser.DESC = 41;
MySQLParser.DESCRIBE = 42;
MySQLParser.DETERMINISTIC = 43;
MySQLParser.DIAGNOSTICS = 44;
MySQLParser.DISTINCT = 45;
MySQLParser.DISTINCTROW = 46;
MySQLParser.DROP = 47;
MySQLParser.EACH = 48;
MySQLParser.ELSE = 49;
MySQLParser.ELSEIF = 50;
MySQLParser.ENCLOSED = 51;
MySQLParser.ESCAPED = 52;
MySQLParser.EXISTS = 53;
MySQLParser.EXIT = 54;
MySQLParser.EXPLAIN = 55;
MySQLParser.FALSE = 56;
MySQLParser.FETCH = 57;
MySQLParser.FOR = 58;
MySQLParser.FORCE = 59;
MySQLParser.FOREIGN = 60;
MySQLParser.FROM = 61;
MySQLParser.FULLTEXT = 62;
MySQLParser.GENERATED = 63;
MySQLParser.GET = 64;
MySQLParser.GRANT = 65;
MySQLParser.GROUP = 66;
MySQLParser.HAVING = 67;
MySQLParser.HIGH_PRIORITY = 68;
MySQLParser.IF = 69;
MySQLParser.IGNORE = 70;
MySQLParser.IN = 71;
MySQLParser.INDEX = 72;
MySQLParser.INFILE = 73;
MySQLParser.INNER = 74;
MySQLParser.INOUT = 75;
MySQLParser.INSERT = 76;
MySQLParser.INTERVAL = 77;
MySQLParser.INTO = 78;
MySQLParser.IS = 79;
MySQLParser.ITERATE = 80;
MySQLParser.JOIN = 81;
MySQLParser.KEY = 82;
MySQLParser.KEYS = 83;
MySQLParser.KILL = 84;
MySQLParser.LEADING = 85;
MySQLParser.LEAVE = 86;
MySQLParser.LEFT = 87;
MySQLParser.LIKE = 88;
MySQLParser.LIMIT = 89;
MySQLParser.LINEAR = 90;
MySQLParser.LINES = 91;
MySQLParser.LOAD = 92;
MySQLParser.LOCK = 93;
MySQLParser.LOOP = 94;
MySQLParser.LOW_PRIORITY = 95;
MySQLParser.MASTER_BIND = 96;
MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT = 97;
MySQLParser.MATCH = 98;
MySQLParser.MAXVALUE = 99;
MySQLParser.MODIFIES = 100;
MySQLParser.NATURAL = 101;
MySQLParser.NOT = 102;
MySQLParser.NO_WRITE_TO_BINLOG = 103;
MySQLParser.NULL_LITERAL = 104;
MySQLParser.NUMBER = 105;
MySQLParser.ON = 106;
MySQLParser.OPTIMIZE = 107;
MySQLParser.OPTION = 108;
MySQLParser.OPTIONALLY = 109;
MySQLParser.OR = 110;
MySQLParser.ORDER = 111;
MySQLParser.OUT = 112;
MySQLParser.OUTER = 113;
MySQLParser.OUTFILE = 114;
MySQLParser.PARTITION = 115;
MySQLParser.PRIMARY = 116;
MySQLParser.PROCEDURE = 117;
MySQLParser.PURGE = 118;
MySQLParser.RANGE = 119;
MySQLParser.READ = 120;
MySQLParser.READS = 121;
MySQLParser.REFERENCES = 122;
MySQLParser.REGEXP = 123;
MySQLParser.RELEASE = 124;
MySQLParser.RENAME = 125;
MySQLParser.REPEAT = 126;
MySQLParser.REPLACE = 127;
MySQLParser.REQUIRE = 128;
MySQLParser.RESIGNAL = 129;
MySQLParser.RESTRICT = 130;
MySQLParser.RETURN = 131;
MySQLParser.REVOKE = 132;
MySQLParser.RIGHT = 133;
MySQLParser.RLIKE = 134;
MySQLParser.SCHEMA = 135;
MySQLParser.SCHEMAS = 136;
MySQLParser.SELECT = 137;
MySQLParser.SET = 138;
MySQLParser.SEPARATOR = 139;
MySQLParser.SHOW = 140;
MySQLParser.SIGNAL = 141;
MySQLParser.SPATIAL = 142;
MySQLParser.SQL = 143;
MySQLParser.SQLEXCEPTION = 144;
MySQLParser.SQLSTATE = 145;
MySQLParser.SQLWARNING = 146;
MySQLParser.SQL_BIG_RESULT = 147;
MySQLParser.SQL_CALC_FOUND_ROWS = 148;
MySQLParser.SQL_SMALL_RESULT = 149;
MySQLParser.SSL = 150;
MySQLParser.STACKED = 151;
MySQLParser.STARTING = 152;
MySQLParser.STRAIGHT_JOIN = 153;
MySQLParser.TABLE = 154;
MySQLParser.TERMINATED = 155;
MySQLParser.THEN = 156;
MySQLParser.TO = 157;
MySQLParser.TRAILING = 158;
MySQLParser.TRIGGER = 159;
MySQLParser.TRUE = 160;
MySQLParser.UNDO = 161;
MySQLParser.UNION = 162;
MySQLParser.UNIQUE = 163;
MySQLParser.UNLOCK = 164;
MySQLParser.UNSIGNED = 165;
MySQLParser.UPDATE = 166;
MySQLParser.USAGE = 167;
MySQLParser.USE = 168;
MySQLParser.USING = 169;
MySQLParser.VALUES = 170;
MySQLParser.WHEN = 171;
MySQLParser.WHERE = 172;
MySQLParser.WHILE = 173;
MySQLParser.WITH = 174;
MySQLParser.WRITE = 175;
MySQLParser.XOR = 176;
MySQLParser.ZEROFILL = 177;
MySQLParser.TINYINT = 178;
MySQLParser.SMALLINT = 179;
MySQLParser.MEDIUMINT = 180;
MySQLParser.MIDDLEINT = 181;
MySQLParser.INT = 182;
MySQLParser.INT1 = 183;
MySQLParser.INT2 = 184;
MySQLParser.INT3 = 185;
MySQLParser.INT4 = 186;
MySQLParser.INT8 = 187;
MySQLParser.INTEGER = 188;
MySQLParser.BIGINT = 189;
MySQLParser.REAL = 190;
MySQLParser.DOUBLE = 191;
MySQLParser.PRECISION = 192;
MySQLParser.FLOAT = 193;
MySQLParser.FLOAT4 = 194;
MySQLParser.FLOAT8 = 195;
MySQLParser.DECIMAL = 196;
MySQLParser.DEC = 197;
MySQLParser.NUMERIC = 198;
MySQLParser.DATE = 199;
MySQLParser.TIME = 200;
MySQLParser.TIMESTAMP = 201;
MySQLParser.DATETIME = 202;
MySQLParser.YEAR = 203;
MySQLParser.CHAR = 204;
MySQLParser.VARCHAR = 205;
MySQLParser.NVARCHAR = 206;
MySQLParser.NATIONAL = 207;
MySQLParser.BINARY = 208;
MySQLParser.VARBINARY = 209;
MySQLParser.TINYBLOB = 210;
MySQLParser.BLOB = 211;
MySQLParser.MEDIUMBLOB = 212;
MySQLParser.LONG = 213;
MySQLParser.LONGBLOB = 214;
MySQLParser.TINYTEXT = 215;
MySQLParser.TEXT = 216;
MySQLParser.MEDIUMTEXT = 217;
MySQLParser.LONGTEXT = 218;
MySQLParser.ENUM = 219;
MySQLParser.VARYING = 220;
MySQLParser.SERIAL = 221;
MySQLParser.YEAR_MONTH = 222;
MySQLParser.DAY_HOUR = 223;
MySQLParser.DAY_MINUTE = 224;
MySQLParser.DAY_SECOND = 225;
MySQLParser.HOUR_MINUTE = 226;
MySQLParser.HOUR_SECOND = 227;
MySQLParser.MINUTE_SECOND = 228;
MySQLParser.SECOND_MICROSECOND = 229;
MySQLParser.MINUTE_MICROSECOND = 230;
MySQLParser.HOUR_MICROSECOND = 231;
MySQLParser.DAY_MICROSECOND = 232;
MySQLParser.JSON_VALID = 233;
MySQLParser.JSON_SCHEMA_VALID = 234;
MySQLParser.AVG = 235;
MySQLParser.BIT_AND = 236;
MySQLParser.BIT_OR = 237;
MySQLParser.BIT_XOR = 238;
MySQLParser.COUNT = 239;
MySQLParser.GROUP_CONCAT = 240;
MySQLParser.MAX = 241;
MySQLParser.MIN = 242;
MySQLParser.STD = 243;
MySQLParser.STDDEV = 244;
MySQLParser.STDDEV_POP = 245;
MySQLParser.STDDEV_SAMP = 246;
MySQLParser.SUM = 247;
MySQLParser.VAR_POP = 248;
MySQLParser.VAR_SAMP = 249;
MySQLParser.VARIANCE = 250;
MySQLParser.CURRENT_DATE = 251;
MySQLParser.CURRENT_TIME = 252;
MySQLParser.CURRENT_TIMESTAMP = 253;
MySQLParser.LOCALTIME = 254;
MySQLParser.CURDATE = 255;
MySQLParser.CURTIME = 256;
MySQLParser.DATE_ADD = 257;
MySQLParser.DATE_SUB = 258;
MySQLParser.EXTRACT = 259;
MySQLParser.LOCALTIMESTAMP = 260;
MySQLParser.NOW = 261;
MySQLParser.POSITION = 262;
MySQLParser.SUBSTR = 263;
MySQLParser.SUBSTRING = 264;
MySQLParser.SYSDATE = 265;
MySQLParser.TRIM = 266;
MySQLParser.UTC_DATE = 267;
MySQLParser.UTC_TIME = 268;
MySQLParser.UTC_TIMESTAMP = 269;
MySQLParser.ACCOUNT = 270;
MySQLParser.ACTION = 271;
MySQLParser.AFTER = 272;
MySQLParser.AGGREGATE = 273;
MySQLParser.ALGORITHM = 274;
MySQLParser.ANY = 275;
MySQLParser.AT = 276;
MySQLParser.AUTHORS = 277;
MySQLParser.AUTOCOMMIT = 278;
MySQLParser.AUTOEXTEND_SIZE = 279;
MySQLParser.AUTO_INCREMENT = 280;
MySQLParser.AVG_ROW_LENGTH = 281;
MySQLParser.BEGIN = 282;
MySQLParser.BINLOG = 283;
MySQLParser.BIT = 284;
MySQLParser.BLOCK = 285;
MySQLParser.BOOL = 286;
MySQLParser.BOOLEAN = 287;
MySQLParser.BTREE = 288;
MySQLParser.CACHE = 289;
MySQLParser.CASCADED = 290;
MySQLParser.CHAIN = 291;
MySQLParser.CHANGED = 292;
MySQLParser.CHANNEL = 293;
MySQLParser.CHECKSUM = 294;
MySQLParser.PAGE_CHECKSUM = 295;
MySQLParser.CIPHER = 296;
MySQLParser.CLASS_ORIGIN = 297;
MySQLParser.CLIENT = 298;
MySQLParser.CLOSE = 299;
MySQLParser.COALESCE = 300;
MySQLParser.CODE = 301;
MySQLParser.COLUMNS = 302;
MySQLParser.COLUMN_FORMAT = 303;
MySQLParser.COLUMN_NAME = 304;
MySQLParser.COMMENT = 305;
MySQLParser.COMMIT = 306;
MySQLParser.COMPACT = 307;
MySQLParser.COMPLETION = 308;
MySQLParser.COMPRESSED = 309;
MySQLParser.COMPRESSION = 310;
MySQLParser.CONCURRENT = 311;
MySQLParser.CONNECTION = 312;
MySQLParser.CONSISTENT = 313;
MySQLParser.CONSTRAINT_CATALOG = 314;
MySQLParser.CONSTRAINT_SCHEMA = 315;
MySQLParser.CONSTRAINT_NAME = 316;
MySQLParser.CONTAINS = 317;
MySQLParser.CONTEXT = 318;
MySQLParser.CONTRIBUTORS = 319;
MySQLParser.COPY = 320;
MySQLParser.CPU = 321;
MySQLParser.CURSOR_NAME = 322;
MySQLParser.DATA = 323;
MySQLParser.DATAFILE = 324;
MySQLParser.DEALLOCATE = 325;
MySQLParser.DEFAULT_AUTH = 326;
MySQLParser.DEFINER = 327;
MySQLParser.DELAY_KEY_WRITE = 328;
MySQLParser.DES_KEY_FILE = 329;
MySQLParser.DIRECTORY = 330;
MySQLParser.DISABLE = 331;
MySQLParser.DISCARD = 332;
MySQLParser.DISK = 333;
MySQLParser.DO = 334;
MySQLParser.DUMPFILE = 335;
MySQLParser.DUPLICATE = 336;
MySQLParser.DYNAMIC = 337;
MySQLParser.ENABLE = 338;
MySQLParser.ENCRYPTION = 339;
MySQLParser.END = 340;
MySQLParser.ENDS = 341;
MySQLParser.ENGINE = 342;
MySQLParser.ENGINES = 343;
MySQLParser.ERROR = 344;
MySQLParser.ERRORS = 345;
MySQLParser.ESCAPE = 346;
MySQLParser.EVEN = 347;
MySQLParser.EVENT = 348;
MySQLParser.EVENTS = 349;
MySQLParser.EVERY = 350;
MySQLParser.EXCHANGE = 351;
MySQLParser.EXCLUSIVE = 352;
MySQLParser.EXPIRE = 353;
MySQLParser.EXPORT = 354;
MySQLParser.EXTENDED = 355;
MySQLParser.EXTENT_SIZE = 356;
MySQLParser.FAST = 357;
MySQLParser.FAULTS = 358;
MySQLParser.FIELDS = 359;
MySQLParser.FILE_BLOCK_SIZE = 360;
MySQLParser.FILTER = 361;
MySQLParser.FIRST = 362;
MySQLParser.FIXED = 363;
MySQLParser.FLUSH = 364;
MySQLParser.FOLLOWS = 365;
MySQLParser.FOUND = 366;
MySQLParser.FULL = 367;
MySQLParser.FUNCTION = 368;
MySQLParser.GENERAL = 369;
MySQLParser.GLOBAL = 370;
MySQLParser.GRANTS = 371;
MySQLParser.GROUP_REPLICATION = 372;
MySQLParser.HANDLER = 373;
MySQLParser.HASH = 374;
MySQLParser.HELP = 375;
MySQLParser.HOST = 376;
MySQLParser.HOSTS = 377;
MySQLParser.IDENTIFIED = 378;
MySQLParser.IGNORE_SERVER_IDS = 379;
MySQLParser.IMPORT = 380;
MySQLParser.INDEXES = 381;
MySQLParser.INITIAL_SIZE = 382;
MySQLParser.INPLACE = 383;
MySQLParser.INSERT_METHOD = 384;
MySQLParser.INSTALL = 385;
MySQLParser.INSTANCE = 386;
MySQLParser.INVISIBLE = 387;
MySQLParser.INVOKER = 388;
MySQLParser.IO = 389;
MySQLParser.IO_THREAD = 390;
MySQLParser.IPC = 391;
MySQLParser.ISOLATION = 392;
MySQLParser.ISSUER = 393;
MySQLParser.JSON = 394;
MySQLParser.KEY_BLOCK_SIZE = 395;
MySQLParser.LANGUAGE = 396;
MySQLParser.LAST = 397;
MySQLParser.LEAVES = 398;
MySQLParser.LESS = 399;
MySQLParser.LEVEL = 400;
MySQLParser.LIST = 401;
MySQLParser.LOCAL = 402;
MySQLParser.LOGFILE = 403;
MySQLParser.LOGS = 404;
MySQLParser.MASTER = 405;
MySQLParser.MASTER_AUTO_POSITION = 406;
MySQLParser.MASTER_CONNECT_RETRY = 407;
MySQLParser.MASTER_DELAY = 408;
MySQLParser.MASTER_HEARTBEAT_PERIOD = 409;
MySQLParser.MASTER_HOST = 410;
MySQLParser.MASTER_LOG_FILE = 411;
MySQLParser.MASTER_LOG_POS = 412;
MySQLParser.MASTER_PASSWORD = 413;
MySQLParser.MASTER_PORT = 414;
MySQLParser.MASTER_RETRY_COUNT = 415;
MySQLParser.MASTER_SSL = 416;
MySQLParser.MASTER_SSL_CA = 417;
MySQLParser.MASTER_SSL_CAPATH = 418;
MySQLParser.MASTER_SSL_CERT = 419;
MySQLParser.MASTER_SSL_CIPHER = 420;
MySQLParser.MASTER_SSL_CRL = 421;
MySQLParser.MASTER_SSL_CRLPATH = 422;
MySQLParser.MASTER_SSL_KEY = 423;
MySQLParser.MASTER_TLS_VERSION = 424;
MySQLParser.MASTER_USER = 425;
MySQLParser.MAX_CONNECTIONS_PER_HOUR = 426;
MySQLParser.MAX_QUERIES_PER_HOUR = 427;
MySQLParser.MAX_ROWS = 428;
MySQLParser.MAX_SIZE = 429;
MySQLParser.MAX_UPDATES_PER_HOUR = 430;
MySQLParser.MAX_USER_CONNECTIONS = 431;
MySQLParser.MEDIUM = 432;
MySQLParser.MERGE = 433;
MySQLParser.MESSAGE_TEXT = 434;
MySQLParser.MID = 435;
MySQLParser.MIGRATE = 436;
MySQLParser.MIN_ROWS = 437;
MySQLParser.MODE = 438;
MySQLParser.MODIFY = 439;
MySQLParser.MUTEX = 440;
MySQLParser.MYSQL = 441;
MySQLParser.MYSQL_ERRNO = 442;
MySQLParser.NAME = 443;
MySQLParser.NAMES = 444;
MySQLParser.NCHAR = 445;
MySQLParser.NEVER = 446;
MySQLParser.NEXT = 447;
MySQLParser.NO = 448;
MySQLParser.NODEGROUP = 449;
MySQLParser.NONE = 450;
MySQLParser.OFFLINE = 451;
MySQLParser.OFFSET = 452;
MySQLParser.OJ = 453;
MySQLParser.OLD_PASSWORD = 454;
MySQLParser.ONE = 455;
MySQLParser.ONLINE = 456;
MySQLParser.ONLY = 457;
MySQLParser.OPEN = 458;
MySQLParser.OPTIMIZER_COSTS = 459;
MySQLParser.OPTIONS = 460;
MySQLParser.OWNER = 461;
MySQLParser.PACK_KEYS = 462;
MySQLParser.PAGE = 463;
MySQLParser.PARSER = 464;
MySQLParser.PARTIAL = 465;
MySQLParser.PARTITIONING = 466;
MySQLParser.PARTITIONS = 467;
MySQLParser.PASSWORD = 468;
MySQLParser.PHASE = 469;
MySQLParser.PLUGIN = 470;
MySQLParser.PLUGIN_DIR = 471;
MySQLParser.PLUGINS = 472;
MySQLParser.PORT = 473;
MySQLParser.PRECEDES = 474;
MySQLParser.PREPARE = 475;
MySQLParser.PRESERVE = 476;
MySQLParser.PREV = 477;
MySQLParser.PROCESSLIST = 478;
MySQLParser.PROFILE = 479;
MySQLParser.PROFILES = 480;
MySQLParser.PROXY = 481;
MySQLParser.QUERY = 482;
MySQLParser.QUICK = 483;
MySQLParser.REBUILD = 484;
MySQLParser.RECOVER = 485;
MySQLParser.REDO_BUFFER_SIZE = 486;
MySQLParser.REDUNDANT = 487;
MySQLParser.RELAY = 488;
MySQLParser.RELAY_LOG_FILE = 489;
MySQLParser.RELAY_LOG_POS = 490;
MySQLParser.RELAYLOG = 491;
MySQLParser.REMOVE = 492;
MySQLParser.REORGANIZE = 493;
MySQLParser.REPAIR = 494;
MySQLParser.REPLICATE_DO_DB = 495;
MySQLParser.REPLICATE_DO_TABLE = 496;
MySQLParser.REPLICATE_IGNORE_DB = 497;
MySQLParser.REPLICATE_IGNORE_TABLE = 498;
MySQLParser.REPLICATE_REWRITE_DB = 499;
MySQLParser.REPLICATE_WILD_DO_TABLE = 500;
MySQLParser.REPLICATE_WILD_IGNORE_TABLE = 501;
MySQLParser.REPLICATION = 502;
MySQLParser.RESET = 503;
MySQLParser.RESUME = 504;
MySQLParser.RETURNED_SQLSTATE = 505;
MySQLParser.RETURNS = 506;
MySQLParser.ROLE = 507;
MySQLParser.ROLLBACK = 508;
MySQLParser.ROLLUP = 509;
MySQLParser.ROTATE = 510;
MySQLParser.ROW = 511;
MySQLParser.ROWS = 512;
MySQLParser.ROW_FORMAT = 513;
MySQLParser.SAVEPOINT = 514;
MySQLParser.SCHEDULE = 515;
MySQLParser.SECURITY = 516;
MySQLParser.SERVER = 517;
MySQLParser.SESSION = 518;
MySQLParser.SHARE = 519;
MySQLParser.SHARED = 520;
MySQLParser.SIGNED = 521;
MySQLParser.SIMPLE = 522;
MySQLParser.SLAVE = 523;
MySQLParser.SLOW = 524;
MySQLParser.SNAPSHOT = 525;
MySQLParser.SOCKET = 526;
MySQLParser.SOME = 527;
MySQLParser.SONAME = 528;
MySQLParser.SOUNDS = 529;
MySQLParser.SOURCE = 530;
MySQLParser.SQL_AFTER_GTIDS = 531;
MySQLParser.SQL_AFTER_MTS_GAPS = 532;
MySQLParser.SQL_BEFORE_GTIDS = 533;
MySQLParser.SQL_BUFFER_RESULT = 534;
MySQLParser.SQL_CACHE = 535;
MySQLParser.SQL_NO_CACHE = 536;
MySQLParser.SQL_THREAD = 537;
MySQLParser.START = 538;
MySQLParser.STARTS = 539;
MySQLParser.STATS_AUTO_RECALC = 540;
MySQLParser.STATS_PERSISTENT = 541;
MySQLParser.STATS_SAMPLE_PAGES = 542;
MySQLParser.STATUS = 543;
MySQLParser.STOP = 544;
MySQLParser.STORAGE = 545;
MySQLParser.STORED = 546;
MySQLParser.STRING = 547;
MySQLParser.SUBCLASS_ORIGIN = 548;
MySQLParser.SUBJECT = 549;
MySQLParser.SUBPARTITION = 550;
MySQLParser.SUBPARTITIONS = 551;
MySQLParser.SUSPEND = 552;
MySQLParser.SWAPS = 553;
MySQLParser.SWITCHES = 554;
MySQLParser.TABLE_NAME = 555;
MySQLParser.TABLESPACE = 556;
MySQLParser.TEMPORARY = 557;
MySQLParser.TEMPTABLE = 558;
MySQLParser.THAN = 559;
MySQLParser.TRADITIONAL = 560;
MySQLParser.TRANSACTION = 561;
MySQLParser.TRANSACTIONAL = 562;
MySQLParser.TRIGGERS = 563;
MySQLParser.TRUNCATE = 564;
MySQLParser.UNDEFINED = 565;
MySQLParser.UNDOFILE = 566;
MySQLParser.UNDO_BUFFER_SIZE = 567;
MySQLParser.UNINSTALL = 568;
MySQLParser.UNKNOWN = 569;
MySQLParser.UNTIL = 570;
MySQLParser.UPGRADE = 571;
MySQLParser.USER = 572;
MySQLParser.USE_FRM = 573;
MySQLParser.USER_RESOURCES = 574;
MySQLParser.VALIDATION = 575;
MySQLParser.VALUE = 576;
MySQLParser.VARIABLES = 577;
MySQLParser.VIEW = 578;
MySQLParser.VIRTUAL = 579;
MySQLParser.VISIBLE = 580;
MySQLParser.WAIT = 581;
MySQLParser.WARNINGS = 582;
MySQLParser.WITHOUT = 583;
MySQLParser.WORK = 584;
MySQLParser.WRAPPER = 585;
MySQLParser.X509 = 586;
MySQLParser.XA = 587;
MySQLParser.XML = 588;
MySQLParser.EUR = 589;
MySQLParser.USA = 590;
MySQLParser.JIS = 591;
MySQLParser.ISO = 592;
MySQLParser.INTERNAL = 593;
MySQLParser.QUARTER = 594;
MySQLParser.MONTH = 595;
MySQLParser.DAY = 596;
MySQLParser.HOUR = 597;
MySQLParser.MINUTE = 598;
MySQLParser.WEEK = 599;
MySQLParser.SECOND = 600;
MySQLParser.MICROSECOND = 601;
MySQLParser.TABLES = 602;
MySQLParser.ROUTINE = 603;
MySQLParser.EXECUTE = 604;
MySQLParser.FILE = 605;
MySQLParser.PROCESS = 606;
MySQLParser.RELOAD = 607;
MySQLParser.SHUTDOWN = 608;
MySQLParser.SUPER = 609;
MySQLParser.PRIVILEGES = 610;
MySQLParser.APPLICATION_PASSWORD_ADMIN = 611;
MySQLParser.AUDIT_ADMIN = 612;
MySQLParser.BACKUP_ADMIN = 613;
MySQLParser.BINLOG_ADMIN = 614;
MySQLParser.BINLOG_ENCRYPTION_ADMIN = 615;
MySQLParser.CLONE_ADMIN = 616;
MySQLParser.CONNECTION_ADMIN = 617;
MySQLParser.ENCRYPTION_KEY_ADMIN = 618;
MySQLParser.FIREWALL_ADMIN = 619;
MySQLParser.FIREWALL_USER = 620;
MySQLParser.GROUP_REPLICATION_ADMIN = 621;
MySQLParser.INNODB_REDO_LOG_ARCHIVE = 622;
MySQLParser.NDB_STORED_USER = 623;
MySQLParser.PERSIST_RO_VARIABLES_ADMIN = 624;
MySQLParser.REPLICATION_APPLIER = 625;
MySQLParser.REPLICATION_SLAVE_ADMIN = 626;
MySQLParser.RESOURCE_GROUP_ADMIN = 627;
MySQLParser.RESOURCE_GROUP_USER = 628;
MySQLParser.ROLE_ADMIN = 629;
MySQLParser.SESSION_VARIABLES_ADMIN = 630;
MySQLParser.SET_USER_ID = 631;
MySQLParser.SHOW_ROUTINE = 632;
MySQLParser.SYSTEM_VARIABLES_ADMIN = 633;
MySQLParser.TABLE_ENCRYPTION_ADMIN = 634;
MySQLParser.VERSION_TOKEN_ADMIN = 635;
MySQLParser.XA_RECOVER_ADMIN = 636;
MySQLParser.ARMSCII8 = 637;
MySQLParser.ASCII = 638;
MySQLParser.BIG5 = 639;
MySQLParser.CP1250 = 640;
MySQLParser.CP1251 = 641;
MySQLParser.CP1256 = 642;
MySQLParser.CP1257 = 643;
MySQLParser.CP850 = 644;
MySQLParser.CP852 = 645;
MySQLParser.CP866 = 646;
MySQLParser.CP932 = 647;
MySQLParser.DEC8 = 648;
MySQLParser.EUCJPMS = 649;
MySQLParser.EUCKR = 650;
MySQLParser.GB2312 = 651;
MySQLParser.GBK = 652;
MySQLParser.GEOSTD8 = 653;
MySQLParser.GREEK = 654;
MySQLParser.HEBREW = 655;
MySQLParser.HP8 = 656;
MySQLParser.KEYBCS2 = 657;
MySQLParser.KOI8R = 658;
MySQLParser.KOI8U = 659;
MySQLParser.LATIN1 = 660;
MySQLParser.LATIN2 = 661;
MySQLParser.LATIN5 = 662;
MySQLParser.LATIN7 = 663;
MySQLParser.MACCE = 664;
MySQLParser.MACROMAN = 665;
MySQLParser.SJIS = 666;
MySQLParser.SWE7 = 667;
MySQLParser.TIS620 = 668;
MySQLParser.UCS2 = 669;
MySQLParser.UJIS = 670;
MySQLParser.UTF16 = 671;
MySQLParser.UTF16LE = 672;
MySQLParser.UTF32 = 673;
MySQLParser.UTF8 = 674;
MySQLParser.UTF8MB3 = 675;
MySQLParser.UTF8MB4 = 676;
MySQLParser.ARCHIVE = 677;
MySQLParser.BLACKHOLE = 678;
MySQLParser.CSV = 679;
MySQLParser.FEDERATED = 680;
MySQLParser.INNODB = 681;
MySQLParser.MEMORY = 682;
MySQLParser.MRG_MYISAM = 683;
MySQLParser.MYISAM = 684;
MySQLParser.NDB = 685;
MySQLParser.NDBCLUSTER = 686;
MySQLParser.PERFORMANCE_SCHEMA = 687;
MySQLParser.TOKUDB = 688;
MySQLParser.REPEATABLE = 689;
MySQLParser.COMMITTED = 690;
MySQLParser.UNCOMMITTED = 691;
MySQLParser.SERIALIZABLE = 692;
MySQLParser.GEOMETRYCOLLECTION = 693;
MySQLParser.GEOMCOLLECTION = 694;
MySQLParser.GEOMETRY = 695;
MySQLParser.LINESTRING = 696;
MySQLParser.MULTILINESTRING = 697;
MySQLParser.MULTIPOINT = 698;
MySQLParser.MULTIPOLYGON = 699;
MySQLParser.POINT = 700;
MySQLParser.POLYGON = 701;
MySQLParser.ABS = 702;
MySQLParser.ACOS = 703;
MySQLParser.ADDDATE = 704;
MySQLParser.ADDTIME = 705;
MySQLParser.AES_DECRYPT = 706;
MySQLParser.AES_ENCRYPT = 707;
MySQLParser.AREA = 708;
MySQLParser.ASBINARY = 709;
MySQLParser.ASIN = 710;
MySQLParser.ASTEXT = 711;
MySQLParser.ASWKB = 712;
MySQLParser.ASWKT = 713;
MySQLParser.ASYMMETRIC_DECRYPT = 714;
MySQLParser.ASYMMETRIC_DERIVE = 715;
MySQLParser.ASYMMETRIC_ENCRYPT = 716;
MySQLParser.ASYMMETRIC_SIGN = 717;
MySQLParser.ASYMMETRIC_VERIFY = 718;
MySQLParser.ATAN = 719;
MySQLParser.ATAN2 = 720;
MySQLParser.BENCHMARK = 721;
MySQLParser.BIN = 722;
MySQLParser.BIT_COUNT = 723;
MySQLParser.BIT_LENGTH = 724;
MySQLParser.BUFFER = 725;
MySQLParser.CATALOG_NAME = 726;
MySQLParser.CEIL = 727;
MySQLParser.CEILING = 728;
MySQLParser.CENTROID = 729;
MySQLParser.CHARACTER_LENGTH = 730;
MySQLParser.CHARSET = 731;
MySQLParser.CHAR_LENGTH = 732;
MySQLParser.COERCIBILITY = 733;
MySQLParser.COLLATION = 734;
MySQLParser.COMPRESS = 735;
MySQLParser.CONCAT = 736;
MySQLParser.CONCAT_WS = 737;
MySQLParser.CONNECTION_ID = 738;
MySQLParser.CONV = 739;
MySQLParser.CONVERT_TZ = 740;
MySQLParser.COS = 741;
MySQLParser.COT = 742;
MySQLParser.CRC32 = 743;
MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY = 744;
MySQLParser.CREATE_ASYMMETRIC_PUB_KEY = 745;
MySQLParser.CREATE_DH_PARAMETERS = 746;
MySQLParser.CREATE_DIGEST = 747;
MySQLParser.CROSSES = 748;
MySQLParser.DATEDIFF = 749;
MySQLParser.DATE_FORMAT = 750;
MySQLParser.DAYNAME = 751;
MySQLParser.DAYOFMONTH = 752;
MySQLParser.DAYOFWEEK = 753;
MySQLParser.DAYOFYEAR = 754;
MySQLParser.DECODE = 755;
MySQLParser.DEGREES = 756;
MySQLParser.DES_DECRYPT = 757;
MySQLParser.DES_ENCRYPT = 758;
MySQLParser.DIMENSION = 759;
MySQLParser.DISJOINT = 760;
MySQLParser.ELT = 761;
MySQLParser.ENCODE = 762;
MySQLParser.ENCRYPT = 763;
MySQLParser.ENDPOINT = 764;
MySQLParser.ENVELOPE = 765;
MySQLParser.EQUALS = 766;
MySQLParser.EXP = 767;
MySQLParser.EXPORT_SET = 768;
MySQLParser.EXTERIORRING = 769;
MySQLParser.EXTRACTVALUE = 770;
MySQLParser.FIELD = 771;
MySQLParser.FIND_IN_SET = 772;
MySQLParser.FLOOR = 773;
MySQLParser.FORMAT = 774;
MySQLParser.FOUND_ROWS = 775;
MySQLParser.FROM_BASE64 = 776;
MySQLParser.FROM_DAYS = 777;
MySQLParser.FROM_UNIXTIME = 778;
MySQLParser.GEOMCOLLFROMTEXT = 779;
MySQLParser.GEOMCOLLFROMWKB = 780;
MySQLParser.GEOMETRYCOLLECTIONFROMTEXT = 781;
MySQLParser.GEOMETRYCOLLECTIONFROMWKB = 782;
MySQLParser.GEOMETRYFROMTEXT = 783;
MySQLParser.GEOMETRYFROMWKB = 784;
MySQLParser.GEOMETRYN = 785;
MySQLParser.GEOMETRYTYPE = 786;
MySQLParser.GEOMFROMTEXT = 787;
MySQLParser.GEOMFROMWKB = 788;
MySQLParser.GET_FORMAT = 789;
MySQLParser.GET_LOCK = 790;
MySQLParser.GLENGTH = 791;
MySQLParser.GREATEST = 792;
MySQLParser.GTID_SUBSET = 793;
MySQLParser.GTID_SUBTRACT = 794;
MySQLParser.HEX = 795;
MySQLParser.IFNULL = 796;
MySQLParser.INET6_ATON = 797;
MySQLParser.INET6_NTOA = 798;
MySQLParser.INET_ATON = 799;
MySQLParser.INET_NTOA = 800;
MySQLParser.INSTR = 801;
MySQLParser.INTERIORRINGN = 802;
MySQLParser.INTERSECTS = 803;
MySQLParser.ISCLOSED = 804;
MySQLParser.ISEMPTY = 805;
MySQLParser.ISNULL = 806;
MySQLParser.ISSIMPLE = 807;
MySQLParser.IS_FREE_LOCK = 808;
MySQLParser.IS_IPV4 = 809;
MySQLParser.IS_IPV4_COMPAT = 810;
MySQLParser.IS_IPV4_MAPPED = 811;
MySQLParser.IS_IPV6 = 812;
MySQLParser.IS_USED_LOCK = 813;
MySQLParser.LAST_INSERT_ID = 814;
MySQLParser.LCASE = 815;
MySQLParser.LEAST = 816;
MySQLParser.LENGTH = 817;
MySQLParser.LINEFROMTEXT = 818;
MySQLParser.LINEFROMWKB = 819;
MySQLParser.LINESTRINGFROMTEXT = 820;
MySQLParser.LINESTRINGFROMWKB = 821;
MySQLParser.LN = 822;
MySQLParser.LOAD_FILE = 823;
MySQLParser.LOCATE = 824;
MySQLParser.LOG = 825;
MySQLParser.LOG10 = 826;
MySQLParser.LOG2 = 827;
MySQLParser.LOWER = 828;
MySQLParser.LPAD = 829;
MySQLParser.LTRIM = 830;
MySQLParser.MAKEDATE = 831;
MySQLParser.MAKETIME = 832;
MySQLParser.MAKE_SET = 833;
MySQLParser.MASTER_POS_WAIT = 834;
MySQLParser.MBRCONTAINS = 835;
MySQLParser.MBRDISJOINT = 836;
MySQLParser.MBREQUAL = 837;
MySQLParser.MBRINTERSECTS = 838;
MySQLParser.MBROVERLAPS = 839;
MySQLParser.MBRTOUCHES = 840;
MySQLParser.MBRWITHIN = 841;
MySQLParser.MD5 = 842;
MySQLParser.MLINEFROMTEXT = 843;
MySQLParser.MLINEFROMWKB = 844;
MySQLParser.MONTHNAME = 845;
MySQLParser.MPOINTFROMTEXT = 846;
MySQLParser.MPOINTFROMWKB = 847;
MySQLParser.MPOLYFROMTEXT = 848;
MySQLParser.MPOLYFROMWKB = 849;
MySQLParser.MULTILINESTRINGFROMTEXT = 850;
MySQLParser.MULTILINESTRINGFROMWKB = 851;
MySQLParser.MULTIPOINTFROMTEXT = 852;
MySQLParser.MULTIPOINTFROMWKB = 853;
MySQLParser.MULTIPOLYGONFROMTEXT = 854;
MySQLParser.MULTIPOLYGONFROMWKB = 855;
MySQLParser.NAME_CONST = 856;
MySQLParser.NULLIF = 857;
MySQLParser.NUMGEOMETRIES = 858;
MySQLParser.NUMINTERIORRINGS = 859;
MySQLParser.NUMPOINTS = 860;
MySQLParser.OCT = 861;
MySQLParser.OCTET_LENGTH = 862;
MySQLParser.ORD = 863;
MySQLParser.OVERLAPS = 864;
MySQLParser.PERIOD_ADD = 865;
MySQLParser.PERIOD_DIFF = 866;
MySQLParser.PI = 867;
MySQLParser.POINTFROMTEXT = 868;
MySQLParser.POINTFROMWKB = 869;
MySQLParser.POINTN = 870;
MySQLParser.POLYFROMTEXT = 871;
MySQLParser.POLYFROMWKB = 872;
MySQLParser.POLYGONFROMTEXT = 873;
MySQLParser.POLYGONFROMWKB = 874;
MySQLParser.POW = 875;
MySQLParser.POWER = 876;
MySQLParser.QUOTE = 877;
MySQLParser.RADIANS = 878;
MySQLParser.RAND = 879;
MySQLParser.RANDOM_BYTES = 880;
MySQLParser.RELEASE_LOCK = 881;
MySQLParser.REVERSE = 882;
MySQLParser.ROUND = 883;
MySQLParser.ROW_COUNT = 884;
MySQLParser.RPAD = 885;
MySQLParser.RTRIM = 886;
MySQLParser.SEC_TO_TIME = 887;
MySQLParser.SESSION_USER = 888;
MySQLParser.SHA = 889;
MySQLParser.SHA1 = 890;
MySQLParser.SHA2 = 891;
MySQLParser.SCHEMA_NAME = 892;
MySQLParser.SIGN = 893;
MySQLParser.SIN = 894;
MySQLParser.SLEEP = 895;
MySQLParser.SOUNDEX = 896;
MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS = 897;
MySQLParser.SQRT = 898;
MySQLParser.SRID = 899;
MySQLParser.STARTPOINT = 900;
MySQLParser.STRCMP = 901;
MySQLParser.STR_TO_DATE = 902;
MySQLParser.ST_AREA = 903;
MySQLParser.ST_ASBINARY = 904;
MySQLParser.ST_ASTEXT = 905;
MySQLParser.ST_ASWKB = 906;
MySQLParser.ST_ASWKT = 907;
MySQLParser.ST_BUFFER = 908;
MySQLParser.ST_CENTROID = 909;
MySQLParser.ST_CONTAINS = 910;
MySQLParser.ST_CROSSES = 911;
MySQLParser.ST_DIFFERENCE = 912;
MySQLParser.ST_DIMENSION = 913;
MySQLParser.ST_DISJOINT = 914;
MySQLParser.ST_DISTANCE = 915;
MySQLParser.ST_ENDPOINT = 916;
MySQLParser.ST_ENVELOPE = 917;
MySQLParser.ST_EQUALS = 918;
MySQLParser.ST_EXTERIORRING = 919;
MySQLParser.ST_GEOMCOLLFROMTEXT = 920;
MySQLParser.ST_GEOMCOLLFROMTXT = 921;
MySQLParser.ST_GEOMCOLLFROMWKB = 922;
MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT = 923;
MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB = 924;
MySQLParser.ST_GEOMETRYFROMTEXT = 925;
MySQLParser.ST_GEOMETRYFROMWKB = 926;
MySQLParser.ST_GEOMETRYN = 927;
MySQLParser.ST_GEOMETRYTYPE = 928;
MySQLParser.ST_GEOMFROMTEXT = 929;
MySQLParser.ST_GEOMFROMWKB = 930;
MySQLParser.ST_INTERIORRINGN = 931;
MySQLParser.ST_INTERSECTION = 932;
MySQLParser.ST_INTERSECTS = 933;
MySQLParser.ST_ISCLOSED = 934;
MySQLParser.ST_ISEMPTY = 935;
MySQLParser.ST_ISSIMPLE = 936;
MySQLParser.ST_LINEFROMTEXT = 937;
MySQLParser.ST_LINEFROMWKB = 938;
MySQLParser.ST_LINESTRINGFROMTEXT = 939;
MySQLParser.ST_LINESTRINGFROMWKB = 940;
MySQLParser.ST_NUMGEOMETRIES = 941;
MySQLParser.ST_NUMINTERIORRING = 942;
MySQLParser.ST_NUMINTERIORRINGS = 943;
MySQLParser.ST_NUMPOINTS = 944;
MySQLParser.ST_OVERLAPS = 945;
MySQLParser.ST_POINTFROMTEXT = 946;
MySQLParser.ST_POINTFROMWKB = 947;
MySQLParser.ST_POINTN = 948;
MySQLParser.ST_POLYFROMTEXT = 949;
MySQLParser.ST_POLYFROMWKB = 950;
MySQLParser.ST_POLYGONFROMTEXT = 951;
MySQLParser.ST_POLYGONFROMWKB = 952;
MySQLParser.ST_SRID = 953;
MySQLParser.ST_STARTPOINT = 954;
MySQLParser.ST_SYMDIFFERENCE = 955;
MySQLParser.ST_TOUCHES = 956;
MySQLParser.ST_UNION = 957;
MySQLParser.ST_WITHIN = 958;
MySQLParser.ST_X = 959;
MySQLParser.ST_Y = 960;
MySQLParser.SUBDATE = 961;
MySQLParser.SUBSTRING_INDEX = 962;
MySQLParser.SUBTIME = 963;
MySQLParser.SYSTEM_USER = 964;
MySQLParser.TAN = 965;
MySQLParser.TIMEDIFF = 966;
MySQLParser.TIMESTAMPADD = 967;
MySQLParser.TIMESTAMPDIFF = 968;
MySQLParser.TIME_FORMAT = 969;
MySQLParser.TIME_TO_SEC = 970;
MySQLParser.TOUCHES = 971;
MySQLParser.TO_BASE64 = 972;
MySQLParser.TO_DAYS = 973;
MySQLParser.TO_SECONDS = 974;
MySQLParser.UCASE = 975;
MySQLParser.UNCOMPRESS = 976;
MySQLParser.UNCOMPRESSED_LENGTH = 977;
MySQLParser.UNHEX = 978;
MySQLParser.UNIX_TIMESTAMP = 979;
MySQLParser.UPDATEXML = 980;
MySQLParser.UPPER = 981;
MySQLParser.UUID = 982;
MySQLParser.UUID_SHORT = 983;
MySQLParser.VALIDATE_PASSWORD_STRENGTH = 984;
MySQLParser.VERSION = 985;
MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = 986;
MySQLParser.WEEKDAY = 987;
MySQLParser.WEEKOFYEAR = 988;
MySQLParser.WEIGHT_STRING = 989;
MySQLParser.WITHIN = 990;
MySQLParser.YEARWEEK = 991;
MySQLParser.Y_FUNCTION = 992;
MySQLParser.X_FUNCTION = 993;
MySQLParser.VAR_ASSIGN = 994;
MySQLParser.PLUS_ASSIGN = 995;
MySQLParser.MINUS_ASSIGN = 996;
MySQLParser.MULT_ASSIGN = 997;
MySQLParser.DIV_ASSIGN = 998;
MySQLParser.MOD_ASSIGN = 999;
MySQLParser.AND_ASSIGN = 1000;
MySQLParser.XOR_ASSIGN = 1001;
MySQLParser.OR_ASSIGN = 1002;
MySQLParser.STAR = 1003;
MySQLParser.DIVIDE = 1004;
MySQLParser.MODULE = 1005;
MySQLParser.PLUS = 1006;
MySQLParser.MINUSMINUS = 1007;
MySQLParser.MINUS = 1008;
MySQLParser.DIV = 1009;
MySQLParser.MOD = 1010;
MySQLParser.EQUAL_SYMBOL = 1011;
MySQLParser.GREATER_SYMBOL = 1012;
MySQLParser.LESS_SYMBOL = 1013;
MySQLParser.EXCLAMATION_SYMBOL = 1014;
MySQLParser.BIT_NOT_OP = 1015;
MySQLParser.BIT_OR_OP = 1016;
MySQLParser.BIT_AND_OP = 1017;
MySQLParser.BIT_XOR_OP = 1018;
MySQLParser.DOT = 1019;
MySQLParser.LR_BRACKET = 1020;
MySQLParser.RR_BRACKET = 1021;
MySQLParser.COMMA = 1022;
MySQLParser.SEMI = 1023;
MySQLParser.AT_SIGN = 1024;
MySQLParser.ZERO_DECIMAL = 1025;
MySQLParser.ONE_DECIMAL = 1026;
MySQLParser.TWO_DECIMAL = 1027;
MySQLParser.SINGLE_QUOTE_SYMB = 1028;
MySQLParser.DOUBLE_QUOTE_SYMB = 1029;
MySQLParser.REVERSE_QUOTE_SYMB = 1030;
MySQLParser.COLON_SYMB = 1031;
MySQLParser.CHARSET_REVERSE_QOUTE_STRING = 1032;
MySQLParser.FILESIZE_LITERAL = 1033;
MySQLParser.START_NATIONAL_STRING_LITERAL = 1034;
MySQLParser.STRING_LITERAL = 1035;
MySQLParser.DECIMAL_LITERAL = 1036;
MySQLParser.HEXADECIMAL_LITERAL = 1037;
MySQLParser.REAL_LITERAL = 1038;
MySQLParser.NULL_SPEC_LITERAL = 1039;
MySQLParser.BIT_STRING = 1040;
MySQLParser.STRING_CHARSET_NAME = 1041;
MySQLParser.DOT_ID = 1042;
MySQLParser.ID = 1043;
MySQLParser.REVERSE_QUOTE_ID = 1044;
MySQLParser.STRING_USER_NAME = 1045;
MySQLParser.LOCAL_ID = 1046;
MySQLParser.GLOBAL_ID = 1047;
MySQLParser.ERROR_RECONGNIGION = 1048;

MySQLParser.RULE_statement = 0;
MySQLParser.RULE_sqlStatements = 1;
MySQLParser.RULE_sqlStatement = 2;
MySQLParser.RULE_emptyStatement = 3;
MySQLParser.RULE_ddlStatement = 4;
MySQLParser.RULE_dmlStatement = 5;
MySQLParser.RULE_transactionStatement = 6;
MySQLParser.RULE_replicationStatement = 7;
MySQLParser.RULE_preparedStatement = 8;
MySQLParser.RULE_compoundStatement = 9;
MySQLParser.RULE_administrationStatement = 10;
MySQLParser.RULE_utilityStatement = 11;
MySQLParser.RULE_createDatabase = 12;
MySQLParser.RULE_createEvent = 13;
MySQLParser.RULE_createIndex = 14;
MySQLParser.RULE_createLogfileGroup = 15;
MySQLParser.RULE_createProcedure = 16;
MySQLParser.RULE_createFunction = 17;
MySQLParser.RULE_createServer = 18;
MySQLParser.RULE_createTable = 19;
MySQLParser.RULE_createTablespaceInnodb = 20;
MySQLParser.RULE_createTablespaceNdb = 21;
MySQLParser.RULE_createTrigger = 22;
MySQLParser.RULE_createView = 23;
MySQLParser.RULE_createDatabaseOption = 24;
MySQLParser.RULE_ownerStatement = 25;
MySQLParser.RULE_scheduleExpression = 26;
MySQLParser.RULE_timestampValue = 27;
MySQLParser.RULE_intervalExpr = 28;
MySQLParser.RULE_intervalType = 29;
MySQLParser.RULE_enableType = 30;
MySQLParser.RULE_indexType = 31;
MySQLParser.RULE_indexOption = 32;
MySQLParser.RULE_procedureParameter = 33;
MySQLParser.RULE_functionParameter = 34;
MySQLParser.RULE_routineOption = 35;
MySQLParser.RULE_serverOption = 36;
MySQLParser.RULE_createDefinitions = 37;
MySQLParser.RULE_createDefinition = 38;
MySQLParser.RULE_columnDefinition = 39;
MySQLParser.RULE_columnConstraint = 40;
MySQLParser.RULE_tableConstraint = 41;
MySQLParser.RULE_referenceDefinition = 42;
MySQLParser.RULE_referenceAction = 43;
MySQLParser.RULE_referenceControlType = 44;
MySQLParser.RULE_indexColumnDefinition = 45;
MySQLParser.RULE_tableOption = 46;
MySQLParser.RULE_tablespaceStorage = 47;
MySQLParser.RULE_partitionDefinitions = 48;
MySQLParser.RULE_partitionFunctionDefinition = 49;
MySQLParser.RULE_subpartitionFunctionDefinition = 50;
MySQLParser.RULE_partitionDefinition = 51;
MySQLParser.RULE_partitionDefinerAtom = 52;
MySQLParser.RULE_partitionDefinerVector = 53;
MySQLParser.RULE_subpartitionDefinition = 54;
MySQLParser.RULE_partitionOption = 55;
MySQLParser.RULE_alterDatabase = 56;
MySQLParser.RULE_alterEvent = 57;
MySQLParser.RULE_alterFunction = 58;
MySQLParser.RULE_alterInstance = 59;
MySQLParser.RULE_alterLogfileGroup = 60;
MySQLParser.RULE_alterProcedure = 61;
MySQLParser.RULE_alterServer = 62;
MySQLParser.RULE_alterTable = 63;
MySQLParser.RULE_alterTablespace = 64;
MySQLParser.RULE_alterView = 65;
MySQLParser.RULE_alterSpecification = 66;
MySQLParser.RULE_dropDatabase = 67;
MySQLParser.RULE_dropEvent = 68;
MySQLParser.RULE_dropIndex = 69;
MySQLParser.RULE_dropLogfileGroup = 70;
MySQLParser.RULE_dropProcedure = 71;
MySQLParser.RULE_dropFunction = 72;
MySQLParser.RULE_dropServer = 73;
MySQLParser.RULE_dropTable = 74;
MySQLParser.RULE_dropTablespace = 75;
MySQLParser.RULE_dropTrigger = 76;
MySQLParser.RULE_dropView = 77;
MySQLParser.RULE_renameTable = 78;
MySQLParser.RULE_renameTableClause = 79;
MySQLParser.RULE_truncateTable = 80;
MySQLParser.RULE_callStatement = 81;
MySQLParser.RULE_deleteStatement = 82;
MySQLParser.RULE_doStatement = 83;
MySQLParser.RULE_handlerStatement = 84;
MySQLParser.RULE_insertStatement = 85;
MySQLParser.RULE_loadDataStatement = 86;
MySQLParser.RULE_loadXmlStatement = 87;
MySQLParser.RULE_replaceStatement = 88;
MySQLParser.RULE_selectStatement = 89;
MySQLParser.RULE_updateStatement = 90;
MySQLParser.RULE_insertStatementValue = 91;
MySQLParser.RULE_updatedElement = 92;
MySQLParser.RULE_assignmentField = 93;
MySQLParser.RULE_lockClause = 94;
MySQLParser.RULE_singleDeleteStatement = 95;
MySQLParser.RULE_multipleDeleteStatement = 96;
MySQLParser.RULE_handlerOpenStatement = 97;
MySQLParser.RULE_handlerReadIndexStatement = 98;
MySQLParser.RULE_handlerReadStatement = 99;
MySQLParser.RULE_handlerCloseStatement = 100;
MySQLParser.RULE_singleUpdateStatement = 101;
MySQLParser.RULE_multipleUpdateStatement = 102;
MySQLParser.RULE_orderByClause = 103;
MySQLParser.RULE_orderByExpression = 104;
MySQLParser.RULE_tableSources = 105;
MySQLParser.RULE_tableSource = 106;
MySQLParser.RULE_tableSourceItem = 107;
MySQLParser.RULE_indexHint = 108;
MySQLParser.RULE_indexHintType = 109;
MySQLParser.RULE_joinPart = 110;
MySQLParser.RULE_queryExpression = 111;
MySQLParser.RULE_queryExpressionNointo = 112;
MySQLParser.RULE_querySpecification = 113;
MySQLParser.RULE_querySpecificationNointo = 114;
MySQLParser.RULE_unionParenthesis = 115;
MySQLParser.RULE_unionStatement = 116;
MySQLParser.RULE_selectSpec = 117;
MySQLParser.RULE_selectElements = 118;
MySQLParser.RULE_selectElement = 119;
MySQLParser.RULE_selectIntoExpression = 120;
MySQLParser.RULE_selectFieldsInto = 121;
MySQLParser.RULE_selectLinesInto = 122;
MySQLParser.RULE_fromClause = 123;
MySQLParser.RULE_groupByItem = 124;
MySQLParser.RULE_limitClause = 125;
MySQLParser.RULE_limitClauseAtom = 126;
MySQLParser.RULE_startTransaction = 127;
MySQLParser.RULE_beginWork = 128;
MySQLParser.RULE_commitWork = 129;
MySQLParser.RULE_rollbackWork = 130;
MySQLParser.RULE_savepointStatement = 131;
MySQLParser.RULE_rollbackStatement = 132;
MySQLParser.RULE_releaseStatement = 133;
MySQLParser.RULE_lockTables = 134;
MySQLParser.RULE_unlockTables = 135;
MySQLParser.RULE_setAutocommitStatement = 136;
MySQLParser.RULE_setTransactionStatement = 137;
MySQLParser.RULE_transactionMode = 138;
MySQLParser.RULE_lockTableElement = 139;
MySQLParser.RULE_lockAction = 140;
MySQLParser.RULE_transactionOption = 141;
MySQLParser.RULE_transactionLevel = 142;
MySQLParser.RULE_changeMaster = 143;
MySQLParser.RULE_changeReplicationFilter = 144;
MySQLParser.RULE_purgeBinaryLogs = 145;
MySQLParser.RULE_resetMaster = 146;
MySQLParser.RULE_resetSlave = 147;
MySQLParser.RULE_startSlave = 148;
MySQLParser.RULE_stopSlave = 149;
MySQLParser.RULE_startGroupReplication = 150;
MySQLParser.RULE_stopGroupReplication = 151;
MySQLParser.RULE_masterOption = 152;
MySQLParser.RULE_stringMasterOption = 153;
MySQLParser.RULE_decimalMasterOption = 154;
MySQLParser.RULE_boolMasterOption = 155;
MySQLParser.RULE_channelOption = 156;
MySQLParser.RULE_replicationFilter = 157;
MySQLParser.RULE_tablePair = 158;
MySQLParser.RULE_threadType = 159;
MySQLParser.RULE_untilOption = 160;
MySQLParser.RULE_connectionOption = 161;
MySQLParser.RULE_gtuidSet = 162;
MySQLParser.RULE_xaStartTransaction = 163;
MySQLParser.RULE_xaEndTransaction = 164;
MySQLParser.RULE_xaPrepareStatement = 165;
MySQLParser.RULE_xaCommitWork = 166;
MySQLParser.RULE_xaRollbackWork = 167;
MySQLParser.RULE_xaRecoverWork = 168;
MySQLParser.RULE_prepareStatement = 169;
MySQLParser.RULE_executeStatement = 170;
MySQLParser.RULE_deallocatePrepare = 171;
MySQLParser.RULE_routineBody = 172;
MySQLParser.RULE_blockStatement = 173;
MySQLParser.RULE_caseStatement = 174;
MySQLParser.RULE_ifStatement = 175;
MySQLParser.RULE_iterateStatement = 176;
MySQLParser.RULE_leaveStatement = 177;
MySQLParser.RULE_loopStatement = 178;
MySQLParser.RULE_repeatStatement = 179;
MySQLParser.RULE_returnStatement = 180;
MySQLParser.RULE_whileStatement = 181;
MySQLParser.RULE_cursorStatement = 182;
MySQLParser.RULE_declareVariable = 183;
MySQLParser.RULE_declareCondition = 184;
MySQLParser.RULE_declareCursor = 185;
MySQLParser.RULE_declareHandler = 186;
MySQLParser.RULE_handlerConditionValue = 187;
MySQLParser.RULE_procedureSqlStatement = 188;
MySQLParser.RULE_caseAlternative = 189;
MySQLParser.RULE_elifAlternative = 190;
MySQLParser.RULE_alterUser = 191;
MySQLParser.RULE_createUser = 192;
MySQLParser.RULE_dropUser = 193;
MySQLParser.RULE_grantStatement = 194;
MySQLParser.RULE_grantProxy = 195;
MySQLParser.RULE_renameUser = 196;
MySQLParser.RULE_revokeStatement = 197;
MySQLParser.RULE_revokeProxy = 198;
MySQLParser.RULE_setPasswordStatement = 199;
MySQLParser.RULE_userSpecification = 200;
MySQLParser.RULE_userAuthOption = 201;
MySQLParser.RULE_tlsOption = 202;
MySQLParser.RULE_userResourceOption = 203;
MySQLParser.RULE_userPasswordOption = 204;
MySQLParser.RULE_userLockOption = 205;
MySQLParser.RULE_privelegeClause = 206;
MySQLParser.RULE_privilege = 207;
MySQLParser.RULE_privilegeLevel = 208;
MySQLParser.RULE_renameUserClause = 209;
MySQLParser.RULE_analyzeTable = 210;
MySQLParser.RULE_checkTable = 211;
MySQLParser.RULE_checksumTable = 212;
MySQLParser.RULE_optimizeTable = 213;
MySQLParser.RULE_repairTable = 214;
MySQLParser.RULE_checkTableOption = 215;
MySQLParser.RULE_createUdfunction = 216;
MySQLParser.RULE_installPlugin = 217;
MySQLParser.RULE_uninstallPlugin = 218;
MySQLParser.RULE_setStatement = 219;
MySQLParser.RULE_showStatement = 220;
MySQLParser.RULE_variableClause = 221;
MySQLParser.RULE_showCommonEntity = 222;
MySQLParser.RULE_showFilter = 223;
MySQLParser.RULE_showGlobalInfoClause = 224;
MySQLParser.RULE_showSchemaEntity = 225;
MySQLParser.RULE_showProfileType = 226;
MySQLParser.RULE_binlogStatement = 227;
MySQLParser.RULE_cacheIndexStatement = 228;
MySQLParser.RULE_flushStatement = 229;
MySQLParser.RULE_killStatement = 230;
MySQLParser.RULE_loadIndexIntoCache = 231;
MySQLParser.RULE_resetStatement = 232;
MySQLParser.RULE_shutdownStatement = 233;
MySQLParser.RULE_tableIndexes = 234;
MySQLParser.RULE_flushOption = 235;
MySQLParser.RULE_flushTableOption = 236;
MySQLParser.RULE_loadedTableIndexes = 237;
MySQLParser.RULE_simpleDescribeStatement = 238;
MySQLParser.RULE_fullDescribeStatement = 239;
MySQLParser.RULE_helpStatement = 240;
MySQLParser.RULE_useStatement = 241;
MySQLParser.RULE_signalStatement = 242;
MySQLParser.RULE_resignalStatement = 243;
MySQLParser.RULE_signalConditionInformation = 244;
MySQLParser.RULE_diagnosticsStatement = 245;
MySQLParser.RULE_diagnosticsConditionInformationName = 246;
MySQLParser.RULE_describeObjectClause = 247;
MySQLParser.RULE_fullId = 248;
MySQLParser.RULE_tableName = 249;
MySQLParser.RULE_fullColumnName = 250;
MySQLParser.RULE_indexColumnName = 251;
MySQLParser.RULE_userName = 252;
MySQLParser.RULE_mysqlVariable = 253;
MySQLParser.RULE_charsetName = 254;
MySQLParser.RULE_collationName = 255;
MySQLParser.RULE_engineName = 256;
MySQLParser.RULE_uuidSet = 257;
MySQLParser.RULE_xid = 258;
MySQLParser.RULE_xuidStringId = 259;
MySQLParser.RULE_authPlugin = 260;
MySQLParser.RULE_uid = 261;
MySQLParser.RULE_simpleId = 262;
MySQLParser.RULE_dottedId = 263;
MySQLParser.RULE_decimalLiteral = 264;
MySQLParser.RULE_fileSizeLiteral = 265;
MySQLParser.RULE_stringLiteral = 266;
MySQLParser.RULE_booleanLiteral = 267;
MySQLParser.RULE_hexadecimalLiteral = 268;
MySQLParser.RULE_nullNotnull = 269;
MySQLParser.RULE_constant = 270;
MySQLParser.RULE_dataType = 271;
MySQLParser.RULE_collectionOptions = 272;
MySQLParser.RULE_convertedDataType = 273;
MySQLParser.RULE_lengthOneDimension = 274;
MySQLParser.RULE_lengthTwoDimension = 275;
MySQLParser.RULE_lengthTwoOptionalDimension = 276;
MySQLParser.RULE_uidList = 277;
MySQLParser.RULE_tables = 278;
MySQLParser.RULE_indexColumnNames = 279;
MySQLParser.RULE_expressions = 280;
MySQLParser.RULE_expressionsWithDefaults = 281;
MySQLParser.RULE_constants = 282;
MySQLParser.RULE_simpleStrings = 283;
MySQLParser.RULE_userVariables = 284;
MySQLParser.RULE_defaultValue = 285;
MySQLParser.RULE_currentTimestamp = 286;
MySQLParser.RULE_expressionOrDefault = 287;
MySQLParser.RULE_ifExists = 288;
MySQLParser.RULE_ifNotExists = 289;
MySQLParser.RULE_functionCall = 290;
MySQLParser.RULE_specificFunction = 291;
MySQLParser.RULE_caseFuncAlternative = 292;
MySQLParser.RULE_levelsInWeightString = 293;
MySQLParser.RULE_levelInWeightListElement = 294;
MySQLParser.RULE_aggregateWindowedFunction = 295;
MySQLParser.RULE_scalarFunctionName = 296;
MySQLParser.RULE_passwordFunctionClause = 297;
MySQLParser.RULE_functionArgs = 298;
MySQLParser.RULE_functionArg = 299;
MySQLParser.RULE_expression = 300;
MySQLParser.RULE_predicate = 301;
MySQLParser.RULE_expressionAtom = 302;
MySQLParser.RULE_unaryOperator = 303;
MySQLParser.RULE_comparisonOperator = 304;
MySQLParser.RULE_logicalOperator = 305;
MySQLParser.RULE_bitOperator = 306;
MySQLParser.RULE_mathOperator = 307;
MySQLParser.RULE_charsetNameBase = 308;
MySQLParser.RULE_transactionLevelBase = 309;
MySQLParser.RULE_privilegesBase = 310;
MySQLParser.RULE_intervalTypeBase = 311;
MySQLParser.RULE_dataTypeBase = 312;
MySQLParser.RULE_keywordsCanBeId = 313;
MySQLParser.RULE_functionNameBase = 314;


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.EOF = function() {
    return this.getToken(MySQLParser.EOF, 0);
};

StatementContext.prototype.sqlStatements = function() {
    return this.getTypedRuleContext(SqlStatementsContext,0);
};

StatementContext.prototype.MINUSMINUS = function() {
    return this.getToken(MySQLParser.MINUSMINUS, 0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStatement(this);
	}
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.StatementContext = StatementContext;

MySQLParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, MySQLParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 631;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MySQLParser.ALTER) | (1 << MySQLParser.ANALYZE) | (1 << MySQLParser.CALL) | (1 << MySQLParser.CHANGE) | (1 << MySQLParser.CHECK) | (1 << MySQLParser.CREATE))) !== 0) || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (MySQLParser.DELETE - 40)) | (1 << (MySQLParser.DESC - 40)) | (1 << (MySQLParser.DESCRIBE - 40)) | (1 << (MySQLParser.DROP - 40)) | (1 << (MySQLParser.EXPLAIN - 40)) | (1 << (MySQLParser.GET - 40)) | (1 << (MySQLParser.GRANT - 40)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (MySQLParser.INSERT - 76)) | (1 << (MySQLParser.KILL - 76)) | (1 << (MySQLParser.LOAD - 76)) | (1 << (MySQLParser.LOCK - 76)) | (1 << (MySQLParser.OPTIMIZE - 76)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (MySQLParser.PURGE - 118)) | (1 << (MySQLParser.RELEASE - 118)) | (1 << (MySQLParser.RENAME - 118)) | (1 << (MySQLParser.REPLACE - 118)) | (1 << (MySQLParser.RESIGNAL - 118)) | (1 << (MySQLParser.REVOKE - 118)) | (1 << (MySQLParser.SELECT - 118)) | (1 << (MySQLParser.SET - 118)) | (1 << (MySQLParser.SHOW - 118)) | (1 << (MySQLParser.SIGNAL - 118)))) !== 0) || ((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (MySQLParser.UNLOCK - 164)) | (1 << (MySQLParser.UPDATE - 164)) | (1 << (MySQLParser.USE - 164)))) !== 0) || ((((_la - 282)) & ~0x1f) == 0 && ((1 << (_la - 282)) & ((1 << (MySQLParser.BEGIN - 282)) | (1 << (MySQLParser.BINLOG - 282)) | (1 << (MySQLParser.CACHE - 282)) | (1 << (MySQLParser.CHECKSUM - 282)) | (1 << (MySQLParser.COMMIT - 282)))) !== 0) || _la===MySQLParser.DEALLOCATE || _la===MySQLParser.DO || ((((_la - 364)) & ~0x1f) == 0 && ((1 << (_la - 364)) & ((1 << (MySQLParser.FLUSH - 364)) | (1 << (MySQLParser.HANDLER - 364)) | (1 << (MySQLParser.HELP - 364)) | (1 << (MySQLParser.INSTALL - 364)))) !== 0) || ((((_la - 475)) & ~0x1f) == 0 && ((1 << (_la - 475)) & ((1 << (MySQLParser.PREPARE - 475)) | (1 << (MySQLParser.REPAIR - 475)) | (1 << (MySQLParser.RESET - 475)))) !== 0) || ((((_la - 508)) & ~0x1f) == 0 && ((1 << (_la - 508)) & ((1 << (MySQLParser.ROLLBACK - 508)) | (1 << (MySQLParser.SAVEPOINT - 508)) | (1 << (MySQLParser.START - 508)))) !== 0) || ((((_la - 544)) & ~0x1f) == 0 && ((1 << (_la - 544)) & ((1 << (MySQLParser.STOP - 544)) | (1 << (MySQLParser.TRUNCATE - 544)) | (1 << (MySQLParser.UNINSTALL - 544)))) !== 0) || ((((_la - 587)) & ~0x1f) == 0 && ((1 << (_la - 587)) & ((1 << (MySQLParser.XA - 587)) | (1 << (MySQLParser.EXECUTE - 587)) | (1 << (MySQLParser.SHUTDOWN - 587)))) !== 0) || _la===MySQLParser.LR_BRACKET || _la===MySQLParser.SEMI) {
            this.state = 630;
            this.sqlStatements();
        }

        this.state = 634;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.MINUSMINUS) {
            this.state = 633;
            this.match(MySQLParser.MINUSMINUS);
        }

        this.state = 636;
        this.match(MySQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SqlStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_sqlStatements;
    return this;
}

SqlStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SqlStatementsContext.prototype.constructor = SqlStatementsContext;

SqlStatementsContext.prototype.sqlStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SqlStatementContext);
    } else {
        return this.getTypedRuleContext(SqlStatementContext,i);
    }
};

SqlStatementsContext.prototype.emptyStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EmptyStatementContext);
    } else {
        return this.getTypedRuleContext(EmptyStatementContext,i);
    }
};

SqlStatementsContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.SEMI);
    } else {
        return this.getToken(MySQLParser.SEMI, i);
    }
};


SqlStatementsContext.prototype.MINUSMINUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.MINUSMINUS);
    } else {
        return this.getToken(MySQLParser.MINUSMINUS, i);
    }
};


SqlStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSqlStatements(this);
	}
};

SqlStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSqlStatements(this);
	}
};

SqlStatementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSqlStatements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SqlStatementsContext = SqlStatementsContext;

MySQLParser.prototype.sqlStatements = function() {

    var localctx = new SqlStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, MySQLParser.RULE_sqlStatements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 648;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 646;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.ALTER:
                case MySQLParser.ANALYZE:
                case MySQLParser.CALL:
                case MySQLParser.CHANGE:
                case MySQLParser.CHECK:
                case MySQLParser.CREATE:
                case MySQLParser.DELETE:
                case MySQLParser.DESC:
                case MySQLParser.DESCRIBE:
                case MySQLParser.DROP:
                case MySQLParser.EXPLAIN:
                case MySQLParser.GET:
                case MySQLParser.GRANT:
                case MySQLParser.INSERT:
                case MySQLParser.KILL:
                case MySQLParser.LOAD:
                case MySQLParser.LOCK:
                case MySQLParser.OPTIMIZE:
                case MySQLParser.PURGE:
                case MySQLParser.RELEASE:
                case MySQLParser.RENAME:
                case MySQLParser.REPLACE:
                case MySQLParser.RESIGNAL:
                case MySQLParser.REVOKE:
                case MySQLParser.SELECT:
                case MySQLParser.SET:
                case MySQLParser.SHOW:
                case MySQLParser.SIGNAL:
                case MySQLParser.UNLOCK:
                case MySQLParser.UPDATE:
                case MySQLParser.USE:
                case MySQLParser.BEGIN:
                case MySQLParser.BINLOG:
                case MySQLParser.CACHE:
                case MySQLParser.CHECKSUM:
                case MySQLParser.COMMIT:
                case MySQLParser.DEALLOCATE:
                case MySQLParser.DO:
                case MySQLParser.FLUSH:
                case MySQLParser.HANDLER:
                case MySQLParser.HELP:
                case MySQLParser.INSTALL:
                case MySQLParser.PREPARE:
                case MySQLParser.REPAIR:
                case MySQLParser.RESET:
                case MySQLParser.ROLLBACK:
                case MySQLParser.SAVEPOINT:
                case MySQLParser.START:
                case MySQLParser.STOP:
                case MySQLParser.TRUNCATE:
                case MySQLParser.UNINSTALL:
                case MySQLParser.XA:
                case MySQLParser.EXECUTE:
                case MySQLParser.SHUTDOWN:
                case MySQLParser.LR_BRACKET:
                    this.state = 638;
                    this.sqlStatement();
                    this.state = 640;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===MySQLParser.MINUSMINUS) {
                        this.state = 639;
                        this.match(MySQLParser.MINUSMINUS);
                    }

                    this.state = 643;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
                    if(la_===1) {
                        this.state = 642;
                        this.match(MySQLParser.SEMI);

                    }
                    break;
                case MySQLParser.SEMI:
                    this.state = 645;
                    this.emptyStatement();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 650;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
        }

        this.state = 659;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ALTER:
        case MySQLParser.ANALYZE:
        case MySQLParser.CALL:
        case MySQLParser.CHANGE:
        case MySQLParser.CHECK:
        case MySQLParser.CREATE:
        case MySQLParser.DELETE:
        case MySQLParser.DESC:
        case MySQLParser.DESCRIBE:
        case MySQLParser.DROP:
        case MySQLParser.EXPLAIN:
        case MySQLParser.GET:
        case MySQLParser.GRANT:
        case MySQLParser.INSERT:
        case MySQLParser.KILL:
        case MySQLParser.LOAD:
        case MySQLParser.LOCK:
        case MySQLParser.OPTIMIZE:
        case MySQLParser.PURGE:
        case MySQLParser.RELEASE:
        case MySQLParser.RENAME:
        case MySQLParser.REPLACE:
        case MySQLParser.RESIGNAL:
        case MySQLParser.REVOKE:
        case MySQLParser.SELECT:
        case MySQLParser.SET:
        case MySQLParser.SHOW:
        case MySQLParser.SIGNAL:
        case MySQLParser.UNLOCK:
        case MySQLParser.UPDATE:
        case MySQLParser.USE:
        case MySQLParser.BEGIN:
        case MySQLParser.BINLOG:
        case MySQLParser.CACHE:
        case MySQLParser.CHECKSUM:
        case MySQLParser.COMMIT:
        case MySQLParser.DEALLOCATE:
        case MySQLParser.DO:
        case MySQLParser.FLUSH:
        case MySQLParser.HANDLER:
        case MySQLParser.HELP:
        case MySQLParser.INSTALL:
        case MySQLParser.PREPARE:
        case MySQLParser.REPAIR:
        case MySQLParser.RESET:
        case MySQLParser.ROLLBACK:
        case MySQLParser.SAVEPOINT:
        case MySQLParser.START:
        case MySQLParser.STOP:
        case MySQLParser.TRUNCATE:
        case MySQLParser.UNINSTALL:
        case MySQLParser.XA:
        case MySQLParser.EXECUTE:
        case MySQLParser.SHUTDOWN:
        case MySQLParser.LR_BRACKET:
            this.state = 651;
            this.sqlStatement();
            this.state = 656;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
            if(la_===1) {
                this.state = 653;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.MINUSMINUS) {
                    this.state = 652;
                    this.match(MySQLParser.MINUSMINUS);
                }

                this.state = 655;
                this.match(MySQLParser.SEMI);

            }
            break;
        case MySQLParser.SEMI:
            this.state = 658;
            this.emptyStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SqlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_sqlStatement;
    return this;
}

SqlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SqlStatementContext.prototype.constructor = SqlStatementContext;

SqlStatementContext.prototype.ddlStatement = function() {
    return this.getTypedRuleContext(DdlStatementContext,0);
};

SqlStatementContext.prototype.dmlStatement = function() {
    return this.getTypedRuleContext(DmlStatementContext,0);
};

SqlStatementContext.prototype.transactionStatement = function() {
    return this.getTypedRuleContext(TransactionStatementContext,0);
};

SqlStatementContext.prototype.replicationStatement = function() {
    return this.getTypedRuleContext(ReplicationStatementContext,0);
};

SqlStatementContext.prototype.preparedStatement = function() {
    return this.getTypedRuleContext(PreparedStatementContext,0);
};

SqlStatementContext.prototype.administrationStatement = function() {
    return this.getTypedRuleContext(AdministrationStatementContext,0);
};

SqlStatementContext.prototype.utilityStatement = function() {
    return this.getTypedRuleContext(UtilityStatementContext,0);
};

SqlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSqlStatement(this);
	}
};

SqlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSqlStatement(this);
	}
};

SqlStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSqlStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SqlStatementContext = SqlStatementContext;

MySQLParser.prototype.sqlStatement = function() {

    var localctx = new SqlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, MySQLParser.RULE_sqlStatement);
    try {
        this.state = 668;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 661;
            this.ddlStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 662;
            this.dmlStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 663;
            this.transactionStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 664;
            this.replicationStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 665;
            this.preparedStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 666;
            this.administrationStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 667;
            this.utilityStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EmptyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_emptyStatement;
    return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;

EmptyStatementContext.prototype.SEMI = function() {
    return this.getToken(MySQLParser.SEMI, 0);
};

EmptyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitEmptyStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.EmptyStatementContext = EmptyStatementContext;

MySQLParser.prototype.emptyStatement = function() {

    var localctx = new EmptyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, MySQLParser.RULE_emptyStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 670;
        this.match(MySQLParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DdlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_ddlStatement;
    return this;
}

DdlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DdlStatementContext.prototype.constructor = DdlStatementContext;

DdlStatementContext.prototype.createDatabase = function() {
    return this.getTypedRuleContext(CreateDatabaseContext,0);
};

DdlStatementContext.prototype.createEvent = function() {
    return this.getTypedRuleContext(CreateEventContext,0);
};

DdlStatementContext.prototype.createIndex = function() {
    return this.getTypedRuleContext(CreateIndexContext,0);
};

DdlStatementContext.prototype.createLogfileGroup = function() {
    return this.getTypedRuleContext(CreateLogfileGroupContext,0);
};

DdlStatementContext.prototype.createProcedure = function() {
    return this.getTypedRuleContext(CreateProcedureContext,0);
};

DdlStatementContext.prototype.createFunction = function() {
    return this.getTypedRuleContext(CreateFunctionContext,0);
};

DdlStatementContext.prototype.createServer = function() {
    return this.getTypedRuleContext(CreateServerContext,0);
};

DdlStatementContext.prototype.createTable = function() {
    return this.getTypedRuleContext(CreateTableContext,0);
};

DdlStatementContext.prototype.createTablespaceInnodb = function() {
    return this.getTypedRuleContext(CreateTablespaceInnodbContext,0);
};

DdlStatementContext.prototype.createTablespaceNdb = function() {
    return this.getTypedRuleContext(CreateTablespaceNdbContext,0);
};

DdlStatementContext.prototype.createTrigger = function() {
    return this.getTypedRuleContext(CreateTriggerContext,0);
};

DdlStatementContext.prototype.createView = function() {
    return this.getTypedRuleContext(CreateViewContext,0);
};

DdlStatementContext.prototype.alterDatabase = function() {
    return this.getTypedRuleContext(AlterDatabaseContext,0);
};

DdlStatementContext.prototype.alterEvent = function() {
    return this.getTypedRuleContext(AlterEventContext,0);
};

DdlStatementContext.prototype.alterFunction = function() {
    return this.getTypedRuleContext(AlterFunctionContext,0);
};

DdlStatementContext.prototype.alterInstance = function() {
    return this.getTypedRuleContext(AlterInstanceContext,0);
};

DdlStatementContext.prototype.alterLogfileGroup = function() {
    return this.getTypedRuleContext(AlterLogfileGroupContext,0);
};

DdlStatementContext.prototype.alterProcedure = function() {
    return this.getTypedRuleContext(AlterProcedureContext,0);
};

DdlStatementContext.prototype.alterServer = function() {
    return this.getTypedRuleContext(AlterServerContext,0);
};

DdlStatementContext.prototype.alterTable = function() {
    return this.getTypedRuleContext(AlterTableContext,0);
};

DdlStatementContext.prototype.alterTablespace = function() {
    return this.getTypedRuleContext(AlterTablespaceContext,0);
};

DdlStatementContext.prototype.alterView = function() {
    return this.getTypedRuleContext(AlterViewContext,0);
};

DdlStatementContext.prototype.dropDatabase = function() {
    return this.getTypedRuleContext(DropDatabaseContext,0);
};

DdlStatementContext.prototype.dropEvent = function() {
    return this.getTypedRuleContext(DropEventContext,0);
};

DdlStatementContext.prototype.dropIndex = function() {
    return this.getTypedRuleContext(DropIndexContext,0);
};

DdlStatementContext.prototype.dropLogfileGroup = function() {
    return this.getTypedRuleContext(DropLogfileGroupContext,0);
};

DdlStatementContext.prototype.dropProcedure = function() {
    return this.getTypedRuleContext(DropProcedureContext,0);
};

DdlStatementContext.prototype.dropFunction = function() {
    return this.getTypedRuleContext(DropFunctionContext,0);
};

DdlStatementContext.prototype.dropServer = function() {
    return this.getTypedRuleContext(DropServerContext,0);
};

DdlStatementContext.prototype.dropTable = function() {
    return this.getTypedRuleContext(DropTableContext,0);
};

DdlStatementContext.prototype.dropTablespace = function() {
    return this.getTypedRuleContext(DropTablespaceContext,0);
};

DdlStatementContext.prototype.dropTrigger = function() {
    return this.getTypedRuleContext(DropTriggerContext,0);
};

DdlStatementContext.prototype.dropView = function() {
    return this.getTypedRuleContext(DropViewContext,0);
};

DdlStatementContext.prototype.renameTable = function() {
    return this.getTypedRuleContext(RenameTableContext,0);
};

DdlStatementContext.prototype.truncateTable = function() {
    return this.getTypedRuleContext(TruncateTableContext,0);
};

DdlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDdlStatement(this);
	}
};

DdlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDdlStatement(this);
	}
};

DdlStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDdlStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DdlStatementContext = DdlStatementContext;

MySQLParser.prototype.ddlStatement = function() {

    var localctx = new DdlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, MySQLParser.RULE_ddlStatement);
    try {
        this.state = 707;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 672;
            this.createDatabase();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 673;
            this.createEvent();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 674;
            this.createIndex();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 675;
            this.createLogfileGroup();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 676;
            this.createProcedure();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 677;
            this.createFunction();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 678;
            this.createServer();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 679;
            this.createTable();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 680;
            this.createTablespaceInnodb();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 681;
            this.createTablespaceNdb();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 682;
            this.createTrigger();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 683;
            this.createView();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 684;
            this.alterDatabase();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 685;
            this.alterEvent();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 686;
            this.alterFunction();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 687;
            this.alterInstance();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 688;
            this.alterLogfileGroup();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 689;
            this.alterProcedure();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 690;
            this.alterServer();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 691;
            this.alterTable();
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 692;
            this.alterTablespace();
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 693;
            this.alterView();
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 694;
            this.dropDatabase();
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 695;
            this.dropEvent();
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 696;
            this.dropIndex();
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 697;
            this.dropLogfileGroup();
            break;

        case 27:
            this.enterOuterAlt(localctx, 27);
            this.state = 698;
            this.dropProcedure();
            break;

        case 28:
            this.enterOuterAlt(localctx, 28);
            this.state = 699;
            this.dropFunction();
            break;

        case 29:
            this.enterOuterAlt(localctx, 29);
            this.state = 700;
            this.dropServer();
            break;

        case 30:
            this.enterOuterAlt(localctx, 30);
            this.state = 701;
            this.dropTable();
            break;

        case 31:
            this.enterOuterAlt(localctx, 31);
            this.state = 702;
            this.dropTablespace();
            break;

        case 32:
            this.enterOuterAlt(localctx, 32);
            this.state = 703;
            this.dropTrigger();
            break;

        case 33:
            this.enterOuterAlt(localctx, 33);
            this.state = 704;
            this.dropView();
            break;

        case 34:
            this.enterOuterAlt(localctx, 34);
            this.state = 705;
            this.renameTable();
            break;

        case 35:
            this.enterOuterAlt(localctx, 35);
            this.state = 706;
            this.truncateTable();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DmlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dmlStatement;
    return this;
}

DmlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DmlStatementContext.prototype.constructor = DmlStatementContext;

DmlStatementContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

DmlStatementContext.prototype.insertStatement = function() {
    return this.getTypedRuleContext(InsertStatementContext,0);
};

DmlStatementContext.prototype.updateStatement = function() {
    return this.getTypedRuleContext(UpdateStatementContext,0);
};

DmlStatementContext.prototype.deleteStatement = function() {
    return this.getTypedRuleContext(DeleteStatementContext,0);
};

DmlStatementContext.prototype.replaceStatement = function() {
    return this.getTypedRuleContext(ReplaceStatementContext,0);
};

DmlStatementContext.prototype.callStatement = function() {
    return this.getTypedRuleContext(CallStatementContext,0);
};

DmlStatementContext.prototype.loadDataStatement = function() {
    return this.getTypedRuleContext(LoadDataStatementContext,0);
};

DmlStatementContext.prototype.loadXmlStatement = function() {
    return this.getTypedRuleContext(LoadXmlStatementContext,0);
};

DmlStatementContext.prototype.doStatement = function() {
    return this.getTypedRuleContext(DoStatementContext,0);
};

DmlStatementContext.prototype.handlerStatement = function() {
    return this.getTypedRuleContext(HandlerStatementContext,0);
};

DmlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDmlStatement(this);
	}
};

DmlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDmlStatement(this);
	}
};

DmlStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDmlStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DmlStatementContext = DmlStatementContext;

MySQLParser.prototype.dmlStatement = function() {

    var localctx = new DmlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, MySQLParser.RULE_dmlStatement);
    try {
        this.state = 719;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 709;
            this.selectStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 710;
            this.insertStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 711;
            this.updateStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 712;
            this.deleteStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 713;
            this.replaceStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 714;
            this.callStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 715;
            this.loadDataStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 716;
            this.loadXmlStatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 717;
            this.doStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 718;
            this.handlerStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TransactionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_transactionStatement;
    return this;
}

TransactionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransactionStatementContext.prototype.constructor = TransactionStatementContext;

TransactionStatementContext.prototype.startTransaction = function() {
    return this.getTypedRuleContext(StartTransactionContext,0);
};

TransactionStatementContext.prototype.beginWork = function() {
    return this.getTypedRuleContext(BeginWorkContext,0);
};

TransactionStatementContext.prototype.commitWork = function() {
    return this.getTypedRuleContext(CommitWorkContext,0);
};

TransactionStatementContext.prototype.rollbackWork = function() {
    return this.getTypedRuleContext(RollbackWorkContext,0);
};

TransactionStatementContext.prototype.savepointStatement = function() {
    return this.getTypedRuleContext(SavepointStatementContext,0);
};

TransactionStatementContext.prototype.rollbackStatement = function() {
    return this.getTypedRuleContext(RollbackStatementContext,0);
};

TransactionStatementContext.prototype.releaseStatement = function() {
    return this.getTypedRuleContext(ReleaseStatementContext,0);
};

TransactionStatementContext.prototype.lockTables = function() {
    return this.getTypedRuleContext(LockTablesContext,0);
};

TransactionStatementContext.prototype.unlockTables = function() {
    return this.getTypedRuleContext(UnlockTablesContext,0);
};

TransactionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTransactionStatement(this);
	}
};

TransactionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTransactionStatement(this);
	}
};

TransactionStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTransactionStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TransactionStatementContext = TransactionStatementContext;

MySQLParser.prototype.transactionStatement = function() {

    var localctx = new TransactionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, MySQLParser.RULE_transactionStatement);
    try {
        this.state = 730;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 721;
            this.startTransaction();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 722;
            this.beginWork();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 723;
            this.commitWork();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 724;
            this.rollbackWork();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 725;
            this.savepointStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 726;
            this.rollbackStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 727;
            this.releaseStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 728;
            this.lockTables();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 729;
            this.unlockTables();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReplicationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_replicationStatement;
    return this;
}

ReplicationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplicationStatementContext.prototype.constructor = ReplicationStatementContext;

ReplicationStatementContext.prototype.changeMaster = function() {
    return this.getTypedRuleContext(ChangeMasterContext,0);
};

ReplicationStatementContext.prototype.changeReplicationFilter = function() {
    return this.getTypedRuleContext(ChangeReplicationFilterContext,0);
};

ReplicationStatementContext.prototype.purgeBinaryLogs = function() {
    return this.getTypedRuleContext(PurgeBinaryLogsContext,0);
};

ReplicationStatementContext.prototype.resetMaster = function() {
    return this.getTypedRuleContext(ResetMasterContext,0);
};

ReplicationStatementContext.prototype.resetSlave = function() {
    return this.getTypedRuleContext(ResetSlaveContext,0);
};

ReplicationStatementContext.prototype.startSlave = function() {
    return this.getTypedRuleContext(StartSlaveContext,0);
};

ReplicationStatementContext.prototype.stopSlave = function() {
    return this.getTypedRuleContext(StopSlaveContext,0);
};

ReplicationStatementContext.prototype.startGroupReplication = function() {
    return this.getTypedRuleContext(StartGroupReplicationContext,0);
};

ReplicationStatementContext.prototype.stopGroupReplication = function() {
    return this.getTypedRuleContext(StopGroupReplicationContext,0);
};

ReplicationStatementContext.prototype.xaStartTransaction = function() {
    return this.getTypedRuleContext(XaStartTransactionContext,0);
};

ReplicationStatementContext.prototype.xaEndTransaction = function() {
    return this.getTypedRuleContext(XaEndTransactionContext,0);
};

ReplicationStatementContext.prototype.xaPrepareStatement = function() {
    return this.getTypedRuleContext(XaPrepareStatementContext,0);
};

ReplicationStatementContext.prototype.xaCommitWork = function() {
    return this.getTypedRuleContext(XaCommitWorkContext,0);
};

ReplicationStatementContext.prototype.xaRollbackWork = function() {
    return this.getTypedRuleContext(XaRollbackWorkContext,0);
};

ReplicationStatementContext.prototype.xaRecoverWork = function() {
    return this.getTypedRuleContext(XaRecoverWorkContext,0);
};

ReplicationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReplicationStatement(this);
	}
};

ReplicationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReplicationStatement(this);
	}
};

ReplicationStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReplicationStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ReplicationStatementContext = ReplicationStatementContext;

MySQLParser.prototype.replicationStatement = function() {

    var localctx = new ReplicationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, MySQLParser.RULE_replicationStatement);
    try {
        this.state = 747;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 732;
            this.changeMaster();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 733;
            this.changeReplicationFilter();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 734;
            this.purgeBinaryLogs();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 735;
            this.resetMaster();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 736;
            this.resetSlave();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 737;
            this.startSlave();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 738;
            this.stopSlave();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 739;
            this.startGroupReplication();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 740;
            this.stopGroupReplication();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 741;
            this.xaStartTransaction();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 742;
            this.xaEndTransaction();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 743;
            this.xaPrepareStatement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 744;
            this.xaCommitWork();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 745;
            this.xaRollbackWork();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 746;
            this.xaRecoverWork();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PreparedStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_preparedStatement;
    return this;
}

PreparedStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PreparedStatementContext.prototype.constructor = PreparedStatementContext;

PreparedStatementContext.prototype.prepareStatement = function() {
    return this.getTypedRuleContext(PrepareStatementContext,0);
};

PreparedStatementContext.prototype.executeStatement = function() {
    return this.getTypedRuleContext(ExecuteStatementContext,0);
};

PreparedStatementContext.prototype.deallocatePrepare = function() {
    return this.getTypedRuleContext(DeallocatePrepareContext,0);
};

PreparedStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPreparedStatement(this);
	}
};

PreparedStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPreparedStatement(this);
	}
};

PreparedStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPreparedStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PreparedStatementContext = PreparedStatementContext;

MySQLParser.prototype.preparedStatement = function() {

    var localctx = new PreparedStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, MySQLParser.RULE_preparedStatement);
    try {
        this.state = 752;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.PREPARE:
            this.enterOuterAlt(localctx, 1);
            this.state = 749;
            this.prepareStatement();
            break;
        case MySQLParser.EXECUTE:
            this.enterOuterAlt(localctx, 2);
            this.state = 750;
            this.executeStatement();
            break;
        case MySQLParser.DROP:
        case MySQLParser.DEALLOCATE:
            this.enterOuterAlt(localctx, 3);
            this.state = 751;
            this.deallocatePrepare();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CompoundStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_compoundStatement;
    return this;
}

CompoundStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompoundStatementContext.prototype.constructor = CompoundStatementContext;

CompoundStatementContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

CompoundStatementContext.prototype.caseStatement = function() {
    return this.getTypedRuleContext(CaseStatementContext,0);
};

CompoundStatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

CompoundStatementContext.prototype.leaveStatement = function() {
    return this.getTypedRuleContext(LeaveStatementContext,0);
};

CompoundStatementContext.prototype.loopStatement = function() {
    return this.getTypedRuleContext(LoopStatementContext,0);
};

CompoundStatementContext.prototype.repeatStatement = function() {
    return this.getTypedRuleContext(RepeatStatementContext,0);
};

CompoundStatementContext.prototype.whileStatement = function() {
    return this.getTypedRuleContext(WhileStatementContext,0);
};

CompoundStatementContext.prototype.iterateStatement = function() {
    return this.getTypedRuleContext(IterateStatementContext,0);
};

CompoundStatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

CompoundStatementContext.prototype.cursorStatement = function() {
    return this.getTypedRuleContext(CursorStatementContext,0);
};

CompoundStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCompoundStatement(this);
	}
};

CompoundStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCompoundStatement(this);
	}
};

CompoundStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCompoundStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CompoundStatementContext = CompoundStatementContext;

MySQLParser.prototype.compoundStatement = function() {

    var localctx = new CompoundStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, MySQLParser.RULE_compoundStatement);
    try {
        this.state = 764;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 754;
            this.blockStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 755;
            this.caseStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 756;
            this.ifStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 757;
            this.leaveStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 758;
            this.loopStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 759;
            this.repeatStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 760;
            this.whileStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 761;
            this.iterateStatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 762;
            this.returnStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 763;
            this.cursorStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AdministrationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_administrationStatement;
    return this;
}

AdministrationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdministrationStatementContext.prototype.constructor = AdministrationStatementContext;

AdministrationStatementContext.prototype.alterUser = function() {
    return this.getTypedRuleContext(AlterUserContext,0);
};

AdministrationStatementContext.prototype.createUser = function() {
    return this.getTypedRuleContext(CreateUserContext,0);
};

AdministrationStatementContext.prototype.dropUser = function() {
    return this.getTypedRuleContext(DropUserContext,0);
};

AdministrationStatementContext.prototype.grantStatement = function() {
    return this.getTypedRuleContext(GrantStatementContext,0);
};

AdministrationStatementContext.prototype.grantProxy = function() {
    return this.getTypedRuleContext(GrantProxyContext,0);
};

AdministrationStatementContext.prototype.renameUser = function() {
    return this.getTypedRuleContext(RenameUserContext,0);
};

AdministrationStatementContext.prototype.revokeStatement = function() {
    return this.getTypedRuleContext(RevokeStatementContext,0);
};

AdministrationStatementContext.prototype.revokeProxy = function() {
    return this.getTypedRuleContext(RevokeProxyContext,0);
};

AdministrationStatementContext.prototype.analyzeTable = function() {
    return this.getTypedRuleContext(AnalyzeTableContext,0);
};

AdministrationStatementContext.prototype.checkTable = function() {
    return this.getTypedRuleContext(CheckTableContext,0);
};

AdministrationStatementContext.prototype.checksumTable = function() {
    return this.getTypedRuleContext(ChecksumTableContext,0);
};

AdministrationStatementContext.prototype.optimizeTable = function() {
    return this.getTypedRuleContext(OptimizeTableContext,0);
};

AdministrationStatementContext.prototype.repairTable = function() {
    return this.getTypedRuleContext(RepairTableContext,0);
};

AdministrationStatementContext.prototype.createUdfunction = function() {
    return this.getTypedRuleContext(CreateUdfunctionContext,0);
};

AdministrationStatementContext.prototype.installPlugin = function() {
    return this.getTypedRuleContext(InstallPluginContext,0);
};

AdministrationStatementContext.prototype.uninstallPlugin = function() {
    return this.getTypedRuleContext(UninstallPluginContext,0);
};

AdministrationStatementContext.prototype.setStatement = function() {
    return this.getTypedRuleContext(SetStatementContext,0);
};

AdministrationStatementContext.prototype.showStatement = function() {
    return this.getTypedRuleContext(ShowStatementContext,0);
};

AdministrationStatementContext.prototype.binlogStatement = function() {
    return this.getTypedRuleContext(BinlogStatementContext,0);
};

AdministrationStatementContext.prototype.cacheIndexStatement = function() {
    return this.getTypedRuleContext(CacheIndexStatementContext,0);
};

AdministrationStatementContext.prototype.flushStatement = function() {
    return this.getTypedRuleContext(FlushStatementContext,0);
};

AdministrationStatementContext.prototype.killStatement = function() {
    return this.getTypedRuleContext(KillStatementContext,0);
};

AdministrationStatementContext.prototype.loadIndexIntoCache = function() {
    return this.getTypedRuleContext(LoadIndexIntoCacheContext,0);
};

AdministrationStatementContext.prototype.resetStatement = function() {
    return this.getTypedRuleContext(ResetStatementContext,0);
};

AdministrationStatementContext.prototype.shutdownStatement = function() {
    return this.getTypedRuleContext(ShutdownStatementContext,0);
};

AdministrationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAdministrationStatement(this);
	}
};

AdministrationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAdministrationStatement(this);
	}
};

AdministrationStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAdministrationStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AdministrationStatementContext = AdministrationStatementContext;

MySQLParser.prototype.administrationStatement = function() {

    var localctx = new AdministrationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, MySQLParser.RULE_administrationStatement);
    try {
        this.state = 791;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 766;
            this.alterUser();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 767;
            this.createUser();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 768;
            this.dropUser();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 769;
            this.grantStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 770;
            this.grantProxy();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 771;
            this.renameUser();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 772;
            this.revokeStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 773;
            this.revokeProxy();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 774;
            this.analyzeTable();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 775;
            this.checkTable();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 776;
            this.checksumTable();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 777;
            this.optimizeTable();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 778;
            this.repairTable();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 779;
            this.createUdfunction();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 780;
            this.installPlugin();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 781;
            this.uninstallPlugin();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 782;
            this.setStatement();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 783;
            this.showStatement();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 784;
            this.binlogStatement();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 785;
            this.cacheIndexStatement();
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 786;
            this.flushStatement();
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 787;
            this.killStatement();
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 788;
            this.loadIndexIntoCache();
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 789;
            this.resetStatement();
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 790;
            this.shutdownStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UtilityStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_utilityStatement;
    return this;
}

UtilityStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UtilityStatementContext.prototype.constructor = UtilityStatementContext;

UtilityStatementContext.prototype.simpleDescribeStatement = function() {
    return this.getTypedRuleContext(SimpleDescribeStatementContext,0);
};

UtilityStatementContext.prototype.fullDescribeStatement = function() {
    return this.getTypedRuleContext(FullDescribeStatementContext,0);
};

UtilityStatementContext.prototype.helpStatement = function() {
    return this.getTypedRuleContext(HelpStatementContext,0);
};

UtilityStatementContext.prototype.useStatement = function() {
    return this.getTypedRuleContext(UseStatementContext,0);
};

UtilityStatementContext.prototype.signalStatement = function() {
    return this.getTypedRuleContext(SignalStatementContext,0);
};

UtilityStatementContext.prototype.resignalStatement = function() {
    return this.getTypedRuleContext(ResignalStatementContext,0);
};

UtilityStatementContext.prototype.diagnosticsStatement = function() {
    return this.getTypedRuleContext(DiagnosticsStatementContext,0);
};

UtilityStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUtilityStatement(this);
	}
};

UtilityStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUtilityStatement(this);
	}
};

UtilityStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUtilityStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UtilityStatementContext = UtilityStatementContext;

MySQLParser.prototype.utilityStatement = function() {

    var localctx = new UtilityStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, MySQLParser.RULE_utilityStatement);
    try {
        this.state = 800;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 793;
            this.simpleDescribeStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 794;
            this.fullDescribeStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 795;
            this.helpStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 796;
            this.useStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 797;
            this.signalStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 798;
            this.resignalStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 799;
            this.diagnosticsStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createDatabase;
    this.dbFormat = null; // Token
    return this;
}

CreateDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateDatabaseContext.prototype.constructor = CreateDatabaseContext;

CreateDatabaseContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

CreateDatabaseContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CreateDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(MySQLParser.DATABASE, 0);
};

CreateDatabaseContext.prototype.SCHEMA = function() {
    return this.getToken(MySQLParser.SCHEMA, 0);
};

CreateDatabaseContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateDatabaseContext.prototype.createDatabaseOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CreateDatabaseOptionContext);
    } else {
        return this.getTypedRuleContext(CreateDatabaseOptionContext,i);
    }
};

CreateDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateDatabase(this);
	}
};

CreateDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateDatabase(this);
	}
};

CreateDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateDatabaseContext = CreateDatabaseContext;

MySQLParser.prototype.createDatabase = function() {

    var localctx = new CreateDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, MySQLParser.RULE_createDatabase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 802;
        this.match(MySQLParser.CREATE);
        this.state = 803;
        localctx.dbFormat = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.DATABASE || _la===MySQLParser.SCHEMA)) {
            localctx.dbFormat = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 805;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IF) {
            this.state = 804;
            this.ifNotExists();
        }

        this.state = 807;
        this.uid();
        this.state = 811;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (MySQLParser.CHARACTER - 22)) | (1 << (MySQLParser.COLLATE - 22)) | (1 << (MySQLParser.DEFAULT - 22)))) !== 0) || _la===MySQLParser.CHARSET) {
            this.state = 808;
            this.createDatabaseOption();
            this.state = 813;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateEventContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createEvent;
    return this;
}

CreateEventContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateEventContext.prototype.constructor = CreateEventContext;

CreateEventContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

CreateEventContext.prototype.EVENT = function() {
    return this.getToken(MySQLParser.EVENT, 0);
};

CreateEventContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

CreateEventContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.ON);
    } else {
        return this.getToken(MySQLParser.ON, i);
    }
};


CreateEventContext.prototype.SCHEDULE = function() {
    return this.getToken(MySQLParser.SCHEDULE, 0);
};

CreateEventContext.prototype.scheduleExpression = function() {
    return this.getTypedRuleContext(ScheduleExpressionContext,0);
};

CreateEventContext.prototype.DO = function() {
    return this.getToken(MySQLParser.DO, 0);
};

CreateEventContext.prototype.routineBody = function() {
    return this.getTypedRuleContext(RoutineBodyContext,0);
};

CreateEventContext.prototype.ownerStatement = function() {
    return this.getTypedRuleContext(OwnerStatementContext,0);
};

CreateEventContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateEventContext.prototype.COMPLETION = function() {
    return this.getToken(MySQLParser.COMPLETION, 0);
};

CreateEventContext.prototype.PRESERVE = function() {
    return this.getToken(MySQLParser.PRESERVE, 0);
};

CreateEventContext.prototype.enableType = function() {
    return this.getTypedRuleContext(EnableTypeContext,0);
};

CreateEventContext.prototype.COMMENT = function() {
    return this.getToken(MySQLParser.COMMENT, 0);
};

CreateEventContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

CreateEventContext.prototype.NOT = function() {
    return this.getToken(MySQLParser.NOT, 0);
};

CreateEventContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateEvent(this);
	}
};

CreateEventContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateEvent(this);
	}
};

CreateEventContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateEvent(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateEventContext = CreateEventContext;

MySQLParser.prototype.createEvent = function() {

    var localctx = new CreateEventContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, MySQLParser.RULE_createEvent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 814;
        this.match(MySQLParser.CREATE);
        this.state = 816;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFINER) {
            this.state = 815;
            this.ownerStatement();
        }

        this.state = 818;
        this.match(MySQLParser.EVENT);
        this.state = 820;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IF) {
            this.state = 819;
            this.ifNotExists();
        }

        this.state = 822;
        this.fullId();
        this.state = 823;
        this.match(MySQLParser.ON);
        this.state = 824;
        this.match(MySQLParser.SCHEDULE);
        this.state = 825;
        this.scheduleExpression();
        this.state = 832;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ON) {
            this.state = 826;
            this.match(MySQLParser.ON);
            this.state = 827;
            this.match(MySQLParser.COMPLETION);
            this.state = 829;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NOT) {
                this.state = 828;
                this.match(MySQLParser.NOT);
            }

            this.state = 831;
            this.match(MySQLParser.PRESERVE);
        }

        this.state = 835;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DISABLE || _la===MySQLParser.ENABLE) {
            this.state = 834;
            this.enableType();
        }

        this.state = 839;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.COMMENT) {
            this.state = 837;
            this.match(MySQLParser.COMMENT);
            this.state = 838;
            this.match(MySQLParser.STRING_LITERAL);
        }

        this.state = 841;
        this.match(MySQLParser.DO);
        this.state = 842;
        this.routineBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateIndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createIndex;
    this.intimeAction = null; // Token
    this.indexCategory = null; // Token
    this.algType = null; // Token
    this.lockType = null; // Token
    return this;
}

CreateIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateIndexContext.prototype.constructor = CreateIndexContext;

CreateIndexContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

CreateIndexContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

CreateIndexContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CreateIndexContext.prototype.ON = function() {
    return this.getToken(MySQLParser.ON, 0);
};

CreateIndexContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

CreateIndexContext.prototype.indexColumnNames = function() {
    return this.getTypedRuleContext(IndexColumnNamesContext,0);
};

CreateIndexContext.prototype.indexType = function() {
    return this.getTypedRuleContext(IndexTypeContext,0);
};

CreateIndexContext.prototype.indexOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexOptionContext);
    } else {
        return this.getTypedRuleContext(IndexOptionContext,i);
    }
};

CreateIndexContext.prototype.ALGORITHM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.ALGORITHM);
    } else {
        return this.getToken(MySQLParser.ALGORITHM, i);
    }
};


CreateIndexContext.prototype.LOCK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.LOCK);
    } else {
        return this.getToken(MySQLParser.LOCK, i);
    }
};


CreateIndexContext.prototype.ONLINE = function() {
    return this.getToken(MySQLParser.ONLINE, 0);
};

CreateIndexContext.prototype.OFFLINE = function() {
    return this.getToken(MySQLParser.OFFLINE, 0);
};

CreateIndexContext.prototype.UNIQUE = function() {
    return this.getToken(MySQLParser.UNIQUE, 0);
};

CreateIndexContext.prototype.FULLTEXT = function() {
    return this.getToken(MySQLParser.FULLTEXT, 0);
};

CreateIndexContext.prototype.SPATIAL = function() {
    return this.getToken(MySQLParser.SPATIAL, 0);
};

CreateIndexContext.prototype.DEFAULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.DEFAULT);
    } else {
        return this.getToken(MySQLParser.DEFAULT, i);
    }
};


CreateIndexContext.prototype.INPLACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.INPLACE);
    } else {
        return this.getToken(MySQLParser.INPLACE, i);
    }
};


CreateIndexContext.prototype.COPY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COPY);
    } else {
        return this.getToken(MySQLParser.COPY, i);
    }
};


CreateIndexContext.prototype.NONE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.NONE);
    } else {
        return this.getToken(MySQLParser.NONE, i);
    }
};


CreateIndexContext.prototype.SHARED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.SHARED);
    } else {
        return this.getToken(MySQLParser.SHARED, i);
    }
};


CreateIndexContext.prototype.EXCLUSIVE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.EXCLUSIVE);
    } else {
        return this.getToken(MySQLParser.EXCLUSIVE, i);
    }
};


CreateIndexContext.prototype.EQUAL_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.EQUAL_SYMBOL);
    } else {
        return this.getToken(MySQLParser.EQUAL_SYMBOL, i);
    }
};


CreateIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateIndex(this);
	}
};

CreateIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateIndex(this);
	}
};

CreateIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateIndexContext = CreateIndexContext;

MySQLParser.prototype.createIndex = function() {

    var localctx = new CreateIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, MySQLParser.RULE_createIndex);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 844;
        this.match(MySQLParser.CREATE);
        this.state = 846;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.OFFLINE || _la===MySQLParser.ONLINE) {
            this.state = 845;
            localctx.intimeAction = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.OFFLINE || _la===MySQLParser.ONLINE)) {
                localctx.intimeAction = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 849;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.FULLTEXT || _la===MySQLParser.SPATIAL || _la===MySQLParser.UNIQUE) {
            this.state = 848;
            localctx.indexCategory = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.FULLTEXT || _la===MySQLParser.SPATIAL || _la===MySQLParser.UNIQUE)) {
                localctx.indexCategory = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 851;
        this.match(MySQLParser.INDEX);
        this.state = 852;
        this.uid();
        this.state = 854;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.USING) {
            this.state = 853;
            this.indexType();
        }

        this.state = 856;
        this.match(MySQLParser.ON);
        this.state = 857;
        this.tableName();
        this.state = 858;
        this.indexColumnNames();
        this.state = 862;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.USING || _la===MySQLParser.WITH || _la===MySQLParser.COMMENT || _la===MySQLParser.INVISIBLE || _la===MySQLParser.KEY_BLOCK_SIZE || _la===MySQLParser.VISIBLE) {
            this.state = 859;
            this.indexOption();
            this.state = 864;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 877;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 875;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.ALGORITHM:
                    this.state = 865;
                    this.match(MySQLParser.ALGORITHM);
                    this.state = 867;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===MySQLParser.EQUAL_SYMBOL) {
                        this.state = 866;
                        this.match(MySQLParser.EQUAL_SYMBOL);
                    }

                    this.state = 869;
                    localctx.algType = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===MySQLParser.DEFAULT || _la===MySQLParser.COPY || _la===MySQLParser.INPLACE)) {
                        localctx.algType = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case MySQLParser.LOCK:
                    this.state = 870;
                    this.match(MySQLParser.LOCK);
                    this.state = 872;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===MySQLParser.EQUAL_SYMBOL) {
                        this.state = 871;
                        this.match(MySQLParser.EQUAL_SYMBOL);
                    }

                    this.state = 874;
                    localctx.lockType = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===MySQLParser.DEFAULT || _la===MySQLParser.EXCLUSIVE || _la===MySQLParser.NONE || _la===MySQLParser.SHARED)) {
                        localctx.lockType = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 879;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateLogfileGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createLogfileGroup;
    this.undoFile = null; // Token
    this.initSize = null; // FileSizeLiteralContext
    this.undoSize = null; // FileSizeLiteralContext
    this.redoSize = null; // FileSizeLiteralContext
    this.comment = null; // Token
    return this;
}

CreateLogfileGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateLogfileGroupContext.prototype.constructor = CreateLogfileGroupContext;

CreateLogfileGroupContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

CreateLogfileGroupContext.prototype.LOGFILE = function() {
    return this.getToken(MySQLParser.LOGFILE, 0);
};

CreateLogfileGroupContext.prototype.GROUP = function() {
    return this.getToken(MySQLParser.GROUP, 0);
};

CreateLogfileGroupContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

CreateLogfileGroupContext.prototype.ADD = function() {
    return this.getToken(MySQLParser.ADD, 0);
};

CreateLogfileGroupContext.prototype.UNDOFILE = function() {
    return this.getToken(MySQLParser.UNDOFILE, 0);
};

CreateLogfileGroupContext.prototype.ENGINE = function() {
    return this.getToken(MySQLParser.ENGINE, 0);
};

CreateLogfileGroupContext.prototype.engineName = function() {
    return this.getTypedRuleContext(EngineNameContext,0);
};

CreateLogfileGroupContext.prototype.STRING_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.STRING_LITERAL);
    } else {
        return this.getToken(MySQLParser.STRING_LITERAL, i);
    }
};


CreateLogfileGroupContext.prototype.INITIAL_SIZE = function() {
    return this.getToken(MySQLParser.INITIAL_SIZE, 0);
};

CreateLogfileGroupContext.prototype.UNDO_BUFFER_SIZE = function() {
    return this.getToken(MySQLParser.UNDO_BUFFER_SIZE, 0);
};

CreateLogfileGroupContext.prototype.REDO_BUFFER_SIZE = function() {
    return this.getToken(MySQLParser.REDO_BUFFER_SIZE, 0);
};

CreateLogfileGroupContext.prototype.NODEGROUP = function() {
    return this.getToken(MySQLParser.NODEGROUP, 0);
};

CreateLogfileGroupContext.prototype.WAIT = function() {
    return this.getToken(MySQLParser.WAIT, 0);
};

CreateLogfileGroupContext.prototype.COMMENT = function() {
    return this.getToken(MySQLParser.COMMENT, 0);
};

CreateLogfileGroupContext.prototype.EQUAL_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.EQUAL_SYMBOL);
    } else {
        return this.getToken(MySQLParser.EQUAL_SYMBOL, i);
    }
};


CreateLogfileGroupContext.prototype.fileSizeLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FileSizeLiteralContext);
    } else {
        return this.getTypedRuleContext(FileSizeLiteralContext,i);
    }
};

CreateLogfileGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateLogfileGroup(this);
	}
};

CreateLogfileGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateLogfileGroup(this);
	}
};

CreateLogfileGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateLogfileGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateLogfileGroupContext = CreateLogfileGroupContext;

MySQLParser.prototype.createLogfileGroup = function() {

    var localctx = new CreateLogfileGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, MySQLParser.RULE_createLogfileGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 880;
        this.match(MySQLParser.CREATE);
        this.state = 881;
        this.match(MySQLParser.LOGFILE);
        this.state = 882;
        this.match(MySQLParser.GROUP);
        this.state = 883;
        this.uid();
        this.state = 884;
        this.match(MySQLParser.ADD);
        this.state = 885;
        this.match(MySQLParser.UNDOFILE);
        this.state = 886;
        localctx.undoFile = this.match(MySQLParser.STRING_LITERAL);
        this.state = 892;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.INITIAL_SIZE) {
            this.state = 887;
            this.match(MySQLParser.INITIAL_SIZE);
            this.state = 889;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 888;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 891;
            localctx.initSize = this.fileSizeLiteral();
        }

        this.state = 899;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.UNDO_BUFFER_SIZE) {
            this.state = 894;
            this.match(MySQLParser.UNDO_BUFFER_SIZE);
            this.state = 896;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 895;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 898;
            localctx.undoSize = this.fileSizeLiteral();
        }

        this.state = 906;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.REDO_BUFFER_SIZE) {
            this.state = 901;
            this.match(MySQLParser.REDO_BUFFER_SIZE);
            this.state = 903;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 902;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 905;
            localctx.redoSize = this.fileSizeLiteral();
        }

        this.state = 913;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.NODEGROUP) {
            this.state = 908;
            this.match(MySQLParser.NODEGROUP);
            this.state = 910;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 909;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 912;
            this.uid();
        }

        this.state = 916;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WAIT) {
            this.state = 915;
            this.match(MySQLParser.WAIT);
        }

        this.state = 923;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.COMMENT) {
            this.state = 918;
            this.match(MySQLParser.COMMENT);
            this.state = 920;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 919;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 922;
            localctx.comment = this.match(MySQLParser.STRING_LITERAL);
        }

        this.state = 925;
        this.match(MySQLParser.ENGINE);
        this.state = 927;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.EQUAL_SYMBOL) {
            this.state = 926;
            this.match(MySQLParser.EQUAL_SYMBOL);
        }

        this.state = 929;
        this.engineName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateProcedureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createProcedure;
    return this;
}

CreateProcedureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateProcedureContext.prototype.constructor = CreateProcedureContext;

CreateProcedureContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

CreateProcedureContext.prototype.PROCEDURE = function() {
    return this.getToken(MySQLParser.PROCEDURE, 0);
};

CreateProcedureContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

CreateProcedureContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

CreateProcedureContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

CreateProcedureContext.prototype.routineBody = function() {
    return this.getTypedRuleContext(RoutineBodyContext,0);
};

CreateProcedureContext.prototype.ownerStatement = function() {
    return this.getTypedRuleContext(OwnerStatementContext,0);
};

CreateProcedureContext.prototype.procedureParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProcedureParameterContext);
    } else {
        return this.getTypedRuleContext(ProcedureParameterContext,i);
    }
};

CreateProcedureContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


CreateProcedureContext.prototype.routineOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RoutineOptionContext);
    } else {
        return this.getTypedRuleContext(RoutineOptionContext,i);
    }
};

CreateProcedureContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateProcedure(this);
	}
};

CreateProcedureContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateProcedure(this);
	}
};

CreateProcedureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateProcedure(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateProcedureContext = CreateProcedureContext;

MySQLParser.prototype.createProcedure = function() {

    var localctx = new CreateProcedureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, MySQLParser.RULE_createProcedure);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 931;
        this.match(MySQLParser.CREATE);
        this.state = 933;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFINER) {
            this.state = 932;
            this.ownerStatement();
        }

        this.state = 935;
        this.match(MySQLParser.PROCEDURE);
        this.state = 936;
        this.fullId();
        this.state = 937;
        this.match(MySQLParser.LR_BRACKET);
        this.state = 939;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (MySQLParser.IN - 71)) | (1 << (MySQLParser.INOUT - 71)) | (1 << (MySQLParser.LEFT - 71)))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (MySQLParser.NUMBER - 105)) | (1 << (MySQLParser.OUT - 105)) | (1 << (MySQLParser.RIGHT - 105)))) !== 0) || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
            this.state = 938;
            this.procedureParameter();
        }

        this.state = 945;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 941;
            this.match(MySQLParser.COMMA);
            this.state = 942;
            this.procedureParameter();
            this.state = 947;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 948;
        this.match(MySQLParser.RR_BRACKET);
        this.state = 952;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 949;
                this.routineOption(); 
            }
            this.state = 954;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
        }

        this.state = 955;
        this.routineBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createFunction;
    return this;
}

CreateFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateFunctionContext.prototype.constructor = CreateFunctionContext;

CreateFunctionContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

CreateFunctionContext.prototype.FUNCTION = function() {
    return this.getToken(MySQLParser.FUNCTION, 0);
};

CreateFunctionContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

CreateFunctionContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

CreateFunctionContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

CreateFunctionContext.prototype.RETURNS = function() {
    return this.getToken(MySQLParser.RETURNS, 0);
};

CreateFunctionContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

CreateFunctionContext.prototype.routineBody = function() {
    return this.getTypedRuleContext(RoutineBodyContext,0);
};

CreateFunctionContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

CreateFunctionContext.prototype.ownerStatement = function() {
    return this.getTypedRuleContext(OwnerStatementContext,0);
};

CreateFunctionContext.prototype.functionParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionParameterContext);
    } else {
        return this.getTypedRuleContext(FunctionParameterContext,i);
    }
};

CreateFunctionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


CreateFunctionContext.prototype.routineOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RoutineOptionContext);
    } else {
        return this.getTypedRuleContext(RoutineOptionContext,i);
    }
};

CreateFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateFunction(this);
	}
};

CreateFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateFunction(this);
	}
};

CreateFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateFunctionContext = CreateFunctionContext;

MySQLParser.prototype.createFunction = function() {

    var localctx = new CreateFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, MySQLParser.RULE_createFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 957;
        this.match(MySQLParser.CREATE);
        this.state = 959;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFINER) {
            this.state = 958;
            this.ownerStatement();
        }

        this.state = 961;
        this.match(MySQLParser.FUNCTION);
        this.state = 962;
        this.fullId();
        this.state = 963;
        this.match(MySQLParser.LR_BRACKET);
        this.state = 965;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
            this.state = 964;
            this.functionParameter();
        }

        this.state = 971;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 967;
            this.match(MySQLParser.COMMA);
            this.state = 968;
            this.functionParameter();
            this.state = 973;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 974;
        this.match(MySQLParser.RR_BRACKET);
        this.state = 975;
        this.match(MySQLParser.RETURNS);
        this.state = 976;
        this.dataType();
        this.state = 980;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,53,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 977;
                this.routineOption(); 
            }
            this.state = 982;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,53,this._ctx);
        }

        this.state = 985;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ALTER:
        case MySQLParser.ANALYZE:
        case MySQLParser.CALL:
        case MySQLParser.CHANGE:
        case MySQLParser.CHECK:
        case MySQLParser.CREATE:
        case MySQLParser.CURRENT:
        case MySQLParser.DATABASE:
        case MySQLParser.DELETE:
        case MySQLParser.DESC:
        case MySQLParser.DESCRIBE:
        case MySQLParser.DIAGNOSTICS:
        case MySQLParser.DROP:
        case MySQLParser.EXPLAIN:
        case MySQLParser.GET:
        case MySQLParser.GRANT:
        case MySQLParser.INSERT:
        case MySQLParser.KILL:
        case MySQLParser.LEFT:
        case MySQLParser.LOAD:
        case MySQLParser.LOCK:
        case MySQLParser.NUMBER:
        case MySQLParser.OPTIMIZE:
        case MySQLParser.PURGE:
        case MySQLParser.RELEASE:
        case MySQLParser.RENAME:
        case MySQLParser.REPLACE:
        case MySQLParser.RESIGNAL:
        case MySQLParser.REVOKE:
        case MySQLParser.RIGHT:
        case MySQLParser.SELECT:
        case MySQLParser.SET:
        case MySQLParser.SHOW:
        case MySQLParser.SIGNAL:
        case MySQLParser.STACKED:
        case MySQLParser.UNLOCK:
        case MySQLParser.UPDATE:
        case MySQLParser.USE:
        case MySQLParser.DATE:
        case MySQLParser.TIME:
        case MySQLParser.TIMESTAMP:
        case MySQLParser.DATETIME:
        case MySQLParser.YEAR:
        case MySQLParser.TEXT:
        case MySQLParser.ENUM:
        case MySQLParser.SERIAL:
        case MySQLParser.JSON_VALID:
        case MySQLParser.JSON_SCHEMA_VALID:
        case MySQLParser.COUNT:
        case MySQLParser.POSITION:
        case MySQLParser.ACCOUNT:
        case MySQLParser.ACTION:
        case MySQLParser.AFTER:
        case MySQLParser.AGGREGATE:
        case MySQLParser.ALGORITHM:
        case MySQLParser.ANY:
        case MySQLParser.AT:
        case MySQLParser.AUTHORS:
        case MySQLParser.AUTOCOMMIT:
        case MySQLParser.AUTOEXTEND_SIZE:
        case MySQLParser.AUTO_INCREMENT:
        case MySQLParser.AVG_ROW_LENGTH:
        case MySQLParser.BEGIN:
        case MySQLParser.BINLOG:
        case MySQLParser.BIT:
        case MySQLParser.BLOCK:
        case MySQLParser.BOOL:
        case MySQLParser.BOOLEAN:
        case MySQLParser.BTREE:
        case MySQLParser.CACHE:
        case MySQLParser.CASCADED:
        case MySQLParser.CHAIN:
        case MySQLParser.CHANGED:
        case MySQLParser.CHANNEL:
        case MySQLParser.CHECKSUM:
        case MySQLParser.PAGE_CHECKSUM:
        case MySQLParser.CIPHER:
        case MySQLParser.CLASS_ORIGIN:
        case MySQLParser.CLIENT:
        case MySQLParser.CLOSE:
        case MySQLParser.COALESCE:
        case MySQLParser.CODE:
        case MySQLParser.COLUMNS:
        case MySQLParser.COLUMN_FORMAT:
        case MySQLParser.COLUMN_NAME:
        case MySQLParser.COMMENT:
        case MySQLParser.COMMIT:
        case MySQLParser.COMPACT:
        case MySQLParser.COMPLETION:
        case MySQLParser.COMPRESSED:
        case MySQLParser.COMPRESSION:
        case MySQLParser.CONCURRENT:
        case MySQLParser.CONNECTION:
        case MySQLParser.CONSISTENT:
        case MySQLParser.CONSTRAINT_CATALOG:
        case MySQLParser.CONSTRAINT_SCHEMA:
        case MySQLParser.CONSTRAINT_NAME:
        case MySQLParser.CONTAINS:
        case MySQLParser.CONTEXT:
        case MySQLParser.CONTRIBUTORS:
        case MySQLParser.COPY:
        case MySQLParser.CPU:
        case MySQLParser.CURSOR_NAME:
        case MySQLParser.DATA:
        case MySQLParser.DATAFILE:
        case MySQLParser.DEALLOCATE:
        case MySQLParser.DEFAULT_AUTH:
        case MySQLParser.DEFINER:
        case MySQLParser.DELAY_KEY_WRITE:
        case MySQLParser.DES_KEY_FILE:
        case MySQLParser.DIRECTORY:
        case MySQLParser.DISABLE:
        case MySQLParser.DISCARD:
        case MySQLParser.DISK:
        case MySQLParser.DO:
        case MySQLParser.DUMPFILE:
        case MySQLParser.DUPLICATE:
        case MySQLParser.DYNAMIC:
        case MySQLParser.ENABLE:
        case MySQLParser.ENCRYPTION:
        case MySQLParser.END:
        case MySQLParser.ENDS:
        case MySQLParser.ENGINE:
        case MySQLParser.ENGINES:
        case MySQLParser.ERROR:
        case MySQLParser.ERRORS:
        case MySQLParser.ESCAPE:
        case MySQLParser.EVEN:
        case MySQLParser.EVENT:
        case MySQLParser.EVENTS:
        case MySQLParser.EVERY:
        case MySQLParser.EXCHANGE:
        case MySQLParser.EXCLUSIVE:
        case MySQLParser.EXPIRE:
        case MySQLParser.EXPORT:
        case MySQLParser.EXTENDED:
        case MySQLParser.EXTENT_SIZE:
        case MySQLParser.FAST:
        case MySQLParser.FAULTS:
        case MySQLParser.FIELDS:
        case MySQLParser.FILE_BLOCK_SIZE:
        case MySQLParser.FILTER:
        case MySQLParser.FIRST:
        case MySQLParser.FIXED:
        case MySQLParser.FLUSH:
        case MySQLParser.FOLLOWS:
        case MySQLParser.FOUND:
        case MySQLParser.FULL:
        case MySQLParser.FUNCTION:
        case MySQLParser.GENERAL:
        case MySQLParser.GLOBAL:
        case MySQLParser.GRANTS:
        case MySQLParser.GROUP_REPLICATION:
        case MySQLParser.HANDLER:
        case MySQLParser.HASH:
        case MySQLParser.HELP:
        case MySQLParser.HOST:
        case MySQLParser.HOSTS:
        case MySQLParser.IDENTIFIED:
        case MySQLParser.IGNORE_SERVER_IDS:
        case MySQLParser.IMPORT:
        case MySQLParser.INDEXES:
        case MySQLParser.INITIAL_SIZE:
        case MySQLParser.INPLACE:
        case MySQLParser.INSERT_METHOD:
        case MySQLParser.INSTALL:
        case MySQLParser.INSTANCE:
        case MySQLParser.INVISIBLE:
        case MySQLParser.INVOKER:
        case MySQLParser.IO:
        case MySQLParser.IO_THREAD:
        case MySQLParser.IPC:
        case MySQLParser.ISOLATION:
        case MySQLParser.ISSUER:
        case MySQLParser.JSON:
        case MySQLParser.KEY_BLOCK_SIZE:
        case MySQLParser.LANGUAGE:
        case MySQLParser.LAST:
        case MySQLParser.LEAVES:
        case MySQLParser.LESS:
        case MySQLParser.LEVEL:
        case MySQLParser.LIST:
        case MySQLParser.LOCAL:
        case MySQLParser.LOGFILE:
        case MySQLParser.LOGS:
        case MySQLParser.MASTER:
        case MySQLParser.MASTER_AUTO_POSITION:
        case MySQLParser.MASTER_CONNECT_RETRY:
        case MySQLParser.MASTER_DELAY:
        case MySQLParser.MASTER_HEARTBEAT_PERIOD:
        case MySQLParser.MASTER_HOST:
        case MySQLParser.MASTER_LOG_FILE:
        case MySQLParser.MASTER_LOG_POS:
        case MySQLParser.MASTER_PASSWORD:
        case MySQLParser.MASTER_PORT:
        case MySQLParser.MASTER_RETRY_COUNT:
        case MySQLParser.MASTER_SSL:
        case MySQLParser.MASTER_SSL_CA:
        case MySQLParser.MASTER_SSL_CAPATH:
        case MySQLParser.MASTER_SSL_CERT:
        case MySQLParser.MASTER_SSL_CIPHER:
        case MySQLParser.MASTER_SSL_CRL:
        case MySQLParser.MASTER_SSL_CRLPATH:
        case MySQLParser.MASTER_SSL_KEY:
        case MySQLParser.MASTER_TLS_VERSION:
        case MySQLParser.MASTER_USER:
        case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser.MAX_QUERIES_PER_HOUR:
        case MySQLParser.MAX_ROWS:
        case MySQLParser.MAX_SIZE:
        case MySQLParser.MAX_UPDATES_PER_HOUR:
        case MySQLParser.MAX_USER_CONNECTIONS:
        case MySQLParser.MEDIUM:
        case MySQLParser.MERGE:
        case MySQLParser.MESSAGE_TEXT:
        case MySQLParser.MID:
        case MySQLParser.MIGRATE:
        case MySQLParser.MIN_ROWS:
        case MySQLParser.MODE:
        case MySQLParser.MODIFY:
        case MySQLParser.MUTEX:
        case MySQLParser.MYSQL:
        case MySQLParser.MYSQL_ERRNO:
        case MySQLParser.NAME:
        case MySQLParser.NAMES:
        case MySQLParser.NCHAR:
        case MySQLParser.NEVER:
        case MySQLParser.NEXT:
        case MySQLParser.NO:
        case MySQLParser.NODEGROUP:
        case MySQLParser.NONE:
        case MySQLParser.OFFLINE:
        case MySQLParser.OFFSET:
        case MySQLParser.OJ:
        case MySQLParser.OLD_PASSWORD:
        case MySQLParser.ONE:
        case MySQLParser.ONLINE:
        case MySQLParser.ONLY:
        case MySQLParser.OPEN:
        case MySQLParser.OPTIMIZER_COSTS:
        case MySQLParser.OPTIONS:
        case MySQLParser.OWNER:
        case MySQLParser.PACK_KEYS:
        case MySQLParser.PAGE:
        case MySQLParser.PARSER:
        case MySQLParser.PARTIAL:
        case MySQLParser.PARTITIONING:
        case MySQLParser.PARTITIONS:
        case MySQLParser.PASSWORD:
        case MySQLParser.PHASE:
        case MySQLParser.PLUGIN:
        case MySQLParser.PLUGIN_DIR:
        case MySQLParser.PLUGINS:
        case MySQLParser.PORT:
        case MySQLParser.PRECEDES:
        case MySQLParser.PREPARE:
        case MySQLParser.PRESERVE:
        case MySQLParser.PREV:
        case MySQLParser.PROCESSLIST:
        case MySQLParser.PROFILE:
        case MySQLParser.PROFILES:
        case MySQLParser.PROXY:
        case MySQLParser.QUERY:
        case MySQLParser.QUICK:
        case MySQLParser.REBUILD:
        case MySQLParser.RECOVER:
        case MySQLParser.REDO_BUFFER_SIZE:
        case MySQLParser.REDUNDANT:
        case MySQLParser.RELAY:
        case MySQLParser.RELAY_LOG_FILE:
        case MySQLParser.RELAY_LOG_POS:
        case MySQLParser.RELAYLOG:
        case MySQLParser.REMOVE:
        case MySQLParser.REORGANIZE:
        case MySQLParser.REPAIR:
        case MySQLParser.REPLICATE_DO_DB:
        case MySQLParser.REPLICATE_DO_TABLE:
        case MySQLParser.REPLICATE_IGNORE_DB:
        case MySQLParser.REPLICATE_IGNORE_TABLE:
        case MySQLParser.REPLICATE_REWRITE_DB:
        case MySQLParser.REPLICATE_WILD_DO_TABLE:
        case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser.REPLICATION:
        case MySQLParser.RESET:
        case MySQLParser.RESUME:
        case MySQLParser.RETURNED_SQLSTATE:
        case MySQLParser.RETURNS:
        case MySQLParser.ROLE:
        case MySQLParser.ROLLBACK:
        case MySQLParser.ROLLUP:
        case MySQLParser.ROTATE:
        case MySQLParser.ROW:
        case MySQLParser.ROWS:
        case MySQLParser.ROW_FORMAT:
        case MySQLParser.SAVEPOINT:
        case MySQLParser.SCHEDULE:
        case MySQLParser.SECURITY:
        case MySQLParser.SERVER:
        case MySQLParser.SESSION:
        case MySQLParser.SHARE:
        case MySQLParser.SHARED:
        case MySQLParser.SIGNED:
        case MySQLParser.SIMPLE:
        case MySQLParser.SLAVE:
        case MySQLParser.SLOW:
        case MySQLParser.SNAPSHOT:
        case MySQLParser.SOCKET:
        case MySQLParser.SOME:
        case MySQLParser.SONAME:
        case MySQLParser.SOUNDS:
        case MySQLParser.SOURCE:
        case MySQLParser.SQL_AFTER_GTIDS:
        case MySQLParser.SQL_AFTER_MTS_GAPS:
        case MySQLParser.SQL_BEFORE_GTIDS:
        case MySQLParser.SQL_BUFFER_RESULT:
        case MySQLParser.SQL_CACHE:
        case MySQLParser.SQL_NO_CACHE:
        case MySQLParser.SQL_THREAD:
        case MySQLParser.START:
        case MySQLParser.STARTS:
        case MySQLParser.STATS_AUTO_RECALC:
        case MySQLParser.STATS_PERSISTENT:
        case MySQLParser.STATS_SAMPLE_PAGES:
        case MySQLParser.STATUS:
        case MySQLParser.STOP:
        case MySQLParser.STORAGE:
        case MySQLParser.STRING:
        case MySQLParser.SUBCLASS_ORIGIN:
        case MySQLParser.SUBJECT:
        case MySQLParser.SUBPARTITION:
        case MySQLParser.SUBPARTITIONS:
        case MySQLParser.SUSPEND:
        case MySQLParser.SWAPS:
        case MySQLParser.SWITCHES:
        case MySQLParser.TABLE_NAME:
        case MySQLParser.TABLESPACE:
        case MySQLParser.TEMPORARY:
        case MySQLParser.TEMPTABLE:
        case MySQLParser.THAN:
        case MySQLParser.TRADITIONAL:
        case MySQLParser.TRANSACTION:
        case MySQLParser.TRANSACTIONAL:
        case MySQLParser.TRIGGERS:
        case MySQLParser.TRUNCATE:
        case MySQLParser.UNDEFINED:
        case MySQLParser.UNDOFILE:
        case MySQLParser.UNDO_BUFFER_SIZE:
        case MySQLParser.UNINSTALL:
        case MySQLParser.UNKNOWN:
        case MySQLParser.UNTIL:
        case MySQLParser.UPGRADE:
        case MySQLParser.USER:
        case MySQLParser.USE_FRM:
        case MySQLParser.USER_RESOURCES:
        case MySQLParser.VALIDATION:
        case MySQLParser.VALUE:
        case MySQLParser.VARIABLES:
        case MySQLParser.VIEW:
        case MySQLParser.VISIBLE:
        case MySQLParser.WAIT:
        case MySQLParser.WARNINGS:
        case MySQLParser.WITHOUT:
        case MySQLParser.WORK:
        case MySQLParser.WRAPPER:
        case MySQLParser.X509:
        case MySQLParser.XA:
        case MySQLParser.XML:
        case MySQLParser.INTERNAL:
        case MySQLParser.QUARTER:
        case MySQLParser.MONTH:
        case MySQLParser.DAY:
        case MySQLParser.HOUR:
        case MySQLParser.MINUTE:
        case MySQLParser.WEEK:
        case MySQLParser.SECOND:
        case MySQLParser.MICROSECOND:
        case MySQLParser.TABLES:
        case MySQLParser.ROUTINE:
        case MySQLParser.EXECUTE:
        case MySQLParser.FILE:
        case MySQLParser.PROCESS:
        case MySQLParser.RELOAD:
        case MySQLParser.SHUTDOWN:
        case MySQLParser.SUPER:
        case MySQLParser.PRIVILEGES:
        case MySQLParser.AUDIT_ADMIN:
        case MySQLParser.BACKUP_ADMIN:
        case MySQLParser.BINLOG_ADMIN:
        case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
        case MySQLParser.CLONE_ADMIN:
        case MySQLParser.CONNECTION_ADMIN:
        case MySQLParser.ENCRYPTION_KEY_ADMIN:
        case MySQLParser.FIREWALL_ADMIN:
        case MySQLParser.FIREWALL_USER:
        case MySQLParser.GROUP_REPLICATION_ADMIN:
        case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
        case MySQLParser.NDB_STORED_USER:
        case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
        case MySQLParser.REPLICATION_APPLIER:
        case MySQLParser.REPLICATION_SLAVE_ADMIN:
        case MySQLParser.RESOURCE_GROUP_ADMIN:
        case MySQLParser.RESOURCE_GROUP_USER:
        case MySQLParser.ROLE_ADMIN:
        case MySQLParser.SESSION_VARIABLES_ADMIN:
        case MySQLParser.SET_USER_ID:
        case MySQLParser.SHOW_ROUTINE:
        case MySQLParser.SYSTEM_VARIABLES_ADMIN:
        case MySQLParser.TABLE_ENCRYPTION_ADMIN:
        case MySQLParser.VERSION_TOKEN_ADMIN:
        case MySQLParser.XA_RECOVER_ADMIN:
        case MySQLParser.ARMSCII8:
        case MySQLParser.ASCII:
        case MySQLParser.BIG5:
        case MySQLParser.CP1250:
        case MySQLParser.CP1251:
        case MySQLParser.CP1256:
        case MySQLParser.CP1257:
        case MySQLParser.CP850:
        case MySQLParser.CP852:
        case MySQLParser.CP866:
        case MySQLParser.CP932:
        case MySQLParser.DEC8:
        case MySQLParser.EUCJPMS:
        case MySQLParser.EUCKR:
        case MySQLParser.GB2312:
        case MySQLParser.GBK:
        case MySQLParser.GEOSTD8:
        case MySQLParser.GREEK:
        case MySQLParser.HEBREW:
        case MySQLParser.HP8:
        case MySQLParser.KEYBCS2:
        case MySQLParser.KOI8R:
        case MySQLParser.KOI8U:
        case MySQLParser.LATIN1:
        case MySQLParser.LATIN2:
        case MySQLParser.LATIN5:
        case MySQLParser.LATIN7:
        case MySQLParser.MACCE:
        case MySQLParser.MACROMAN:
        case MySQLParser.SJIS:
        case MySQLParser.SWE7:
        case MySQLParser.TIS620:
        case MySQLParser.UCS2:
        case MySQLParser.UJIS:
        case MySQLParser.UTF16:
        case MySQLParser.UTF16LE:
        case MySQLParser.UTF32:
        case MySQLParser.UTF8:
        case MySQLParser.UTF8MB3:
        case MySQLParser.UTF8MB4:
        case MySQLParser.ARCHIVE:
        case MySQLParser.BLACKHOLE:
        case MySQLParser.CSV:
        case MySQLParser.FEDERATED:
        case MySQLParser.INNODB:
        case MySQLParser.MEMORY:
        case MySQLParser.MRG_MYISAM:
        case MySQLParser.MYISAM:
        case MySQLParser.NDB:
        case MySQLParser.NDBCLUSTER:
        case MySQLParser.PERFORMANCE_SCHEMA:
        case MySQLParser.TOKUDB:
        case MySQLParser.REPEATABLE:
        case MySQLParser.COMMITTED:
        case MySQLParser.UNCOMMITTED:
        case MySQLParser.SERIALIZABLE:
        case MySQLParser.GEOMETRYCOLLECTION:
        case MySQLParser.LINESTRING:
        case MySQLParser.MULTILINESTRING:
        case MySQLParser.MULTIPOINT:
        case MySQLParser.MULTIPOLYGON:
        case MySQLParser.POINT:
        case MySQLParser.POLYGON:
        case MySQLParser.ABS:
        case MySQLParser.ACOS:
        case MySQLParser.ADDDATE:
        case MySQLParser.ADDTIME:
        case MySQLParser.AES_DECRYPT:
        case MySQLParser.AES_ENCRYPT:
        case MySQLParser.AREA:
        case MySQLParser.ASBINARY:
        case MySQLParser.ASIN:
        case MySQLParser.ASTEXT:
        case MySQLParser.ASWKB:
        case MySQLParser.ASWKT:
        case MySQLParser.ASYMMETRIC_DECRYPT:
        case MySQLParser.ASYMMETRIC_DERIVE:
        case MySQLParser.ASYMMETRIC_ENCRYPT:
        case MySQLParser.ASYMMETRIC_SIGN:
        case MySQLParser.ASYMMETRIC_VERIFY:
        case MySQLParser.ATAN:
        case MySQLParser.ATAN2:
        case MySQLParser.BENCHMARK:
        case MySQLParser.BIN:
        case MySQLParser.BIT_COUNT:
        case MySQLParser.BIT_LENGTH:
        case MySQLParser.BUFFER:
        case MySQLParser.CATALOG_NAME:
        case MySQLParser.CEIL:
        case MySQLParser.CEILING:
        case MySQLParser.CENTROID:
        case MySQLParser.CHARACTER_LENGTH:
        case MySQLParser.CHARSET:
        case MySQLParser.CHAR_LENGTH:
        case MySQLParser.COERCIBILITY:
        case MySQLParser.COLLATION:
        case MySQLParser.COMPRESS:
        case MySQLParser.CONCAT:
        case MySQLParser.CONCAT_WS:
        case MySQLParser.CONNECTION_ID:
        case MySQLParser.CONV:
        case MySQLParser.CONVERT_TZ:
        case MySQLParser.COS:
        case MySQLParser.COT:
        case MySQLParser.CRC32:
        case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser.CREATE_DH_PARAMETERS:
        case MySQLParser.CREATE_DIGEST:
        case MySQLParser.CROSSES:
        case MySQLParser.DATEDIFF:
        case MySQLParser.DATE_FORMAT:
        case MySQLParser.DAYNAME:
        case MySQLParser.DAYOFMONTH:
        case MySQLParser.DAYOFWEEK:
        case MySQLParser.DAYOFYEAR:
        case MySQLParser.DECODE:
        case MySQLParser.DEGREES:
        case MySQLParser.DES_DECRYPT:
        case MySQLParser.DES_ENCRYPT:
        case MySQLParser.DIMENSION:
        case MySQLParser.DISJOINT:
        case MySQLParser.ELT:
        case MySQLParser.ENCODE:
        case MySQLParser.ENCRYPT:
        case MySQLParser.ENDPOINT:
        case MySQLParser.ENVELOPE:
        case MySQLParser.EQUALS:
        case MySQLParser.EXP:
        case MySQLParser.EXPORT_SET:
        case MySQLParser.EXTERIORRING:
        case MySQLParser.EXTRACTVALUE:
        case MySQLParser.FIELD:
        case MySQLParser.FIND_IN_SET:
        case MySQLParser.FLOOR:
        case MySQLParser.FORMAT:
        case MySQLParser.FOUND_ROWS:
        case MySQLParser.FROM_BASE64:
        case MySQLParser.FROM_DAYS:
        case MySQLParser.FROM_UNIXTIME:
        case MySQLParser.GEOMCOLLFROMTEXT:
        case MySQLParser.GEOMCOLLFROMWKB:
        case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.GEOMETRYFROMTEXT:
        case MySQLParser.GEOMETRYFROMWKB:
        case MySQLParser.GEOMETRYN:
        case MySQLParser.GEOMETRYTYPE:
        case MySQLParser.GEOMFROMTEXT:
        case MySQLParser.GEOMFROMWKB:
        case MySQLParser.GET_FORMAT:
        case MySQLParser.GET_LOCK:
        case MySQLParser.GLENGTH:
        case MySQLParser.GREATEST:
        case MySQLParser.GTID_SUBSET:
        case MySQLParser.GTID_SUBTRACT:
        case MySQLParser.HEX:
        case MySQLParser.IFNULL:
        case MySQLParser.INET6_ATON:
        case MySQLParser.INET6_NTOA:
        case MySQLParser.INET_ATON:
        case MySQLParser.INET_NTOA:
        case MySQLParser.INSTR:
        case MySQLParser.INTERIORRINGN:
        case MySQLParser.INTERSECTS:
        case MySQLParser.ISCLOSED:
        case MySQLParser.ISEMPTY:
        case MySQLParser.ISNULL:
        case MySQLParser.ISSIMPLE:
        case MySQLParser.IS_FREE_LOCK:
        case MySQLParser.IS_IPV4:
        case MySQLParser.IS_IPV4_COMPAT:
        case MySQLParser.IS_IPV4_MAPPED:
        case MySQLParser.IS_IPV6:
        case MySQLParser.IS_USED_LOCK:
        case MySQLParser.LAST_INSERT_ID:
        case MySQLParser.LCASE:
        case MySQLParser.LEAST:
        case MySQLParser.LENGTH:
        case MySQLParser.LINEFROMTEXT:
        case MySQLParser.LINEFROMWKB:
        case MySQLParser.LINESTRINGFROMTEXT:
        case MySQLParser.LINESTRINGFROMWKB:
        case MySQLParser.LN:
        case MySQLParser.LOAD_FILE:
        case MySQLParser.LOCATE:
        case MySQLParser.LOG:
        case MySQLParser.LOG10:
        case MySQLParser.LOG2:
        case MySQLParser.LOWER:
        case MySQLParser.LPAD:
        case MySQLParser.LTRIM:
        case MySQLParser.MAKEDATE:
        case MySQLParser.MAKETIME:
        case MySQLParser.MAKE_SET:
        case MySQLParser.MASTER_POS_WAIT:
        case MySQLParser.MBRCONTAINS:
        case MySQLParser.MBRDISJOINT:
        case MySQLParser.MBREQUAL:
        case MySQLParser.MBRINTERSECTS:
        case MySQLParser.MBROVERLAPS:
        case MySQLParser.MBRTOUCHES:
        case MySQLParser.MBRWITHIN:
        case MySQLParser.MD5:
        case MySQLParser.MLINEFROMTEXT:
        case MySQLParser.MLINEFROMWKB:
        case MySQLParser.MONTHNAME:
        case MySQLParser.MPOINTFROMTEXT:
        case MySQLParser.MPOINTFROMWKB:
        case MySQLParser.MPOLYFROMTEXT:
        case MySQLParser.MPOLYFROMWKB:
        case MySQLParser.MULTILINESTRINGFROMTEXT:
        case MySQLParser.MULTILINESTRINGFROMWKB:
        case MySQLParser.MULTIPOINTFROMTEXT:
        case MySQLParser.MULTIPOINTFROMWKB:
        case MySQLParser.MULTIPOLYGONFROMTEXT:
        case MySQLParser.MULTIPOLYGONFROMWKB:
        case MySQLParser.NAME_CONST:
        case MySQLParser.NULLIF:
        case MySQLParser.NUMGEOMETRIES:
        case MySQLParser.NUMINTERIORRINGS:
        case MySQLParser.NUMPOINTS:
        case MySQLParser.OCT:
        case MySQLParser.OCTET_LENGTH:
        case MySQLParser.ORD:
        case MySQLParser.OVERLAPS:
        case MySQLParser.PERIOD_ADD:
        case MySQLParser.PERIOD_DIFF:
        case MySQLParser.PI:
        case MySQLParser.POINTFROMTEXT:
        case MySQLParser.POINTFROMWKB:
        case MySQLParser.POINTN:
        case MySQLParser.POLYFROMTEXT:
        case MySQLParser.POLYFROMWKB:
        case MySQLParser.POLYGONFROMTEXT:
        case MySQLParser.POLYGONFROMWKB:
        case MySQLParser.POW:
        case MySQLParser.POWER:
        case MySQLParser.QUOTE:
        case MySQLParser.RADIANS:
        case MySQLParser.RAND:
        case MySQLParser.RANDOM_BYTES:
        case MySQLParser.RELEASE_LOCK:
        case MySQLParser.REVERSE:
        case MySQLParser.ROUND:
        case MySQLParser.ROW_COUNT:
        case MySQLParser.RPAD:
        case MySQLParser.RTRIM:
        case MySQLParser.SEC_TO_TIME:
        case MySQLParser.SESSION_USER:
        case MySQLParser.SHA:
        case MySQLParser.SHA1:
        case MySQLParser.SHA2:
        case MySQLParser.SCHEMA_NAME:
        case MySQLParser.SIGN:
        case MySQLParser.SIN:
        case MySQLParser.SLEEP:
        case MySQLParser.SOUNDEX:
        case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser.SQRT:
        case MySQLParser.SRID:
        case MySQLParser.STARTPOINT:
        case MySQLParser.STRCMP:
        case MySQLParser.STR_TO_DATE:
        case MySQLParser.ST_AREA:
        case MySQLParser.ST_ASBINARY:
        case MySQLParser.ST_ASTEXT:
        case MySQLParser.ST_ASWKB:
        case MySQLParser.ST_ASWKT:
        case MySQLParser.ST_BUFFER:
        case MySQLParser.ST_CENTROID:
        case MySQLParser.ST_CONTAINS:
        case MySQLParser.ST_CROSSES:
        case MySQLParser.ST_DIFFERENCE:
        case MySQLParser.ST_DIMENSION:
        case MySQLParser.ST_DISJOINT:
        case MySQLParser.ST_DISTANCE:
        case MySQLParser.ST_ENDPOINT:
        case MySQLParser.ST_ENVELOPE:
        case MySQLParser.ST_EQUALS:
        case MySQLParser.ST_EXTERIORRING:
        case MySQLParser.ST_GEOMCOLLFROMTEXT:
        case MySQLParser.ST_GEOMCOLLFROMTXT:
        case MySQLParser.ST_GEOMCOLLFROMWKB:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.ST_GEOMETRYFROMTEXT:
        case MySQLParser.ST_GEOMETRYFROMWKB:
        case MySQLParser.ST_GEOMETRYN:
        case MySQLParser.ST_GEOMETRYTYPE:
        case MySQLParser.ST_GEOMFROMTEXT:
        case MySQLParser.ST_GEOMFROMWKB:
        case MySQLParser.ST_INTERIORRINGN:
        case MySQLParser.ST_INTERSECTION:
        case MySQLParser.ST_INTERSECTS:
        case MySQLParser.ST_ISCLOSED:
        case MySQLParser.ST_ISEMPTY:
        case MySQLParser.ST_ISSIMPLE:
        case MySQLParser.ST_LINEFROMTEXT:
        case MySQLParser.ST_LINEFROMWKB:
        case MySQLParser.ST_LINESTRINGFROMTEXT:
        case MySQLParser.ST_LINESTRINGFROMWKB:
        case MySQLParser.ST_NUMGEOMETRIES:
        case MySQLParser.ST_NUMINTERIORRING:
        case MySQLParser.ST_NUMINTERIORRINGS:
        case MySQLParser.ST_NUMPOINTS:
        case MySQLParser.ST_OVERLAPS:
        case MySQLParser.ST_POINTFROMTEXT:
        case MySQLParser.ST_POINTFROMWKB:
        case MySQLParser.ST_POINTN:
        case MySQLParser.ST_POLYFROMTEXT:
        case MySQLParser.ST_POLYFROMWKB:
        case MySQLParser.ST_POLYGONFROMTEXT:
        case MySQLParser.ST_POLYGONFROMWKB:
        case MySQLParser.ST_SRID:
        case MySQLParser.ST_STARTPOINT:
        case MySQLParser.ST_SYMDIFFERENCE:
        case MySQLParser.ST_TOUCHES:
        case MySQLParser.ST_UNION:
        case MySQLParser.ST_WITHIN:
        case MySQLParser.ST_X:
        case MySQLParser.ST_Y:
        case MySQLParser.SUBDATE:
        case MySQLParser.SUBSTRING_INDEX:
        case MySQLParser.SUBTIME:
        case MySQLParser.SYSTEM_USER:
        case MySQLParser.TAN:
        case MySQLParser.TIMEDIFF:
        case MySQLParser.TIMESTAMPADD:
        case MySQLParser.TIMESTAMPDIFF:
        case MySQLParser.TIME_FORMAT:
        case MySQLParser.TIME_TO_SEC:
        case MySQLParser.TOUCHES:
        case MySQLParser.TO_BASE64:
        case MySQLParser.TO_DAYS:
        case MySQLParser.TO_SECONDS:
        case MySQLParser.UCASE:
        case MySQLParser.UNCOMPRESS:
        case MySQLParser.UNCOMPRESSED_LENGTH:
        case MySQLParser.UNHEX:
        case MySQLParser.UNIX_TIMESTAMP:
        case MySQLParser.UPDATEXML:
        case MySQLParser.UPPER:
        case MySQLParser.UUID:
        case MySQLParser.UUID_SHORT:
        case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser.VERSION:
        case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser.WEEKDAY:
        case MySQLParser.WEEKOFYEAR:
        case MySQLParser.WEIGHT_STRING:
        case MySQLParser.WITHIN:
        case MySQLParser.YEARWEEK:
        case MySQLParser.Y_FUNCTION:
        case MySQLParser.X_FUNCTION:
        case MySQLParser.LR_BRACKET:
        case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser.STRING_LITERAL:
        case MySQLParser.ID:
        case MySQLParser.REVERSE_QUOTE_ID:
            this.state = 983;
            this.routineBody();
            break;
        case MySQLParser.RETURN:
            this.state = 984;
            this.returnStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateServerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createServer;
    this.wrapperName = null; // Token
    return this;
}

CreateServerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateServerContext.prototype.constructor = CreateServerContext;

CreateServerContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

CreateServerContext.prototype.SERVER = function() {
    return this.getToken(MySQLParser.SERVER, 0);
};

CreateServerContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CreateServerContext.prototype.FOREIGN = function() {
    return this.getToken(MySQLParser.FOREIGN, 0);
};

CreateServerContext.prototype.DATA = function() {
    return this.getToken(MySQLParser.DATA, 0);
};

CreateServerContext.prototype.WRAPPER = function() {
    return this.getToken(MySQLParser.WRAPPER, 0);
};

CreateServerContext.prototype.OPTIONS = function() {
    return this.getToken(MySQLParser.OPTIONS, 0);
};

CreateServerContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

CreateServerContext.prototype.serverOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ServerOptionContext);
    } else {
        return this.getTypedRuleContext(ServerOptionContext,i);
    }
};

CreateServerContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

CreateServerContext.prototype.MYSQL = function() {
    return this.getToken(MySQLParser.MYSQL, 0);
};

CreateServerContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

CreateServerContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


CreateServerContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateServer(this);
	}
};

CreateServerContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateServer(this);
	}
};

CreateServerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateServer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateServerContext = CreateServerContext;

MySQLParser.prototype.createServer = function() {

    var localctx = new CreateServerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, MySQLParser.RULE_createServer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 987;
        this.match(MySQLParser.CREATE);
        this.state = 988;
        this.match(MySQLParser.SERVER);
        this.state = 989;
        this.uid();
        this.state = 990;
        this.match(MySQLParser.FOREIGN);
        this.state = 991;
        this.match(MySQLParser.DATA);
        this.state = 992;
        this.match(MySQLParser.WRAPPER);
        this.state = 993;
        localctx.wrapperName = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.MYSQL || _la===MySQLParser.STRING_LITERAL)) {
            localctx.wrapperName = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 994;
        this.match(MySQLParser.OPTIONS);
        this.state = 995;
        this.match(MySQLParser.LR_BRACKET);
        this.state = 996;
        this.serverOption();
        this.state = 1001;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 997;
            this.match(MySQLParser.COMMA);
            this.state = 998;
            this.serverOption();
            this.state = 1003;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1004;
        this.match(MySQLParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createTable;
    return this;
}

CreateTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableContext.prototype.constructor = CreateTableContext;


 
CreateTableContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CopyCreateTableContext(parser, ctx) {
	CreateTableContext.call(this, parser);
    this.parenthesisTable = null; // TableNameContext;
    CreateTableContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CopyCreateTableContext.prototype = Object.create(CreateTableContext.prototype);
CopyCreateTableContext.prototype.constructor = CopyCreateTableContext;

MySQLParser.CopyCreateTableContext = CopyCreateTableContext;

CopyCreateTableContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

CopyCreateTableContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

CopyCreateTableContext.prototype.tableName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableNameContext);
    } else {
        return this.getTypedRuleContext(TableNameContext,i);
    }
};

CopyCreateTableContext.prototype.LIKE = function() {
    return this.getToken(MySQLParser.LIKE, 0);
};

CopyCreateTableContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

CopyCreateTableContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

CopyCreateTableContext.prototype.TEMPORARY = function() {
    return this.getToken(MySQLParser.TEMPORARY, 0);
};

CopyCreateTableContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};
CopyCreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCopyCreateTable(this);
	}
};

CopyCreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCopyCreateTable(this);
	}
};

CopyCreateTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCopyCreateTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnCreateTableContext(parser, ctx) {
	CreateTableContext.call(this, parser);
    CreateTableContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnCreateTableContext.prototype = Object.create(CreateTableContext.prototype);
ColumnCreateTableContext.prototype.constructor = ColumnCreateTableContext;

MySQLParser.ColumnCreateTableContext = ColumnCreateTableContext;

ColumnCreateTableContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

ColumnCreateTableContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

ColumnCreateTableContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

ColumnCreateTableContext.prototype.createDefinitions = function() {
    return this.getTypedRuleContext(CreateDefinitionsContext,0);
};

ColumnCreateTableContext.prototype.TEMPORARY = function() {
    return this.getToken(MySQLParser.TEMPORARY, 0);
};

ColumnCreateTableContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

ColumnCreateTableContext.prototype.tableOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableOptionContext);
    } else {
        return this.getTypedRuleContext(TableOptionContext,i);
    }
};

ColumnCreateTableContext.prototype.partitionDefinitions = function() {
    return this.getTypedRuleContext(PartitionDefinitionsContext,0);
};

ColumnCreateTableContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

ColumnCreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterColumnCreateTable(this);
	}
};

ColumnCreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitColumnCreateTable(this);
	}
};

ColumnCreateTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitColumnCreateTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function QueryCreateTableContext(parser, ctx) {
	CreateTableContext.call(this, parser);
    this.keyViolate = null; // Token;
    CreateTableContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryCreateTableContext.prototype = Object.create(CreateTableContext.prototype);
QueryCreateTableContext.prototype.constructor = QueryCreateTableContext;

MySQLParser.QueryCreateTableContext = QueryCreateTableContext;

QueryCreateTableContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

QueryCreateTableContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

QueryCreateTableContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

QueryCreateTableContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

QueryCreateTableContext.prototype.TEMPORARY = function() {
    return this.getToken(MySQLParser.TEMPORARY, 0);
};

QueryCreateTableContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

QueryCreateTableContext.prototype.createDefinitions = function() {
    return this.getTypedRuleContext(CreateDefinitionsContext,0);
};

QueryCreateTableContext.prototype.tableOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableOptionContext);
    } else {
        return this.getTypedRuleContext(TableOptionContext,i);
    }
};

QueryCreateTableContext.prototype.partitionDefinitions = function() {
    return this.getTypedRuleContext(PartitionDefinitionsContext,0);
};

QueryCreateTableContext.prototype.AS = function() {
    return this.getToken(MySQLParser.AS, 0);
};

QueryCreateTableContext.prototype.IGNORE = function() {
    return this.getToken(MySQLParser.IGNORE, 0);
};

QueryCreateTableContext.prototype.REPLACE = function() {
    return this.getToken(MySQLParser.REPLACE, 0);
};

QueryCreateTableContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

QueryCreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterQueryCreateTable(this);
	}
};

QueryCreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitQueryCreateTable(this);
	}
};

QueryCreateTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitQueryCreateTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.CreateTableContext = CreateTableContext;

MySQLParser.prototype.createTable = function() {

    var localctx = new CreateTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, MySQLParser.RULE_createTable);
    var _la = 0; // Token type
    try {
        this.state = 1084;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CopyCreateTableContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1006;
            this.match(MySQLParser.CREATE);
            this.state = 1008;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.TEMPORARY) {
                this.state = 1007;
                this.match(MySQLParser.TEMPORARY);
            }

            this.state = 1010;
            this.match(MySQLParser.TABLE);
            this.state = 1012;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.IF) {
                this.state = 1011;
                this.ifNotExists();
            }

            this.state = 1014;
            this.tableName();
            this.state = 1022;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.LIKE:
                this.state = 1015;
                this.match(MySQLParser.LIKE);
                this.state = 1016;
                this.tableName();
                break;
            case MySQLParser.LR_BRACKET:
                this.state = 1017;
                this.match(MySQLParser.LR_BRACKET);
                this.state = 1018;
                this.match(MySQLParser.LIKE);
                this.state = 1019;
                localctx.parenthesisTable = this.tableName();
                this.state = 1020;
                this.match(MySQLParser.RR_BRACKET);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            localctx = new QueryCreateTableContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1024;
            this.match(MySQLParser.CREATE);
            this.state = 1026;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.TEMPORARY) {
                this.state = 1025;
                this.match(MySQLParser.TEMPORARY);
            }

            this.state = 1028;
            this.match(MySQLParser.TABLE);
            this.state = 1030;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.IF) {
                this.state = 1029;
                this.ifNotExists();
            }

            this.state = 1032;
            this.tableName();
            this.state = 1034;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
            if(la_===1) {
                this.state = 1033;
                this.createDefinitions();

            }
            this.state = 1046;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (MySQLParser.CHARACTER - 22)) | (1 << (MySQLParser.COLLATE - 22)) | (1 << (MySQLParser.DEFAULT - 22)))) !== 0) || _la===MySQLParser.INDEX || _la===MySQLParser.UNION || ((((_la - 280)) & ~0x1f) == 0 && ((1 << (_la - 280)) & ((1 << (MySQLParser.AUTO_INCREMENT - 280)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 280)) | (1 << (MySQLParser.CHECKSUM - 280)) | (1 << (MySQLParser.PAGE_CHECKSUM - 280)) | (1 << (MySQLParser.COMMENT - 280)) | (1 << (MySQLParser.COMPRESSION - 280)))) !== 0) || ((((_la - 312)) & ~0x1f) == 0 && ((1 << (_la - 312)) & ((1 << (MySQLParser.CONNECTION - 312)) | (1 << (MySQLParser.DATA - 312)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 312)) | (1 << (MySQLParser.ENCRYPTION - 312)) | (1 << (MySQLParser.ENGINE - 312)))) !== 0) || _la===MySQLParser.INSERT_METHOD || _la===MySQLParser.KEY_BLOCK_SIZE || _la===MySQLParser.MAX_ROWS || _la===MySQLParser.MIN_ROWS || _la===MySQLParser.PACK_KEYS || _la===MySQLParser.PASSWORD || ((((_la - 513)) & ~0x1f) == 0 && ((1 << (_la - 513)) & ((1 << (MySQLParser.ROW_FORMAT - 513)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 513)) | (1 << (MySQLParser.STATS_PERSISTENT - 513)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 513)))) !== 0) || _la===MySQLParser.STORAGE || _la===MySQLParser.TABLESPACE || _la===MySQLParser.CHARSET) {
                this.state = 1036;
                this.tableOption();
                this.state = 1043;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (MySQLParser.CHARACTER - 22)) | (1 << (MySQLParser.COLLATE - 22)) | (1 << (MySQLParser.DEFAULT - 22)))) !== 0) || _la===MySQLParser.INDEX || _la===MySQLParser.UNION || ((((_la - 280)) & ~0x1f) == 0 && ((1 << (_la - 280)) & ((1 << (MySQLParser.AUTO_INCREMENT - 280)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 280)) | (1 << (MySQLParser.CHECKSUM - 280)) | (1 << (MySQLParser.PAGE_CHECKSUM - 280)) | (1 << (MySQLParser.COMMENT - 280)) | (1 << (MySQLParser.COMPRESSION - 280)))) !== 0) || ((((_la - 312)) & ~0x1f) == 0 && ((1 << (_la - 312)) & ((1 << (MySQLParser.CONNECTION - 312)) | (1 << (MySQLParser.DATA - 312)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 312)) | (1 << (MySQLParser.ENCRYPTION - 312)) | (1 << (MySQLParser.ENGINE - 312)))) !== 0) || _la===MySQLParser.INSERT_METHOD || _la===MySQLParser.KEY_BLOCK_SIZE || _la===MySQLParser.MAX_ROWS || _la===MySQLParser.MIN_ROWS || _la===MySQLParser.PACK_KEYS || _la===MySQLParser.PASSWORD || ((((_la - 513)) & ~0x1f) == 0 && ((1 << (_la - 513)) & ((1 << (MySQLParser.ROW_FORMAT - 513)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 513)) | (1 << (MySQLParser.STATS_PERSISTENT - 513)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 513)))) !== 0) || _la===MySQLParser.STORAGE || _la===MySQLParser.TABLESPACE || _la===MySQLParser.CHARSET || _la===MySQLParser.COMMA) {
                    this.state = 1038;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===MySQLParser.COMMA) {
                        this.state = 1037;
                        this.match(MySQLParser.COMMA);
                    }

                    this.state = 1040;
                    this.tableOption();
                    this.state = 1045;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1049;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.PARTITION) {
                this.state = 1048;
                this.partitionDefinitions();
            }

            this.state = 1052;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.IGNORE || _la===MySQLParser.REPLACE) {
                this.state = 1051;
                localctx.keyViolate = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.IGNORE || _la===MySQLParser.REPLACE)) {
                    localctx.keyViolate = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1055;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.AS) {
                this.state = 1054;
                this.match(MySQLParser.AS);
            }

            this.state = 1057;
            this.selectStatement();
            break;

        case 3:
            localctx = new ColumnCreateTableContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1059;
            this.match(MySQLParser.CREATE);
            this.state = 1061;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.TEMPORARY) {
                this.state = 1060;
                this.match(MySQLParser.TEMPORARY);
            }

            this.state = 1063;
            this.match(MySQLParser.TABLE);
            this.state = 1065;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.IF) {
                this.state = 1064;
                this.ifNotExists();
            }

            this.state = 1067;
            this.tableName();
            this.state = 1068;
            this.createDefinitions();
            this.state = 1079;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
            if(la_===1) {
                this.state = 1069;
                this.tableOption();
                this.state = 1076;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1071;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===MySQLParser.COMMA) {
                            this.state = 1070;
                            this.match(MySQLParser.COMMA);
                        }

                        this.state = 1073;
                        this.tableOption(); 
                    }
                    this.state = 1078;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
                }


            }
            this.state = 1082;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.PARTITION) {
                this.state = 1081;
                this.partitionDefinitions();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTablespaceInnodbContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createTablespaceInnodb;
    this.datafile = null; // Token
    this.fileBlockSize = null; // FileSizeLiteralContext
    return this;
}

CreateTablespaceInnodbContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTablespaceInnodbContext.prototype.constructor = CreateTablespaceInnodbContext;

CreateTablespaceInnodbContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

CreateTablespaceInnodbContext.prototype.TABLESPACE = function() {
    return this.getToken(MySQLParser.TABLESPACE, 0);
};

CreateTablespaceInnodbContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CreateTablespaceInnodbContext.prototype.ADD = function() {
    return this.getToken(MySQLParser.ADD, 0);
};

CreateTablespaceInnodbContext.prototype.DATAFILE = function() {
    return this.getToken(MySQLParser.DATAFILE, 0);
};

CreateTablespaceInnodbContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

CreateTablespaceInnodbContext.prototype.FILE_BLOCK_SIZE = function() {
    return this.getToken(MySQLParser.FILE_BLOCK_SIZE, 0);
};

CreateTablespaceInnodbContext.prototype.EQUAL_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.EQUAL_SYMBOL);
    } else {
        return this.getToken(MySQLParser.EQUAL_SYMBOL, i);
    }
};


CreateTablespaceInnodbContext.prototype.ENGINE = function() {
    return this.getToken(MySQLParser.ENGINE, 0);
};

CreateTablespaceInnodbContext.prototype.engineName = function() {
    return this.getTypedRuleContext(EngineNameContext,0);
};

CreateTablespaceInnodbContext.prototype.fileSizeLiteral = function() {
    return this.getTypedRuleContext(FileSizeLiteralContext,0);
};

CreateTablespaceInnodbContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateTablespaceInnodb(this);
	}
};

CreateTablespaceInnodbContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateTablespaceInnodb(this);
	}
};

CreateTablespaceInnodbContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateTablespaceInnodb(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateTablespaceInnodbContext = CreateTablespaceInnodbContext;

MySQLParser.prototype.createTablespaceInnodb = function() {

    var localctx = new CreateTablespaceInnodbContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, MySQLParser.RULE_createTablespaceInnodb);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1086;
        this.match(MySQLParser.CREATE);
        this.state = 1087;
        this.match(MySQLParser.TABLESPACE);
        this.state = 1088;
        this.uid();
        this.state = 1089;
        this.match(MySQLParser.ADD);
        this.state = 1090;
        this.match(MySQLParser.DATAFILE);
        this.state = 1091;
        localctx.datafile = this.match(MySQLParser.STRING_LITERAL);
        this.state = 1095;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.FILE_BLOCK_SIZE) {
            this.state = 1092;
            this.match(MySQLParser.FILE_BLOCK_SIZE);
            this.state = 1093;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 1094;
            localctx.fileBlockSize = this.fileSizeLiteral();
        }

        this.state = 1102;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ENGINE) {
            this.state = 1097;
            this.match(MySQLParser.ENGINE);
            this.state = 1099;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1098;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1101;
            this.engineName();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTablespaceNdbContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createTablespaceNdb;
    this.datafile = null; // Token
    this.extentSize = null; // FileSizeLiteralContext
    this.initialSize = null; // FileSizeLiteralContext
    this.autoextendSize = null; // FileSizeLiteralContext
    this.maxSize = null; // FileSizeLiteralContext
    this.comment = null; // Token
    return this;
}

CreateTablespaceNdbContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTablespaceNdbContext.prototype.constructor = CreateTablespaceNdbContext;

CreateTablespaceNdbContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

CreateTablespaceNdbContext.prototype.TABLESPACE = function() {
    return this.getToken(MySQLParser.TABLESPACE, 0);
};

CreateTablespaceNdbContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

CreateTablespaceNdbContext.prototype.ADD = function() {
    return this.getToken(MySQLParser.ADD, 0);
};

CreateTablespaceNdbContext.prototype.DATAFILE = function() {
    return this.getToken(MySQLParser.DATAFILE, 0);
};

CreateTablespaceNdbContext.prototype.USE = function() {
    return this.getToken(MySQLParser.USE, 0);
};

CreateTablespaceNdbContext.prototype.LOGFILE = function() {
    return this.getToken(MySQLParser.LOGFILE, 0);
};

CreateTablespaceNdbContext.prototype.GROUP = function() {
    return this.getToken(MySQLParser.GROUP, 0);
};

CreateTablespaceNdbContext.prototype.ENGINE = function() {
    return this.getToken(MySQLParser.ENGINE, 0);
};

CreateTablespaceNdbContext.prototype.engineName = function() {
    return this.getTypedRuleContext(EngineNameContext,0);
};

CreateTablespaceNdbContext.prototype.STRING_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.STRING_LITERAL);
    } else {
        return this.getToken(MySQLParser.STRING_LITERAL, i);
    }
};


CreateTablespaceNdbContext.prototype.EXTENT_SIZE = function() {
    return this.getToken(MySQLParser.EXTENT_SIZE, 0);
};

CreateTablespaceNdbContext.prototype.INITIAL_SIZE = function() {
    return this.getToken(MySQLParser.INITIAL_SIZE, 0);
};

CreateTablespaceNdbContext.prototype.AUTOEXTEND_SIZE = function() {
    return this.getToken(MySQLParser.AUTOEXTEND_SIZE, 0);
};

CreateTablespaceNdbContext.prototype.MAX_SIZE = function() {
    return this.getToken(MySQLParser.MAX_SIZE, 0);
};

CreateTablespaceNdbContext.prototype.NODEGROUP = function() {
    return this.getToken(MySQLParser.NODEGROUP, 0);
};

CreateTablespaceNdbContext.prototype.WAIT = function() {
    return this.getToken(MySQLParser.WAIT, 0);
};

CreateTablespaceNdbContext.prototype.COMMENT = function() {
    return this.getToken(MySQLParser.COMMENT, 0);
};

CreateTablespaceNdbContext.prototype.EQUAL_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.EQUAL_SYMBOL);
    } else {
        return this.getToken(MySQLParser.EQUAL_SYMBOL, i);
    }
};


CreateTablespaceNdbContext.prototype.fileSizeLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FileSizeLiteralContext);
    } else {
        return this.getTypedRuleContext(FileSizeLiteralContext,i);
    }
};

CreateTablespaceNdbContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateTablespaceNdb(this);
	}
};

CreateTablespaceNdbContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateTablespaceNdb(this);
	}
};

CreateTablespaceNdbContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateTablespaceNdb(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateTablespaceNdbContext = CreateTablespaceNdbContext;

MySQLParser.prototype.createTablespaceNdb = function() {

    var localctx = new CreateTablespaceNdbContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, MySQLParser.RULE_createTablespaceNdb);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1104;
        this.match(MySQLParser.CREATE);
        this.state = 1105;
        this.match(MySQLParser.TABLESPACE);
        this.state = 1106;
        this.uid();
        this.state = 1107;
        this.match(MySQLParser.ADD);
        this.state = 1108;
        this.match(MySQLParser.DATAFILE);
        this.state = 1109;
        localctx.datafile = this.match(MySQLParser.STRING_LITERAL);
        this.state = 1110;
        this.match(MySQLParser.USE);
        this.state = 1111;
        this.match(MySQLParser.LOGFILE);
        this.state = 1112;
        this.match(MySQLParser.GROUP);
        this.state = 1113;
        this.uid();
        this.state = 1119;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.EXTENT_SIZE) {
            this.state = 1114;
            this.match(MySQLParser.EXTENT_SIZE);
            this.state = 1116;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1115;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1118;
            localctx.extentSize = this.fileSizeLiteral();
        }

        this.state = 1126;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.INITIAL_SIZE) {
            this.state = 1121;
            this.match(MySQLParser.INITIAL_SIZE);
            this.state = 1123;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1122;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1125;
            localctx.initialSize = this.fileSizeLiteral();
        }

        this.state = 1133;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.AUTOEXTEND_SIZE) {
            this.state = 1128;
            this.match(MySQLParser.AUTOEXTEND_SIZE);
            this.state = 1130;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1129;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1132;
            localctx.autoextendSize = this.fileSizeLiteral();
        }

        this.state = 1140;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.MAX_SIZE) {
            this.state = 1135;
            this.match(MySQLParser.MAX_SIZE);
            this.state = 1137;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1136;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1139;
            localctx.maxSize = this.fileSizeLiteral();
        }

        this.state = 1147;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.NODEGROUP) {
            this.state = 1142;
            this.match(MySQLParser.NODEGROUP);
            this.state = 1144;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1143;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1146;
            this.uid();
        }

        this.state = 1150;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WAIT) {
            this.state = 1149;
            this.match(MySQLParser.WAIT);
        }

        this.state = 1157;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.COMMENT) {
            this.state = 1152;
            this.match(MySQLParser.COMMENT);
            this.state = 1154;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1153;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1156;
            localctx.comment = this.match(MySQLParser.STRING_LITERAL);
        }

        this.state = 1159;
        this.match(MySQLParser.ENGINE);
        this.state = 1161;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.EQUAL_SYMBOL) {
            this.state = 1160;
            this.match(MySQLParser.EQUAL_SYMBOL);
        }

        this.state = 1163;
        this.engineName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTriggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createTrigger;
    this.thisTrigger = null; // FullIdContext
    this.triggerTime = null; // Token
    this.triggerEvent = null; // Token
    this.triggerPlace = null; // Token
    this.otherTrigger = null; // FullIdContext
    return this;
}

CreateTriggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTriggerContext.prototype.constructor = CreateTriggerContext;

CreateTriggerContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

CreateTriggerContext.prototype.TRIGGER = function() {
    return this.getToken(MySQLParser.TRIGGER, 0);
};

CreateTriggerContext.prototype.ON = function() {
    return this.getToken(MySQLParser.ON, 0);
};

CreateTriggerContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

CreateTriggerContext.prototype.FOR = function() {
    return this.getToken(MySQLParser.FOR, 0);
};

CreateTriggerContext.prototype.EACH = function() {
    return this.getToken(MySQLParser.EACH, 0);
};

CreateTriggerContext.prototype.ROW = function() {
    return this.getToken(MySQLParser.ROW, 0);
};

CreateTriggerContext.prototype.routineBody = function() {
    return this.getTypedRuleContext(RoutineBodyContext,0);
};

CreateTriggerContext.prototype.fullId = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FullIdContext);
    } else {
        return this.getTypedRuleContext(FullIdContext,i);
    }
};

CreateTriggerContext.prototype.BEFORE = function() {
    return this.getToken(MySQLParser.BEFORE, 0);
};

CreateTriggerContext.prototype.AFTER = function() {
    return this.getToken(MySQLParser.AFTER, 0);
};

CreateTriggerContext.prototype.INSERT = function() {
    return this.getToken(MySQLParser.INSERT, 0);
};

CreateTriggerContext.prototype.UPDATE = function() {
    return this.getToken(MySQLParser.UPDATE, 0);
};

CreateTriggerContext.prototype.DELETE = function() {
    return this.getToken(MySQLParser.DELETE, 0);
};

CreateTriggerContext.prototype.ownerStatement = function() {
    return this.getTypedRuleContext(OwnerStatementContext,0);
};

CreateTriggerContext.prototype.FOLLOWS = function() {
    return this.getToken(MySQLParser.FOLLOWS, 0);
};

CreateTriggerContext.prototype.PRECEDES = function() {
    return this.getToken(MySQLParser.PRECEDES, 0);
};

CreateTriggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateTrigger(this);
	}
};

CreateTriggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateTrigger(this);
	}
};

CreateTriggerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateTrigger(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateTriggerContext = CreateTriggerContext;

MySQLParser.prototype.createTrigger = function() {

    var localctx = new CreateTriggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, MySQLParser.RULE_createTrigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1165;
        this.match(MySQLParser.CREATE);
        this.state = 1167;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFINER) {
            this.state = 1166;
            this.ownerStatement();
        }

        this.state = 1169;
        this.match(MySQLParser.TRIGGER);
        this.state = 1170;
        localctx.thisTrigger = this.fullId();
        this.state = 1171;
        localctx.triggerTime = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.BEFORE || _la===MySQLParser.AFTER)) {
            localctx.triggerTime = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1172;
        localctx.triggerEvent = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.DELETE || _la===MySQLParser.INSERT || _la===MySQLParser.UPDATE)) {
            localctx.triggerEvent = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1173;
        this.match(MySQLParser.ON);
        this.state = 1174;
        this.tableName();
        this.state = 1175;
        this.match(MySQLParser.FOR);
        this.state = 1176;
        this.match(MySQLParser.EACH);
        this.state = 1177;
        this.match(MySQLParser.ROW);
        this.state = 1180;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        if(la_===1) {
            this.state = 1178;
            localctx.triggerPlace = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.FOLLOWS || _la===MySQLParser.PRECEDES)) {
                localctx.triggerPlace = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1179;
            localctx.otherTrigger = this.fullId();

        }
        this.state = 1182;
        this.routineBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createView;
    this.algType = null; // Token
    this.secContext = null; // Token
    this.checkOption = null; // Token
    return this;
}

CreateViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateViewContext.prototype.constructor = CreateViewContext;

CreateViewContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

CreateViewContext.prototype.VIEW = function() {
    return this.getToken(MySQLParser.VIEW, 0);
};

CreateViewContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

CreateViewContext.prototype.AS = function() {
    return this.getToken(MySQLParser.AS, 0);
};

CreateViewContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

CreateViewContext.prototype.OR = function() {
    return this.getToken(MySQLParser.OR, 0);
};

CreateViewContext.prototype.REPLACE = function() {
    return this.getToken(MySQLParser.REPLACE, 0);
};

CreateViewContext.prototype.ALGORITHM = function() {
    return this.getToken(MySQLParser.ALGORITHM, 0);
};

CreateViewContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

CreateViewContext.prototype.ownerStatement = function() {
    return this.getTypedRuleContext(OwnerStatementContext,0);
};

CreateViewContext.prototype.SQL = function() {
    return this.getToken(MySQLParser.SQL, 0);
};

CreateViewContext.prototype.SECURITY = function() {
    return this.getToken(MySQLParser.SECURITY, 0);
};

CreateViewContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

CreateViewContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

CreateViewContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

CreateViewContext.prototype.WITH = function() {
    return this.getToken(MySQLParser.WITH, 0);
};

CreateViewContext.prototype.CHECK = function() {
    return this.getToken(MySQLParser.CHECK, 0);
};

CreateViewContext.prototype.OPTION = function() {
    return this.getToken(MySQLParser.OPTION, 0);
};

CreateViewContext.prototype.UNDEFINED = function() {
    return this.getToken(MySQLParser.UNDEFINED, 0);
};

CreateViewContext.prototype.MERGE = function() {
    return this.getToken(MySQLParser.MERGE, 0);
};

CreateViewContext.prototype.TEMPTABLE = function() {
    return this.getToken(MySQLParser.TEMPTABLE, 0);
};

CreateViewContext.prototype.DEFINER = function() {
    return this.getToken(MySQLParser.DEFINER, 0);
};

CreateViewContext.prototype.INVOKER = function() {
    return this.getToken(MySQLParser.INVOKER, 0);
};

CreateViewContext.prototype.CASCADED = function() {
    return this.getToken(MySQLParser.CASCADED, 0);
};

CreateViewContext.prototype.LOCAL = function() {
    return this.getToken(MySQLParser.LOCAL, 0);
};

CreateViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateView(this);
	}
};

CreateViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateView(this);
	}
};

CreateViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateViewContext = CreateViewContext;

MySQLParser.prototype.createView = function() {

    var localctx = new CreateViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, MySQLParser.RULE_createView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1184;
        this.match(MySQLParser.CREATE);
        this.state = 1187;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.OR) {
            this.state = 1185;
            this.match(MySQLParser.OR);
            this.state = 1186;
            this.match(MySQLParser.REPLACE);
        }

        this.state = 1192;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ALGORITHM) {
            this.state = 1189;
            this.match(MySQLParser.ALGORITHM);
            this.state = 1190;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 1191;
            localctx.algType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.MERGE || _la===MySQLParser.TEMPTABLE || _la===MySQLParser.UNDEFINED)) {
                localctx.algType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1195;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFINER) {
            this.state = 1194;
            this.ownerStatement();
        }

        this.state = 1200;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.SQL) {
            this.state = 1197;
            this.match(MySQLParser.SQL);
            this.state = 1198;
            this.match(MySQLParser.SECURITY);
            this.state = 1199;
            localctx.secContext = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DEFINER || _la===MySQLParser.INVOKER)) {
                localctx.secContext = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1202;
        this.match(MySQLParser.VIEW);
        this.state = 1203;
        this.fullId();
        this.state = 1208;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LR_BRACKET) {
            this.state = 1204;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 1205;
            this.uidList();
            this.state = 1206;
            this.match(MySQLParser.RR_BRACKET);
        }

        this.state = 1210;
        this.match(MySQLParser.AS);
        this.state = 1211;
        this.selectStatement();
        this.state = 1218;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WITH) {
            this.state = 1212;
            this.match(MySQLParser.WITH);
            this.state = 1214;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CASCADED || _la===MySQLParser.LOCAL) {
                this.state = 1213;
                localctx.checkOption = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.CASCADED || _la===MySQLParser.LOCAL)) {
                    localctx.checkOption = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1216;
            this.match(MySQLParser.CHECK);
            this.state = 1217;
            this.match(MySQLParser.OPTION);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateDatabaseOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createDatabaseOption;
    return this;
}

CreateDatabaseOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateDatabaseOptionContext.prototype.constructor = CreateDatabaseOptionContext;

CreateDatabaseOptionContext.prototype.CHARACTER = function() {
    return this.getToken(MySQLParser.CHARACTER, 0);
};

CreateDatabaseOptionContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

CreateDatabaseOptionContext.prototype.CHARSET = function() {
    return this.getToken(MySQLParser.CHARSET, 0);
};

CreateDatabaseOptionContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

CreateDatabaseOptionContext.prototype.DEFAULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.DEFAULT);
    } else {
        return this.getToken(MySQLParser.DEFAULT, i);
    }
};


CreateDatabaseOptionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

CreateDatabaseOptionContext.prototype.COLLATE = function() {
    return this.getToken(MySQLParser.COLLATE, 0);
};

CreateDatabaseOptionContext.prototype.collationName = function() {
    return this.getTypedRuleContext(CollationNameContext,0);
};

CreateDatabaseOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateDatabaseOption(this);
	}
};

CreateDatabaseOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateDatabaseOption(this);
	}
};

CreateDatabaseOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateDatabaseOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateDatabaseOptionContext = CreateDatabaseOptionContext;

MySQLParser.prototype.createDatabaseOption = function() {

    var localctx = new CreateDatabaseOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, MySQLParser.RULE_createDatabaseOption);
    var _la = 0; // Token type
    try {
        this.state = 1243;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1221;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.DEFAULT) {
                this.state = 1220;
                this.match(MySQLParser.DEFAULT);
            }

            this.state = 1226;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.CHARACTER:
                this.state = 1223;
                this.match(MySQLParser.CHARACTER);
                this.state = 1224;
                this.match(MySQLParser.SET);
                break;
            case MySQLParser.CHARSET:
                this.state = 1225;
                this.match(MySQLParser.CHARSET);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1229;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1228;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1233;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.BINARY:
            case MySQLParser.ARMSCII8:
            case MySQLParser.ASCII:
            case MySQLParser.BIG5:
            case MySQLParser.CP1250:
            case MySQLParser.CP1251:
            case MySQLParser.CP1256:
            case MySQLParser.CP1257:
            case MySQLParser.CP850:
            case MySQLParser.CP852:
            case MySQLParser.CP866:
            case MySQLParser.CP932:
            case MySQLParser.DEC8:
            case MySQLParser.EUCJPMS:
            case MySQLParser.EUCKR:
            case MySQLParser.GB2312:
            case MySQLParser.GBK:
            case MySQLParser.GEOSTD8:
            case MySQLParser.GREEK:
            case MySQLParser.HEBREW:
            case MySQLParser.HP8:
            case MySQLParser.KEYBCS2:
            case MySQLParser.KOI8R:
            case MySQLParser.KOI8U:
            case MySQLParser.LATIN1:
            case MySQLParser.LATIN2:
            case MySQLParser.LATIN5:
            case MySQLParser.LATIN7:
            case MySQLParser.MACCE:
            case MySQLParser.MACROMAN:
            case MySQLParser.SJIS:
            case MySQLParser.SWE7:
            case MySQLParser.TIS620:
            case MySQLParser.UCS2:
            case MySQLParser.UJIS:
            case MySQLParser.UTF16:
            case MySQLParser.UTF16LE:
            case MySQLParser.UTF32:
            case MySQLParser.UTF8:
            case MySQLParser.UTF8MB3:
            case MySQLParser.UTF8MB4:
            case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySQLParser.STRING_LITERAL:
                this.state = 1231;
                this.charsetName();
                break;
            case MySQLParser.DEFAULT:
                this.state = 1232;
                this.match(MySQLParser.DEFAULT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1236;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.DEFAULT) {
                this.state = 1235;
                this.match(MySQLParser.DEFAULT);
            }

            this.state = 1238;
            this.match(MySQLParser.COLLATE);
            this.state = 1240;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1239;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1242;
            this.collationName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OwnerStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_ownerStatement;
    return this;
}

OwnerStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OwnerStatementContext.prototype.constructor = OwnerStatementContext;

OwnerStatementContext.prototype.DEFINER = function() {
    return this.getToken(MySQLParser.DEFINER, 0);
};

OwnerStatementContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

OwnerStatementContext.prototype.userName = function() {
    return this.getTypedRuleContext(UserNameContext,0);
};

OwnerStatementContext.prototype.CURRENT_USER = function() {
    return this.getToken(MySQLParser.CURRENT_USER, 0);
};

OwnerStatementContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

OwnerStatementContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

OwnerStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOwnerStatement(this);
	}
};

OwnerStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOwnerStatement(this);
	}
};

OwnerStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOwnerStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OwnerStatementContext = OwnerStatementContext;

MySQLParser.prototype.ownerStatement = function() {

    var localctx = new OwnerStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, MySQLParser.RULE_ownerStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1245;
        this.match(MySQLParser.DEFINER);
        this.state = 1246;
        this.match(MySQLParser.EQUAL_SYMBOL);
        this.state = 1253;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.STRING_LITERAL:
        case MySQLParser.ID:
        case MySQLParser.STRING_USER_NAME:
            this.state = 1247;
            this.userName();
            break;
        case MySQLParser.CURRENT_USER:
            this.state = 1248;
            this.match(MySQLParser.CURRENT_USER);
            this.state = 1251;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LR_BRACKET) {
                this.state = 1249;
                this.match(MySQLParser.LR_BRACKET);
                this.state = 1250;
                this.match(MySQLParser.RR_BRACKET);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ScheduleExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_scheduleExpression;
    return this;
}

ScheduleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScheduleExpressionContext.prototype.constructor = ScheduleExpressionContext;


 
ScheduleExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PreciseScheduleContext(parser, ctx) {
	ScheduleExpressionContext.call(this, parser);
    ScheduleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreciseScheduleContext.prototype = Object.create(ScheduleExpressionContext.prototype);
PreciseScheduleContext.prototype.constructor = PreciseScheduleContext;

MySQLParser.PreciseScheduleContext = PreciseScheduleContext;

PreciseScheduleContext.prototype.AT = function() {
    return this.getToken(MySQLParser.AT, 0);
};

PreciseScheduleContext.prototype.timestampValue = function() {
    return this.getTypedRuleContext(TimestampValueContext,0);
};

PreciseScheduleContext.prototype.intervalExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntervalExprContext);
    } else {
        return this.getTypedRuleContext(IntervalExprContext,i);
    }
};
PreciseScheduleContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPreciseSchedule(this);
	}
};

PreciseScheduleContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPreciseSchedule(this);
	}
};

PreciseScheduleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPreciseSchedule(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IntervalScheduleContext(parser, ctx) {
	ScheduleExpressionContext.call(this, parser);
    this.startTimestamp = null; // TimestampValueContext;
    this._intervalExpr = null; // IntervalExprContext;
    this.startIntervals = []; // of IntervalExprContexts;
    this.endTimestamp = null; // TimestampValueContext;
    this.endIntervals = []; // of IntervalExprContexts;
    ScheduleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntervalScheduleContext.prototype = Object.create(ScheduleExpressionContext.prototype);
IntervalScheduleContext.prototype.constructor = IntervalScheduleContext;

MySQLParser.IntervalScheduleContext = IntervalScheduleContext;

IntervalScheduleContext.prototype.EVERY = function() {
    return this.getToken(MySQLParser.EVERY, 0);
};

IntervalScheduleContext.prototype.intervalType = function() {
    return this.getTypedRuleContext(IntervalTypeContext,0);
};

IntervalScheduleContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

IntervalScheduleContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IntervalScheduleContext.prototype.STARTS = function() {
    return this.getToken(MySQLParser.STARTS, 0);
};

IntervalScheduleContext.prototype.ENDS = function() {
    return this.getToken(MySQLParser.ENDS, 0);
};

IntervalScheduleContext.prototype.timestampValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TimestampValueContext);
    } else {
        return this.getTypedRuleContext(TimestampValueContext,i);
    }
};

IntervalScheduleContext.prototype.intervalExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntervalExprContext);
    } else {
        return this.getTypedRuleContext(IntervalExprContext,i);
    }
};
IntervalScheduleContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIntervalSchedule(this);
	}
};

IntervalScheduleContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIntervalSchedule(this);
	}
};

IntervalScheduleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIntervalSchedule(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.ScheduleExpressionContext = ScheduleExpressionContext;

MySQLParser.prototype.scheduleExpression = function() {

    var localctx = new ScheduleExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, MySQLParser.RULE_scheduleExpression);
    var _la = 0; // Token type
    try {
        this.state = 1289;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.AT:
            localctx = new PreciseScheduleContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1255;
            this.match(MySQLParser.AT);
            this.state = 1256;
            this.timestampValue();
            this.state = 1260;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.PLUS) {
                this.state = 1257;
                this.intervalExpr();
                this.state = 1262;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case MySQLParser.EVERY:
            localctx = new IntervalScheduleContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1263;
            this.match(MySQLParser.EVERY);
            this.state = 1266;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1264;
                this.decimalLiteral();
                break;

            case 2:
                this.state = 1265;
                this.expression(0);
                break;

            }
            this.state = 1268;
            this.intervalType();
            this.state = 1277;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.STARTS) {
                this.state = 1269;
                this.match(MySQLParser.STARTS);
                this.state = 1270;
                localctx.startTimestamp = this.timestampValue();
                this.state = 1274;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===MySQLParser.PLUS) {
                    this.state = 1271;
                    localctx._intervalExpr = this.intervalExpr();
                    localctx.startIntervals.push(localctx._intervalExpr);
                    this.state = 1276;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1287;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ENDS) {
                this.state = 1279;
                this.match(MySQLParser.ENDS);
                this.state = 1280;
                localctx.endTimestamp = this.timestampValue();
                this.state = 1284;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===MySQLParser.PLUS) {
                    this.state = 1281;
                    localctx._intervalExpr = this.intervalExpr();
                    localctx.endIntervals.push(localctx._intervalExpr);
                    this.state = 1286;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TimestampValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_timestampValue;
    return this;
}

TimestampValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimestampValueContext.prototype.constructor = TimestampValueContext;

TimestampValueContext.prototype.CURRENT_TIMESTAMP = function() {
    return this.getToken(MySQLParser.CURRENT_TIMESTAMP, 0);
};

TimestampValueContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

TimestampValueContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

TimestampValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TimestampValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTimestampValue(this);
	}
};

TimestampValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTimestampValue(this);
	}
};

TimestampValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTimestampValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TimestampValueContext = TimestampValueContext;

MySQLParser.prototype.timestampValue = function() {

    var localctx = new TimestampValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, MySQLParser.RULE_timestampValue);
    try {
        this.state = 1295;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1291;
            this.match(MySQLParser.CURRENT_TIMESTAMP);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1292;
            this.stringLiteral();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1293;
            this.decimalLiteral();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1294;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntervalExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_intervalExpr;
    return this;
}

IntervalExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalExprContext.prototype.constructor = IntervalExprContext;

IntervalExprContext.prototype.PLUS = function() {
    return this.getToken(MySQLParser.PLUS, 0);
};

IntervalExprContext.prototype.INTERVAL = function() {
    return this.getToken(MySQLParser.INTERVAL, 0);
};

IntervalExprContext.prototype.intervalType = function() {
    return this.getTypedRuleContext(IntervalTypeContext,0);
};

IntervalExprContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

IntervalExprContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IntervalExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIntervalExpr(this);
	}
};

IntervalExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIntervalExpr(this);
	}
};

IntervalExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIntervalExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IntervalExprContext = IntervalExprContext;

MySQLParser.prototype.intervalExpr = function() {

    var localctx = new IntervalExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, MySQLParser.RULE_intervalExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1297;
        this.match(MySQLParser.PLUS);
        this.state = 1298;
        this.match(MySQLParser.INTERVAL);
        this.state = 1301;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1299;
            this.decimalLiteral();
            break;

        case 2:
            this.state = 1300;
            this.expression(0);
            break;

        }
        this.state = 1303;
        this.intervalType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntervalTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_intervalType;
    return this;
}

IntervalTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalTypeContext.prototype.constructor = IntervalTypeContext;

IntervalTypeContext.prototype.intervalTypeBase = function() {
    return this.getTypedRuleContext(IntervalTypeBaseContext,0);
};

IntervalTypeContext.prototype.YEAR = function() {
    return this.getToken(MySQLParser.YEAR, 0);
};

IntervalTypeContext.prototype.YEAR_MONTH = function() {
    return this.getToken(MySQLParser.YEAR_MONTH, 0);
};

IntervalTypeContext.prototype.DAY_HOUR = function() {
    return this.getToken(MySQLParser.DAY_HOUR, 0);
};

IntervalTypeContext.prototype.DAY_MINUTE = function() {
    return this.getToken(MySQLParser.DAY_MINUTE, 0);
};

IntervalTypeContext.prototype.DAY_SECOND = function() {
    return this.getToken(MySQLParser.DAY_SECOND, 0);
};

IntervalTypeContext.prototype.HOUR_MINUTE = function() {
    return this.getToken(MySQLParser.HOUR_MINUTE, 0);
};

IntervalTypeContext.prototype.HOUR_SECOND = function() {
    return this.getToken(MySQLParser.HOUR_SECOND, 0);
};

IntervalTypeContext.prototype.MINUTE_SECOND = function() {
    return this.getToken(MySQLParser.MINUTE_SECOND, 0);
};

IntervalTypeContext.prototype.SECOND_MICROSECOND = function() {
    return this.getToken(MySQLParser.SECOND_MICROSECOND, 0);
};

IntervalTypeContext.prototype.MINUTE_MICROSECOND = function() {
    return this.getToken(MySQLParser.MINUTE_MICROSECOND, 0);
};

IntervalTypeContext.prototype.HOUR_MICROSECOND = function() {
    return this.getToken(MySQLParser.HOUR_MICROSECOND, 0);
};

IntervalTypeContext.prototype.DAY_MICROSECOND = function() {
    return this.getToken(MySQLParser.DAY_MICROSECOND, 0);
};

IntervalTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIntervalType(this);
	}
};

IntervalTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIntervalType(this);
	}
};

IntervalTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIntervalType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IntervalTypeContext = IntervalTypeContext;

MySQLParser.prototype.intervalType = function() {

    var localctx = new IntervalTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, MySQLParser.RULE_intervalType);
    try {
        this.state = 1318;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.QUARTER:
        case MySQLParser.MONTH:
        case MySQLParser.DAY:
        case MySQLParser.HOUR:
        case MySQLParser.MINUTE:
        case MySQLParser.WEEK:
        case MySQLParser.SECOND:
        case MySQLParser.MICROSECOND:
            this.enterOuterAlt(localctx, 1);
            this.state = 1305;
            this.intervalTypeBase();
            break;
        case MySQLParser.YEAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 1306;
            this.match(MySQLParser.YEAR);
            break;
        case MySQLParser.YEAR_MONTH:
            this.enterOuterAlt(localctx, 3);
            this.state = 1307;
            this.match(MySQLParser.YEAR_MONTH);
            break;
        case MySQLParser.DAY_HOUR:
            this.enterOuterAlt(localctx, 4);
            this.state = 1308;
            this.match(MySQLParser.DAY_HOUR);
            break;
        case MySQLParser.DAY_MINUTE:
            this.enterOuterAlt(localctx, 5);
            this.state = 1309;
            this.match(MySQLParser.DAY_MINUTE);
            break;
        case MySQLParser.DAY_SECOND:
            this.enterOuterAlt(localctx, 6);
            this.state = 1310;
            this.match(MySQLParser.DAY_SECOND);
            break;
        case MySQLParser.HOUR_MINUTE:
            this.enterOuterAlt(localctx, 7);
            this.state = 1311;
            this.match(MySQLParser.HOUR_MINUTE);
            break;
        case MySQLParser.HOUR_SECOND:
            this.enterOuterAlt(localctx, 8);
            this.state = 1312;
            this.match(MySQLParser.HOUR_SECOND);
            break;
        case MySQLParser.MINUTE_SECOND:
            this.enterOuterAlt(localctx, 9);
            this.state = 1313;
            this.match(MySQLParser.MINUTE_SECOND);
            break;
        case MySQLParser.SECOND_MICROSECOND:
            this.enterOuterAlt(localctx, 10);
            this.state = 1314;
            this.match(MySQLParser.SECOND_MICROSECOND);
            break;
        case MySQLParser.MINUTE_MICROSECOND:
            this.enterOuterAlt(localctx, 11);
            this.state = 1315;
            this.match(MySQLParser.MINUTE_MICROSECOND);
            break;
        case MySQLParser.HOUR_MICROSECOND:
            this.enterOuterAlt(localctx, 12);
            this.state = 1316;
            this.match(MySQLParser.HOUR_MICROSECOND);
            break;
        case MySQLParser.DAY_MICROSECOND:
            this.enterOuterAlt(localctx, 13);
            this.state = 1317;
            this.match(MySQLParser.DAY_MICROSECOND);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnableTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_enableType;
    return this;
}

EnableTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnableTypeContext.prototype.constructor = EnableTypeContext;

EnableTypeContext.prototype.ENABLE = function() {
    return this.getToken(MySQLParser.ENABLE, 0);
};

EnableTypeContext.prototype.DISABLE = function() {
    return this.getToken(MySQLParser.DISABLE, 0);
};

EnableTypeContext.prototype.ON = function() {
    return this.getToken(MySQLParser.ON, 0);
};

EnableTypeContext.prototype.SLAVE = function() {
    return this.getToken(MySQLParser.SLAVE, 0);
};

EnableTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterEnableType(this);
	}
};

EnableTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitEnableType(this);
	}
};

EnableTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitEnableType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.EnableTypeContext = EnableTypeContext;

MySQLParser.prototype.enableType = function() {

    var localctx = new EnableTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, MySQLParser.RULE_enableType);
    try {
        this.state = 1325;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1320;
            this.match(MySQLParser.ENABLE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1321;
            this.match(MySQLParser.DISABLE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1322;
            this.match(MySQLParser.DISABLE);
            this.state = 1323;
            this.match(MySQLParser.ON);
            this.state = 1324;
            this.match(MySQLParser.SLAVE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexType;
    return this;
}

IndexTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexTypeContext.prototype.constructor = IndexTypeContext;

IndexTypeContext.prototype.USING = function() {
    return this.getToken(MySQLParser.USING, 0);
};

IndexTypeContext.prototype.BTREE = function() {
    return this.getToken(MySQLParser.BTREE, 0);
};

IndexTypeContext.prototype.HASH = function() {
    return this.getToken(MySQLParser.HASH, 0);
};

IndexTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexType(this);
	}
};

IndexTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexType(this);
	}
};

IndexTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexTypeContext = IndexTypeContext;

MySQLParser.prototype.indexType = function() {

    var localctx = new IndexTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, MySQLParser.RULE_indexType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1327;
        this.match(MySQLParser.USING);
        this.state = 1328;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.BTREE || _la===MySQLParser.HASH)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexOption;
    return this;
}

IndexOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexOptionContext.prototype.constructor = IndexOptionContext;

IndexOptionContext.prototype.KEY_BLOCK_SIZE = function() {
    return this.getToken(MySQLParser.KEY_BLOCK_SIZE, 0);
};

IndexOptionContext.prototype.fileSizeLiteral = function() {
    return this.getTypedRuleContext(FileSizeLiteralContext,0);
};

IndexOptionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

IndexOptionContext.prototype.indexType = function() {
    return this.getTypedRuleContext(IndexTypeContext,0);
};

IndexOptionContext.prototype.WITH = function() {
    return this.getToken(MySQLParser.WITH, 0);
};

IndexOptionContext.prototype.PARSER = function() {
    return this.getToken(MySQLParser.PARSER, 0);
};

IndexOptionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

IndexOptionContext.prototype.COMMENT = function() {
    return this.getToken(MySQLParser.COMMENT, 0);
};

IndexOptionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

IndexOptionContext.prototype.INVISIBLE = function() {
    return this.getToken(MySQLParser.INVISIBLE, 0);
};

IndexOptionContext.prototype.VISIBLE = function() {
    return this.getToken(MySQLParser.VISIBLE, 0);
};

IndexOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexOption(this);
	}
};

IndexOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexOption(this);
	}
};

IndexOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexOptionContext = IndexOptionContext;

MySQLParser.prototype.indexOption = function() {

    var localctx = new IndexOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, MySQLParser.RULE_indexOption);
    var _la = 0; // Token type
    try {
        this.state = 1343;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.KEY_BLOCK_SIZE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1330;
            this.match(MySQLParser.KEY_BLOCK_SIZE);
            this.state = 1332;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1331;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1334;
            this.fileSizeLiteral();
            break;
        case MySQLParser.USING:
            this.enterOuterAlt(localctx, 2);
            this.state = 1335;
            this.indexType();
            break;
        case MySQLParser.WITH:
            this.enterOuterAlt(localctx, 3);
            this.state = 1336;
            this.match(MySQLParser.WITH);
            this.state = 1337;
            this.match(MySQLParser.PARSER);
            this.state = 1338;
            this.uid();
            break;
        case MySQLParser.COMMENT:
            this.enterOuterAlt(localctx, 4);
            this.state = 1339;
            this.match(MySQLParser.COMMENT);
            this.state = 1340;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.INVISIBLE:
            this.enterOuterAlt(localctx, 5);
            this.state = 1341;
            this.match(MySQLParser.INVISIBLE);
            break;
        case MySQLParser.VISIBLE:
            this.enterOuterAlt(localctx, 6);
            this.state = 1342;
            this.match(MySQLParser.VISIBLE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProcedureParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_procedureParameter;
    this.direction = null; // Token
    return this;
}

ProcedureParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureParameterContext.prototype.constructor = ProcedureParameterContext;

ProcedureParameterContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

ProcedureParameterContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

ProcedureParameterContext.prototype.IN = function() {
    return this.getToken(MySQLParser.IN, 0);
};

ProcedureParameterContext.prototype.OUT = function() {
    return this.getToken(MySQLParser.OUT, 0);
};

ProcedureParameterContext.prototype.INOUT = function() {
    return this.getToken(MySQLParser.INOUT, 0);
};

ProcedureParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterProcedureParameter(this);
	}
};

ProcedureParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitProcedureParameter(this);
	}
};

ProcedureParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitProcedureParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ProcedureParameterContext = ProcedureParameterContext;

MySQLParser.prototype.procedureParameter = function() {

    var localctx = new ProcedureParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, MySQLParser.RULE_procedureParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1346;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IN || _la===MySQLParser.INOUT || _la===MySQLParser.OUT) {
            this.state = 1345;
            localctx.direction = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.IN || _la===MySQLParser.INOUT || _la===MySQLParser.OUT)) {
                localctx.direction = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1348;
        this.uid();
        this.state = 1349;
        this.dataType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_functionParameter;
    return this;
}

FunctionParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionParameterContext.prototype.constructor = FunctionParameterContext;

FunctionParameterContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

FunctionParameterContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

FunctionParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFunctionParameter(this);
	}
};

FunctionParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFunctionParameter(this);
	}
};

FunctionParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFunctionParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FunctionParameterContext = FunctionParameterContext;

MySQLParser.prototype.functionParameter = function() {

    var localctx = new FunctionParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, MySQLParser.RULE_functionParameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1351;
        this.uid();
        this.state = 1352;
        this.dataType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoutineOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_routineOption;
    return this;
}

RoutineOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoutineOptionContext.prototype.constructor = RoutineOptionContext;


 
RoutineOptionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function RoutineBehaviorContext(parser, ctx) {
	RoutineOptionContext.call(this, parser);
    RoutineOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RoutineBehaviorContext.prototype = Object.create(RoutineOptionContext.prototype);
RoutineBehaviorContext.prototype.constructor = RoutineBehaviorContext;

MySQLParser.RoutineBehaviorContext = RoutineBehaviorContext;

RoutineBehaviorContext.prototype.DETERMINISTIC = function() {
    return this.getToken(MySQLParser.DETERMINISTIC, 0);
};

RoutineBehaviorContext.prototype.NOT = function() {
    return this.getToken(MySQLParser.NOT, 0);
};
RoutineBehaviorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoutineBehavior(this);
	}
};

RoutineBehaviorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoutineBehavior(this);
	}
};

RoutineBehaviorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoutineBehavior(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RoutineLanguageContext(parser, ctx) {
	RoutineOptionContext.call(this, parser);
    RoutineOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RoutineLanguageContext.prototype = Object.create(RoutineOptionContext.prototype);
RoutineLanguageContext.prototype.constructor = RoutineLanguageContext;

MySQLParser.RoutineLanguageContext = RoutineLanguageContext;

RoutineLanguageContext.prototype.LANGUAGE = function() {
    return this.getToken(MySQLParser.LANGUAGE, 0);
};

RoutineLanguageContext.prototype.SQL = function() {
    return this.getToken(MySQLParser.SQL, 0);
};
RoutineLanguageContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoutineLanguage(this);
	}
};

RoutineLanguageContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoutineLanguage(this);
	}
};

RoutineLanguageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoutineLanguage(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RoutineCommentContext(parser, ctx) {
	RoutineOptionContext.call(this, parser);
    RoutineOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RoutineCommentContext.prototype = Object.create(RoutineOptionContext.prototype);
RoutineCommentContext.prototype.constructor = RoutineCommentContext;

MySQLParser.RoutineCommentContext = RoutineCommentContext;

RoutineCommentContext.prototype.COMMENT = function() {
    return this.getToken(MySQLParser.COMMENT, 0);
};

RoutineCommentContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};
RoutineCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoutineComment(this);
	}
};

RoutineCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoutineComment(this);
	}
};

RoutineCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoutineComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RoutineSecurityContext(parser, ctx) {
	RoutineOptionContext.call(this, parser);
    this.context = null; // Token;
    RoutineOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RoutineSecurityContext.prototype = Object.create(RoutineOptionContext.prototype);
RoutineSecurityContext.prototype.constructor = RoutineSecurityContext;

MySQLParser.RoutineSecurityContext = RoutineSecurityContext;

RoutineSecurityContext.prototype.SQL = function() {
    return this.getToken(MySQLParser.SQL, 0);
};

RoutineSecurityContext.prototype.SECURITY = function() {
    return this.getToken(MySQLParser.SECURITY, 0);
};

RoutineSecurityContext.prototype.DEFINER = function() {
    return this.getToken(MySQLParser.DEFINER, 0);
};

RoutineSecurityContext.prototype.INVOKER = function() {
    return this.getToken(MySQLParser.INVOKER, 0);
};
RoutineSecurityContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoutineSecurity(this);
	}
};

RoutineSecurityContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoutineSecurity(this);
	}
};

RoutineSecurityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoutineSecurity(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RoutineDataContext(parser, ctx) {
	RoutineOptionContext.call(this, parser);
    RoutineOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RoutineDataContext.prototype = Object.create(RoutineOptionContext.prototype);
RoutineDataContext.prototype.constructor = RoutineDataContext;

MySQLParser.RoutineDataContext = RoutineDataContext;

RoutineDataContext.prototype.CONTAINS = function() {
    return this.getToken(MySQLParser.CONTAINS, 0);
};

RoutineDataContext.prototype.SQL = function() {
    return this.getToken(MySQLParser.SQL, 0);
};

RoutineDataContext.prototype.NO = function() {
    return this.getToken(MySQLParser.NO, 0);
};

RoutineDataContext.prototype.READS = function() {
    return this.getToken(MySQLParser.READS, 0);
};

RoutineDataContext.prototype.DATA = function() {
    return this.getToken(MySQLParser.DATA, 0);
};

RoutineDataContext.prototype.MODIFIES = function() {
    return this.getToken(MySQLParser.MODIFIES, 0);
};
RoutineDataContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoutineData(this);
	}
};

RoutineDataContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoutineData(this);
	}
};

RoutineDataContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoutineData(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.RoutineOptionContext = RoutineOptionContext;

MySQLParser.prototype.routineOption = function() {

    var localctx = new RoutineOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, MySQLParser.RULE_routineOption);
    var _la = 0; // Token type
    try {
        this.state = 1377;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.COMMENT:
            localctx = new RoutineCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1354;
            this.match(MySQLParser.COMMENT);
            this.state = 1355;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.LANGUAGE:
            localctx = new RoutineLanguageContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1356;
            this.match(MySQLParser.LANGUAGE);
            this.state = 1357;
            this.match(MySQLParser.SQL);
            break;
        case MySQLParser.DETERMINISTIC:
        case MySQLParser.NOT:
            localctx = new RoutineBehaviorContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1359;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NOT) {
                this.state = 1358;
                this.match(MySQLParser.NOT);
            }

            this.state = 1361;
            this.match(MySQLParser.DETERMINISTIC);
            break;
        case MySQLParser.MODIFIES:
        case MySQLParser.READS:
        case MySQLParser.CONTAINS:
        case MySQLParser.NO:
            localctx = new RoutineDataContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1372;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.CONTAINS:
                this.state = 1362;
                this.match(MySQLParser.CONTAINS);
                this.state = 1363;
                this.match(MySQLParser.SQL);
                break;
            case MySQLParser.NO:
                this.state = 1364;
                this.match(MySQLParser.NO);
                this.state = 1365;
                this.match(MySQLParser.SQL);
                break;
            case MySQLParser.READS:
                this.state = 1366;
                this.match(MySQLParser.READS);
                this.state = 1367;
                this.match(MySQLParser.SQL);
                this.state = 1368;
                this.match(MySQLParser.DATA);
                break;
            case MySQLParser.MODIFIES:
                this.state = 1369;
                this.match(MySQLParser.MODIFIES);
                this.state = 1370;
                this.match(MySQLParser.SQL);
                this.state = 1371;
                this.match(MySQLParser.DATA);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case MySQLParser.SQL:
            localctx = new RoutineSecurityContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1374;
            this.match(MySQLParser.SQL);
            this.state = 1375;
            this.match(MySQLParser.SECURITY);
            this.state = 1376;
            localctx.context = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DEFINER || _la===MySQLParser.INVOKER)) {
                localctx.context = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ServerOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_serverOption;
    return this;
}

ServerOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ServerOptionContext.prototype.constructor = ServerOptionContext;

ServerOptionContext.prototype.HOST = function() {
    return this.getToken(MySQLParser.HOST, 0);
};

ServerOptionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

ServerOptionContext.prototype.DATABASE = function() {
    return this.getToken(MySQLParser.DATABASE, 0);
};

ServerOptionContext.prototype.USER = function() {
    return this.getToken(MySQLParser.USER, 0);
};

ServerOptionContext.prototype.PASSWORD = function() {
    return this.getToken(MySQLParser.PASSWORD, 0);
};

ServerOptionContext.prototype.SOCKET = function() {
    return this.getToken(MySQLParser.SOCKET, 0);
};

ServerOptionContext.prototype.OWNER = function() {
    return this.getToken(MySQLParser.OWNER, 0);
};

ServerOptionContext.prototype.PORT = function() {
    return this.getToken(MySQLParser.PORT, 0);
};

ServerOptionContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

ServerOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterServerOption(this);
	}
};

ServerOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitServerOption(this);
	}
};

ServerOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitServerOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ServerOptionContext = ServerOptionContext;

MySQLParser.prototype.serverOption = function() {

    var localctx = new ServerOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, MySQLParser.RULE_serverOption);
    try {
        this.state = 1393;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.HOST:
            this.enterOuterAlt(localctx, 1);
            this.state = 1379;
            this.match(MySQLParser.HOST);
            this.state = 1380;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.DATABASE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1381;
            this.match(MySQLParser.DATABASE);
            this.state = 1382;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.USER:
            this.enterOuterAlt(localctx, 3);
            this.state = 1383;
            this.match(MySQLParser.USER);
            this.state = 1384;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.PASSWORD:
            this.enterOuterAlt(localctx, 4);
            this.state = 1385;
            this.match(MySQLParser.PASSWORD);
            this.state = 1386;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.SOCKET:
            this.enterOuterAlt(localctx, 5);
            this.state = 1387;
            this.match(MySQLParser.SOCKET);
            this.state = 1388;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.OWNER:
            this.enterOuterAlt(localctx, 6);
            this.state = 1389;
            this.match(MySQLParser.OWNER);
            this.state = 1390;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.PORT:
            this.enterOuterAlt(localctx, 7);
            this.state = 1391;
            this.match(MySQLParser.PORT);
            this.state = 1392;
            this.decimalLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateDefinitionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createDefinitions;
    return this;
}

CreateDefinitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateDefinitionsContext.prototype.constructor = CreateDefinitionsContext;

CreateDefinitionsContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

CreateDefinitionsContext.prototype.createDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CreateDefinitionContext);
    } else {
        return this.getTypedRuleContext(CreateDefinitionContext,i);
    }
};

CreateDefinitionsContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

CreateDefinitionsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


CreateDefinitionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateDefinitions(this);
	}
};

CreateDefinitionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateDefinitions(this);
	}
};

CreateDefinitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateDefinitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateDefinitionsContext = CreateDefinitionsContext;

MySQLParser.prototype.createDefinitions = function() {

    var localctx = new CreateDefinitionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, MySQLParser.RULE_createDefinitions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1395;
        this.match(MySQLParser.LR_BRACKET);
        this.state = 1396;
        this.createDefinition();
        this.state = 1401;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 1397;
            this.match(MySQLParser.COMMA);
            this.state = 1398;
            this.createDefinition();
            this.state = 1403;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1404;
        this.match(MySQLParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createDefinition;
    return this;
}

CreateDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateDefinitionContext.prototype.constructor = CreateDefinitionContext;


 
CreateDefinitionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ColumnDeclarationContext(parser, ctx) {
	CreateDefinitionContext.call(this, parser);
    CreateDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnDeclarationContext.prototype = Object.create(CreateDefinitionContext.prototype);
ColumnDeclarationContext.prototype.constructor = ColumnDeclarationContext;

MySQLParser.ColumnDeclarationContext = ColumnDeclarationContext;

ColumnDeclarationContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

ColumnDeclarationContext.prototype.columnDefinition = function() {
    return this.getTypedRuleContext(ColumnDefinitionContext,0);
};
ColumnDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterColumnDeclaration(this);
	}
};

ColumnDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitColumnDeclaration(this);
	}
};

ColumnDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitColumnDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConstraintDeclarationContext(parser, ctx) {
	CreateDefinitionContext.call(this, parser);
    CreateDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstraintDeclarationContext.prototype = Object.create(CreateDefinitionContext.prototype);
ConstraintDeclarationContext.prototype.constructor = ConstraintDeclarationContext;

MySQLParser.ConstraintDeclarationContext = ConstraintDeclarationContext;

ConstraintDeclarationContext.prototype.tableConstraint = function() {
    return this.getTypedRuleContext(TableConstraintContext,0);
};
ConstraintDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterConstraintDeclaration(this);
	}
};

ConstraintDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitConstraintDeclaration(this);
	}
};

ConstraintDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitConstraintDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IndexDeclarationContext(parser, ctx) {
	CreateDefinitionContext.call(this, parser);
    CreateDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IndexDeclarationContext.prototype = Object.create(CreateDefinitionContext.prototype);
IndexDeclarationContext.prototype.constructor = IndexDeclarationContext;

MySQLParser.IndexDeclarationContext = IndexDeclarationContext;

IndexDeclarationContext.prototype.indexColumnDefinition = function() {
    return this.getTypedRuleContext(IndexColumnDefinitionContext,0);
};
IndexDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexDeclaration(this);
	}
};

IndexDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexDeclaration(this);
	}
};

IndexDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.CreateDefinitionContext = CreateDefinitionContext;

MySQLParser.prototype.createDefinition = function() {

    var localctx = new CreateDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, MySQLParser.RULE_createDefinition);
    try {
        this.state = 1411;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CURRENT:
        case MySQLParser.DATABASE:
        case MySQLParser.DIAGNOSTICS:
        case MySQLParser.LEFT:
        case MySQLParser.NUMBER:
        case MySQLParser.RIGHT:
        case MySQLParser.STACKED:
        case MySQLParser.DATE:
        case MySQLParser.TIME:
        case MySQLParser.TIMESTAMP:
        case MySQLParser.DATETIME:
        case MySQLParser.YEAR:
        case MySQLParser.TEXT:
        case MySQLParser.ENUM:
        case MySQLParser.SERIAL:
        case MySQLParser.JSON_VALID:
        case MySQLParser.JSON_SCHEMA_VALID:
        case MySQLParser.COUNT:
        case MySQLParser.POSITION:
        case MySQLParser.ACCOUNT:
        case MySQLParser.ACTION:
        case MySQLParser.AFTER:
        case MySQLParser.AGGREGATE:
        case MySQLParser.ALGORITHM:
        case MySQLParser.ANY:
        case MySQLParser.AT:
        case MySQLParser.AUTHORS:
        case MySQLParser.AUTOCOMMIT:
        case MySQLParser.AUTOEXTEND_SIZE:
        case MySQLParser.AUTO_INCREMENT:
        case MySQLParser.AVG_ROW_LENGTH:
        case MySQLParser.BEGIN:
        case MySQLParser.BINLOG:
        case MySQLParser.BIT:
        case MySQLParser.BLOCK:
        case MySQLParser.BOOL:
        case MySQLParser.BOOLEAN:
        case MySQLParser.BTREE:
        case MySQLParser.CACHE:
        case MySQLParser.CASCADED:
        case MySQLParser.CHAIN:
        case MySQLParser.CHANGED:
        case MySQLParser.CHANNEL:
        case MySQLParser.CHECKSUM:
        case MySQLParser.PAGE_CHECKSUM:
        case MySQLParser.CIPHER:
        case MySQLParser.CLASS_ORIGIN:
        case MySQLParser.CLIENT:
        case MySQLParser.CLOSE:
        case MySQLParser.COALESCE:
        case MySQLParser.CODE:
        case MySQLParser.COLUMNS:
        case MySQLParser.COLUMN_FORMAT:
        case MySQLParser.COLUMN_NAME:
        case MySQLParser.COMMENT:
        case MySQLParser.COMMIT:
        case MySQLParser.COMPACT:
        case MySQLParser.COMPLETION:
        case MySQLParser.COMPRESSED:
        case MySQLParser.COMPRESSION:
        case MySQLParser.CONCURRENT:
        case MySQLParser.CONNECTION:
        case MySQLParser.CONSISTENT:
        case MySQLParser.CONSTRAINT_CATALOG:
        case MySQLParser.CONSTRAINT_SCHEMA:
        case MySQLParser.CONSTRAINT_NAME:
        case MySQLParser.CONTAINS:
        case MySQLParser.CONTEXT:
        case MySQLParser.CONTRIBUTORS:
        case MySQLParser.COPY:
        case MySQLParser.CPU:
        case MySQLParser.CURSOR_NAME:
        case MySQLParser.DATA:
        case MySQLParser.DATAFILE:
        case MySQLParser.DEALLOCATE:
        case MySQLParser.DEFAULT_AUTH:
        case MySQLParser.DEFINER:
        case MySQLParser.DELAY_KEY_WRITE:
        case MySQLParser.DES_KEY_FILE:
        case MySQLParser.DIRECTORY:
        case MySQLParser.DISABLE:
        case MySQLParser.DISCARD:
        case MySQLParser.DISK:
        case MySQLParser.DO:
        case MySQLParser.DUMPFILE:
        case MySQLParser.DUPLICATE:
        case MySQLParser.DYNAMIC:
        case MySQLParser.ENABLE:
        case MySQLParser.ENCRYPTION:
        case MySQLParser.END:
        case MySQLParser.ENDS:
        case MySQLParser.ENGINE:
        case MySQLParser.ENGINES:
        case MySQLParser.ERROR:
        case MySQLParser.ERRORS:
        case MySQLParser.ESCAPE:
        case MySQLParser.EVEN:
        case MySQLParser.EVENT:
        case MySQLParser.EVENTS:
        case MySQLParser.EVERY:
        case MySQLParser.EXCHANGE:
        case MySQLParser.EXCLUSIVE:
        case MySQLParser.EXPIRE:
        case MySQLParser.EXPORT:
        case MySQLParser.EXTENDED:
        case MySQLParser.EXTENT_SIZE:
        case MySQLParser.FAST:
        case MySQLParser.FAULTS:
        case MySQLParser.FIELDS:
        case MySQLParser.FILE_BLOCK_SIZE:
        case MySQLParser.FILTER:
        case MySQLParser.FIRST:
        case MySQLParser.FIXED:
        case MySQLParser.FLUSH:
        case MySQLParser.FOLLOWS:
        case MySQLParser.FOUND:
        case MySQLParser.FULL:
        case MySQLParser.FUNCTION:
        case MySQLParser.GENERAL:
        case MySQLParser.GLOBAL:
        case MySQLParser.GRANTS:
        case MySQLParser.GROUP_REPLICATION:
        case MySQLParser.HANDLER:
        case MySQLParser.HASH:
        case MySQLParser.HELP:
        case MySQLParser.HOST:
        case MySQLParser.HOSTS:
        case MySQLParser.IDENTIFIED:
        case MySQLParser.IGNORE_SERVER_IDS:
        case MySQLParser.IMPORT:
        case MySQLParser.INDEXES:
        case MySQLParser.INITIAL_SIZE:
        case MySQLParser.INPLACE:
        case MySQLParser.INSERT_METHOD:
        case MySQLParser.INSTALL:
        case MySQLParser.INSTANCE:
        case MySQLParser.INVISIBLE:
        case MySQLParser.INVOKER:
        case MySQLParser.IO:
        case MySQLParser.IO_THREAD:
        case MySQLParser.IPC:
        case MySQLParser.ISOLATION:
        case MySQLParser.ISSUER:
        case MySQLParser.JSON:
        case MySQLParser.KEY_BLOCK_SIZE:
        case MySQLParser.LANGUAGE:
        case MySQLParser.LAST:
        case MySQLParser.LEAVES:
        case MySQLParser.LESS:
        case MySQLParser.LEVEL:
        case MySQLParser.LIST:
        case MySQLParser.LOCAL:
        case MySQLParser.LOGFILE:
        case MySQLParser.LOGS:
        case MySQLParser.MASTER:
        case MySQLParser.MASTER_AUTO_POSITION:
        case MySQLParser.MASTER_CONNECT_RETRY:
        case MySQLParser.MASTER_DELAY:
        case MySQLParser.MASTER_HEARTBEAT_PERIOD:
        case MySQLParser.MASTER_HOST:
        case MySQLParser.MASTER_LOG_FILE:
        case MySQLParser.MASTER_LOG_POS:
        case MySQLParser.MASTER_PASSWORD:
        case MySQLParser.MASTER_PORT:
        case MySQLParser.MASTER_RETRY_COUNT:
        case MySQLParser.MASTER_SSL:
        case MySQLParser.MASTER_SSL_CA:
        case MySQLParser.MASTER_SSL_CAPATH:
        case MySQLParser.MASTER_SSL_CERT:
        case MySQLParser.MASTER_SSL_CIPHER:
        case MySQLParser.MASTER_SSL_CRL:
        case MySQLParser.MASTER_SSL_CRLPATH:
        case MySQLParser.MASTER_SSL_KEY:
        case MySQLParser.MASTER_TLS_VERSION:
        case MySQLParser.MASTER_USER:
        case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser.MAX_QUERIES_PER_HOUR:
        case MySQLParser.MAX_ROWS:
        case MySQLParser.MAX_SIZE:
        case MySQLParser.MAX_UPDATES_PER_HOUR:
        case MySQLParser.MAX_USER_CONNECTIONS:
        case MySQLParser.MEDIUM:
        case MySQLParser.MERGE:
        case MySQLParser.MESSAGE_TEXT:
        case MySQLParser.MID:
        case MySQLParser.MIGRATE:
        case MySQLParser.MIN_ROWS:
        case MySQLParser.MODE:
        case MySQLParser.MODIFY:
        case MySQLParser.MUTEX:
        case MySQLParser.MYSQL:
        case MySQLParser.MYSQL_ERRNO:
        case MySQLParser.NAME:
        case MySQLParser.NAMES:
        case MySQLParser.NCHAR:
        case MySQLParser.NEVER:
        case MySQLParser.NEXT:
        case MySQLParser.NO:
        case MySQLParser.NODEGROUP:
        case MySQLParser.NONE:
        case MySQLParser.OFFLINE:
        case MySQLParser.OFFSET:
        case MySQLParser.OJ:
        case MySQLParser.OLD_PASSWORD:
        case MySQLParser.ONE:
        case MySQLParser.ONLINE:
        case MySQLParser.ONLY:
        case MySQLParser.OPEN:
        case MySQLParser.OPTIMIZER_COSTS:
        case MySQLParser.OPTIONS:
        case MySQLParser.OWNER:
        case MySQLParser.PACK_KEYS:
        case MySQLParser.PAGE:
        case MySQLParser.PARSER:
        case MySQLParser.PARTIAL:
        case MySQLParser.PARTITIONING:
        case MySQLParser.PARTITIONS:
        case MySQLParser.PASSWORD:
        case MySQLParser.PHASE:
        case MySQLParser.PLUGIN:
        case MySQLParser.PLUGIN_DIR:
        case MySQLParser.PLUGINS:
        case MySQLParser.PORT:
        case MySQLParser.PRECEDES:
        case MySQLParser.PREPARE:
        case MySQLParser.PRESERVE:
        case MySQLParser.PREV:
        case MySQLParser.PROCESSLIST:
        case MySQLParser.PROFILE:
        case MySQLParser.PROFILES:
        case MySQLParser.PROXY:
        case MySQLParser.QUERY:
        case MySQLParser.QUICK:
        case MySQLParser.REBUILD:
        case MySQLParser.RECOVER:
        case MySQLParser.REDO_BUFFER_SIZE:
        case MySQLParser.REDUNDANT:
        case MySQLParser.RELAY:
        case MySQLParser.RELAY_LOG_FILE:
        case MySQLParser.RELAY_LOG_POS:
        case MySQLParser.RELAYLOG:
        case MySQLParser.REMOVE:
        case MySQLParser.REORGANIZE:
        case MySQLParser.REPAIR:
        case MySQLParser.REPLICATE_DO_DB:
        case MySQLParser.REPLICATE_DO_TABLE:
        case MySQLParser.REPLICATE_IGNORE_DB:
        case MySQLParser.REPLICATE_IGNORE_TABLE:
        case MySQLParser.REPLICATE_REWRITE_DB:
        case MySQLParser.REPLICATE_WILD_DO_TABLE:
        case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser.REPLICATION:
        case MySQLParser.RESET:
        case MySQLParser.RESUME:
        case MySQLParser.RETURNED_SQLSTATE:
        case MySQLParser.RETURNS:
        case MySQLParser.ROLE:
        case MySQLParser.ROLLBACK:
        case MySQLParser.ROLLUP:
        case MySQLParser.ROTATE:
        case MySQLParser.ROW:
        case MySQLParser.ROWS:
        case MySQLParser.ROW_FORMAT:
        case MySQLParser.SAVEPOINT:
        case MySQLParser.SCHEDULE:
        case MySQLParser.SECURITY:
        case MySQLParser.SERVER:
        case MySQLParser.SESSION:
        case MySQLParser.SHARE:
        case MySQLParser.SHARED:
        case MySQLParser.SIGNED:
        case MySQLParser.SIMPLE:
        case MySQLParser.SLAVE:
        case MySQLParser.SLOW:
        case MySQLParser.SNAPSHOT:
        case MySQLParser.SOCKET:
        case MySQLParser.SOME:
        case MySQLParser.SONAME:
        case MySQLParser.SOUNDS:
        case MySQLParser.SOURCE:
        case MySQLParser.SQL_AFTER_GTIDS:
        case MySQLParser.SQL_AFTER_MTS_GAPS:
        case MySQLParser.SQL_BEFORE_GTIDS:
        case MySQLParser.SQL_BUFFER_RESULT:
        case MySQLParser.SQL_CACHE:
        case MySQLParser.SQL_NO_CACHE:
        case MySQLParser.SQL_THREAD:
        case MySQLParser.START:
        case MySQLParser.STARTS:
        case MySQLParser.STATS_AUTO_RECALC:
        case MySQLParser.STATS_PERSISTENT:
        case MySQLParser.STATS_SAMPLE_PAGES:
        case MySQLParser.STATUS:
        case MySQLParser.STOP:
        case MySQLParser.STORAGE:
        case MySQLParser.STRING:
        case MySQLParser.SUBCLASS_ORIGIN:
        case MySQLParser.SUBJECT:
        case MySQLParser.SUBPARTITION:
        case MySQLParser.SUBPARTITIONS:
        case MySQLParser.SUSPEND:
        case MySQLParser.SWAPS:
        case MySQLParser.SWITCHES:
        case MySQLParser.TABLE_NAME:
        case MySQLParser.TABLESPACE:
        case MySQLParser.TEMPORARY:
        case MySQLParser.TEMPTABLE:
        case MySQLParser.THAN:
        case MySQLParser.TRADITIONAL:
        case MySQLParser.TRANSACTION:
        case MySQLParser.TRANSACTIONAL:
        case MySQLParser.TRIGGERS:
        case MySQLParser.TRUNCATE:
        case MySQLParser.UNDEFINED:
        case MySQLParser.UNDOFILE:
        case MySQLParser.UNDO_BUFFER_SIZE:
        case MySQLParser.UNINSTALL:
        case MySQLParser.UNKNOWN:
        case MySQLParser.UNTIL:
        case MySQLParser.UPGRADE:
        case MySQLParser.USER:
        case MySQLParser.USE_FRM:
        case MySQLParser.USER_RESOURCES:
        case MySQLParser.VALIDATION:
        case MySQLParser.VALUE:
        case MySQLParser.VARIABLES:
        case MySQLParser.VIEW:
        case MySQLParser.VISIBLE:
        case MySQLParser.WAIT:
        case MySQLParser.WARNINGS:
        case MySQLParser.WITHOUT:
        case MySQLParser.WORK:
        case MySQLParser.WRAPPER:
        case MySQLParser.X509:
        case MySQLParser.XA:
        case MySQLParser.XML:
        case MySQLParser.INTERNAL:
        case MySQLParser.QUARTER:
        case MySQLParser.MONTH:
        case MySQLParser.DAY:
        case MySQLParser.HOUR:
        case MySQLParser.MINUTE:
        case MySQLParser.WEEK:
        case MySQLParser.SECOND:
        case MySQLParser.MICROSECOND:
        case MySQLParser.TABLES:
        case MySQLParser.ROUTINE:
        case MySQLParser.EXECUTE:
        case MySQLParser.FILE:
        case MySQLParser.PROCESS:
        case MySQLParser.RELOAD:
        case MySQLParser.SHUTDOWN:
        case MySQLParser.SUPER:
        case MySQLParser.PRIVILEGES:
        case MySQLParser.AUDIT_ADMIN:
        case MySQLParser.BACKUP_ADMIN:
        case MySQLParser.BINLOG_ADMIN:
        case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
        case MySQLParser.CLONE_ADMIN:
        case MySQLParser.CONNECTION_ADMIN:
        case MySQLParser.ENCRYPTION_KEY_ADMIN:
        case MySQLParser.FIREWALL_ADMIN:
        case MySQLParser.FIREWALL_USER:
        case MySQLParser.GROUP_REPLICATION_ADMIN:
        case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
        case MySQLParser.NDB_STORED_USER:
        case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
        case MySQLParser.REPLICATION_APPLIER:
        case MySQLParser.REPLICATION_SLAVE_ADMIN:
        case MySQLParser.RESOURCE_GROUP_ADMIN:
        case MySQLParser.RESOURCE_GROUP_USER:
        case MySQLParser.ROLE_ADMIN:
        case MySQLParser.SESSION_VARIABLES_ADMIN:
        case MySQLParser.SET_USER_ID:
        case MySQLParser.SHOW_ROUTINE:
        case MySQLParser.SYSTEM_VARIABLES_ADMIN:
        case MySQLParser.TABLE_ENCRYPTION_ADMIN:
        case MySQLParser.VERSION_TOKEN_ADMIN:
        case MySQLParser.XA_RECOVER_ADMIN:
        case MySQLParser.ARMSCII8:
        case MySQLParser.ASCII:
        case MySQLParser.BIG5:
        case MySQLParser.CP1250:
        case MySQLParser.CP1251:
        case MySQLParser.CP1256:
        case MySQLParser.CP1257:
        case MySQLParser.CP850:
        case MySQLParser.CP852:
        case MySQLParser.CP866:
        case MySQLParser.CP932:
        case MySQLParser.DEC8:
        case MySQLParser.EUCJPMS:
        case MySQLParser.EUCKR:
        case MySQLParser.GB2312:
        case MySQLParser.GBK:
        case MySQLParser.GEOSTD8:
        case MySQLParser.GREEK:
        case MySQLParser.HEBREW:
        case MySQLParser.HP8:
        case MySQLParser.KEYBCS2:
        case MySQLParser.KOI8R:
        case MySQLParser.KOI8U:
        case MySQLParser.LATIN1:
        case MySQLParser.LATIN2:
        case MySQLParser.LATIN5:
        case MySQLParser.LATIN7:
        case MySQLParser.MACCE:
        case MySQLParser.MACROMAN:
        case MySQLParser.SJIS:
        case MySQLParser.SWE7:
        case MySQLParser.TIS620:
        case MySQLParser.UCS2:
        case MySQLParser.UJIS:
        case MySQLParser.UTF16:
        case MySQLParser.UTF16LE:
        case MySQLParser.UTF32:
        case MySQLParser.UTF8:
        case MySQLParser.UTF8MB3:
        case MySQLParser.UTF8MB4:
        case MySQLParser.ARCHIVE:
        case MySQLParser.BLACKHOLE:
        case MySQLParser.CSV:
        case MySQLParser.FEDERATED:
        case MySQLParser.INNODB:
        case MySQLParser.MEMORY:
        case MySQLParser.MRG_MYISAM:
        case MySQLParser.MYISAM:
        case MySQLParser.NDB:
        case MySQLParser.NDBCLUSTER:
        case MySQLParser.PERFORMANCE_SCHEMA:
        case MySQLParser.TOKUDB:
        case MySQLParser.REPEATABLE:
        case MySQLParser.COMMITTED:
        case MySQLParser.UNCOMMITTED:
        case MySQLParser.SERIALIZABLE:
        case MySQLParser.GEOMETRYCOLLECTION:
        case MySQLParser.LINESTRING:
        case MySQLParser.MULTILINESTRING:
        case MySQLParser.MULTIPOINT:
        case MySQLParser.MULTIPOLYGON:
        case MySQLParser.POINT:
        case MySQLParser.POLYGON:
        case MySQLParser.ABS:
        case MySQLParser.ACOS:
        case MySQLParser.ADDDATE:
        case MySQLParser.ADDTIME:
        case MySQLParser.AES_DECRYPT:
        case MySQLParser.AES_ENCRYPT:
        case MySQLParser.AREA:
        case MySQLParser.ASBINARY:
        case MySQLParser.ASIN:
        case MySQLParser.ASTEXT:
        case MySQLParser.ASWKB:
        case MySQLParser.ASWKT:
        case MySQLParser.ASYMMETRIC_DECRYPT:
        case MySQLParser.ASYMMETRIC_DERIVE:
        case MySQLParser.ASYMMETRIC_ENCRYPT:
        case MySQLParser.ASYMMETRIC_SIGN:
        case MySQLParser.ASYMMETRIC_VERIFY:
        case MySQLParser.ATAN:
        case MySQLParser.ATAN2:
        case MySQLParser.BENCHMARK:
        case MySQLParser.BIN:
        case MySQLParser.BIT_COUNT:
        case MySQLParser.BIT_LENGTH:
        case MySQLParser.BUFFER:
        case MySQLParser.CATALOG_NAME:
        case MySQLParser.CEIL:
        case MySQLParser.CEILING:
        case MySQLParser.CENTROID:
        case MySQLParser.CHARACTER_LENGTH:
        case MySQLParser.CHARSET:
        case MySQLParser.CHAR_LENGTH:
        case MySQLParser.COERCIBILITY:
        case MySQLParser.COLLATION:
        case MySQLParser.COMPRESS:
        case MySQLParser.CONCAT:
        case MySQLParser.CONCAT_WS:
        case MySQLParser.CONNECTION_ID:
        case MySQLParser.CONV:
        case MySQLParser.CONVERT_TZ:
        case MySQLParser.COS:
        case MySQLParser.COT:
        case MySQLParser.CRC32:
        case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser.CREATE_DH_PARAMETERS:
        case MySQLParser.CREATE_DIGEST:
        case MySQLParser.CROSSES:
        case MySQLParser.DATEDIFF:
        case MySQLParser.DATE_FORMAT:
        case MySQLParser.DAYNAME:
        case MySQLParser.DAYOFMONTH:
        case MySQLParser.DAYOFWEEK:
        case MySQLParser.DAYOFYEAR:
        case MySQLParser.DECODE:
        case MySQLParser.DEGREES:
        case MySQLParser.DES_DECRYPT:
        case MySQLParser.DES_ENCRYPT:
        case MySQLParser.DIMENSION:
        case MySQLParser.DISJOINT:
        case MySQLParser.ELT:
        case MySQLParser.ENCODE:
        case MySQLParser.ENCRYPT:
        case MySQLParser.ENDPOINT:
        case MySQLParser.ENVELOPE:
        case MySQLParser.EQUALS:
        case MySQLParser.EXP:
        case MySQLParser.EXPORT_SET:
        case MySQLParser.EXTERIORRING:
        case MySQLParser.EXTRACTVALUE:
        case MySQLParser.FIELD:
        case MySQLParser.FIND_IN_SET:
        case MySQLParser.FLOOR:
        case MySQLParser.FORMAT:
        case MySQLParser.FOUND_ROWS:
        case MySQLParser.FROM_BASE64:
        case MySQLParser.FROM_DAYS:
        case MySQLParser.FROM_UNIXTIME:
        case MySQLParser.GEOMCOLLFROMTEXT:
        case MySQLParser.GEOMCOLLFROMWKB:
        case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.GEOMETRYFROMTEXT:
        case MySQLParser.GEOMETRYFROMWKB:
        case MySQLParser.GEOMETRYN:
        case MySQLParser.GEOMETRYTYPE:
        case MySQLParser.GEOMFROMTEXT:
        case MySQLParser.GEOMFROMWKB:
        case MySQLParser.GET_FORMAT:
        case MySQLParser.GET_LOCK:
        case MySQLParser.GLENGTH:
        case MySQLParser.GREATEST:
        case MySQLParser.GTID_SUBSET:
        case MySQLParser.GTID_SUBTRACT:
        case MySQLParser.HEX:
        case MySQLParser.IFNULL:
        case MySQLParser.INET6_ATON:
        case MySQLParser.INET6_NTOA:
        case MySQLParser.INET_ATON:
        case MySQLParser.INET_NTOA:
        case MySQLParser.INSTR:
        case MySQLParser.INTERIORRINGN:
        case MySQLParser.INTERSECTS:
        case MySQLParser.ISCLOSED:
        case MySQLParser.ISEMPTY:
        case MySQLParser.ISNULL:
        case MySQLParser.ISSIMPLE:
        case MySQLParser.IS_FREE_LOCK:
        case MySQLParser.IS_IPV4:
        case MySQLParser.IS_IPV4_COMPAT:
        case MySQLParser.IS_IPV4_MAPPED:
        case MySQLParser.IS_IPV6:
        case MySQLParser.IS_USED_LOCK:
        case MySQLParser.LAST_INSERT_ID:
        case MySQLParser.LCASE:
        case MySQLParser.LEAST:
        case MySQLParser.LENGTH:
        case MySQLParser.LINEFROMTEXT:
        case MySQLParser.LINEFROMWKB:
        case MySQLParser.LINESTRINGFROMTEXT:
        case MySQLParser.LINESTRINGFROMWKB:
        case MySQLParser.LN:
        case MySQLParser.LOAD_FILE:
        case MySQLParser.LOCATE:
        case MySQLParser.LOG:
        case MySQLParser.LOG10:
        case MySQLParser.LOG2:
        case MySQLParser.LOWER:
        case MySQLParser.LPAD:
        case MySQLParser.LTRIM:
        case MySQLParser.MAKEDATE:
        case MySQLParser.MAKETIME:
        case MySQLParser.MAKE_SET:
        case MySQLParser.MASTER_POS_WAIT:
        case MySQLParser.MBRCONTAINS:
        case MySQLParser.MBRDISJOINT:
        case MySQLParser.MBREQUAL:
        case MySQLParser.MBRINTERSECTS:
        case MySQLParser.MBROVERLAPS:
        case MySQLParser.MBRTOUCHES:
        case MySQLParser.MBRWITHIN:
        case MySQLParser.MD5:
        case MySQLParser.MLINEFROMTEXT:
        case MySQLParser.MLINEFROMWKB:
        case MySQLParser.MONTHNAME:
        case MySQLParser.MPOINTFROMTEXT:
        case MySQLParser.MPOINTFROMWKB:
        case MySQLParser.MPOLYFROMTEXT:
        case MySQLParser.MPOLYFROMWKB:
        case MySQLParser.MULTILINESTRINGFROMTEXT:
        case MySQLParser.MULTILINESTRINGFROMWKB:
        case MySQLParser.MULTIPOINTFROMTEXT:
        case MySQLParser.MULTIPOINTFROMWKB:
        case MySQLParser.MULTIPOLYGONFROMTEXT:
        case MySQLParser.MULTIPOLYGONFROMWKB:
        case MySQLParser.NAME_CONST:
        case MySQLParser.NULLIF:
        case MySQLParser.NUMGEOMETRIES:
        case MySQLParser.NUMINTERIORRINGS:
        case MySQLParser.NUMPOINTS:
        case MySQLParser.OCT:
        case MySQLParser.OCTET_LENGTH:
        case MySQLParser.ORD:
        case MySQLParser.OVERLAPS:
        case MySQLParser.PERIOD_ADD:
        case MySQLParser.PERIOD_DIFF:
        case MySQLParser.PI:
        case MySQLParser.POINTFROMTEXT:
        case MySQLParser.POINTFROMWKB:
        case MySQLParser.POINTN:
        case MySQLParser.POLYFROMTEXT:
        case MySQLParser.POLYFROMWKB:
        case MySQLParser.POLYGONFROMTEXT:
        case MySQLParser.POLYGONFROMWKB:
        case MySQLParser.POW:
        case MySQLParser.POWER:
        case MySQLParser.QUOTE:
        case MySQLParser.RADIANS:
        case MySQLParser.RAND:
        case MySQLParser.RANDOM_BYTES:
        case MySQLParser.RELEASE_LOCK:
        case MySQLParser.REVERSE:
        case MySQLParser.ROUND:
        case MySQLParser.ROW_COUNT:
        case MySQLParser.RPAD:
        case MySQLParser.RTRIM:
        case MySQLParser.SEC_TO_TIME:
        case MySQLParser.SESSION_USER:
        case MySQLParser.SHA:
        case MySQLParser.SHA1:
        case MySQLParser.SHA2:
        case MySQLParser.SCHEMA_NAME:
        case MySQLParser.SIGN:
        case MySQLParser.SIN:
        case MySQLParser.SLEEP:
        case MySQLParser.SOUNDEX:
        case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser.SQRT:
        case MySQLParser.SRID:
        case MySQLParser.STARTPOINT:
        case MySQLParser.STRCMP:
        case MySQLParser.STR_TO_DATE:
        case MySQLParser.ST_AREA:
        case MySQLParser.ST_ASBINARY:
        case MySQLParser.ST_ASTEXT:
        case MySQLParser.ST_ASWKB:
        case MySQLParser.ST_ASWKT:
        case MySQLParser.ST_BUFFER:
        case MySQLParser.ST_CENTROID:
        case MySQLParser.ST_CONTAINS:
        case MySQLParser.ST_CROSSES:
        case MySQLParser.ST_DIFFERENCE:
        case MySQLParser.ST_DIMENSION:
        case MySQLParser.ST_DISJOINT:
        case MySQLParser.ST_DISTANCE:
        case MySQLParser.ST_ENDPOINT:
        case MySQLParser.ST_ENVELOPE:
        case MySQLParser.ST_EQUALS:
        case MySQLParser.ST_EXTERIORRING:
        case MySQLParser.ST_GEOMCOLLFROMTEXT:
        case MySQLParser.ST_GEOMCOLLFROMTXT:
        case MySQLParser.ST_GEOMCOLLFROMWKB:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.ST_GEOMETRYFROMTEXT:
        case MySQLParser.ST_GEOMETRYFROMWKB:
        case MySQLParser.ST_GEOMETRYN:
        case MySQLParser.ST_GEOMETRYTYPE:
        case MySQLParser.ST_GEOMFROMTEXT:
        case MySQLParser.ST_GEOMFROMWKB:
        case MySQLParser.ST_INTERIORRINGN:
        case MySQLParser.ST_INTERSECTION:
        case MySQLParser.ST_INTERSECTS:
        case MySQLParser.ST_ISCLOSED:
        case MySQLParser.ST_ISEMPTY:
        case MySQLParser.ST_ISSIMPLE:
        case MySQLParser.ST_LINEFROMTEXT:
        case MySQLParser.ST_LINEFROMWKB:
        case MySQLParser.ST_LINESTRINGFROMTEXT:
        case MySQLParser.ST_LINESTRINGFROMWKB:
        case MySQLParser.ST_NUMGEOMETRIES:
        case MySQLParser.ST_NUMINTERIORRING:
        case MySQLParser.ST_NUMINTERIORRINGS:
        case MySQLParser.ST_NUMPOINTS:
        case MySQLParser.ST_OVERLAPS:
        case MySQLParser.ST_POINTFROMTEXT:
        case MySQLParser.ST_POINTFROMWKB:
        case MySQLParser.ST_POINTN:
        case MySQLParser.ST_POLYFROMTEXT:
        case MySQLParser.ST_POLYFROMWKB:
        case MySQLParser.ST_POLYGONFROMTEXT:
        case MySQLParser.ST_POLYGONFROMWKB:
        case MySQLParser.ST_SRID:
        case MySQLParser.ST_STARTPOINT:
        case MySQLParser.ST_SYMDIFFERENCE:
        case MySQLParser.ST_TOUCHES:
        case MySQLParser.ST_UNION:
        case MySQLParser.ST_WITHIN:
        case MySQLParser.ST_X:
        case MySQLParser.ST_Y:
        case MySQLParser.SUBDATE:
        case MySQLParser.SUBSTRING_INDEX:
        case MySQLParser.SUBTIME:
        case MySQLParser.SYSTEM_USER:
        case MySQLParser.TAN:
        case MySQLParser.TIMEDIFF:
        case MySQLParser.TIMESTAMPADD:
        case MySQLParser.TIMESTAMPDIFF:
        case MySQLParser.TIME_FORMAT:
        case MySQLParser.TIME_TO_SEC:
        case MySQLParser.TOUCHES:
        case MySQLParser.TO_BASE64:
        case MySQLParser.TO_DAYS:
        case MySQLParser.TO_SECONDS:
        case MySQLParser.UCASE:
        case MySQLParser.UNCOMPRESS:
        case MySQLParser.UNCOMPRESSED_LENGTH:
        case MySQLParser.UNHEX:
        case MySQLParser.UNIX_TIMESTAMP:
        case MySQLParser.UPDATEXML:
        case MySQLParser.UPPER:
        case MySQLParser.UUID:
        case MySQLParser.UUID_SHORT:
        case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser.VERSION:
        case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser.WEEKDAY:
        case MySQLParser.WEEKOFYEAR:
        case MySQLParser.WEIGHT_STRING:
        case MySQLParser.WITHIN:
        case MySQLParser.YEARWEEK:
        case MySQLParser.Y_FUNCTION:
        case MySQLParser.X_FUNCTION:
        case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser.STRING_LITERAL:
        case MySQLParser.ID:
        case MySQLParser.REVERSE_QUOTE_ID:
            localctx = new ColumnDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1406;
            this.uid();
            this.state = 1407;
            this.columnDefinition();
            break;
        case MySQLParser.CHECK:
        case MySQLParser.CONSTRAINT:
        case MySQLParser.FOREIGN:
        case MySQLParser.PRIMARY:
        case MySQLParser.UNIQUE:
            localctx = new ConstraintDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1409;
            this.tableConstraint();
            break;
        case MySQLParser.FULLTEXT:
        case MySQLParser.INDEX:
        case MySQLParser.KEY:
        case MySQLParser.SPATIAL:
            localctx = new IndexDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1410;
            this.indexColumnDefinition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_columnDefinition;
    return this;
}

ColumnDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnDefinitionContext.prototype.constructor = ColumnDefinitionContext;

ColumnDefinitionContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

ColumnDefinitionContext.prototype.columnConstraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnConstraintContext);
    } else {
        return this.getTypedRuleContext(ColumnConstraintContext,i);
    }
};

ColumnDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterColumnDefinition(this);
	}
};

ColumnDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitColumnDefinition(this);
	}
};

ColumnDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitColumnDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ColumnDefinitionContext = ColumnDefinitionContext;

MySQLParser.prototype.columnDefinition = function() {

    var localctx = new ColumnDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, MySQLParser.RULE_columnDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1413;
        this.dataType();
        this.state = 1417;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,130,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1414;
                this.columnConstraint(); 
            }
            this.state = 1419;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,130,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_columnConstraint;
    return this;
}

ColumnConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnConstraintContext.prototype.constructor = ColumnConstraintContext;


 
ColumnConstraintContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function StorageColumnConstraintContext(parser, ctx) {
	ColumnConstraintContext.call(this, parser);
    this.storageval = null; // Token;
    ColumnConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StorageColumnConstraintContext.prototype = Object.create(ColumnConstraintContext.prototype);
StorageColumnConstraintContext.prototype.constructor = StorageColumnConstraintContext;

MySQLParser.StorageColumnConstraintContext = StorageColumnConstraintContext;

StorageColumnConstraintContext.prototype.STORAGE = function() {
    return this.getToken(MySQLParser.STORAGE, 0);
};

StorageColumnConstraintContext.prototype.DISK = function() {
    return this.getToken(MySQLParser.DISK, 0);
};

StorageColumnConstraintContext.prototype.MEMORY = function() {
    return this.getToken(MySQLParser.MEMORY, 0);
};

StorageColumnConstraintContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};
StorageColumnConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStorageColumnConstraint(this);
	}
};

StorageColumnConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStorageColumnConstraint(this);
	}
};

StorageColumnConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStorageColumnConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AutoIncrementColumnConstraintContext(parser, ctx) {
	ColumnConstraintContext.call(this, parser);
    ColumnConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AutoIncrementColumnConstraintContext.prototype = Object.create(ColumnConstraintContext.prototype);
AutoIncrementColumnConstraintContext.prototype.constructor = AutoIncrementColumnConstraintContext;

MySQLParser.AutoIncrementColumnConstraintContext = AutoIncrementColumnConstraintContext;

AutoIncrementColumnConstraintContext.prototype.AUTO_INCREMENT = function() {
    return this.getToken(MySQLParser.AUTO_INCREMENT, 0);
};

AutoIncrementColumnConstraintContext.prototype.ON = function() {
    return this.getToken(MySQLParser.ON, 0);
};

AutoIncrementColumnConstraintContext.prototype.UPDATE = function() {
    return this.getToken(MySQLParser.UPDATE, 0);
};

AutoIncrementColumnConstraintContext.prototype.currentTimestamp = function() {
    return this.getTypedRuleContext(CurrentTimestampContext,0);
};
AutoIncrementColumnConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAutoIncrementColumnConstraint(this);
	}
};

AutoIncrementColumnConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAutoIncrementColumnConstraint(this);
	}
};

AutoIncrementColumnConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAutoIncrementColumnConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CommentColumnConstraintContext(parser, ctx) {
	ColumnConstraintContext.call(this, parser);
    ColumnConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CommentColumnConstraintContext.prototype = Object.create(ColumnConstraintContext.prototype);
CommentColumnConstraintContext.prototype.constructor = CommentColumnConstraintContext;

MySQLParser.CommentColumnConstraintContext = CommentColumnConstraintContext;

CommentColumnConstraintContext.prototype.COMMENT = function() {
    return this.getToken(MySQLParser.COMMENT, 0);
};

CommentColumnConstraintContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};
CommentColumnConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCommentColumnConstraint(this);
	}
};

CommentColumnConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCommentColumnConstraint(this);
	}
};

CommentColumnConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCommentColumnConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UniqueKeyColumnConstraintContext(parser, ctx) {
	ColumnConstraintContext.call(this, parser);
    ColumnConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UniqueKeyColumnConstraintContext.prototype = Object.create(ColumnConstraintContext.prototype);
UniqueKeyColumnConstraintContext.prototype.constructor = UniqueKeyColumnConstraintContext;

MySQLParser.UniqueKeyColumnConstraintContext = UniqueKeyColumnConstraintContext;

UniqueKeyColumnConstraintContext.prototype.UNIQUE = function() {
    return this.getToken(MySQLParser.UNIQUE, 0);
};

UniqueKeyColumnConstraintContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};
UniqueKeyColumnConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUniqueKeyColumnConstraint(this);
	}
};

UniqueKeyColumnConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUniqueKeyColumnConstraint(this);
	}
};

UniqueKeyColumnConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUniqueKeyColumnConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SerialDefaultColumnConstraintContext(parser, ctx) {
	ColumnConstraintContext.call(this, parser);
    ColumnConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SerialDefaultColumnConstraintContext.prototype = Object.create(ColumnConstraintContext.prototype);
SerialDefaultColumnConstraintContext.prototype.constructor = SerialDefaultColumnConstraintContext;

MySQLParser.SerialDefaultColumnConstraintContext = SerialDefaultColumnConstraintContext;

SerialDefaultColumnConstraintContext.prototype.SERIAL = function() {
    return this.getToken(MySQLParser.SERIAL, 0);
};

SerialDefaultColumnConstraintContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

SerialDefaultColumnConstraintContext.prototype.VALUE = function() {
    return this.getToken(MySQLParser.VALUE, 0);
};
SerialDefaultColumnConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSerialDefaultColumnConstraint(this);
	}
};

SerialDefaultColumnConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSerialDefaultColumnConstraint(this);
	}
};

SerialDefaultColumnConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSerialDefaultColumnConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function GeneratedColumnConstraintContext(parser, ctx) {
	ColumnConstraintContext.call(this, parser);
    ColumnConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GeneratedColumnConstraintContext.prototype = Object.create(ColumnConstraintContext.prototype);
GeneratedColumnConstraintContext.prototype.constructor = GeneratedColumnConstraintContext;

MySQLParser.GeneratedColumnConstraintContext = GeneratedColumnConstraintContext;

GeneratedColumnConstraintContext.prototype.AS = function() {
    return this.getToken(MySQLParser.AS, 0);
};

GeneratedColumnConstraintContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

GeneratedColumnConstraintContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

GeneratedColumnConstraintContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

GeneratedColumnConstraintContext.prototype.GENERATED = function() {
    return this.getToken(MySQLParser.GENERATED, 0);
};

GeneratedColumnConstraintContext.prototype.ALWAYS = function() {
    return this.getToken(MySQLParser.ALWAYS, 0);
};

GeneratedColumnConstraintContext.prototype.VIRTUAL = function() {
    return this.getToken(MySQLParser.VIRTUAL, 0);
};

GeneratedColumnConstraintContext.prototype.STORED = function() {
    return this.getToken(MySQLParser.STORED, 0);
};
GeneratedColumnConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGeneratedColumnConstraint(this);
	}
};

GeneratedColumnConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGeneratedColumnConstraint(this);
	}
};

GeneratedColumnConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGeneratedColumnConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FormatColumnConstraintContext(parser, ctx) {
	ColumnConstraintContext.call(this, parser);
    this.colformat = null; // Token;
    ColumnConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FormatColumnConstraintContext.prototype = Object.create(ColumnConstraintContext.prototype);
FormatColumnConstraintContext.prototype.constructor = FormatColumnConstraintContext;

MySQLParser.FormatColumnConstraintContext = FormatColumnConstraintContext;

FormatColumnConstraintContext.prototype.COLUMN_FORMAT = function() {
    return this.getToken(MySQLParser.COLUMN_FORMAT, 0);
};

FormatColumnConstraintContext.prototype.FIXED = function() {
    return this.getToken(MySQLParser.FIXED, 0);
};

FormatColumnConstraintContext.prototype.DYNAMIC = function() {
    return this.getToken(MySQLParser.DYNAMIC, 0);
};

FormatColumnConstraintContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};
FormatColumnConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFormatColumnConstraint(this);
	}
};

FormatColumnConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFormatColumnConstraint(this);
	}
};

FormatColumnConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFormatColumnConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CollateColumnConstraintContext(parser, ctx) {
	ColumnConstraintContext.call(this, parser);
    ColumnConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CollateColumnConstraintContext.prototype = Object.create(ColumnConstraintContext.prototype);
CollateColumnConstraintContext.prototype.constructor = CollateColumnConstraintContext;

MySQLParser.CollateColumnConstraintContext = CollateColumnConstraintContext;

CollateColumnConstraintContext.prototype.COLLATE = function() {
    return this.getToken(MySQLParser.COLLATE, 0);
};

CollateColumnConstraintContext.prototype.collationName = function() {
    return this.getTypedRuleContext(CollationNameContext,0);
};
CollateColumnConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCollateColumnConstraint(this);
	}
};

CollateColumnConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCollateColumnConstraint(this);
	}
};

CollateColumnConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCollateColumnConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PrimaryKeyColumnConstraintContext(parser, ctx) {
	ColumnConstraintContext.call(this, parser);
    ColumnConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimaryKeyColumnConstraintContext.prototype = Object.create(ColumnConstraintContext.prototype);
PrimaryKeyColumnConstraintContext.prototype.constructor = PrimaryKeyColumnConstraintContext;

MySQLParser.PrimaryKeyColumnConstraintContext = PrimaryKeyColumnConstraintContext;

PrimaryKeyColumnConstraintContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};

PrimaryKeyColumnConstraintContext.prototype.PRIMARY = function() {
    return this.getToken(MySQLParser.PRIMARY, 0);
};
PrimaryKeyColumnConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPrimaryKeyColumnConstraint(this);
	}
};

PrimaryKeyColumnConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPrimaryKeyColumnConstraint(this);
	}
};

PrimaryKeyColumnConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPrimaryKeyColumnConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CheckColumnConstraintContext(parser, ctx) {
	ColumnConstraintContext.call(this, parser);
    this.name = null; // UidContext;
    ColumnConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CheckColumnConstraintContext.prototype = Object.create(ColumnConstraintContext.prototype);
CheckColumnConstraintContext.prototype.constructor = CheckColumnConstraintContext;

MySQLParser.CheckColumnConstraintContext = CheckColumnConstraintContext;

CheckColumnConstraintContext.prototype.CHECK = function() {
    return this.getToken(MySQLParser.CHECK, 0);
};

CheckColumnConstraintContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

CheckColumnConstraintContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CheckColumnConstraintContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

CheckColumnConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(MySQLParser.CONSTRAINT, 0);
};

CheckColumnConstraintContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};
CheckColumnConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCheckColumnConstraint(this);
	}
};

CheckColumnConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCheckColumnConstraint(this);
	}
};

CheckColumnConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCheckColumnConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NullColumnConstraintContext(parser, ctx) {
	ColumnConstraintContext.call(this, parser);
    ColumnConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullColumnConstraintContext.prototype = Object.create(ColumnConstraintContext.prototype);
NullColumnConstraintContext.prototype.constructor = NullColumnConstraintContext;

MySQLParser.NullColumnConstraintContext = NullColumnConstraintContext;

NullColumnConstraintContext.prototype.nullNotnull = function() {
    return this.getTypedRuleContext(NullNotnullContext,0);
};
NullColumnConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNullColumnConstraint(this);
	}
};

NullColumnConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNullColumnConstraint(this);
	}
};

NullColumnConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNullColumnConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DefaultColumnConstraintContext(parser, ctx) {
	ColumnConstraintContext.call(this, parser);
    ColumnConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DefaultColumnConstraintContext.prototype = Object.create(ColumnConstraintContext.prototype);
DefaultColumnConstraintContext.prototype.constructor = DefaultColumnConstraintContext;

MySQLParser.DefaultColumnConstraintContext = DefaultColumnConstraintContext;

DefaultColumnConstraintContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

DefaultColumnConstraintContext.prototype.defaultValue = function() {
    return this.getTypedRuleContext(DefaultValueContext,0);
};
DefaultColumnConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDefaultColumnConstraint(this);
	}
};

DefaultColumnConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDefaultColumnConstraint(this);
	}
};

DefaultColumnConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDefaultColumnConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ReferenceColumnConstraintContext(parser, ctx) {
	ColumnConstraintContext.call(this, parser);
    ColumnConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReferenceColumnConstraintContext.prototype = Object.create(ColumnConstraintContext.prototype);
ReferenceColumnConstraintContext.prototype.constructor = ReferenceColumnConstraintContext;

MySQLParser.ReferenceColumnConstraintContext = ReferenceColumnConstraintContext;

ReferenceColumnConstraintContext.prototype.referenceDefinition = function() {
    return this.getTypedRuleContext(ReferenceDefinitionContext,0);
};
ReferenceColumnConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReferenceColumnConstraint(this);
	}
};

ReferenceColumnConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReferenceColumnConstraint(this);
	}
};

ReferenceColumnConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReferenceColumnConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.ColumnConstraintContext = ColumnConstraintContext;

MySQLParser.prototype.columnConstraint = function() {

    var localctx = new ColumnConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, MySQLParser.RULE_columnConstraint);
    var _la = 0; // Token type
    try {
        this.state = 1471;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.NOT:
        case MySQLParser.NULL_LITERAL:
        case MySQLParser.NULL_SPEC_LITERAL:
            localctx = new NullColumnConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1420;
            this.nullNotnull();
            break;
        case MySQLParser.DEFAULT:
            localctx = new DefaultColumnConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1421;
            this.match(MySQLParser.DEFAULT);
            this.state = 1422;
            this.defaultValue();
            break;
        case MySQLParser.ON:
        case MySQLParser.AUTO_INCREMENT:
            localctx = new AutoIncrementColumnConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1427;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.AUTO_INCREMENT:
                this.state = 1423;
                this.match(MySQLParser.AUTO_INCREMENT);
                break;
            case MySQLParser.ON:
                this.state = 1424;
                this.match(MySQLParser.ON);
                this.state = 1425;
                this.match(MySQLParser.UPDATE);
                this.state = 1426;
                this.currentTimestamp();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case MySQLParser.KEY:
        case MySQLParser.PRIMARY:
            localctx = new PrimaryKeyColumnConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1430;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.PRIMARY) {
                this.state = 1429;
                this.match(MySQLParser.PRIMARY);
            }

            this.state = 1432;
            this.match(MySQLParser.KEY);
            break;
        case MySQLParser.UNIQUE:
            localctx = new UniqueKeyColumnConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1433;
            this.match(MySQLParser.UNIQUE);
            this.state = 1435;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
            if(la_===1) {
                this.state = 1434;
                this.match(MySQLParser.KEY);

            }
            break;
        case MySQLParser.COMMENT:
            localctx = new CommentColumnConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1437;
            this.match(MySQLParser.COMMENT);
            this.state = 1438;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.COLUMN_FORMAT:
            localctx = new FormatColumnConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1439;
            this.match(MySQLParser.COLUMN_FORMAT);
            this.state = 1440;
            localctx.colformat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DEFAULT || _la===MySQLParser.DYNAMIC || _la===MySQLParser.FIXED)) {
                localctx.colformat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case MySQLParser.STORAGE:
            localctx = new StorageColumnConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1441;
            this.match(MySQLParser.STORAGE);
            this.state = 1442;
            localctx.storageval = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DEFAULT || _la===MySQLParser.DISK || _la===MySQLParser.MEMORY)) {
                localctx.storageval = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case MySQLParser.REFERENCES:
            localctx = new ReferenceColumnConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1443;
            this.referenceDefinition();
            break;
        case MySQLParser.COLLATE:
            localctx = new CollateColumnConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1444;
            this.match(MySQLParser.COLLATE);
            this.state = 1445;
            this.collationName();
            break;
        case MySQLParser.AS:
        case MySQLParser.GENERATED:
            localctx = new GeneratedColumnConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 1448;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.GENERATED) {
                this.state = 1446;
                this.match(MySQLParser.GENERATED);
                this.state = 1447;
                this.match(MySQLParser.ALWAYS);
            }

            this.state = 1450;
            this.match(MySQLParser.AS);
            this.state = 1451;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 1452;
            this.expression(0);
            this.state = 1453;
            this.match(MySQLParser.RR_BRACKET);
            this.state = 1455;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.STORED || _la===MySQLParser.VIRTUAL) {
                this.state = 1454;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.STORED || _la===MySQLParser.VIRTUAL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            break;
        case MySQLParser.SERIAL:
            localctx = new SerialDefaultColumnConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 1457;
            this.match(MySQLParser.SERIAL);
            this.state = 1458;
            this.match(MySQLParser.DEFAULT);
            this.state = 1459;
            this.match(MySQLParser.VALUE);
            break;
        case MySQLParser.CHECK:
        case MySQLParser.CONSTRAINT:
            localctx = new CheckColumnConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 1464;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CONSTRAINT) {
                this.state = 1460;
                this.match(MySQLParser.CONSTRAINT);
                this.state = 1462;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                    this.state = 1461;
                    localctx.name = this.uid();
                }

            }

            this.state = 1466;
            this.match(MySQLParser.CHECK);
            this.state = 1467;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 1468;
            this.expression(0);
            this.state = 1469;
            this.match(MySQLParser.RR_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableConstraint;
    return this;
}

TableConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableConstraintContext.prototype.constructor = TableConstraintContext;


 
TableConstraintContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function UniqueKeyTableConstraintContext(parser, ctx) {
	TableConstraintContext.call(this, parser);
    this.name = null; // UidContext;
    this.indexFormat = null; // Token;
    this.index = null; // UidContext;
    TableConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UniqueKeyTableConstraintContext.prototype = Object.create(TableConstraintContext.prototype);
UniqueKeyTableConstraintContext.prototype.constructor = UniqueKeyTableConstraintContext;

MySQLParser.UniqueKeyTableConstraintContext = UniqueKeyTableConstraintContext;

UniqueKeyTableConstraintContext.prototype.UNIQUE = function() {
    return this.getToken(MySQLParser.UNIQUE, 0);
};

UniqueKeyTableConstraintContext.prototype.indexColumnNames = function() {
    return this.getTypedRuleContext(IndexColumnNamesContext,0);
};

UniqueKeyTableConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(MySQLParser.CONSTRAINT, 0);
};

UniqueKeyTableConstraintContext.prototype.indexType = function() {
    return this.getTypedRuleContext(IndexTypeContext,0);
};

UniqueKeyTableConstraintContext.prototype.indexOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexOptionContext);
    } else {
        return this.getTypedRuleContext(IndexOptionContext,i);
    }
};

UniqueKeyTableConstraintContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

UniqueKeyTableConstraintContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

UniqueKeyTableConstraintContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};
UniqueKeyTableConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUniqueKeyTableConstraint(this);
	}
};

UniqueKeyTableConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUniqueKeyTableConstraint(this);
	}
};

UniqueKeyTableConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUniqueKeyTableConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CheckTableConstraintContext(parser, ctx) {
	TableConstraintContext.call(this, parser);
    this.name = null; // UidContext;
    TableConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CheckTableConstraintContext.prototype = Object.create(TableConstraintContext.prototype);
CheckTableConstraintContext.prototype.constructor = CheckTableConstraintContext;

MySQLParser.CheckTableConstraintContext = CheckTableConstraintContext;

CheckTableConstraintContext.prototype.CHECK = function() {
    return this.getToken(MySQLParser.CHECK, 0);
};

CheckTableConstraintContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

CheckTableConstraintContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CheckTableConstraintContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

CheckTableConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(MySQLParser.CONSTRAINT, 0);
};

CheckTableConstraintContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};
CheckTableConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCheckTableConstraint(this);
	}
};

CheckTableConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCheckTableConstraint(this);
	}
};

CheckTableConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCheckTableConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PrimaryKeyTableConstraintContext(parser, ctx) {
	TableConstraintContext.call(this, parser);
    this.name = null; // UidContext;
    this.index = null; // UidContext;
    TableConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrimaryKeyTableConstraintContext.prototype = Object.create(TableConstraintContext.prototype);
PrimaryKeyTableConstraintContext.prototype.constructor = PrimaryKeyTableConstraintContext;

MySQLParser.PrimaryKeyTableConstraintContext = PrimaryKeyTableConstraintContext;

PrimaryKeyTableConstraintContext.prototype.PRIMARY = function() {
    return this.getToken(MySQLParser.PRIMARY, 0);
};

PrimaryKeyTableConstraintContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};

PrimaryKeyTableConstraintContext.prototype.indexColumnNames = function() {
    return this.getTypedRuleContext(IndexColumnNamesContext,0);
};

PrimaryKeyTableConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(MySQLParser.CONSTRAINT, 0);
};

PrimaryKeyTableConstraintContext.prototype.indexType = function() {
    return this.getTypedRuleContext(IndexTypeContext,0);
};

PrimaryKeyTableConstraintContext.prototype.indexOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexOptionContext);
    } else {
        return this.getTypedRuleContext(IndexOptionContext,i);
    }
};

PrimaryKeyTableConstraintContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};
PrimaryKeyTableConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPrimaryKeyTableConstraint(this);
	}
};

PrimaryKeyTableConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPrimaryKeyTableConstraint(this);
	}
};

PrimaryKeyTableConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPrimaryKeyTableConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ForeignKeyTableConstraintContext(parser, ctx) {
	TableConstraintContext.call(this, parser);
    this.name = null; // UidContext;
    this.index = null; // UidContext;
    TableConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForeignKeyTableConstraintContext.prototype = Object.create(TableConstraintContext.prototype);
ForeignKeyTableConstraintContext.prototype.constructor = ForeignKeyTableConstraintContext;

MySQLParser.ForeignKeyTableConstraintContext = ForeignKeyTableConstraintContext;

ForeignKeyTableConstraintContext.prototype.FOREIGN = function() {
    return this.getToken(MySQLParser.FOREIGN, 0);
};

ForeignKeyTableConstraintContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};

ForeignKeyTableConstraintContext.prototype.indexColumnNames = function() {
    return this.getTypedRuleContext(IndexColumnNamesContext,0);
};

ForeignKeyTableConstraintContext.prototype.referenceDefinition = function() {
    return this.getTypedRuleContext(ReferenceDefinitionContext,0);
};

ForeignKeyTableConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(MySQLParser.CONSTRAINT, 0);
};

ForeignKeyTableConstraintContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};
ForeignKeyTableConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterForeignKeyTableConstraint(this);
	}
};

ForeignKeyTableConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitForeignKeyTableConstraint(this);
	}
};

ForeignKeyTableConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitForeignKeyTableConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.TableConstraintContext = TableConstraintContext;

MySQLParser.prototype.tableConstraint = function() {

    var localctx = new TableConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, MySQLParser.RULE_tableConstraint);
    var _la = 0; // Token type
    try {
        this.state = 1542;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PrimaryKeyTableConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1477;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CONSTRAINT) {
                this.state = 1473;
                this.match(MySQLParser.CONSTRAINT);
                this.state = 1475;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                    this.state = 1474;
                    localctx.name = this.uid();
                }

            }

            this.state = 1479;
            this.match(MySQLParser.PRIMARY);
            this.state = 1480;
            this.match(MySQLParser.KEY);
            this.state = 1482;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                this.state = 1481;
                localctx.index = this.uid();
            }

            this.state = 1485;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.USING) {
                this.state = 1484;
                this.indexType();
            }

            this.state = 1487;
            this.indexColumnNames();
            this.state = 1491;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.USING || _la===MySQLParser.WITH || _la===MySQLParser.COMMENT || _la===MySQLParser.INVISIBLE || _la===MySQLParser.KEY_BLOCK_SIZE || _la===MySQLParser.VISIBLE) {
                this.state = 1488;
                this.indexOption();
                this.state = 1493;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            localctx = new UniqueKeyTableConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1498;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CONSTRAINT) {
                this.state = 1494;
                this.match(MySQLParser.CONSTRAINT);
                this.state = 1496;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                    this.state = 1495;
                    localctx.name = this.uid();
                }

            }

            this.state = 1500;
            this.match(MySQLParser.UNIQUE);
            this.state = 1502;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.INDEX || _la===MySQLParser.KEY) {
                this.state = 1501;
                localctx.indexFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.INDEX || _la===MySQLParser.KEY)) {
                    localctx.indexFormat = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1505;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                this.state = 1504;
                localctx.index = this.uid();
            }

            this.state = 1508;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.USING) {
                this.state = 1507;
                this.indexType();
            }

            this.state = 1510;
            this.indexColumnNames();
            this.state = 1514;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.USING || _la===MySQLParser.WITH || _la===MySQLParser.COMMENT || _la===MySQLParser.INVISIBLE || _la===MySQLParser.KEY_BLOCK_SIZE || _la===MySQLParser.VISIBLE) {
                this.state = 1511;
                this.indexOption();
                this.state = 1516;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 3:
            localctx = new ForeignKeyTableConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1521;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CONSTRAINT) {
                this.state = 1517;
                this.match(MySQLParser.CONSTRAINT);
                this.state = 1519;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                    this.state = 1518;
                    localctx.name = this.uid();
                }

            }

            this.state = 1523;
            this.match(MySQLParser.FOREIGN);
            this.state = 1524;
            this.match(MySQLParser.KEY);
            this.state = 1526;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                this.state = 1525;
                localctx.index = this.uid();
            }

            this.state = 1528;
            this.indexColumnNames();
            this.state = 1529;
            this.referenceDefinition();
            break;

        case 4:
            localctx = new CheckTableConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1535;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CONSTRAINT) {
                this.state = 1531;
                this.match(MySQLParser.CONSTRAINT);
                this.state = 1533;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                    this.state = 1532;
                    localctx.name = this.uid();
                }

            }

            this.state = 1537;
            this.match(MySQLParser.CHECK);
            this.state = 1538;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 1539;
            this.expression(0);
            this.state = 1540;
            this.match(MySQLParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReferenceDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_referenceDefinition;
    this.matchType = null; // Token
    return this;
}

ReferenceDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReferenceDefinitionContext.prototype.constructor = ReferenceDefinitionContext;

ReferenceDefinitionContext.prototype.REFERENCES = function() {
    return this.getToken(MySQLParser.REFERENCES, 0);
};

ReferenceDefinitionContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

ReferenceDefinitionContext.prototype.indexColumnNames = function() {
    return this.getTypedRuleContext(IndexColumnNamesContext,0);
};

ReferenceDefinitionContext.prototype.MATCH = function() {
    return this.getToken(MySQLParser.MATCH, 0);
};

ReferenceDefinitionContext.prototype.referenceAction = function() {
    return this.getTypedRuleContext(ReferenceActionContext,0);
};

ReferenceDefinitionContext.prototype.FULL = function() {
    return this.getToken(MySQLParser.FULL, 0);
};

ReferenceDefinitionContext.prototype.PARTIAL = function() {
    return this.getToken(MySQLParser.PARTIAL, 0);
};

ReferenceDefinitionContext.prototype.SIMPLE = function() {
    return this.getToken(MySQLParser.SIMPLE, 0);
};

ReferenceDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReferenceDefinition(this);
	}
};

ReferenceDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReferenceDefinition(this);
	}
};

ReferenceDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReferenceDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ReferenceDefinitionContext = ReferenceDefinitionContext;

MySQLParser.prototype.referenceDefinition = function() {

    var localctx = new ReferenceDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, MySQLParser.RULE_referenceDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1544;
        this.match(MySQLParser.REFERENCES);
        this.state = 1545;
        this.tableName();
        this.state = 1547;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
        if(la_===1) {
            this.state = 1546;
            this.indexColumnNames();

        }
        this.state = 1551;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.MATCH) {
            this.state = 1549;
            this.match(MySQLParser.MATCH);
            this.state = 1550;
            localctx.matchType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.FULL || _la===MySQLParser.PARTIAL || _la===MySQLParser.SIMPLE)) {
                localctx.matchType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1554;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
        if(la_===1) {
            this.state = 1553;
            this.referenceAction();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReferenceActionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_referenceAction;
    this.onDelete = null; // ReferenceControlTypeContext
    this.onUpdate = null; // ReferenceControlTypeContext
    return this;
}

ReferenceActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReferenceActionContext.prototype.constructor = ReferenceActionContext;

ReferenceActionContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.ON);
    } else {
        return this.getToken(MySQLParser.ON, i);
    }
};


ReferenceActionContext.prototype.DELETE = function() {
    return this.getToken(MySQLParser.DELETE, 0);
};

ReferenceActionContext.prototype.referenceControlType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ReferenceControlTypeContext);
    } else {
        return this.getTypedRuleContext(ReferenceControlTypeContext,i);
    }
};

ReferenceActionContext.prototype.UPDATE = function() {
    return this.getToken(MySQLParser.UPDATE, 0);
};

ReferenceActionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReferenceAction(this);
	}
};

ReferenceActionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReferenceAction(this);
	}
};

ReferenceActionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReferenceAction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ReferenceActionContext = ReferenceActionContext;

MySQLParser.prototype.referenceAction = function() {

    var localctx = new ReferenceActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, MySQLParser.RULE_referenceAction);
    try {
        this.state = 1572;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1556;
            this.match(MySQLParser.ON);
            this.state = 1557;
            this.match(MySQLParser.DELETE);
            this.state = 1558;
            localctx.onDelete = this.referenceControlType();
            this.state = 1562;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
            if(la_===1) {
                this.state = 1559;
                this.match(MySQLParser.ON);
                this.state = 1560;
                this.match(MySQLParser.UPDATE);
                this.state = 1561;
                localctx.onUpdate = this.referenceControlType();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1564;
            this.match(MySQLParser.ON);
            this.state = 1565;
            this.match(MySQLParser.UPDATE);
            this.state = 1566;
            localctx.onUpdate = this.referenceControlType();
            this.state = 1570;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
            if(la_===1) {
                this.state = 1567;
                this.match(MySQLParser.ON);
                this.state = 1568;
                this.match(MySQLParser.DELETE);
                this.state = 1569;
                localctx.onDelete = this.referenceControlType();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReferenceControlTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_referenceControlType;
    return this;
}

ReferenceControlTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReferenceControlTypeContext.prototype.constructor = ReferenceControlTypeContext;

ReferenceControlTypeContext.prototype.RESTRICT = function() {
    return this.getToken(MySQLParser.RESTRICT, 0);
};

ReferenceControlTypeContext.prototype.CASCADE = function() {
    return this.getToken(MySQLParser.CASCADE, 0);
};

ReferenceControlTypeContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

ReferenceControlTypeContext.prototype.NULL_LITERAL = function() {
    return this.getToken(MySQLParser.NULL_LITERAL, 0);
};

ReferenceControlTypeContext.prototype.NO = function() {
    return this.getToken(MySQLParser.NO, 0);
};

ReferenceControlTypeContext.prototype.ACTION = function() {
    return this.getToken(MySQLParser.ACTION, 0);
};

ReferenceControlTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReferenceControlType(this);
	}
};

ReferenceControlTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReferenceControlType(this);
	}
};

ReferenceControlTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReferenceControlType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ReferenceControlTypeContext = ReferenceControlTypeContext;

MySQLParser.prototype.referenceControlType = function() {

    var localctx = new ReferenceControlTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, MySQLParser.RULE_referenceControlType);
    try {
        this.state = 1580;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.RESTRICT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1574;
            this.match(MySQLParser.RESTRICT);
            break;
        case MySQLParser.CASCADE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1575;
            this.match(MySQLParser.CASCADE);
            break;
        case MySQLParser.SET:
            this.enterOuterAlt(localctx, 3);
            this.state = 1576;
            this.match(MySQLParser.SET);
            this.state = 1577;
            this.match(MySQLParser.NULL_LITERAL);
            break;
        case MySQLParser.NO:
            this.enterOuterAlt(localctx, 4);
            this.state = 1578;
            this.match(MySQLParser.NO);
            this.state = 1579;
            this.match(MySQLParser.ACTION);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexColumnDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexColumnDefinition;
    return this;
}

IndexColumnDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexColumnDefinitionContext.prototype.constructor = IndexColumnDefinitionContext;


 
IndexColumnDefinitionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SpecialIndexDeclarationContext(parser, ctx) {
	IndexColumnDefinitionContext.call(this, parser);
    this.indexFormat = null; // Token;
    IndexColumnDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SpecialIndexDeclarationContext.prototype = Object.create(IndexColumnDefinitionContext.prototype);
SpecialIndexDeclarationContext.prototype.constructor = SpecialIndexDeclarationContext;

MySQLParser.SpecialIndexDeclarationContext = SpecialIndexDeclarationContext;

SpecialIndexDeclarationContext.prototype.indexColumnNames = function() {
    return this.getTypedRuleContext(IndexColumnNamesContext,0);
};

SpecialIndexDeclarationContext.prototype.FULLTEXT = function() {
    return this.getToken(MySQLParser.FULLTEXT, 0);
};

SpecialIndexDeclarationContext.prototype.SPATIAL = function() {
    return this.getToken(MySQLParser.SPATIAL, 0);
};

SpecialIndexDeclarationContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

SpecialIndexDeclarationContext.prototype.indexOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexOptionContext);
    } else {
        return this.getTypedRuleContext(IndexOptionContext,i);
    }
};

SpecialIndexDeclarationContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

SpecialIndexDeclarationContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};
SpecialIndexDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSpecialIndexDeclaration(this);
	}
};

SpecialIndexDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSpecialIndexDeclaration(this);
	}
};

SpecialIndexDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSpecialIndexDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleIndexDeclarationContext(parser, ctx) {
	IndexColumnDefinitionContext.call(this, parser);
    this.indexFormat = null; // Token;
    IndexColumnDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleIndexDeclarationContext.prototype = Object.create(IndexColumnDefinitionContext.prototype);
SimpleIndexDeclarationContext.prototype.constructor = SimpleIndexDeclarationContext;

MySQLParser.SimpleIndexDeclarationContext = SimpleIndexDeclarationContext;

SimpleIndexDeclarationContext.prototype.indexColumnNames = function() {
    return this.getTypedRuleContext(IndexColumnNamesContext,0);
};

SimpleIndexDeclarationContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

SimpleIndexDeclarationContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};

SimpleIndexDeclarationContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

SimpleIndexDeclarationContext.prototype.indexType = function() {
    return this.getTypedRuleContext(IndexTypeContext,0);
};

SimpleIndexDeclarationContext.prototype.indexOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexOptionContext);
    } else {
        return this.getTypedRuleContext(IndexOptionContext,i);
    }
};
SimpleIndexDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleIndexDeclaration(this);
	}
};

SimpleIndexDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleIndexDeclaration(this);
	}
};

SimpleIndexDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleIndexDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.IndexColumnDefinitionContext = IndexColumnDefinitionContext;

MySQLParser.prototype.indexColumnDefinition = function() {

    var localctx = new IndexColumnDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, MySQLParser.RULE_indexColumnDefinition);
    var _la = 0; // Token type
    try {
        this.state = 1610;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.INDEX:
        case MySQLParser.KEY:
            localctx = new SimpleIndexDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1582;
            localctx.indexFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.INDEX || _la===MySQLParser.KEY)) {
                localctx.indexFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1584;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                this.state = 1583;
                this.uid();
            }

            this.state = 1587;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.USING) {
                this.state = 1586;
                this.indexType();
            }

            this.state = 1589;
            this.indexColumnNames();
            this.state = 1593;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.USING || _la===MySQLParser.WITH || _la===MySQLParser.COMMENT || _la===MySQLParser.INVISIBLE || _la===MySQLParser.KEY_BLOCK_SIZE || _la===MySQLParser.VISIBLE) {
                this.state = 1590;
                this.indexOption();
                this.state = 1595;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case MySQLParser.FULLTEXT:
        case MySQLParser.SPATIAL:
            localctx = new SpecialIndexDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1596;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.FULLTEXT || _la===MySQLParser.SPATIAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1598;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.INDEX || _la===MySQLParser.KEY) {
                this.state = 1597;
                localctx.indexFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.INDEX || _la===MySQLParser.KEY)) {
                    localctx.indexFormat = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1601;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                this.state = 1600;
                this.uid();
            }

            this.state = 1603;
            this.indexColumnNames();
            this.state = 1607;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.USING || _la===MySQLParser.WITH || _la===MySQLParser.COMMENT || _la===MySQLParser.INVISIBLE || _la===MySQLParser.KEY_BLOCK_SIZE || _la===MySQLParser.VISIBLE) {
                this.state = 1604;
                this.indexOption();
                this.state = 1609;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableOption;
    return this;
}

TableOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableOptionContext.prototype.constructor = TableOptionContext;


 
TableOptionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TableOptionEngineContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionEngineContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionEngineContext.prototype.constructor = TableOptionEngineContext;

MySQLParser.TableOptionEngineContext = TableOptionEngineContext;

TableOptionEngineContext.prototype.ENGINE = function() {
    return this.getToken(MySQLParser.ENGINE, 0);
};

TableOptionEngineContext.prototype.engineName = function() {
    return this.getTypedRuleContext(EngineNameContext,0);
};

TableOptionEngineContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionEngineContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionEngine(this);
	}
};

TableOptionEngineContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionEngine(this);
	}
};

TableOptionEngineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionEngine(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionMaxRowsContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionMaxRowsContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionMaxRowsContext.prototype.constructor = TableOptionMaxRowsContext;

MySQLParser.TableOptionMaxRowsContext = TableOptionMaxRowsContext;

TableOptionMaxRowsContext.prototype.MAX_ROWS = function() {
    return this.getToken(MySQLParser.MAX_ROWS, 0);
};

TableOptionMaxRowsContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

TableOptionMaxRowsContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionMaxRowsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionMaxRows(this);
	}
};

TableOptionMaxRowsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionMaxRows(this);
	}
};

TableOptionMaxRowsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionMaxRows(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionCollateContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionCollateContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionCollateContext.prototype.constructor = TableOptionCollateContext;

MySQLParser.TableOptionCollateContext = TableOptionCollateContext;

TableOptionCollateContext.prototype.COLLATE = function() {
    return this.getToken(MySQLParser.COLLATE, 0);
};

TableOptionCollateContext.prototype.collationName = function() {
    return this.getTypedRuleContext(CollationNameContext,0);
};

TableOptionCollateContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

TableOptionCollateContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionCollateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionCollate(this);
	}
};

TableOptionCollateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionCollate(this);
	}
};

TableOptionCollateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionCollate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionPersistentContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    this.extBoolValue = null; // Token;
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionPersistentContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionPersistentContext.prototype.constructor = TableOptionPersistentContext;

MySQLParser.TableOptionPersistentContext = TableOptionPersistentContext;

TableOptionPersistentContext.prototype.STATS_PERSISTENT = function() {
    return this.getToken(MySQLParser.STATS_PERSISTENT, 0);
};

TableOptionPersistentContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

TableOptionPersistentContext.prototype.ZERO_DECIMAL = function() {
    return this.getToken(MySQLParser.ZERO_DECIMAL, 0);
};

TableOptionPersistentContext.prototype.ONE_DECIMAL = function() {
    return this.getToken(MySQLParser.ONE_DECIMAL, 0);
};

TableOptionPersistentContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionPersistentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionPersistent(this);
	}
};

TableOptionPersistentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionPersistent(this);
	}
};

TableOptionPersistentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionPersistent(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionTablespaceContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionTablespaceContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionTablespaceContext.prototype.constructor = TableOptionTablespaceContext;

MySQLParser.TableOptionTablespaceContext = TableOptionTablespaceContext;

TableOptionTablespaceContext.prototype.TABLESPACE = function() {
    return this.getToken(MySQLParser.TABLESPACE, 0);
};

TableOptionTablespaceContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

TableOptionTablespaceContext.prototype.tablespaceStorage = function() {
    return this.getTypedRuleContext(TablespaceStorageContext,0);
};
TableOptionTablespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionTablespace(this);
	}
};

TableOptionTablespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionTablespace(this);
	}
};

TableOptionTablespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionTablespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionPackKeysContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    this.extBoolValue = null; // Token;
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionPackKeysContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionPackKeysContext.prototype.constructor = TableOptionPackKeysContext;

MySQLParser.TableOptionPackKeysContext = TableOptionPackKeysContext;

TableOptionPackKeysContext.prototype.PACK_KEYS = function() {
    return this.getToken(MySQLParser.PACK_KEYS, 0);
};

TableOptionPackKeysContext.prototype.ZERO_DECIMAL = function() {
    return this.getToken(MySQLParser.ZERO_DECIMAL, 0);
};

TableOptionPackKeysContext.prototype.ONE_DECIMAL = function() {
    return this.getToken(MySQLParser.ONE_DECIMAL, 0);
};

TableOptionPackKeysContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

TableOptionPackKeysContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionPackKeysContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionPackKeys(this);
	}
};

TableOptionPackKeysContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionPackKeys(this);
	}
};

TableOptionPackKeysContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionPackKeys(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionPasswordContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionPasswordContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionPasswordContext.prototype.constructor = TableOptionPasswordContext;

MySQLParser.TableOptionPasswordContext = TableOptionPasswordContext;

TableOptionPasswordContext.prototype.PASSWORD = function() {
    return this.getToken(MySQLParser.PASSWORD, 0);
};

TableOptionPasswordContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

TableOptionPasswordContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionPasswordContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionPassword(this);
	}
};

TableOptionPasswordContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionPassword(this);
	}
};

TableOptionPasswordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionPassword(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionUnionContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionUnionContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionUnionContext.prototype.constructor = TableOptionUnionContext;

MySQLParser.TableOptionUnionContext = TableOptionUnionContext;

TableOptionUnionContext.prototype.UNION = function() {
    return this.getToken(MySQLParser.UNION, 0);
};

TableOptionUnionContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

TableOptionUnionContext.prototype.tables = function() {
    return this.getTypedRuleContext(TablesContext,0);
};

TableOptionUnionContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

TableOptionUnionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionUnionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionUnion(this);
	}
};

TableOptionUnionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionUnion(this);
	}
};

TableOptionUnionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionUnion(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionSamplePageContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionSamplePageContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionSamplePageContext.prototype.constructor = TableOptionSamplePageContext;

MySQLParser.TableOptionSamplePageContext = TableOptionSamplePageContext;

TableOptionSamplePageContext.prototype.STATS_SAMPLE_PAGES = function() {
    return this.getToken(MySQLParser.STATS_SAMPLE_PAGES, 0);
};

TableOptionSamplePageContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

TableOptionSamplePageContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionSamplePageContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionSamplePage(this);
	}
};

TableOptionSamplePageContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionSamplePage(this);
	}
};

TableOptionSamplePageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionSamplePage(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionCharsetContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionCharsetContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionCharsetContext.prototype.constructor = TableOptionCharsetContext;

MySQLParser.TableOptionCharsetContext = TableOptionCharsetContext;

TableOptionCharsetContext.prototype.CHARACTER = function() {
    return this.getToken(MySQLParser.CHARACTER, 0);
};

TableOptionCharsetContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

TableOptionCharsetContext.prototype.CHARSET = function() {
    return this.getToken(MySQLParser.CHARSET, 0);
};

TableOptionCharsetContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

TableOptionCharsetContext.prototype.DEFAULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.DEFAULT);
    } else {
        return this.getToken(MySQLParser.DEFAULT, i);
    }
};


TableOptionCharsetContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionCharsetContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionCharset(this);
	}
};

TableOptionCharsetContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionCharset(this);
	}
};

TableOptionCharsetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionCharset(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionIndexDirectoryContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionIndexDirectoryContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionIndexDirectoryContext.prototype.constructor = TableOptionIndexDirectoryContext;

MySQLParser.TableOptionIndexDirectoryContext = TableOptionIndexDirectoryContext;

TableOptionIndexDirectoryContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

TableOptionIndexDirectoryContext.prototype.DIRECTORY = function() {
    return this.getToken(MySQLParser.DIRECTORY, 0);
};

TableOptionIndexDirectoryContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

TableOptionIndexDirectoryContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionIndexDirectoryContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionIndexDirectory(this);
	}
};

TableOptionIndexDirectoryContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionIndexDirectory(this);
	}
};

TableOptionIndexDirectoryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionIndexDirectory(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionKeyBlockSizeContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionKeyBlockSizeContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionKeyBlockSizeContext.prototype.constructor = TableOptionKeyBlockSizeContext;

MySQLParser.TableOptionKeyBlockSizeContext = TableOptionKeyBlockSizeContext;

TableOptionKeyBlockSizeContext.prototype.KEY_BLOCK_SIZE = function() {
    return this.getToken(MySQLParser.KEY_BLOCK_SIZE, 0);
};

TableOptionKeyBlockSizeContext.prototype.fileSizeLiteral = function() {
    return this.getTypedRuleContext(FileSizeLiteralContext,0);
};

TableOptionKeyBlockSizeContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionKeyBlockSizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionKeyBlockSize(this);
	}
};

TableOptionKeyBlockSizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionKeyBlockSize(this);
	}
};

TableOptionKeyBlockSizeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionKeyBlockSize(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionEncryptionContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionEncryptionContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionEncryptionContext.prototype.constructor = TableOptionEncryptionContext;

MySQLParser.TableOptionEncryptionContext = TableOptionEncryptionContext;

TableOptionEncryptionContext.prototype.ENCRYPTION = function() {
    return this.getToken(MySQLParser.ENCRYPTION, 0);
};

TableOptionEncryptionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

TableOptionEncryptionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionEncryptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionEncryption(this);
	}
};

TableOptionEncryptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionEncryption(this);
	}
};

TableOptionEncryptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionEncryption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionDataDirectoryContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionDataDirectoryContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionDataDirectoryContext.prototype.constructor = TableOptionDataDirectoryContext;

MySQLParser.TableOptionDataDirectoryContext = TableOptionDataDirectoryContext;

TableOptionDataDirectoryContext.prototype.DATA = function() {
    return this.getToken(MySQLParser.DATA, 0);
};

TableOptionDataDirectoryContext.prototype.DIRECTORY = function() {
    return this.getToken(MySQLParser.DIRECTORY, 0);
};

TableOptionDataDirectoryContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

TableOptionDataDirectoryContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionDataDirectoryContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionDataDirectory(this);
	}
};

TableOptionDataDirectoryContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionDataDirectory(this);
	}
};

TableOptionDataDirectoryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionDataDirectory(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionRecalculationContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    this.extBoolValue = null; // Token;
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionRecalculationContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionRecalculationContext.prototype.constructor = TableOptionRecalculationContext;

MySQLParser.TableOptionRecalculationContext = TableOptionRecalculationContext;

TableOptionRecalculationContext.prototype.STATS_AUTO_RECALC = function() {
    return this.getToken(MySQLParser.STATS_AUTO_RECALC, 0);
};

TableOptionRecalculationContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

TableOptionRecalculationContext.prototype.ZERO_DECIMAL = function() {
    return this.getToken(MySQLParser.ZERO_DECIMAL, 0);
};

TableOptionRecalculationContext.prototype.ONE_DECIMAL = function() {
    return this.getToken(MySQLParser.ONE_DECIMAL, 0);
};

TableOptionRecalculationContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionRecalculationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionRecalculation(this);
	}
};

TableOptionRecalculationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionRecalculation(this);
	}
};

TableOptionRecalculationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionRecalculation(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionAutoIncrementContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionAutoIncrementContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionAutoIncrementContext.prototype.constructor = TableOptionAutoIncrementContext;

MySQLParser.TableOptionAutoIncrementContext = TableOptionAutoIncrementContext;

TableOptionAutoIncrementContext.prototype.AUTO_INCREMENT = function() {
    return this.getToken(MySQLParser.AUTO_INCREMENT, 0);
};

TableOptionAutoIncrementContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

TableOptionAutoIncrementContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionAutoIncrementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionAutoIncrement(this);
	}
};

TableOptionAutoIncrementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionAutoIncrement(this);
	}
};

TableOptionAutoIncrementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionAutoIncrement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionChecksumContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    this.boolValue = null; // Token;
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionChecksumContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionChecksumContext.prototype.constructor = TableOptionChecksumContext;

MySQLParser.TableOptionChecksumContext = TableOptionChecksumContext;

TableOptionChecksumContext.prototype.CHECKSUM = function() {
    return this.getToken(MySQLParser.CHECKSUM, 0);
};

TableOptionChecksumContext.prototype.PAGE_CHECKSUM = function() {
    return this.getToken(MySQLParser.PAGE_CHECKSUM, 0);
};

TableOptionChecksumContext.prototype.ZERO_DECIMAL = function() {
    return this.getToken(MySQLParser.ZERO_DECIMAL, 0);
};

TableOptionChecksumContext.prototype.ONE_DECIMAL = function() {
    return this.getToken(MySQLParser.ONE_DECIMAL, 0);
};

TableOptionChecksumContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionChecksumContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionChecksum(this);
	}
};

TableOptionChecksumContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionChecksum(this);
	}
};

TableOptionChecksumContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionChecksum(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionDelayContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    this.boolValue = null; // Token;
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionDelayContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionDelayContext.prototype.constructor = TableOptionDelayContext;

MySQLParser.TableOptionDelayContext = TableOptionDelayContext;

TableOptionDelayContext.prototype.DELAY_KEY_WRITE = function() {
    return this.getToken(MySQLParser.DELAY_KEY_WRITE, 0);
};

TableOptionDelayContext.prototype.ZERO_DECIMAL = function() {
    return this.getToken(MySQLParser.ZERO_DECIMAL, 0);
};

TableOptionDelayContext.prototype.ONE_DECIMAL = function() {
    return this.getToken(MySQLParser.ONE_DECIMAL, 0);
};

TableOptionDelayContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionDelayContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionDelay(this);
	}
};

TableOptionDelayContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionDelay(this);
	}
};

TableOptionDelayContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionDelay(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionConnectionContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionConnectionContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionConnectionContext.prototype.constructor = TableOptionConnectionContext;

MySQLParser.TableOptionConnectionContext = TableOptionConnectionContext;

TableOptionConnectionContext.prototype.CONNECTION = function() {
    return this.getToken(MySQLParser.CONNECTION, 0);
};

TableOptionConnectionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

TableOptionConnectionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionConnectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionConnection(this);
	}
};

TableOptionConnectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionConnection(this);
	}
};

TableOptionConnectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionConnection(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionCommentContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionCommentContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionCommentContext.prototype.constructor = TableOptionCommentContext;

MySQLParser.TableOptionCommentContext = TableOptionCommentContext;

TableOptionCommentContext.prototype.COMMENT = function() {
    return this.getToken(MySQLParser.COMMENT, 0);
};

TableOptionCommentContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

TableOptionCommentContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionComment(this);
	}
};

TableOptionCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionComment(this);
	}
};

TableOptionCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionAverageContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionAverageContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionAverageContext.prototype.constructor = TableOptionAverageContext;

MySQLParser.TableOptionAverageContext = TableOptionAverageContext;

TableOptionAverageContext.prototype.AVG_ROW_LENGTH = function() {
    return this.getToken(MySQLParser.AVG_ROW_LENGTH, 0);
};

TableOptionAverageContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

TableOptionAverageContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionAverageContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionAverage(this);
	}
};

TableOptionAverageContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionAverage(this);
	}
};

TableOptionAverageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionAverage(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionRowFormatContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    this.rowFormat = null; // Token;
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionRowFormatContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionRowFormatContext.prototype.constructor = TableOptionRowFormatContext;

MySQLParser.TableOptionRowFormatContext = TableOptionRowFormatContext;

TableOptionRowFormatContext.prototype.ROW_FORMAT = function() {
    return this.getToken(MySQLParser.ROW_FORMAT, 0);
};

TableOptionRowFormatContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

TableOptionRowFormatContext.prototype.DYNAMIC = function() {
    return this.getToken(MySQLParser.DYNAMIC, 0);
};

TableOptionRowFormatContext.prototype.FIXED = function() {
    return this.getToken(MySQLParser.FIXED, 0);
};

TableOptionRowFormatContext.prototype.COMPRESSED = function() {
    return this.getToken(MySQLParser.COMPRESSED, 0);
};

TableOptionRowFormatContext.prototype.REDUNDANT = function() {
    return this.getToken(MySQLParser.REDUNDANT, 0);
};

TableOptionRowFormatContext.prototype.COMPACT = function() {
    return this.getToken(MySQLParser.COMPACT, 0);
};

TableOptionRowFormatContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionRowFormatContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionRowFormat(this);
	}
};

TableOptionRowFormatContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionRowFormat(this);
	}
};

TableOptionRowFormatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionRowFormat(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionCompressionContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionCompressionContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionCompressionContext.prototype.constructor = TableOptionCompressionContext;

MySQLParser.TableOptionCompressionContext = TableOptionCompressionContext;

TableOptionCompressionContext.prototype.COMPRESSION = function() {
    return this.getToken(MySQLParser.COMPRESSION, 0);
};

TableOptionCompressionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

TableOptionCompressionContext.prototype.ID = function() {
    return this.getToken(MySQLParser.ID, 0);
};

TableOptionCompressionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionCompressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionCompression(this);
	}
};

TableOptionCompressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionCompression(this);
	}
};

TableOptionCompressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionCompression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionInsertMethodContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    this.insertMethod = null; // Token;
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionInsertMethodContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionInsertMethodContext.prototype.constructor = TableOptionInsertMethodContext;

MySQLParser.TableOptionInsertMethodContext = TableOptionInsertMethodContext;

TableOptionInsertMethodContext.prototype.INSERT_METHOD = function() {
    return this.getToken(MySQLParser.INSERT_METHOD, 0);
};

TableOptionInsertMethodContext.prototype.NO = function() {
    return this.getToken(MySQLParser.NO, 0);
};

TableOptionInsertMethodContext.prototype.FIRST = function() {
    return this.getToken(MySQLParser.FIRST, 0);
};

TableOptionInsertMethodContext.prototype.LAST = function() {
    return this.getToken(MySQLParser.LAST, 0);
};

TableOptionInsertMethodContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionInsertMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionInsertMethod(this);
	}
};

TableOptionInsertMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionInsertMethod(this);
	}
};

TableOptionInsertMethodContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionInsertMethod(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableOptionMinRowsContext(parser, ctx) {
	TableOptionContext.call(this, parser);
    TableOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableOptionMinRowsContext.prototype = Object.create(TableOptionContext.prototype);
TableOptionMinRowsContext.prototype.constructor = TableOptionMinRowsContext;

MySQLParser.TableOptionMinRowsContext = TableOptionMinRowsContext;

TableOptionMinRowsContext.prototype.MIN_ROWS = function() {
    return this.getToken(MySQLParser.MIN_ROWS, 0);
};

TableOptionMinRowsContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

TableOptionMinRowsContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
TableOptionMinRowsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableOptionMinRows(this);
	}
};

TableOptionMinRowsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableOptionMinRows(this);
	}
};

TableOptionMinRowsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableOptionMinRows(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.TableOptionContext = TableOptionContext;

MySQLParser.prototype.tableOption = function() {

    var localctx = new TableOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, MySQLParser.RULE_tableOption);
    var _la = 0; // Token type
    try {
        this.state = 1756;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TableOptionEngineContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1612;
            this.match(MySQLParser.ENGINE);
            this.state = 1614;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1613;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1616;
            this.engineName();
            break;

        case 2:
            localctx = new TableOptionAutoIncrementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1617;
            this.match(MySQLParser.AUTO_INCREMENT);
            this.state = 1619;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1618;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1621;
            this.decimalLiteral();
            break;

        case 3:
            localctx = new TableOptionAverageContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1622;
            this.match(MySQLParser.AVG_ROW_LENGTH);
            this.state = 1624;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1623;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1626;
            this.decimalLiteral();
            break;

        case 4:
            localctx = new TableOptionCharsetContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1628;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.DEFAULT) {
                this.state = 1627;
                this.match(MySQLParser.DEFAULT);
            }

            this.state = 1633;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.CHARACTER:
                this.state = 1630;
                this.match(MySQLParser.CHARACTER);
                this.state = 1631;
                this.match(MySQLParser.SET);
                break;
            case MySQLParser.CHARSET:
                this.state = 1632;
                this.match(MySQLParser.CHARSET);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1636;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1635;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1640;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.BINARY:
            case MySQLParser.ARMSCII8:
            case MySQLParser.ASCII:
            case MySQLParser.BIG5:
            case MySQLParser.CP1250:
            case MySQLParser.CP1251:
            case MySQLParser.CP1256:
            case MySQLParser.CP1257:
            case MySQLParser.CP850:
            case MySQLParser.CP852:
            case MySQLParser.CP866:
            case MySQLParser.CP932:
            case MySQLParser.DEC8:
            case MySQLParser.EUCJPMS:
            case MySQLParser.EUCKR:
            case MySQLParser.GB2312:
            case MySQLParser.GBK:
            case MySQLParser.GEOSTD8:
            case MySQLParser.GREEK:
            case MySQLParser.HEBREW:
            case MySQLParser.HP8:
            case MySQLParser.KEYBCS2:
            case MySQLParser.KOI8R:
            case MySQLParser.KOI8U:
            case MySQLParser.LATIN1:
            case MySQLParser.LATIN2:
            case MySQLParser.LATIN5:
            case MySQLParser.LATIN7:
            case MySQLParser.MACCE:
            case MySQLParser.MACROMAN:
            case MySQLParser.SJIS:
            case MySQLParser.SWE7:
            case MySQLParser.TIS620:
            case MySQLParser.UCS2:
            case MySQLParser.UJIS:
            case MySQLParser.UTF16:
            case MySQLParser.UTF16LE:
            case MySQLParser.UTF32:
            case MySQLParser.UTF8:
            case MySQLParser.UTF8MB3:
            case MySQLParser.UTF8MB4:
            case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySQLParser.STRING_LITERAL:
                this.state = 1638;
                this.charsetName();
                break;
            case MySQLParser.DEFAULT:
                this.state = 1639;
                this.match(MySQLParser.DEFAULT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 5:
            localctx = new TableOptionChecksumContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1642;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CHECKSUM || _la===MySQLParser.PAGE_CHECKSUM)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1644;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1643;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1646;
            localctx.boolValue = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ZERO_DECIMAL || _la===MySQLParser.ONE_DECIMAL)) {
                localctx.boolValue = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 6:
            localctx = new TableOptionCollateContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1648;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.DEFAULT) {
                this.state = 1647;
                this.match(MySQLParser.DEFAULT);
            }

            this.state = 1650;
            this.match(MySQLParser.COLLATE);
            this.state = 1652;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1651;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1654;
            this.collationName();
            break;

        case 7:
            localctx = new TableOptionCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1655;
            this.match(MySQLParser.COMMENT);
            this.state = 1657;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1656;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1659;
            this.match(MySQLParser.STRING_LITERAL);
            break;

        case 8:
            localctx = new TableOptionCompressionContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1660;
            this.match(MySQLParser.COMPRESSION);
            this.state = 1662;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1661;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1664;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.STRING_LITERAL || _la===MySQLParser.ID)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 9:
            localctx = new TableOptionConnectionContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1665;
            this.match(MySQLParser.CONNECTION);
            this.state = 1667;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1666;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1669;
            this.match(MySQLParser.STRING_LITERAL);
            break;

        case 10:
            localctx = new TableOptionDataDirectoryContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1670;
            this.match(MySQLParser.DATA);
            this.state = 1671;
            this.match(MySQLParser.DIRECTORY);
            this.state = 1673;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1672;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1675;
            this.match(MySQLParser.STRING_LITERAL);
            break;

        case 11:
            localctx = new TableOptionDelayContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 1676;
            this.match(MySQLParser.DELAY_KEY_WRITE);
            this.state = 1678;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1677;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1680;
            localctx.boolValue = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ZERO_DECIMAL || _la===MySQLParser.ONE_DECIMAL)) {
                localctx.boolValue = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 12:
            localctx = new TableOptionEncryptionContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 1681;
            this.match(MySQLParser.ENCRYPTION);
            this.state = 1683;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1682;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1685;
            this.match(MySQLParser.STRING_LITERAL);
            break;

        case 13:
            localctx = new TableOptionIndexDirectoryContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 1686;
            this.match(MySQLParser.INDEX);
            this.state = 1687;
            this.match(MySQLParser.DIRECTORY);
            this.state = 1689;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1688;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1691;
            this.match(MySQLParser.STRING_LITERAL);
            break;

        case 14:
            localctx = new TableOptionInsertMethodContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 1692;
            this.match(MySQLParser.INSERT_METHOD);
            this.state = 1694;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1693;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1696;
            localctx.insertMethod = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.FIRST || _la===MySQLParser.LAST || _la===MySQLParser.NO)) {
                localctx.insertMethod = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 15:
            localctx = new TableOptionKeyBlockSizeContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 1697;
            this.match(MySQLParser.KEY_BLOCK_SIZE);
            this.state = 1699;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1698;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1701;
            this.fileSizeLiteral();
            break;

        case 16:
            localctx = new TableOptionMaxRowsContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 1702;
            this.match(MySQLParser.MAX_ROWS);
            this.state = 1704;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1703;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1706;
            this.decimalLiteral();
            break;

        case 17:
            localctx = new TableOptionMinRowsContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 1707;
            this.match(MySQLParser.MIN_ROWS);
            this.state = 1709;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1708;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1711;
            this.decimalLiteral();
            break;

        case 18:
            localctx = new TableOptionPackKeysContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 1712;
            this.match(MySQLParser.PACK_KEYS);
            this.state = 1714;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1713;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1716;
            localctx.extBoolValue = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DEFAULT || _la===MySQLParser.ZERO_DECIMAL || _la===MySQLParser.ONE_DECIMAL)) {
                localctx.extBoolValue = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 19:
            localctx = new TableOptionPasswordContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 1717;
            this.match(MySQLParser.PASSWORD);
            this.state = 1719;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1718;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1721;
            this.match(MySQLParser.STRING_LITERAL);
            break;

        case 20:
            localctx = new TableOptionRowFormatContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 1722;
            this.match(MySQLParser.ROW_FORMAT);
            this.state = 1724;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1723;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1726;
            localctx.rowFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DEFAULT || ((((_la - 307)) & ~0x1f) == 0 && ((1 << (_la - 307)) & ((1 << (MySQLParser.COMPACT - 307)) | (1 << (MySQLParser.COMPRESSED - 307)) | (1 << (MySQLParser.DYNAMIC - 307)))) !== 0) || _la===MySQLParser.FIXED || _la===MySQLParser.REDUNDANT)) {
                localctx.rowFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 21:
            localctx = new TableOptionRecalculationContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 1727;
            this.match(MySQLParser.STATS_AUTO_RECALC);
            this.state = 1729;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1728;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1731;
            localctx.extBoolValue = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DEFAULT || _la===MySQLParser.ZERO_DECIMAL || _la===MySQLParser.ONE_DECIMAL)) {
                localctx.extBoolValue = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 22:
            localctx = new TableOptionPersistentContext(this, localctx);
            this.enterOuterAlt(localctx, 22);
            this.state = 1732;
            this.match(MySQLParser.STATS_PERSISTENT);
            this.state = 1734;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1733;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1736;
            localctx.extBoolValue = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DEFAULT || _la===MySQLParser.ZERO_DECIMAL || _la===MySQLParser.ONE_DECIMAL)) {
                localctx.extBoolValue = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 23:
            localctx = new TableOptionSamplePageContext(this, localctx);
            this.enterOuterAlt(localctx, 23);
            this.state = 1737;
            this.match(MySQLParser.STATS_SAMPLE_PAGES);
            this.state = 1739;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1738;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1741;
            this.decimalLiteral();
            break;

        case 24:
            localctx = new TableOptionTablespaceContext(this, localctx);
            this.enterOuterAlt(localctx, 24);
            this.state = 1742;
            this.match(MySQLParser.TABLESPACE);
            this.state = 1743;
            this.uid();
            this.state = 1745;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
            if(la_===1) {
                this.state = 1744;
                this.tablespaceStorage();

            }
            break;

        case 25:
            localctx = new TableOptionTablespaceContext(this, localctx);
            this.enterOuterAlt(localctx, 25);
            this.state = 1747;
            this.tablespaceStorage();
            break;

        case 26:
            localctx = new TableOptionUnionContext(this, localctx);
            this.enterOuterAlt(localctx, 26);
            this.state = 1748;
            this.match(MySQLParser.UNION);
            this.state = 1750;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 1749;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 1752;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 1753;
            this.tables();
            this.state = 1754;
            this.match(MySQLParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablespaceStorageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tablespaceStorage;
    return this;
}

TablespaceStorageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablespaceStorageContext.prototype.constructor = TablespaceStorageContext;

TablespaceStorageContext.prototype.STORAGE = function() {
    return this.getToken(MySQLParser.STORAGE, 0);
};

TablespaceStorageContext.prototype.DISK = function() {
    return this.getToken(MySQLParser.DISK, 0);
};

TablespaceStorageContext.prototype.MEMORY = function() {
    return this.getToken(MySQLParser.MEMORY, 0);
};

TablespaceStorageContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

TablespaceStorageContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTablespaceStorage(this);
	}
};

TablespaceStorageContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTablespaceStorage(this);
	}
};

TablespaceStorageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTablespaceStorage(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TablespaceStorageContext = TablespaceStorageContext;

MySQLParser.prototype.tablespaceStorage = function() {

    var localctx = new TablespaceStorageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, MySQLParser.RULE_tablespaceStorage);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1758;
        this.match(MySQLParser.STORAGE);
        this.state = 1759;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.DEFAULT || _la===MySQLParser.DISK || _la===MySQLParser.MEMORY)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionDefinitionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_partitionDefinitions;
    this.count = null; // DecimalLiteralContext
    this.subCount = null; // DecimalLiteralContext
    return this;
}

PartitionDefinitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionDefinitionsContext.prototype.constructor = PartitionDefinitionsContext;

PartitionDefinitionsContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

PartitionDefinitionsContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.BY);
    } else {
        return this.getToken(MySQLParser.BY, i);
    }
};


PartitionDefinitionsContext.prototype.partitionFunctionDefinition = function() {
    return this.getTypedRuleContext(PartitionFunctionDefinitionContext,0);
};

PartitionDefinitionsContext.prototype.PARTITIONS = function() {
    return this.getToken(MySQLParser.PARTITIONS, 0);
};

PartitionDefinitionsContext.prototype.SUBPARTITION = function() {
    return this.getToken(MySQLParser.SUBPARTITION, 0);
};

PartitionDefinitionsContext.prototype.subpartitionFunctionDefinition = function() {
    return this.getTypedRuleContext(SubpartitionFunctionDefinitionContext,0);
};

PartitionDefinitionsContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

PartitionDefinitionsContext.prototype.partitionDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionDefinitionContext);
    } else {
        return this.getTypedRuleContext(PartitionDefinitionContext,i);
    }
};

PartitionDefinitionsContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

PartitionDefinitionsContext.prototype.decimalLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DecimalLiteralContext);
    } else {
        return this.getTypedRuleContext(DecimalLiteralContext,i);
    }
};

PartitionDefinitionsContext.prototype.SUBPARTITIONS = function() {
    return this.getToken(MySQLParser.SUBPARTITIONS, 0);
};

PartitionDefinitionsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


PartitionDefinitionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionDefinitions(this);
	}
};

PartitionDefinitionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionDefinitions(this);
	}
};

PartitionDefinitionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionDefinitions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PartitionDefinitionsContext = PartitionDefinitionsContext;

MySQLParser.prototype.partitionDefinitions = function() {

    var localctx = new PartitionDefinitionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, MySQLParser.RULE_partitionDefinitions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1761;
        this.match(MySQLParser.PARTITION);
        this.state = 1762;
        this.match(MySQLParser.BY);
        this.state = 1763;
        this.partitionFunctionDefinition();
        this.state = 1766;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.PARTITIONS) {
            this.state = 1764;
            this.match(MySQLParser.PARTITIONS);
            this.state = 1765;
            localctx.count = this.decimalLiteral();
        }

        this.state = 1775;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.SUBPARTITION) {
            this.state = 1768;
            this.match(MySQLParser.SUBPARTITION);
            this.state = 1769;
            this.match(MySQLParser.BY);
            this.state = 1770;
            this.subpartitionFunctionDefinition();
            this.state = 1773;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.SUBPARTITIONS) {
                this.state = 1771;
                this.match(MySQLParser.SUBPARTITIONS);
                this.state = 1772;
                localctx.subCount = this.decimalLiteral();
            }

        }

        this.state = 1788;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
        if(la_===1) {
            this.state = 1777;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 1778;
            this.partitionDefinition();
            this.state = 1783;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 1779;
                this.match(MySQLParser.COMMA);
                this.state = 1780;
                this.partitionDefinition();
                this.state = 1785;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1786;
            this.match(MySQLParser.RR_BRACKET);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionFunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_partitionFunctionDefinition;
    return this;
}

PartitionFunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionFunctionDefinitionContext.prototype.constructor = PartitionFunctionDefinitionContext;


 
PartitionFunctionDefinitionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PartitionFunctionKeyContext(parser, ctx) {
	PartitionFunctionDefinitionContext.call(this, parser);
    this.algType = null; // Token;
    PartitionFunctionDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionFunctionKeyContext.prototype = Object.create(PartitionFunctionDefinitionContext.prototype);
PartitionFunctionKeyContext.prototype.constructor = PartitionFunctionKeyContext;

MySQLParser.PartitionFunctionKeyContext = PartitionFunctionKeyContext;

PartitionFunctionKeyContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};

PartitionFunctionKeyContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

PartitionFunctionKeyContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

PartitionFunctionKeyContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

PartitionFunctionKeyContext.prototype.LINEAR = function() {
    return this.getToken(MySQLParser.LINEAR, 0);
};

PartitionFunctionKeyContext.prototype.ALGORITHM = function() {
    return this.getToken(MySQLParser.ALGORITHM, 0);
};

PartitionFunctionKeyContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

PartitionFunctionKeyContext.prototype.ONE_DECIMAL = function() {
    return this.getToken(MySQLParser.ONE_DECIMAL, 0);
};

PartitionFunctionKeyContext.prototype.TWO_DECIMAL = function() {
    return this.getToken(MySQLParser.TWO_DECIMAL, 0);
};
PartitionFunctionKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionFunctionKey(this);
	}
};

PartitionFunctionKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionFunctionKey(this);
	}
};

PartitionFunctionKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionFunctionKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PartitionFunctionHashContext(parser, ctx) {
	PartitionFunctionDefinitionContext.call(this, parser);
    PartitionFunctionDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionFunctionHashContext.prototype = Object.create(PartitionFunctionDefinitionContext.prototype);
PartitionFunctionHashContext.prototype.constructor = PartitionFunctionHashContext;

MySQLParser.PartitionFunctionHashContext = PartitionFunctionHashContext;

PartitionFunctionHashContext.prototype.HASH = function() {
    return this.getToken(MySQLParser.HASH, 0);
};

PartitionFunctionHashContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

PartitionFunctionHashContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PartitionFunctionHashContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

PartitionFunctionHashContext.prototype.LINEAR = function() {
    return this.getToken(MySQLParser.LINEAR, 0);
};
PartitionFunctionHashContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionFunctionHash(this);
	}
};

PartitionFunctionHashContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionFunctionHash(this);
	}
};

PartitionFunctionHashContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionFunctionHash(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PartitionFunctionListContext(parser, ctx) {
	PartitionFunctionDefinitionContext.call(this, parser);
    PartitionFunctionDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionFunctionListContext.prototype = Object.create(PartitionFunctionDefinitionContext.prototype);
PartitionFunctionListContext.prototype.constructor = PartitionFunctionListContext;

MySQLParser.PartitionFunctionListContext = PartitionFunctionListContext;

PartitionFunctionListContext.prototype.LIST = function() {
    return this.getToken(MySQLParser.LIST, 0);
};

PartitionFunctionListContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

PartitionFunctionListContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PartitionFunctionListContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

PartitionFunctionListContext.prototype.COLUMNS = function() {
    return this.getToken(MySQLParser.COLUMNS, 0);
};

PartitionFunctionListContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};
PartitionFunctionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionFunctionList(this);
	}
};

PartitionFunctionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionFunctionList(this);
	}
};

PartitionFunctionListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionFunctionList(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PartitionFunctionRangeContext(parser, ctx) {
	PartitionFunctionDefinitionContext.call(this, parser);
    PartitionFunctionDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionFunctionRangeContext.prototype = Object.create(PartitionFunctionDefinitionContext.prototype);
PartitionFunctionRangeContext.prototype.constructor = PartitionFunctionRangeContext;

MySQLParser.PartitionFunctionRangeContext = PartitionFunctionRangeContext;

PartitionFunctionRangeContext.prototype.RANGE = function() {
    return this.getToken(MySQLParser.RANGE, 0);
};

PartitionFunctionRangeContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

PartitionFunctionRangeContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PartitionFunctionRangeContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

PartitionFunctionRangeContext.prototype.COLUMNS = function() {
    return this.getToken(MySQLParser.COLUMNS, 0);
};

PartitionFunctionRangeContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};
PartitionFunctionRangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionFunctionRange(this);
	}
};

PartitionFunctionRangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionFunctionRange(this);
	}
};

PartitionFunctionRangeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionFunctionRange(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.PartitionFunctionDefinitionContext = PartitionFunctionDefinitionContext;

MySQLParser.prototype.partitionFunctionDefinition = function() {

    var localctx = new PartitionFunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, MySQLParser.RULE_partitionFunctionDefinition);
    var _la = 0; // Token type
    try {
        this.state = 1835;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PartitionFunctionHashContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1791;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LINEAR) {
                this.state = 1790;
                this.match(MySQLParser.LINEAR);
            }

            this.state = 1793;
            this.match(MySQLParser.HASH);
            this.state = 1794;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 1795;
            this.expression(0);
            this.state = 1796;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 2:
            localctx = new PartitionFunctionKeyContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1799;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LINEAR) {
                this.state = 1798;
                this.match(MySQLParser.LINEAR);
            }

            this.state = 1801;
            this.match(MySQLParser.KEY);
            this.state = 1805;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ALGORITHM) {
                this.state = 1802;
                this.match(MySQLParser.ALGORITHM);
                this.state = 1803;
                this.match(MySQLParser.EQUAL_SYMBOL);
                this.state = 1804;
                localctx.algType = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.ONE_DECIMAL || _la===MySQLParser.TWO_DECIMAL)) {
                    localctx.algType = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1807;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 1808;
            this.uidList();
            this.state = 1809;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 3:
            localctx = new PartitionFunctionRangeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1811;
            this.match(MySQLParser.RANGE);
            this.state = 1821;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.LR_BRACKET:
                this.state = 1812;
                this.match(MySQLParser.LR_BRACKET);
                this.state = 1813;
                this.expression(0);
                this.state = 1814;
                this.match(MySQLParser.RR_BRACKET);
                break;
            case MySQLParser.COLUMNS:
                this.state = 1816;
                this.match(MySQLParser.COLUMNS);
                this.state = 1817;
                this.match(MySQLParser.LR_BRACKET);
                this.state = 1818;
                this.uidList();
                this.state = 1819;
                this.match(MySQLParser.RR_BRACKET);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 4:
            localctx = new PartitionFunctionListContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1823;
            this.match(MySQLParser.LIST);
            this.state = 1833;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.LR_BRACKET:
                this.state = 1824;
                this.match(MySQLParser.LR_BRACKET);
                this.state = 1825;
                this.expression(0);
                this.state = 1826;
                this.match(MySQLParser.RR_BRACKET);
                break;
            case MySQLParser.COLUMNS:
                this.state = 1828;
                this.match(MySQLParser.COLUMNS);
                this.state = 1829;
                this.match(MySQLParser.LR_BRACKET);
                this.state = 1830;
                this.uidList();
                this.state = 1831;
                this.match(MySQLParser.RR_BRACKET);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubpartitionFunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_subpartitionFunctionDefinition;
    return this;
}

SubpartitionFunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubpartitionFunctionDefinitionContext.prototype.constructor = SubpartitionFunctionDefinitionContext;


 
SubpartitionFunctionDefinitionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SubPartitionFunctionHashContext(parser, ctx) {
	SubpartitionFunctionDefinitionContext.call(this, parser);
    SubpartitionFunctionDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubPartitionFunctionHashContext.prototype = Object.create(SubpartitionFunctionDefinitionContext.prototype);
SubPartitionFunctionHashContext.prototype.constructor = SubPartitionFunctionHashContext;

MySQLParser.SubPartitionFunctionHashContext = SubPartitionFunctionHashContext;

SubPartitionFunctionHashContext.prototype.HASH = function() {
    return this.getToken(MySQLParser.HASH, 0);
};

SubPartitionFunctionHashContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

SubPartitionFunctionHashContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SubPartitionFunctionHashContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

SubPartitionFunctionHashContext.prototype.LINEAR = function() {
    return this.getToken(MySQLParser.LINEAR, 0);
};
SubPartitionFunctionHashContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSubPartitionFunctionHash(this);
	}
};

SubPartitionFunctionHashContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSubPartitionFunctionHash(this);
	}
};

SubPartitionFunctionHashContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSubPartitionFunctionHash(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SubPartitionFunctionKeyContext(parser, ctx) {
	SubpartitionFunctionDefinitionContext.call(this, parser);
    this.algType = null; // Token;
    SubpartitionFunctionDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubPartitionFunctionKeyContext.prototype = Object.create(SubpartitionFunctionDefinitionContext.prototype);
SubPartitionFunctionKeyContext.prototype.constructor = SubPartitionFunctionKeyContext;

MySQLParser.SubPartitionFunctionKeyContext = SubPartitionFunctionKeyContext;

SubPartitionFunctionKeyContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};

SubPartitionFunctionKeyContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

SubPartitionFunctionKeyContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

SubPartitionFunctionKeyContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

SubPartitionFunctionKeyContext.prototype.LINEAR = function() {
    return this.getToken(MySQLParser.LINEAR, 0);
};

SubPartitionFunctionKeyContext.prototype.ALGORITHM = function() {
    return this.getToken(MySQLParser.ALGORITHM, 0);
};

SubPartitionFunctionKeyContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

SubPartitionFunctionKeyContext.prototype.ONE_DECIMAL = function() {
    return this.getToken(MySQLParser.ONE_DECIMAL, 0);
};

SubPartitionFunctionKeyContext.prototype.TWO_DECIMAL = function() {
    return this.getToken(MySQLParser.TWO_DECIMAL, 0);
};
SubPartitionFunctionKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSubPartitionFunctionKey(this);
	}
};

SubPartitionFunctionKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSubPartitionFunctionKey(this);
	}
};

SubPartitionFunctionKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSubPartitionFunctionKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.SubpartitionFunctionDefinitionContext = SubpartitionFunctionDefinitionContext;

MySQLParser.prototype.subpartitionFunctionDefinition = function() {

    var localctx = new SubpartitionFunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, MySQLParser.RULE_subpartitionFunctionDefinition);
    var _la = 0; // Token type
    try {
        this.state = 1858;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SubPartitionFunctionHashContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1838;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LINEAR) {
                this.state = 1837;
                this.match(MySQLParser.LINEAR);
            }

            this.state = 1840;
            this.match(MySQLParser.HASH);
            this.state = 1841;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 1842;
            this.expression(0);
            this.state = 1843;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 2:
            localctx = new SubPartitionFunctionKeyContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1846;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LINEAR) {
                this.state = 1845;
                this.match(MySQLParser.LINEAR);
            }

            this.state = 1848;
            this.match(MySQLParser.KEY);
            this.state = 1852;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ALGORITHM) {
                this.state = 1849;
                this.match(MySQLParser.ALGORITHM);
                this.state = 1850;
                this.match(MySQLParser.EQUAL_SYMBOL);
                this.state = 1851;
                localctx.algType = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.ONE_DECIMAL || _la===MySQLParser.TWO_DECIMAL)) {
                    localctx.algType = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1854;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 1855;
            this.uidList();
            this.state = 1856;
            this.match(MySQLParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_partitionDefinition;
    return this;
}

PartitionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionDefinitionContext.prototype.constructor = PartitionDefinitionContext;


 
PartitionDefinitionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PartitionComparisionContext(parser, ctx) {
	PartitionDefinitionContext.call(this, parser);
    PartitionDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionComparisionContext.prototype = Object.create(PartitionDefinitionContext.prototype);
PartitionComparisionContext.prototype.constructor = PartitionComparisionContext;

MySQLParser.PartitionComparisionContext = PartitionComparisionContext;

PartitionComparisionContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

PartitionComparisionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

PartitionComparisionContext.prototype.VALUES = function() {
    return this.getToken(MySQLParser.VALUES, 0);
};

PartitionComparisionContext.prototype.LESS = function() {
    return this.getToken(MySQLParser.LESS, 0);
};

PartitionComparisionContext.prototype.THAN = function() {
    return this.getToken(MySQLParser.THAN, 0);
};

PartitionComparisionContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

PartitionComparisionContext.prototype.partitionDefinerAtom = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionDefinerAtomContext);
    } else {
        return this.getTypedRuleContext(PartitionDefinerAtomContext,i);
    }
};

PartitionComparisionContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

PartitionComparisionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


PartitionComparisionContext.prototype.partitionOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionOptionContext);
    } else {
        return this.getTypedRuleContext(PartitionOptionContext,i);
    }
};

PartitionComparisionContext.prototype.subpartitionDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
    } else {
        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
    }
};
PartitionComparisionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionComparision(this);
	}
};

PartitionComparisionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionComparision(this);
	}
};

PartitionComparisionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionComparision(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PartitionListAtomContext(parser, ctx) {
	PartitionDefinitionContext.call(this, parser);
    PartitionDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionListAtomContext.prototype = Object.create(PartitionDefinitionContext.prototype);
PartitionListAtomContext.prototype.constructor = PartitionListAtomContext;

MySQLParser.PartitionListAtomContext = PartitionListAtomContext;

PartitionListAtomContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

PartitionListAtomContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

PartitionListAtomContext.prototype.VALUES = function() {
    return this.getToken(MySQLParser.VALUES, 0);
};

PartitionListAtomContext.prototype.IN = function() {
    return this.getToken(MySQLParser.IN, 0);
};

PartitionListAtomContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

PartitionListAtomContext.prototype.partitionDefinerAtom = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionDefinerAtomContext);
    } else {
        return this.getTypedRuleContext(PartitionDefinerAtomContext,i);
    }
};

PartitionListAtomContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

PartitionListAtomContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


PartitionListAtomContext.prototype.partitionOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionOptionContext);
    } else {
        return this.getTypedRuleContext(PartitionOptionContext,i);
    }
};

PartitionListAtomContext.prototype.subpartitionDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
    } else {
        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
    }
};
PartitionListAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionListAtom(this);
	}
};

PartitionListAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionListAtom(this);
	}
};

PartitionListAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionListAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PartitionListVectorContext(parser, ctx) {
	PartitionDefinitionContext.call(this, parser);
    PartitionDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionListVectorContext.prototype = Object.create(PartitionDefinitionContext.prototype);
PartitionListVectorContext.prototype.constructor = PartitionListVectorContext;

MySQLParser.PartitionListVectorContext = PartitionListVectorContext;

PartitionListVectorContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

PartitionListVectorContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

PartitionListVectorContext.prototype.VALUES = function() {
    return this.getToken(MySQLParser.VALUES, 0);
};

PartitionListVectorContext.prototype.IN = function() {
    return this.getToken(MySQLParser.IN, 0);
};

PartitionListVectorContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

PartitionListVectorContext.prototype.partitionDefinerVector = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionDefinerVectorContext);
    } else {
        return this.getTypedRuleContext(PartitionDefinerVectorContext,i);
    }
};

PartitionListVectorContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

PartitionListVectorContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


PartitionListVectorContext.prototype.partitionOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionOptionContext);
    } else {
        return this.getTypedRuleContext(PartitionOptionContext,i);
    }
};

PartitionListVectorContext.prototype.subpartitionDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
    } else {
        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
    }
};
PartitionListVectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionListVector(this);
	}
};

PartitionListVectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionListVector(this);
	}
};

PartitionListVectorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionListVector(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PartitionSimpleContext(parser, ctx) {
	PartitionDefinitionContext.call(this, parser);
    PartitionDefinitionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionSimpleContext.prototype = Object.create(PartitionDefinitionContext.prototype);
PartitionSimpleContext.prototype.constructor = PartitionSimpleContext;

MySQLParser.PartitionSimpleContext = PartitionSimpleContext;

PartitionSimpleContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

PartitionSimpleContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

PartitionSimpleContext.prototype.partitionOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionOptionContext);
    } else {
        return this.getTypedRuleContext(PartitionOptionContext,i);
    }
};

PartitionSimpleContext.prototype.subpartitionDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
    } else {
        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
    }
};

PartitionSimpleContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

PartitionSimpleContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionSimple(this);
	}
};

PartitionSimpleContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionSimple(this);
	}
};

PartitionSimpleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionSimple(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.PartitionDefinitionContext = PartitionDefinitionContext;

MySQLParser.prototype.partitionDefinition = function() {

    var localctx = new PartitionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, MySQLParser.RULE_partitionDefinition);
    var _la = 0; // Token type
    try {
        this.state = 1991;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,233,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PartitionComparisionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1860;
            this.match(MySQLParser.PARTITION);
            this.state = 1861;
            this.uid();
            this.state = 1862;
            this.match(MySQLParser.VALUES);
            this.state = 1863;
            this.match(MySQLParser.LESS);
            this.state = 1864;
            this.match(MySQLParser.THAN);
            this.state = 1865;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 1866;
            this.partitionDefinerAtom();
            this.state = 1871;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 1867;
                this.match(MySQLParser.COMMA);
                this.state = 1868;
                this.partitionDefinerAtom();
                this.state = 1873;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1874;
            this.match(MySQLParser.RR_BRACKET);
            this.state = 1878;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.INDEX || _la===MySQLParser.COMMENT || _la===MySQLParser.DATA || _la===MySQLParser.ENGINE || ((((_la - 428)) & ~0x1f) == 0 && ((1 << (_la - 428)) & ((1 << (MySQLParser.MAX_ROWS - 428)) | (1 << (MySQLParser.MIN_ROWS - 428)) | (1 << (MySQLParser.NODEGROUP - 428)))) !== 0) || _la===MySQLParser.STORAGE || _la===MySQLParser.TABLESPACE) {
                this.state = 1875;
                this.partitionOption();
                this.state = 1880;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1889;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.SUBPARTITION) {
                this.state = 1881;
                this.subpartitionDefinition();
                this.state = 1886;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,217,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1882;
                        this.match(MySQLParser.COMMA);
                        this.state = 1883;
                        this.subpartitionDefinition(); 
                    }
                    this.state = 1888;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,217,this._ctx);
                }

            }

            break;

        case 2:
            localctx = new PartitionComparisionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1891;
            this.match(MySQLParser.PARTITION);
            this.state = 1892;
            this.uid();
            this.state = 1893;
            this.match(MySQLParser.VALUES);
            this.state = 1894;
            this.match(MySQLParser.LESS);
            this.state = 1895;
            this.match(MySQLParser.THAN);
            this.state = 1896;
            this.partitionDefinerAtom();
            this.state = 1900;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.INDEX || _la===MySQLParser.COMMENT || _la===MySQLParser.DATA || _la===MySQLParser.ENGINE || ((((_la - 428)) & ~0x1f) == 0 && ((1 << (_la - 428)) & ((1 << (MySQLParser.MAX_ROWS - 428)) | (1 << (MySQLParser.MIN_ROWS - 428)) | (1 << (MySQLParser.NODEGROUP - 428)))) !== 0) || _la===MySQLParser.STORAGE || _la===MySQLParser.TABLESPACE) {
                this.state = 1897;
                this.partitionOption();
                this.state = 1902;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1911;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.SUBPARTITION) {
                this.state = 1903;
                this.subpartitionDefinition();
                this.state = 1908;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,220,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1904;
                        this.match(MySQLParser.COMMA);
                        this.state = 1905;
                        this.subpartitionDefinition(); 
                    }
                    this.state = 1910;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,220,this._ctx);
                }

            }

            break;

        case 3:
            localctx = new PartitionListAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1913;
            this.match(MySQLParser.PARTITION);
            this.state = 1914;
            this.uid();
            this.state = 1915;
            this.match(MySQLParser.VALUES);
            this.state = 1916;
            this.match(MySQLParser.IN);
            this.state = 1917;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 1918;
            this.partitionDefinerAtom();
            this.state = 1923;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 1919;
                this.match(MySQLParser.COMMA);
                this.state = 1920;
                this.partitionDefinerAtom();
                this.state = 1925;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1926;
            this.match(MySQLParser.RR_BRACKET);
            this.state = 1930;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.INDEX || _la===MySQLParser.COMMENT || _la===MySQLParser.DATA || _la===MySQLParser.ENGINE || ((((_la - 428)) & ~0x1f) == 0 && ((1 << (_la - 428)) & ((1 << (MySQLParser.MAX_ROWS - 428)) | (1 << (MySQLParser.MIN_ROWS - 428)) | (1 << (MySQLParser.NODEGROUP - 428)))) !== 0) || _la===MySQLParser.STORAGE || _la===MySQLParser.TABLESPACE) {
                this.state = 1927;
                this.partitionOption();
                this.state = 1932;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1941;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.SUBPARTITION) {
                this.state = 1933;
                this.subpartitionDefinition();
                this.state = 1938;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,224,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1934;
                        this.match(MySQLParser.COMMA);
                        this.state = 1935;
                        this.subpartitionDefinition(); 
                    }
                    this.state = 1940;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,224,this._ctx);
                }

            }

            break;

        case 4:
            localctx = new PartitionListVectorContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1943;
            this.match(MySQLParser.PARTITION);
            this.state = 1944;
            this.uid();
            this.state = 1945;
            this.match(MySQLParser.VALUES);
            this.state = 1946;
            this.match(MySQLParser.IN);
            this.state = 1947;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 1948;
            this.partitionDefinerVector();
            this.state = 1953;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 1949;
                this.match(MySQLParser.COMMA);
                this.state = 1950;
                this.partitionDefinerVector();
                this.state = 1955;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1956;
            this.match(MySQLParser.RR_BRACKET);
            this.state = 1960;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.INDEX || _la===MySQLParser.COMMENT || _la===MySQLParser.DATA || _la===MySQLParser.ENGINE || ((((_la - 428)) & ~0x1f) == 0 && ((1 << (_la - 428)) & ((1 << (MySQLParser.MAX_ROWS - 428)) | (1 << (MySQLParser.MIN_ROWS - 428)) | (1 << (MySQLParser.NODEGROUP - 428)))) !== 0) || _la===MySQLParser.STORAGE || _la===MySQLParser.TABLESPACE) {
                this.state = 1957;
                this.partitionOption();
                this.state = 1962;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1971;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.SUBPARTITION) {
                this.state = 1963;
                this.subpartitionDefinition();
                this.state = 1968;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,228,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1964;
                        this.match(MySQLParser.COMMA);
                        this.state = 1965;
                        this.subpartitionDefinition(); 
                    }
                    this.state = 1970;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,228,this._ctx);
                }

            }

            break;

        case 5:
            localctx = new PartitionSimpleContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1973;
            this.match(MySQLParser.PARTITION);
            this.state = 1974;
            this.uid();
            this.state = 1978;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.INDEX || _la===MySQLParser.COMMENT || _la===MySQLParser.DATA || _la===MySQLParser.ENGINE || ((((_la - 428)) & ~0x1f) == 0 && ((1 << (_la - 428)) & ((1 << (MySQLParser.MAX_ROWS - 428)) | (1 << (MySQLParser.MIN_ROWS - 428)) | (1 << (MySQLParser.NODEGROUP - 428)))) !== 0) || _la===MySQLParser.STORAGE || _la===MySQLParser.TABLESPACE) {
                this.state = 1975;
                this.partitionOption();
                this.state = 1980;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1989;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.SUBPARTITION) {
                this.state = 1981;
                this.subpartitionDefinition();
                this.state = 1986;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,231,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1982;
                        this.match(MySQLParser.COMMA);
                        this.state = 1983;
                        this.subpartitionDefinition(); 
                    }
                    this.state = 1988;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,231,this._ctx);
                }

            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionDefinerAtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_partitionDefinerAtom;
    return this;
}

PartitionDefinerAtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionDefinerAtomContext.prototype.constructor = PartitionDefinerAtomContext;

PartitionDefinerAtomContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

PartitionDefinerAtomContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PartitionDefinerAtomContext.prototype.MAXVALUE = function() {
    return this.getToken(MySQLParser.MAXVALUE, 0);
};

PartitionDefinerAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionDefinerAtom(this);
	}
};

PartitionDefinerAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionDefinerAtom(this);
	}
};

PartitionDefinerAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionDefinerAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PartitionDefinerAtomContext = PartitionDefinerAtomContext;

MySQLParser.prototype.partitionDefinerAtom = function() {

    var localctx = new PartitionDefinerAtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, MySQLParser.RULE_partitionDefinerAtom);
    try {
        this.state = 1996;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1993;
            this.constant();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1994;
            this.expression(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1995;
            this.match(MySQLParser.MAXVALUE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionDefinerVectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_partitionDefinerVector;
    return this;
}

PartitionDefinerVectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionDefinerVectorContext.prototype.constructor = PartitionDefinerVectorContext;

PartitionDefinerVectorContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

PartitionDefinerVectorContext.prototype.partitionDefinerAtom = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionDefinerAtomContext);
    } else {
        return this.getTypedRuleContext(PartitionDefinerAtomContext,i);
    }
};

PartitionDefinerVectorContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

PartitionDefinerVectorContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


PartitionDefinerVectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionDefinerVector(this);
	}
};

PartitionDefinerVectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionDefinerVector(this);
	}
};

PartitionDefinerVectorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionDefinerVector(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PartitionDefinerVectorContext = PartitionDefinerVectorContext;

MySQLParser.prototype.partitionDefinerVector = function() {

    var localctx = new PartitionDefinerVectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, MySQLParser.RULE_partitionDefinerVector);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1998;
        this.match(MySQLParser.LR_BRACKET);
        this.state = 1999;
        this.partitionDefinerAtom();
        this.state = 2002; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2000;
            this.match(MySQLParser.COMMA);
            this.state = 2001;
            this.partitionDefinerAtom();
            this.state = 2004; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===MySQLParser.COMMA);
        this.state = 2006;
        this.match(MySQLParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubpartitionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_subpartitionDefinition;
    return this;
}

SubpartitionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubpartitionDefinitionContext.prototype.constructor = SubpartitionDefinitionContext;

SubpartitionDefinitionContext.prototype.SUBPARTITION = function() {
    return this.getToken(MySQLParser.SUBPARTITION, 0);
};

SubpartitionDefinitionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

SubpartitionDefinitionContext.prototype.partitionOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionOptionContext);
    } else {
        return this.getTypedRuleContext(PartitionOptionContext,i);
    }
};

SubpartitionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSubpartitionDefinition(this);
	}
};

SubpartitionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSubpartitionDefinition(this);
	}
};

SubpartitionDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSubpartitionDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SubpartitionDefinitionContext = SubpartitionDefinitionContext;

MySQLParser.prototype.subpartitionDefinition = function() {

    var localctx = new SubpartitionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, MySQLParser.RULE_subpartitionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2008;
        this.match(MySQLParser.SUBPARTITION);
        this.state = 2009;
        this.uid();
        this.state = 2013;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.INDEX || _la===MySQLParser.COMMENT || _la===MySQLParser.DATA || _la===MySQLParser.ENGINE || ((((_la - 428)) & ~0x1f) == 0 && ((1 << (_la - 428)) & ((1 << (MySQLParser.MAX_ROWS - 428)) | (1 << (MySQLParser.MIN_ROWS - 428)) | (1 << (MySQLParser.NODEGROUP - 428)))) !== 0) || _la===MySQLParser.STORAGE || _la===MySQLParser.TABLESPACE) {
            this.state = 2010;
            this.partitionOption();
            this.state = 2015;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_partitionOption;
    return this;
}

PartitionOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionOptionContext.prototype.constructor = PartitionOptionContext;


 
PartitionOptionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PartitionOptionCommentContext(parser, ctx) {
	PartitionOptionContext.call(this, parser);
    this.comment = null; // Token;
    PartitionOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionOptionCommentContext.prototype = Object.create(PartitionOptionContext.prototype);
PartitionOptionCommentContext.prototype.constructor = PartitionOptionCommentContext;

MySQLParser.PartitionOptionCommentContext = PartitionOptionCommentContext;

PartitionOptionCommentContext.prototype.COMMENT = function() {
    return this.getToken(MySQLParser.COMMENT, 0);
};

PartitionOptionCommentContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

PartitionOptionCommentContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
PartitionOptionCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionOptionComment(this);
	}
};

PartitionOptionCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionOptionComment(this);
	}
};

PartitionOptionCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionOptionComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PartitionOptionNodeGroupContext(parser, ctx) {
	PartitionOptionContext.call(this, parser);
    this.nodegroup = null; // UidContext;
    PartitionOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionOptionNodeGroupContext.prototype = Object.create(PartitionOptionContext.prototype);
PartitionOptionNodeGroupContext.prototype.constructor = PartitionOptionNodeGroupContext;

MySQLParser.PartitionOptionNodeGroupContext = PartitionOptionNodeGroupContext;

PartitionOptionNodeGroupContext.prototype.NODEGROUP = function() {
    return this.getToken(MySQLParser.NODEGROUP, 0);
};

PartitionOptionNodeGroupContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

PartitionOptionNodeGroupContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
PartitionOptionNodeGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionOptionNodeGroup(this);
	}
};

PartitionOptionNodeGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionOptionNodeGroup(this);
	}
};

PartitionOptionNodeGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionOptionNodeGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PartitionOptionIndexDirectoryContext(parser, ctx) {
	PartitionOptionContext.call(this, parser);
    this.indexDirectory = null; // Token;
    PartitionOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionOptionIndexDirectoryContext.prototype = Object.create(PartitionOptionContext.prototype);
PartitionOptionIndexDirectoryContext.prototype.constructor = PartitionOptionIndexDirectoryContext;

MySQLParser.PartitionOptionIndexDirectoryContext = PartitionOptionIndexDirectoryContext;

PartitionOptionIndexDirectoryContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

PartitionOptionIndexDirectoryContext.prototype.DIRECTORY = function() {
    return this.getToken(MySQLParser.DIRECTORY, 0);
};

PartitionOptionIndexDirectoryContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

PartitionOptionIndexDirectoryContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
PartitionOptionIndexDirectoryContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionOptionIndexDirectory(this);
	}
};

PartitionOptionIndexDirectoryContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionOptionIndexDirectory(this);
	}
};

PartitionOptionIndexDirectoryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionOptionIndexDirectory(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PartitionOptionMaxRowsContext(parser, ctx) {
	PartitionOptionContext.call(this, parser);
    this.maxRows = null; // DecimalLiteralContext;
    PartitionOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionOptionMaxRowsContext.prototype = Object.create(PartitionOptionContext.prototype);
PartitionOptionMaxRowsContext.prototype.constructor = PartitionOptionMaxRowsContext;

MySQLParser.PartitionOptionMaxRowsContext = PartitionOptionMaxRowsContext;

PartitionOptionMaxRowsContext.prototype.MAX_ROWS = function() {
    return this.getToken(MySQLParser.MAX_ROWS, 0);
};

PartitionOptionMaxRowsContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

PartitionOptionMaxRowsContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
PartitionOptionMaxRowsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionOptionMaxRows(this);
	}
};

PartitionOptionMaxRowsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionOptionMaxRows(this);
	}
};

PartitionOptionMaxRowsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionOptionMaxRows(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PartitionOptionTablespaceContext(parser, ctx) {
	PartitionOptionContext.call(this, parser);
    this.tablespace = null; // UidContext;
    PartitionOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionOptionTablespaceContext.prototype = Object.create(PartitionOptionContext.prototype);
PartitionOptionTablespaceContext.prototype.constructor = PartitionOptionTablespaceContext;

MySQLParser.PartitionOptionTablespaceContext = PartitionOptionTablespaceContext;

PartitionOptionTablespaceContext.prototype.TABLESPACE = function() {
    return this.getToken(MySQLParser.TABLESPACE, 0);
};

PartitionOptionTablespaceContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

PartitionOptionTablespaceContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
PartitionOptionTablespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionOptionTablespace(this);
	}
};

PartitionOptionTablespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionOptionTablespace(this);
	}
};

PartitionOptionTablespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionOptionTablespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PartitionOptionEngineContext(parser, ctx) {
	PartitionOptionContext.call(this, parser);
    PartitionOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionOptionEngineContext.prototype = Object.create(PartitionOptionContext.prototype);
PartitionOptionEngineContext.prototype.constructor = PartitionOptionEngineContext;

MySQLParser.PartitionOptionEngineContext = PartitionOptionEngineContext;

PartitionOptionEngineContext.prototype.ENGINE = function() {
    return this.getToken(MySQLParser.ENGINE, 0);
};

PartitionOptionEngineContext.prototype.engineName = function() {
    return this.getTypedRuleContext(EngineNameContext,0);
};

PartitionOptionEngineContext.prototype.STORAGE = function() {
    return this.getToken(MySQLParser.STORAGE, 0);
};

PartitionOptionEngineContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
PartitionOptionEngineContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionOptionEngine(this);
	}
};

PartitionOptionEngineContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionOptionEngine(this);
	}
};

PartitionOptionEngineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionOptionEngine(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PartitionOptionMinRowsContext(parser, ctx) {
	PartitionOptionContext.call(this, parser);
    this.minRows = null; // DecimalLiteralContext;
    PartitionOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionOptionMinRowsContext.prototype = Object.create(PartitionOptionContext.prototype);
PartitionOptionMinRowsContext.prototype.constructor = PartitionOptionMinRowsContext;

MySQLParser.PartitionOptionMinRowsContext = PartitionOptionMinRowsContext;

PartitionOptionMinRowsContext.prototype.MIN_ROWS = function() {
    return this.getToken(MySQLParser.MIN_ROWS, 0);
};

PartitionOptionMinRowsContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

PartitionOptionMinRowsContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
PartitionOptionMinRowsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionOptionMinRows(this);
	}
};

PartitionOptionMinRowsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionOptionMinRows(this);
	}
};

PartitionOptionMinRowsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionOptionMinRows(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PartitionOptionDataDirectoryContext(parser, ctx) {
	PartitionOptionContext.call(this, parser);
    this.dataDirectory = null; // Token;
    PartitionOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PartitionOptionDataDirectoryContext.prototype = Object.create(PartitionOptionContext.prototype);
PartitionOptionDataDirectoryContext.prototype.constructor = PartitionOptionDataDirectoryContext;

MySQLParser.PartitionOptionDataDirectoryContext = PartitionOptionDataDirectoryContext;

PartitionOptionDataDirectoryContext.prototype.DATA = function() {
    return this.getToken(MySQLParser.DATA, 0);
};

PartitionOptionDataDirectoryContext.prototype.DIRECTORY = function() {
    return this.getToken(MySQLParser.DIRECTORY, 0);
};

PartitionOptionDataDirectoryContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

PartitionOptionDataDirectoryContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
PartitionOptionDataDirectoryContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPartitionOptionDataDirectory(this);
	}
};

PartitionOptionDataDirectoryContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPartitionOptionDataDirectory(this);
	}
};

PartitionOptionDataDirectoryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPartitionOptionDataDirectory(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.PartitionOptionContext = PartitionOptionContext;

MySQLParser.prototype.partitionOption = function() {

    var localctx = new PartitionOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, MySQLParser.RULE_partitionOption);
    var _la = 0; // Token type
    try {
        this.state = 2061;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ENGINE:
        case MySQLParser.STORAGE:
            localctx = new PartitionOptionEngineContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2017;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.STORAGE) {
                this.state = 2016;
                this.match(MySQLParser.STORAGE);
            }

            this.state = 2019;
            this.match(MySQLParser.ENGINE);
            this.state = 2021;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 2020;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 2023;
            this.engineName();
            break;
        case MySQLParser.COMMENT:
            localctx = new PartitionOptionCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2024;
            this.match(MySQLParser.COMMENT);
            this.state = 2026;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 2025;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 2028;
            localctx.comment = this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.DATA:
            localctx = new PartitionOptionDataDirectoryContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2029;
            this.match(MySQLParser.DATA);
            this.state = 2030;
            this.match(MySQLParser.DIRECTORY);
            this.state = 2032;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 2031;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 2034;
            localctx.dataDirectory = this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.INDEX:
            localctx = new PartitionOptionIndexDirectoryContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2035;
            this.match(MySQLParser.INDEX);
            this.state = 2036;
            this.match(MySQLParser.DIRECTORY);
            this.state = 2038;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 2037;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 2040;
            localctx.indexDirectory = this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.MAX_ROWS:
            localctx = new PartitionOptionMaxRowsContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2041;
            this.match(MySQLParser.MAX_ROWS);
            this.state = 2043;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 2042;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 2045;
            localctx.maxRows = this.decimalLiteral();
            break;
        case MySQLParser.MIN_ROWS:
            localctx = new PartitionOptionMinRowsContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 2046;
            this.match(MySQLParser.MIN_ROWS);
            this.state = 2048;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 2047;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 2050;
            localctx.minRows = this.decimalLiteral();
            break;
        case MySQLParser.TABLESPACE:
            localctx = new PartitionOptionTablespaceContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 2051;
            this.match(MySQLParser.TABLESPACE);
            this.state = 2053;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 2052;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 2055;
            localctx.tablespace = this.uid();
            break;
        case MySQLParser.NODEGROUP:
            localctx = new PartitionOptionNodeGroupContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 2056;
            this.match(MySQLParser.NODEGROUP);
            this.state = 2058;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 2057;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 2060;
            localctx.nodegroup = this.uid();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterDatabase;
    return this;
}

AlterDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterDatabaseContext.prototype.constructor = AlterDatabaseContext;


 
AlterDatabaseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AlterUpgradeNameContext(parser, ctx) {
	AlterDatabaseContext.call(this, parser);
    this.dbFormat = null; // Token;
    AlterDatabaseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterUpgradeNameContext.prototype = Object.create(AlterDatabaseContext.prototype);
AlterUpgradeNameContext.prototype.constructor = AlterUpgradeNameContext;

MySQLParser.AlterUpgradeNameContext = AlterUpgradeNameContext;

AlterUpgradeNameContext.prototype.ALTER = function() {
    return this.getToken(MySQLParser.ALTER, 0);
};

AlterUpgradeNameContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterUpgradeNameContext.prototype.UPGRADE = function() {
    return this.getToken(MySQLParser.UPGRADE, 0);
};

AlterUpgradeNameContext.prototype.DATA = function() {
    return this.getToken(MySQLParser.DATA, 0);
};

AlterUpgradeNameContext.prototype.DIRECTORY = function() {
    return this.getToken(MySQLParser.DIRECTORY, 0);
};

AlterUpgradeNameContext.prototype.NAME = function() {
    return this.getToken(MySQLParser.NAME, 0);
};

AlterUpgradeNameContext.prototype.DATABASE = function() {
    return this.getToken(MySQLParser.DATABASE, 0);
};

AlterUpgradeNameContext.prototype.SCHEMA = function() {
    return this.getToken(MySQLParser.SCHEMA, 0);
};
AlterUpgradeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterUpgradeName(this);
	}
};

AlterUpgradeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterUpgradeName(this);
	}
};

AlterUpgradeNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterUpgradeName(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterSimpleDatabaseContext(parser, ctx) {
	AlterDatabaseContext.call(this, parser);
    this.dbFormat = null; // Token;
    AlterDatabaseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterSimpleDatabaseContext.prototype = Object.create(AlterDatabaseContext.prototype);
AlterSimpleDatabaseContext.prototype.constructor = AlterSimpleDatabaseContext;

MySQLParser.AlterSimpleDatabaseContext = AlterSimpleDatabaseContext;

AlterSimpleDatabaseContext.prototype.ALTER = function() {
    return this.getToken(MySQLParser.ALTER, 0);
};

AlterSimpleDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(MySQLParser.DATABASE, 0);
};

AlterSimpleDatabaseContext.prototype.SCHEMA = function() {
    return this.getToken(MySQLParser.SCHEMA, 0);
};

AlterSimpleDatabaseContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterSimpleDatabaseContext.prototype.createDatabaseOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CreateDatabaseOptionContext);
    } else {
        return this.getTypedRuleContext(CreateDatabaseOptionContext,i);
    }
};
AlterSimpleDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterSimpleDatabase(this);
	}
};

AlterSimpleDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterSimpleDatabase(this);
	}
};

AlterSimpleDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterSimpleDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.AlterDatabaseContext = AlterDatabaseContext;

MySQLParser.prototype.alterDatabase = function() {

    var localctx = new AlterDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, MySQLParser.RULE_alterDatabase);
    var _la = 0; // Token type
    try {
        this.state = 2081;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AlterSimpleDatabaseContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2063;
            this.match(MySQLParser.ALTER);
            this.state = 2064;
            localctx.dbFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DATABASE || _la===MySQLParser.SCHEMA)) {
                localctx.dbFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2066;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
            if(la_===1) {
                this.state = 2065;
                this.uid();

            }
            this.state = 2069; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2068;
                this.createDatabaseOption();
                this.state = 2071; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 22)) & ~0x1f) == 0 && ((1 << (_la - 22)) & ((1 << (MySQLParser.CHARACTER - 22)) | (1 << (MySQLParser.COLLATE - 22)) | (1 << (MySQLParser.DEFAULT - 22)))) !== 0) || _la===MySQLParser.CHARSET);
            break;

        case 2:
            localctx = new AlterUpgradeNameContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2073;
            this.match(MySQLParser.ALTER);
            this.state = 2074;
            localctx.dbFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DATABASE || _la===MySQLParser.SCHEMA)) {
                localctx.dbFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2075;
            this.uid();
            this.state = 2076;
            this.match(MySQLParser.UPGRADE);
            this.state = 2077;
            this.match(MySQLParser.DATA);
            this.state = 2078;
            this.match(MySQLParser.DIRECTORY);
            this.state = 2079;
            this.match(MySQLParser.NAME);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterEventContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterEvent;
    return this;
}

AlterEventContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterEventContext.prototype.constructor = AlterEventContext;

AlterEventContext.prototype.ALTER = function() {
    return this.getToken(MySQLParser.ALTER, 0);
};

AlterEventContext.prototype.EVENT = function() {
    return this.getToken(MySQLParser.EVENT, 0);
};

AlterEventContext.prototype.fullId = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FullIdContext);
    } else {
        return this.getTypedRuleContext(FullIdContext,i);
    }
};

AlterEventContext.prototype.ownerStatement = function() {
    return this.getTypedRuleContext(OwnerStatementContext,0);
};

AlterEventContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.ON);
    } else {
        return this.getToken(MySQLParser.ON, i);
    }
};


AlterEventContext.prototype.SCHEDULE = function() {
    return this.getToken(MySQLParser.SCHEDULE, 0);
};

AlterEventContext.prototype.scheduleExpression = function() {
    return this.getTypedRuleContext(ScheduleExpressionContext,0);
};

AlterEventContext.prototype.COMPLETION = function() {
    return this.getToken(MySQLParser.COMPLETION, 0);
};

AlterEventContext.prototype.PRESERVE = function() {
    return this.getToken(MySQLParser.PRESERVE, 0);
};

AlterEventContext.prototype.RENAME = function() {
    return this.getToken(MySQLParser.RENAME, 0);
};

AlterEventContext.prototype.TO = function() {
    return this.getToken(MySQLParser.TO, 0);
};

AlterEventContext.prototype.enableType = function() {
    return this.getTypedRuleContext(EnableTypeContext,0);
};

AlterEventContext.prototype.COMMENT = function() {
    return this.getToken(MySQLParser.COMMENT, 0);
};

AlterEventContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

AlterEventContext.prototype.DO = function() {
    return this.getToken(MySQLParser.DO, 0);
};

AlterEventContext.prototype.routineBody = function() {
    return this.getTypedRuleContext(RoutineBodyContext,0);
};

AlterEventContext.prototype.NOT = function() {
    return this.getToken(MySQLParser.NOT, 0);
};

AlterEventContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterEvent(this);
	}
};

AlterEventContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterEvent(this);
	}
};

AlterEventContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterEvent(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterEventContext = AlterEventContext;

MySQLParser.prototype.alterEvent = function() {

    var localctx = new AlterEventContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, MySQLParser.RULE_alterEvent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2083;
        this.match(MySQLParser.ALTER);
        this.state = 2085;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFINER) {
            this.state = 2084;
            this.ownerStatement();
        }

        this.state = 2087;
        this.match(MySQLParser.EVENT);
        this.state = 2088;
        this.fullId();
        this.state = 2092;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
        if(la_===1) {
            this.state = 2089;
            this.match(MySQLParser.ON);
            this.state = 2090;
            this.match(MySQLParser.SCHEDULE);
            this.state = 2091;
            this.scheduleExpression();

        }
        this.state = 2100;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ON) {
            this.state = 2094;
            this.match(MySQLParser.ON);
            this.state = 2095;
            this.match(MySQLParser.COMPLETION);
            this.state = 2097;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NOT) {
                this.state = 2096;
                this.match(MySQLParser.NOT);
            }

            this.state = 2099;
            this.match(MySQLParser.PRESERVE);
        }

        this.state = 2105;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
        if(la_===1) {
            this.state = 2102;
            this.match(MySQLParser.RENAME);
            this.state = 2103;
            this.match(MySQLParser.TO);
            this.state = 2104;
            this.fullId();

        }
        this.state = 2108;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DISABLE || _la===MySQLParser.ENABLE) {
            this.state = 2107;
            this.enableType();
        }

        this.state = 2112;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.COMMENT) {
            this.state = 2110;
            this.match(MySQLParser.COMMENT);
            this.state = 2111;
            this.match(MySQLParser.STRING_LITERAL);
        }

        this.state = 2116;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
        if(la_===1) {
            this.state = 2114;
            this.match(MySQLParser.DO);
            this.state = 2115;
            this.routineBody();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterFunction;
    return this;
}

AlterFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterFunctionContext.prototype.constructor = AlterFunctionContext;

AlterFunctionContext.prototype.ALTER = function() {
    return this.getToken(MySQLParser.ALTER, 0);
};

AlterFunctionContext.prototype.FUNCTION = function() {
    return this.getToken(MySQLParser.FUNCTION, 0);
};

AlterFunctionContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

AlterFunctionContext.prototype.routineOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RoutineOptionContext);
    } else {
        return this.getTypedRuleContext(RoutineOptionContext,i);
    }
};

AlterFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterFunction(this);
	}
};

AlterFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterFunction(this);
	}
};

AlterFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterFunctionContext = AlterFunctionContext;

MySQLParser.prototype.alterFunction = function() {

    var localctx = new AlterFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, MySQLParser.RULE_alterFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2118;
        this.match(MySQLParser.ALTER);
        this.state = 2119;
        this.match(MySQLParser.FUNCTION);
        this.state = 2120;
        this.fullId();
        this.state = 2124;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.DETERMINISTIC || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (MySQLParser.MODIFIES - 100)) | (1 << (MySQLParser.NOT - 100)) | (1 << (MySQLParser.READS - 100)))) !== 0) || _la===MySQLParser.SQL || _la===MySQLParser.COMMENT || _la===MySQLParser.CONTAINS || _la===MySQLParser.LANGUAGE || _la===MySQLParser.NO) {
            this.state = 2121;
            this.routineOption();
            this.state = 2126;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterInstanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterInstance;
    return this;
}

AlterInstanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterInstanceContext.prototype.constructor = AlterInstanceContext;

AlterInstanceContext.prototype.ALTER = function() {
    return this.getToken(MySQLParser.ALTER, 0);
};

AlterInstanceContext.prototype.INSTANCE = function() {
    return this.getToken(MySQLParser.INSTANCE, 0);
};

AlterInstanceContext.prototype.ROTATE = function() {
    return this.getToken(MySQLParser.ROTATE, 0);
};

AlterInstanceContext.prototype.INNODB = function() {
    return this.getToken(MySQLParser.INNODB, 0);
};

AlterInstanceContext.prototype.MASTER = function() {
    return this.getToken(MySQLParser.MASTER, 0);
};

AlterInstanceContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};

AlterInstanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterInstance(this);
	}
};

AlterInstanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterInstance(this);
	}
};

AlterInstanceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterInstance(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterInstanceContext = AlterInstanceContext;

MySQLParser.prototype.alterInstance = function() {

    var localctx = new AlterInstanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, MySQLParser.RULE_alterInstance);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2127;
        this.match(MySQLParser.ALTER);
        this.state = 2128;
        this.match(MySQLParser.INSTANCE);
        this.state = 2129;
        this.match(MySQLParser.ROTATE);
        this.state = 2130;
        this.match(MySQLParser.INNODB);
        this.state = 2131;
        this.match(MySQLParser.MASTER);
        this.state = 2132;
        this.match(MySQLParser.KEY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterLogfileGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterLogfileGroup;
    return this;
}

AlterLogfileGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterLogfileGroupContext.prototype.constructor = AlterLogfileGroupContext;

AlterLogfileGroupContext.prototype.ALTER = function() {
    return this.getToken(MySQLParser.ALTER, 0);
};

AlterLogfileGroupContext.prototype.LOGFILE = function() {
    return this.getToken(MySQLParser.LOGFILE, 0);
};

AlterLogfileGroupContext.prototype.GROUP = function() {
    return this.getToken(MySQLParser.GROUP, 0);
};

AlterLogfileGroupContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterLogfileGroupContext.prototype.ADD = function() {
    return this.getToken(MySQLParser.ADD, 0);
};

AlterLogfileGroupContext.prototype.UNDOFILE = function() {
    return this.getToken(MySQLParser.UNDOFILE, 0);
};

AlterLogfileGroupContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

AlterLogfileGroupContext.prototype.ENGINE = function() {
    return this.getToken(MySQLParser.ENGINE, 0);
};

AlterLogfileGroupContext.prototype.engineName = function() {
    return this.getTypedRuleContext(EngineNameContext,0);
};

AlterLogfileGroupContext.prototype.INITIAL_SIZE = function() {
    return this.getToken(MySQLParser.INITIAL_SIZE, 0);
};

AlterLogfileGroupContext.prototype.fileSizeLiteral = function() {
    return this.getTypedRuleContext(FileSizeLiteralContext,0);
};

AlterLogfileGroupContext.prototype.WAIT = function() {
    return this.getToken(MySQLParser.WAIT, 0);
};

AlterLogfileGroupContext.prototype.EQUAL_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.EQUAL_SYMBOL);
    } else {
        return this.getToken(MySQLParser.EQUAL_SYMBOL, i);
    }
};


AlterLogfileGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterLogfileGroup(this);
	}
};

AlterLogfileGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterLogfileGroup(this);
	}
};

AlterLogfileGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterLogfileGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterLogfileGroupContext = AlterLogfileGroupContext;

MySQLParser.prototype.alterLogfileGroup = function() {

    var localctx = new AlterLogfileGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, MySQLParser.RULE_alterLogfileGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2134;
        this.match(MySQLParser.ALTER);
        this.state = 2135;
        this.match(MySQLParser.LOGFILE);
        this.state = 2136;
        this.match(MySQLParser.GROUP);
        this.state = 2137;
        this.uid();
        this.state = 2138;
        this.match(MySQLParser.ADD);
        this.state = 2139;
        this.match(MySQLParser.UNDOFILE);
        this.state = 2140;
        this.match(MySQLParser.STRING_LITERAL);
        this.state = 2146;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.INITIAL_SIZE) {
            this.state = 2141;
            this.match(MySQLParser.INITIAL_SIZE);
            this.state = 2143;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 2142;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 2145;
            this.fileSizeLiteral();
        }

        this.state = 2149;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WAIT) {
            this.state = 2148;
            this.match(MySQLParser.WAIT);
        }

        this.state = 2151;
        this.match(MySQLParser.ENGINE);
        this.state = 2153;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.EQUAL_SYMBOL) {
            this.state = 2152;
            this.match(MySQLParser.EQUAL_SYMBOL);
        }

        this.state = 2155;
        this.engineName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterProcedureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterProcedure;
    return this;
}

AlterProcedureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterProcedureContext.prototype.constructor = AlterProcedureContext;

AlterProcedureContext.prototype.ALTER = function() {
    return this.getToken(MySQLParser.ALTER, 0);
};

AlterProcedureContext.prototype.PROCEDURE = function() {
    return this.getToken(MySQLParser.PROCEDURE, 0);
};

AlterProcedureContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

AlterProcedureContext.prototype.routineOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RoutineOptionContext);
    } else {
        return this.getTypedRuleContext(RoutineOptionContext,i);
    }
};

AlterProcedureContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterProcedure(this);
	}
};

AlterProcedureContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterProcedure(this);
	}
};

AlterProcedureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterProcedure(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterProcedureContext = AlterProcedureContext;

MySQLParser.prototype.alterProcedure = function() {

    var localctx = new AlterProcedureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, MySQLParser.RULE_alterProcedure);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2157;
        this.match(MySQLParser.ALTER);
        this.state = 2158;
        this.match(MySQLParser.PROCEDURE);
        this.state = 2159;
        this.fullId();
        this.state = 2163;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.DETERMINISTIC || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (MySQLParser.MODIFIES - 100)) | (1 << (MySQLParser.NOT - 100)) | (1 << (MySQLParser.READS - 100)))) !== 0) || _la===MySQLParser.SQL || _la===MySQLParser.COMMENT || _la===MySQLParser.CONTAINS || _la===MySQLParser.LANGUAGE || _la===MySQLParser.NO) {
            this.state = 2160;
            this.routineOption();
            this.state = 2165;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterServerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterServer;
    return this;
}

AlterServerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterServerContext.prototype.constructor = AlterServerContext;

AlterServerContext.prototype.ALTER = function() {
    return this.getToken(MySQLParser.ALTER, 0);
};

AlterServerContext.prototype.SERVER = function() {
    return this.getToken(MySQLParser.SERVER, 0);
};

AlterServerContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterServerContext.prototype.OPTIONS = function() {
    return this.getToken(MySQLParser.OPTIONS, 0);
};

AlterServerContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

AlterServerContext.prototype.serverOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ServerOptionContext);
    } else {
        return this.getTypedRuleContext(ServerOptionContext,i);
    }
};

AlterServerContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

AlterServerContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


AlterServerContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterServer(this);
	}
};

AlterServerContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterServer(this);
	}
};

AlterServerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterServer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterServerContext = AlterServerContext;

MySQLParser.prototype.alterServer = function() {

    var localctx = new AlterServerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, MySQLParser.RULE_alterServer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2166;
        this.match(MySQLParser.ALTER);
        this.state = 2167;
        this.match(MySQLParser.SERVER);
        this.state = 2168;
        this.uid();
        this.state = 2169;
        this.match(MySQLParser.OPTIONS);
        this.state = 2170;
        this.match(MySQLParser.LR_BRACKET);
        this.state = 2171;
        this.serverOption();
        this.state = 2176;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 2172;
            this.match(MySQLParser.COMMA);
            this.state = 2173;
            this.serverOption();
            this.state = 2178;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2179;
        this.match(MySQLParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterTable;
    this.intimeAction = null; // Token
    return this;
}

AlterTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableContext.prototype.constructor = AlterTableContext;

AlterTableContext.prototype.ALTER = function() {
    return this.getToken(MySQLParser.ALTER, 0);
};

AlterTableContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

AlterTableContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

AlterTableContext.prototype.IGNORE = function() {
    return this.getToken(MySQLParser.IGNORE, 0);
};

AlterTableContext.prototype.alterSpecification = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AlterSpecificationContext);
    } else {
        return this.getTypedRuleContext(AlterSpecificationContext,i);
    }
};

AlterTableContext.prototype.partitionDefinitions = function() {
    return this.getTypedRuleContext(PartitionDefinitionsContext,0);
};

AlterTableContext.prototype.ONLINE = function() {
    return this.getToken(MySQLParser.ONLINE, 0);
};

AlterTableContext.prototype.OFFLINE = function() {
    return this.getToken(MySQLParser.OFFLINE, 0);
};

AlterTableContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


AlterTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterTable(this);
	}
};

AlterTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterTable(this);
	}
};

AlterTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterTableContext = AlterTableContext;

MySQLParser.prototype.alterTable = function() {

    var localctx = new AlterTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, MySQLParser.RULE_alterTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2181;
        this.match(MySQLParser.ALTER);
        this.state = 2183;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.OFFLINE || _la===MySQLParser.ONLINE) {
            this.state = 2182;
            localctx.intimeAction = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.OFFLINE || _la===MySQLParser.ONLINE)) {
                localctx.intimeAction = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2186;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IGNORE) {
            this.state = 2185;
            this.match(MySQLParser.IGNORE);
        }

        this.state = 2188;
        this.match(MySQLParser.TABLE);
        this.state = 2189;
        this.tableName();
        this.state = 2198;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
        if(la_===1) {
            this.state = 2190;
            this.alterSpecification();
            this.state = 2195;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 2191;
                this.match(MySQLParser.COMMA);
                this.state = 2192;
                this.alterSpecification();
                this.state = 2197;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
        this.state = 2201;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.PARTITION) {
            this.state = 2200;
            this.partitionDefinitions();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTablespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterTablespace;
    this.objectAction = null; // Token
    return this;
}

AlterTablespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTablespaceContext.prototype.constructor = AlterTablespaceContext;

AlterTablespaceContext.prototype.ALTER = function() {
    return this.getToken(MySQLParser.ALTER, 0);
};

AlterTablespaceContext.prototype.TABLESPACE = function() {
    return this.getToken(MySQLParser.TABLESPACE, 0);
};

AlterTablespaceContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterTablespaceContext.prototype.DATAFILE = function() {
    return this.getToken(MySQLParser.DATAFILE, 0);
};

AlterTablespaceContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

AlterTablespaceContext.prototype.ENGINE = function() {
    return this.getToken(MySQLParser.ENGINE, 0);
};

AlterTablespaceContext.prototype.engineName = function() {
    return this.getTypedRuleContext(EngineNameContext,0);
};

AlterTablespaceContext.prototype.ADD = function() {
    return this.getToken(MySQLParser.ADD, 0);
};

AlterTablespaceContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

AlterTablespaceContext.prototype.INITIAL_SIZE = function() {
    return this.getToken(MySQLParser.INITIAL_SIZE, 0);
};

AlterTablespaceContext.prototype.EQUAL_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.EQUAL_SYMBOL);
    } else {
        return this.getToken(MySQLParser.EQUAL_SYMBOL, i);
    }
};


AlterTablespaceContext.prototype.fileSizeLiteral = function() {
    return this.getTypedRuleContext(FileSizeLiteralContext,0);
};

AlterTablespaceContext.prototype.WAIT = function() {
    return this.getToken(MySQLParser.WAIT, 0);
};

AlterTablespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterTablespace(this);
	}
};

AlterTablespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterTablespace(this);
	}
};

AlterTablespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterTablespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterTablespaceContext = AlterTablespaceContext;

MySQLParser.prototype.alterTablespace = function() {

    var localctx = new AlterTablespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, MySQLParser.RULE_alterTablespace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2203;
        this.match(MySQLParser.ALTER);
        this.state = 2204;
        this.match(MySQLParser.TABLESPACE);
        this.state = 2205;
        this.uid();
        this.state = 2206;
        localctx.objectAction = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.ADD || _la===MySQLParser.DROP)) {
            localctx.objectAction = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2207;
        this.match(MySQLParser.DATAFILE);
        this.state = 2208;
        this.match(MySQLParser.STRING_LITERAL);
        this.state = 2212;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.INITIAL_SIZE) {
            this.state = 2209;
            this.match(MySQLParser.INITIAL_SIZE);
            this.state = 2210;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 2211;
            this.fileSizeLiteral();
        }

        this.state = 2215;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WAIT) {
            this.state = 2214;
            this.match(MySQLParser.WAIT);
        }

        this.state = 2217;
        this.match(MySQLParser.ENGINE);
        this.state = 2219;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.EQUAL_SYMBOL) {
            this.state = 2218;
            this.match(MySQLParser.EQUAL_SYMBOL);
        }

        this.state = 2221;
        this.engineName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterView;
    this.algType = null; // Token
    this.secContext = null; // Token
    this.checkOpt = null; // Token
    return this;
}

AlterViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterViewContext.prototype.constructor = AlterViewContext;

AlterViewContext.prototype.ALTER = function() {
    return this.getToken(MySQLParser.ALTER, 0);
};

AlterViewContext.prototype.VIEW = function() {
    return this.getToken(MySQLParser.VIEW, 0);
};

AlterViewContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

AlterViewContext.prototype.AS = function() {
    return this.getToken(MySQLParser.AS, 0);
};

AlterViewContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

AlterViewContext.prototype.ALGORITHM = function() {
    return this.getToken(MySQLParser.ALGORITHM, 0);
};

AlterViewContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

AlterViewContext.prototype.ownerStatement = function() {
    return this.getTypedRuleContext(OwnerStatementContext,0);
};

AlterViewContext.prototype.SQL = function() {
    return this.getToken(MySQLParser.SQL, 0);
};

AlterViewContext.prototype.SECURITY = function() {
    return this.getToken(MySQLParser.SECURITY, 0);
};

AlterViewContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

AlterViewContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

AlterViewContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

AlterViewContext.prototype.WITH = function() {
    return this.getToken(MySQLParser.WITH, 0);
};

AlterViewContext.prototype.CHECK = function() {
    return this.getToken(MySQLParser.CHECK, 0);
};

AlterViewContext.prototype.OPTION = function() {
    return this.getToken(MySQLParser.OPTION, 0);
};

AlterViewContext.prototype.UNDEFINED = function() {
    return this.getToken(MySQLParser.UNDEFINED, 0);
};

AlterViewContext.prototype.MERGE = function() {
    return this.getToken(MySQLParser.MERGE, 0);
};

AlterViewContext.prototype.TEMPTABLE = function() {
    return this.getToken(MySQLParser.TEMPTABLE, 0);
};

AlterViewContext.prototype.DEFINER = function() {
    return this.getToken(MySQLParser.DEFINER, 0);
};

AlterViewContext.prototype.INVOKER = function() {
    return this.getToken(MySQLParser.INVOKER, 0);
};

AlterViewContext.prototype.CASCADED = function() {
    return this.getToken(MySQLParser.CASCADED, 0);
};

AlterViewContext.prototype.LOCAL = function() {
    return this.getToken(MySQLParser.LOCAL, 0);
};

AlterViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterView(this);
	}
};

AlterViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterView(this);
	}
};

AlterViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AlterViewContext = AlterViewContext;

MySQLParser.prototype.alterView = function() {

    var localctx = new AlterViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, MySQLParser.RULE_alterView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2223;
        this.match(MySQLParser.ALTER);
        this.state = 2227;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ALGORITHM) {
            this.state = 2224;
            this.match(MySQLParser.ALGORITHM);
            this.state = 2225;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 2226;
            localctx.algType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.MERGE || _la===MySQLParser.TEMPTABLE || _la===MySQLParser.UNDEFINED)) {
                localctx.algType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2230;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFINER) {
            this.state = 2229;
            this.ownerStatement();
        }

        this.state = 2235;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.SQL) {
            this.state = 2232;
            this.match(MySQLParser.SQL);
            this.state = 2233;
            this.match(MySQLParser.SECURITY);
            this.state = 2234;
            localctx.secContext = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DEFINER || _la===MySQLParser.INVOKER)) {
                localctx.secContext = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2237;
        this.match(MySQLParser.VIEW);
        this.state = 2238;
        this.fullId();
        this.state = 2243;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LR_BRACKET) {
            this.state = 2239;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 2240;
            this.uidList();
            this.state = 2241;
            this.match(MySQLParser.RR_BRACKET);
        }

        this.state = 2245;
        this.match(MySQLParser.AS);
        this.state = 2246;
        this.selectStatement();
        this.state = 2253;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WITH) {
            this.state = 2247;
            this.match(MySQLParser.WITH);
            this.state = 2249;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CASCADED || _la===MySQLParser.LOCAL) {
                this.state = 2248;
                localctx.checkOpt = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.CASCADED || _la===MySQLParser.LOCAL)) {
                    localctx.checkOpt = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 2251;
            this.match(MySQLParser.CHECK);
            this.state = 2252;
            this.match(MySQLParser.OPTION);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterSpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterSpecification;
    return this;
}

AlterSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterSpecificationContext.prototype.constructor = AlterSpecificationContext;


 
AlterSpecificationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AlterByDisableKeysContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByDisableKeysContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByDisableKeysContext.prototype.constructor = AlterByDisableKeysContext;

MySQLParser.AlterByDisableKeysContext = AlterByDisableKeysContext;

AlterByDisableKeysContext.prototype.DISABLE = function() {
    return this.getToken(MySQLParser.DISABLE, 0);
};

AlterByDisableKeysContext.prototype.KEYS = function() {
    return this.getToken(MySQLParser.KEYS, 0);
};
AlterByDisableKeysContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByDisableKeys(this);
	}
};

AlterByDisableKeysContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByDisableKeys(this);
	}
};

AlterByDisableKeysContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByDisableKeys(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByDefaultCharsetContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByDefaultCharsetContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByDefaultCharsetContext.prototype.constructor = AlterByDefaultCharsetContext;

MySQLParser.AlterByDefaultCharsetContext = AlterByDefaultCharsetContext;

AlterByDefaultCharsetContext.prototype.CHARACTER = function() {
    return this.getToken(MySQLParser.CHARACTER, 0);
};

AlterByDefaultCharsetContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

AlterByDefaultCharsetContext.prototype.EQUAL_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.EQUAL_SYMBOL);
    } else {
        return this.getToken(MySQLParser.EQUAL_SYMBOL, i);
    }
};


AlterByDefaultCharsetContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

AlterByDefaultCharsetContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

AlterByDefaultCharsetContext.prototype.COLLATE = function() {
    return this.getToken(MySQLParser.COLLATE, 0);
};

AlterByDefaultCharsetContext.prototype.collationName = function() {
    return this.getTypedRuleContext(CollationNameContext,0);
};
AlterByDefaultCharsetContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByDefaultCharset(this);
	}
};

AlterByDefaultCharsetContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByDefaultCharset(this);
	}
};

AlterByDefaultCharsetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByDefaultCharset(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByRenameColumnContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    this.oldColumn = null; // UidContext;
    this.newColumn = null; // UidContext;
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByRenameColumnContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByRenameColumnContext.prototype.constructor = AlterByRenameColumnContext;

MySQLParser.AlterByRenameColumnContext = AlterByRenameColumnContext;

AlterByRenameColumnContext.prototype.RENAME = function() {
    return this.getToken(MySQLParser.RENAME, 0);
};

AlterByRenameColumnContext.prototype.COLUMN = function() {
    return this.getToken(MySQLParser.COLUMN, 0);
};

AlterByRenameColumnContext.prototype.TO = function() {
    return this.getToken(MySQLParser.TO, 0);
};

AlterByRenameColumnContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};
AlterByRenameColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByRenameColumn(this);
	}
};

AlterByRenameColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByRenameColumn(this);
	}
};

AlterByRenameColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByRenameColumn(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByConvertCharsetContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByConvertCharsetContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByConvertCharsetContext.prototype.constructor = AlterByConvertCharsetContext;

MySQLParser.AlterByConvertCharsetContext = AlterByConvertCharsetContext;

AlterByConvertCharsetContext.prototype.CONVERT = function() {
    return this.getToken(MySQLParser.CONVERT, 0);
};

AlterByConvertCharsetContext.prototype.TO = function() {
    return this.getToken(MySQLParser.TO, 0);
};

AlterByConvertCharsetContext.prototype.CHARACTER = function() {
    return this.getToken(MySQLParser.CHARACTER, 0);
};

AlterByConvertCharsetContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

AlterByConvertCharsetContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

AlterByConvertCharsetContext.prototype.COLLATE = function() {
    return this.getToken(MySQLParser.COLLATE, 0);
};

AlterByConvertCharsetContext.prototype.collationName = function() {
    return this.getTypedRuleContext(CollationNameContext,0);
};
AlterByConvertCharsetContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByConvertCharset(this);
	}
};

AlterByConvertCharsetContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByConvertCharset(this);
	}
};

AlterByConvertCharsetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByConvertCharset(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByAddPartitionContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByAddPartitionContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByAddPartitionContext.prototype.constructor = AlterByAddPartitionContext;

MySQLParser.AlterByAddPartitionContext = AlterByAddPartitionContext;

AlterByAddPartitionContext.prototype.ADD = function() {
    return this.getToken(MySQLParser.ADD, 0);
};

AlterByAddPartitionContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

AlterByAddPartitionContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

AlterByAddPartitionContext.prototype.partitionDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionDefinitionContext);
    } else {
        return this.getTypedRuleContext(PartitionDefinitionContext,i);
    }
};

AlterByAddPartitionContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

AlterByAddPartitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

AlterByAddPartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByAddPartition(this);
	}
};

AlterByAddPartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByAddPartition(this);
	}
};

AlterByAddPartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByAddPartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByAddForeignKeyContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    this.name = null; // UidContext;
    this.indexName = null; // UidContext;
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByAddForeignKeyContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByAddForeignKeyContext.prototype.constructor = AlterByAddForeignKeyContext;

MySQLParser.AlterByAddForeignKeyContext = AlterByAddForeignKeyContext;

AlterByAddForeignKeyContext.prototype.ADD = function() {
    return this.getToken(MySQLParser.ADD, 0);
};

AlterByAddForeignKeyContext.prototype.FOREIGN = function() {
    return this.getToken(MySQLParser.FOREIGN, 0);
};

AlterByAddForeignKeyContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};

AlterByAddForeignKeyContext.prototype.indexColumnNames = function() {
    return this.getTypedRuleContext(IndexColumnNamesContext,0);
};

AlterByAddForeignKeyContext.prototype.referenceDefinition = function() {
    return this.getTypedRuleContext(ReferenceDefinitionContext,0);
};

AlterByAddForeignKeyContext.prototype.CONSTRAINT = function() {
    return this.getToken(MySQLParser.CONSTRAINT, 0);
};

AlterByAddForeignKeyContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};
AlterByAddForeignKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByAddForeignKey(this);
	}
};

AlterByAddForeignKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByAddForeignKey(this);
	}
};

AlterByAddForeignKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByAddForeignKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByRenameIndexContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    this.indexFormat = null; // Token;
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByRenameIndexContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByRenameIndexContext.prototype.constructor = AlterByRenameIndexContext;

MySQLParser.AlterByRenameIndexContext = AlterByRenameIndexContext;

AlterByRenameIndexContext.prototype.RENAME = function() {
    return this.getToken(MySQLParser.RENAME, 0);
};

AlterByRenameIndexContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

AlterByRenameIndexContext.prototype.TO = function() {
    return this.getToken(MySQLParser.TO, 0);
};

AlterByRenameIndexContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

AlterByRenameIndexContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};
AlterByRenameIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByRenameIndex(this);
	}
};

AlterByRenameIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByRenameIndex(this);
	}
};

AlterByRenameIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByRenameIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByRemovePartitioningContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByRemovePartitioningContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByRemovePartitioningContext.prototype.constructor = AlterByRemovePartitioningContext;

MySQLParser.AlterByRemovePartitioningContext = AlterByRemovePartitioningContext;

AlterByRemovePartitioningContext.prototype.REMOVE = function() {
    return this.getToken(MySQLParser.REMOVE, 0);
};

AlterByRemovePartitioningContext.prototype.PARTITIONING = function() {
    return this.getToken(MySQLParser.PARTITIONING, 0);
};
AlterByRemovePartitioningContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByRemovePartitioning(this);
	}
};

AlterByRemovePartitioningContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByRemovePartitioning(this);
	}
};

AlterByRemovePartitioningContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByRemovePartitioning(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByRenameContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    this.renameFormat = null; // Token;
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByRenameContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByRenameContext.prototype.constructor = AlterByRenameContext;

MySQLParser.AlterByRenameContext = AlterByRenameContext;

AlterByRenameContext.prototype.RENAME = function() {
    return this.getToken(MySQLParser.RENAME, 0);
};

AlterByRenameContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterByRenameContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

AlterByRenameContext.prototype.TO = function() {
    return this.getToken(MySQLParser.TO, 0);
};

AlterByRenameContext.prototype.AS = function() {
    return this.getToken(MySQLParser.AS, 0);
};
AlterByRenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByRename(this);
	}
};

AlterByRenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByRename(this);
	}
};

AlterByRenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByRename(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByOptimizePartitionContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByOptimizePartitionContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByOptimizePartitionContext.prototype.constructor = AlterByOptimizePartitionContext;

MySQLParser.AlterByOptimizePartitionContext = AlterByOptimizePartitionContext;

AlterByOptimizePartitionContext.prototype.OPTIMIZE = function() {
    return this.getToken(MySQLParser.OPTIMIZE, 0);
};

AlterByOptimizePartitionContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

AlterByOptimizePartitionContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

AlterByOptimizePartitionContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};
AlterByOptimizePartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByOptimizePartition(this);
	}
};

AlterByOptimizePartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByOptimizePartition(this);
	}
};

AlterByOptimizePartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByOptimizePartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByImportTablespaceContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByImportTablespaceContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByImportTablespaceContext.prototype.constructor = AlterByImportTablespaceContext;

MySQLParser.AlterByImportTablespaceContext = AlterByImportTablespaceContext;

AlterByImportTablespaceContext.prototype.IMPORT = function() {
    return this.getToken(MySQLParser.IMPORT, 0);
};

AlterByImportTablespaceContext.prototype.TABLESPACE = function() {
    return this.getToken(MySQLParser.TABLESPACE, 0);
};
AlterByImportTablespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByImportTablespace(this);
	}
};

AlterByImportTablespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByImportTablespace(this);
	}
};

AlterByImportTablespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByImportTablespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByCoalescePartitionContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByCoalescePartitionContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByCoalescePartitionContext.prototype.constructor = AlterByCoalescePartitionContext;

MySQLParser.AlterByCoalescePartitionContext = AlterByCoalescePartitionContext;

AlterByCoalescePartitionContext.prototype.COALESCE = function() {
    return this.getToken(MySQLParser.COALESCE, 0);
};

AlterByCoalescePartitionContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

AlterByCoalescePartitionContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};
AlterByCoalescePartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByCoalescePartition(this);
	}
};

AlterByCoalescePartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByCoalescePartition(this);
	}
};

AlterByCoalescePartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByCoalescePartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByAddColumnsContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByAddColumnsContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByAddColumnsContext.prototype.constructor = AlterByAddColumnsContext;

MySQLParser.AlterByAddColumnsContext = AlterByAddColumnsContext;

AlterByAddColumnsContext.prototype.ADD = function() {
    return this.getToken(MySQLParser.ADD, 0);
};

AlterByAddColumnsContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

AlterByAddColumnsContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

AlterByAddColumnsContext.prototype.columnDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnDefinitionContext);
    } else {
        return this.getTypedRuleContext(ColumnDefinitionContext,i);
    }
};

AlterByAddColumnsContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

AlterByAddColumnsContext.prototype.COLUMN = function() {
    return this.getToken(MySQLParser.COLUMN, 0);
};

AlterByAddColumnsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

AlterByAddColumnsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByAddColumns(this);
	}
};

AlterByAddColumnsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByAddColumns(this);
	}
};

AlterByAddColumnsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByAddColumns(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByAlterIndexVisibilityContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByAlterIndexVisibilityContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByAlterIndexVisibilityContext.prototype.constructor = AlterByAlterIndexVisibilityContext;

MySQLParser.AlterByAlterIndexVisibilityContext = AlterByAlterIndexVisibilityContext;

AlterByAlterIndexVisibilityContext.prototype.ALTER = function() {
    return this.getToken(MySQLParser.ALTER, 0);
};

AlterByAlterIndexVisibilityContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

AlterByAlterIndexVisibilityContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterByAlterIndexVisibilityContext.prototype.VISIBLE = function() {
    return this.getToken(MySQLParser.VISIBLE, 0);
};

AlterByAlterIndexVisibilityContext.prototype.INVISIBLE = function() {
    return this.getToken(MySQLParser.INVISIBLE, 0);
};
AlterByAlterIndexVisibilityContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByAlterIndexVisibility(this);
	}
};

AlterByAlterIndexVisibilityContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByAlterIndexVisibility(this);
	}
};

AlterByAlterIndexVisibilityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByAlterIndexVisibility(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByDropForeignKeyContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByDropForeignKeyContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByDropForeignKeyContext.prototype.constructor = AlterByDropForeignKeyContext;

MySQLParser.AlterByDropForeignKeyContext = AlterByDropForeignKeyContext;

AlterByDropForeignKeyContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

AlterByDropForeignKeyContext.prototype.FOREIGN = function() {
    return this.getToken(MySQLParser.FOREIGN, 0);
};

AlterByDropForeignKeyContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};

AlterByDropForeignKeyContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};
AlterByDropForeignKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByDropForeignKey(this);
	}
};

AlterByDropForeignKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByDropForeignKey(this);
	}
};

AlterByDropForeignKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByDropForeignKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByAddCheckTableConstraintContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    this.name = null; // UidContext;
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByAddCheckTableConstraintContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByAddCheckTableConstraintContext.prototype.constructor = AlterByAddCheckTableConstraintContext;

MySQLParser.AlterByAddCheckTableConstraintContext = AlterByAddCheckTableConstraintContext;

AlterByAddCheckTableConstraintContext.prototype.ADD = function() {
    return this.getToken(MySQLParser.ADD, 0);
};

AlterByAddCheckTableConstraintContext.prototype.CHECK = function() {
    return this.getToken(MySQLParser.CHECK, 0);
};

AlterByAddCheckTableConstraintContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

AlterByAddCheckTableConstraintContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AlterByAddCheckTableConstraintContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

AlterByAddCheckTableConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(MySQLParser.CONSTRAINT, 0);
};

AlterByAddCheckTableConstraintContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};
AlterByAddCheckTableConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByAddCheckTableConstraint(this);
	}
};

AlterByAddCheckTableConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByAddCheckTableConstraint(this);
	}
};

AlterByAddCheckTableConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByAddCheckTableConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByRebuildPartitionContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByRebuildPartitionContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByRebuildPartitionContext.prototype.constructor = AlterByRebuildPartitionContext;

MySQLParser.AlterByRebuildPartitionContext = AlterByRebuildPartitionContext;

AlterByRebuildPartitionContext.prototype.REBUILD = function() {
    return this.getToken(MySQLParser.REBUILD, 0);
};

AlterByRebuildPartitionContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

AlterByRebuildPartitionContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

AlterByRebuildPartitionContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};
AlterByRebuildPartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByRebuildPartition(this);
	}
};

AlterByRebuildPartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByRebuildPartition(this);
	}
};

AlterByRebuildPartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByRebuildPartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByUpgradePartitioningContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByUpgradePartitioningContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByUpgradePartitioningContext.prototype.constructor = AlterByUpgradePartitioningContext;

MySQLParser.AlterByUpgradePartitioningContext = AlterByUpgradePartitioningContext;

AlterByUpgradePartitioningContext.prototype.UPGRADE = function() {
    return this.getToken(MySQLParser.UPGRADE, 0);
};

AlterByUpgradePartitioningContext.prototype.PARTITIONING = function() {
    return this.getToken(MySQLParser.PARTITIONING, 0);
};
AlterByUpgradePartitioningContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByUpgradePartitioning(this);
	}
};

AlterByUpgradePartitioningContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByUpgradePartitioning(this);
	}
};

AlterByUpgradePartitioningContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByUpgradePartitioning(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByRepairPartitionContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByRepairPartitionContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByRepairPartitionContext.prototype.constructor = AlterByRepairPartitionContext;

MySQLParser.AlterByRepairPartitionContext = AlterByRepairPartitionContext;

AlterByRepairPartitionContext.prototype.REPAIR = function() {
    return this.getToken(MySQLParser.REPAIR, 0);
};

AlterByRepairPartitionContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

AlterByRepairPartitionContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

AlterByRepairPartitionContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};
AlterByRepairPartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByRepairPartition(this);
	}
};

AlterByRepairPartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByRepairPartition(this);
	}
};

AlterByRepairPartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByRepairPartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByExchangePartitionContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    this.validationFormat = null; // Token;
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByExchangePartitionContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByExchangePartitionContext.prototype.constructor = AlterByExchangePartitionContext;

MySQLParser.AlterByExchangePartitionContext = AlterByExchangePartitionContext;

AlterByExchangePartitionContext.prototype.EXCHANGE = function() {
    return this.getToken(MySQLParser.EXCHANGE, 0);
};

AlterByExchangePartitionContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

AlterByExchangePartitionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterByExchangePartitionContext.prototype.WITH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.WITH);
    } else {
        return this.getToken(MySQLParser.WITH, i);
    }
};


AlterByExchangePartitionContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

AlterByExchangePartitionContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

AlterByExchangePartitionContext.prototype.VALIDATION = function() {
    return this.getToken(MySQLParser.VALIDATION, 0);
};

AlterByExchangePartitionContext.prototype.WITHOUT = function() {
    return this.getToken(MySQLParser.WITHOUT, 0);
};
AlterByExchangePartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByExchangePartition(this);
	}
};

AlterByExchangePartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByExchangePartition(this);
	}
};

AlterByExchangePartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByExchangePartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByAddIndexContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    this.indexFormat = null; // Token;
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByAddIndexContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByAddIndexContext.prototype.constructor = AlterByAddIndexContext;

MySQLParser.AlterByAddIndexContext = AlterByAddIndexContext;

AlterByAddIndexContext.prototype.ADD = function() {
    return this.getToken(MySQLParser.ADD, 0);
};

AlterByAddIndexContext.prototype.indexColumnNames = function() {
    return this.getTypedRuleContext(IndexColumnNamesContext,0);
};

AlterByAddIndexContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

AlterByAddIndexContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};

AlterByAddIndexContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterByAddIndexContext.prototype.indexType = function() {
    return this.getTypedRuleContext(IndexTypeContext,0);
};

AlterByAddIndexContext.prototype.indexOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexOptionContext);
    } else {
        return this.getTypedRuleContext(IndexOptionContext,i);
    }
};
AlterByAddIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByAddIndex(this);
	}
};

AlterByAddIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByAddIndex(this);
	}
};

AlterByAddIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByAddIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByDropColumnContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByDropColumnContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByDropColumnContext.prototype.constructor = AlterByDropColumnContext;

MySQLParser.AlterByDropColumnContext = AlterByDropColumnContext;

AlterByDropColumnContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

AlterByDropColumnContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterByDropColumnContext.prototype.COLUMN = function() {
    return this.getToken(MySQLParser.COLUMN, 0);
};

AlterByDropColumnContext.prototype.RESTRICT = function() {
    return this.getToken(MySQLParser.RESTRICT, 0);
};
AlterByDropColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByDropColumn(this);
	}
};

AlterByDropColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByDropColumn(this);
	}
};

AlterByDropColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByDropColumn(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByImportPartitionContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByImportPartitionContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByImportPartitionContext.prototype.constructor = AlterByImportPartitionContext;

MySQLParser.AlterByImportPartitionContext = AlterByImportPartitionContext;

AlterByImportPartitionContext.prototype.IMPORT = function() {
    return this.getToken(MySQLParser.IMPORT, 0);
};

AlterByImportPartitionContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

AlterByImportPartitionContext.prototype.TABLESPACE = function() {
    return this.getToken(MySQLParser.TABLESPACE, 0);
};

AlterByImportPartitionContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

AlterByImportPartitionContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};
AlterByImportPartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByImportPartition(this);
	}
};

AlterByImportPartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByImportPartition(this);
	}
};

AlterByImportPartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByImportPartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByChangeDefaultContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByChangeDefaultContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByChangeDefaultContext.prototype.constructor = AlterByChangeDefaultContext;

MySQLParser.AlterByChangeDefaultContext = AlterByChangeDefaultContext;

AlterByChangeDefaultContext.prototype.ALTER = function() {
    return this.getToken(MySQLParser.ALTER, 0);
};

AlterByChangeDefaultContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterByChangeDefaultContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

AlterByChangeDefaultContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

AlterByChangeDefaultContext.prototype.defaultValue = function() {
    return this.getTypedRuleContext(DefaultValueContext,0);
};

AlterByChangeDefaultContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

AlterByChangeDefaultContext.prototype.COLUMN = function() {
    return this.getToken(MySQLParser.COLUMN, 0);
};
AlterByChangeDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByChangeDefault(this);
	}
};

AlterByChangeDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByChangeDefault(this);
	}
};

AlterByChangeDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByChangeDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByForceContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByForceContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByForceContext.prototype.constructor = AlterByForceContext;

MySQLParser.AlterByForceContext = AlterByForceContext;

AlterByForceContext.prototype.FORCE = function() {
    return this.getToken(MySQLParser.FORCE, 0);
};
AlterByForceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByForce(this);
	}
};

AlterByForceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByForce(this);
	}
};

AlterByForceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByForce(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByDropPartitionContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByDropPartitionContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByDropPartitionContext.prototype.constructor = AlterByDropPartitionContext;

MySQLParser.AlterByDropPartitionContext = AlterByDropPartitionContext;

AlterByDropPartitionContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

AlterByDropPartitionContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

AlterByDropPartitionContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};
AlterByDropPartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByDropPartition(this);
	}
};

AlterByDropPartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByDropPartition(this);
	}
};

AlterByDropPartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByDropPartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByAddSpecialIndexContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    this.keyType = null; // Token;
    this.indexFormat = null; // Token;
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByAddSpecialIndexContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByAddSpecialIndexContext.prototype.constructor = AlterByAddSpecialIndexContext;

MySQLParser.AlterByAddSpecialIndexContext = AlterByAddSpecialIndexContext;

AlterByAddSpecialIndexContext.prototype.ADD = function() {
    return this.getToken(MySQLParser.ADD, 0);
};

AlterByAddSpecialIndexContext.prototype.indexColumnNames = function() {
    return this.getTypedRuleContext(IndexColumnNamesContext,0);
};

AlterByAddSpecialIndexContext.prototype.FULLTEXT = function() {
    return this.getToken(MySQLParser.FULLTEXT, 0);
};

AlterByAddSpecialIndexContext.prototype.SPATIAL = function() {
    return this.getToken(MySQLParser.SPATIAL, 0);
};

AlterByAddSpecialIndexContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterByAddSpecialIndexContext.prototype.indexOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexOptionContext);
    } else {
        return this.getTypedRuleContext(IndexOptionContext,i);
    }
};

AlterByAddSpecialIndexContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

AlterByAddSpecialIndexContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};
AlterByAddSpecialIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByAddSpecialIndex(this);
	}
};

AlterByAddSpecialIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByAddSpecialIndex(this);
	}
};

AlterByAddSpecialIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByAddSpecialIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByModifyColumnContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByModifyColumnContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByModifyColumnContext.prototype.constructor = AlterByModifyColumnContext;

MySQLParser.AlterByModifyColumnContext = AlterByModifyColumnContext;

AlterByModifyColumnContext.prototype.MODIFY = function() {
    return this.getToken(MySQLParser.MODIFY, 0);
};

AlterByModifyColumnContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

AlterByModifyColumnContext.prototype.columnDefinition = function() {
    return this.getTypedRuleContext(ColumnDefinitionContext,0);
};

AlterByModifyColumnContext.prototype.COLUMN = function() {
    return this.getToken(MySQLParser.COLUMN, 0);
};

AlterByModifyColumnContext.prototype.FIRST = function() {
    return this.getToken(MySQLParser.FIRST, 0);
};

AlterByModifyColumnContext.prototype.AFTER = function() {
    return this.getToken(MySQLParser.AFTER, 0);
};
AlterByModifyColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByModifyColumn(this);
	}
};

AlterByModifyColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByModifyColumn(this);
	}
};

AlterByModifyColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByModifyColumn(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByTableOptionContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByTableOptionContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByTableOptionContext.prototype.constructor = AlterByTableOptionContext;

MySQLParser.AlterByTableOptionContext = AlterByTableOptionContext;

AlterByTableOptionContext.prototype.tableOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableOptionContext);
    } else {
        return this.getTypedRuleContext(TableOptionContext,i);
    }
};

AlterByTableOptionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

AlterByTableOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByTableOption(this);
	}
};

AlterByTableOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByTableOption(this);
	}
};

AlterByTableOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByTableOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByDropPrimaryKeyContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByDropPrimaryKeyContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByDropPrimaryKeyContext.prototype.constructor = AlterByDropPrimaryKeyContext;

MySQLParser.AlterByDropPrimaryKeyContext = AlterByDropPrimaryKeyContext;

AlterByDropPrimaryKeyContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

AlterByDropPrimaryKeyContext.prototype.PRIMARY = function() {
    return this.getToken(MySQLParser.PRIMARY, 0);
};

AlterByDropPrimaryKeyContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};
AlterByDropPrimaryKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByDropPrimaryKey(this);
	}
};

AlterByDropPrimaryKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByDropPrimaryKey(this);
	}
};

AlterByDropPrimaryKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByDropPrimaryKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByLockContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    this.lockType = null; // Token;
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByLockContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByLockContext.prototype.constructor = AlterByLockContext;

MySQLParser.AlterByLockContext = AlterByLockContext;

AlterByLockContext.prototype.LOCK = function() {
    return this.getToken(MySQLParser.LOCK, 0);
};

AlterByLockContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

AlterByLockContext.prototype.NONE = function() {
    return this.getToken(MySQLParser.NONE, 0);
};

AlterByLockContext.prototype.SHARED = function() {
    return this.getToken(MySQLParser.SHARED, 0);
};

AlterByLockContext.prototype.EXCLUSIVE = function() {
    return this.getToken(MySQLParser.EXCLUSIVE, 0);
};

AlterByLockContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
AlterByLockContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByLock(this);
	}
};

AlterByLockContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByLock(this);
	}
};

AlterByLockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByLock(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByDiscardPartitionContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByDiscardPartitionContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByDiscardPartitionContext.prototype.constructor = AlterByDiscardPartitionContext;

MySQLParser.AlterByDiscardPartitionContext = AlterByDiscardPartitionContext;

AlterByDiscardPartitionContext.prototype.DISCARD = function() {
    return this.getToken(MySQLParser.DISCARD, 0);
};

AlterByDiscardPartitionContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

AlterByDiscardPartitionContext.prototype.TABLESPACE = function() {
    return this.getToken(MySQLParser.TABLESPACE, 0);
};

AlterByDiscardPartitionContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

AlterByDiscardPartitionContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};
AlterByDiscardPartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByDiscardPartition(this);
	}
};

AlterByDiscardPartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByDiscardPartition(this);
	}
};

AlterByDiscardPartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByDiscardPartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByDiscardTablespaceContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByDiscardTablespaceContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByDiscardTablespaceContext.prototype.constructor = AlterByDiscardTablespaceContext;

MySQLParser.AlterByDiscardTablespaceContext = AlterByDiscardTablespaceContext;

AlterByDiscardTablespaceContext.prototype.DISCARD = function() {
    return this.getToken(MySQLParser.DISCARD, 0);
};

AlterByDiscardTablespaceContext.prototype.TABLESPACE = function() {
    return this.getToken(MySQLParser.TABLESPACE, 0);
};
AlterByDiscardTablespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByDiscardTablespace(this);
	}
};

AlterByDiscardTablespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByDiscardTablespace(this);
	}
};

AlterByDiscardTablespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByDiscardTablespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByValidateContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    this.validationFormat = null; // Token;
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByValidateContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByValidateContext.prototype.constructor = AlterByValidateContext;

MySQLParser.AlterByValidateContext = AlterByValidateContext;

AlterByValidateContext.prototype.VALIDATION = function() {
    return this.getToken(MySQLParser.VALIDATION, 0);
};

AlterByValidateContext.prototype.WITHOUT = function() {
    return this.getToken(MySQLParser.WITHOUT, 0);
};

AlterByValidateContext.prototype.WITH = function() {
    return this.getToken(MySQLParser.WITH, 0);
};
AlterByValidateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByValidate(this);
	}
};

AlterByValidateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByValidate(this);
	}
};

AlterByValidateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByValidate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByAddPrimaryKeyContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    this.name = null; // UidContext;
    this.index = null; // UidContext;
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByAddPrimaryKeyContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByAddPrimaryKeyContext.prototype.constructor = AlterByAddPrimaryKeyContext;

MySQLParser.AlterByAddPrimaryKeyContext = AlterByAddPrimaryKeyContext;

AlterByAddPrimaryKeyContext.prototype.ADD = function() {
    return this.getToken(MySQLParser.ADD, 0);
};

AlterByAddPrimaryKeyContext.prototype.PRIMARY = function() {
    return this.getToken(MySQLParser.PRIMARY, 0);
};

AlterByAddPrimaryKeyContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};

AlterByAddPrimaryKeyContext.prototype.indexColumnNames = function() {
    return this.getTypedRuleContext(IndexColumnNamesContext,0);
};

AlterByAddPrimaryKeyContext.prototype.CONSTRAINT = function() {
    return this.getToken(MySQLParser.CONSTRAINT, 0);
};

AlterByAddPrimaryKeyContext.prototype.indexType = function() {
    return this.getTypedRuleContext(IndexTypeContext,0);
};

AlterByAddPrimaryKeyContext.prototype.indexOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexOptionContext);
    } else {
        return this.getTypedRuleContext(IndexOptionContext,i);
    }
};

AlterByAddPrimaryKeyContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};
AlterByAddPrimaryKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByAddPrimaryKey(this);
	}
};

AlterByAddPrimaryKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByAddPrimaryKey(this);
	}
};

AlterByAddPrimaryKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByAddPrimaryKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByCheckPartitionContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByCheckPartitionContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByCheckPartitionContext.prototype.constructor = AlterByCheckPartitionContext;

MySQLParser.AlterByCheckPartitionContext = AlterByCheckPartitionContext;

AlterByCheckPartitionContext.prototype.CHECK = function() {
    return this.getToken(MySQLParser.CHECK, 0);
};

AlterByCheckPartitionContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

AlterByCheckPartitionContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

AlterByCheckPartitionContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};
AlterByCheckPartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByCheckPartition(this);
	}
};

AlterByCheckPartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByCheckPartition(this);
	}
};

AlterByCheckPartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByCheckPartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByEnableKeysContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByEnableKeysContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByEnableKeysContext.prototype.constructor = AlterByEnableKeysContext;

MySQLParser.AlterByEnableKeysContext = AlterByEnableKeysContext;

AlterByEnableKeysContext.prototype.ENABLE = function() {
    return this.getToken(MySQLParser.ENABLE, 0);
};

AlterByEnableKeysContext.prototype.KEYS = function() {
    return this.getToken(MySQLParser.KEYS, 0);
};
AlterByEnableKeysContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByEnableKeys(this);
	}
};

AlterByEnableKeysContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByEnableKeys(this);
	}
};

AlterByEnableKeysContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByEnableKeys(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByReorganizePartitionContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByReorganizePartitionContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByReorganizePartitionContext.prototype.constructor = AlterByReorganizePartitionContext;

MySQLParser.AlterByReorganizePartitionContext = AlterByReorganizePartitionContext;

AlterByReorganizePartitionContext.prototype.REORGANIZE = function() {
    return this.getToken(MySQLParser.REORGANIZE, 0);
};

AlterByReorganizePartitionContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

AlterByReorganizePartitionContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

AlterByReorganizePartitionContext.prototype.INTO = function() {
    return this.getToken(MySQLParser.INTO, 0);
};

AlterByReorganizePartitionContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

AlterByReorganizePartitionContext.prototype.partitionDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionDefinitionContext);
    } else {
        return this.getTypedRuleContext(PartitionDefinitionContext,i);
    }
};

AlterByReorganizePartitionContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

AlterByReorganizePartitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

AlterByReorganizePartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByReorganizePartition(this);
	}
};

AlterByReorganizePartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByReorganizePartition(this);
	}
};

AlterByReorganizePartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByReorganizePartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterBySetAlgorithmContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    this.algType = null; // Token;
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterBySetAlgorithmContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterBySetAlgorithmContext.prototype.constructor = AlterBySetAlgorithmContext;

MySQLParser.AlterBySetAlgorithmContext = AlterBySetAlgorithmContext;

AlterBySetAlgorithmContext.prototype.ALGORITHM = function() {
    return this.getToken(MySQLParser.ALGORITHM, 0);
};

AlterBySetAlgorithmContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

AlterBySetAlgorithmContext.prototype.INPLACE = function() {
    return this.getToken(MySQLParser.INPLACE, 0);
};

AlterBySetAlgorithmContext.prototype.COPY = function() {
    return this.getToken(MySQLParser.COPY, 0);
};

AlterBySetAlgorithmContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};
AlterBySetAlgorithmContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterBySetAlgorithm(this);
	}
};

AlterBySetAlgorithmContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterBySetAlgorithm(this);
	}
};

AlterBySetAlgorithmContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterBySetAlgorithm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByAnalyzePartitionContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByAnalyzePartitionContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByAnalyzePartitionContext.prototype.constructor = AlterByAnalyzePartitionContext;

MySQLParser.AlterByAnalyzePartitionContext = AlterByAnalyzePartitionContext;

AlterByAnalyzePartitionContext.prototype.ANALYZE = function() {
    return this.getToken(MySQLParser.ANALYZE, 0);
};

AlterByAnalyzePartitionContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

AlterByAnalyzePartitionContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

AlterByAnalyzePartitionContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};
AlterByAnalyzePartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByAnalyzePartition(this);
	}
};

AlterByAnalyzePartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByAnalyzePartition(this);
	}
};

AlterByAnalyzePartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByAnalyzePartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByChangeColumnContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    this.oldColumn = null; // UidContext;
    this.newColumn = null; // UidContext;
    this.afterColumn = null; // UidContext;
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByChangeColumnContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByChangeColumnContext.prototype.constructor = AlterByChangeColumnContext;

MySQLParser.AlterByChangeColumnContext = AlterByChangeColumnContext;

AlterByChangeColumnContext.prototype.CHANGE = function() {
    return this.getToken(MySQLParser.CHANGE, 0);
};

AlterByChangeColumnContext.prototype.columnDefinition = function() {
    return this.getTypedRuleContext(ColumnDefinitionContext,0);
};

AlterByChangeColumnContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

AlterByChangeColumnContext.prototype.COLUMN = function() {
    return this.getToken(MySQLParser.COLUMN, 0);
};

AlterByChangeColumnContext.prototype.FIRST = function() {
    return this.getToken(MySQLParser.FIRST, 0);
};

AlterByChangeColumnContext.prototype.AFTER = function() {
    return this.getToken(MySQLParser.AFTER, 0);
};
AlterByChangeColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByChangeColumn(this);
	}
};

AlterByChangeColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByChangeColumn(this);
	}
};

AlterByChangeColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByChangeColumn(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByAddUniqueKeyContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    this.name = null; // UidContext;
    this.indexFormat = null; // Token;
    this.indexName = null; // UidContext;
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByAddUniqueKeyContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByAddUniqueKeyContext.prototype.constructor = AlterByAddUniqueKeyContext;

MySQLParser.AlterByAddUniqueKeyContext = AlterByAddUniqueKeyContext;

AlterByAddUniqueKeyContext.prototype.ADD = function() {
    return this.getToken(MySQLParser.ADD, 0);
};

AlterByAddUniqueKeyContext.prototype.UNIQUE = function() {
    return this.getToken(MySQLParser.UNIQUE, 0);
};

AlterByAddUniqueKeyContext.prototype.indexColumnNames = function() {
    return this.getTypedRuleContext(IndexColumnNamesContext,0);
};

AlterByAddUniqueKeyContext.prototype.CONSTRAINT = function() {
    return this.getToken(MySQLParser.CONSTRAINT, 0);
};

AlterByAddUniqueKeyContext.prototype.indexType = function() {
    return this.getTypedRuleContext(IndexTypeContext,0);
};

AlterByAddUniqueKeyContext.prototype.indexOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexOptionContext);
    } else {
        return this.getTypedRuleContext(IndexOptionContext,i);
    }
};

AlterByAddUniqueKeyContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

AlterByAddUniqueKeyContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

AlterByAddUniqueKeyContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};
AlterByAddUniqueKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByAddUniqueKey(this);
	}
};

AlterByAddUniqueKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByAddUniqueKey(this);
	}
};

AlterByAddUniqueKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByAddUniqueKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByTruncatePartitionContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByTruncatePartitionContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByTruncatePartitionContext.prototype.constructor = AlterByTruncatePartitionContext;

MySQLParser.AlterByTruncatePartitionContext = AlterByTruncatePartitionContext;

AlterByTruncatePartitionContext.prototype.TRUNCATE = function() {
    return this.getToken(MySQLParser.TRUNCATE, 0);
};

AlterByTruncatePartitionContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

AlterByTruncatePartitionContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

AlterByTruncatePartitionContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};
AlterByTruncatePartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByTruncatePartition(this);
	}
};

AlterByTruncatePartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByTruncatePartition(this);
	}
};

AlterByTruncatePartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByTruncatePartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByDropIndexContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    this.indexFormat = null; // Token;
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByDropIndexContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByDropIndexContext.prototype.constructor = AlterByDropIndexContext;

MySQLParser.AlterByDropIndexContext = AlterByDropIndexContext;

AlterByDropIndexContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

AlterByDropIndexContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterByDropIndexContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

AlterByDropIndexContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};
AlterByDropIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByDropIndex(this);
	}
};

AlterByDropIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByDropIndex(this);
	}
};

AlterByDropIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByDropIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByAddColumnContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByAddColumnContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByAddColumnContext.prototype.constructor = AlterByAddColumnContext;

MySQLParser.AlterByAddColumnContext = AlterByAddColumnContext;

AlterByAddColumnContext.prototype.ADD = function() {
    return this.getToken(MySQLParser.ADD, 0);
};

AlterByAddColumnContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

AlterByAddColumnContext.prototype.columnDefinition = function() {
    return this.getTypedRuleContext(ColumnDefinitionContext,0);
};

AlterByAddColumnContext.prototype.COLUMN = function() {
    return this.getToken(MySQLParser.COLUMN, 0);
};

AlterByAddColumnContext.prototype.FIRST = function() {
    return this.getToken(MySQLParser.FIRST, 0);
};

AlterByAddColumnContext.prototype.AFTER = function() {
    return this.getToken(MySQLParser.AFTER, 0);
};
AlterByAddColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByAddColumn(this);
	}
};

AlterByAddColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByAddColumn(this);
	}
};

AlterByAddColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByAddColumn(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterByOrderContext(parser, ctx) {
	AlterSpecificationContext.call(this, parser);
    AlterSpecificationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterByOrderContext.prototype = Object.create(AlterSpecificationContext.prototype);
AlterByOrderContext.prototype.constructor = AlterByOrderContext;

MySQLParser.AlterByOrderContext = AlterByOrderContext;

AlterByOrderContext.prototype.ORDER = function() {
    return this.getToken(MySQLParser.ORDER, 0);
};

AlterByOrderContext.prototype.BY = function() {
    return this.getToken(MySQLParser.BY, 0);
};

AlterByOrderContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};
AlterByOrderContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterByOrder(this);
	}
};

AlterByOrderContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterByOrder(this);
	}
};

AlterByOrderContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterByOrder(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.AlterSpecificationContext = AlterSpecificationContext;

MySQLParser.prototype.alterSpecification = function() {

    var localctx = new AlterSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, MySQLParser.RULE_alterSpecification);
    var _la = 0; // Token type
    try {
        this.state = 2618;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,333,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AlterByTableOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2255;
            this.tableOption();
            this.state = 2262;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,280,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2257;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===MySQLParser.COMMA) {
                        this.state = 2256;
                        this.match(MySQLParser.COMMA);
                    }

                    this.state = 2259;
                    this.tableOption(); 
                }
                this.state = 2264;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,280,this._ctx);
            }

            break;

        case 2:
            localctx = new AlterByAddColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2265;
            this.match(MySQLParser.ADD);
            this.state = 2267;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COLUMN) {
                this.state = 2266;
                this.match(MySQLParser.COLUMN);
            }

            this.state = 2269;
            this.uid();
            this.state = 2270;
            this.columnDefinition();
            this.state = 2274;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case MySQLParser.FIRST:
            	this.state = 2271;
            	this.match(MySQLParser.FIRST);
            	break;
            case MySQLParser.AFTER:
            	this.state = 2272;
            	this.match(MySQLParser.AFTER);
            	this.state = 2273;
            	this.uid();
            	break;
            case MySQLParser.EOF:
            case MySQLParser.ALTER:
            case MySQLParser.ANALYZE:
            case MySQLParser.CALL:
            case MySQLParser.CHANGE:
            case MySQLParser.CHECK:
            case MySQLParser.CREATE:
            case MySQLParser.DELETE:
            case MySQLParser.DESC:
            case MySQLParser.DESCRIBE:
            case MySQLParser.DROP:
            case MySQLParser.EXPLAIN:
            case MySQLParser.GET:
            case MySQLParser.GRANT:
            case MySQLParser.INSERT:
            case MySQLParser.KILL:
            case MySQLParser.LOAD:
            case MySQLParser.LOCK:
            case MySQLParser.OPTIMIZE:
            case MySQLParser.PARTITION:
            case MySQLParser.PURGE:
            case MySQLParser.RELEASE:
            case MySQLParser.RENAME:
            case MySQLParser.REPLACE:
            case MySQLParser.RESIGNAL:
            case MySQLParser.REVOKE:
            case MySQLParser.SELECT:
            case MySQLParser.SET:
            case MySQLParser.SHOW:
            case MySQLParser.SIGNAL:
            case MySQLParser.UNLOCK:
            case MySQLParser.UPDATE:
            case MySQLParser.USE:
            case MySQLParser.BEGIN:
            case MySQLParser.BINLOG:
            case MySQLParser.CACHE:
            case MySQLParser.CHECKSUM:
            case MySQLParser.COMMIT:
            case MySQLParser.DEALLOCATE:
            case MySQLParser.DO:
            case MySQLParser.FLUSH:
            case MySQLParser.HANDLER:
            case MySQLParser.HELP:
            case MySQLParser.INSTALL:
            case MySQLParser.PREPARE:
            case MySQLParser.REPAIR:
            case MySQLParser.RESET:
            case MySQLParser.ROLLBACK:
            case MySQLParser.SAVEPOINT:
            case MySQLParser.START:
            case MySQLParser.STOP:
            case MySQLParser.TRUNCATE:
            case MySQLParser.UNINSTALL:
            case MySQLParser.XA:
            case MySQLParser.EXECUTE:
            case MySQLParser.SHUTDOWN:
            case MySQLParser.MINUSMINUS:
            case MySQLParser.LR_BRACKET:
            case MySQLParser.COMMA:
            case MySQLParser.SEMI:
            	break;
            default:
            	break;
            }
            break;

        case 3:
            localctx = new AlterByAddColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2276;
            this.match(MySQLParser.ADD);
            this.state = 2278;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COLUMN) {
                this.state = 2277;
                this.match(MySQLParser.COLUMN);
            }

            this.state = 2280;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 2281;
            this.uid();
            this.state = 2282;
            this.columnDefinition();
            this.state = 2289;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 2283;
                this.match(MySQLParser.COMMA);
                this.state = 2284;
                this.uid();
                this.state = 2285;
                this.columnDefinition();
                this.state = 2291;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2292;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 4:
            localctx = new AlterByAddIndexContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 2294;
            this.match(MySQLParser.ADD);
            this.state = 2295;
            localctx.indexFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.INDEX || _la===MySQLParser.KEY)) {
                localctx.indexFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2297;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                this.state = 2296;
                this.uid();
            }

            this.state = 2300;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.USING) {
                this.state = 2299;
                this.indexType();
            }

            this.state = 2302;
            this.indexColumnNames();
            this.state = 2306;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.USING || _la===MySQLParser.WITH || _la===MySQLParser.COMMENT || _la===MySQLParser.INVISIBLE || _la===MySQLParser.KEY_BLOCK_SIZE || _la===MySQLParser.VISIBLE) {
                this.state = 2303;
                this.indexOption();
                this.state = 2308;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 5:
            localctx = new AlterByAddPrimaryKeyContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 2309;
            this.match(MySQLParser.ADD);
            this.state = 2314;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CONSTRAINT) {
                this.state = 2310;
                this.match(MySQLParser.CONSTRAINT);
                this.state = 2312;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                    this.state = 2311;
                    localctx.name = this.uid();
                }

            }

            this.state = 2316;
            this.match(MySQLParser.PRIMARY);
            this.state = 2317;
            this.match(MySQLParser.KEY);
            this.state = 2319;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                this.state = 2318;
                localctx.index = this.uid();
            }

            this.state = 2322;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.USING) {
                this.state = 2321;
                this.indexType();
            }

            this.state = 2324;
            this.indexColumnNames();
            this.state = 2328;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.USING || _la===MySQLParser.WITH || _la===MySQLParser.COMMENT || _la===MySQLParser.INVISIBLE || _la===MySQLParser.KEY_BLOCK_SIZE || _la===MySQLParser.VISIBLE) {
                this.state = 2325;
                this.indexOption();
                this.state = 2330;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 6:
            localctx = new AlterByAddUniqueKeyContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 2331;
            this.match(MySQLParser.ADD);
            this.state = 2336;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CONSTRAINT) {
                this.state = 2332;
                this.match(MySQLParser.CONSTRAINT);
                this.state = 2334;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                    this.state = 2333;
                    localctx.name = this.uid();
                }

            }

            this.state = 2338;
            this.match(MySQLParser.UNIQUE);
            this.state = 2340;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.INDEX || _la===MySQLParser.KEY) {
                this.state = 2339;
                localctx.indexFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.INDEX || _la===MySQLParser.KEY)) {
                    localctx.indexFormat = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 2343;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                this.state = 2342;
                localctx.indexName = this.uid();
            }

            this.state = 2346;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.USING) {
                this.state = 2345;
                this.indexType();
            }

            this.state = 2348;
            this.indexColumnNames();
            this.state = 2352;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.USING || _la===MySQLParser.WITH || _la===MySQLParser.COMMENT || _la===MySQLParser.INVISIBLE || _la===MySQLParser.KEY_BLOCK_SIZE || _la===MySQLParser.VISIBLE) {
                this.state = 2349;
                this.indexOption();
                this.state = 2354;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 7:
            localctx = new AlterByAddSpecialIndexContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 2355;
            this.match(MySQLParser.ADD);
            this.state = 2356;
            localctx.keyType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.FULLTEXT || _la===MySQLParser.SPATIAL)) {
                localctx.keyType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.INDEX || _la===MySQLParser.KEY) {
                this.state = 2357;
                localctx.indexFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.INDEX || _la===MySQLParser.KEY)) {
                    localctx.indexFormat = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 2361;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                this.state = 2360;
                this.uid();
            }

            this.state = 2363;
            this.indexColumnNames();
            this.state = 2367;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.USING || _la===MySQLParser.WITH || _la===MySQLParser.COMMENT || _la===MySQLParser.INVISIBLE || _la===MySQLParser.KEY_BLOCK_SIZE || _la===MySQLParser.VISIBLE) {
                this.state = 2364;
                this.indexOption();
                this.state = 2369;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 8:
            localctx = new AlterByAddForeignKeyContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 2370;
            this.match(MySQLParser.ADD);
            this.state = 2375;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CONSTRAINT) {
                this.state = 2371;
                this.match(MySQLParser.CONSTRAINT);
                this.state = 2373;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                    this.state = 2372;
                    localctx.name = this.uid();
                }

            }

            this.state = 2377;
            this.match(MySQLParser.FOREIGN);
            this.state = 2378;
            this.match(MySQLParser.KEY);
            this.state = 2380;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                this.state = 2379;
                localctx.indexName = this.uid();
            }

            this.state = 2382;
            this.indexColumnNames();
            this.state = 2383;
            this.referenceDefinition();
            break;

        case 9:
            localctx = new AlterByAddCheckTableConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 2385;
            this.match(MySQLParser.ADD);
            this.state = 2390;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CONSTRAINT) {
                this.state = 2386;
                this.match(MySQLParser.CONSTRAINT);
                this.state = 2388;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                    this.state = 2387;
                    localctx.name = this.uid();
                }

            }

            this.state = 2392;
            this.match(MySQLParser.CHECK);
            this.state = 2393;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 2394;
            this.expression(0);
            this.state = 2395;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 10:
            localctx = new AlterBySetAlgorithmContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 2397;
            this.match(MySQLParser.ALGORITHM);
            this.state = 2399;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 2398;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 2401;
            localctx.algType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DEFAULT || _la===MySQLParser.COPY || _la===MySQLParser.INPLACE)) {
                localctx.algType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 11:
            localctx = new AlterByChangeDefaultContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 2402;
            this.match(MySQLParser.ALTER);
            this.state = 2404;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COLUMN) {
                this.state = 2403;
                this.match(MySQLParser.COLUMN);
            }

            this.state = 2406;
            this.uid();
            this.state = 2412;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.SET:
                this.state = 2407;
                this.match(MySQLParser.SET);
                this.state = 2408;
                this.match(MySQLParser.DEFAULT);
                this.state = 2409;
                this.defaultValue();
                break;
            case MySQLParser.DROP:
                this.state = 2410;
                this.match(MySQLParser.DROP);
                this.state = 2411;
                this.match(MySQLParser.DEFAULT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 12:
            localctx = new AlterByChangeColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 2414;
            this.match(MySQLParser.CHANGE);
            this.state = 2416;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COLUMN) {
                this.state = 2415;
                this.match(MySQLParser.COLUMN);
            }

            this.state = 2418;
            localctx.oldColumn = this.uid();
            this.state = 2419;
            localctx.newColumn = this.uid();
            this.state = 2420;
            this.columnDefinition();
            this.state = 2424;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case MySQLParser.FIRST:
            	this.state = 2421;
            	this.match(MySQLParser.FIRST);
            	break;
            case MySQLParser.AFTER:
            	this.state = 2422;
            	this.match(MySQLParser.AFTER);
            	this.state = 2423;
            	localctx.afterColumn = this.uid();
            	break;
            case MySQLParser.EOF:
            case MySQLParser.ALTER:
            case MySQLParser.ANALYZE:
            case MySQLParser.CALL:
            case MySQLParser.CHANGE:
            case MySQLParser.CHECK:
            case MySQLParser.CREATE:
            case MySQLParser.DELETE:
            case MySQLParser.DESC:
            case MySQLParser.DESCRIBE:
            case MySQLParser.DROP:
            case MySQLParser.EXPLAIN:
            case MySQLParser.GET:
            case MySQLParser.GRANT:
            case MySQLParser.INSERT:
            case MySQLParser.KILL:
            case MySQLParser.LOAD:
            case MySQLParser.LOCK:
            case MySQLParser.OPTIMIZE:
            case MySQLParser.PARTITION:
            case MySQLParser.PURGE:
            case MySQLParser.RELEASE:
            case MySQLParser.RENAME:
            case MySQLParser.REPLACE:
            case MySQLParser.RESIGNAL:
            case MySQLParser.REVOKE:
            case MySQLParser.SELECT:
            case MySQLParser.SET:
            case MySQLParser.SHOW:
            case MySQLParser.SIGNAL:
            case MySQLParser.UNLOCK:
            case MySQLParser.UPDATE:
            case MySQLParser.USE:
            case MySQLParser.BEGIN:
            case MySQLParser.BINLOG:
            case MySQLParser.CACHE:
            case MySQLParser.CHECKSUM:
            case MySQLParser.COMMIT:
            case MySQLParser.DEALLOCATE:
            case MySQLParser.DO:
            case MySQLParser.FLUSH:
            case MySQLParser.HANDLER:
            case MySQLParser.HELP:
            case MySQLParser.INSTALL:
            case MySQLParser.PREPARE:
            case MySQLParser.REPAIR:
            case MySQLParser.RESET:
            case MySQLParser.ROLLBACK:
            case MySQLParser.SAVEPOINT:
            case MySQLParser.START:
            case MySQLParser.STOP:
            case MySQLParser.TRUNCATE:
            case MySQLParser.UNINSTALL:
            case MySQLParser.XA:
            case MySQLParser.EXECUTE:
            case MySQLParser.SHUTDOWN:
            case MySQLParser.MINUSMINUS:
            case MySQLParser.LR_BRACKET:
            case MySQLParser.COMMA:
            case MySQLParser.SEMI:
            	break;
            default:
            	break;
            }
            break;

        case 13:
            localctx = new AlterByRenameColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 2426;
            this.match(MySQLParser.RENAME);
            this.state = 2427;
            this.match(MySQLParser.COLUMN);
            this.state = 2428;
            localctx.oldColumn = this.uid();
            this.state = 2429;
            this.match(MySQLParser.TO);
            this.state = 2430;
            localctx.newColumn = this.uid();
            break;

        case 14:
            localctx = new AlterByLockContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 2432;
            this.match(MySQLParser.LOCK);
            this.state = 2434;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 2433;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 2436;
            localctx.lockType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DEFAULT || _la===MySQLParser.EXCLUSIVE || _la===MySQLParser.NONE || _la===MySQLParser.SHARED)) {
                localctx.lockType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 15:
            localctx = new AlterByModifyColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 2437;
            this.match(MySQLParser.MODIFY);
            this.state = 2439;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COLUMN) {
                this.state = 2438;
                this.match(MySQLParser.COLUMN);
            }

            this.state = 2441;
            this.uid();
            this.state = 2442;
            this.columnDefinition();
            this.state = 2446;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case MySQLParser.FIRST:
            	this.state = 2443;
            	this.match(MySQLParser.FIRST);
            	break;
            case MySQLParser.AFTER:
            	this.state = 2444;
            	this.match(MySQLParser.AFTER);
            	this.state = 2445;
            	this.uid();
            	break;
            case MySQLParser.EOF:
            case MySQLParser.ALTER:
            case MySQLParser.ANALYZE:
            case MySQLParser.CALL:
            case MySQLParser.CHANGE:
            case MySQLParser.CHECK:
            case MySQLParser.CREATE:
            case MySQLParser.DELETE:
            case MySQLParser.DESC:
            case MySQLParser.DESCRIBE:
            case MySQLParser.DROP:
            case MySQLParser.EXPLAIN:
            case MySQLParser.GET:
            case MySQLParser.GRANT:
            case MySQLParser.INSERT:
            case MySQLParser.KILL:
            case MySQLParser.LOAD:
            case MySQLParser.LOCK:
            case MySQLParser.OPTIMIZE:
            case MySQLParser.PARTITION:
            case MySQLParser.PURGE:
            case MySQLParser.RELEASE:
            case MySQLParser.RENAME:
            case MySQLParser.REPLACE:
            case MySQLParser.RESIGNAL:
            case MySQLParser.REVOKE:
            case MySQLParser.SELECT:
            case MySQLParser.SET:
            case MySQLParser.SHOW:
            case MySQLParser.SIGNAL:
            case MySQLParser.UNLOCK:
            case MySQLParser.UPDATE:
            case MySQLParser.USE:
            case MySQLParser.BEGIN:
            case MySQLParser.BINLOG:
            case MySQLParser.CACHE:
            case MySQLParser.CHECKSUM:
            case MySQLParser.COMMIT:
            case MySQLParser.DEALLOCATE:
            case MySQLParser.DO:
            case MySQLParser.FLUSH:
            case MySQLParser.HANDLER:
            case MySQLParser.HELP:
            case MySQLParser.INSTALL:
            case MySQLParser.PREPARE:
            case MySQLParser.REPAIR:
            case MySQLParser.RESET:
            case MySQLParser.ROLLBACK:
            case MySQLParser.SAVEPOINT:
            case MySQLParser.START:
            case MySQLParser.STOP:
            case MySQLParser.TRUNCATE:
            case MySQLParser.UNINSTALL:
            case MySQLParser.XA:
            case MySQLParser.EXECUTE:
            case MySQLParser.SHUTDOWN:
            case MySQLParser.MINUSMINUS:
            case MySQLParser.LR_BRACKET:
            case MySQLParser.COMMA:
            case MySQLParser.SEMI:
            	break;
            default:
            	break;
            }
            break;

        case 16:
            localctx = new AlterByDropColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 2448;
            this.match(MySQLParser.DROP);
            this.state = 2450;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COLUMN) {
                this.state = 2449;
                this.match(MySQLParser.COLUMN);
            }

            this.state = 2452;
            this.uid();
            this.state = 2454;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.RESTRICT) {
                this.state = 2453;
                this.match(MySQLParser.RESTRICT);
            }

            break;

        case 17:
            localctx = new AlterByDropPrimaryKeyContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 2456;
            this.match(MySQLParser.DROP);
            this.state = 2457;
            this.match(MySQLParser.PRIMARY);
            this.state = 2458;
            this.match(MySQLParser.KEY);
            break;

        case 18:
            localctx = new AlterByRenameIndexContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 2459;
            this.match(MySQLParser.RENAME);
            this.state = 2460;
            localctx.indexFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.INDEX || _la===MySQLParser.KEY)) {
                localctx.indexFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2461;
            this.uid();
            this.state = 2462;
            this.match(MySQLParser.TO);
            this.state = 2463;
            this.uid();
            break;

        case 19:
            localctx = new AlterByAlterIndexVisibilityContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 2465;
            this.match(MySQLParser.ALTER);
            this.state = 2466;
            this.match(MySQLParser.INDEX);
            this.state = 2467;
            this.uid();
            this.state = 2468;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.INVISIBLE || _la===MySQLParser.VISIBLE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 20:
            localctx = new AlterByDropIndexContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 2470;
            this.match(MySQLParser.DROP);
            this.state = 2471;
            localctx.indexFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.INDEX || _la===MySQLParser.KEY)) {
                localctx.indexFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2472;
            this.uid();
            break;

        case 21:
            localctx = new AlterByDropForeignKeyContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 2473;
            this.match(MySQLParser.DROP);
            this.state = 2474;
            this.match(MySQLParser.FOREIGN);
            this.state = 2475;
            this.match(MySQLParser.KEY);
            this.state = 2476;
            this.uid();
            break;

        case 22:
            localctx = new AlterByDisableKeysContext(this, localctx);
            this.enterOuterAlt(localctx, 22);
            this.state = 2477;
            this.match(MySQLParser.DISABLE);
            this.state = 2478;
            this.match(MySQLParser.KEYS);
            break;

        case 23:
            localctx = new AlterByEnableKeysContext(this, localctx);
            this.enterOuterAlt(localctx, 23);
            this.state = 2479;
            this.match(MySQLParser.ENABLE);
            this.state = 2480;
            this.match(MySQLParser.KEYS);
            break;

        case 24:
            localctx = new AlterByRenameContext(this, localctx);
            this.enterOuterAlt(localctx, 24);
            this.state = 2481;
            this.match(MySQLParser.RENAME);
            this.state = 2483;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.AS || _la===MySQLParser.TO) {
                this.state = 2482;
                localctx.renameFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.AS || _la===MySQLParser.TO)) {
                    localctx.renameFormat = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 2487;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2485;
                this.uid();
                break;

            case 2:
                this.state = 2486;
                this.fullId();
                break;

            }
            break;

        case 25:
            localctx = new AlterByOrderContext(this, localctx);
            this.enterOuterAlt(localctx, 25);
            this.state = 2489;
            this.match(MySQLParser.ORDER);
            this.state = 2490;
            this.match(MySQLParser.BY);
            this.state = 2491;
            this.uidList();
            break;

        case 26:
            localctx = new AlterByConvertCharsetContext(this, localctx);
            this.enterOuterAlt(localctx, 26);
            this.state = 2492;
            this.match(MySQLParser.CONVERT);
            this.state = 2493;
            this.match(MySQLParser.TO);
            this.state = 2494;
            this.match(MySQLParser.CHARACTER);
            this.state = 2495;
            this.match(MySQLParser.SET);
            this.state = 2496;
            this.charsetName();
            this.state = 2499;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COLLATE) {
                this.state = 2497;
                this.match(MySQLParser.COLLATE);
                this.state = 2498;
                this.collationName();
            }

            break;

        case 27:
            localctx = new AlterByDefaultCharsetContext(this, localctx);
            this.enterOuterAlt(localctx, 27);
            this.state = 2502;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.DEFAULT) {
                this.state = 2501;
                this.match(MySQLParser.DEFAULT);
            }

            this.state = 2504;
            this.match(MySQLParser.CHARACTER);
            this.state = 2505;
            this.match(MySQLParser.SET);
            this.state = 2506;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 2507;
            this.charsetName();
            this.state = 2511;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COLLATE) {
                this.state = 2508;
                this.match(MySQLParser.COLLATE);
                this.state = 2509;
                this.match(MySQLParser.EQUAL_SYMBOL);
                this.state = 2510;
                this.collationName();
            }

            break;

        case 28:
            localctx = new AlterByDiscardTablespaceContext(this, localctx);
            this.enterOuterAlt(localctx, 28);
            this.state = 2513;
            this.match(MySQLParser.DISCARD);
            this.state = 2514;
            this.match(MySQLParser.TABLESPACE);
            break;

        case 29:
            localctx = new AlterByImportTablespaceContext(this, localctx);
            this.enterOuterAlt(localctx, 29);
            this.state = 2515;
            this.match(MySQLParser.IMPORT);
            this.state = 2516;
            this.match(MySQLParser.TABLESPACE);
            break;

        case 30:
            localctx = new AlterByForceContext(this, localctx);
            this.enterOuterAlt(localctx, 30);
            this.state = 2517;
            this.match(MySQLParser.FORCE);
            break;

        case 31:
            localctx = new AlterByValidateContext(this, localctx);
            this.enterOuterAlt(localctx, 31);
            this.state = 2518;
            localctx.validationFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.WITH || _la===MySQLParser.WITHOUT)) {
                localctx.validationFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2519;
            this.match(MySQLParser.VALIDATION);
            break;

        case 32:
            localctx = new AlterByAddPartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 32);
            this.state = 2520;
            this.match(MySQLParser.ADD);
            this.state = 2521;
            this.match(MySQLParser.PARTITION);
            this.state = 2522;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 2523;
            this.partitionDefinition();
            this.state = 2528;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 2524;
                this.match(MySQLParser.COMMA);
                this.state = 2525;
                this.partitionDefinition();
                this.state = 2530;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2531;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 33:
            localctx = new AlterByDropPartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 33);
            this.state = 2533;
            this.match(MySQLParser.DROP);
            this.state = 2534;
            this.match(MySQLParser.PARTITION);
            this.state = 2535;
            this.uidList();
            break;

        case 34:
            localctx = new AlterByDiscardPartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 34);
            this.state = 2536;
            this.match(MySQLParser.DISCARD);
            this.state = 2537;
            this.match(MySQLParser.PARTITION);
            this.state = 2540;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.CURRENT:
            case MySQLParser.DATABASE:
            case MySQLParser.DIAGNOSTICS:
            case MySQLParser.LEFT:
            case MySQLParser.NUMBER:
            case MySQLParser.RIGHT:
            case MySQLParser.STACKED:
            case MySQLParser.DATE:
            case MySQLParser.TIME:
            case MySQLParser.TIMESTAMP:
            case MySQLParser.DATETIME:
            case MySQLParser.YEAR:
            case MySQLParser.TEXT:
            case MySQLParser.ENUM:
            case MySQLParser.SERIAL:
            case MySQLParser.JSON_VALID:
            case MySQLParser.JSON_SCHEMA_VALID:
            case MySQLParser.COUNT:
            case MySQLParser.POSITION:
            case MySQLParser.ACCOUNT:
            case MySQLParser.ACTION:
            case MySQLParser.AFTER:
            case MySQLParser.AGGREGATE:
            case MySQLParser.ALGORITHM:
            case MySQLParser.ANY:
            case MySQLParser.AT:
            case MySQLParser.AUTHORS:
            case MySQLParser.AUTOCOMMIT:
            case MySQLParser.AUTOEXTEND_SIZE:
            case MySQLParser.AUTO_INCREMENT:
            case MySQLParser.AVG_ROW_LENGTH:
            case MySQLParser.BEGIN:
            case MySQLParser.BINLOG:
            case MySQLParser.BIT:
            case MySQLParser.BLOCK:
            case MySQLParser.BOOL:
            case MySQLParser.BOOLEAN:
            case MySQLParser.BTREE:
            case MySQLParser.CACHE:
            case MySQLParser.CASCADED:
            case MySQLParser.CHAIN:
            case MySQLParser.CHANGED:
            case MySQLParser.CHANNEL:
            case MySQLParser.CHECKSUM:
            case MySQLParser.PAGE_CHECKSUM:
            case MySQLParser.CIPHER:
            case MySQLParser.CLASS_ORIGIN:
            case MySQLParser.CLIENT:
            case MySQLParser.CLOSE:
            case MySQLParser.COALESCE:
            case MySQLParser.CODE:
            case MySQLParser.COLUMNS:
            case MySQLParser.COLUMN_FORMAT:
            case MySQLParser.COLUMN_NAME:
            case MySQLParser.COMMENT:
            case MySQLParser.COMMIT:
            case MySQLParser.COMPACT:
            case MySQLParser.COMPLETION:
            case MySQLParser.COMPRESSED:
            case MySQLParser.COMPRESSION:
            case MySQLParser.CONCURRENT:
            case MySQLParser.CONNECTION:
            case MySQLParser.CONSISTENT:
            case MySQLParser.CONSTRAINT_CATALOG:
            case MySQLParser.CONSTRAINT_SCHEMA:
            case MySQLParser.CONSTRAINT_NAME:
            case MySQLParser.CONTAINS:
            case MySQLParser.CONTEXT:
            case MySQLParser.CONTRIBUTORS:
            case MySQLParser.COPY:
            case MySQLParser.CPU:
            case MySQLParser.CURSOR_NAME:
            case MySQLParser.DATA:
            case MySQLParser.DATAFILE:
            case MySQLParser.DEALLOCATE:
            case MySQLParser.DEFAULT_AUTH:
            case MySQLParser.DEFINER:
            case MySQLParser.DELAY_KEY_WRITE:
            case MySQLParser.DES_KEY_FILE:
            case MySQLParser.DIRECTORY:
            case MySQLParser.DISABLE:
            case MySQLParser.DISCARD:
            case MySQLParser.DISK:
            case MySQLParser.DO:
            case MySQLParser.DUMPFILE:
            case MySQLParser.DUPLICATE:
            case MySQLParser.DYNAMIC:
            case MySQLParser.ENABLE:
            case MySQLParser.ENCRYPTION:
            case MySQLParser.END:
            case MySQLParser.ENDS:
            case MySQLParser.ENGINE:
            case MySQLParser.ENGINES:
            case MySQLParser.ERROR:
            case MySQLParser.ERRORS:
            case MySQLParser.ESCAPE:
            case MySQLParser.EVEN:
            case MySQLParser.EVENT:
            case MySQLParser.EVENTS:
            case MySQLParser.EVERY:
            case MySQLParser.EXCHANGE:
            case MySQLParser.EXCLUSIVE:
            case MySQLParser.EXPIRE:
            case MySQLParser.EXPORT:
            case MySQLParser.EXTENDED:
            case MySQLParser.EXTENT_SIZE:
            case MySQLParser.FAST:
            case MySQLParser.FAULTS:
            case MySQLParser.FIELDS:
            case MySQLParser.FILE_BLOCK_SIZE:
            case MySQLParser.FILTER:
            case MySQLParser.FIRST:
            case MySQLParser.FIXED:
            case MySQLParser.FLUSH:
            case MySQLParser.FOLLOWS:
            case MySQLParser.FOUND:
            case MySQLParser.FULL:
            case MySQLParser.FUNCTION:
            case MySQLParser.GENERAL:
            case MySQLParser.GLOBAL:
            case MySQLParser.GRANTS:
            case MySQLParser.GROUP_REPLICATION:
            case MySQLParser.HANDLER:
            case MySQLParser.HASH:
            case MySQLParser.HELP:
            case MySQLParser.HOST:
            case MySQLParser.HOSTS:
            case MySQLParser.IDENTIFIED:
            case MySQLParser.IGNORE_SERVER_IDS:
            case MySQLParser.IMPORT:
            case MySQLParser.INDEXES:
            case MySQLParser.INITIAL_SIZE:
            case MySQLParser.INPLACE:
            case MySQLParser.INSERT_METHOD:
            case MySQLParser.INSTALL:
            case MySQLParser.INSTANCE:
            case MySQLParser.INVISIBLE:
            case MySQLParser.INVOKER:
            case MySQLParser.IO:
            case MySQLParser.IO_THREAD:
            case MySQLParser.IPC:
            case MySQLParser.ISOLATION:
            case MySQLParser.ISSUER:
            case MySQLParser.JSON:
            case MySQLParser.KEY_BLOCK_SIZE:
            case MySQLParser.LANGUAGE:
            case MySQLParser.LAST:
            case MySQLParser.LEAVES:
            case MySQLParser.LESS:
            case MySQLParser.LEVEL:
            case MySQLParser.LIST:
            case MySQLParser.LOCAL:
            case MySQLParser.LOGFILE:
            case MySQLParser.LOGS:
            case MySQLParser.MASTER:
            case MySQLParser.MASTER_AUTO_POSITION:
            case MySQLParser.MASTER_CONNECT_RETRY:
            case MySQLParser.MASTER_DELAY:
            case MySQLParser.MASTER_HEARTBEAT_PERIOD:
            case MySQLParser.MASTER_HOST:
            case MySQLParser.MASTER_LOG_FILE:
            case MySQLParser.MASTER_LOG_POS:
            case MySQLParser.MASTER_PASSWORD:
            case MySQLParser.MASTER_PORT:
            case MySQLParser.MASTER_RETRY_COUNT:
            case MySQLParser.MASTER_SSL:
            case MySQLParser.MASTER_SSL_CA:
            case MySQLParser.MASTER_SSL_CAPATH:
            case MySQLParser.MASTER_SSL_CERT:
            case MySQLParser.MASTER_SSL_CIPHER:
            case MySQLParser.MASTER_SSL_CRL:
            case MySQLParser.MASTER_SSL_CRLPATH:
            case MySQLParser.MASTER_SSL_KEY:
            case MySQLParser.MASTER_TLS_VERSION:
            case MySQLParser.MASTER_USER:
            case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
            case MySQLParser.MAX_QUERIES_PER_HOUR:
            case MySQLParser.MAX_ROWS:
            case MySQLParser.MAX_SIZE:
            case MySQLParser.MAX_UPDATES_PER_HOUR:
            case MySQLParser.MAX_USER_CONNECTIONS:
            case MySQLParser.MEDIUM:
            case MySQLParser.MERGE:
            case MySQLParser.MESSAGE_TEXT:
            case MySQLParser.MID:
            case MySQLParser.MIGRATE:
            case MySQLParser.MIN_ROWS:
            case MySQLParser.MODE:
            case MySQLParser.MODIFY:
            case MySQLParser.MUTEX:
            case MySQLParser.MYSQL:
            case MySQLParser.MYSQL_ERRNO:
            case MySQLParser.NAME:
            case MySQLParser.NAMES:
            case MySQLParser.NCHAR:
            case MySQLParser.NEVER:
            case MySQLParser.NEXT:
            case MySQLParser.NO:
            case MySQLParser.NODEGROUP:
            case MySQLParser.NONE:
            case MySQLParser.OFFLINE:
            case MySQLParser.OFFSET:
            case MySQLParser.OJ:
            case MySQLParser.OLD_PASSWORD:
            case MySQLParser.ONE:
            case MySQLParser.ONLINE:
            case MySQLParser.ONLY:
            case MySQLParser.OPEN:
            case MySQLParser.OPTIMIZER_COSTS:
            case MySQLParser.OPTIONS:
            case MySQLParser.OWNER:
            case MySQLParser.PACK_KEYS:
            case MySQLParser.PAGE:
            case MySQLParser.PARSER:
            case MySQLParser.PARTIAL:
            case MySQLParser.PARTITIONING:
            case MySQLParser.PARTITIONS:
            case MySQLParser.PASSWORD:
            case MySQLParser.PHASE:
            case MySQLParser.PLUGIN:
            case MySQLParser.PLUGIN_DIR:
            case MySQLParser.PLUGINS:
            case MySQLParser.PORT:
            case MySQLParser.PRECEDES:
            case MySQLParser.PREPARE:
            case MySQLParser.PRESERVE:
            case MySQLParser.PREV:
            case MySQLParser.PROCESSLIST:
            case MySQLParser.PROFILE:
            case MySQLParser.PROFILES:
            case MySQLParser.PROXY:
            case MySQLParser.QUERY:
            case MySQLParser.QUICK:
            case MySQLParser.REBUILD:
            case MySQLParser.RECOVER:
            case MySQLParser.REDO_BUFFER_SIZE:
            case MySQLParser.REDUNDANT:
            case MySQLParser.RELAY:
            case MySQLParser.RELAY_LOG_FILE:
            case MySQLParser.RELAY_LOG_POS:
            case MySQLParser.RELAYLOG:
            case MySQLParser.REMOVE:
            case MySQLParser.REORGANIZE:
            case MySQLParser.REPAIR:
            case MySQLParser.REPLICATE_DO_DB:
            case MySQLParser.REPLICATE_DO_TABLE:
            case MySQLParser.REPLICATE_IGNORE_DB:
            case MySQLParser.REPLICATE_IGNORE_TABLE:
            case MySQLParser.REPLICATE_REWRITE_DB:
            case MySQLParser.REPLICATE_WILD_DO_TABLE:
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySQLParser.REPLICATION:
            case MySQLParser.RESET:
            case MySQLParser.RESUME:
            case MySQLParser.RETURNED_SQLSTATE:
            case MySQLParser.RETURNS:
            case MySQLParser.ROLE:
            case MySQLParser.ROLLBACK:
            case MySQLParser.ROLLUP:
            case MySQLParser.ROTATE:
            case MySQLParser.ROW:
            case MySQLParser.ROWS:
            case MySQLParser.ROW_FORMAT:
            case MySQLParser.SAVEPOINT:
            case MySQLParser.SCHEDULE:
            case MySQLParser.SECURITY:
            case MySQLParser.SERVER:
            case MySQLParser.SESSION:
            case MySQLParser.SHARE:
            case MySQLParser.SHARED:
            case MySQLParser.SIGNED:
            case MySQLParser.SIMPLE:
            case MySQLParser.SLAVE:
            case MySQLParser.SLOW:
            case MySQLParser.SNAPSHOT:
            case MySQLParser.SOCKET:
            case MySQLParser.SOME:
            case MySQLParser.SONAME:
            case MySQLParser.SOUNDS:
            case MySQLParser.SOURCE:
            case MySQLParser.SQL_AFTER_GTIDS:
            case MySQLParser.SQL_AFTER_MTS_GAPS:
            case MySQLParser.SQL_BEFORE_GTIDS:
            case MySQLParser.SQL_BUFFER_RESULT:
            case MySQLParser.SQL_CACHE:
            case MySQLParser.SQL_NO_CACHE:
            case MySQLParser.SQL_THREAD:
            case MySQLParser.START:
            case MySQLParser.STARTS:
            case MySQLParser.STATS_AUTO_RECALC:
            case MySQLParser.STATS_PERSISTENT:
            case MySQLParser.STATS_SAMPLE_PAGES:
            case MySQLParser.STATUS:
            case MySQLParser.STOP:
            case MySQLParser.STORAGE:
            case MySQLParser.STRING:
            case MySQLParser.SUBCLASS_ORIGIN:
            case MySQLParser.SUBJECT:
            case MySQLParser.SUBPARTITION:
            case MySQLParser.SUBPARTITIONS:
            case MySQLParser.SUSPEND:
            case MySQLParser.SWAPS:
            case MySQLParser.SWITCHES:
            case MySQLParser.TABLE_NAME:
            case MySQLParser.TABLESPACE:
            case MySQLParser.TEMPORARY:
            case MySQLParser.TEMPTABLE:
            case MySQLParser.THAN:
            case MySQLParser.TRADITIONAL:
            case MySQLParser.TRANSACTION:
            case MySQLParser.TRANSACTIONAL:
            case MySQLParser.TRIGGERS:
            case MySQLParser.TRUNCATE:
            case MySQLParser.UNDEFINED:
            case MySQLParser.UNDOFILE:
            case MySQLParser.UNDO_BUFFER_SIZE:
            case MySQLParser.UNINSTALL:
            case MySQLParser.UNKNOWN:
            case MySQLParser.UNTIL:
            case MySQLParser.UPGRADE:
            case MySQLParser.USER:
            case MySQLParser.USE_FRM:
            case MySQLParser.USER_RESOURCES:
            case MySQLParser.VALIDATION:
            case MySQLParser.VALUE:
            case MySQLParser.VARIABLES:
            case MySQLParser.VIEW:
            case MySQLParser.VISIBLE:
            case MySQLParser.WAIT:
            case MySQLParser.WARNINGS:
            case MySQLParser.WITHOUT:
            case MySQLParser.WORK:
            case MySQLParser.WRAPPER:
            case MySQLParser.X509:
            case MySQLParser.XA:
            case MySQLParser.XML:
            case MySQLParser.INTERNAL:
            case MySQLParser.QUARTER:
            case MySQLParser.MONTH:
            case MySQLParser.DAY:
            case MySQLParser.HOUR:
            case MySQLParser.MINUTE:
            case MySQLParser.WEEK:
            case MySQLParser.SECOND:
            case MySQLParser.MICROSECOND:
            case MySQLParser.TABLES:
            case MySQLParser.ROUTINE:
            case MySQLParser.EXECUTE:
            case MySQLParser.FILE:
            case MySQLParser.PROCESS:
            case MySQLParser.RELOAD:
            case MySQLParser.SHUTDOWN:
            case MySQLParser.SUPER:
            case MySQLParser.PRIVILEGES:
            case MySQLParser.AUDIT_ADMIN:
            case MySQLParser.BACKUP_ADMIN:
            case MySQLParser.BINLOG_ADMIN:
            case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
            case MySQLParser.CLONE_ADMIN:
            case MySQLParser.CONNECTION_ADMIN:
            case MySQLParser.ENCRYPTION_KEY_ADMIN:
            case MySQLParser.FIREWALL_ADMIN:
            case MySQLParser.FIREWALL_USER:
            case MySQLParser.GROUP_REPLICATION_ADMIN:
            case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
            case MySQLParser.NDB_STORED_USER:
            case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySQLParser.REPLICATION_APPLIER:
            case MySQLParser.REPLICATION_SLAVE_ADMIN:
            case MySQLParser.RESOURCE_GROUP_ADMIN:
            case MySQLParser.RESOURCE_GROUP_USER:
            case MySQLParser.ROLE_ADMIN:
            case MySQLParser.SESSION_VARIABLES_ADMIN:
            case MySQLParser.SET_USER_ID:
            case MySQLParser.SHOW_ROUTINE:
            case MySQLParser.SYSTEM_VARIABLES_ADMIN:
            case MySQLParser.TABLE_ENCRYPTION_ADMIN:
            case MySQLParser.VERSION_TOKEN_ADMIN:
            case MySQLParser.XA_RECOVER_ADMIN:
            case MySQLParser.ARMSCII8:
            case MySQLParser.ASCII:
            case MySQLParser.BIG5:
            case MySQLParser.CP1250:
            case MySQLParser.CP1251:
            case MySQLParser.CP1256:
            case MySQLParser.CP1257:
            case MySQLParser.CP850:
            case MySQLParser.CP852:
            case MySQLParser.CP866:
            case MySQLParser.CP932:
            case MySQLParser.DEC8:
            case MySQLParser.EUCJPMS:
            case MySQLParser.EUCKR:
            case MySQLParser.GB2312:
            case MySQLParser.GBK:
            case MySQLParser.GEOSTD8:
            case MySQLParser.GREEK:
            case MySQLParser.HEBREW:
            case MySQLParser.HP8:
            case MySQLParser.KEYBCS2:
            case MySQLParser.KOI8R:
            case MySQLParser.KOI8U:
            case MySQLParser.LATIN1:
            case MySQLParser.LATIN2:
            case MySQLParser.LATIN5:
            case MySQLParser.LATIN7:
            case MySQLParser.MACCE:
            case MySQLParser.MACROMAN:
            case MySQLParser.SJIS:
            case MySQLParser.SWE7:
            case MySQLParser.TIS620:
            case MySQLParser.UCS2:
            case MySQLParser.UJIS:
            case MySQLParser.UTF16:
            case MySQLParser.UTF16LE:
            case MySQLParser.UTF32:
            case MySQLParser.UTF8:
            case MySQLParser.UTF8MB3:
            case MySQLParser.UTF8MB4:
            case MySQLParser.ARCHIVE:
            case MySQLParser.BLACKHOLE:
            case MySQLParser.CSV:
            case MySQLParser.FEDERATED:
            case MySQLParser.INNODB:
            case MySQLParser.MEMORY:
            case MySQLParser.MRG_MYISAM:
            case MySQLParser.MYISAM:
            case MySQLParser.NDB:
            case MySQLParser.NDBCLUSTER:
            case MySQLParser.PERFORMANCE_SCHEMA:
            case MySQLParser.TOKUDB:
            case MySQLParser.REPEATABLE:
            case MySQLParser.COMMITTED:
            case MySQLParser.UNCOMMITTED:
            case MySQLParser.SERIALIZABLE:
            case MySQLParser.GEOMETRYCOLLECTION:
            case MySQLParser.LINESTRING:
            case MySQLParser.MULTILINESTRING:
            case MySQLParser.MULTIPOINT:
            case MySQLParser.MULTIPOLYGON:
            case MySQLParser.POINT:
            case MySQLParser.POLYGON:
            case MySQLParser.ABS:
            case MySQLParser.ACOS:
            case MySQLParser.ADDDATE:
            case MySQLParser.ADDTIME:
            case MySQLParser.AES_DECRYPT:
            case MySQLParser.AES_ENCRYPT:
            case MySQLParser.AREA:
            case MySQLParser.ASBINARY:
            case MySQLParser.ASIN:
            case MySQLParser.ASTEXT:
            case MySQLParser.ASWKB:
            case MySQLParser.ASWKT:
            case MySQLParser.ASYMMETRIC_DECRYPT:
            case MySQLParser.ASYMMETRIC_DERIVE:
            case MySQLParser.ASYMMETRIC_ENCRYPT:
            case MySQLParser.ASYMMETRIC_SIGN:
            case MySQLParser.ASYMMETRIC_VERIFY:
            case MySQLParser.ATAN:
            case MySQLParser.ATAN2:
            case MySQLParser.BENCHMARK:
            case MySQLParser.BIN:
            case MySQLParser.BIT_COUNT:
            case MySQLParser.BIT_LENGTH:
            case MySQLParser.BUFFER:
            case MySQLParser.CATALOG_NAME:
            case MySQLParser.CEIL:
            case MySQLParser.CEILING:
            case MySQLParser.CENTROID:
            case MySQLParser.CHARACTER_LENGTH:
            case MySQLParser.CHARSET:
            case MySQLParser.CHAR_LENGTH:
            case MySQLParser.COERCIBILITY:
            case MySQLParser.COLLATION:
            case MySQLParser.COMPRESS:
            case MySQLParser.CONCAT:
            case MySQLParser.CONCAT_WS:
            case MySQLParser.CONNECTION_ID:
            case MySQLParser.CONV:
            case MySQLParser.CONVERT_TZ:
            case MySQLParser.COS:
            case MySQLParser.COT:
            case MySQLParser.CRC32:
            case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySQLParser.CREATE_DH_PARAMETERS:
            case MySQLParser.CREATE_DIGEST:
            case MySQLParser.CROSSES:
            case MySQLParser.DATEDIFF:
            case MySQLParser.DATE_FORMAT:
            case MySQLParser.DAYNAME:
            case MySQLParser.DAYOFMONTH:
            case MySQLParser.DAYOFWEEK:
            case MySQLParser.DAYOFYEAR:
            case MySQLParser.DECODE:
            case MySQLParser.DEGREES:
            case MySQLParser.DES_DECRYPT:
            case MySQLParser.DES_ENCRYPT:
            case MySQLParser.DIMENSION:
            case MySQLParser.DISJOINT:
            case MySQLParser.ELT:
            case MySQLParser.ENCODE:
            case MySQLParser.ENCRYPT:
            case MySQLParser.ENDPOINT:
            case MySQLParser.ENVELOPE:
            case MySQLParser.EQUALS:
            case MySQLParser.EXP:
            case MySQLParser.EXPORT_SET:
            case MySQLParser.EXTERIORRING:
            case MySQLParser.EXTRACTVALUE:
            case MySQLParser.FIELD:
            case MySQLParser.FIND_IN_SET:
            case MySQLParser.FLOOR:
            case MySQLParser.FORMAT:
            case MySQLParser.FOUND_ROWS:
            case MySQLParser.FROM_BASE64:
            case MySQLParser.FROM_DAYS:
            case MySQLParser.FROM_UNIXTIME:
            case MySQLParser.GEOMCOLLFROMTEXT:
            case MySQLParser.GEOMCOLLFROMWKB:
            case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.GEOMETRYFROMTEXT:
            case MySQLParser.GEOMETRYFROMWKB:
            case MySQLParser.GEOMETRYN:
            case MySQLParser.GEOMETRYTYPE:
            case MySQLParser.GEOMFROMTEXT:
            case MySQLParser.GEOMFROMWKB:
            case MySQLParser.GET_FORMAT:
            case MySQLParser.GET_LOCK:
            case MySQLParser.GLENGTH:
            case MySQLParser.GREATEST:
            case MySQLParser.GTID_SUBSET:
            case MySQLParser.GTID_SUBTRACT:
            case MySQLParser.HEX:
            case MySQLParser.IFNULL:
            case MySQLParser.INET6_ATON:
            case MySQLParser.INET6_NTOA:
            case MySQLParser.INET_ATON:
            case MySQLParser.INET_NTOA:
            case MySQLParser.INSTR:
            case MySQLParser.INTERIORRINGN:
            case MySQLParser.INTERSECTS:
            case MySQLParser.ISCLOSED:
            case MySQLParser.ISEMPTY:
            case MySQLParser.ISNULL:
            case MySQLParser.ISSIMPLE:
            case MySQLParser.IS_FREE_LOCK:
            case MySQLParser.IS_IPV4:
            case MySQLParser.IS_IPV4_COMPAT:
            case MySQLParser.IS_IPV4_MAPPED:
            case MySQLParser.IS_IPV6:
            case MySQLParser.IS_USED_LOCK:
            case MySQLParser.LAST_INSERT_ID:
            case MySQLParser.LCASE:
            case MySQLParser.LEAST:
            case MySQLParser.LENGTH:
            case MySQLParser.LINEFROMTEXT:
            case MySQLParser.LINEFROMWKB:
            case MySQLParser.LINESTRINGFROMTEXT:
            case MySQLParser.LINESTRINGFROMWKB:
            case MySQLParser.LN:
            case MySQLParser.LOAD_FILE:
            case MySQLParser.LOCATE:
            case MySQLParser.LOG:
            case MySQLParser.LOG10:
            case MySQLParser.LOG2:
            case MySQLParser.LOWER:
            case MySQLParser.LPAD:
            case MySQLParser.LTRIM:
            case MySQLParser.MAKEDATE:
            case MySQLParser.MAKETIME:
            case MySQLParser.MAKE_SET:
            case MySQLParser.MASTER_POS_WAIT:
            case MySQLParser.MBRCONTAINS:
            case MySQLParser.MBRDISJOINT:
            case MySQLParser.MBREQUAL:
            case MySQLParser.MBRINTERSECTS:
            case MySQLParser.MBROVERLAPS:
            case MySQLParser.MBRTOUCHES:
            case MySQLParser.MBRWITHIN:
            case MySQLParser.MD5:
            case MySQLParser.MLINEFROMTEXT:
            case MySQLParser.MLINEFROMWKB:
            case MySQLParser.MONTHNAME:
            case MySQLParser.MPOINTFROMTEXT:
            case MySQLParser.MPOINTFROMWKB:
            case MySQLParser.MPOLYFROMTEXT:
            case MySQLParser.MPOLYFROMWKB:
            case MySQLParser.MULTILINESTRINGFROMTEXT:
            case MySQLParser.MULTILINESTRINGFROMWKB:
            case MySQLParser.MULTIPOINTFROMTEXT:
            case MySQLParser.MULTIPOINTFROMWKB:
            case MySQLParser.MULTIPOLYGONFROMTEXT:
            case MySQLParser.MULTIPOLYGONFROMWKB:
            case MySQLParser.NAME_CONST:
            case MySQLParser.NULLIF:
            case MySQLParser.NUMGEOMETRIES:
            case MySQLParser.NUMINTERIORRINGS:
            case MySQLParser.NUMPOINTS:
            case MySQLParser.OCT:
            case MySQLParser.OCTET_LENGTH:
            case MySQLParser.ORD:
            case MySQLParser.OVERLAPS:
            case MySQLParser.PERIOD_ADD:
            case MySQLParser.PERIOD_DIFF:
            case MySQLParser.PI:
            case MySQLParser.POINTFROMTEXT:
            case MySQLParser.POINTFROMWKB:
            case MySQLParser.POINTN:
            case MySQLParser.POLYFROMTEXT:
            case MySQLParser.POLYFROMWKB:
            case MySQLParser.POLYGONFROMTEXT:
            case MySQLParser.POLYGONFROMWKB:
            case MySQLParser.POW:
            case MySQLParser.POWER:
            case MySQLParser.QUOTE:
            case MySQLParser.RADIANS:
            case MySQLParser.RAND:
            case MySQLParser.RANDOM_BYTES:
            case MySQLParser.RELEASE_LOCK:
            case MySQLParser.REVERSE:
            case MySQLParser.ROUND:
            case MySQLParser.ROW_COUNT:
            case MySQLParser.RPAD:
            case MySQLParser.RTRIM:
            case MySQLParser.SEC_TO_TIME:
            case MySQLParser.SESSION_USER:
            case MySQLParser.SHA:
            case MySQLParser.SHA1:
            case MySQLParser.SHA2:
            case MySQLParser.SCHEMA_NAME:
            case MySQLParser.SIGN:
            case MySQLParser.SIN:
            case MySQLParser.SLEEP:
            case MySQLParser.SOUNDEX:
            case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySQLParser.SQRT:
            case MySQLParser.SRID:
            case MySQLParser.STARTPOINT:
            case MySQLParser.STRCMP:
            case MySQLParser.STR_TO_DATE:
            case MySQLParser.ST_AREA:
            case MySQLParser.ST_ASBINARY:
            case MySQLParser.ST_ASTEXT:
            case MySQLParser.ST_ASWKB:
            case MySQLParser.ST_ASWKT:
            case MySQLParser.ST_BUFFER:
            case MySQLParser.ST_CENTROID:
            case MySQLParser.ST_CONTAINS:
            case MySQLParser.ST_CROSSES:
            case MySQLParser.ST_DIFFERENCE:
            case MySQLParser.ST_DIMENSION:
            case MySQLParser.ST_DISJOINT:
            case MySQLParser.ST_DISTANCE:
            case MySQLParser.ST_ENDPOINT:
            case MySQLParser.ST_ENVELOPE:
            case MySQLParser.ST_EQUALS:
            case MySQLParser.ST_EXTERIORRING:
            case MySQLParser.ST_GEOMCOLLFROMTEXT:
            case MySQLParser.ST_GEOMCOLLFROMTXT:
            case MySQLParser.ST_GEOMCOLLFROMWKB:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.ST_GEOMETRYFROMTEXT:
            case MySQLParser.ST_GEOMETRYFROMWKB:
            case MySQLParser.ST_GEOMETRYN:
            case MySQLParser.ST_GEOMETRYTYPE:
            case MySQLParser.ST_GEOMFROMTEXT:
            case MySQLParser.ST_GEOMFROMWKB:
            case MySQLParser.ST_INTERIORRINGN:
            case MySQLParser.ST_INTERSECTION:
            case MySQLParser.ST_INTERSECTS:
            case MySQLParser.ST_ISCLOSED:
            case MySQLParser.ST_ISEMPTY:
            case MySQLParser.ST_ISSIMPLE:
            case MySQLParser.ST_LINEFROMTEXT:
            case MySQLParser.ST_LINEFROMWKB:
            case MySQLParser.ST_LINESTRINGFROMTEXT:
            case MySQLParser.ST_LINESTRINGFROMWKB:
            case MySQLParser.ST_NUMGEOMETRIES:
            case MySQLParser.ST_NUMINTERIORRING:
            case MySQLParser.ST_NUMINTERIORRINGS:
            case MySQLParser.ST_NUMPOINTS:
            case MySQLParser.ST_OVERLAPS:
            case MySQLParser.ST_POINTFROMTEXT:
            case MySQLParser.ST_POINTFROMWKB:
            case MySQLParser.ST_POINTN:
            case MySQLParser.ST_POLYFROMTEXT:
            case MySQLParser.ST_POLYFROMWKB:
            case MySQLParser.ST_POLYGONFROMTEXT:
            case MySQLParser.ST_POLYGONFROMWKB:
            case MySQLParser.ST_SRID:
            case MySQLParser.ST_STARTPOINT:
            case MySQLParser.ST_SYMDIFFERENCE:
            case MySQLParser.ST_TOUCHES:
            case MySQLParser.ST_UNION:
            case MySQLParser.ST_WITHIN:
            case MySQLParser.ST_X:
            case MySQLParser.ST_Y:
            case MySQLParser.SUBDATE:
            case MySQLParser.SUBSTRING_INDEX:
            case MySQLParser.SUBTIME:
            case MySQLParser.SYSTEM_USER:
            case MySQLParser.TAN:
            case MySQLParser.TIMEDIFF:
            case MySQLParser.TIMESTAMPADD:
            case MySQLParser.TIMESTAMPDIFF:
            case MySQLParser.TIME_FORMAT:
            case MySQLParser.TIME_TO_SEC:
            case MySQLParser.TOUCHES:
            case MySQLParser.TO_BASE64:
            case MySQLParser.TO_DAYS:
            case MySQLParser.TO_SECONDS:
            case MySQLParser.UCASE:
            case MySQLParser.UNCOMPRESS:
            case MySQLParser.UNCOMPRESSED_LENGTH:
            case MySQLParser.UNHEX:
            case MySQLParser.UNIX_TIMESTAMP:
            case MySQLParser.UPDATEXML:
            case MySQLParser.UPPER:
            case MySQLParser.UUID:
            case MySQLParser.UUID_SHORT:
            case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
            case MySQLParser.VERSION:
            case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySQLParser.WEEKDAY:
            case MySQLParser.WEEKOFYEAR:
            case MySQLParser.WEIGHT_STRING:
            case MySQLParser.WITHIN:
            case MySQLParser.YEARWEEK:
            case MySQLParser.Y_FUNCTION:
            case MySQLParser.X_FUNCTION:
            case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySQLParser.STRING_LITERAL:
            case MySQLParser.ID:
            case MySQLParser.REVERSE_QUOTE_ID:
                this.state = 2538;
                this.uidList();
                break;
            case MySQLParser.ALL:
                this.state = 2539;
                this.match(MySQLParser.ALL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2542;
            this.match(MySQLParser.TABLESPACE);
            break;

        case 35:
            localctx = new AlterByImportPartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 35);
            this.state = 2543;
            this.match(MySQLParser.IMPORT);
            this.state = 2544;
            this.match(MySQLParser.PARTITION);
            this.state = 2547;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.CURRENT:
            case MySQLParser.DATABASE:
            case MySQLParser.DIAGNOSTICS:
            case MySQLParser.LEFT:
            case MySQLParser.NUMBER:
            case MySQLParser.RIGHT:
            case MySQLParser.STACKED:
            case MySQLParser.DATE:
            case MySQLParser.TIME:
            case MySQLParser.TIMESTAMP:
            case MySQLParser.DATETIME:
            case MySQLParser.YEAR:
            case MySQLParser.TEXT:
            case MySQLParser.ENUM:
            case MySQLParser.SERIAL:
            case MySQLParser.JSON_VALID:
            case MySQLParser.JSON_SCHEMA_VALID:
            case MySQLParser.COUNT:
            case MySQLParser.POSITION:
            case MySQLParser.ACCOUNT:
            case MySQLParser.ACTION:
            case MySQLParser.AFTER:
            case MySQLParser.AGGREGATE:
            case MySQLParser.ALGORITHM:
            case MySQLParser.ANY:
            case MySQLParser.AT:
            case MySQLParser.AUTHORS:
            case MySQLParser.AUTOCOMMIT:
            case MySQLParser.AUTOEXTEND_SIZE:
            case MySQLParser.AUTO_INCREMENT:
            case MySQLParser.AVG_ROW_LENGTH:
            case MySQLParser.BEGIN:
            case MySQLParser.BINLOG:
            case MySQLParser.BIT:
            case MySQLParser.BLOCK:
            case MySQLParser.BOOL:
            case MySQLParser.BOOLEAN:
            case MySQLParser.BTREE:
            case MySQLParser.CACHE:
            case MySQLParser.CASCADED:
            case MySQLParser.CHAIN:
            case MySQLParser.CHANGED:
            case MySQLParser.CHANNEL:
            case MySQLParser.CHECKSUM:
            case MySQLParser.PAGE_CHECKSUM:
            case MySQLParser.CIPHER:
            case MySQLParser.CLASS_ORIGIN:
            case MySQLParser.CLIENT:
            case MySQLParser.CLOSE:
            case MySQLParser.COALESCE:
            case MySQLParser.CODE:
            case MySQLParser.COLUMNS:
            case MySQLParser.COLUMN_FORMAT:
            case MySQLParser.COLUMN_NAME:
            case MySQLParser.COMMENT:
            case MySQLParser.COMMIT:
            case MySQLParser.COMPACT:
            case MySQLParser.COMPLETION:
            case MySQLParser.COMPRESSED:
            case MySQLParser.COMPRESSION:
            case MySQLParser.CONCURRENT:
            case MySQLParser.CONNECTION:
            case MySQLParser.CONSISTENT:
            case MySQLParser.CONSTRAINT_CATALOG:
            case MySQLParser.CONSTRAINT_SCHEMA:
            case MySQLParser.CONSTRAINT_NAME:
            case MySQLParser.CONTAINS:
            case MySQLParser.CONTEXT:
            case MySQLParser.CONTRIBUTORS:
            case MySQLParser.COPY:
            case MySQLParser.CPU:
            case MySQLParser.CURSOR_NAME:
            case MySQLParser.DATA:
            case MySQLParser.DATAFILE:
            case MySQLParser.DEALLOCATE:
            case MySQLParser.DEFAULT_AUTH:
            case MySQLParser.DEFINER:
            case MySQLParser.DELAY_KEY_WRITE:
            case MySQLParser.DES_KEY_FILE:
            case MySQLParser.DIRECTORY:
            case MySQLParser.DISABLE:
            case MySQLParser.DISCARD:
            case MySQLParser.DISK:
            case MySQLParser.DO:
            case MySQLParser.DUMPFILE:
            case MySQLParser.DUPLICATE:
            case MySQLParser.DYNAMIC:
            case MySQLParser.ENABLE:
            case MySQLParser.ENCRYPTION:
            case MySQLParser.END:
            case MySQLParser.ENDS:
            case MySQLParser.ENGINE:
            case MySQLParser.ENGINES:
            case MySQLParser.ERROR:
            case MySQLParser.ERRORS:
            case MySQLParser.ESCAPE:
            case MySQLParser.EVEN:
            case MySQLParser.EVENT:
            case MySQLParser.EVENTS:
            case MySQLParser.EVERY:
            case MySQLParser.EXCHANGE:
            case MySQLParser.EXCLUSIVE:
            case MySQLParser.EXPIRE:
            case MySQLParser.EXPORT:
            case MySQLParser.EXTENDED:
            case MySQLParser.EXTENT_SIZE:
            case MySQLParser.FAST:
            case MySQLParser.FAULTS:
            case MySQLParser.FIELDS:
            case MySQLParser.FILE_BLOCK_SIZE:
            case MySQLParser.FILTER:
            case MySQLParser.FIRST:
            case MySQLParser.FIXED:
            case MySQLParser.FLUSH:
            case MySQLParser.FOLLOWS:
            case MySQLParser.FOUND:
            case MySQLParser.FULL:
            case MySQLParser.FUNCTION:
            case MySQLParser.GENERAL:
            case MySQLParser.GLOBAL:
            case MySQLParser.GRANTS:
            case MySQLParser.GROUP_REPLICATION:
            case MySQLParser.HANDLER:
            case MySQLParser.HASH:
            case MySQLParser.HELP:
            case MySQLParser.HOST:
            case MySQLParser.HOSTS:
            case MySQLParser.IDENTIFIED:
            case MySQLParser.IGNORE_SERVER_IDS:
            case MySQLParser.IMPORT:
            case MySQLParser.INDEXES:
            case MySQLParser.INITIAL_SIZE:
            case MySQLParser.INPLACE:
            case MySQLParser.INSERT_METHOD:
            case MySQLParser.INSTALL:
            case MySQLParser.INSTANCE:
            case MySQLParser.INVISIBLE:
            case MySQLParser.INVOKER:
            case MySQLParser.IO:
            case MySQLParser.IO_THREAD:
            case MySQLParser.IPC:
            case MySQLParser.ISOLATION:
            case MySQLParser.ISSUER:
            case MySQLParser.JSON:
            case MySQLParser.KEY_BLOCK_SIZE:
            case MySQLParser.LANGUAGE:
            case MySQLParser.LAST:
            case MySQLParser.LEAVES:
            case MySQLParser.LESS:
            case MySQLParser.LEVEL:
            case MySQLParser.LIST:
            case MySQLParser.LOCAL:
            case MySQLParser.LOGFILE:
            case MySQLParser.LOGS:
            case MySQLParser.MASTER:
            case MySQLParser.MASTER_AUTO_POSITION:
            case MySQLParser.MASTER_CONNECT_RETRY:
            case MySQLParser.MASTER_DELAY:
            case MySQLParser.MASTER_HEARTBEAT_PERIOD:
            case MySQLParser.MASTER_HOST:
            case MySQLParser.MASTER_LOG_FILE:
            case MySQLParser.MASTER_LOG_POS:
            case MySQLParser.MASTER_PASSWORD:
            case MySQLParser.MASTER_PORT:
            case MySQLParser.MASTER_RETRY_COUNT:
            case MySQLParser.MASTER_SSL:
            case MySQLParser.MASTER_SSL_CA:
            case MySQLParser.MASTER_SSL_CAPATH:
            case MySQLParser.MASTER_SSL_CERT:
            case MySQLParser.MASTER_SSL_CIPHER:
            case MySQLParser.MASTER_SSL_CRL:
            case MySQLParser.MASTER_SSL_CRLPATH:
            case MySQLParser.MASTER_SSL_KEY:
            case MySQLParser.MASTER_TLS_VERSION:
            case MySQLParser.MASTER_USER:
            case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
            case MySQLParser.MAX_QUERIES_PER_HOUR:
            case MySQLParser.MAX_ROWS:
            case MySQLParser.MAX_SIZE:
            case MySQLParser.MAX_UPDATES_PER_HOUR:
            case MySQLParser.MAX_USER_CONNECTIONS:
            case MySQLParser.MEDIUM:
            case MySQLParser.MERGE:
            case MySQLParser.MESSAGE_TEXT:
            case MySQLParser.MID:
            case MySQLParser.MIGRATE:
            case MySQLParser.MIN_ROWS:
            case MySQLParser.MODE:
            case MySQLParser.MODIFY:
            case MySQLParser.MUTEX:
            case MySQLParser.MYSQL:
            case MySQLParser.MYSQL_ERRNO:
            case MySQLParser.NAME:
            case MySQLParser.NAMES:
            case MySQLParser.NCHAR:
            case MySQLParser.NEVER:
            case MySQLParser.NEXT:
            case MySQLParser.NO:
            case MySQLParser.NODEGROUP:
            case MySQLParser.NONE:
            case MySQLParser.OFFLINE:
            case MySQLParser.OFFSET:
            case MySQLParser.OJ:
            case MySQLParser.OLD_PASSWORD:
            case MySQLParser.ONE:
            case MySQLParser.ONLINE:
            case MySQLParser.ONLY:
            case MySQLParser.OPEN:
            case MySQLParser.OPTIMIZER_COSTS:
            case MySQLParser.OPTIONS:
            case MySQLParser.OWNER:
            case MySQLParser.PACK_KEYS:
            case MySQLParser.PAGE:
            case MySQLParser.PARSER:
            case MySQLParser.PARTIAL:
            case MySQLParser.PARTITIONING:
            case MySQLParser.PARTITIONS:
            case MySQLParser.PASSWORD:
            case MySQLParser.PHASE:
            case MySQLParser.PLUGIN:
            case MySQLParser.PLUGIN_DIR:
            case MySQLParser.PLUGINS:
            case MySQLParser.PORT:
            case MySQLParser.PRECEDES:
            case MySQLParser.PREPARE:
            case MySQLParser.PRESERVE:
            case MySQLParser.PREV:
            case MySQLParser.PROCESSLIST:
            case MySQLParser.PROFILE:
            case MySQLParser.PROFILES:
            case MySQLParser.PROXY:
            case MySQLParser.QUERY:
            case MySQLParser.QUICK:
            case MySQLParser.REBUILD:
            case MySQLParser.RECOVER:
            case MySQLParser.REDO_BUFFER_SIZE:
            case MySQLParser.REDUNDANT:
            case MySQLParser.RELAY:
            case MySQLParser.RELAY_LOG_FILE:
            case MySQLParser.RELAY_LOG_POS:
            case MySQLParser.RELAYLOG:
            case MySQLParser.REMOVE:
            case MySQLParser.REORGANIZE:
            case MySQLParser.REPAIR:
            case MySQLParser.REPLICATE_DO_DB:
            case MySQLParser.REPLICATE_DO_TABLE:
            case MySQLParser.REPLICATE_IGNORE_DB:
            case MySQLParser.REPLICATE_IGNORE_TABLE:
            case MySQLParser.REPLICATE_REWRITE_DB:
            case MySQLParser.REPLICATE_WILD_DO_TABLE:
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySQLParser.REPLICATION:
            case MySQLParser.RESET:
            case MySQLParser.RESUME:
            case MySQLParser.RETURNED_SQLSTATE:
            case MySQLParser.RETURNS:
            case MySQLParser.ROLE:
            case MySQLParser.ROLLBACK:
            case MySQLParser.ROLLUP:
            case MySQLParser.ROTATE:
            case MySQLParser.ROW:
            case MySQLParser.ROWS:
            case MySQLParser.ROW_FORMAT:
            case MySQLParser.SAVEPOINT:
            case MySQLParser.SCHEDULE:
            case MySQLParser.SECURITY:
            case MySQLParser.SERVER:
            case MySQLParser.SESSION:
            case MySQLParser.SHARE:
            case MySQLParser.SHARED:
            case MySQLParser.SIGNED:
            case MySQLParser.SIMPLE:
            case MySQLParser.SLAVE:
            case MySQLParser.SLOW:
            case MySQLParser.SNAPSHOT:
            case MySQLParser.SOCKET:
            case MySQLParser.SOME:
            case MySQLParser.SONAME:
            case MySQLParser.SOUNDS:
            case MySQLParser.SOURCE:
            case MySQLParser.SQL_AFTER_GTIDS:
            case MySQLParser.SQL_AFTER_MTS_GAPS:
            case MySQLParser.SQL_BEFORE_GTIDS:
            case MySQLParser.SQL_BUFFER_RESULT:
            case MySQLParser.SQL_CACHE:
            case MySQLParser.SQL_NO_CACHE:
            case MySQLParser.SQL_THREAD:
            case MySQLParser.START:
            case MySQLParser.STARTS:
            case MySQLParser.STATS_AUTO_RECALC:
            case MySQLParser.STATS_PERSISTENT:
            case MySQLParser.STATS_SAMPLE_PAGES:
            case MySQLParser.STATUS:
            case MySQLParser.STOP:
            case MySQLParser.STORAGE:
            case MySQLParser.STRING:
            case MySQLParser.SUBCLASS_ORIGIN:
            case MySQLParser.SUBJECT:
            case MySQLParser.SUBPARTITION:
            case MySQLParser.SUBPARTITIONS:
            case MySQLParser.SUSPEND:
            case MySQLParser.SWAPS:
            case MySQLParser.SWITCHES:
            case MySQLParser.TABLE_NAME:
            case MySQLParser.TABLESPACE:
            case MySQLParser.TEMPORARY:
            case MySQLParser.TEMPTABLE:
            case MySQLParser.THAN:
            case MySQLParser.TRADITIONAL:
            case MySQLParser.TRANSACTION:
            case MySQLParser.TRANSACTIONAL:
            case MySQLParser.TRIGGERS:
            case MySQLParser.TRUNCATE:
            case MySQLParser.UNDEFINED:
            case MySQLParser.UNDOFILE:
            case MySQLParser.UNDO_BUFFER_SIZE:
            case MySQLParser.UNINSTALL:
            case MySQLParser.UNKNOWN:
            case MySQLParser.UNTIL:
            case MySQLParser.UPGRADE:
            case MySQLParser.USER:
            case MySQLParser.USE_FRM:
            case MySQLParser.USER_RESOURCES:
            case MySQLParser.VALIDATION:
            case MySQLParser.VALUE:
            case MySQLParser.VARIABLES:
            case MySQLParser.VIEW:
            case MySQLParser.VISIBLE:
            case MySQLParser.WAIT:
            case MySQLParser.WARNINGS:
            case MySQLParser.WITHOUT:
            case MySQLParser.WORK:
            case MySQLParser.WRAPPER:
            case MySQLParser.X509:
            case MySQLParser.XA:
            case MySQLParser.XML:
            case MySQLParser.INTERNAL:
            case MySQLParser.QUARTER:
            case MySQLParser.MONTH:
            case MySQLParser.DAY:
            case MySQLParser.HOUR:
            case MySQLParser.MINUTE:
            case MySQLParser.WEEK:
            case MySQLParser.SECOND:
            case MySQLParser.MICROSECOND:
            case MySQLParser.TABLES:
            case MySQLParser.ROUTINE:
            case MySQLParser.EXECUTE:
            case MySQLParser.FILE:
            case MySQLParser.PROCESS:
            case MySQLParser.RELOAD:
            case MySQLParser.SHUTDOWN:
            case MySQLParser.SUPER:
            case MySQLParser.PRIVILEGES:
            case MySQLParser.AUDIT_ADMIN:
            case MySQLParser.BACKUP_ADMIN:
            case MySQLParser.BINLOG_ADMIN:
            case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
            case MySQLParser.CLONE_ADMIN:
            case MySQLParser.CONNECTION_ADMIN:
            case MySQLParser.ENCRYPTION_KEY_ADMIN:
            case MySQLParser.FIREWALL_ADMIN:
            case MySQLParser.FIREWALL_USER:
            case MySQLParser.GROUP_REPLICATION_ADMIN:
            case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
            case MySQLParser.NDB_STORED_USER:
            case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySQLParser.REPLICATION_APPLIER:
            case MySQLParser.REPLICATION_SLAVE_ADMIN:
            case MySQLParser.RESOURCE_GROUP_ADMIN:
            case MySQLParser.RESOURCE_GROUP_USER:
            case MySQLParser.ROLE_ADMIN:
            case MySQLParser.SESSION_VARIABLES_ADMIN:
            case MySQLParser.SET_USER_ID:
            case MySQLParser.SHOW_ROUTINE:
            case MySQLParser.SYSTEM_VARIABLES_ADMIN:
            case MySQLParser.TABLE_ENCRYPTION_ADMIN:
            case MySQLParser.VERSION_TOKEN_ADMIN:
            case MySQLParser.XA_RECOVER_ADMIN:
            case MySQLParser.ARMSCII8:
            case MySQLParser.ASCII:
            case MySQLParser.BIG5:
            case MySQLParser.CP1250:
            case MySQLParser.CP1251:
            case MySQLParser.CP1256:
            case MySQLParser.CP1257:
            case MySQLParser.CP850:
            case MySQLParser.CP852:
            case MySQLParser.CP866:
            case MySQLParser.CP932:
            case MySQLParser.DEC8:
            case MySQLParser.EUCJPMS:
            case MySQLParser.EUCKR:
            case MySQLParser.GB2312:
            case MySQLParser.GBK:
            case MySQLParser.GEOSTD8:
            case MySQLParser.GREEK:
            case MySQLParser.HEBREW:
            case MySQLParser.HP8:
            case MySQLParser.KEYBCS2:
            case MySQLParser.KOI8R:
            case MySQLParser.KOI8U:
            case MySQLParser.LATIN1:
            case MySQLParser.LATIN2:
            case MySQLParser.LATIN5:
            case MySQLParser.LATIN7:
            case MySQLParser.MACCE:
            case MySQLParser.MACROMAN:
            case MySQLParser.SJIS:
            case MySQLParser.SWE7:
            case MySQLParser.TIS620:
            case MySQLParser.UCS2:
            case MySQLParser.UJIS:
            case MySQLParser.UTF16:
            case MySQLParser.UTF16LE:
            case MySQLParser.UTF32:
            case MySQLParser.UTF8:
            case MySQLParser.UTF8MB3:
            case MySQLParser.UTF8MB4:
            case MySQLParser.ARCHIVE:
            case MySQLParser.BLACKHOLE:
            case MySQLParser.CSV:
            case MySQLParser.FEDERATED:
            case MySQLParser.INNODB:
            case MySQLParser.MEMORY:
            case MySQLParser.MRG_MYISAM:
            case MySQLParser.MYISAM:
            case MySQLParser.NDB:
            case MySQLParser.NDBCLUSTER:
            case MySQLParser.PERFORMANCE_SCHEMA:
            case MySQLParser.TOKUDB:
            case MySQLParser.REPEATABLE:
            case MySQLParser.COMMITTED:
            case MySQLParser.UNCOMMITTED:
            case MySQLParser.SERIALIZABLE:
            case MySQLParser.GEOMETRYCOLLECTION:
            case MySQLParser.LINESTRING:
            case MySQLParser.MULTILINESTRING:
            case MySQLParser.MULTIPOINT:
            case MySQLParser.MULTIPOLYGON:
            case MySQLParser.POINT:
            case MySQLParser.POLYGON:
            case MySQLParser.ABS:
            case MySQLParser.ACOS:
            case MySQLParser.ADDDATE:
            case MySQLParser.ADDTIME:
            case MySQLParser.AES_DECRYPT:
            case MySQLParser.AES_ENCRYPT:
            case MySQLParser.AREA:
            case MySQLParser.ASBINARY:
            case MySQLParser.ASIN:
            case MySQLParser.ASTEXT:
            case MySQLParser.ASWKB:
            case MySQLParser.ASWKT:
            case MySQLParser.ASYMMETRIC_DECRYPT:
            case MySQLParser.ASYMMETRIC_DERIVE:
            case MySQLParser.ASYMMETRIC_ENCRYPT:
            case MySQLParser.ASYMMETRIC_SIGN:
            case MySQLParser.ASYMMETRIC_VERIFY:
            case MySQLParser.ATAN:
            case MySQLParser.ATAN2:
            case MySQLParser.BENCHMARK:
            case MySQLParser.BIN:
            case MySQLParser.BIT_COUNT:
            case MySQLParser.BIT_LENGTH:
            case MySQLParser.BUFFER:
            case MySQLParser.CATALOG_NAME:
            case MySQLParser.CEIL:
            case MySQLParser.CEILING:
            case MySQLParser.CENTROID:
            case MySQLParser.CHARACTER_LENGTH:
            case MySQLParser.CHARSET:
            case MySQLParser.CHAR_LENGTH:
            case MySQLParser.COERCIBILITY:
            case MySQLParser.COLLATION:
            case MySQLParser.COMPRESS:
            case MySQLParser.CONCAT:
            case MySQLParser.CONCAT_WS:
            case MySQLParser.CONNECTION_ID:
            case MySQLParser.CONV:
            case MySQLParser.CONVERT_TZ:
            case MySQLParser.COS:
            case MySQLParser.COT:
            case MySQLParser.CRC32:
            case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySQLParser.CREATE_DH_PARAMETERS:
            case MySQLParser.CREATE_DIGEST:
            case MySQLParser.CROSSES:
            case MySQLParser.DATEDIFF:
            case MySQLParser.DATE_FORMAT:
            case MySQLParser.DAYNAME:
            case MySQLParser.DAYOFMONTH:
            case MySQLParser.DAYOFWEEK:
            case MySQLParser.DAYOFYEAR:
            case MySQLParser.DECODE:
            case MySQLParser.DEGREES:
            case MySQLParser.DES_DECRYPT:
            case MySQLParser.DES_ENCRYPT:
            case MySQLParser.DIMENSION:
            case MySQLParser.DISJOINT:
            case MySQLParser.ELT:
            case MySQLParser.ENCODE:
            case MySQLParser.ENCRYPT:
            case MySQLParser.ENDPOINT:
            case MySQLParser.ENVELOPE:
            case MySQLParser.EQUALS:
            case MySQLParser.EXP:
            case MySQLParser.EXPORT_SET:
            case MySQLParser.EXTERIORRING:
            case MySQLParser.EXTRACTVALUE:
            case MySQLParser.FIELD:
            case MySQLParser.FIND_IN_SET:
            case MySQLParser.FLOOR:
            case MySQLParser.FORMAT:
            case MySQLParser.FOUND_ROWS:
            case MySQLParser.FROM_BASE64:
            case MySQLParser.FROM_DAYS:
            case MySQLParser.FROM_UNIXTIME:
            case MySQLParser.GEOMCOLLFROMTEXT:
            case MySQLParser.GEOMCOLLFROMWKB:
            case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.GEOMETRYFROMTEXT:
            case MySQLParser.GEOMETRYFROMWKB:
            case MySQLParser.GEOMETRYN:
            case MySQLParser.GEOMETRYTYPE:
            case MySQLParser.GEOMFROMTEXT:
            case MySQLParser.GEOMFROMWKB:
            case MySQLParser.GET_FORMAT:
            case MySQLParser.GET_LOCK:
            case MySQLParser.GLENGTH:
            case MySQLParser.GREATEST:
            case MySQLParser.GTID_SUBSET:
            case MySQLParser.GTID_SUBTRACT:
            case MySQLParser.HEX:
            case MySQLParser.IFNULL:
            case MySQLParser.INET6_ATON:
            case MySQLParser.INET6_NTOA:
            case MySQLParser.INET_ATON:
            case MySQLParser.INET_NTOA:
            case MySQLParser.INSTR:
            case MySQLParser.INTERIORRINGN:
            case MySQLParser.INTERSECTS:
            case MySQLParser.ISCLOSED:
            case MySQLParser.ISEMPTY:
            case MySQLParser.ISNULL:
            case MySQLParser.ISSIMPLE:
            case MySQLParser.IS_FREE_LOCK:
            case MySQLParser.IS_IPV4:
            case MySQLParser.IS_IPV4_COMPAT:
            case MySQLParser.IS_IPV4_MAPPED:
            case MySQLParser.IS_IPV6:
            case MySQLParser.IS_USED_LOCK:
            case MySQLParser.LAST_INSERT_ID:
            case MySQLParser.LCASE:
            case MySQLParser.LEAST:
            case MySQLParser.LENGTH:
            case MySQLParser.LINEFROMTEXT:
            case MySQLParser.LINEFROMWKB:
            case MySQLParser.LINESTRINGFROMTEXT:
            case MySQLParser.LINESTRINGFROMWKB:
            case MySQLParser.LN:
            case MySQLParser.LOAD_FILE:
            case MySQLParser.LOCATE:
            case MySQLParser.LOG:
            case MySQLParser.LOG10:
            case MySQLParser.LOG2:
            case MySQLParser.LOWER:
            case MySQLParser.LPAD:
            case MySQLParser.LTRIM:
            case MySQLParser.MAKEDATE:
            case MySQLParser.MAKETIME:
            case MySQLParser.MAKE_SET:
            case MySQLParser.MASTER_POS_WAIT:
            case MySQLParser.MBRCONTAINS:
            case MySQLParser.MBRDISJOINT:
            case MySQLParser.MBREQUAL:
            case MySQLParser.MBRINTERSECTS:
            case MySQLParser.MBROVERLAPS:
            case MySQLParser.MBRTOUCHES:
            case MySQLParser.MBRWITHIN:
            case MySQLParser.MD5:
            case MySQLParser.MLINEFROMTEXT:
            case MySQLParser.MLINEFROMWKB:
            case MySQLParser.MONTHNAME:
            case MySQLParser.MPOINTFROMTEXT:
            case MySQLParser.MPOINTFROMWKB:
            case MySQLParser.MPOLYFROMTEXT:
            case MySQLParser.MPOLYFROMWKB:
            case MySQLParser.MULTILINESTRINGFROMTEXT:
            case MySQLParser.MULTILINESTRINGFROMWKB:
            case MySQLParser.MULTIPOINTFROMTEXT:
            case MySQLParser.MULTIPOINTFROMWKB:
            case MySQLParser.MULTIPOLYGONFROMTEXT:
            case MySQLParser.MULTIPOLYGONFROMWKB:
            case MySQLParser.NAME_CONST:
            case MySQLParser.NULLIF:
            case MySQLParser.NUMGEOMETRIES:
            case MySQLParser.NUMINTERIORRINGS:
            case MySQLParser.NUMPOINTS:
            case MySQLParser.OCT:
            case MySQLParser.OCTET_LENGTH:
            case MySQLParser.ORD:
            case MySQLParser.OVERLAPS:
            case MySQLParser.PERIOD_ADD:
            case MySQLParser.PERIOD_DIFF:
            case MySQLParser.PI:
            case MySQLParser.POINTFROMTEXT:
            case MySQLParser.POINTFROMWKB:
            case MySQLParser.POINTN:
            case MySQLParser.POLYFROMTEXT:
            case MySQLParser.POLYFROMWKB:
            case MySQLParser.POLYGONFROMTEXT:
            case MySQLParser.POLYGONFROMWKB:
            case MySQLParser.POW:
            case MySQLParser.POWER:
            case MySQLParser.QUOTE:
            case MySQLParser.RADIANS:
            case MySQLParser.RAND:
            case MySQLParser.RANDOM_BYTES:
            case MySQLParser.RELEASE_LOCK:
            case MySQLParser.REVERSE:
            case MySQLParser.ROUND:
            case MySQLParser.ROW_COUNT:
            case MySQLParser.RPAD:
            case MySQLParser.RTRIM:
            case MySQLParser.SEC_TO_TIME:
            case MySQLParser.SESSION_USER:
            case MySQLParser.SHA:
            case MySQLParser.SHA1:
            case MySQLParser.SHA2:
            case MySQLParser.SCHEMA_NAME:
            case MySQLParser.SIGN:
            case MySQLParser.SIN:
            case MySQLParser.SLEEP:
            case MySQLParser.SOUNDEX:
            case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySQLParser.SQRT:
            case MySQLParser.SRID:
            case MySQLParser.STARTPOINT:
            case MySQLParser.STRCMP:
            case MySQLParser.STR_TO_DATE:
            case MySQLParser.ST_AREA:
            case MySQLParser.ST_ASBINARY:
            case MySQLParser.ST_ASTEXT:
            case MySQLParser.ST_ASWKB:
            case MySQLParser.ST_ASWKT:
            case MySQLParser.ST_BUFFER:
            case MySQLParser.ST_CENTROID:
            case MySQLParser.ST_CONTAINS:
            case MySQLParser.ST_CROSSES:
            case MySQLParser.ST_DIFFERENCE:
            case MySQLParser.ST_DIMENSION:
            case MySQLParser.ST_DISJOINT:
            case MySQLParser.ST_DISTANCE:
            case MySQLParser.ST_ENDPOINT:
            case MySQLParser.ST_ENVELOPE:
            case MySQLParser.ST_EQUALS:
            case MySQLParser.ST_EXTERIORRING:
            case MySQLParser.ST_GEOMCOLLFROMTEXT:
            case MySQLParser.ST_GEOMCOLLFROMTXT:
            case MySQLParser.ST_GEOMCOLLFROMWKB:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.ST_GEOMETRYFROMTEXT:
            case MySQLParser.ST_GEOMETRYFROMWKB:
            case MySQLParser.ST_GEOMETRYN:
            case MySQLParser.ST_GEOMETRYTYPE:
            case MySQLParser.ST_GEOMFROMTEXT:
            case MySQLParser.ST_GEOMFROMWKB:
            case MySQLParser.ST_INTERIORRINGN:
            case MySQLParser.ST_INTERSECTION:
            case MySQLParser.ST_INTERSECTS:
            case MySQLParser.ST_ISCLOSED:
            case MySQLParser.ST_ISEMPTY:
            case MySQLParser.ST_ISSIMPLE:
            case MySQLParser.ST_LINEFROMTEXT:
            case MySQLParser.ST_LINEFROMWKB:
            case MySQLParser.ST_LINESTRINGFROMTEXT:
            case MySQLParser.ST_LINESTRINGFROMWKB:
            case MySQLParser.ST_NUMGEOMETRIES:
            case MySQLParser.ST_NUMINTERIORRING:
            case MySQLParser.ST_NUMINTERIORRINGS:
            case MySQLParser.ST_NUMPOINTS:
            case MySQLParser.ST_OVERLAPS:
            case MySQLParser.ST_POINTFROMTEXT:
            case MySQLParser.ST_POINTFROMWKB:
            case MySQLParser.ST_POINTN:
            case MySQLParser.ST_POLYFROMTEXT:
            case MySQLParser.ST_POLYFROMWKB:
            case MySQLParser.ST_POLYGONFROMTEXT:
            case MySQLParser.ST_POLYGONFROMWKB:
            case MySQLParser.ST_SRID:
            case MySQLParser.ST_STARTPOINT:
            case MySQLParser.ST_SYMDIFFERENCE:
            case MySQLParser.ST_TOUCHES:
            case MySQLParser.ST_UNION:
            case MySQLParser.ST_WITHIN:
            case MySQLParser.ST_X:
            case MySQLParser.ST_Y:
            case MySQLParser.SUBDATE:
            case MySQLParser.SUBSTRING_INDEX:
            case MySQLParser.SUBTIME:
            case MySQLParser.SYSTEM_USER:
            case MySQLParser.TAN:
            case MySQLParser.TIMEDIFF:
            case MySQLParser.TIMESTAMPADD:
            case MySQLParser.TIMESTAMPDIFF:
            case MySQLParser.TIME_FORMAT:
            case MySQLParser.TIME_TO_SEC:
            case MySQLParser.TOUCHES:
            case MySQLParser.TO_BASE64:
            case MySQLParser.TO_DAYS:
            case MySQLParser.TO_SECONDS:
            case MySQLParser.UCASE:
            case MySQLParser.UNCOMPRESS:
            case MySQLParser.UNCOMPRESSED_LENGTH:
            case MySQLParser.UNHEX:
            case MySQLParser.UNIX_TIMESTAMP:
            case MySQLParser.UPDATEXML:
            case MySQLParser.UPPER:
            case MySQLParser.UUID:
            case MySQLParser.UUID_SHORT:
            case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
            case MySQLParser.VERSION:
            case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySQLParser.WEEKDAY:
            case MySQLParser.WEEKOFYEAR:
            case MySQLParser.WEIGHT_STRING:
            case MySQLParser.WITHIN:
            case MySQLParser.YEARWEEK:
            case MySQLParser.Y_FUNCTION:
            case MySQLParser.X_FUNCTION:
            case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySQLParser.STRING_LITERAL:
            case MySQLParser.ID:
            case MySQLParser.REVERSE_QUOTE_ID:
                this.state = 2545;
                this.uidList();
                break;
            case MySQLParser.ALL:
                this.state = 2546;
                this.match(MySQLParser.ALL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2549;
            this.match(MySQLParser.TABLESPACE);
            break;

        case 36:
            localctx = new AlterByTruncatePartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 36);
            this.state = 2550;
            this.match(MySQLParser.TRUNCATE);
            this.state = 2551;
            this.match(MySQLParser.PARTITION);
            this.state = 2554;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.CURRENT:
            case MySQLParser.DATABASE:
            case MySQLParser.DIAGNOSTICS:
            case MySQLParser.LEFT:
            case MySQLParser.NUMBER:
            case MySQLParser.RIGHT:
            case MySQLParser.STACKED:
            case MySQLParser.DATE:
            case MySQLParser.TIME:
            case MySQLParser.TIMESTAMP:
            case MySQLParser.DATETIME:
            case MySQLParser.YEAR:
            case MySQLParser.TEXT:
            case MySQLParser.ENUM:
            case MySQLParser.SERIAL:
            case MySQLParser.JSON_VALID:
            case MySQLParser.JSON_SCHEMA_VALID:
            case MySQLParser.COUNT:
            case MySQLParser.POSITION:
            case MySQLParser.ACCOUNT:
            case MySQLParser.ACTION:
            case MySQLParser.AFTER:
            case MySQLParser.AGGREGATE:
            case MySQLParser.ALGORITHM:
            case MySQLParser.ANY:
            case MySQLParser.AT:
            case MySQLParser.AUTHORS:
            case MySQLParser.AUTOCOMMIT:
            case MySQLParser.AUTOEXTEND_SIZE:
            case MySQLParser.AUTO_INCREMENT:
            case MySQLParser.AVG_ROW_LENGTH:
            case MySQLParser.BEGIN:
            case MySQLParser.BINLOG:
            case MySQLParser.BIT:
            case MySQLParser.BLOCK:
            case MySQLParser.BOOL:
            case MySQLParser.BOOLEAN:
            case MySQLParser.BTREE:
            case MySQLParser.CACHE:
            case MySQLParser.CASCADED:
            case MySQLParser.CHAIN:
            case MySQLParser.CHANGED:
            case MySQLParser.CHANNEL:
            case MySQLParser.CHECKSUM:
            case MySQLParser.PAGE_CHECKSUM:
            case MySQLParser.CIPHER:
            case MySQLParser.CLASS_ORIGIN:
            case MySQLParser.CLIENT:
            case MySQLParser.CLOSE:
            case MySQLParser.COALESCE:
            case MySQLParser.CODE:
            case MySQLParser.COLUMNS:
            case MySQLParser.COLUMN_FORMAT:
            case MySQLParser.COLUMN_NAME:
            case MySQLParser.COMMENT:
            case MySQLParser.COMMIT:
            case MySQLParser.COMPACT:
            case MySQLParser.COMPLETION:
            case MySQLParser.COMPRESSED:
            case MySQLParser.COMPRESSION:
            case MySQLParser.CONCURRENT:
            case MySQLParser.CONNECTION:
            case MySQLParser.CONSISTENT:
            case MySQLParser.CONSTRAINT_CATALOG:
            case MySQLParser.CONSTRAINT_SCHEMA:
            case MySQLParser.CONSTRAINT_NAME:
            case MySQLParser.CONTAINS:
            case MySQLParser.CONTEXT:
            case MySQLParser.CONTRIBUTORS:
            case MySQLParser.COPY:
            case MySQLParser.CPU:
            case MySQLParser.CURSOR_NAME:
            case MySQLParser.DATA:
            case MySQLParser.DATAFILE:
            case MySQLParser.DEALLOCATE:
            case MySQLParser.DEFAULT_AUTH:
            case MySQLParser.DEFINER:
            case MySQLParser.DELAY_KEY_WRITE:
            case MySQLParser.DES_KEY_FILE:
            case MySQLParser.DIRECTORY:
            case MySQLParser.DISABLE:
            case MySQLParser.DISCARD:
            case MySQLParser.DISK:
            case MySQLParser.DO:
            case MySQLParser.DUMPFILE:
            case MySQLParser.DUPLICATE:
            case MySQLParser.DYNAMIC:
            case MySQLParser.ENABLE:
            case MySQLParser.ENCRYPTION:
            case MySQLParser.END:
            case MySQLParser.ENDS:
            case MySQLParser.ENGINE:
            case MySQLParser.ENGINES:
            case MySQLParser.ERROR:
            case MySQLParser.ERRORS:
            case MySQLParser.ESCAPE:
            case MySQLParser.EVEN:
            case MySQLParser.EVENT:
            case MySQLParser.EVENTS:
            case MySQLParser.EVERY:
            case MySQLParser.EXCHANGE:
            case MySQLParser.EXCLUSIVE:
            case MySQLParser.EXPIRE:
            case MySQLParser.EXPORT:
            case MySQLParser.EXTENDED:
            case MySQLParser.EXTENT_SIZE:
            case MySQLParser.FAST:
            case MySQLParser.FAULTS:
            case MySQLParser.FIELDS:
            case MySQLParser.FILE_BLOCK_SIZE:
            case MySQLParser.FILTER:
            case MySQLParser.FIRST:
            case MySQLParser.FIXED:
            case MySQLParser.FLUSH:
            case MySQLParser.FOLLOWS:
            case MySQLParser.FOUND:
            case MySQLParser.FULL:
            case MySQLParser.FUNCTION:
            case MySQLParser.GENERAL:
            case MySQLParser.GLOBAL:
            case MySQLParser.GRANTS:
            case MySQLParser.GROUP_REPLICATION:
            case MySQLParser.HANDLER:
            case MySQLParser.HASH:
            case MySQLParser.HELP:
            case MySQLParser.HOST:
            case MySQLParser.HOSTS:
            case MySQLParser.IDENTIFIED:
            case MySQLParser.IGNORE_SERVER_IDS:
            case MySQLParser.IMPORT:
            case MySQLParser.INDEXES:
            case MySQLParser.INITIAL_SIZE:
            case MySQLParser.INPLACE:
            case MySQLParser.INSERT_METHOD:
            case MySQLParser.INSTALL:
            case MySQLParser.INSTANCE:
            case MySQLParser.INVISIBLE:
            case MySQLParser.INVOKER:
            case MySQLParser.IO:
            case MySQLParser.IO_THREAD:
            case MySQLParser.IPC:
            case MySQLParser.ISOLATION:
            case MySQLParser.ISSUER:
            case MySQLParser.JSON:
            case MySQLParser.KEY_BLOCK_SIZE:
            case MySQLParser.LANGUAGE:
            case MySQLParser.LAST:
            case MySQLParser.LEAVES:
            case MySQLParser.LESS:
            case MySQLParser.LEVEL:
            case MySQLParser.LIST:
            case MySQLParser.LOCAL:
            case MySQLParser.LOGFILE:
            case MySQLParser.LOGS:
            case MySQLParser.MASTER:
            case MySQLParser.MASTER_AUTO_POSITION:
            case MySQLParser.MASTER_CONNECT_RETRY:
            case MySQLParser.MASTER_DELAY:
            case MySQLParser.MASTER_HEARTBEAT_PERIOD:
            case MySQLParser.MASTER_HOST:
            case MySQLParser.MASTER_LOG_FILE:
            case MySQLParser.MASTER_LOG_POS:
            case MySQLParser.MASTER_PASSWORD:
            case MySQLParser.MASTER_PORT:
            case MySQLParser.MASTER_RETRY_COUNT:
            case MySQLParser.MASTER_SSL:
            case MySQLParser.MASTER_SSL_CA:
            case MySQLParser.MASTER_SSL_CAPATH:
            case MySQLParser.MASTER_SSL_CERT:
            case MySQLParser.MASTER_SSL_CIPHER:
            case MySQLParser.MASTER_SSL_CRL:
            case MySQLParser.MASTER_SSL_CRLPATH:
            case MySQLParser.MASTER_SSL_KEY:
            case MySQLParser.MASTER_TLS_VERSION:
            case MySQLParser.MASTER_USER:
            case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
            case MySQLParser.MAX_QUERIES_PER_HOUR:
            case MySQLParser.MAX_ROWS:
            case MySQLParser.MAX_SIZE:
            case MySQLParser.MAX_UPDATES_PER_HOUR:
            case MySQLParser.MAX_USER_CONNECTIONS:
            case MySQLParser.MEDIUM:
            case MySQLParser.MERGE:
            case MySQLParser.MESSAGE_TEXT:
            case MySQLParser.MID:
            case MySQLParser.MIGRATE:
            case MySQLParser.MIN_ROWS:
            case MySQLParser.MODE:
            case MySQLParser.MODIFY:
            case MySQLParser.MUTEX:
            case MySQLParser.MYSQL:
            case MySQLParser.MYSQL_ERRNO:
            case MySQLParser.NAME:
            case MySQLParser.NAMES:
            case MySQLParser.NCHAR:
            case MySQLParser.NEVER:
            case MySQLParser.NEXT:
            case MySQLParser.NO:
            case MySQLParser.NODEGROUP:
            case MySQLParser.NONE:
            case MySQLParser.OFFLINE:
            case MySQLParser.OFFSET:
            case MySQLParser.OJ:
            case MySQLParser.OLD_PASSWORD:
            case MySQLParser.ONE:
            case MySQLParser.ONLINE:
            case MySQLParser.ONLY:
            case MySQLParser.OPEN:
            case MySQLParser.OPTIMIZER_COSTS:
            case MySQLParser.OPTIONS:
            case MySQLParser.OWNER:
            case MySQLParser.PACK_KEYS:
            case MySQLParser.PAGE:
            case MySQLParser.PARSER:
            case MySQLParser.PARTIAL:
            case MySQLParser.PARTITIONING:
            case MySQLParser.PARTITIONS:
            case MySQLParser.PASSWORD:
            case MySQLParser.PHASE:
            case MySQLParser.PLUGIN:
            case MySQLParser.PLUGIN_DIR:
            case MySQLParser.PLUGINS:
            case MySQLParser.PORT:
            case MySQLParser.PRECEDES:
            case MySQLParser.PREPARE:
            case MySQLParser.PRESERVE:
            case MySQLParser.PREV:
            case MySQLParser.PROCESSLIST:
            case MySQLParser.PROFILE:
            case MySQLParser.PROFILES:
            case MySQLParser.PROXY:
            case MySQLParser.QUERY:
            case MySQLParser.QUICK:
            case MySQLParser.REBUILD:
            case MySQLParser.RECOVER:
            case MySQLParser.REDO_BUFFER_SIZE:
            case MySQLParser.REDUNDANT:
            case MySQLParser.RELAY:
            case MySQLParser.RELAY_LOG_FILE:
            case MySQLParser.RELAY_LOG_POS:
            case MySQLParser.RELAYLOG:
            case MySQLParser.REMOVE:
            case MySQLParser.REORGANIZE:
            case MySQLParser.REPAIR:
            case MySQLParser.REPLICATE_DO_DB:
            case MySQLParser.REPLICATE_DO_TABLE:
            case MySQLParser.REPLICATE_IGNORE_DB:
            case MySQLParser.REPLICATE_IGNORE_TABLE:
            case MySQLParser.REPLICATE_REWRITE_DB:
            case MySQLParser.REPLICATE_WILD_DO_TABLE:
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySQLParser.REPLICATION:
            case MySQLParser.RESET:
            case MySQLParser.RESUME:
            case MySQLParser.RETURNED_SQLSTATE:
            case MySQLParser.RETURNS:
            case MySQLParser.ROLE:
            case MySQLParser.ROLLBACK:
            case MySQLParser.ROLLUP:
            case MySQLParser.ROTATE:
            case MySQLParser.ROW:
            case MySQLParser.ROWS:
            case MySQLParser.ROW_FORMAT:
            case MySQLParser.SAVEPOINT:
            case MySQLParser.SCHEDULE:
            case MySQLParser.SECURITY:
            case MySQLParser.SERVER:
            case MySQLParser.SESSION:
            case MySQLParser.SHARE:
            case MySQLParser.SHARED:
            case MySQLParser.SIGNED:
            case MySQLParser.SIMPLE:
            case MySQLParser.SLAVE:
            case MySQLParser.SLOW:
            case MySQLParser.SNAPSHOT:
            case MySQLParser.SOCKET:
            case MySQLParser.SOME:
            case MySQLParser.SONAME:
            case MySQLParser.SOUNDS:
            case MySQLParser.SOURCE:
            case MySQLParser.SQL_AFTER_GTIDS:
            case MySQLParser.SQL_AFTER_MTS_GAPS:
            case MySQLParser.SQL_BEFORE_GTIDS:
            case MySQLParser.SQL_BUFFER_RESULT:
            case MySQLParser.SQL_CACHE:
            case MySQLParser.SQL_NO_CACHE:
            case MySQLParser.SQL_THREAD:
            case MySQLParser.START:
            case MySQLParser.STARTS:
            case MySQLParser.STATS_AUTO_RECALC:
            case MySQLParser.STATS_PERSISTENT:
            case MySQLParser.STATS_SAMPLE_PAGES:
            case MySQLParser.STATUS:
            case MySQLParser.STOP:
            case MySQLParser.STORAGE:
            case MySQLParser.STRING:
            case MySQLParser.SUBCLASS_ORIGIN:
            case MySQLParser.SUBJECT:
            case MySQLParser.SUBPARTITION:
            case MySQLParser.SUBPARTITIONS:
            case MySQLParser.SUSPEND:
            case MySQLParser.SWAPS:
            case MySQLParser.SWITCHES:
            case MySQLParser.TABLE_NAME:
            case MySQLParser.TABLESPACE:
            case MySQLParser.TEMPORARY:
            case MySQLParser.TEMPTABLE:
            case MySQLParser.THAN:
            case MySQLParser.TRADITIONAL:
            case MySQLParser.TRANSACTION:
            case MySQLParser.TRANSACTIONAL:
            case MySQLParser.TRIGGERS:
            case MySQLParser.TRUNCATE:
            case MySQLParser.UNDEFINED:
            case MySQLParser.UNDOFILE:
            case MySQLParser.UNDO_BUFFER_SIZE:
            case MySQLParser.UNINSTALL:
            case MySQLParser.UNKNOWN:
            case MySQLParser.UNTIL:
            case MySQLParser.UPGRADE:
            case MySQLParser.USER:
            case MySQLParser.USE_FRM:
            case MySQLParser.USER_RESOURCES:
            case MySQLParser.VALIDATION:
            case MySQLParser.VALUE:
            case MySQLParser.VARIABLES:
            case MySQLParser.VIEW:
            case MySQLParser.VISIBLE:
            case MySQLParser.WAIT:
            case MySQLParser.WARNINGS:
            case MySQLParser.WITHOUT:
            case MySQLParser.WORK:
            case MySQLParser.WRAPPER:
            case MySQLParser.X509:
            case MySQLParser.XA:
            case MySQLParser.XML:
            case MySQLParser.INTERNAL:
            case MySQLParser.QUARTER:
            case MySQLParser.MONTH:
            case MySQLParser.DAY:
            case MySQLParser.HOUR:
            case MySQLParser.MINUTE:
            case MySQLParser.WEEK:
            case MySQLParser.SECOND:
            case MySQLParser.MICROSECOND:
            case MySQLParser.TABLES:
            case MySQLParser.ROUTINE:
            case MySQLParser.EXECUTE:
            case MySQLParser.FILE:
            case MySQLParser.PROCESS:
            case MySQLParser.RELOAD:
            case MySQLParser.SHUTDOWN:
            case MySQLParser.SUPER:
            case MySQLParser.PRIVILEGES:
            case MySQLParser.AUDIT_ADMIN:
            case MySQLParser.BACKUP_ADMIN:
            case MySQLParser.BINLOG_ADMIN:
            case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
            case MySQLParser.CLONE_ADMIN:
            case MySQLParser.CONNECTION_ADMIN:
            case MySQLParser.ENCRYPTION_KEY_ADMIN:
            case MySQLParser.FIREWALL_ADMIN:
            case MySQLParser.FIREWALL_USER:
            case MySQLParser.GROUP_REPLICATION_ADMIN:
            case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
            case MySQLParser.NDB_STORED_USER:
            case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySQLParser.REPLICATION_APPLIER:
            case MySQLParser.REPLICATION_SLAVE_ADMIN:
            case MySQLParser.RESOURCE_GROUP_ADMIN:
            case MySQLParser.RESOURCE_GROUP_USER:
            case MySQLParser.ROLE_ADMIN:
            case MySQLParser.SESSION_VARIABLES_ADMIN:
            case MySQLParser.SET_USER_ID:
            case MySQLParser.SHOW_ROUTINE:
            case MySQLParser.SYSTEM_VARIABLES_ADMIN:
            case MySQLParser.TABLE_ENCRYPTION_ADMIN:
            case MySQLParser.VERSION_TOKEN_ADMIN:
            case MySQLParser.XA_RECOVER_ADMIN:
            case MySQLParser.ARMSCII8:
            case MySQLParser.ASCII:
            case MySQLParser.BIG5:
            case MySQLParser.CP1250:
            case MySQLParser.CP1251:
            case MySQLParser.CP1256:
            case MySQLParser.CP1257:
            case MySQLParser.CP850:
            case MySQLParser.CP852:
            case MySQLParser.CP866:
            case MySQLParser.CP932:
            case MySQLParser.DEC8:
            case MySQLParser.EUCJPMS:
            case MySQLParser.EUCKR:
            case MySQLParser.GB2312:
            case MySQLParser.GBK:
            case MySQLParser.GEOSTD8:
            case MySQLParser.GREEK:
            case MySQLParser.HEBREW:
            case MySQLParser.HP8:
            case MySQLParser.KEYBCS2:
            case MySQLParser.KOI8R:
            case MySQLParser.KOI8U:
            case MySQLParser.LATIN1:
            case MySQLParser.LATIN2:
            case MySQLParser.LATIN5:
            case MySQLParser.LATIN7:
            case MySQLParser.MACCE:
            case MySQLParser.MACROMAN:
            case MySQLParser.SJIS:
            case MySQLParser.SWE7:
            case MySQLParser.TIS620:
            case MySQLParser.UCS2:
            case MySQLParser.UJIS:
            case MySQLParser.UTF16:
            case MySQLParser.UTF16LE:
            case MySQLParser.UTF32:
            case MySQLParser.UTF8:
            case MySQLParser.UTF8MB3:
            case MySQLParser.UTF8MB4:
            case MySQLParser.ARCHIVE:
            case MySQLParser.BLACKHOLE:
            case MySQLParser.CSV:
            case MySQLParser.FEDERATED:
            case MySQLParser.INNODB:
            case MySQLParser.MEMORY:
            case MySQLParser.MRG_MYISAM:
            case MySQLParser.MYISAM:
            case MySQLParser.NDB:
            case MySQLParser.NDBCLUSTER:
            case MySQLParser.PERFORMANCE_SCHEMA:
            case MySQLParser.TOKUDB:
            case MySQLParser.REPEATABLE:
            case MySQLParser.COMMITTED:
            case MySQLParser.UNCOMMITTED:
            case MySQLParser.SERIALIZABLE:
            case MySQLParser.GEOMETRYCOLLECTION:
            case MySQLParser.LINESTRING:
            case MySQLParser.MULTILINESTRING:
            case MySQLParser.MULTIPOINT:
            case MySQLParser.MULTIPOLYGON:
            case MySQLParser.POINT:
            case MySQLParser.POLYGON:
            case MySQLParser.ABS:
            case MySQLParser.ACOS:
            case MySQLParser.ADDDATE:
            case MySQLParser.ADDTIME:
            case MySQLParser.AES_DECRYPT:
            case MySQLParser.AES_ENCRYPT:
            case MySQLParser.AREA:
            case MySQLParser.ASBINARY:
            case MySQLParser.ASIN:
            case MySQLParser.ASTEXT:
            case MySQLParser.ASWKB:
            case MySQLParser.ASWKT:
            case MySQLParser.ASYMMETRIC_DECRYPT:
            case MySQLParser.ASYMMETRIC_DERIVE:
            case MySQLParser.ASYMMETRIC_ENCRYPT:
            case MySQLParser.ASYMMETRIC_SIGN:
            case MySQLParser.ASYMMETRIC_VERIFY:
            case MySQLParser.ATAN:
            case MySQLParser.ATAN2:
            case MySQLParser.BENCHMARK:
            case MySQLParser.BIN:
            case MySQLParser.BIT_COUNT:
            case MySQLParser.BIT_LENGTH:
            case MySQLParser.BUFFER:
            case MySQLParser.CATALOG_NAME:
            case MySQLParser.CEIL:
            case MySQLParser.CEILING:
            case MySQLParser.CENTROID:
            case MySQLParser.CHARACTER_LENGTH:
            case MySQLParser.CHARSET:
            case MySQLParser.CHAR_LENGTH:
            case MySQLParser.COERCIBILITY:
            case MySQLParser.COLLATION:
            case MySQLParser.COMPRESS:
            case MySQLParser.CONCAT:
            case MySQLParser.CONCAT_WS:
            case MySQLParser.CONNECTION_ID:
            case MySQLParser.CONV:
            case MySQLParser.CONVERT_TZ:
            case MySQLParser.COS:
            case MySQLParser.COT:
            case MySQLParser.CRC32:
            case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySQLParser.CREATE_DH_PARAMETERS:
            case MySQLParser.CREATE_DIGEST:
            case MySQLParser.CROSSES:
            case MySQLParser.DATEDIFF:
            case MySQLParser.DATE_FORMAT:
            case MySQLParser.DAYNAME:
            case MySQLParser.DAYOFMONTH:
            case MySQLParser.DAYOFWEEK:
            case MySQLParser.DAYOFYEAR:
            case MySQLParser.DECODE:
            case MySQLParser.DEGREES:
            case MySQLParser.DES_DECRYPT:
            case MySQLParser.DES_ENCRYPT:
            case MySQLParser.DIMENSION:
            case MySQLParser.DISJOINT:
            case MySQLParser.ELT:
            case MySQLParser.ENCODE:
            case MySQLParser.ENCRYPT:
            case MySQLParser.ENDPOINT:
            case MySQLParser.ENVELOPE:
            case MySQLParser.EQUALS:
            case MySQLParser.EXP:
            case MySQLParser.EXPORT_SET:
            case MySQLParser.EXTERIORRING:
            case MySQLParser.EXTRACTVALUE:
            case MySQLParser.FIELD:
            case MySQLParser.FIND_IN_SET:
            case MySQLParser.FLOOR:
            case MySQLParser.FORMAT:
            case MySQLParser.FOUND_ROWS:
            case MySQLParser.FROM_BASE64:
            case MySQLParser.FROM_DAYS:
            case MySQLParser.FROM_UNIXTIME:
            case MySQLParser.GEOMCOLLFROMTEXT:
            case MySQLParser.GEOMCOLLFROMWKB:
            case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.GEOMETRYFROMTEXT:
            case MySQLParser.GEOMETRYFROMWKB:
            case MySQLParser.GEOMETRYN:
            case MySQLParser.GEOMETRYTYPE:
            case MySQLParser.GEOMFROMTEXT:
            case MySQLParser.GEOMFROMWKB:
            case MySQLParser.GET_FORMAT:
            case MySQLParser.GET_LOCK:
            case MySQLParser.GLENGTH:
            case MySQLParser.GREATEST:
            case MySQLParser.GTID_SUBSET:
            case MySQLParser.GTID_SUBTRACT:
            case MySQLParser.HEX:
            case MySQLParser.IFNULL:
            case MySQLParser.INET6_ATON:
            case MySQLParser.INET6_NTOA:
            case MySQLParser.INET_ATON:
            case MySQLParser.INET_NTOA:
            case MySQLParser.INSTR:
            case MySQLParser.INTERIORRINGN:
            case MySQLParser.INTERSECTS:
            case MySQLParser.ISCLOSED:
            case MySQLParser.ISEMPTY:
            case MySQLParser.ISNULL:
            case MySQLParser.ISSIMPLE:
            case MySQLParser.IS_FREE_LOCK:
            case MySQLParser.IS_IPV4:
            case MySQLParser.IS_IPV4_COMPAT:
            case MySQLParser.IS_IPV4_MAPPED:
            case MySQLParser.IS_IPV6:
            case MySQLParser.IS_USED_LOCK:
            case MySQLParser.LAST_INSERT_ID:
            case MySQLParser.LCASE:
            case MySQLParser.LEAST:
            case MySQLParser.LENGTH:
            case MySQLParser.LINEFROMTEXT:
            case MySQLParser.LINEFROMWKB:
            case MySQLParser.LINESTRINGFROMTEXT:
            case MySQLParser.LINESTRINGFROMWKB:
            case MySQLParser.LN:
            case MySQLParser.LOAD_FILE:
            case MySQLParser.LOCATE:
            case MySQLParser.LOG:
            case MySQLParser.LOG10:
            case MySQLParser.LOG2:
            case MySQLParser.LOWER:
            case MySQLParser.LPAD:
            case MySQLParser.LTRIM:
            case MySQLParser.MAKEDATE:
            case MySQLParser.MAKETIME:
            case MySQLParser.MAKE_SET:
            case MySQLParser.MASTER_POS_WAIT:
            case MySQLParser.MBRCONTAINS:
            case MySQLParser.MBRDISJOINT:
            case MySQLParser.MBREQUAL:
            case MySQLParser.MBRINTERSECTS:
            case MySQLParser.MBROVERLAPS:
            case MySQLParser.MBRTOUCHES:
            case MySQLParser.MBRWITHIN:
            case MySQLParser.MD5:
            case MySQLParser.MLINEFROMTEXT:
            case MySQLParser.MLINEFROMWKB:
            case MySQLParser.MONTHNAME:
            case MySQLParser.MPOINTFROMTEXT:
            case MySQLParser.MPOINTFROMWKB:
            case MySQLParser.MPOLYFROMTEXT:
            case MySQLParser.MPOLYFROMWKB:
            case MySQLParser.MULTILINESTRINGFROMTEXT:
            case MySQLParser.MULTILINESTRINGFROMWKB:
            case MySQLParser.MULTIPOINTFROMTEXT:
            case MySQLParser.MULTIPOINTFROMWKB:
            case MySQLParser.MULTIPOLYGONFROMTEXT:
            case MySQLParser.MULTIPOLYGONFROMWKB:
            case MySQLParser.NAME_CONST:
            case MySQLParser.NULLIF:
            case MySQLParser.NUMGEOMETRIES:
            case MySQLParser.NUMINTERIORRINGS:
            case MySQLParser.NUMPOINTS:
            case MySQLParser.OCT:
            case MySQLParser.OCTET_LENGTH:
            case MySQLParser.ORD:
            case MySQLParser.OVERLAPS:
            case MySQLParser.PERIOD_ADD:
            case MySQLParser.PERIOD_DIFF:
            case MySQLParser.PI:
            case MySQLParser.POINTFROMTEXT:
            case MySQLParser.POINTFROMWKB:
            case MySQLParser.POINTN:
            case MySQLParser.POLYFROMTEXT:
            case MySQLParser.POLYFROMWKB:
            case MySQLParser.POLYGONFROMTEXT:
            case MySQLParser.POLYGONFROMWKB:
            case MySQLParser.POW:
            case MySQLParser.POWER:
            case MySQLParser.QUOTE:
            case MySQLParser.RADIANS:
            case MySQLParser.RAND:
            case MySQLParser.RANDOM_BYTES:
            case MySQLParser.RELEASE_LOCK:
            case MySQLParser.REVERSE:
            case MySQLParser.ROUND:
            case MySQLParser.ROW_COUNT:
            case MySQLParser.RPAD:
            case MySQLParser.RTRIM:
            case MySQLParser.SEC_TO_TIME:
            case MySQLParser.SESSION_USER:
            case MySQLParser.SHA:
            case MySQLParser.SHA1:
            case MySQLParser.SHA2:
            case MySQLParser.SCHEMA_NAME:
            case MySQLParser.SIGN:
            case MySQLParser.SIN:
            case MySQLParser.SLEEP:
            case MySQLParser.SOUNDEX:
            case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySQLParser.SQRT:
            case MySQLParser.SRID:
            case MySQLParser.STARTPOINT:
            case MySQLParser.STRCMP:
            case MySQLParser.STR_TO_DATE:
            case MySQLParser.ST_AREA:
            case MySQLParser.ST_ASBINARY:
            case MySQLParser.ST_ASTEXT:
            case MySQLParser.ST_ASWKB:
            case MySQLParser.ST_ASWKT:
            case MySQLParser.ST_BUFFER:
            case MySQLParser.ST_CENTROID:
            case MySQLParser.ST_CONTAINS:
            case MySQLParser.ST_CROSSES:
            case MySQLParser.ST_DIFFERENCE:
            case MySQLParser.ST_DIMENSION:
            case MySQLParser.ST_DISJOINT:
            case MySQLParser.ST_DISTANCE:
            case MySQLParser.ST_ENDPOINT:
            case MySQLParser.ST_ENVELOPE:
            case MySQLParser.ST_EQUALS:
            case MySQLParser.ST_EXTERIORRING:
            case MySQLParser.ST_GEOMCOLLFROMTEXT:
            case MySQLParser.ST_GEOMCOLLFROMTXT:
            case MySQLParser.ST_GEOMCOLLFROMWKB:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.ST_GEOMETRYFROMTEXT:
            case MySQLParser.ST_GEOMETRYFROMWKB:
            case MySQLParser.ST_GEOMETRYN:
            case MySQLParser.ST_GEOMETRYTYPE:
            case MySQLParser.ST_GEOMFROMTEXT:
            case MySQLParser.ST_GEOMFROMWKB:
            case MySQLParser.ST_INTERIORRINGN:
            case MySQLParser.ST_INTERSECTION:
            case MySQLParser.ST_INTERSECTS:
            case MySQLParser.ST_ISCLOSED:
            case MySQLParser.ST_ISEMPTY:
            case MySQLParser.ST_ISSIMPLE:
            case MySQLParser.ST_LINEFROMTEXT:
            case MySQLParser.ST_LINEFROMWKB:
            case MySQLParser.ST_LINESTRINGFROMTEXT:
            case MySQLParser.ST_LINESTRINGFROMWKB:
            case MySQLParser.ST_NUMGEOMETRIES:
            case MySQLParser.ST_NUMINTERIORRING:
            case MySQLParser.ST_NUMINTERIORRINGS:
            case MySQLParser.ST_NUMPOINTS:
            case MySQLParser.ST_OVERLAPS:
            case MySQLParser.ST_POINTFROMTEXT:
            case MySQLParser.ST_POINTFROMWKB:
            case MySQLParser.ST_POINTN:
            case MySQLParser.ST_POLYFROMTEXT:
            case MySQLParser.ST_POLYFROMWKB:
            case MySQLParser.ST_POLYGONFROMTEXT:
            case MySQLParser.ST_POLYGONFROMWKB:
            case MySQLParser.ST_SRID:
            case MySQLParser.ST_STARTPOINT:
            case MySQLParser.ST_SYMDIFFERENCE:
            case MySQLParser.ST_TOUCHES:
            case MySQLParser.ST_UNION:
            case MySQLParser.ST_WITHIN:
            case MySQLParser.ST_X:
            case MySQLParser.ST_Y:
            case MySQLParser.SUBDATE:
            case MySQLParser.SUBSTRING_INDEX:
            case MySQLParser.SUBTIME:
            case MySQLParser.SYSTEM_USER:
            case MySQLParser.TAN:
            case MySQLParser.TIMEDIFF:
            case MySQLParser.TIMESTAMPADD:
            case MySQLParser.TIMESTAMPDIFF:
            case MySQLParser.TIME_FORMAT:
            case MySQLParser.TIME_TO_SEC:
            case MySQLParser.TOUCHES:
            case MySQLParser.TO_BASE64:
            case MySQLParser.TO_DAYS:
            case MySQLParser.TO_SECONDS:
            case MySQLParser.UCASE:
            case MySQLParser.UNCOMPRESS:
            case MySQLParser.UNCOMPRESSED_LENGTH:
            case MySQLParser.UNHEX:
            case MySQLParser.UNIX_TIMESTAMP:
            case MySQLParser.UPDATEXML:
            case MySQLParser.UPPER:
            case MySQLParser.UUID:
            case MySQLParser.UUID_SHORT:
            case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
            case MySQLParser.VERSION:
            case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySQLParser.WEEKDAY:
            case MySQLParser.WEEKOFYEAR:
            case MySQLParser.WEIGHT_STRING:
            case MySQLParser.WITHIN:
            case MySQLParser.YEARWEEK:
            case MySQLParser.Y_FUNCTION:
            case MySQLParser.X_FUNCTION:
            case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySQLParser.STRING_LITERAL:
            case MySQLParser.ID:
            case MySQLParser.REVERSE_QUOTE_ID:
                this.state = 2552;
                this.uidList();
                break;
            case MySQLParser.ALL:
                this.state = 2553;
                this.match(MySQLParser.ALL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 37:
            localctx = new AlterByCoalescePartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 37);
            this.state = 2556;
            this.match(MySQLParser.COALESCE);
            this.state = 2557;
            this.match(MySQLParser.PARTITION);
            this.state = 2558;
            this.decimalLiteral();
            break;

        case 38:
            localctx = new AlterByReorganizePartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 38);
            this.state = 2559;
            this.match(MySQLParser.REORGANIZE);
            this.state = 2560;
            this.match(MySQLParser.PARTITION);
            this.state = 2561;
            this.uidList();
            this.state = 2562;
            this.match(MySQLParser.INTO);
            this.state = 2563;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 2564;
            this.partitionDefinition();
            this.state = 2569;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 2565;
                this.match(MySQLParser.COMMA);
                this.state = 2566;
                this.partitionDefinition();
                this.state = 2571;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2572;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 39:
            localctx = new AlterByExchangePartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 39);
            this.state = 2574;
            this.match(MySQLParser.EXCHANGE);
            this.state = 2575;
            this.match(MySQLParser.PARTITION);
            this.state = 2576;
            this.uid();
            this.state = 2577;
            this.match(MySQLParser.WITH);
            this.state = 2578;
            this.match(MySQLParser.TABLE);
            this.state = 2579;
            this.tableName();
            this.state = 2582;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.WITH || _la===MySQLParser.WITHOUT) {
                this.state = 2580;
                localctx.validationFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.WITH || _la===MySQLParser.WITHOUT)) {
                    localctx.validationFormat = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2581;
                this.match(MySQLParser.VALIDATION);
            }

            break;

        case 40:
            localctx = new AlterByAnalyzePartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 40);
            this.state = 2584;
            this.match(MySQLParser.ANALYZE);
            this.state = 2585;
            this.match(MySQLParser.PARTITION);
            this.state = 2588;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.CURRENT:
            case MySQLParser.DATABASE:
            case MySQLParser.DIAGNOSTICS:
            case MySQLParser.LEFT:
            case MySQLParser.NUMBER:
            case MySQLParser.RIGHT:
            case MySQLParser.STACKED:
            case MySQLParser.DATE:
            case MySQLParser.TIME:
            case MySQLParser.TIMESTAMP:
            case MySQLParser.DATETIME:
            case MySQLParser.YEAR:
            case MySQLParser.TEXT:
            case MySQLParser.ENUM:
            case MySQLParser.SERIAL:
            case MySQLParser.JSON_VALID:
            case MySQLParser.JSON_SCHEMA_VALID:
            case MySQLParser.COUNT:
            case MySQLParser.POSITION:
            case MySQLParser.ACCOUNT:
            case MySQLParser.ACTION:
            case MySQLParser.AFTER:
            case MySQLParser.AGGREGATE:
            case MySQLParser.ALGORITHM:
            case MySQLParser.ANY:
            case MySQLParser.AT:
            case MySQLParser.AUTHORS:
            case MySQLParser.AUTOCOMMIT:
            case MySQLParser.AUTOEXTEND_SIZE:
            case MySQLParser.AUTO_INCREMENT:
            case MySQLParser.AVG_ROW_LENGTH:
            case MySQLParser.BEGIN:
            case MySQLParser.BINLOG:
            case MySQLParser.BIT:
            case MySQLParser.BLOCK:
            case MySQLParser.BOOL:
            case MySQLParser.BOOLEAN:
            case MySQLParser.BTREE:
            case MySQLParser.CACHE:
            case MySQLParser.CASCADED:
            case MySQLParser.CHAIN:
            case MySQLParser.CHANGED:
            case MySQLParser.CHANNEL:
            case MySQLParser.CHECKSUM:
            case MySQLParser.PAGE_CHECKSUM:
            case MySQLParser.CIPHER:
            case MySQLParser.CLASS_ORIGIN:
            case MySQLParser.CLIENT:
            case MySQLParser.CLOSE:
            case MySQLParser.COALESCE:
            case MySQLParser.CODE:
            case MySQLParser.COLUMNS:
            case MySQLParser.COLUMN_FORMAT:
            case MySQLParser.COLUMN_NAME:
            case MySQLParser.COMMENT:
            case MySQLParser.COMMIT:
            case MySQLParser.COMPACT:
            case MySQLParser.COMPLETION:
            case MySQLParser.COMPRESSED:
            case MySQLParser.COMPRESSION:
            case MySQLParser.CONCURRENT:
            case MySQLParser.CONNECTION:
            case MySQLParser.CONSISTENT:
            case MySQLParser.CONSTRAINT_CATALOG:
            case MySQLParser.CONSTRAINT_SCHEMA:
            case MySQLParser.CONSTRAINT_NAME:
            case MySQLParser.CONTAINS:
            case MySQLParser.CONTEXT:
            case MySQLParser.CONTRIBUTORS:
            case MySQLParser.COPY:
            case MySQLParser.CPU:
            case MySQLParser.CURSOR_NAME:
            case MySQLParser.DATA:
            case MySQLParser.DATAFILE:
            case MySQLParser.DEALLOCATE:
            case MySQLParser.DEFAULT_AUTH:
            case MySQLParser.DEFINER:
            case MySQLParser.DELAY_KEY_WRITE:
            case MySQLParser.DES_KEY_FILE:
            case MySQLParser.DIRECTORY:
            case MySQLParser.DISABLE:
            case MySQLParser.DISCARD:
            case MySQLParser.DISK:
            case MySQLParser.DO:
            case MySQLParser.DUMPFILE:
            case MySQLParser.DUPLICATE:
            case MySQLParser.DYNAMIC:
            case MySQLParser.ENABLE:
            case MySQLParser.ENCRYPTION:
            case MySQLParser.END:
            case MySQLParser.ENDS:
            case MySQLParser.ENGINE:
            case MySQLParser.ENGINES:
            case MySQLParser.ERROR:
            case MySQLParser.ERRORS:
            case MySQLParser.ESCAPE:
            case MySQLParser.EVEN:
            case MySQLParser.EVENT:
            case MySQLParser.EVENTS:
            case MySQLParser.EVERY:
            case MySQLParser.EXCHANGE:
            case MySQLParser.EXCLUSIVE:
            case MySQLParser.EXPIRE:
            case MySQLParser.EXPORT:
            case MySQLParser.EXTENDED:
            case MySQLParser.EXTENT_SIZE:
            case MySQLParser.FAST:
            case MySQLParser.FAULTS:
            case MySQLParser.FIELDS:
            case MySQLParser.FILE_BLOCK_SIZE:
            case MySQLParser.FILTER:
            case MySQLParser.FIRST:
            case MySQLParser.FIXED:
            case MySQLParser.FLUSH:
            case MySQLParser.FOLLOWS:
            case MySQLParser.FOUND:
            case MySQLParser.FULL:
            case MySQLParser.FUNCTION:
            case MySQLParser.GENERAL:
            case MySQLParser.GLOBAL:
            case MySQLParser.GRANTS:
            case MySQLParser.GROUP_REPLICATION:
            case MySQLParser.HANDLER:
            case MySQLParser.HASH:
            case MySQLParser.HELP:
            case MySQLParser.HOST:
            case MySQLParser.HOSTS:
            case MySQLParser.IDENTIFIED:
            case MySQLParser.IGNORE_SERVER_IDS:
            case MySQLParser.IMPORT:
            case MySQLParser.INDEXES:
            case MySQLParser.INITIAL_SIZE:
            case MySQLParser.INPLACE:
            case MySQLParser.INSERT_METHOD:
            case MySQLParser.INSTALL:
            case MySQLParser.INSTANCE:
            case MySQLParser.INVISIBLE:
            case MySQLParser.INVOKER:
            case MySQLParser.IO:
            case MySQLParser.IO_THREAD:
            case MySQLParser.IPC:
            case MySQLParser.ISOLATION:
            case MySQLParser.ISSUER:
            case MySQLParser.JSON:
            case MySQLParser.KEY_BLOCK_SIZE:
            case MySQLParser.LANGUAGE:
            case MySQLParser.LAST:
            case MySQLParser.LEAVES:
            case MySQLParser.LESS:
            case MySQLParser.LEVEL:
            case MySQLParser.LIST:
            case MySQLParser.LOCAL:
            case MySQLParser.LOGFILE:
            case MySQLParser.LOGS:
            case MySQLParser.MASTER:
            case MySQLParser.MASTER_AUTO_POSITION:
            case MySQLParser.MASTER_CONNECT_RETRY:
            case MySQLParser.MASTER_DELAY:
            case MySQLParser.MASTER_HEARTBEAT_PERIOD:
            case MySQLParser.MASTER_HOST:
            case MySQLParser.MASTER_LOG_FILE:
            case MySQLParser.MASTER_LOG_POS:
            case MySQLParser.MASTER_PASSWORD:
            case MySQLParser.MASTER_PORT:
            case MySQLParser.MASTER_RETRY_COUNT:
            case MySQLParser.MASTER_SSL:
            case MySQLParser.MASTER_SSL_CA:
            case MySQLParser.MASTER_SSL_CAPATH:
            case MySQLParser.MASTER_SSL_CERT:
            case MySQLParser.MASTER_SSL_CIPHER:
            case MySQLParser.MASTER_SSL_CRL:
            case MySQLParser.MASTER_SSL_CRLPATH:
            case MySQLParser.MASTER_SSL_KEY:
            case MySQLParser.MASTER_TLS_VERSION:
            case MySQLParser.MASTER_USER:
            case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
            case MySQLParser.MAX_QUERIES_PER_HOUR:
            case MySQLParser.MAX_ROWS:
            case MySQLParser.MAX_SIZE:
            case MySQLParser.MAX_UPDATES_PER_HOUR:
            case MySQLParser.MAX_USER_CONNECTIONS:
            case MySQLParser.MEDIUM:
            case MySQLParser.MERGE:
            case MySQLParser.MESSAGE_TEXT:
            case MySQLParser.MID:
            case MySQLParser.MIGRATE:
            case MySQLParser.MIN_ROWS:
            case MySQLParser.MODE:
            case MySQLParser.MODIFY:
            case MySQLParser.MUTEX:
            case MySQLParser.MYSQL:
            case MySQLParser.MYSQL_ERRNO:
            case MySQLParser.NAME:
            case MySQLParser.NAMES:
            case MySQLParser.NCHAR:
            case MySQLParser.NEVER:
            case MySQLParser.NEXT:
            case MySQLParser.NO:
            case MySQLParser.NODEGROUP:
            case MySQLParser.NONE:
            case MySQLParser.OFFLINE:
            case MySQLParser.OFFSET:
            case MySQLParser.OJ:
            case MySQLParser.OLD_PASSWORD:
            case MySQLParser.ONE:
            case MySQLParser.ONLINE:
            case MySQLParser.ONLY:
            case MySQLParser.OPEN:
            case MySQLParser.OPTIMIZER_COSTS:
            case MySQLParser.OPTIONS:
            case MySQLParser.OWNER:
            case MySQLParser.PACK_KEYS:
            case MySQLParser.PAGE:
            case MySQLParser.PARSER:
            case MySQLParser.PARTIAL:
            case MySQLParser.PARTITIONING:
            case MySQLParser.PARTITIONS:
            case MySQLParser.PASSWORD:
            case MySQLParser.PHASE:
            case MySQLParser.PLUGIN:
            case MySQLParser.PLUGIN_DIR:
            case MySQLParser.PLUGINS:
            case MySQLParser.PORT:
            case MySQLParser.PRECEDES:
            case MySQLParser.PREPARE:
            case MySQLParser.PRESERVE:
            case MySQLParser.PREV:
            case MySQLParser.PROCESSLIST:
            case MySQLParser.PROFILE:
            case MySQLParser.PROFILES:
            case MySQLParser.PROXY:
            case MySQLParser.QUERY:
            case MySQLParser.QUICK:
            case MySQLParser.REBUILD:
            case MySQLParser.RECOVER:
            case MySQLParser.REDO_BUFFER_SIZE:
            case MySQLParser.REDUNDANT:
            case MySQLParser.RELAY:
            case MySQLParser.RELAY_LOG_FILE:
            case MySQLParser.RELAY_LOG_POS:
            case MySQLParser.RELAYLOG:
            case MySQLParser.REMOVE:
            case MySQLParser.REORGANIZE:
            case MySQLParser.REPAIR:
            case MySQLParser.REPLICATE_DO_DB:
            case MySQLParser.REPLICATE_DO_TABLE:
            case MySQLParser.REPLICATE_IGNORE_DB:
            case MySQLParser.REPLICATE_IGNORE_TABLE:
            case MySQLParser.REPLICATE_REWRITE_DB:
            case MySQLParser.REPLICATE_WILD_DO_TABLE:
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySQLParser.REPLICATION:
            case MySQLParser.RESET:
            case MySQLParser.RESUME:
            case MySQLParser.RETURNED_SQLSTATE:
            case MySQLParser.RETURNS:
            case MySQLParser.ROLE:
            case MySQLParser.ROLLBACK:
            case MySQLParser.ROLLUP:
            case MySQLParser.ROTATE:
            case MySQLParser.ROW:
            case MySQLParser.ROWS:
            case MySQLParser.ROW_FORMAT:
            case MySQLParser.SAVEPOINT:
            case MySQLParser.SCHEDULE:
            case MySQLParser.SECURITY:
            case MySQLParser.SERVER:
            case MySQLParser.SESSION:
            case MySQLParser.SHARE:
            case MySQLParser.SHARED:
            case MySQLParser.SIGNED:
            case MySQLParser.SIMPLE:
            case MySQLParser.SLAVE:
            case MySQLParser.SLOW:
            case MySQLParser.SNAPSHOT:
            case MySQLParser.SOCKET:
            case MySQLParser.SOME:
            case MySQLParser.SONAME:
            case MySQLParser.SOUNDS:
            case MySQLParser.SOURCE:
            case MySQLParser.SQL_AFTER_GTIDS:
            case MySQLParser.SQL_AFTER_MTS_GAPS:
            case MySQLParser.SQL_BEFORE_GTIDS:
            case MySQLParser.SQL_BUFFER_RESULT:
            case MySQLParser.SQL_CACHE:
            case MySQLParser.SQL_NO_CACHE:
            case MySQLParser.SQL_THREAD:
            case MySQLParser.START:
            case MySQLParser.STARTS:
            case MySQLParser.STATS_AUTO_RECALC:
            case MySQLParser.STATS_PERSISTENT:
            case MySQLParser.STATS_SAMPLE_PAGES:
            case MySQLParser.STATUS:
            case MySQLParser.STOP:
            case MySQLParser.STORAGE:
            case MySQLParser.STRING:
            case MySQLParser.SUBCLASS_ORIGIN:
            case MySQLParser.SUBJECT:
            case MySQLParser.SUBPARTITION:
            case MySQLParser.SUBPARTITIONS:
            case MySQLParser.SUSPEND:
            case MySQLParser.SWAPS:
            case MySQLParser.SWITCHES:
            case MySQLParser.TABLE_NAME:
            case MySQLParser.TABLESPACE:
            case MySQLParser.TEMPORARY:
            case MySQLParser.TEMPTABLE:
            case MySQLParser.THAN:
            case MySQLParser.TRADITIONAL:
            case MySQLParser.TRANSACTION:
            case MySQLParser.TRANSACTIONAL:
            case MySQLParser.TRIGGERS:
            case MySQLParser.TRUNCATE:
            case MySQLParser.UNDEFINED:
            case MySQLParser.UNDOFILE:
            case MySQLParser.UNDO_BUFFER_SIZE:
            case MySQLParser.UNINSTALL:
            case MySQLParser.UNKNOWN:
            case MySQLParser.UNTIL:
            case MySQLParser.UPGRADE:
            case MySQLParser.USER:
            case MySQLParser.USE_FRM:
            case MySQLParser.USER_RESOURCES:
            case MySQLParser.VALIDATION:
            case MySQLParser.VALUE:
            case MySQLParser.VARIABLES:
            case MySQLParser.VIEW:
            case MySQLParser.VISIBLE:
            case MySQLParser.WAIT:
            case MySQLParser.WARNINGS:
            case MySQLParser.WITHOUT:
            case MySQLParser.WORK:
            case MySQLParser.WRAPPER:
            case MySQLParser.X509:
            case MySQLParser.XA:
            case MySQLParser.XML:
            case MySQLParser.INTERNAL:
            case MySQLParser.QUARTER:
            case MySQLParser.MONTH:
            case MySQLParser.DAY:
            case MySQLParser.HOUR:
            case MySQLParser.MINUTE:
            case MySQLParser.WEEK:
            case MySQLParser.SECOND:
            case MySQLParser.MICROSECOND:
            case MySQLParser.TABLES:
            case MySQLParser.ROUTINE:
            case MySQLParser.EXECUTE:
            case MySQLParser.FILE:
            case MySQLParser.PROCESS:
            case MySQLParser.RELOAD:
            case MySQLParser.SHUTDOWN:
            case MySQLParser.SUPER:
            case MySQLParser.PRIVILEGES:
            case MySQLParser.AUDIT_ADMIN:
            case MySQLParser.BACKUP_ADMIN:
            case MySQLParser.BINLOG_ADMIN:
            case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
            case MySQLParser.CLONE_ADMIN:
            case MySQLParser.CONNECTION_ADMIN:
            case MySQLParser.ENCRYPTION_KEY_ADMIN:
            case MySQLParser.FIREWALL_ADMIN:
            case MySQLParser.FIREWALL_USER:
            case MySQLParser.GROUP_REPLICATION_ADMIN:
            case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
            case MySQLParser.NDB_STORED_USER:
            case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySQLParser.REPLICATION_APPLIER:
            case MySQLParser.REPLICATION_SLAVE_ADMIN:
            case MySQLParser.RESOURCE_GROUP_ADMIN:
            case MySQLParser.RESOURCE_GROUP_USER:
            case MySQLParser.ROLE_ADMIN:
            case MySQLParser.SESSION_VARIABLES_ADMIN:
            case MySQLParser.SET_USER_ID:
            case MySQLParser.SHOW_ROUTINE:
            case MySQLParser.SYSTEM_VARIABLES_ADMIN:
            case MySQLParser.TABLE_ENCRYPTION_ADMIN:
            case MySQLParser.VERSION_TOKEN_ADMIN:
            case MySQLParser.XA_RECOVER_ADMIN:
            case MySQLParser.ARMSCII8:
            case MySQLParser.ASCII:
            case MySQLParser.BIG5:
            case MySQLParser.CP1250:
            case MySQLParser.CP1251:
            case MySQLParser.CP1256:
            case MySQLParser.CP1257:
            case MySQLParser.CP850:
            case MySQLParser.CP852:
            case MySQLParser.CP866:
            case MySQLParser.CP932:
            case MySQLParser.DEC8:
            case MySQLParser.EUCJPMS:
            case MySQLParser.EUCKR:
            case MySQLParser.GB2312:
            case MySQLParser.GBK:
            case MySQLParser.GEOSTD8:
            case MySQLParser.GREEK:
            case MySQLParser.HEBREW:
            case MySQLParser.HP8:
            case MySQLParser.KEYBCS2:
            case MySQLParser.KOI8R:
            case MySQLParser.KOI8U:
            case MySQLParser.LATIN1:
            case MySQLParser.LATIN2:
            case MySQLParser.LATIN5:
            case MySQLParser.LATIN7:
            case MySQLParser.MACCE:
            case MySQLParser.MACROMAN:
            case MySQLParser.SJIS:
            case MySQLParser.SWE7:
            case MySQLParser.TIS620:
            case MySQLParser.UCS2:
            case MySQLParser.UJIS:
            case MySQLParser.UTF16:
            case MySQLParser.UTF16LE:
            case MySQLParser.UTF32:
            case MySQLParser.UTF8:
            case MySQLParser.UTF8MB3:
            case MySQLParser.UTF8MB4:
            case MySQLParser.ARCHIVE:
            case MySQLParser.BLACKHOLE:
            case MySQLParser.CSV:
            case MySQLParser.FEDERATED:
            case MySQLParser.INNODB:
            case MySQLParser.MEMORY:
            case MySQLParser.MRG_MYISAM:
            case MySQLParser.MYISAM:
            case MySQLParser.NDB:
            case MySQLParser.NDBCLUSTER:
            case MySQLParser.PERFORMANCE_SCHEMA:
            case MySQLParser.TOKUDB:
            case MySQLParser.REPEATABLE:
            case MySQLParser.COMMITTED:
            case MySQLParser.UNCOMMITTED:
            case MySQLParser.SERIALIZABLE:
            case MySQLParser.GEOMETRYCOLLECTION:
            case MySQLParser.LINESTRING:
            case MySQLParser.MULTILINESTRING:
            case MySQLParser.MULTIPOINT:
            case MySQLParser.MULTIPOLYGON:
            case MySQLParser.POINT:
            case MySQLParser.POLYGON:
            case MySQLParser.ABS:
            case MySQLParser.ACOS:
            case MySQLParser.ADDDATE:
            case MySQLParser.ADDTIME:
            case MySQLParser.AES_DECRYPT:
            case MySQLParser.AES_ENCRYPT:
            case MySQLParser.AREA:
            case MySQLParser.ASBINARY:
            case MySQLParser.ASIN:
            case MySQLParser.ASTEXT:
            case MySQLParser.ASWKB:
            case MySQLParser.ASWKT:
            case MySQLParser.ASYMMETRIC_DECRYPT:
            case MySQLParser.ASYMMETRIC_DERIVE:
            case MySQLParser.ASYMMETRIC_ENCRYPT:
            case MySQLParser.ASYMMETRIC_SIGN:
            case MySQLParser.ASYMMETRIC_VERIFY:
            case MySQLParser.ATAN:
            case MySQLParser.ATAN2:
            case MySQLParser.BENCHMARK:
            case MySQLParser.BIN:
            case MySQLParser.BIT_COUNT:
            case MySQLParser.BIT_LENGTH:
            case MySQLParser.BUFFER:
            case MySQLParser.CATALOG_NAME:
            case MySQLParser.CEIL:
            case MySQLParser.CEILING:
            case MySQLParser.CENTROID:
            case MySQLParser.CHARACTER_LENGTH:
            case MySQLParser.CHARSET:
            case MySQLParser.CHAR_LENGTH:
            case MySQLParser.COERCIBILITY:
            case MySQLParser.COLLATION:
            case MySQLParser.COMPRESS:
            case MySQLParser.CONCAT:
            case MySQLParser.CONCAT_WS:
            case MySQLParser.CONNECTION_ID:
            case MySQLParser.CONV:
            case MySQLParser.CONVERT_TZ:
            case MySQLParser.COS:
            case MySQLParser.COT:
            case MySQLParser.CRC32:
            case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySQLParser.CREATE_DH_PARAMETERS:
            case MySQLParser.CREATE_DIGEST:
            case MySQLParser.CROSSES:
            case MySQLParser.DATEDIFF:
            case MySQLParser.DATE_FORMAT:
            case MySQLParser.DAYNAME:
            case MySQLParser.DAYOFMONTH:
            case MySQLParser.DAYOFWEEK:
            case MySQLParser.DAYOFYEAR:
            case MySQLParser.DECODE:
            case MySQLParser.DEGREES:
            case MySQLParser.DES_DECRYPT:
            case MySQLParser.DES_ENCRYPT:
            case MySQLParser.DIMENSION:
            case MySQLParser.DISJOINT:
            case MySQLParser.ELT:
            case MySQLParser.ENCODE:
            case MySQLParser.ENCRYPT:
            case MySQLParser.ENDPOINT:
            case MySQLParser.ENVELOPE:
            case MySQLParser.EQUALS:
            case MySQLParser.EXP:
            case MySQLParser.EXPORT_SET:
            case MySQLParser.EXTERIORRING:
            case MySQLParser.EXTRACTVALUE:
            case MySQLParser.FIELD:
            case MySQLParser.FIND_IN_SET:
            case MySQLParser.FLOOR:
            case MySQLParser.FORMAT:
            case MySQLParser.FOUND_ROWS:
            case MySQLParser.FROM_BASE64:
            case MySQLParser.FROM_DAYS:
            case MySQLParser.FROM_UNIXTIME:
            case MySQLParser.GEOMCOLLFROMTEXT:
            case MySQLParser.GEOMCOLLFROMWKB:
            case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.GEOMETRYFROMTEXT:
            case MySQLParser.GEOMETRYFROMWKB:
            case MySQLParser.GEOMETRYN:
            case MySQLParser.GEOMETRYTYPE:
            case MySQLParser.GEOMFROMTEXT:
            case MySQLParser.GEOMFROMWKB:
            case MySQLParser.GET_FORMAT:
            case MySQLParser.GET_LOCK:
            case MySQLParser.GLENGTH:
            case MySQLParser.GREATEST:
            case MySQLParser.GTID_SUBSET:
            case MySQLParser.GTID_SUBTRACT:
            case MySQLParser.HEX:
            case MySQLParser.IFNULL:
            case MySQLParser.INET6_ATON:
            case MySQLParser.INET6_NTOA:
            case MySQLParser.INET_ATON:
            case MySQLParser.INET_NTOA:
            case MySQLParser.INSTR:
            case MySQLParser.INTERIORRINGN:
            case MySQLParser.INTERSECTS:
            case MySQLParser.ISCLOSED:
            case MySQLParser.ISEMPTY:
            case MySQLParser.ISNULL:
            case MySQLParser.ISSIMPLE:
            case MySQLParser.IS_FREE_LOCK:
            case MySQLParser.IS_IPV4:
            case MySQLParser.IS_IPV4_COMPAT:
            case MySQLParser.IS_IPV4_MAPPED:
            case MySQLParser.IS_IPV6:
            case MySQLParser.IS_USED_LOCK:
            case MySQLParser.LAST_INSERT_ID:
            case MySQLParser.LCASE:
            case MySQLParser.LEAST:
            case MySQLParser.LENGTH:
            case MySQLParser.LINEFROMTEXT:
            case MySQLParser.LINEFROMWKB:
            case MySQLParser.LINESTRINGFROMTEXT:
            case MySQLParser.LINESTRINGFROMWKB:
            case MySQLParser.LN:
            case MySQLParser.LOAD_FILE:
            case MySQLParser.LOCATE:
            case MySQLParser.LOG:
            case MySQLParser.LOG10:
            case MySQLParser.LOG2:
            case MySQLParser.LOWER:
            case MySQLParser.LPAD:
            case MySQLParser.LTRIM:
            case MySQLParser.MAKEDATE:
            case MySQLParser.MAKETIME:
            case MySQLParser.MAKE_SET:
            case MySQLParser.MASTER_POS_WAIT:
            case MySQLParser.MBRCONTAINS:
            case MySQLParser.MBRDISJOINT:
            case MySQLParser.MBREQUAL:
            case MySQLParser.MBRINTERSECTS:
            case MySQLParser.MBROVERLAPS:
            case MySQLParser.MBRTOUCHES:
            case MySQLParser.MBRWITHIN:
            case MySQLParser.MD5:
            case MySQLParser.MLINEFROMTEXT:
            case MySQLParser.MLINEFROMWKB:
            case MySQLParser.MONTHNAME:
            case MySQLParser.MPOINTFROMTEXT:
            case MySQLParser.MPOINTFROMWKB:
            case MySQLParser.MPOLYFROMTEXT:
            case MySQLParser.MPOLYFROMWKB:
            case MySQLParser.MULTILINESTRINGFROMTEXT:
            case MySQLParser.MULTILINESTRINGFROMWKB:
            case MySQLParser.MULTIPOINTFROMTEXT:
            case MySQLParser.MULTIPOINTFROMWKB:
            case MySQLParser.MULTIPOLYGONFROMTEXT:
            case MySQLParser.MULTIPOLYGONFROMWKB:
            case MySQLParser.NAME_CONST:
            case MySQLParser.NULLIF:
            case MySQLParser.NUMGEOMETRIES:
            case MySQLParser.NUMINTERIORRINGS:
            case MySQLParser.NUMPOINTS:
            case MySQLParser.OCT:
            case MySQLParser.OCTET_LENGTH:
            case MySQLParser.ORD:
            case MySQLParser.OVERLAPS:
            case MySQLParser.PERIOD_ADD:
            case MySQLParser.PERIOD_DIFF:
            case MySQLParser.PI:
            case MySQLParser.POINTFROMTEXT:
            case MySQLParser.POINTFROMWKB:
            case MySQLParser.POINTN:
            case MySQLParser.POLYFROMTEXT:
            case MySQLParser.POLYFROMWKB:
            case MySQLParser.POLYGONFROMTEXT:
            case MySQLParser.POLYGONFROMWKB:
            case MySQLParser.POW:
            case MySQLParser.POWER:
            case MySQLParser.QUOTE:
            case MySQLParser.RADIANS:
            case MySQLParser.RAND:
            case MySQLParser.RANDOM_BYTES:
            case MySQLParser.RELEASE_LOCK:
            case MySQLParser.REVERSE:
            case MySQLParser.ROUND:
            case MySQLParser.ROW_COUNT:
            case MySQLParser.RPAD:
            case MySQLParser.RTRIM:
            case MySQLParser.SEC_TO_TIME:
            case MySQLParser.SESSION_USER:
            case MySQLParser.SHA:
            case MySQLParser.SHA1:
            case MySQLParser.SHA2:
            case MySQLParser.SCHEMA_NAME:
            case MySQLParser.SIGN:
            case MySQLParser.SIN:
            case MySQLParser.SLEEP:
            case MySQLParser.SOUNDEX:
            case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySQLParser.SQRT:
            case MySQLParser.SRID:
            case MySQLParser.STARTPOINT:
            case MySQLParser.STRCMP:
            case MySQLParser.STR_TO_DATE:
            case MySQLParser.ST_AREA:
            case MySQLParser.ST_ASBINARY:
            case MySQLParser.ST_ASTEXT:
            case MySQLParser.ST_ASWKB:
            case MySQLParser.ST_ASWKT:
            case MySQLParser.ST_BUFFER:
            case MySQLParser.ST_CENTROID:
            case MySQLParser.ST_CONTAINS:
            case MySQLParser.ST_CROSSES:
            case MySQLParser.ST_DIFFERENCE:
            case MySQLParser.ST_DIMENSION:
            case MySQLParser.ST_DISJOINT:
            case MySQLParser.ST_DISTANCE:
            case MySQLParser.ST_ENDPOINT:
            case MySQLParser.ST_ENVELOPE:
            case MySQLParser.ST_EQUALS:
            case MySQLParser.ST_EXTERIORRING:
            case MySQLParser.ST_GEOMCOLLFROMTEXT:
            case MySQLParser.ST_GEOMCOLLFROMTXT:
            case MySQLParser.ST_GEOMCOLLFROMWKB:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.ST_GEOMETRYFROMTEXT:
            case MySQLParser.ST_GEOMETRYFROMWKB:
            case MySQLParser.ST_GEOMETRYN:
            case MySQLParser.ST_GEOMETRYTYPE:
            case MySQLParser.ST_GEOMFROMTEXT:
            case MySQLParser.ST_GEOMFROMWKB:
            case MySQLParser.ST_INTERIORRINGN:
            case MySQLParser.ST_INTERSECTION:
            case MySQLParser.ST_INTERSECTS:
            case MySQLParser.ST_ISCLOSED:
            case MySQLParser.ST_ISEMPTY:
            case MySQLParser.ST_ISSIMPLE:
            case MySQLParser.ST_LINEFROMTEXT:
            case MySQLParser.ST_LINEFROMWKB:
            case MySQLParser.ST_LINESTRINGFROMTEXT:
            case MySQLParser.ST_LINESTRINGFROMWKB:
            case MySQLParser.ST_NUMGEOMETRIES:
            case MySQLParser.ST_NUMINTERIORRING:
            case MySQLParser.ST_NUMINTERIORRINGS:
            case MySQLParser.ST_NUMPOINTS:
            case MySQLParser.ST_OVERLAPS:
            case MySQLParser.ST_POINTFROMTEXT:
            case MySQLParser.ST_POINTFROMWKB:
            case MySQLParser.ST_POINTN:
            case MySQLParser.ST_POLYFROMTEXT:
            case MySQLParser.ST_POLYFROMWKB:
            case MySQLParser.ST_POLYGONFROMTEXT:
            case MySQLParser.ST_POLYGONFROMWKB:
            case MySQLParser.ST_SRID:
            case MySQLParser.ST_STARTPOINT:
            case MySQLParser.ST_SYMDIFFERENCE:
            case MySQLParser.ST_TOUCHES:
            case MySQLParser.ST_UNION:
            case MySQLParser.ST_WITHIN:
            case MySQLParser.ST_X:
            case MySQLParser.ST_Y:
            case MySQLParser.SUBDATE:
            case MySQLParser.SUBSTRING_INDEX:
            case MySQLParser.SUBTIME:
            case MySQLParser.SYSTEM_USER:
            case MySQLParser.TAN:
            case MySQLParser.TIMEDIFF:
            case MySQLParser.TIMESTAMPADD:
            case MySQLParser.TIMESTAMPDIFF:
            case MySQLParser.TIME_FORMAT:
            case MySQLParser.TIME_TO_SEC:
            case MySQLParser.TOUCHES:
            case MySQLParser.TO_BASE64:
            case MySQLParser.TO_DAYS:
            case MySQLParser.TO_SECONDS:
            case MySQLParser.UCASE:
            case MySQLParser.UNCOMPRESS:
            case MySQLParser.UNCOMPRESSED_LENGTH:
            case MySQLParser.UNHEX:
            case MySQLParser.UNIX_TIMESTAMP:
            case MySQLParser.UPDATEXML:
            case MySQLParser.UPPER:
            case MySQLParser.UUID:
            case MySQLParser.UUID_SHORT:
            case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
            case MySQLParser.VERSION:
            case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySQLParser.WEEKDAY:
            case MySQLParser.WEEKOFYEAR:
            case MySQLParser.WEIGHT_STRING:
            case MySQLParser.WITHIN:
            case MySQLParser.YEARWEEK:
            case MySQLParser.Y_FUNCTION:
            case MySQLParser.X_FUNCTION:
            case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySQLParser.STRING_LITERAL:
            case MySQLParser.ID:
            case MySQLParser.REVERSE_QUOTE_ID:
                this.state = 2586;
                this.uidList();
                break;
            case MySQLParser.ALL:
                this.state = 2587;
                this.match(MySQLParser.ALL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 41:
            localctx = new AlterByCheckPartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 41);
            this.state = 2590;
            this.match(MySQLParser.CHECK);
            this.state = 2591;
            this.match(MySQLParser.PARTITION);
            this.state = 2594;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.CURRENT:
            case MySQLParser.DATABASE:
            case MySQLParser.DIAGNOSTICS:
            case MySQLParser.LEFT:
            case MySQLParser.NUMBER:
            case MySQLParser.RIGHT:
            case MySQLParser.STACKED:
            case MySQLParser.DATE:
            case MySQLParser.TIME:
            case MySQLParser.TIMESTAMP:
            case MySQLParser.DATETIME:
            case MySQLParser.YEAR:
            case MySQLParser.TEXT:
            case MySQLParser.ENUM:
            case MySQLParser.SERIAL:
            case MySQLParser.JSON_VALID:
            case MySQLParser.JSON_SCHEMA_VALID:
            case MySQLParser.COUNT:
            case MySQLParser.POSITION:
            case MySQLParser.ACCOUNT:
            case MySQLParser.ACTION:
            case MySQLParser.AFTER:
            case MySQLParser.AGGREGATE:
            case MySQLParser.ALGORITHM:
            case MySQLParser.ANY:
            case MySQLParser.AT:
            case MySQLParser.AUTHORS:
            case MySQLParser.AUTOCOMMIT:
            case MySQLParser.AUTOEXTEND_SIZE:
            case MySQLParser.AUTO_INCREMENT:
            case MySQLParser.AVG_ROW_LENGTH:
            case MySQLParser.BEGIN:
            case MySQLParser.BINLOG:
            case MySQLParser.BIT:
            case MySQLParser.BLOCK:
            case MySQLParser.BOOL:
            case MySQLParser.BOOLEAN:
            case MySQLParser.BTREE:
            case MySQLParser.CACHE:
            case MySQLParser.CASCADED:
            case MySQLParser.CHAIN:
            case MySQLParser.CHANGED:
            case MySQLParser.CHANNEL:
            case MySQLParser.CHECKSUM:
            case MySQLParser.PAGE_CHECKSUM:
            case MySQLParser.CIPHER:
            case MySQLParser.CLASS_ORIGIN:
            case MySQLParser.CLIENT:
            case MySQLParser.CLOSE:
            case MySQLParser.COALESCE:
            case MySQLParser.CODE:
            case MySQLParser.COLUMNS:
            case MySQLParser.COLUMN_FORMAT:
            case MySQLParser.COLUMN_NAME:
            case MySQLParser.COMMENT:
            case MySQLParser.COMMIT:
            case MySQLParser.COMPACT:
            case MySQLParser.COMPLETION:
            case MySQLParser.COMPRESSED:
            case MySQLParser.COMPRESSION:
            case MySQLParser.CONCURRENT:
            case MySQLParser.CONNECTION:
            case MySQLParser.CONSISTENT:
            case MySQLParser.CONSTRAINT_CATALOG:
            case MySQLParser.CONSTRAINT_SCHEMA:
            case MySQLParser.CONSTRAINT_NAME:
            case MySQLParser.CONTAINS:
            case MySQLParser.CONTEXT:
            case MySQLParser.CONTRIBUTORS:
            case MySQLParser.COPY:
            case MySQLParser.CPU:
            case MySQLParser.CURSOR_NAME:
            case MySQLParser.DATA:
            case MySQLParser.DATAFILE:
            case MySQLParser.DEALLOCATE:
            case MySQLParser.DEFAULT_AUTH:
            case MySQLParser.DEFINER:
            case MySQLParser.DELAY_KEY_WRITE:
            case MySQLParser.DES_KEY_FILE:
            case MySQLParser.DIRECTORY:
            case MySQLParser.DISABLE:
            case MySQLParser.DISCARD:
            case MySQLParser.DISK:
            case MySQLParser.DO:
            case MySQLParser.DUMPFILE:
            case MySQLParser.DUPLICATE:
            case MySQLParser.DYNAMIC:
            case MySQLParser.ENABLE:
            case MySQLParser.ENCRYPTION:
            case MySQLParser.END:
            case MySQLParser.ENDS:
            case MySQLParser.ENGINE:
            case MySQLParser.ENGINES:
            case MySQLParser.ERROR:
            case MySQLParser.ERRORS:
            case MySQLParser.ESCAPE:
            case MySQLParser.EVEN:
            case MySQLParser.EVENT:
            case MySQLParser.EVENTS:
            case MySQLParser.EVERY:
            case MySQLParser.EXCHANGE:
            case MySQLParser.EXCLUSIVE:
            case MySQLParser.EXPIRE:
            case MySQLParser.EXPORT:
            case MySQLParser.EXTENDED:
            case MySQLParser.EXTENT_SIZE:
            case MySQLParser.FAST:
            case MySQLParser.FAULTS:
            case MySQLParser.FIELDS:
            case MySQLParser.FILE_BLOCK_SIZE:
            case MySQLParser.FILTER:
            case MySQLParser.FIRST:
            case MySQLParser.FIXED:
            case MySQLParser.FLUSH:
            case MySQLParser.FOLLOWS:
            case MySQLParser.FOUND:
            case MySQLParser.FULL:
            case MySQLParser.FUNCTION:
            case MySQLParser.GENERAL:
            case MySQLParser.GLOBAL:
            case MySQLParser.GRANTS:
            case MySQLParser.GROUP_REPLICATION:
            case MySQLParser.HANDLER:
            case MySQLParser.HASH:
            case MySQLParser.HELP:
            case MySQLParser.HOST:
            case MySQLParser.HOSTS:
            case MySQLParser.IDENTIFIED:
            case MySQLParser.IGNORE_SERVER_IDS:
            case MySQLParser.IMPORT:
            case MySQLParser.INDEXES:
            case MySQLParser.INITIAL_SIZE:
            case MySQLParser.INPLACE:
            case MySQLParser.INSERT_METHOD:
            case MySQLParser.INSTALL:
            case MySQLParser.INSTANCE:
            case MySQLParser.INVISIBLE:
            case MySQLParser.INVOKER:
            case MySQLParser.IO:
            case MySQLParser.IO_THREAD:
            case MySQLParser.IPC:
            case MySQLParser.ISOLATION:
            case MySQLParser.ISSUER:
            case MySQLParser.JSON:
            case MySQLParser.KEY_BLOCK_SIZE:
            case MySQLParser.LANGUAGE:
            case MySQLParser.LAST:
            case MySQLParser.LEAVES:
            case MySQLParser.LESS:
            case MySQLParser.LEVEL:
            case MySQLParser.LIST:
            case MySQLParser.LOCAL:
            case MySQLParser.LOGFILE:
            case MySQLParser.LOGS:
            case MySQLParser.MASTER:
            case MySQLParser.MASTER_AUTO_POSITION:
            case MySQLParser.MASTER_CONNECT_RETRY:
            case MySQLParser.MASTER_DELAY:
            case MySQLParser.MASTER_HEARTBEAT_PERIOD:
            case MySQLParser.MASTER_HOST:
            case MySQLParser.MASTER_LOG_FILE:
            case MySQLParser.MASTER_LOG_POS:
            case MySQLParser.MASTER_PASSWORD:
            case MySQLParser.MASTER_PORT:
            case MySQLParser.MASTER_RETRY_COUNT:
            case MySQLParser.MASTER_SSL:
            case MySQLParser.MASTER_SSL_CA:
            case MySQLParser.MASTER_SSL_CAPATH:
            case MySQLParser.MASTER_SSL_CERT:
            case MySQLParser.MASTER_SSL_CIPHER:
            case MySQLParser.MASTER_SSL_CRL:
            case MySQLParser.MASTER_SSL_CRLPATH:
            case MySQLParser.MASTER_SSL_KEY:
            case MySQLParser.MASTER_TLS_VERSION:
            case MySQLParser.MASTER_USER:
            case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
            case MySQLParser.MAX_QUERIES_PER_HOUR:
            case MySQLParser.MAX_ROWS:
            case MySQLParser.MAX_SIZE:
            case MySQLParser.MAX_UPDATES_PER_HOUR:
            case MySQLParser.MAX_USER_CONNECTIONS:
            case MySQLParser.MEDIUM:
            case MySQLParser.MERGE:
            case MySQLParser.MESSAGE_TEXT:
            case MySQLParser.MID:
            case MySQLParser.MIGRATE:
            case MySQLParser.MIN_ROWS:
            case MySQLParser.MODE:
            case MySQLParser.MODIFY:
            case MySQLParser.MUTEX:
            case MySQLParser.MYSQL:
            case MySQLParser.MYSQL_ERRNO:
            case MySQLParser.NAME:
            case MySQLParser.NAMES:
            case MySQLParser.NCHAR:
            case MySQLParser.NEVER:
            case MySQLParser.NEXT:
            case MySQLParser.NO:
            case MySQLParser.NODEGROUP:
            case MySQLParser.NONE:
            case MySQLParser.OFFLINE:
            case MySQLParser.OFFSET:
            case MySQLParser.OJ:
            case MySQLParser.OLD_PASSWORD:
            case MySQLParser.ONE:
            case MySQLParser.ONLINE:
            case MySQLParser.ONLY:
            case MySQLParser.OPEN:
            case MySQLParser.OPTIMIZER_COSTS:
            case MySQLParser.OPTIONS:
            case MySQLParser.OWNER:
            case MySQLParser.PACK_KEYS:
            case MySQLParser.PAGE:
            case MySQLParser.PARSER:
            case MySQLParser.PARTIAL:
            case MySQLParser.PARTITIONING:
            case MySQLParser.PARTITIONS:
            case MySQLParser.PASSWORD:
            case MySQLParser.PHASE:
            case MySQLParser.PLUGIN:
            case MySQLParser.PLUGIN_DIR:
            case MySQLParser.PLUGINS:
            case MySQLParser.PORT:
            case MySQLParser.PRECEDES:
            case MySQLParser.PREPARE:
            case MySQLParser.PRESERVE:
            case MySQLParser.PREV:
            case MySQLParser.PROCESSLIST:
            case MySQLParser.PROFILE:
            case MySQLParser.PROFILES:
            case MySQLParser.PROXY:
            case MySQLParser.QUERY:
            case MySQLParser.QUICK:
            case MySQLParser.REBUILD:
            case MySQLParser.RECOVER:
            case MySQLParser.REDO_BUFFER_SIZE:
            case MySQLParser.REDUNDANT:
            case MySQLParser.RELAY:
            case MySQLParser.RELAY_LOG_FILE:
            case MySQLParser.RELAY_LOG_POS:
            case MySQLParser.RELAYLOG:
            case MySQLParser.REMOVE:
            case MySQLParser.REORGANIZE:
            case MySQLParser.REPAIR:
            case MySQLParser.REPLICATE_DO_DB:
            case MySQLParser.REPLICATE_DO_TABLE:
            case MySQLParser.REPLICATE_IGNORE_DB:
            case MySQLParser.REPLICATE_IGNORE_TABLE:
            case MySQLParser.REPLICATE_REWRITE_DB:
            case MySQLParser.REPLICATE_WILD_DO_TABLE:
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySQLParser.REPLICATION:
            case MySQLParser.RESET:
            case MySQLParser.RESUME:
            case MySQLParser.RETURNED_SQLSTATE:
            case MySQLParser.RETURNS:
            case MySQLParser.ROLE:
            case MySQLParser.ROLLBACK:
            case MySQLParser.ROLLUP:
            case MySQLParser.ROTATE:
            case MySQLParser.ROW:
            case MySQLParser.ROWS:
            case MySQLParser.ROW_FORMAT:
            case MySQLParser.SAVEPOINT:
            case MySQLParser.SCHEDULE:
            case MySQLParser.SECURITY:
            case MySQLParser.SERVER:
            case MySQLParser.SESSION:
            case MySQLParser.SHARE:
            case MySQLParser.SHARED:
            case MySQLParser.SIGNED:
            case MySQLParser.SIMPLE:
            case MySQLParser.SLAVE:
            case MySQLParser.SLOW:
            case MySQLParser.SNAPSHOT:
            case MySQLParser.SOCKET:
            case MySQLParser.SOME:
            case MySQLParser.SONAME:
            case MySQLParser.SOUNDS:
            case MySQLParser.SOURCE:
            case MySQLParser.SQL_AFTER_GTIDS:
            case MySQLParser.SQL_AFTER_MTS_GAPS:
            case MySQLParser.SQL_BEFORE_GTIDS:
            case MySQLParser.SQL_BUFFER_RESULT:
            case MySQLParser.SQL_CACHE:
            case MySQLParser.SQL_NO_CACHE:
            case MySQLParser.SQL_THREAD:
            case MySQLParser.START:
            case MySQLParser.STARTS:
            case MySQLParser.STATS_AUTO_RECALC:
            case MySQLParser.STATS_PERSISTENT:
            case MySQLParser.STATS_SAMPLE_PAGES:
            case MySQLParser.STATUS:
            case MySQLParser.STOP:
            case MySQLParser.STORAGE:
            case MySQLParser.STRING:
            case MySQLParser.SUBCLASS_ORIGIN:
            case MySQLParser.SUBJECT:
            case MySQLParser.SUBPARTITION:
            case MySQLParser.SUBPARTITIONS:
            case MySQLParser.SUSPEND:
            case MySQLParser.SWAPS:
            case MySQLParser.SWITCHES:
            case MySQLParser.TABLE_NAME:
            case MySQLParser.TABLESPACE:
            case MySQLParser.TEMPORARY:
            case MySQLParser.TEMPTABLE:
            case MySQLParser.THAN:
            case MySQLParser.TRADITIONAL:
            case MySQLParser.TRANSACTION:
            case MySQLParser.TRANSACTIONAL:
            case MySQLParser.TRIGGERS:
            case MySQLParser.TRUNCATE:
            case MySQLParser.UNDEFINED:
            case MySQLParser.UNDOFILE:
            case MySQLParser.UNDO_BUFFER_SIZE:
            case MySQLParser.UNINSTALL:
            case MySQLParser.UNKNOWN:
            case MySQLParser.UNTIL:
            case MySQLParser.UPGRADE:
            case MySQLParser.USER:
            case MySQLParser.USE_FRM:
            case MySQLParser.USER_RESOURCES:
            case MySQLParser.VALIDATION:
            case MySQLParser.VALUE:
            case MySQLParser.VARIABLES:
            case MySQLParser.VIEW:
            case MySQLParser.VISIBLE:
            case MySQLParser.WAIT:
            case MySQLParser.WARNINGS:
            case MySQLParser.WITHOUT:
            case MySQLParser.WORK:
            case MySQLParser.WRAPPER:
            case MySQLParser.X509:
            case MySQLParser.XA:
            case MySQLParser.XML:
            case MySQLParser.INTERNAL:
            case MySQLParser.QUARTER:
            case MySQLParser.MONTH:
            case MySQLParser.DAY:
            case MySQLParser.HOUR:
            case MySQLParser.MINUTE:
            case MySQLParser.WEEK:
            case MySQLParser.SECOND:
            case MySQLParser.MICROSECOND:
            case MySQLParser.TABLES:
            case MySQLParser.ROUTINE:
            case MySQLParser.EXECUTE:
            case MySQLParser.FILE:
            case MySQLParser.PROCESS:
            case MySQLParser.RELOAD:
            case MySQLParser.SHUTDOWN:
            case MySQLParser.SUPER:
            case MySQLParser.PRIVILEGES:
            case MySQLParser.AUDIT_ADMIN:
            case MySQLParser.BACKUP_ADMIN:
            case MySQLParser.BINLOG_ADMIN:
            case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
            case MySQLParser.CLONE_ADMIN:
            case MySQLParser.CONNECTION_ADMIN:
            case MySQLParser.ENCRYPTION_KEY_ADMIN:
            case MySQLParser.FIREWALL_ADMIN:
            case MySQLParser.FIREWALL_USER:
            case MySQLParser.GROUP_REPLICATION_ADMIN:
            case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
            case MySQLParser.NDB_STORED_USER:
            case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySQLParser.REPLICATION_APPLIER:
            case MySQLParser.REPLICATION_SLAVE_ADMIN:
            case MySQLParser.RESOURCE_GROUP_ADMIN:
            case MySQLParser.RESOURCE_GROUP_USER:
            case MySQLParser.ROLE_ADMIN:
            case MySQLParser.SESSION_VARIABLES_ADMIN:
            case MySQLParser.SET_USER_ID:
            case MySQLParser.SHOW_ROUTINE:
            case MySQLParser.SYSTEM_VARIABLES_ADMIN:
            case MySQLParser.TABLE_ENCRYPTION_ADMIN:
            case MySQLParser.VERSION_TOKEN_ADMIN:
            case MySQLParser.XA_RECOVER_ADMIN:
            case MySQLParser.ARMSCII8:
            case MySQLParser.ASCII:
            case MySQLParser.BIG5:
            case MySQLParser.CP1250:
            case MySQLParser.CP1251:
            case MySQLParser.CP1256:
            case MySQLParser.CP1257:
            case MySQLParser.CP850:
            case MySQLParser.CP852:
            case MySQLParser.CP866:
            case MySQLParser.CP932:
            case MySQLParser.DEC8:
            case MySQLParser.EUCJPMS:
            case MySQLParser.EUCKR:
            case MySQLParser.GB2312:
            case MySQLParser.GBK:
            case MySQLParser.GEOSTD8:
            case MySQLParser.GREEK:
            case MySQLParser.HEBREW:
            case MySQLParser.HP8:
            case MySQLParser.KEYBCS2:
            case MySQLParser.KOI8R:
            case MySQLParser.KOI8U:
            case MySQLParser.LATIN1:
            case MySQLParser.LATIN2:
            case MySQLParser.LATIN5:
            case MySQLParser.LATIN7:
            case MySQLParser.MACCE:
            case MySQLParser.MACROMAN:
            case MySQLParser.SJIS:
            case MySQLParser.SWE7:
            case MySQLParser.TIS620:
            case MySQLParser.UCS2:
            case MySQLParser.UJIS:
            case MySQLParser.UTF16:
            case MySQLParser.UTF16LE:
            case MySQLParser.UTF32:
            case MySQLParser.UTF8:
            case MySQLParser.UTF8MB3:
            case MySQLParser.UTF8MB4:
            case MySQLParser.ARCHIVE:
            case MySQLParser.BLACKHOLE:
            case MySQLParser.CSV:
            case MySQLParser.FEDERATED:
            case MySQLParser.INNODB:
            case MySQLParser.MEMORY:
            case MySQLParser.MRG_MYISAM:
            case MySQLParser.MYISAM:
            case MySQLParser.NDB:
            case MySQLParser.NDBCLUSTER:
            case MySQLParser.PERFORMANCE_SCHEMA:
            case MySQLParser.TOKUDB:
            case MySQLParser.REPEATABLE:
            case MySQLParser.COMMITTED:
            case MySQLParser.UNCOMMITTED:
            case MySQLParser.SERIALIZABLE:
            case MySQLParser.GEOMETRYCOLLECTION:
            case MySQLParser.LINESTRING:
            case MySQLParser.MULTILINESTRING:
            case MySQLParser.MULTIPOINT:
            case MySQLParser.MULTIPOLYGON:
            case MySQLParser.POINT:
            case MySQLParser.POLYGON:
            case MySQLParser.ABS:
            case MySQLParser.ACOS:
            case MySQLParser.ADDDATE:
            case MySQLParser.ADDTIME:
            case MySQLParser.AES_DECRYPT:
            case MySQLParser.AES_ENCRYPT:
            case MySQLParser.AREA:
            case MySQLParser.ASBINARY:
            case MySQLParser.ASIN:
            case MySQLParser.ASTEXT:
            case MySQLParser.ASWKB:
            case MySQLParser.ASWKT:
            case MySQLParser.ASYMMETRIC_DECRYPT:
            case MySQLParser.ASYMMETRIC_DERIVE:
            case MySQLParser.ASYMMETRIC_ENCRYPT:
            case MySQLParser.ASYMMETRIC_SIGN:
            case MySQLParser.ASYMMETRIC_VERIFY:
            case MySQLParser.ATAN:
            case MySQLParser.ATAN2:
            case MySQLParser.BENCHMARK:
            case MySQLParser.BIN:
            case MySQLParser.BIT_COUNT:
            case MySQLParser.BIT_LENGTH:
            case MySQLParser.BUFFER:
            case MySQLParser.CATALOG_NAME:
            case MySQLParser.CEIL:
            case MySQLParser.CEILING:
            case MySQLParser.CENTROID:
            case MySQLParser.CHARACTER_LENGTH:
            case MySQLParser.CHARSET:
            case MySQLParser.CHAR_LENGTH:
            case MySQLParser.COERCIBILITY:
            case MySQLParser.COLLATION:
            case MySQLParser.COMPRESS:
            case MySQLParser.CONCAT:
            case MySQLParser.CONCAT_WS:
            case MySQLParser.CONNECTION_ID:
            case MySQLParser.CONV:
            case MySQLParser.CONVERT_TZ:
            case MySQLParser.COS:
            case MySQLParser.COT:
            case MySQLParser.CRC32:
            case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySQLParser.CREATE_DH_PARAMETERS:
            case MySQLParser.CREATE_DIGEST:
            case MySQLParser.CROSSES:
            case MySQLParser.DATEDIFF:
            case MySQLParser.DATE_FORMAT:
            case MySQLParser.DAYNAME:
            case MySQLParser.DAYOFMONTH:
            case MySQLParser.DAYOFWEEK:
            case MySQLParser.DAYOFYEAR:
            case MySQLParser.DECODE:
            case MySQLParser.DEGREES:
            case MySQLParser.DES_DECRYPT:
            case MySQLParser.DES_ENCRYPT:
            case MySQLParser.DIMENSION:
            case MySQLParser.DISJOINT:
            case MySQLParser.ELT:
            case MySQLParser.ENCODE:
            case MySQLParser.ENCRYPT:
            case MySQLParser.ENDPOINT:
            case MySQLParser.ENVELOPE:
            case MySQLParser.EQUALS:
            case MySQLParser.EXP:
            case MySQLParser.EXPORT_SET:
            case MySQLParser.EXTERIORRING:
            case MySQLParser.EXTRACTVALUE:
            case MySQLParser.FIELD:
            case MySQLParser.FIND_IN_SET:
            case MySQLParser.FLOOR:
            case MySQLParser.FORMAT:
            case MySQLParser.FOUND_ROWS:
            case MySQLParser.FROM_BASE64:
            case MySQLParser.FROM_DAYS:
            case MySQLParser.FROM_UNIXTIME:
            case MySQLParser.GEOMCOLLFROMTEXT:
            case MySQLParser.GEOMCOLLFROMWKB:
            case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.GEOMETRYFROMTEXT:
            case MySQLParser.GEOMETRYFROMWKB:
            case MySQLParser.GEOMETRYN:
            case MySQLParser.GEOMETRYTYPE:
            case MySQLParser.GEOMFROMTEXT:
            case MySQLParser.GEOMFROMWKB:
            case MySQLParser.GET_FORMAT:
            case MySQLParser.GET_LOCK:
            case MySQLParser.GLENGTH:
            case MySQLParser.GREATEST:
            case MySQLParser.GTID_SUBSET:
            case MySQLParser.GTID_SUBTRACT:
            case MySQLParser.HEX:
            case MySQLParser.IFNULL:
            case MySQLParser.INET6_ATON:
            case MySQLParser.INET6_NTOA:
            case MySQLParser.INET_ATON:
            case MySQLParser.INET_NTOA:
            case MySQLParser.INSTR:
            case MySQLParser.INTERIORRINGN:
            case MySQLParser.INTERSECTS:
            case MySQLParser.ISCLOSED:
            case MySQLParser.ISEMPTY:
            case MySQLParser.ISNULL:
            case MySQLParser.ISSIMPLE:
            case MySQLParser.IS_FREE_LOCK:
            case MySQLParser.IS_IPV4:
            case MySQLParser.IS_IPV4_COMPAT:
            case MySQLParser.IS_IPV4_MAPPED:
            case MySQLParser.IS_IPV6:
            case MySQLParser.IS_USED_LOCK:
            case MySQLParser.LAST_INSERT_ID:
            case MySQLParser.LCASE:
            case MySQLParser.LEAST:
            case MySQLParser.LENGTH:
            case MySQLParser.LINEFROMTEXT:
            case MySQLParser.LINEFROMWKB:
            case MySQLParser.LINESTRINGFROMTEXT:
            case MySQLParser.LINESTRINGFROMWKB:
            case MySQLParser.LN:
            case MySQLParser.LOAD_FILE:
            case MySQLParser.LOCATE:
            case MySQLParser.LOG:
            case MySQLParser.LOG10:
            case MySQLParser.LOG2:
            case MySQLParser.LOWER:
            case MySQLParser.LPAD:
            case MySQLParser.LTRIM:
            case MySQLParser.MAKEDATE:
            case MySQLParser.MAKETIME:
            case MySQLParser.MAKE_SET:
            case MySQLParser.MASTER_POS_WAIT:
            case MySQLParser.MBRCONTAINS:
            case MySQLParser.MBRDISJOINT:
            case MySQLParser.MBREQUAL:
            case MySQLParser.MBRINTERSECTS:
            case MySQLParser.MBROVERLAPS:
            case MySQLParser.MBRTOUCHES:
            case MySQLParser.MBRWITHIN:
            case MySQLParser.MD5:
            case MySQLParser.MLINEFROMTEXT:
            case MySQLParser.MLINEFROMWKB:
            case MySQLParser.MONTHNAME:
            case MySQLParser.MPOINTFROMTEXT:
            case MySQLParser.MPOINTFROMWKB:
            case MySQLParser.MPOLYFROMTEXT:
            case MySQLParser.MPOLYFROMWKB:
            case MySQLParser.MULTILINESTRINGFROMTEXT:
            case MySQLParser.MULTILINESTRINGFROMWKB:
            case MySQLParser.MULTIPOINTFROMTEXT:
            case MySQLParser.MULTIPOINTFROMWKB:
            case MySQLParser.MULTIPOLYGONFROMTEXT:
            case MySQLParser.MULTIPOLYGONFROMWKB:
            case MySQLParser.NAME_CONST:
            case MySQLParser.NULLIF:
            case MySQLParser.NUMGEOMETRIES:
            case MySQLParser.NUMINTERIORRINGS:
            case MySQLParser.NUMPOINTS:
            case MySQLParser.OCT:
            case MySQLParser.OCTET_LENGTH:
            case MySQLParser.ORD:
            case MySQLParser.OVERLAPS:
            case MySQLParser.PERIOD_ADD:
            case MySQLParser.PERIOD_DIFF:
            case MySQLParser.PI:
            case MySQLParser.POINTFROMTEXT:
            case MySQLParser.POINTFROMWKB:
            case MySQLParser.POINTN:
            case MySQLParser.POLYFROMTEXT:
            case MySQLParser.POLYFROMWKB:
            case MySQLParser.POLYGONFROMTEXT:
            case MySQLParser.POLYGONFROMWKB:
            case MySQLParser.POW:
            case MySQLParser.POWER:
            case MySQLParser.QUOTE:
            case MySQLParser.RADIANS:
            case MySQLParser.RAND:
            case MySQLParser.RANDOM_BYTES:
            case MySQLParser.RELEASE_LOCK:
            case MySQLParser.REVERSE:
            case MySQLParser.ROUND:
            case MySQLParser.ROW_COUNT:
            case MySQLParser.RPAD:
            case MySQLParser.RTRIM:
            case MySQLParser.SEC_TO_TIME:
            case MySQLParser.SESSION_USER:
            case MySQLParser.SHA:
            case MySQLParser.SHA1:
            case MySQLParser.SHA2:
            case MySQLParser.SCHEMA_NAME:
            case MySQLParser.SIGN:
            case MySQLParser.SIN:
            case MySQLParser.SLEEP:
            case MySQLParser.SOUNDEX:
            case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySQLParser.SQRT:
            case MySQLParser.SRID:
            case MySQLParser.STARTPOINT:
            case MySQLParser.STRCMP:
            case MySQLParser.STR_TO_DATE:
            case MySQLParser.ST_AREA:
            case MySQLParser.ST_ASBINARY:
            case MySQLParser.ST_ASTEXT:
            case MySQLParser.ST_ASWKB:
            case MySQLParser.ST_ASWKT:
            case MySQLParser.ST_BUFFER:
            case MySQLParser.ST_CENTROID:
            case MySQLParser.ST_CONTAINS:
            case MySQLParser.ST_CROSSES:
            case MySQLParser.ST_DIFFERENCE:
            case MySQLParser.ST_DIMENSION:
            case MySQLParser.ST_DISJOINT:
            case MySQLParser.ST_DISTANCE:
            case MySQLParser.ST_ENDPOINT:
            case MySQLParser.ST_ENVELOPE:
            case MySQLParser.ST_EQUALS:
            case MySQLParser.ST_EXTERIORRING:
            case MySQLParser.ST_GEOMCOLLFROMTEXT:
            case MySQLParser.ST_GEOMCOLLFROMTXT:
            case MySQLParser.ST_GEOMCOLLFROMWKB:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.ST_GEOMETRYFROMTEXT:
            case MySQLParser.ST_GEOMETRYFROMWKB:
            case MySQLParser.ST_GEOMETRYN:
            case MySQLParser.ST_GEOMETRYTYPE:
            case MySQLParser.ST_GEOMFROMTEXT:
            case MySQLParser.ST_GEOMFROMWKB:
            case MySQLParser.ST_INTERIORRINGN:
            case MySQLParser.ST_INTERSECTION:
            case MySQLParser.ST_INTERSECTS:
            case MySQLParser.ST_ISCLOSED:
            case MySQLParser.ST_ISEMPTY:
            case MySQLParser.ST_ISSIMPLE:
            case MySQLParser.ST_LINEFROMTEXT:
            case MySQLParser.ST_LINEFROMWKB:
            case MySQLParser.ST_LINESTRINGFROMTEXT:
            case MySQLParser.ST_LINESTRINGFROMWKB:
            case MySQLParser.ST_NUMGEOMETRIES:
            case MySQLParser.ST_NUMINTERIORRING:
            case MySQLParser.ST_NUMINTERIORRINGS:
            case MySQLParser.ST_NUMPOINTS:
            case MySQLParser.ST_OVERLAPS:
            case MySQLParser.ST_POINTFROMTEXT:
            case MySQLParser.ST_POINTFROMWKB:
            case MySQLParser.ST_POINTN:
            case MySQLParser.ST_POLYFROMTEXT:
            case MySQLParser.ST_POLYFROMWKB:
            case MySQLParser.ST_POLYGONFROMTEXT:
            case MySQLParser.ST_POLYGONFROMWKB:
            case MySQLParser.ST_SRID:
            case MySQLParser.ST_STARTPOINT:
            case MySQLParser.ST_SYMDIFFERENCE:
            case MySQLParser.ST_TOUCHES:
            case MySQLParser.ST_UNION:
            case MySQLParser.ST_WITHIN:
            case MySQLParser.ST_X:
            case MySQLParser.ST_Y:
            case MySQLParser.SUBDATE:
            case MySQLParser.SUBSTRING_INDEX:
            case MySQLParser.SUBTIME:
            case MySQLParser.SYSTEM_USER:
            case MySQLParser.TAN:
            case MySQLParser.TIMEDIFF:
            case MySQLParser.TIMESTAMPADD:
            case MySQLParser.TIMESTAMPDIFF:
            case MySQLParser.TIME_FORMAT:
            case MySQLParser.TIME_TO_SEC:
            case MySQLParser.TOUCHES:
            case MySQLParser.TO_BASE64:
            case MySQLParser.TO_DAYS:
            case MySQLParser.TO_SECONDS:
            case MySQLParser.UCASE:
            case MySQLParser.UNCOMPRESS:
            case MySQLParser.UNCOMPRESSED_LENGTH:
            case MySQLParser.UNHEX:
            case MySQLParser.UNIX_TIMESTAMP:
            case MySQLParser.UPDATEXML:
            case MySQLParser.UPPER:
            case MySQLParser.UUID:
            case MySQLParser.UUID_SHORT:
            case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
            case MySQLParser.VERSION:
            case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySQLParser.WEEKDAY:
            case MySQLParser.WEEKOFYEAR:
            case MySQLParser.WEIGHT_STRING:
            case MySQLParser.WITHIN:
            case MySQLParser.YEARWEEK:
            case MySQLParser.Y_FUNCTION:
            case MySQLParser.X_FUNCTION:
            case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySQLParser.STRING_LITERAL:
            case MySQLParser.ID:
            case MySQLParser.REVERSE_QUOTE_ID:
                this.state = 2592;
                this.uidList();
                break;
            case MySQLParser.ALL:
                this.state = 2593;
                this.match(MySQLParser.ALL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 42:
            localctx = new AlterByOptimizePartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 42);
            this.state = 2596;
            this.match(MySQLParser.OPTIMIZE);
            this.state = 2597;
            this.match(MySQLParser.PARTITION);
            this.state = 2600;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.CURRENT:
            case MySQLParser.DATABASE:
            case MySQLParser.DIAGNOSTICS:
            case MySQLParser.LEFT:
            case MySQLParser.NUMBER:
            case MySQLParser.RIGHT:
            case MySQLParser.STACKED:
            case MySQLParser.DATE:
            case MySQLParser.TIME:
            case MySQLParser.TIMESTAMP:
            case MySQLParser.DATETIME:
            case MySQLParser.YEAR:
            case MySQLParser.TEXT:
            case MySQLParser.ENUM:
            case MySQLParser.SERIAL:
            case MySQLParser.JSON_VALID:
            case MySQLParser.JSON_SCHEMA_VALID:
            case MySQLParser.COUNT:
            case MySQLParser.POSITION:
            case MySQLParser.ACCOUNT:
            case MySQLParser.ACTION:
            case MySQLParser.AFTER:
            case MySQLParser.AGGREGATE:
            case MySQLParser.ALGORITHM:
            case MySQLParser.ANY:
            case MySQLParser.AT:
            case MySQLParser.AUTHORS:
            case MySQLParser.AUTOCOMMIT:
            case MySQLParser.AUTOEXTEND_SIZE:
            case MySQLParser.AUTO_INCREMENT:
            case MySQLParser.AVG_ROW_LENGTH:
            case MySQLParser.BEGIN:
            case MySQLParser.BINLOG:
            case MySQLParser.BIT:
            case MySQLParser.BLOCK:
            case MySQLParser.BOOL:
            case MySQLParser.BOOLEAN:
            case MySQLParser.BTREE:
            case MySQLParser.CACHE:
            case MySQLParser.CASCADED:
            case MySQLParser.CHAIN:
            case MySQLParser.CHANGED:
            case MySQLParser.CHANNEL:
            case MySQLParser.CHECKSUM:
            case MySQLParser.PAGE_CHECKSUM:
            case MySQLParser.CIPHER:
            case MySQLParser.CLASS_ORIGIN:
            case MySQLParser.CLIENT:
            case MySQLParser.CLOSE:
            case MySQLParser.COALESCE:
            case MySQLParser.CODE:
            case MySQLParser.COLUMNS:
            case MySQLParser.COLUMN_FORMAT:
            case MySQLParser.COLUMN_NAME:
            case MySQLParser.COMMENT:
            case MySQLParser.COMMIT:
            case MySQLParser.COMPACT:
            case MySQLParser.COMPLETION:
            case MySQLParser.COMPRESSED:
            case MySQLParser.COMPRESSION:
            case MySQLParser.CONCURRENT:
            case MySQLParser.CONNECTION:
            case MySQLParser.CONSISTENT:
            case MySQLParser.CONSTRAINT_CATALOG:
            case MySQLParser.CONSTRAINT_SCHEMA:
            case MySQLParser.CONSTRAINT_NAME:
            case MySQLParser.CONTAINS:
            case MySQLParser.CONTEXT:
            case MySQLParser.CONTRIBUTORS:
            case MySQLParser.COPY:
            case MySQLParser.CPU:
            case MySQLParser.CURSOR_NAME:
            case MySQLParser.DATA:
            case MySQLParser.DATAFILE:
            case MySQLParser.DEALLOCATE:
            case MySQLParser.DEFAULT_AUTH:
            case MySQLParser.DEFINER:
            case MySQLParser.DELAY_KEY_WRITE:
            case MySQLParser.DES_KEY_FILE:
            case MySQLParser.DIRECTORY:
            case MySQLParser.DISABLE:
            case MySQLParser.DISCARD:
            case MySQLParser.DISK:
            case MySQLParser.DO:
            case MySQLParser.DUMPFILE:
            case MySQLParser.DUPLICATE:
            case MySQLParser.DYNAMIC:
            case MySQLParser.ENABLE:
            case MySQLParser.ENCRYPTION:
            case MySQLParser.END:
            case MySQLParser.ENDS:
            case MySQLParser.ENGINE:
            case MySQLParser.ENGINES:
            case MySQLParser.ERROR:
            case MySQLParser.ERRORS:
            case MySQLParser.ESCAPE:
            case MySQLParser.EVEN:
            case MySQLParser.EVENT:
            case MySQLParser.EVENTS:
            case MySQLParser.EVERY:
            case MySQLParser.EXCHANGE:
            case MySQLParser.EXCLUSIVE:
            case MySQLParser.EXPIRE:
            case MySQLParser.EXPORT:
            case MySQLParser.EXTENDED:
            case MySQLParser.EXTENT_SIZE:
            case MySQLParser.FAST:
            case MySQLParser.FAULTS:
            case MySQLParser.FIELDS:
            case MySQLParser.FILE_BLOCK_SIZE:
            case MySQLParser.FILTER:
            case MySQLParser.FIRST:
            case MySQLParser.FIXED:
            case MySQLParser.FLUSH:
            case MySQLParser.FOLLOWS:
            case MySQLParser.FOUND:
            case MySQLParser.FULL:
            case MySQLParser.FUNCTION:
            case MySQLParser.GENERAL:
            case MySQLParser.GLOBAL:
            case MySQLParser.GRANTS:
            case MySQLParser.GROUP_REPLICATION:
            case MySQLParser.HANDLER:
            case MySQLParser.HASH:
            case MySQLParser.HELP:
            case MySQLParser.HOST:
            case MySQLParser.HOSTS:
            case MySQLParser.IDENTIFIED:
            case MySQLParser.IGNORE_SERVER_IDS:
            case MySQLParser.IMPORT:
            case MySQLParser.INDEXES:
            case MySQLParser.INITIAL_SIZE:
            case MySQLParser.INPLACE:
            case MySQLParser.INSERT_METHOD:
            case MySQLParser.INSTALL:
            case MySQLParser.INSTANCE:
            case MySQLParser.INVISIBLE:
            case MySQLParser.INVOKER:
            case MySQLParser.IO:
            case MySQLParser.IO_THREAD:
            case MySQLParser.IPC:
            case MySQLParser.ISOLATION:
            case MySQLParser.ISSUER:
            case MySQLParser.JSON:
            case MySQLParser.KEY_BLOCK_SIZE:
            case MySQLParser.LANGUAGE:
            case MySQLParser.LAST:
            case MySQLParser.LEAVES:
            case MySQLParser.LESS:
            case MySQLParser.LEVEL:
            case MySQLParser.LIST:
            case MySQLParser.LOCAL:
            case MySQLParser.LOGFILE:
            case MySQLParser.LOGS:
            case MySQLParser.MASTER:
            case MySQLParser.MASTER_AUTO_POSITION:
            case MySQLParser.MASTER_CONNECT_RETRY:
            case MySQLParser.MASTER_DELAY:
            case MySQLParser.MASTER_HEARTBEAT_PERIOD:
            case MySQLParser.MASTER_HOST:
            case MySQLParser.MASTER_LOG_FILE:
            case MySQLParser.MASTER_LOG_POS:
            case MySQLParser.MASTER_PASSWORD:
            case MySQLParser.MASTER_PORT:
            case MySQLParser.MASTER_RETRY_COUNT:
            case MySQLParser.MASTER_SSL:
            case MySQLParser.MASTER_SSL_CA:
            case MySQLParser.MASTER_SSL_CAPATH:
            case MySQLParser.MASTER_SSL_CERT:
            case MySQLParser.MASTER_SSL_CIPHER:
            case MySQLParser.MASTER_SSL_CRL:
            case MySQLParser.MASTER_SSL_CRLPATH:
            case MySQLParser.MASTER_SSL_KEY:
            case MySQLParser.MASTER_TLS_VERSION:
            case MySQLParser.MASTER_USER:
            case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
            case MySQLParser.MAX_QUERIES_PER_HOUR:
            case MySQLParser.MAX_ROWS:
            case MySQLParser.MAX_SIZE:
            case MySQLParser.MAX_UPDATES_PER_HOUR:
            case MySQLParser.MAX_USER_CONNECTIONS:
            case MySQLParser.MEDIUM:
            case MySQLParser.MERGE:
            case MySQLParser.MESSAGE_TEXT:
            case MySQLParser.MID:
            case MySQLParser.MIGRATE:
            case MySQLParser.MIN_ROWS:
            case MySQLParser.MODE:
            case MySQLParser.MODIFY:
            case MySQLParser.MUTEX:
            case MySQLParser.MYSQL:
            case MySQLParser.MYSQL_ERRNO:
            case MySQLParser.NAME:
            case MySQLParser.NAMES:
            case MySQLParser.NCHAR:
            case MySQLParser.NEVER:
            case MySQLParser.NEXT:
            case MySQLParser.NO:
            case MySQLParser.NODEGROUP:
            case MySQLParser.NONE:
            case MySQLParser.OFFLINE:
            case MySQLParser.OFFSET:
            case MySQLParser.OJ:
            case MySQLParser.OLD_PASSWORD:
            case MySQLParser.ONE:
            case MySQLParser.ONLINE:
            case MySQLParser.ONLY:
            case MySQLParser.OPEN:
            case MySQLParser.OPTIMIZER_COSTS:
            case MySQLParser.OPTIONS:
            case MySQLParser.OWNER:
            case MySQLParser.PACK_KEYS:
            case MySQLParser.PAGE:
            case MySQLParser.PARSER:
            case MySQLParser.PARTIAL:
            case MySQLParser.PARTITIONING:
            case MySQLParser.PARTITIONS:
            case MySQLParser.PASSWORD:
            case MySQLParser.PHASE:
            case MySQLParser.PLUGIN:
            case MySQLParser.PLUGIN_DIR:
            case MySQLParser.PLUGINS:
            case MySQLParser.PORT:
            case MySQLParser.PRECEDES:
            case MySQLParser.PREPARE:
            case MySQLParser.PRESERVE:
            case MySQLParser.PREV:
            case MySQLParser.PROCESSLIST:
            case MySQLParser.PROFILE:
            case MySQLParser.PROFILES:
            case MySQLParser.PROXY:
            case MySQLParser.QUERY:
            case MySQLParser.QUICK:
            case MySQLParser.REBUILD:
            case MySQLParser.RECOVER:
            case MySQLParser.REDO_BUFFER_SIZE:
            case MySQLParser.REDUNDANT:
            case MySQLParser.RELAY:
            case MySQLParser.RELAY_LOG_FILE:
            case MySQLParser.RELAY_LOG_POS:
            case MySQLParser.RELAYLOG:
            case MySQLParser.REMOVE:
            case MySQLParser.REORGANIZE:
            case MySQLParser.REPAIR:
            case MySQLParser.REPLICATE_DO_DB:
            case MySQLParser.REPLICATE_DO_TABLE:
            case MySQLParser.REPLICATE_IGNORE_DB:
            case MySQLParser.REPLICATE_IGNORE_TABLE:
            case MySQLParser.REPLICATE_REWRITE_DB:
            case MySQLParser.REPLICATE_WILD_DO_TABLE:
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySQLParser.REPLICATION:
            case MySQLParser.RESET:
            case MySQLParser.RESUME:
            case MySQLParser.RETURNED_SQLSTATE:
            case MySQLParser.RETURNS:
            case MySQLParser.ROLE:
            case MySQLParser.ROLLBACK:
            case MySQLParser.ROLLUP:
            case MySQLParser.ROTATE:
            case MySQLParser.ROW:
            case MySQLParser.ROWS:
            case MySQLParser.ROW_FORMAT:
            case MySQLParser.SAVEPOINT:
            case MySQLParser.SCHEDULE:
            case MySQLParser.SECURITY:
            case MySQLParser.SERVER:
            case MySQLParser.SESSION:
            case MySQLParser.SHARE:
            case MySQLParser.SHARED:
            case MySQLParser.SIGNED:
            case MySQLParser.SIMPLE:
            case MySQLParser.SLAVE:
            case MySQLParser.SLOW:
            case MySQLParser.SNAPSHOT:
            case MySQLParser.SOCKET:
            case MySQLParser.SOME:
            case MySQLParser.SONAME:
            case MySQLParser.SOUNDS:
            case MySQLParser.SOURCE:
            case MySQLParser.SQL_AFTER_GTIDS:
            case MySQLParser.SQL_AFTER_MTS_GAPS:
            case MySQLParser.SQL_BEFORE_GTIDS:
            case MySQLParser.SQL_BUFFER_RESULT:
            case MySQLParser.SQL_CACHE:
            case MySQLParser.SQL_NO_CACHE:
            case MySQLParser.SQL_THREAD:
            case MySQLParser.START:
            case MySQLParser.STARTS:
            case MySQLParser.STATS_AUTO_RECALC:
            case MySQLParser.STATS_PERSISTENT:
            case MySQLParser.STATS_SAMPLE_PAGES:
            case MySQLParser.STATUS:
            case MySQLParser.STOP:
            case MySQLParser.STORAGE:
            case MySQLParser.STRING:
            case MySQLParser.SUBCLASS_ORIGIN:
            case MySQLParser.SUBJECT:
            case MySQLParser.SUBPARTITION:
            case MySQLParser.SUBPARTITIONS:
            case MySQLParser.SUSPEND:
            case MySQLParser.SWAPS:
            case MySQLParser.SWITCHES:
            case MySQLParser.TABLE_NAME:
            case MySQLParser.TABLESPACE:
            case MySQLParser.TEMPORARY:
            case MySQLParser.TEMPTABLE:
            case MySQLParser.THAN:
            case MySQLParser.TRADITIONAL:
            case MySQLParser.TRANSACTION:
            case MySQLParser.TRANSACTIONAL:
            case MySQLParser.TRIGGERS:
            case MySQLParser.TRUNCATE:
            case MySQLParser.UNDEFINED:
            case MySQLParser.UNDOFILE:
            case MySQLParser.UNDO_BUFFER_SIZE:
            case MySQLParser.UNINSTALL:
            case MySQLParser.UNKNOWN:
            case MySQLParser.UNTIL:
            case MySQLParser.UPGRADE:
            case MySQLParser.USER:
            case MySQLParser.USE_FRM:
            case MySQLParser.USER_RESOURCES:
            case MySQLParser.VALIDATION:
            case MySQLParser.VALUE:
            case MySQLParser.VARIABLES:
            case MySQLParser.VIEW:
            case MySQLParser.VISIBLE:
            case MySQLParser.WAIT:
            case MySQLParser.WARNINGS:
            case MySQLParser.WITHOUT:
            case MySQLParser.WORK:
            case MySQLParser.WRAPPER:
            case MySQLParser.X509:
            case MySQLParser.XA:
            case MySQLParser.XML:
            case MySQLParser.INTERNAL:
            case MySQLParser.QUARTER:
            case MySQLParser.MONTH:
            case MySQLParser.DAY:
            case MySQLParser.HOUR:
            case MySQLParser.MINUTE:
            case MySQLParser.WEEK:
            case MySQLParser.SECOND:
            case MySQLParser.MICROSECOND:
            case MySQLParser.TABLES:
            case MySQLParser.ROUTINE:
            case MySQLParser.EXECUTE:
            case MySQLParser.FILE:
            case MySQLParser.PROCESS:
            case MySQLParser.RELOAD:
            case MySQLParser.SHUTDOWN:
            case MySQLParser.SUPER:
            case MySQLParser.PRIVILEGES:
            case MySQLParser.AUDIT_ADMIN:
            case MySQLParser.BACKUP_ADMIN:
            case MySQLParser.BINLOG_ADMIN:
            case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
            case MySQLParser.CLONE_ADMIN:
            case MySQLParser.CONNECTION_ADMIN:
            case MySQLParser.ENCRYPTION_KEY_ADMIN:
            case MySQLParser.FIREWALL_ADMIN:
            case MySQLParser.FIREWALL_USER:
            case MySQLParser.GROUP_REPLICATION_ADMIN:
            case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
            case MySQLParser.NDB_STORED_USER:
            case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySQLParser.REPLICATION_APPLIER:
            case MySQLParser.REPLICATION_SLAVE_ADMIN:
            case MySQLParser.RESOURCE_GROUP_ADMIN:
            case MySQLParser.RESOURCE_GROUP_USER:
            case MySQLParser.ROLE_ADMIN:
            case MySQLParser.SESSION_VARIABLES_ADMIN:
            case MySQLParser.SET_USER_ID:
            case MySQLParser.SHOW_ROUTINE:
            case MySQLParser.SYSTEM_VARIABLES_ADMIN:
            case MySQLParser.TABLE_ENCRYPTION_ADMIN:
            case MySQLParser.VERSION_TOKEN_ADMIN:
            case MySQLParser.XA_RECOVER_ADMIN:
            case MySQLParser.ARMSCII8:
            case MySQLParser.ASCII:
            case MySQLParser.BIG5:
            case MySQLParser.CP1250:
            case MySQLParser.CP1251:
            case MySQLParser.CP1256:
            case MySQLParser.CP1257:
            case MySQLParser.CP850:
            case MySQLParser.CP852:
            case MySQLParser.CP866:
            case MySQLParser.CP932:
            case MySQLParser.DEC8:
            case MySQLParser.EUCJPMS:
            case MySQLParser.EUCKR:
            case MySQLParser.GB2312:
            case MySQLParser.GBK:
            case MySQLParser.GEOSTD8:
            case MySQLParser.GREEK:
            case MySQLParser.HEBREW:
            case MySQLParser.HP8:
            case MySQLParser.KEYBCS2:
            case MySQLParser.KOI8R:
            case MySQLParser.KOI8U:
            case MySQLParser.LATIN1:
            case MySQLParser.LATIN2:
            case MySQLParser.LATIN5:
            case MySQLParser.LATIN7:
            case MySQLParser.MACCE:
            case MySQLParser.MACROMAN:
            case MySQLParser.SJIS:
            case MySQLParser.SWE7:
            case MySQLParser.TIS620:
            case MySQLParser.UCS2:
            case MySQLParser.UJIS:
            case MySQLParser.UTF16:
            case MySQLParser.UTF16LE:
            case MySQLParser.UTF32:
            case MySQLParser.UTF8:
            case MySQLParser.UTF8MB3:
            case MySQLParser.UTF8MB4:
            case MySQLParser.ARCHIVE:
            case MySQLParser.BLACKHOLE:
            case MySQLParser.CSV:
            case MySQLParser.FEDERATED:
            case MySQLParser.INNODB:
            case MySQLParser.MEMORY:
            case MySQLParser.MRG_MYISAM:
            case MySQLParser.MYISAM:
            case MySQLParser.NDB:
            case MySQLParser.NDBCLUSTER:
            case MySQLParser.PERFORMANCE_SCHEMA:
            case MySQLParser.TOKUDB:
            case MySQLParser.REPEATABLE:
            case MySQLParser.COMMITTED:
            case MySQLParser.UNCOMMITTED:
            case MySQLParser.SERIALIZABLE:
            case MySQLParser.GEOMETRYCOLLECTION:
            case MySQLParser.LINESTRING:
            case MySQLParser.MULTILINESTRING:
            case MySQLParser.MULTIPOINT:
            case MySQLParser.MULTIPOLYGON:
            case MySQLParser.POINT:
            case MySQLParser.POLYGON:
            case MySQLParser.ABS:
            case MySQLParser.ACOS:
            case MySQLParser.ADDDATE:
            case MySQLParser.ADDTIME:
            case MySQLParser.AES_DECRYPT:
            case MySQLParser.AES_ENCRYPT:
            case MySQLParser.AREA:
            case MySQLParser.ASBINARY:
            case MySQLParser.ASIN:
            case MySQLParser.ASTEXT:
            case MySQLParser.ASWKB:
            case MySQLParser.ASWKT:
            case MySQLParser.ASYMMETRIC_DECRYPT:
            case MySQLParser.ASYMMETRIC_DERIVE:
            case MySQLParser.ASYMMETRIC_ENCRYPT:
            case MySQLParser.ASYMMETRIC_SIGN:
            case MySQLParser.ASYMMETRIC_VERIFY:
            case MySQLParser.ATAN:
            case MySQLParser.ATAN2:
            case MySQLParser.BENCHMARK:
            case MySQLParser.BIN:
            case MySQLParser.BIT_COUNT:
            case MySQLParser.BIT_LENGTH:
            case MySQLParser.BUFFER:
            case MySQLParser.CATALOG_NAME:
            case MySQLParser.CEIL:
            case MySQLParser.CEILING:
            case MySQLParser.CENTROID:
            case MySQLParser.CHARACTER_LENGTH:
            case MySQLParser.CHARSET:
            case MySQLParser.CHAR_LENGTH:
            case MySQLParser.COERCIBILITY:
            case MySQLParser.COLLATION:
            case MySQLParser.COMPRESS:
            case MySQLParser.CONCAT:
            case MySQLParser.CONCAT_WS:
            case MySQLParser.CONNECTION_ID:
            case MySQLParser.CONV:
            case MySQLParser.CONVERT_TZ:
            case MySQLParser.COS:
            case MySQLParser.COT:
            case MySQLParser.CRC32:
            case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySQLParser.CREATE_DH_PARAMETERS:
            case MySQLParser.CREATE_DIGEST:
            case MySQLParser.CROSSES:
            case MySQLParser.DATEDIFF:
            case MySQLParser.DATE_FORMAT:
            case MySQLParser.DAYNAME:
            case MySQLParser.DAYOFMONTH:
            case MySQLParser.DAYOFWEEK:
            case MySQLParser.DAYOFYEAR:
            case MySQLParser.DECODE:
            case MySQLParser.DEGREES:
            case MySQLParser.DES_DECRYPT:
            case MySQLParser.DES_ENCRYPT:
            case MySQLParser.DIMENSION:
            case MySQLParser.DISJOINT:
            case MySQLParser.ELT:
            case MySQLParser.ENCODE:
            case MySQLParser.ENCRYPT:
            case MySQLParser.ENDPOINT:
            case MySQLParser.ENVELOPE:
            case MySQLParser.EQUALS:
            case MySQLParser.EXP:
            case MySQLParser.EXPORT_SET:
            case MySQLParser.EXTERIORRING:
            case MySQLParser.EXTRACTVALUE:
            case MySQLParser.FIELD:
            case MySQLParser.FIND_IN_SET:
            case MySQLParser.FLOOR:
            case MySQLParser.FORMAT:
            case MySQLParser.FOUND_ROWS:
            case MySQLParser.FROM_BASE64:
            case MySQLParser.FROM_DAYS:
            case MySQLParser.FROM_UNIXTIME:
            case MySQLParser.GEOMCOLLFROMTEXT:
            case MySQLParser.GEOMCOLLFROMWKB:
            case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.GEOMETRYFROMTEXT:
            case MySQLParser.GEOMETRYFROMWKB:
            case MySQLParser.GEOMETRYN:
            case MySQLParser.GEOMETRYTYPE:
            case MySQLParser.GEOMFROMTEXT:
            case MySQLParser.GEOMFROMWKB:
            case MySQLParser.GET_FORMAT:
            case MySQLParser.GET_LOCK:
            case MySQLParser.GLENGTH:
            case MySQLParser.GREATEST:
            case MySQLParser.GTID_SUBSET:
            case MySQLParser.GTID_SUBTRACT:
            case MySQLParser.HEX:
            case MySQLParser.IFNULL:
            case MySQLParser.INET6_ATON:
            case MySQLParser.INET6_NTOA:
            case MySQLParser.INET_ATON:
            case MySQLParser.INET_NTOA:
            case MySQLParser.INSTR:
            case MySQLParser.INTERIORRINGN:
            case MySQLParser.INTERSECTS:
            case MySQLParser.ISCLOSED:
            case MySQLParser.ISEMPTY:
            case MySQLParser.ISNULL:
            case MySQLParser.ISSIMPLE:
            case MySQLParser.IS_FREE_LOCK:
            case MySQLParser.IS_IPV4:
            case MySQLParser.IS_IPV4_COMPAT:
            case MySQLParser.IS_IPV4_MAPPED:
            case MySQLParser.IS_IPV6:
            case MySQLParser.IS_USED_LOCK:
            case MySQLParser.LAST_INSERT_ID:
            case MySQLParser.LCASE:
            case MySQLParser.LEAST:
            case MySQLParser.LENGTH:
            case MySQLParser.LINEFROMTEXT:
            case MySQLParser.LINEFROMWKB:
            case MySQLParser.LINESTRINGFROMTEXT:
            case MySQLParser.LINESTRINGFROMWKB:
            case MySQLParser.LN:
            case MySQLParser.LOAD_FILE:
            case MySQLParser.LOCATE:
            case MySQLParser.LOG:
            case MySQLParser.LOG10:
            case MySQLParser.LOG2:
            case MySQLParser.LOWER:
            case MySQLParser.LPAD:
            case MySQLParser.LTRIM:
            case MySQLParser.MAKEDATE:
            case MySQLParser.MAKETIME:
            case MySQLParser.MAKE_SET:
            case MySQLParser.MASTER_POS_WAIT:
            case MySQLParser.MBRCONTAINS:
            case MySQLParser.MBRDISJOINT:
            case MySQLParser.MBREQUAL:
            case MySQLParser.MBRINTERSECTS:
            case MySQLParser.MBROVERLAPS:
            case MySQLParser.MBRTOUCHES:
            case MySQLParser.MBRWITHIN:
            case MySQLParser.MD5:
            case MySQLParser.MLINEFROMTEXT:
            case MySQLParser.MLINEFROMWKB:
            case MySQLParser.MONTHNAME:
            case MySQLParser.MPOINTFROMTEXT:
            case MySQLParser.MPOINTFROMWKB:
            case MySQLParser.MPOLYFROMTEXT:
            case MySQLParser.MPOLYFROMWKB:
            case MySQLParser.MULTILINESTRINGFROMTEXT:
            case MySQLParser.MULTILINESTRINGFROMWKB:
            case MySQLParser.MULTIPOINTFROMTEXT:
            case MySQLParser.MULTIPOINTFROMWKB:
            case MySQLParser.MULTIPOLYGONFROMTEXT:
            case MySQLParser.MULTIPOLYGONFROMWKB:
            case MySQLParser.NAME_CONST:
            case MySQLParser.NULLIF:
            case MySQLParser.NUMGEOMETRIES:
            case MySQLParser.NUMINTERIORRINGS:
            case MySQLParser.NUMPOINTS:
            case MySQLParser.OCT:
            case MySQLParser.OCTET_LENGTH:
            case MySQLParser.ORD:
            case MySQLParser.OVERLAPS:
            case MySQLParser.PERIOD_ADD:
            case MySQLParser.PERIOD_DIFF:
            case MySQLParser.PI:
            case MySQLParser.POINTFROMTEXT:
            case MySQLParser.POINTFROMWKB:
            case MySQLParser.POINTN:
            case MySQLParser.POLYFROMTEXT:
            case MySQLParser.POLYFROMWKB:
            case MySQLParser.POLYGONFROMTEXT:
            case MySQLParser.POLYGONFROMWKB:
            case MySQLParser.POW:
            case MySQLParser.POWER:
            case MySQLParser.QUOTE:
            case MySQLParser.RADIANS:
            case MySQLParser.RAND:
            case MySQLParser.RANDOM_BYTES:
            case MySQLParser.RELEASE_LOCK:
            case MySQLParser.REVERSE:
            case MySQLParser.ROUND:
            case MySQLParser.ROW_COUNT:
            case MySQLParser.RPAD:
            case MySQLParser.RTRIM:
            case MySQLParser.SEC_TO_TIME:
            case MySQLParser.SESSION_USER:
            case MySQLParser.SHA:
            case MySQLParser.SHA1:
            case MySQLParser.SHA2:
            case MySQLParser.SCHEMA_NAME:
            case MySQLParser.SIGN:
            case MySQLParser.SIN:
            case MySQLParser.SLEEP:
            case MySQLParser.SOUNDEX:
            case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySQLParser.SQRT:
            case MySQLParser.SRID:
            case MySQLParser.STARTPOINT:
            case MySQLParser.STRCMP:
            case MySQLParser.STR_TO_DATE:
            case MySQLParser.ST_AREA:
            case MySQLParser.ST_ASBINARY:
            case MySQLParser.ST_ASTEXT:
            case MySQLParser.ST_ASWKB:
            case MySQLParser.ST_ASWKT:
            case MySQLParser.ST_BUFFER:
            case MySQLParser.ST_CENTROID:
            case MySQLParser.ST_CONTAINS:
            case MySQLParser.ST_CROSSES:
            case MySQLParser.ST_DIFFERENCE:
            case MySQLParser.ST_DIMENSION:
            case MySQLParser.ST_DISJOINT:
            case MySQLParser.ST_DISTANCE:
            case MySQLParser.ST_ENDPOINT:
            case MySQLParser.ST_ENVELOPE:
            case MySQLParser.ST_EQUALS:
            case MySQLParser.ST_EXTERIORRING:
            case MySQLParser.ST_GEOMCOLLFROMTEXT:
            case MySQLParser.ST_GEOMCOLLFROMTXT:
            case MySQLParser.ST_GEOMCOLLFROMWKB:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.ST_GEOMETRYFROMTEXT:
            case MySQLParser.ST_GEOMETRYFROMWKB:
            case MySQLParser.ST_GEOMETRYN:
            case MySQLParser.ST_GEOMETRYTYPE:
            case MySQLParser.ST_GEOMFROMTEXT:
            case MySQLParser.ST_GEOMFROMWKB:
            case MySQLParser.ST_INTERIORRINGN:
            case MySQLParser.ST_INTERSECTION:
            case MySQLParser.ST_INTERSECTS:
            case MySQLParser.ST_ISCLOSED:
            case MySQLParser.ST_ISEMPTY:
            case MySQLParser.ST_ISSIMPLE:
            case MySQLParser.ST_LINEFROMTEXT:
            case MySQLParser.ST_LINEFROMWKB:
            case MySQLParser.ST_LINESTRINGFROMTEXT:
            case MySQLParser.ST_LINESTRINGFROMWKB:
            case MySQLParser.ST_NUMGEOMETRIES:
            case MySQLParser.ST_NUMINTERIORRING:
            case MySQLParser.ST_NUMINTERIORRINGS:
            case MySQLParser.ST_NUMPOINTS:
            case MySQLParser.ST_OVERLAPS:
            case MySQLParser.ST_POINTFROMTEXT:
            case MySQLParser.ST_POINTFROMWKB:
            case MySQLParser.ST_POINTN:
            case MySQLParser.ST_POLYFROMTEXT:
            case MySQLParser.ST_POLYFROMWKB:
            case MySQLParser.ST_POLYGONFROMTEXT:
            case MySQLParser.ST_POLYGONFROMWKB:
            case MySQLParser.ST_SRID:
            case MySQLParser.ST_STARTPOINT:
            case MySQLParser.ST_SYMDIFFERENCE:
            case MySQLParser.ST_TOUCHES:
            case MySQLParser.ST_UNION:
            case MySQLParser.ST_WITHIN:
            case MySQLParser.ST_X:
            case MySQLParser.ST_Y:
            case MySQLParser.SUBDATE:
            case MySQLParser.SUBSTRING_INDEX:
            case MySQLParser.SUBTIME:
            case MySQLParser.SYSTEM_USER:
            case MySQLParser.TAN:
            case MySQLParser.TIMEDIFF:
            case MySQLParser.TIMESTAMPADD:
            case MySQLParser.TIMESTAMPDIFF:
            case MySQLParser.TIME_FORMAT:
            case MySQLParser.TIME_TO_SEC:
            case MySQLParser.TOUCHES:
            case MySQLParser.TO_BASE64:
            case MySQLParser.TO_DAYS:
            case MySQLParser.TO_SECONDS:
            case MySQLParser.UCASE:
            case MySQLParser.UNCOMPRESS:
            case MySQLParser.UNCOMPRESSED_LENGTH:
            case MySQLParser.UNHEX:
            case MySQLParser.UNIX_TIMESTAMP:
            case MySQLParser.UPDATEXML:
            case MySQLParser.UPPER:
            case MySQLParser.UUID:
            case MySQLParser.UUID_SHORT:
            case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
            case MySQLParser.VERSION:
            case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySQLParser.WEEKDAY:
            case MySQLParser.WEEKOFYEAR:
            case MySQLParser.WEIGHT_STRING:
            case MySQLParser.WITHIN:
            case MySQLParser.YEARWEEK:
            case MySQLParser.Y_FUNCTION:
            case MySQLParser.X_FUNCTION:
            case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySQLParser.STRING_LITERAL:
            case MySQLParser.ID:
            case MySQLParser.REVERSE_QUOTE_ID:
                this.state = 2598;
                this.uidList();
                break;
            case MySQLParser.ALL:
                this.state = 2599;
                this.match(MySQLParser.ALL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 43:
            localctx = new AlterByRebuildPartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 43);
            this.state = 2602;
            this.match(MySQLParser.REBUILD);
            this.state = 2603;
            this.match(MySQLParser.PARTITION);
            this.state = 2606;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.CURRENT:
            case MySQLParser.DATABASE:
            case MySQLParser.DIAGNOSTICS:
            case MySQLParser.LEFT:
            case MySQLParser.NUMBER:
            case MySQLParser.RIGHT:
            case MySQLParser.STACKED:
            case MySQLParser.DATE:
            case MySQLParser.TIME:
            case MySQLParser.TIMESTAMP:
            case MySQLParser.DATETIME:
            case MySQLParser.YEAR:
            case MySQLParser.TEXT:
            case MySQLParser.ENUM:
            case MySQLParser.SERIAL:
            case MySQLParser.JSON_VALID:
            case MySQLParser.JSON_SCHEMA_VALID:
            case MySQLParser.COUNT:
            case MySQLParser.POSITION:
            case MySQLParser.ACCOUNT:
            case MySQLParser.ACTION:
            case MySQLParser.AFTER:
            case MySQLParser.AGGREGATE:
            case MySQLParser.ALGORITHM:
            case MySQLParser.ANY:
            case MySQLParser.AT:
            case MySQLParser.AUTHORS:
            case MySQLParser.AUTOCOMMIT:
            case MySQLParser.AUTOEXTEND_SIZE:
            case MySQLParser.AUTO_INCREMENT:
            case MySQLParser.AVG_ROW_LENGTH:
            case MySQLParser.BEGIN:
            case MySQLParser.BINLOG:
            case MySQLParser.BIT:
            case MySQLParser.BLOCK:
            case MySQLParser.BOOL:
            case MySQLParser.BOOLEAN:
            case MySQLParser.BTREE:
            case MySQLParser.CACHE:
            case MySQLParser.CASCADED:
            case MySQLParser.CHAIN:
            case MySQLParser.CHANGED:
            case MySQLParser.CHANNEL:
            case MySQLParser.CHECKSUM:
            case MySQLParser.PAGE_CHECKSUM:
            case MySQLParser.CIPHER:
            case MySQLParser.CLASS_ORIGIN:
            case MySQLParser.CLIENT:
            case MySQLParser.CLOSE:
            case MySQLParser.COALESCE:
            case MySQLParser.CODE:
            case MySQLParser.COLUMNS:
            case MySQLParser.COLUMN_FORMAT:
            case MySQLParser.COLUMN_NAME:
            case MySQLParser.COMMENT:
            case MySQLParser.COMMIT:
            case MySQLParser.COMPACT:
            case MySQLParser.COMPLETION:
            case MySQLParser.COMPRESSED:
            case MySQLParser.COMPRESSION:
            case MySQLParser.CONCURRENT:
            case MySQLParser.CONNECTION:
            case MySQLParser.CONSISTENT:
            case MySQLParser.CONSTRAINT_CATALOG:
            case MySQLParser.CONSTRAINT_SCHEMA:
            case MySQLParser.CONSTRAINT_NAME:
            case MySQLParser.CONTAINS:
            case MySQLParser.CONTEXT:
            case MySQLParser.CONTRIBUTORS:
            case MySQLParser.COPY:
            case MySQLParser.CPU:
            case MySQLParser.CURSOR_NAME:
            case MySQLParser.DATA:
            case MySQLParser.DATAFILE:
            case MySQLParser.DEALLOCATE:
            case MySQLParser.DEFAULT_AUTH:
            case MySQLParser.DEFINER:
            case MySQLParser.DELAY_KEY_WRITE:
            case MySQLParser.DES_KEY_FILE:
            case MySQLParser.DIRECTORY:
            case MySQLParser.DISABLE:
            case MySQLParser.DISCARD:
            case MySQLParser.DISK:
            case MySQLParser.DO:
            case MySQLParser.DUMPFILE:
            case MySQLParser.DUPLICATE:
            case MySQLParser.DYNAMIC:
            case MySQLParser.ENABLE:
            case MySQLParser.ENCRYPTION:
            case MySQLParser.END:
            case MySQLParser.ENDS:
            case MySQLParser.ENGINE:
            case MySQLParser.ENGINES:
            case MySQLParser.ERROR:
            case MySQLParser.ERRORS:
            case MySQLParser.ESCAPE:
            case MySQLParser.EVEN:
            case MySQLParser.EVENT:
            case MySQLParser.EVENTS:
            case MySQLParser.EVERY:
            case MySQLParser.EXCHANGE:
            case MySQLParser.EXCLUSIVE:
            case MySQLParser.EXPIRE:
            case MySQLParser.EXPORT:
            case MySQLParser.EXTENDED:
            case MySQLParser.EXTENT_SIZE:
            case MySQLParser.FAST:
            case MySQLParser.FAULTS:
            case MySQLParser.FIELDS:
            case MySQLParser.FILE_BLOCK_SIZE:
            case MySQLParser.FILTER:
            case MySQLParser.FIRST:
            case MySQLParser.FIXED:
            case MySQLParser.FLUSH:
            case MySQLParser.FOLLOWS:
            case MySQLParser.FOUND:
            case MySQLParser.FULL:
            case MySQLParser.FUNCTION:
            case MySQLParser.GENERAL:
            case MySQLParser.GLOBAL:
            case MySQLParser.GRANTS:
            case MySQLParser.GROUP_REPLICATION:
            case MySQLParser.HANDLER:
            case MySQLParser.HASH:
            case MySQLParser.HELP:
            case MySQLParser.HOST:
            case MySQLParser.HOSTS:
            case MySQLParser.IDENTIFIED:
            case MySQLParser.IGNORE_SERVER_IDS:
            case MySQLParser.IMPORT:
            case MySQLParser.INDEXES:
            case MySQLParser.INITIAL_SIZE:
            case MySQLParser.INPLACE:
            case MySQLParser.INSERT_METHOD:
            case MySQLParser.INSTALL:
            case MySQLParser.INSTANCE:
            case MySQLParser.INVISIBLE:
            case MySQLParser.INVOKER:
            case MySQLParser.IO:
            case MySQLParser.IO_THREAD:
            case MySQLParser.IPC:
            case MySQLParser.ISOLATION:
            case MySQLParser.ISSUER:
            case MySQLParser.JSON:
            case MySQLParser.KEY_BLOCK_SIZE:
            case MySQLParser.LANGUAGE:
            case MySQLParser.LAST:
            case MySQLParser.LEAVES:
            case MySQLParser.LESS:
            case MySQLParser.LEVEL:
            case MySQLParser.LIST:
            case MySQLParser.LOCAL:
            case MySQLParser.LOGFILE:
            case MySQLParser.LOGS:
            case MySQLParser.MASTER:
            case MySQLParser.MASTER_AUTO_POSITION:
            case MySQLParser.MASTER_CONNECT_RETRY:
            case MySQLParser.MASTER_DELAY:
            case MySQLParser.MASTER_HEARTBEAT_PERIOD:
            case MySQLParser.MASTER_HOST:
            case MySQLParser.MASTER_LOG_FILE:
            case MySQLParser.MASTER_LOG_POS:
            case MySQLParser.MASTER_PASSWORD:
            case MySQLParser.MASTER_PORT:
            case MySQLParser.MASTER_RETRY_COUNT:
            case MySQLParser.MASTER_SSL:
            case MySQLParser.MASTER_SSL_CA:
            case MySQLParser.MASTER_SSL_CAPATH:
            case MySQLParser.MASTER_SSL_CERT:
            case MySQLParser.MASTER_SSL_CIPHER:
            case MySQLParser.MASTER_SSL_CRL:
            case MySQLParser.MASTER_SSL_CRLPATH:
            case MySQLParser.MASTER_SSL_KEY:
            case MySQLParser.MASTER_TLS_VERSION:
            case MySQLParser.MASTER_USER:
            case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
            case MySQLParser.MAX_QUERIES_PER_HOUR:
            case MySQLParser.MAX_ROWS:
            case MySQLParser.MAX_SIZE:
            case MySQLParser.MAX_UPDATES_PER_HOUR:
            case MySQLParser.MAX_USER_CONNECTIONS:
            case MySQLParser.MEDIUM:
            case MySQLParser.MERGE:
            case MySQLParser.MESSAGE_TEXT:
            case MySQLParser.MID:
            case MySQLParser.MIGRATE:
            case MySQLParser.MIN_ROWS:
            case MySQLParser.MODE:
            case MySQLParser.MODIFY:
            case MySQLParser.MUTEX:
            case MySQLParser.MYSQL:
            case MySQLParser.MYSQL_ERRNO:
            case MySQLParser.NAME:
            case MySQLParser.NAMES:
            case MySQLParser.NCHAR:
            case MySQLParser.NEVER:
            case MySQLParser.NEXT:
            case MySQLParser.NO:
            case MySQLParser.NODEGROUP:
            case MySQLParser.NONE:
            case MySQLParser.OFFLINE:
            case MySQLParser.OFFSET:
            case MySQLParser.OJ:
            case MySQLParser.OLD_PASSWORD:
            case MySQLParser.ONE:
            case MySQLParser.ONLINE:
            case MySQLParser.ONLY:
            case MySQLParser.OPEN:
            case MySQLParser.OPTIMIZER_COSTS:
            case MySQLParser.OPTIONS:
            case MySQLParser.OWNER:
            case MySQLParser.PACK_KEYS:
            case MySQLParser.PAGE:
            case MySQLParser.PARSER:
            case MySQLParser.PARTIAL:
            case MySQLParser.PARTITIONING:
            case MySQLParser.PARTITIONS:
            case MySQLParser.PASSWORD:
            case MySQLParser.PHASE:
            case MySQLParser.PLUGIN:
            case MySQLParser.PLUGIN_DIR:
            case MySQLParser.PLUGINS:
            case MySQLParser.PORT:
            case MySQLParser.PRECEDES:
            case MySQLParser.PREPARE:
            case MySQLParser.PRESERVE:
            case MySQLParser.PREV:
            case MySQLParser.PROCESSLIST:
            case MySQLParser.PROFILE:
            case MySQLParser.PROFILES:
            case MySQLParser.PROXY:
            case MySQLParser.QUERY:
            case MySQLParser.QUICK:
            case MySQLParser.REBUILD:
            case MySQLParser.RECOVER:
            case MySQLParser.REDO_BUFFER_SIZE:
            case MySQLParser.REDUNDANT:
            case MySQLParser.RELAY:
            case MySQLParser.RELAY_LOG_FILE:
            case MySQLParser.RELAY_LOG_POS:
            case MySQLParser.RELAYLOG:
            case MySQLParser.REMOVE:
            case MySQLParser.REORGANIZE:
            case MySQLParser.REPAIR:
            case MySQLParser.REPLICATE_DO_DB:
            case MySQLParser.REPLICATE_DO_TABLE:
            case MySQLParser.REPLICATE_IGNORE_DB:
            case MySQLParser.REPLICATE_IGNORE_TABLE:
            case MySQLParser.REPLICATE_REWRITE_DB:
            case MySQLParser.REPLICATE_WILD_DO_TABLE:
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySQLParser.REPLICATION:
            case MySQLParser.RESET:
            case MySQLParser.RESUME:
            case MySQLParser.RETURNED_SQLSTATE:
            case MySQLParser.RETURNS:
            case MySQLParser.ROLE:
            case MySQLParser.ROLLBACK:
            case MySQLParser.ROLLUP:
            case MySQLParser.ROTATE:
            case MySQLParser.ROW:
            case MySQLParser.ROWS:
            case MySQLParser.ROW_FORMAT:
            case MySQLParser.SAVEPOINT:
            case MySQLParser.SCHEDULE:
            case MySQLParser.SECURITY:
            case MySQLParser.SERVER:
            case MySQLParser.SESSION:
            case MySQLParser.SHARE:
            case MySQLParser.SHARED:
            case MySQLParser.SIGNED:
            case MySQLParser.SIMPLE:
            case MySQLParser.SLAVE:
            case MySQLParser.SLOW:
            case MySQLParser.SNAPSHOT:
            case MySQLParser.SOCKET:
            case MySQLParser.SOME:
            case MySQLParser.SONAME:
            case MySQLParser.SOUNDS:
            case MySQLParser.SOURCE:
            case MySQLParser.SQL_AFTER_GTIDS:
            case MySQLParser.SQL_AFTER_MTS_GAPS:
            case MySQLParser.SQL_BEFORE_GTIDS:
            case MySQLParser.SQL_BUFFER_RESULT:
            case MySQLParser.SQL_CACHE:
            case MySQLParser.SQL_NO_CACHE:
            case MySQLParser.SQL_THREAD:
            case MySQLParser.START:
            case MySQLParser.STARTS:
            case MySQLParser.STATS_AUTO_RECALC:
            case MySQLParser.STATS_PERSISTENT:
            case MySQLParser.STATS_SAMPLE_PAGES:
            case MySQLParser.STATUS:
            case MySQLParser.STOP:
            case MySQLParser.STORAGE:
            case MySQLParser.STRING:
            case MySQLParser.SUBCLASS_ORIGIN:
            case MySQLParser.SUBJECT:
            case MySQLParser.SUBPARTITION:
            case MySQLParser.SUBPARTITIONS:
            case MySQLParser.SUSPEND:
            case MySQLParser.SWAPS:
            case MySQLParser.SWITCHES:
            case MySQLParser.TABLE_NAME:
            case MySQLParser.TABLESPACE:
            case MySQLParser.TEMPORARY:
            case MySQLParser.TEMPTABLE:
            case MySQLParser.THAN:
            case MySQLParser.TRADITIONAL:
            case MySQLParser.TRANSACTION:
            case MySQLParser.TRANSACTIONAL:
            case MySQLParser.TRIGGERS:
            case MySQLParser.TRUNCATE:
            case MySQLParser.UNDEFINED:
            case MySQLParser.UNDOFILE:
            case MySQLParser.UNDO_BUFFER_SIZE:
            case MySQLParser.UNINSTALL:
            case MySQLParser.UNKNOWN:
            case MySQLParser.UNTIL:
            case MySQLParser.UPGRADE:
            case MySQLParser.USER:
            case MySQLParser.USE_FRM:
            case MySQLParser.USER_RESOURCES:
            case MySQLParser.VALIDATION:
            case MySQLParser.VALUE:
            case MySQLParser.VARIABLES:
            case MySQLParser.VIEW:
            case MySQLParser.VISIBLE:
            case MySQLParser.WAIT:
            case MySQLParser.WARNINGS:
            case MySQLParser.WITHOUT:
            case MySQLParser.WORK:
            case MySQLParser.WRAPPER:
            case MySQLParser.X509:
            case MySQLParser.XA:
            case MySQLParser.XML:
            case MySQLParser.INTERNAL:
            case MySQLParser.QUARTER:
            case MySQLParser.MONTH:
            case MySQLParser.DAY:
            case MySQLParser.HOUR:
            case MySQLParser.MINUTE:
            case MySQLParser.WEEK:
            case MySQLParser.SECOND:
            case MySQLParser.MICROSECOND:
            case MySQLParser.TABLES:
            case MySQLParser.ROUTINE:
            case MySQLParser.EXECUTE:
            case MySQLParser.FILE:
            case MySQLParser.PROCESS:
            case MySQLParser.RELOAD:
            case MySQLParser.SHUTDOWN:
            case MySQLParser.SUPER:
            case MySQLParser.PRIVILEGES:
            case MySQLParser.AUDIT_ADMIN:
            case MySQLParser.BACKUP_ADMIN:
            case MySQLParser.BINLOG_ADMIN:
            case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
            case MySQLParser.CLONE_ADMIN:
            case MySQLParser.CONNECTION_ADMIN:
            case MySQLParser.ENCRYPTION_KEY_ADMIN:
            case MySQLParser.FIREWALL_ADMIN:
            case MySQLParser.FIREWALL_USER:
            case MySQLParser.GROUP_REPLICATION_ADMIN:
            case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
            case MySQLParser.NDB_STORED_USER:
            case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySQLParser.REPLICATION_APPLIER:
            case MySQLParser.REPLICATION_SLAVE_ADMIN:
            case MySQLParser.RESOURCE_GROUP_ADMIN:
            case MySQLParser.RESOURCE_GROUP_USER:
            case MySQLParser.ROLE_ADMIN:
            case MySQLParser.SESSION_VARIABLES_ADMIN:
            case MySQLParser.SET_USER_ID:
            case MySQLParser.SHOW_ROUTINE:
            case MySQLParser.SYSTEM_VARIABLES_ADMIN:
            case MySQLParser.TABLE_ENCRYPTION_ADMIN:
            case MySQLParser.VERSION_TOKEN_ADMIN:
            case MySQLParser.XA_RECOVER_ADMIN:
            case MySQLParser.ARMSCII8:
            case MySQLParser.ASCII:
            case MySQLParser.BIG5:
            case MySQLParser.CP1250:
            case MySQLParser.CP1251:
            case MySQLParser.CP1256:
            case MySQLParser.CP1257:
            case MySQLParser.CP850:
            case MySQLParser.CP852:
            case MySQLParser.CP866:
            case MySQLParser.CP932:
            case MySQLParser.DEC8:
            case MySQLParser.EUCJPMS:
            case MySQLParser.EUCKR:
            case MySQLParser.GB2312:
            case MySQLParser.GBK:
            case MySQLParser.GEOSTD8:
            case MySQLParser.GREEK:
            case MySQLParser.HEBREW:
            case MySQLParser.HP8:
            case MySQLParser.KEYBCS2:
            case MySQLParser.KOI8R:
            case MySQLParser.KOI8U:
            case MySQLParser.LATIN1:
            case MySQLParser.LATIN2:
            case MySQLParser.LATIN5:
            case MySQLParser.LATIN7:
            case MySQLParser.MACCE:
            case MySQLParser.MACROMAN:
            case MySQLParser.SJIS:
            case MySQLParser.SWE7:
            case MySQLParser.TIS620:
            case MySQLParser.UCS2:
            case MySQLParser.UJIS:
            case MySQLParser.UTF16:
            case MySQLParser.UTF16LE:
            case MySQLParser.UTF32:
            case MySQLParser.UTF8:
            case MySQLParser.UTF8MB3:
            case MySQLParser.UTF8MB4:
            case MySQLParser.ARCHIVE:
            case MySQLParser.BLACKHOLE:
            case MySQLParser.CSV:
            case MySQLParser.FEDERATED:
            case MySQLParser.INNODB:
            case MySQLParser.MEMORY:
            case MySQLParser.MRG_MYISAM:
            case MySQLParser.MYISAM:
            case MySQLParser.NDB:
            case MySQLParser.NDBCLUSTER:
            case MySQLParser.PERFORMANCE_SCHEMA:
            case MySQLParser.TOKUDB:
            case MySQLParser.REPEATABLE:
            case MySQLParser.COMMITTED:
            case MySQLParser.UNCOMMITTED:
            case MySQLParser.SERIALIZABLE:
            case MySQLParser.GEOMETRYCOLLECTION:
            case MySQLParser.LINESTRING:
            case MySQLParser.MULTILINESTRING:
            case MySQLParser.MULTIPOINT:
            case MySQLParser.MULTIPOLYGON:
            case MySQLParser.POINT:
            case MySQLParser.POLYGON:
            case MySQLParser.ABS:
            case MySQLParser.ACOS:
            case MySQLParser.ADDDATE:
            case MySQLParser.ADDTIME:
            case MySQLParser.AES_DECRYPT:
            case MySQLParser.AES_ENCRYPT:
            case MySQLParser.AREA:
            case MySQLParser.ASBINARY:
            case MySQLParser.ASIN:
            case MySQLParser.ASTEXT:
            case MySQLParser.ASWKB:
            case MySQLParser.ASWKT:
            case MySQLParser.ASYMMETRIC_DECRYPT:
            case MySQLParser.ASYMMETRIC_DERIVE:
            case MySQLParser.ASYMMETRIC_ENCRYPT:
            case MySQLParser.ASYMMETRIC_SIGN:
            case MySQLParser.ASYMMETRIC_VERIFY:
            case MySQLParser.ATAN:
            case MySQLParser.ATAN2:
            case MySQLParser.BENCHMARK:
            case MySQLParser.BIN:
            case MySQLParser.BIT_COUNT:
            case MySQLParser.BIT_LENGTH:
            case MySQLParser.BUFFER:
            case MySQLParser.CATALOG_NAME:
            case MySQLParser.CEIL:
            case MySQLParser.CEILING:
            case MySQLParser.CENTROID:
            case MySQLParser.CHARACTER_LENGTH:
            case MySQLParser.CHARSET:
            case MySQLParser.CHAR_LENGTH:
            case MySQLParser.COERCIBILITY:
            case MySQLParser.COLLATION:
            case MySQLParser.COMPRESS:
            case MySQLParser.CONCAT:
            case MySQLParser.CONCAT_WS:
            case MySQLParser.CONNECTION_ID:
            case MySQLParser.CONV:
            case MySQLParser.CONVERT_TZ:
            case MySQLParser.COS:
            case MySQLParser.COT:
            case MySQLParser.CRC32:
            case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySQLParser.CREATE_DH_PARAMETERS:
            case MySQLParser.CREATE_DIGEST:
            case MySQLParser.CROSSES:
            case MySQLParser.DATEDIFF:
            case MySQLParser.DATE_FORMAT:
            case MySQLParser.DAYNAME:
            case MySQLParser.DAYOFMONTH:
            case MySQLParser.DAYOFWEEK:
            case MySQLParser.DAYOFYEAR:
            case MySQLParser.DECODE:
            case MySQLParser.DEGREES:
            case MySQLParser.DES_DECRYPT:
            case MySQLParser.DES_ENCRYPT:
            case MySQLParser.DIMENSION:
            case MySQLParser.DISJOINT:
            case MySQLParser.ELT:
            case MySQLParser.ENCODE:
            case MySQLParser.ENCRYPT:
            case MySQLParser.ENDPOINT:
            case MySQLParser.ENVELOPE:
            case MySQLParser.EQUALS:
            case MySQLParser.EXP:
            case MySQLParser.EXPORT_SET:
            case MySQLParser.EXTERIORRING:
            case MySQLParser.EXTRACTVALUE:
            case MySQLParser.FIELD:
            case MySQLParser.FIND_IN_SET:
            case MySQLParser.FLOOR:
            case MySQLParser.FORMAT:
            case MySQLParser.FOUND_ROWS:
            case MySQLParser.FROM_BASE64:
            case MySQLParser.FROM_DAYS:
            case MySQLParser.FROM_UNIXTIME:
            case MySQLParser.GEOMCOLLFROMTEXT:
            case MySQLParser.GEOMCOLLFROMWKB:
            case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.GEOMETRYFROMTEXT:
            case MySQLParser.GEOMETRYFROMWKB:
            case MySQLParser.GEOMETRYN:
            case MySQLParser.GEOMETRYTYPE:
            case MySQLParser.GEOMFROMTEXT:
            case MySQLParser.GEOMFROMWKB:
            case MySQLParser.GET_FORMAT:
            case MySQLParser.GET_LOCK:
            case MySQLParser.GLENGTH:
            case MySQLParser.GREATEST:
            case MySQLParser.GTID_SUBSET:
            case MySQLParser.GTID_SUBTRACT:
            case MySQLParser.HEX:
            case MySQLParser.IFNULL:
            case MySQLParser.INET6_ATON:
            case MySQLParser.INET6_NTOA:
            case MySQLParser.INET_ATON:
            case MySQLParser.INET_NTOA:
            case MySQLParser.INSTR:
            case MySQLParser.INTERIORRINGN:
            case MySQLParser.INTERSECTS:
            case MySQLParser.ISCLOSED:
            case MySQLParser.ISEMPTY:
            case MySQLParser.ISNULL:
            case MySQLParser.ISSIMPLE:
            case MySQLParser.IS_FREE_LOCK:
            case MySQLParser.IS_IPV4:
            case MySQLParser.IS_IPV4_COMPAT:
            case MySQLParser.IS_IPV4_MAPPED:
            case MySQLParser.IS_IPV6:
            case MySQLParser.IS_USED_LOCK:
            case MySQLParser.LAST_INSERT_ID:
            case MySQLParser.LCASE:
            case MySQLParser.LEAST:
            case MySQLParser.LENGTH:
            case MySQLParser.LINEFROMTEXT:
            case MySQLParser.LINEFROMWKB:
            case MySQLParser.LINESTRINGFROMTEXT:
            case MySQLParser.LINESTRINGFROMWKB:
            case MySQLParser.LN:
            case MySQLParser.LOAD_FILE:
            case MySQLParser.LOCATE:
            case MySQLParser.LOG:
            case MySQLParser.LOG10:
            case MySQLParser.LOG2:
            case MySQLParser.LOWER:
            case MySQLParser.LPAD:
            case MySQLParser.LTRIM:
            case MySQLParser.MAKEDATE:
            case MySQLParser.MAKETIME:
            case MySQLParser.MAKE_SET:
            case MySQLParser.MASTER_POS_WAIT:
            case MySQLParser.MBRCONTAINS:
            case MySQLParser.MBRDISJOINT:
            case MySQLParser.MBREQUAL:
            case MySQLParser.MBRINTERSECTS:
            case MySQLParser.MBROVERLAPS:
            case MySQLParser.MBRTOUCHES:
            case MySQLParser.MBRWITHIN:
            case MySQLParser.MD5:
            case MySQLParser.MLINEFROMTEXT:
            case MySQLParser.MLINEFROMWKB:
            case MySQLParser.MONTHNAME:
            case MySQLParser.MPOINTFROMTEXT:
            case MySQLParser.MPOINTFROMWKB:
            case MySQLParser.MPOLYFROMTEXT:
            case MySQLParser.MPOLYFROMWKB:
            case MySQLParser.MULTILINESTRINGFROMTEXT:
            case MySQLParser.MULTILINESTRINGFROMWKB:
            case MySQLParser.MULTIPOINTFROMTEXT:
            case MySQLParser.MULTIPOINTFROMWKB:
            case MySQLParser.MULTIPOLYGONFROMTEXT:
            case MySQLParser.MULTIPOLYGONFROMWKB:
            case MySQLParser.NAME_CONST:
            case MySQLParser.NULLIF:
            case MySQLParser.NUMGEOMETRIES:
            case MySQLParser.NUMINTERIORRINGS:
            case MySQLParser.NUMPOINTS:
            case MySQLParser.OCT:
            case MySQLParser.OCTET_LENGTH:
            case MySQLParser.ORD:
            case MySQLParser.OVERLAPS:
            case MySQLParser.PERIOD_ADD:
            case MySQLParser.PERIOD_DIFF:
            case MySQLParser.PI:
            case MySQLParser.POINTFROMTEXT:
            case MySQLParser.POINTFROMWKB:
            case MySQLParser.POINTN:
            case MySQLParser.POLYFROMTEXT:
            case MySQLParser.POLYFROMWKB:
            case MySQLParser.POLYGONFROMTEXT:
            case MySQLParser.POLYGONFROMWKB:
            case MySQLParser.POW:
            case MySQLParser.POWER:
            case MySQLParser.QUOTE:
            case MySQLParser.RADIANS:
            case MySQLParser.RAND:
            case MySQLParser.RANDOM_BYTES:
            case MySQLParser.RELEASE_LOCK:
            case MySQLParser.REVERSE:
            case MySQLParser.ROUND:
            case MySQLParser.ROW_COUNT:
            case MySQLParser.RPAD:
            case MySQLParser.RTRIM:
            case MySQLParser.SEC_TO_TIME:
            case MySQLParser.SESSION_USER:
            case MySQLParser.SHA:
            case MySQLParser.SHA1:
            case MySQLParser.SHA2:
            case MySQLParser.SCHEMA_NAME:
            case MySQLParser.SIGN:
            case MySQLParser.SIN:
            case MySQLParser.SLEEP:
            case MySQLParser.SOUNDEX:
            case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySQLParser.SQRT:
            case MySQLParser.SRID:
            case MySQLParser.STARTPOINT:
            case MySQLParser.STRCMP:
            case MySQLParser.STR_TO_DATE:
            case MySQLParser.ST_AREA:
            case MySQLParser.ST_ASBINARY:
            case MySQLParser.ST_ASTEXT:
            case MySQLParser.ST_ASWKB:
            case MySQLParser.ST_ASWKT:
            case MySQLParser.ST_BUFFER:
            case MySQLParser.ST_CENTROID:
            case MySQLParser.ST_CONTAINS:
            case MySQLParser.ST_CROSSES:
            case MySQLParser.ST_DIFFERENCE:
            case MySQLParser.ST_DIMENSION:
            case MySQLParser.ST_DISJOINT:
            case MySQLParser.ST_DISTANCE:
            case MySQLParser.ST_ENDPOINT:
            case MySQLParser.ST_ENVELOPE:
            case MySQLParser.ST_EQUALS:
            case MySQLParser.ST_EXTERIORRING:
            case MySQLParser.ST_GEOMCOLLFROMTEXT:
            case MySQLParser.ST_GEOMCOLLFROMTXT:
            case MySQLParser.ST_GEOMCOLLFROMWKB:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.ST_GEOMETRYFROMTEXT:
            case MySQLParser.ST_GEOMETRYFROMWKB:
            case MySQLParser.ST_GEOMETRYN:
            case MySQLParser.ST_GEOMETRYTYPE:
            case MySQLParser.ST_GEOMFROMTEXT:
            case MySQLParser.ST_GEOMFROMWKB:
            case MySQLParser.ST_INTERIORRINGN:
            case MySQLParser.ST_INTERSECTION:
            case MySQLParser.ST_INTERSECTS:
            case MySQLParser.ST_ISCLOSED:
            case MySQLParser.ST_ISEMPTY:
            case MySQLParser.ST_ISSIMPLE:
            case MySQLParser.ST_LINEFROMTEXT:
            case MySQLParser.ST_LINEFROMWKB:
            case MySQLParser.ST_LINESTRINGFROMTEXT:
            case MySQLParser.ST_LINESTRINGFROMWKB:
            case MySQLParser.ST_NUMGEOMETRIES:
            case MySQLParser.ST_NUMINTERIORRING:
            case MySQLParser.ST_NUMINTERIORRINGS:
            case MySQLParser.ST_NUMPOINTS:
            case MySQLParser.ST_OVERLAPS:
            case MySQLParser.ST_POINTFROMTEXT:
            case MySQLParser.ST_POINTFROMWKB:
            case MySQLParser.ST_POINTN:
            case MySQLParser.ST_POLYFROMTEXT:
            case MySQLParser.ST_POLYFROMWKB:
            case MySQLParser.ST_POLYGONFROMTEXT:
            case MySQLParser.ST_POLYGONFROMWKB:
            case MySQLParser.ST_SRID:
            case MySQLParser.ST_STARTPOINT:
            case MySQLParser.ST_SYMDIFFERENCE:
            case MySQLParser.ST_TOUCHES:
            case MySQLParser.ST_UNION:
            case MySQLParser.ST_WITHIN:
            case MySQLParser.ST_X:
            case MySQLParser.ST_Y:
            case MySQLParser.SUBDATE:
            case MySQLParser.SUBSTRING_INDEX:
            case MySQLParser.SUBTIME:
            case MySQLParser.SYSTEM_USER:
            case MySQLParser.TAN:
            case MySQLParser.TIMEDIFF:
            case MySQLParser.TIMESTAMPADD:
            case MySQLParser.TIMESTAMPDIFF:
            case MySQLParser.TIME_FORMAT:
            case MySQLParser.TIME_TO_SEC:
            case MySQLParser.TOUCHES:
            case MySQLParser.TO_BASE64:
            case MySQLParser.TO_DAYS:
            case MySQLParser.TO_SECONDS:
            case MySQLParser.UCASE:
            case MySQLParser.UNCOMPRESS:
            case MySQLParser.UNCOMPRESSED_LENGTH:
            case MySQLParser.UNHEX:
            case MySQLParser.UNIX_TIMESTAMP:
            case MySQLParser.UPDATEXML:
            case MySQLParser.UPPER:
            case MySQLParser.UUID:
            case MySQLParser.UUID_SHORT:
            case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
            case MySQLParser.VERSION:
            case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySQLParser.WEEKDAY:
            case MySQLParser.WEEKOFYEAR:
            case MySQLParser.WEIGHT_STRING:
            case MySQLParser.WITHIN:
            case MySQLParser.YEARWEEK:
            case MySQLParser.Y_FUNCTION:
            case MySQLParser.X_FUNCTION:
            case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySQLParser.STRING_LITERAL:
            case MySQLParser.ID:
            case MySQLParser.REVERSE_QUOTE_ID:
                this.state = 2604;
                this.uidList();
                break;
            case MySQLParser.ALL:
                this.state = 2605;
                this.match(MySQLParser.ALL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 44:
            localctx = new AlterByRepairPartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 44);
            this.state = 2608;
            this.match(MySQLParser.REPAIR);
            this.state = 2609;
            this.match(MySQLParser.PARTITION);
            this.state = 2612;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.CURRENT:
            case MySQLParser.DATABASE:
            case MySQLParser.DIAGNOSTICS:
            case MySQLParser.LEFT:
            case MySQLParser.NUMBER:
            case MySQLParser.RIGHT:
            case MySQLParser.STACKED:
            case MySQLParser.DATE:
            case MySQLParser.TIME:
            case MySQLParser.TIMESTAMP:
            case MySQLParser.DATETIME:
            case MySQLParser.YEAR:
            case MySQLParser.TEXT:
            case MySQLParser.ENUM:
            case MySQLParser.SERIAL:
            case MySQLParser.JSON_VALID:
            case MySQLParser.JSON_SCHEMA_VALID:
            case MySQLParser.COUNT:
            case MySQLParser.POSITION:
            case MySQLParser.ACCOUNT:
            case MySQLParser.ACTION:
            case MySQLParser.AFTER:
            case MySQLParser.AGGREGATE:
            case MySQLParser.ALGORITHM:
            case MySQLParser.ANY:
            case MySQLParser.AT:
            case MySQLParser.AUTHORS:
            case MySQLParser.AUTOCOMMIT:
            case MySQLParser.AUTOEXTEND_SIZE:
            case MySQLParser.AUTO_INCREMENT:
            case MySQLParser.AVG_ROW_LENGTH:
            case MySQLParser.BEGIN:
            case MySQLParser.BINLOG:
            case MySQLParser.BIT:
            case MySQLParser.BLOCK:
            case MySQLParser.BOOL:
            case MySQLParser.BOOLEAN:
            case MySQLParser.BTREE:
            case MySQLParser.CACHE:
            case MySQLParser.CASCADED:
            case MySQLParser.CHAIN:
            case MySQLParser.CHANGED:
            case MySQLParser.CHANNEL:
            case MySQLParser.CHECKSUM:
            case MySQLParser.PAGE_CHECKSUM:
            case MySQLParser.CIPHER:
            case MySQLParser.CLASS_ORIGIN:
            case MySQLParser.CLIENT:
            case MySQLParser.CLOSE:
            case MySQLParser.COALESCE:
            case MySQLParser.CODE:
            case MySQLParser.COLUMNS:
            case MySQLParser.COLUMN_FORMAT:
            case MySQLParser.COLUMN_NAME:
            case MySQLParser.COMMENT:
            case MySQLParser.COMMIT:
            case MySQLParser.COMPACT:
            case MySQLParser.COMPLETION:
            case MySQLParser.COMPRESSED:
            case MySQLParser.COMPRESSION:
            case MySQLParser.CONCURRENT:
            case MySQLParser.CONNECTION:
            case MySQLParser.CONSISTENT:
            case MySQLParser.CONSTRAINT_CATALOG:
            case MySQLParser.CONSTRAINT_SCHEMA:
            case MySQLParser.CONSTRAINT_NAME:
            case MySQLParser.CONTAINS:
            case MySQLParser.CONTEXT:
            case MySQLParser.CONTRIBUTORS:
            case MySQLParser.COPY:
            case MySQLParser.CPU:
            case MySQLParser.CURSOR_NAME:
            case MySQLParser.DATA:
            case MySQLParser.DATAFILE:
            case MySQLParser.DEALLOCATE:
            case MySQLParser.DEFAULT_AUTH:
            case MySQLParser.DEFINER:
            case MySQLParser.DELAY_KEY_WRITE:
            case MySQLParser.DES_KEY_FILE:
            case MySQLParser.DIRECTORY:
            case MySQLParser.DISABLE:
            case MySQLParser.DISCARD:
            case MySQLParser.DISK:
            case MySQLParser.DO:
            case MySQLParser.DUMPFILE:
            case MySQLParser.DUPLICATE:
            case MySQLParser.DYNAMIC:
            case MySQLParser.ENABLE:
            case MySQLParser.ENCRYPTION:
            case MySQLParser.END:
            case MySQLParser.ENDS:
            case MySQLParser.ENGINE:
            case MySQLParser.ENGINES:
            case MySQLParser.ERROR:
            case MySQLParser.ERRORS:
            case MySQLParser.ESCAPE:
            case MySQLParser.EVEN:
            case MySQLParser.EVENT:
            case MySQLParser.EVENTS:
            case MySQLParser.EVERY:
            case MySQLParser.EXCHANGE:
            case MySQLParser.EXCLUSIVE:
            case MySQLParser.EXPIRE:
            case MySQLParser.EXPORT:
            case MySQLParser.EXTENDED:
            case MySQLParser.EXTENT_SIZE:
            case MySQLParser.FAST:
            case MySQLParser.FAULTS:
            case MySQLParser.FIELDS:
            case MySQLParser.FILE_BLOCK_SIZE:
            case MySQLParser.FILTER:
            case MySQLParser.FIRST:
            case MySQLParser.FIXED:
            case MySQLParser.FLUSH:
            case MySQLParser.FOLLOWS:
            case MySQLParser.FOUND:
            case MySQLParser.FULL:
            case MySQLParser.FUNCTION:
            case MySQLParser.GENERAL:
            case MySQLParser.GLOBAL:
            case MySQLParser.GRANTS:
            case MySQLParser.GROUP_REPLICATION:
            case MySQLParser.HANDLER:
            case MySQLParser.HASH:
            case MySQLParser.HELP:
            case MySQLParser.HOST:
            case MySQLParser.HOSTS:
            case MySQLParser.IDENTIFIED:
            case MySQLParser.IGNORE_SERVER_IDS:
            case MySQLParser.IMPORT:
            case MySQLParser.INDEXES:
            case MySQLParser.INITIAL_SIZE:
            case MySQLParser.INPLACE:
            case MySQLParser.INSERT_METHOD:
            case MySQLParser.INSTALL:
            case MySQLParser.INSTANCE:
            case MySQLParser.INVISIBLE:
            case MySQLParser.INVOKER:
            case MySQLParser.IO:
            case MySQLParser.IO_THREAD:
            case MySQLParser.IPC:
            case MySQLParser.ISOLATION:
            case MySQLParser.ISSUER:
            case MySQLParser.JSON:
            case MySQLParser.KEY_BLOCK_SIZE:
            case MySQLParser.LANGUAGE:
            case MySQLParser.LAST:
            case MySQLParser.LEAVES:
            case MySQLParser.LESS:
            case MySQLParser.LEVEL:
            case MySQLParser.LIST:
            case MySQLParser.LOCAL:
            case MySQLParser.LOGFILE:
            case MySQLParser.LOGS:
            case MySQLParser.MASTER:
            case MySQLParser.MASTER_AUTO_POSITION:
            case MySQLParser.MASTER_CONNECT_RETRY:
            case MySQLParser.MASTER_DELAY:
            case MySQLParser.MASTER_HEARTBEAT_PERIOD:
            case MySQLParser.MASTER_HOST:
            case MySQLParser.MASTER_LOG_FILE:
            case MySQLParser.MASTER_LOG_POS:
            case MySQLParser.MASTER_PASSWORD:
            case MySQLParser.MASTER_PORT:
            case MySQLParser.MASTER_RETRY_COUNT:
            case MySQLParser.MASTER_SSL:
            case MySQLParser.MASTER_SSL_CA:
            case MySQLParser.MASTER_SSL_CAPATH:
            case MySQLParser.MASTER_SSL_CERT:
            case MySQLParser.MASTER_SSL_CIPHER:
            case MySQLParser.MASTER_SSL_CRL:
            case MySQLParser.MASTER_SSL_CRLPATH:
            case MySQLParser.MASTER_SSL_KEY:
            case MySQLParser.MASTER_TLS_VERSION:
            case MySQLParser.MASTER_USER:
            case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
            case MySQLParser.MAX_QUERIES_PER_HOUR:
            case MySQLParser.MAX_ROWS:
            case MySQLParser.MAX_SIZE:
            case MySQLParser.MAX_UPDATES_PER_HOUR:
            case MySQLParser.MAX_USER_CONNECTIONS:
            case MySQLParser.MEDIUM:
            case MySQLParser.MERGE:
            case MySQLParser.MESSAGE_TEXT:
            case MySQLParser.MID:
            case MySQLParser.MIGRATE:
            case MySQLParser.MIN_ROWS:
            case MySQLParser.MODE:
            case MySQLParser.MODIFY:
            case MySQLParser.MUTEX:
            case MySQLParser.MYSQL:
            case MySQLParser.MYSQL_ERRNO:
            case MySQLParser.NAME:
            case MySQLParser.NAMES:
            case MySQLParser.NCHAR:
            case MySQLParser.NEVER:
            case MySQLParser.NEXT:
            case MySQLParser.NO:
            case MySQLParser.NODEGROUP:
            case MySQLParser.NONE:
            case MySQLParser.OFFLINE:
            case MySQLParser.OFFSET:
            case MySQLParser.OJ:
            case MySQLParser.OLD_PASSWORD:
            case MySQLParser.ONE:
            case MySQLParser.ONLINE:
            case MySQLParser.ONLY:
            case MySQLParser.OPEN:
            case MySQLParser.OPTIMIZER_COSTS:
            case MySQLParser.OPTIONS:
            case MySQLParser.OWNER:
            case MySQLParser.PACK_KEYS:
            case MySQLParser.PAGE:
            case MySQLParser.PARSER:
            case MySQLParser.PARTIAL:
            case MySQLParser.PARTITIONING:
            case MySQLParser.PARTITIONS:
            case MySQLParser.PASSWORD:
            case MySQLParser.PHASE:
            case MySQLParser.PLUGIN:
            case MySQLParser.PLUGIN_DIR:
            case MySQLParser.PLUGINS:
            case MySQLParser.PORT:
            case MySQLParser.PRECEDES:
            case MySQLParser.PREPARE:
            case MySQLParser.PRESERVE:
            case MySQLParser.PREV:
            case MySQLParser.PROCESSLIST:
            case MySQLParser.PROFILE:
            case MySQLParser.PROFILES:
            case MySQLParser.PROXY:
            case MySQLParser.QUERY:
            case MySQLParser.QUICK:
            case MySQLParser.REBUILD:
            case MySQLParser.RECOVER:
            case MySQLParser.REDO_BUFFER_SIZE:
            case MySQLParser.REDUNDANT:
            case MySQLParser.RELAY:
            case MySQLParser.RELAY_LOG_FILE:
            case MySQLParser.RELAY_LOG_POS:
            case MySQLParser.RELAYLOG:
            case MySQLParser.REMOVE:
            case MySQLParser.REORGANIZE:
            case MySQLParser.REPAIR:
            case MySQLParser.REPLICATE_DO_DB:
            case MySQLParser.REPLICATE_DO_TABLE:
            case MySQLParser.REPLICATE_IGNORE_DB:
            case MySQLParser.REPLICATE_IGNORE_TABLE:
            case MySQLParser.REPLICATE_REWRITE_DB:
            case MySQLParser.REPLICATE_WILD_DO_TABLE:
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySQLParser.REPLICATION:
            case MySQLParser.RESET:
            case MySQLParser.RESUME:
            case MySQLParser.RETURNED_SQLSTATE:
            case MySQLParser.RETURNS:
            case MySQLParser.ROLE:
            case MySQLParser.ROLLBACK:
            case MySQLParser.ROLLUP:
            case MySQLParser.ROTATE:
            case MySQLParser.ROW:
            case MySQLParser.ROWS:
            case MySQLParser.ROW_FORMAT:
            case MySQLParser.SAVEPOINT:
            case MySQLParser.SCHEDULE:
            case MySQLParser.SECURITY:
            case MySQLParser.SERVER:
            case MySQLParser.SESSION:
            case MySQLParser.SHARE:
            case MySQLParser.SHARED:
            case MySQLParser.SIGNED:
            case MySQLParser.SIMPLE:
            case MySQLParser.SLAVE:
            case MySQLParser.SLOW:
            case MySQLParser.SNAPSHOT:
            case MySQLParser.SOCKET:
            case MySQLParser.SOME:
            case MySQLParser.SONAME:
            case MySQLParser.SOUNDS:
            case MySQLParser.SOURCE:
            case MySQLParser.SQL_AFTER_GTIDS:
            case MySQLParser.SQL_AFTER_MTS_GAPS:
            case MySQLParser.SQL_BEFORE_GTIDS:
            case MySQLParser.SQL_BUFFER_RESULT:
            case MySQLParser.SQL_CACHE:
            case MySQLParser.SQL_NO_CACHE:
            case MySQLParser.SQL_THREAD:
            case MySQLParser.START:
            case MySQLParser.STARTS:
            case MySQLParser.STATS_AUTO_RECALC:
            case MySQLParser.STATS_PERSISTENT:
            case MySQLParser.STATS_SAMPLE_PAGES:
            case MySQLParser.STATUS:
            case MySQLParser.STOP:
            case MySQLParser.STORAGE:
            case MySQLParser.STRING:
            case MySQLParser.SUBCLASS_ORIGIN:
            case MySQLParser.SUBJECT:
            case MySQLParser.SUBPARTITION:
            case MySQLParser.SUBPARTITIONS:
            case MySQLParser.SUSPEND:
            case MySQLParser.SWAPS:
            case MySQLParser.SWITCHES:
            case MySQLParser.TABLE_NAME:
            case MySQLParser.TABLESPACE:
            case MySQLParser.TEMPORARY:
            case MySQLParser.TEMPTABLE:
            case MySQLParser.THAN:
            case MySQLParser.TRADITIONAL:
            case MySQLParser.TRANSACTION:
            case MySQLParser.TRANSACTIONAL:
            case MySQLParser.TRIGGERS:
            case MySQLParser.TRUNCATE:
            case MySQLParser.UNDEFINED:
            case MySQLParser.UNDOFILE:
            case MySQLParser.UNDO_BUFFER_SIZE:
            case MySQLParser.UNINSTALL:
            case MySQLParser.UNKNOWN:
            case MySQLParser.UNTIL:
            case MySQLParser.UPGRADE:
            case MySQLParser.USER:
            case MySQLParser.USE_FRM:
            case MySQLParser.USER_RESOURCES:
            case MySQLParser.VALIDATION:
            case MySQLParser.VALUE:
            case MySQLParser.VARIABLES:
            case MySQLParser.VIEW:
            case MySQLParser.VISIBLE:
            case MySQLParser.WAIT:
            case MySQLParser.WARNINGS:
            case MySQLParser.WITHOUT:
            case MySQLParser.WORK:
            case MySQLParser.WRAPPER:
            case MySQLParser.X509:
            case MySQLParser.XA:
            case MySQLParser.XML:
            case MySQLParser.INTERNAL:
            case MySQLParser.QUARTER:
            case MySQLParser.MONTH:
            case MySQLParser.DAY:
            case MySQLParser.HOUR:
            case MySQLParser.MINUTE:
            case MySQLParser.WEEK:
            case MySQLParser.SECOND:
            case MySQLParser.MICROSECOND:
            case MySQLParser.TABLES:
            case MySQLParser.ROUTINE:
            case MySQLParser.EXECUTE:
            case MySQLParser.FILE:
            case MySQLParser.PROCESS:
            case MySQLParser.RELOAD:
            case MySQLParser.SHUTDOWN:
            case MySQLParser.SUPER:
            case MySQLParser.PRIVILEGES:
            case MySQLParser.AUDIT_ADMIN:
            case MySQLParser.BACKUP_ADMIN:
            case MySQLParser.BINLOG_ADMIN:
            case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
            case MySQLParser.CLONE_ADMIN:
            case MySQLParser.CONNECTION_ADMIN:
            case MySQLParser.ENCRYPTION_KEY_ADMIN:
            case MySQLParser.FIREWALL_ADMIN:
            case MySQLParser.FIREWALL_USER:
            case MySQLParser.GROUP_REPLICATION_ADMIN:
            case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
            case MySQLParser.NDB_STORED_USER:
            case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySQLParser.REPLICATION_APPLIER:
            case MySQLParser.REPLICATION_SLAVE_ADMIN:
            case MySQLParser.RESOURCE_GROUP_ADMIN:
            case MySQLParser.RESOURCE_GROUP_USER:
            case MySQLParser.ROLE_ADMIN:
            case MySQLParser.SESSION_VARIABLES_ADMIN:
            case MySQLParser.SET_USER_ID:
            case MySQLParser.SHOW_ROUTINE:
            case MySQLParser.SYSTEM_VARIABLES_ADMIN:
            case MySQLParser.TABLE_ENCRYPTION_ADMIN:
            case MySQLParser.VERSION_TOKEN_ADMIN:
            case MySQLParser.XA_RECOVER_ADMIN:
            case MySQLParser.ARMSCII8:
            case MySQLParser.ASCII:
            case MySQLParser.BIG5:
            case MySQLParser.CP1250:
            case MySQLParser.CP1251:
            case MySQLParser.CP1256:
            case MySQLParser.CP1257:
            case MySQLParser.CP850:
            case MySQLParser.CP852:
            case MySQLParser.CP866:
            case MySQLParser.CP932:
            case MySQLParser.DEC8:
            case MySQLParser.EUCJPMS:
            case MySQLParser.EUCKR:
            case MySQLParser.GB2312:
            case MySQLParser.GBK:
            case MySQLParser.GEOSTD8:
            case MySQLParser.GREEK:
            case MySQLParser.HEBREW:
            case MySQLParser.HP8:
            case MySQLParser.KEYBCS2:
            case MySQLParser.KOI8R:
            case MySQLParser.KOI8U:
            case MySQLParser.LATIN1:
            case MySQLParser.LATIN2:
            case MySQLParser.LATIN5:
            case MySQLParser.LATIN7:
            case MySQLParser.MACCE:
            case MySQLParser.MACROMAN:
            case MySQLParser.SJIS:
            case MySQLParser.SWE7:
            case MySQLParser.TIS620:
            case MySQLParser.UCS2:
            case MySQLParser.UJIS:
            case MySQLParser.UTF16:
            case MySQLParser.UTF16LE:
            case MySQLParser.UTF32:
            case MySQLParser.UTF8:
            case MySQLParser.UTF8MB3:
            case MySQLParser.UTF8MB4:
            case MySQLParser.ARCHIVE:
            case MySQLParser.BLACKHOLE:
            case MySQLParser.CSV:
            case MySQLParser.FEDERATED:
            case MySQLParser.INNODB:
            case MySQLParser.MEMORY:
            case MySQLParser.MRG_MYISAM:
            case MySQLParser.MYISAM:
            case MySQLParser.NDB:
            case MySQLParser.NDBCLUSTER:
            case MySQLParser.PERFORMANCE_SCHEMA:
            case MySQLParser.TOKUDB:
            case MySQLParser.REPEATABLE:
            case MySQLParser.COMMITTED:
            case MySQLParser.UNCOMMITTED:
            case MySQLParser.SERIALIZABLE:
            case MySQLParser.GEOMETRYCOLLECTION:
            case MySQLParser.LINESTRING:
            case MySQLParser.MULTILINESTRING:
            case MySQLParser.MULTIPOINT:
            case MySQLParser.MULTIPOLYGON:
            case MySQLParser.POINT:
            case MySQLParser.POLYGON:
            case MySQLParser.ABS:
            case MySQLParser.ACOS:
            case MySQLParser.ADDDATE:
            case MySQLParser.ADDTIME:
            case MySQLParser.AES_DECRYPT:
            case MySQLParser.AES_ENCRYPT:
            case MySQLParser.AREA:
            case MySQLParser.ASBINARY:
            case MySQLParser.ASIN:
            case MySQLParser.ASTEXT:
            case MySQLParser.ASWKB:
            case MySQLParser.ASWKT:
            case MySQLParser.ASYMMETRIC_DECRYPT:
            case MySQLParser.ASYMMETRIC_DERIVE:
            case MySQLParser.ASYMMETRIC_ENCRYPT:
            case MySQLParser.ASYMMETRIC_SIGN:
            case MySQLParser.ASYMMETRIC_VERIFY:
            case MySQLParser.ATAN:
            case MySQLParser.ATAN2:
            case MySQLParser.BENCHMARK:
            case MySQLParser.BIN:
            case MySQLParser.BIT_COUNT:
            case MySQLParser.BIT_LENGTH:
            case MySQLParser.BUFFER:
            case MySQLParser.CATALOG_NAME:
            case MySQLParser.CEIL:
            case MySQLParser.CEILING:
            case MySQLParser.CENTROID:
            case MySQLParser.CHARACTER_LENGTH:
            case MySQLParser.CHARSET:
            case MySQLParser.CHAR_LENGTH:
            case MySQLParser.COERCIBILITY:
            case MySQLParser.COLLATION:
            case MySQLParser.COMPRESS:
            case MySQLParser.CONCAT:
            case MySQLParser.CONCAT_WS:
            case MySQLParser.CONNECTION_ID:
            case MySQLParser.CONV:
            case MySQLParser.CONVERT_TZ:
            case MySQLParser.COS:
            case MySQLParser.COT:
            case MySQLParser.CRC32:
            case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySQLParser.CREATE_DH_PARAMETERS:
            case MySQLParser.CREATE_DIGEST:
            case MySQLParser.CROSSES:
            case MySQLParser.DATEDIFF:
            case MySQLParser.DATE_FORMAT:
            case MySQLParser.DAYNAME:
            case MySQLParser.DAYOFMONTH:
            case MySQLParser.DAYOFWEEK:
            case MySQLParser.DAYOFYEAR:
            case MySQLParser.DECODE:
            case MySQLParser.DEGREES:
            case MySQLParser.DES_DECRYPT:
            case MySQLParser.DES_ENCRYPT:
            case MySQLParser.DIMENSION:
            case MySQLParser.DISJOINT:
            case MySQLParser.ELT:
            case MySQLParser.ENCODE:
            case MySQLParser.ENCRYPT:
            case MySQLParser.ENDPOINT:
            case MySQLParser.ENVELOPE:
            case MySQLParser.EQUALS:
            case MySQLParser.EXP:
            case MySQLParser.EXPORT_SET:
            case MySQLParser.EXTERIORRING:
            case MySQLParser.EXTRACTVALUE:
            case MySQLParser.FIELD:
            case MySQLParser.FIND_IN_SET:
            case MySQLParser.FLOOR:
            case MySQLParser.FORMAT:
            case MySQLParser.FOUND_ROWS:
            case MySQLParser.FROM_BASE64:
            case MySQLParser.FROM_DAYS:
            case MySQLParser.FROM_UNIXTIME:
            case MySQLParser.GEOMCOLLFROMTEXT:
            case MySQLParser.GEOMCOLLFROMWKB:
            case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.GEOMETRYFROMTEXT:
            case MySQLParser.GEOMETRYFROMWKB:
            case MySQLParser.GEOMETRYN:
            case MySQLParser.GEOMETRYTYPE:
            case MySQLParser.GEOMFROMTEXT:
            case MySQLParser.GEOMFROMWKB:
            case MySQLParser.GET_FORMAT:
            case MySQLParser.GET_LOCK:
            case MySQLParser.GLENGTH:
            case MySQLParser.GREATEST:
            case MySQLParser.GTID_SUBSET:
            case MySQLParser.GTID_SUBTRACT:
            case MySQLParser.HEX:
            case MySQLParser.IFNULL:
            case MySQLParser.INET6_ATON:
            case MySQLParser.INET6_NTOA:
            case MySQLParser.INET_ATON:
            case MySQLParser.INET_NTOA:
            case MySQLParser.INSTR:
            case MySQLParser.INTERIORRINGN:
            case MySQLParser.INTERSECTS:
            case MySQLParser.ISCLOSED:
            case MySQLParser.ISEMPTY:
            case MySQLParser.ISNULL:
            case MySQLParser.ISSIMPLE:
            case MySQLParser.IS_FREE_LOCK:
            case MySQLParser.IS_IPV4:
            case MySQLParser.IS_IPV4_COMPAT:
            case MySQLParser.IS_IPV4_MAPPED:
            case MySQLParser.IS_IPV6:
            case MySQLParser.IS_USED_LOCK:
            case MySQLParser.LAST_INSERT_ID:
            case MySQLParser.LCASE:
            case MySQLParser.LEAST:
            case MySQLParser.LENGTH:
            case MySQLParser.LINEFROMTEXT:
            case MySQLParser.LINEFROMWKB:
            case MySQLParser.LINESTRINGFROMTEXT:
            case MySQLParser.LINESTRINGFROMWKB:
            case MySQLParser.LN:
            case MySQLParser.LOAD_FILE:
            case MySQLParser.LOCATE:
            case MySQLParser.LOG:
            case MySQLParser.LOG10:
            case MySQLParser.LOG2:
            case MySQLParser.LOWER:
            case MySQLParser.LPAD:
            case MySQLParser.LTRIM:
            case MySQLParser.MAKEDATE:
            case MySQLParser.MAKETIME:
            case MySQLParser.MAKE_SET:
            case MySQLParser.MASTER_POS_WAIT:
            case MySQLParser.MBRCONTAINS:
            case MySQLParser.MBRDISJOINT:
            case MySQLParser.MBREQUAL:
            case MySQLParser.MBRINTERSECTS:
            case MySQLParser.MBROVERLAPS:
            case MySQLParser.MBRTOUCHES:
            case MySQLParser.MBRWITHIN:
            case MySQLParser.MD5:
            case MySQLParser.MLINEFROMTEXT:
            case MySQLParser.MLINEFROMWKB:
            case MySQLParser.MONTHNAME:
            case MySQLParser.MPOINTFROMTEXT:
            case MySQLParser.MPOINTFROMWKB:
            case MySQLParser.MPOLYFROMTEXT:
            case MySQLParser.MPOLYFROMWKB:
            case MySQLParser.MULTILINESTRINGFROMTEXT:
            case MySQLParser.MULTILINESTRINGFROMWKB:
            case MySQLParser.MULTIPOINTFROMTEXT:
            case MySQLParser.MULTIPOINTFROMWKB:
            case MySQLParser.MULTIPOLYGONFROMTEXT:
            case MySQLParser.MULTIPOLYGONFROMWKB:
            case MySQLParser.NAME_CONST:
            case MySQLParser.NULLIF:
            case MySQLParser.NUMGEOMETRIES:
            case MySQLParser.NUMINTERIORRINGS:
            case MySQLParser.NUMPOINTS:
            case MySQLParser.OCT:
            case MySQLParser.OCTET_LENGTH:
            case MySQLParser.ORD:
            case MySQLParser.OVERLAPS:
            case MySQLParser.PERIOD_ADD:
            case MySQLParser.PERIOD_DIFF:
            case MySQLParser.PI:
            case MySQLParser.POINTFROMTEXT:
            case MySQLParser.POINTFROMWKB:
            case MySQLParser.POINTN:
            case MySQLParser.POLYFROMTEXT:
            case MySQLParser.POLYFROMWKB:
            case MySQLParser.POLYGONFROMTEXT:
            case MySQLParser.POLYGONFROMWKB:
            case MySQLParser.POW:
            case MySQLParser.POWER:
            case MySQLParser.QUOTE:
            case MySQLParser.RADIANS:
            case MySQLParser.RAND:
            case MySQLParser.RANDOM_BYTES:
            case MySQLParser.RELEASE_LOCK:
            case MySQLParser.REVERSE:
            case MySQLParser.ROUND:
            case MySQLParser.ROW_COUNT:
            case MySQLParser.RPAD:
            case MySQLParser.RTRIM:
            case MySQLParser.SEC_TO_TIME:
            case MySQLParser.SESSION_USER:
            case MySQLParser.SHA:
            case MySQLParser.SHA1:
            case MySQLParser.SHA2:
            case MySQLParser.SCHEMA_NAME:
            case MySQLParser.SIGN:
            case MySQLParser.SIN:
            case MySQLParser.SLEEP:
            case MySQLParser.SOUNDEX:
            case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySQLParser.SQRT:
            case MySQLParser.SRID:
            case MySQLParser.STARTPOINT:
            case MySQLParser.STRCMP:
            case MySQLParser.STR_TO_DATE:
            case MySQLParser.ST_AREA:
            case MySQLParser.ST_ASBINARY:
            case MySQLParser.ST_ASTEXT:
            case MySQLParser.ST_ASWKB:
            case MySQLParser.ST_ASWKT:
            case MySQLParser.ST_BUFFER:
            case MySQLParser.ST_CENTROID:
            case MySQLParser.ST_CONTAINS:
            case MySQLParser.ST_CROSSES:
            case MySQLParser.ST_DIFFERENCE:
            case MySQLParser.ST_DIMENSION:
            case MySQLParser.ST_DISJOINT:
            case MySQLParser.ST_DISTANCE:
            case MySQLParser.ST_ENDPOINT:
            case MySQLParser.ST_ENVELOPE:
            case MySQLParser.ST_EQUALS:
            case MySQLParser.ST_EXTERIORRING:
            case MySQLParser.ST_GEOMCOLLFROMTEXT:
            case MySQLParser.ST_GEOMCOLLFROMTXT:
            case MySQLParser.ST_GEOMCOLLFROMWKB:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.ST_GEOMETRYFROMTEXT:
            case MySQLParser.ST_GEOMETRYFROMWKB:
            case MySQLParser.ST_GEOMETRYN:
            case MySQLParser.ST_GEOMETRYTYPE:
            case MySQLParser.ST_GEOMFROMTEXT:
            case MySQLParser.ST_GEOMFROMWKB:
            case MySQLParser.ST_INTERIORRINGN:
            case MySQLParser.ST_INTERSECTION:
            case MySQLParser.ST_INTERSECTS:
            case MySQLParser.ST_ISCLOSED:
            case MySQLParser.ST_ISEMPTY:
            case MySQLParser.ST_ISSIMPLE:
            case MySQLParser.ST_LINEFROMTEXT:
            case MySQLParser.ST_LINEFROMWKB:
            case MySQLParser.ST_LINESTRINGFROMTEXT:
            case MySQLParser.ST_LINESTRINGFROMWKB:
            case MySQLParser.ST_NUMGEOMETRIES:
            case MySQLParser.ST_NUMINTERIORRING:
            case MySQLParser.ST_NUMINTERIORRINGS:
            case MySQLParser.ST_NUMPOINTS:
            case MySQLParser.ST_OVERLAPS:
            case MySQLParser.ST_POINTFROMTEXT:
            case MySQLParser.ST_POINTFROMWKB:
            case MySQLParser.ST_POINTN:
            case MySQLParser.ST_POLYFROMTEXT:
            case MySQLParser.ST_POLYFROMWKB:
            case MySQLParser.ST_POLYGONFROMTEXT:
            case MySQLParser.ST_POLYGONFROMWKB:
            case MySQLParser.ST_SRID:
            case MySQLParser.ST_STARTPOINT:
            case MySQLParser.ST_SYMDIFFERENCE:
            case MySQLParser.ST_TOUCHES:
            case MySQLParser.ST_UNION:
            case MySQLParser.ST_WITHIN:
            case MySQLParser.ST_X:
            case MySQLParser.ST_Y:
            case MySQLParser.SUBDATE:
            case MySQLParser.SUBSTRING_INDEX:
            case MySQLParser.SUBTIME:
            case MySQLParser.SYSTEM_USER:
            case MySQLParser.TAN:
            case MySQLParser.TIMEDIFF:
            case MySQLParser.TIMESTAMPADD:
            case MySQLParser.TIMESTAMPDIFF:
            case MySQLParser.TIME_FORMAT:
            case MySQLParser.TIME_TO_SEC:
            case MySQLParser.TOUCHES:
            case MySQLParser.TO_BASE64:
            case MySQLParser.TO_DAYS:
            case MySQLParser.TO_SECONDS:
            case MySQLParser.UCASE:
            case MySQLParser.UNCOMPRESS:
            case MySQLParser.UNCOMPRESSED_LENGTH:
            case MySQLParser.UNHEX:
            case MySQLParser.UNIX_TIMESTAMP:
            case MySQLParser.UPDATEXML:
            case MySQLParser.UPPER:
            case MySQLParser.UUID:
            case MySQLParser.UUID_SHORT:
            case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
            case MySQLParser.VERSION:
            case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySQLParser.WEEKDAY:
            case MySQLParser.WEEKOFYEAR:
            case MySQLParser.WEIGHT_STRING:
            case MySQLParser.WITHIN:
            case MySQLParser.YEARWEEK:
            case MySQLParser.Y_FUNCTION:
            case MySQLParser.X_FUNCTION:
            case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySQLParser.STRING_LITERAL:
            case MySQLParser.ID:
            case MySQLParser.REVERSE_QUOTE_ID:
                this.state = 2610;
                this.uidList();
                break;
            case MySQLParser.ALL:
                this.state = 2611;
                this.match(MySQLParser.ALL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 45:
            localctx = new AlterByRemovePartitioningContext(this, localctx);
            this.enterOuterAlt(localctx, 45);
            this.state = 2614;
            this.match(MySQLParser.REMOVE);
            this.state = 2615;
            this.match(MySQLParser.PARTITIONING);
            break;

        case 46:
            localctx = new AlterByUpgradePartitioningContext(this, localctx);
            this.enterOuterAlt(localctx, 46);
            this.state = 2616;
            this.match(MySQLParser.UPGRADE);
            this.state = 2617;
            this.match(MySQLParser.PARTITIONING);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropDatabase;
    this.dbFormat = null; // Token
    return this;
}

DropDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropDatabaseContext.prototype.constructor = DropDatabaseContext;

DropDatabaseContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

DropDatabaseContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(MySQLParser.DATABASE, 0);
};

DropDatabaseContext.prototype.SCHEMA = function() {
    return this.getToken(MySQLParser.SCHEMA, 0);
};

DropDatabaseContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropDatabase(this);
	}
};

DropDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropDatabase(this);
	}
};

DropDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropDatabaseContext = DropDatabaseContext;

MySQLParser.prototype.dropDatabase = function() {

    var localctx = new DropDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, MySQLParser.RULE_dropDatabase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2620;
        this.match(MySQLParser.DROP);
        this.state = 2621;
        localctx.dbFormat = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.DATABASE || _la===MySQLParser.SCHEMA)) {
            localctx.dbFormat = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2623;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IF) {
            this.state = 2622;
            this.ifExists();
        }

        this.state = 2625;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropEventContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropEvent;
    return this;
}

DropEventContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropEventContext.prototype.constructor = DropEventContext;

DropEventContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

DropEventContext.prototype.EVENT = function() {
    return this.getToken(MySQLParser.EVENT, 0);
};

DropEventContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

DropEventContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropEventContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropEvent(this);
	}
};

DropEventContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropEvent(this);
	}
};

DropEventContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropEvent(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropEventContext = DropEventContext;

MySQLParser.prototype.dropEvent = function() {

    var localctx = new DropEventContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, MySQLParser.RULE_dropEvent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2627;
        this.match(MySQLParser.DROP);
        this.state = 2628;
        this.match(MySQLParser.EVENT);
        this.state = 2630;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IF) {
            this.state = 2629;
            this.ifExists();
        }

        this.state = 2632;
        this.fullId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropIndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropIndex;
    this.intimeAction = null; // Token
    this.algType = null; // Token
    this.lockType = null; // Token
    return this;
}

DropIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropIndexContext.prototype.constructor = DropIndexContext;

DropIndexContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

DropIndexContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

DropIndexContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropIndexContext.prototype.ON = function() {
    return this.getToken(MySQLParser.ON, 0);
};

DropIndexContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

DropIndexContext.prototype.ALGORITHM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.ALGORITHM);
    } else {
        return this.getToken(MySQLParser.ALGORITHM, i);
    }
};


DropIndexContext.prototype.LOCK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.LOCK);
    } else {
        return this.getToken(MySQLParser.LOCK, i);
    }
};


DropIndexContext.prototype.ONLINE = function() {
    return this.getToken(MySQLParser.ONLINE, 0);
};

DropIndexContext.prototype.OFFLINE = function() {
    return this.getToken(MySQLParser.OFFLINE, 0);
};

DropIndexContext.prototype.DEFAULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.DEFAULT);
    } else {
        return this.getToken(MySQLParser.DEFAULT, i);
    }
};


DropIndexContext.prototype.INPLACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.INPLACE);
    } else {
        return this.getToken(MySQLParser.INPLACE, i);
    }
};


DropIndexContext.prototype.COPY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COPY);
    } else {
        return this.getToken(MySQLParser.COPY, i);
    }
};


DropIndexContext.prototype.NONE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.NONE);
    } else {
        return this.getToken(MySQLParser.NONE, i);
    }
};


DropIndexContext.prototype.SHARED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.SHARED);
    } else {
        return this.getToken(MySQLParser.SHARED, i);
    }
};


DropIndexContext.prototype.EXCLUSIVE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.EXCLUSIVE);
    } else {
        return this.getToken(MySQLParser.EXCLUSIVE, i);
    }
};


DropIndexContext.prototype.EQUAL_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.EQUAL_SYMBOL);
    } else {
        return this.getToken(MySQLParser.EQUAL_SYMBOL, i);
    }
};


DropIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropIndex(this);
	}
};

DropIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropIndex(this);
	}
};

DropIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropIndexContext = DropIndexContext;

MySQLParser.prototype.dropIndex = function() {

    var localctx = new DropIndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, MySQLParser.RULE_dropIndex);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2634;
        this.match(MySQLParser.DROP);
        this.state = 2635;
        this.match(MySQLParser.INDEX);
        this.state = 2637;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,336,this._ctx);
        if(la_===1) {
            this.state = 2636;
            localctx.intimeAction = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.OFFLINE || _la===MySQLParser.ONLINE)) {
                localctx.intimeAction = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 2639;
        this.uid();
        this.state = 2640;
        this.match(MySQLParser.ON);
        this.state = 2641;
        this.tableName();
        this.state = 2654;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,340,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2652;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.ALGORITHM:
                    this.state = 2642;
                    this.match(MySQLParser.ALGORITHM);
                    this.state = 2644;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===MySQLParser.EQUAL_SYMBOL) {
                        this.state = 2643;
                        this.match(MySQLParser.EQUAL_SYMBOL);
                    }

                    this.state = 2646;
                    localctx.algType = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===MySQLParser.DEFAULT || _la===MySQLParser.COPY || _la===MySQLParser.INPLACE)) {
                        localctx.algType = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case MySQLParser.LOCK:
                    this.state = 2647;
                    this.match(MySQLParser.LOCK);
                    this.state = 2649;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===MySQLParser.EQUAL_SYMBOL) {
                        this.state = 2648;
                        this.match(MySQLParser.EQUAL_SYMBOL);
                    }

                    this.state = 2651;
                    localctx.lockType = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===MySQLParser.DEFAULT || _la===MySQLParser.EXCLUSIVE || _la===MySQLParser.NONE || _la===MySQLParser.SHARED)) {
                        localctx.lockType = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 2656;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,340,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropLogfileGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropLogfileGroup;
    return this;
}

DropLogfileGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropLogfileGroupContext.prototype.constructor = DropLogfileGroupContext;

DropLogfileGroupContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

DropLogfileGroupContext.prototype.LOGFILE = function() {
    return this.getToken(MySQLParser.LOGFILE, 0);
};

DropLogfileGroupContext.prototype.GROUP = function() {
    return this.getToken(MySQLParser.GROUP, 0);
};

DropLogfileGroupContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropLogfileGroupContext.prototype.ENGINE = function() {
    return this.getToken(MySQLParser.ENGINE, 0);
};

DropLogfileGroupContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

DropLogfileGroupContext.prototype.engineName = function() {
    return this.getTypedRuleContext(EngineNameContext,0);
};

DropLogfileGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropLogfileGroup(this);
	}
};

DropLogfileGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropLogfileGroup(this);
	}
};

DropLogfileGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropLogfileGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropLogfileGroupContext = DropLogfileGroupContext;

MySQLParser.prototype.dropLogfileGroup = function() {

    var localctx = new DropLogfileGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, MySQLParser.RULE_dropLogfileGroup);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2657;
        this.match(MySQLParser.DROP);
        this.state = 2658;
        this.match(MySQLParser.LOGFILE);
        this.state = 2659;
        this.match(MySQLParser.GROUP);
        this.state = 2660;
        this.uid();
        this.state = 2661;
        this.match(MySQLParser.ENGINE);
        this.state = 2662;
        this.match(MySQLParser.EQUAL_SYMBOL);
        this.state = 2663;
        this.engineName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropProcedureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropProcedure;
    return this;
}

DropProcedureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropProcedureContext.prototype.constructor = DropProcedureContext;

DropProcedureContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

DropProcedureContext.prototype.PROCEDURE = function() {
    return this.getToken(MySQLParser.PROCEDURE, 0);
};

DropProcedureContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

DropProcedureContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropProcedureContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropProcedure(this);
	}
};

DropProcedureContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropProcedure(this);
	}
};

DropProcedureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropProcedure(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropProcedureContext = DropProcedureContext;

MySQLParser.prototype.dropProcedure = function() {

    var localctx = new DropProcedureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, MySQLParser.RULE_dropProcedure);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2665;
        this.match(MySQLParser.DROP);
        this.state = 2666;
        this.match(MySQLParser.PROCEDURE);
        this.state = 2668;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IF) {
            this.state = 2667;
            this.ifExists();
        }

        this.state = 2670;
        this.fullId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropFunction;
    return this;
}

DropFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropFunctionContext.prototype.constructor = DropFunctionContext;

DropFunctionContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

DropFunctionContext.prototype.FUNCTION = function() {
    return this.getToken(MySQLParser.FUNCTION, 0);
};

DropFunctionContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

DropFunctionContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropFunction(this);
	}
};

DropFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropFunction(this);
	}
};

DropFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropFunctionContext = DropFunctionContext;

MySQLParser.prototype.dropFunction = function() {

    var localctx = new DropFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, MySQLParser.RULE_dropFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2672;
        this.match(MySQLParser.DROP);
        this.state = 2673;
        this.match(MySQLParser.FUNCTION);
        this.state = 2675;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IF) {
            this.state = 2674;
            this.ifExists();
        }

        this.state = 2677;
        this.fullId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropServerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropServer;
    return this;
}

DropServerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropServerContext.prototype.constructor = DropServerContext;

DropServerContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

DropServerContext.prototype.SERVER = function() {
    return this.getToken(MySQLParser.SERVER, 0);
};

DropServerContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropServerContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropServerContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropServer(this);
	}
};

DropServerContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropServer(this);
	}
};

DropServerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropServer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropServerContext = DropServerContext;

MySQLParser.prototype.dropServer = function() {

    var localctx = new DropServerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, MySQLParser.RULE_dropServer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2679;
        this.match(MySQLParser.DROP);
        this.state = 2680;
        this.match(MySQLParser.SERVER);
        this.state = 2682;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IF) {
            this.state = 2681;
            this.ifExists();
        }

        this.state = 2684;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropTable;
    this.dropType = null; // Token
    return this;
}

DropTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTableContext.prototype.constructor = DropTableContext;

DropTableContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

DropTableContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

DropTableContext.prototype.tables = function() {
    return this.getTypedRuleContext(TablesContext,0);
};

DropTableContext.prototype.TEMPORARY = function() {
    return this.getToken(MySQLParser.TEMPORARY, 0);
};

DropTableContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropTableContext.prototype.RESTRICT = function() {
    return this.getToken(MySQLParser.RESTRICT, 0);
};

DropTableContext.prototype.CASCADE = function() {
    return this.getToken(MySQLParser.CASCADE, 0);
};

DropTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropTable(this);
	}
};

DropTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropTable(this);
	}
};

DropTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropTableContext = DropTableContext;

MySQLParser.prototype.dropTable = function() {

    var localctx = new DropTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, MySQLParser.RULE_dropTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2686;
        this.match(MySQLParser.DROP);
        this.state = 2688;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.TEMPORARY) {
            this.state = 2687;
            this.match(MySQLParser.TEMPORARY);
        }

        this.state = 2690;
        this.match(MySQLParser.TABLE);
        this.state = 2692;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IF) {
            this.state = 2691;
            this.ifExists();
        }

        this.state = 2694;
        this.tables();
        this.state = 2696;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.CASCADE || _la===MySQLParser.RESTRICT) {
            this.state = 2695;
            localctx.dropType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CASCADE || _la===MySQLParser.RESTRICT)) {
                localctx.dropType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropTablespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropTablespace;
    return this;
}

DropTablespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTablespaceContext.prototype.constructor = DropTablespaceContext;

DropTablespaceContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

DropTablespaceContext.prototype.TABLESPACE = function() {
    return this.getToken(MySQLParser.TABLESPACE, 0);
};

DropTablespaceContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropTablespaceContext.prototype.ENGINE = function() {
    return this.getToken(MySQLParser.ENGINE, 0);
};

DropTablespaceContext.prototype.engineName = function() {
    return this.getTypedRuleContext(EngineNameContext,0);
};

DropTablespaceContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

DropTablespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropTablespace(this);
	}
};

DropTablespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropTablespace(this);
	}
};

DropTablespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropTablespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropTablespaceContext = DropTablespaceContext;

MySQLParser.prototype.dropTablespace = function() {

    var localctx = new DropTablespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, MySQLParser.RULE_dropTablespace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2698;
        this.match(MySQLParser.DROP);
        this.state = 2699;
        this.match(MySQLParser.TABLESPACE);
        this.state = 2700;
        this.uid();
        this.state = 2706;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ENGINE) {
            this.state = 2701;
            this.match(MySQLParser.ENGINE);
            this.state = 2703;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.EQUAL_SYMBOL) {
                this.state = 2702;
                this.match(MySQLParser.EQUAL_SYMBOL);
            }

            this.state = 2705;
            this.engineName();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropTriggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropTrigger;
    return this;
}

DropTriggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTriggerContext.prototype.constructor = DropTriggerContext;

DropTriggerContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

DropTriggerContext.prototype.TRIGGER = function() {
    return this.getToken(MySQLParser.TRIGGER, 0);
};

DropTriggerContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

DropTriggerContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropTriggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropTrigger(this);
	}
};

DropTriggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropTrigger(this);
	}
};

DropTriggerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropTrigger(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropTriggerContext = DropTriggerContext;

MySQLParser.prototype.dropTrigger = function() {

    var localctx = new DropTriggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, MySQLParser.RULE_dropTrigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2708;
        this.match(MySQLParser.DROP);
        this.state = 2709;
        this.match(MySQLParser.TRIGGER);
        this.state = 2711;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IF) {
            this.state = 2710;
            this.ifExists();
        }

        this.state = 2713;
        this.fullId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropView;
    this.dropType = null; // Token
    return this;
}

DropViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropViewContext.prototype.constructor = DropViewContext;

DropViewContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

DropViewContext.prototype.VIEW = function() {
    return this.getToken(MySQLParser.VIEW, 0);
};

DropViewContext.prototype.fullId = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FullIdContext);
    } else {
        return this.getTypedRuleContext(FullIdContext,i);
    }
};

DropViewContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropViewContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


DropViewContext.prototype.RESTRICT = function() {
    return this.getToken(MySQLParser.RESTRICT, 0);
};

DropViewContext.prototype.CASCADE = function() {
    return this.getToken(MySQLParser.CASCADE, 0);
};

DropViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropView(this);
	}
};

DropViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropView(this);
	}
};

DropViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropViewContext = DropViewContext;

MySQLParser.prototype.dropView = function() {

    var localctx = new DropViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, MySQLParser.RULE_dropView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2715;
        this.match(MySQLParser.DROP);
        this.state = 2716;
        this.match(MySQLParser.VIEW);
        this.state = 2718;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IF) {
            this.state = 2717;
            this.ifExists();
        }

        this.state = 2720;
        this.fullId();
        this.state = 2725;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 2721;
            this.match(MySQLParser.COMMA);
            this.state = 2722;
            this.fullId();
            this.state = 2727;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2729;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.CASCADE || _la===MySQLParser.RESTRICT) {
            this.state = 2728;
            localctx.dropType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CASCADE || _la===MySQLParser.RESTRICT)) {
                localctx.dropType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RenameTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_renameTable;
    return this;
}

RenameTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenameTableContext.prototype.constructor = RenameTableContext;

RenameTableContext.prototype.RENAME = function() {
    return this.getToken(MySQLParser.RENAME, 0);
};

RenameTableContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

RenameTableContext.prototype.renameTableClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RenameTableClauseContext);
    } else {
        return this.getTypedRuleContext(RenameTableClauseContext,i);
    }
};

RenameTableContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


RenameTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRenameTable(this);
	}
};

RenameTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRenameTable(this);
	}
};

RenameTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRenameTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RenameTableContext = RenameTableContext;

MySQLParser.prototype.renameTable = function() {

    var localctx = new RenameTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, MySQLParser.RULE_renameTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2731;
        this.match(MySQLParser.RENAME);
        this.state = 2732;
        this.match(MySQLParser.TABLE);
        this.state = 2733;
        this.renameTableClause();
        this.state = 2738;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 2734;
            this.match(MySQLParser.COMMA);
            this.state = 2735;
            this.renameTableClause();
            this.state = 2740;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RenameTableClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_renameTableClause;
    return this;
}

RenameTableClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenameTableClauseContext.prototype.constructor = RenameTableClauseContext;

RenameTableClauseContext.prototype.tableName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableNameContext);
    } else {
        return this.getTypedRuleContext(TableNameContext,i);
    }
};

RenameTableClauseContext.prototype.TO = function() {
    return this.getToken(MySQLParser.TO, 0);
};

RenameTableClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRenameTableClause(this);
	}
};

RenameTableClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRenameTableClause(this);
	}
};

RenameTableClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRenameTableClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RenameTableClauseContext = RenameTableClauseContext;

MySQLParser.prototype.renameTableClause = function() {

    var localctx = new RenameTableClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, MySQLParser.RULE_renameTableClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2741;
        this.tableName();
        this.state = 2742;
        this.match(MySQLParser.TO);
        this.state = 2743;
        this.tableName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TruncateTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_truncateTable;
    return this;
}

TruncateTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TruncateTableContext.prototype.constructor = TruncateTableContext;

TruncateTableContext.prototype.TRUNCATE = function() {
    return this.getToken(MySQLParser.TRUNCATE, 0);
};

TruncateTableContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

TruncateTableContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

TruncateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTruncateTable(this);
	}
};

TruncateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTruncateTable(this);
	}
};

TruncateTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTruncateTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TruncateTableContext = TruncateTableContext;

MySQLParser.prototype.truncateTable = function() {

    var localctx = new TruncateTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, MySQLParser.RULE_truncateTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2745;
        this.match(MySQLParser.TRUNCATE);
        this.state = 2747;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.TABLE) {
            this.state = 2746;
            this.match(MySQLParser.TABLE);
        }

        this.state = 2749;
        this.tableName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CallStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_callStatement;
    return this;
}

CallStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallStatementContext.prototype.constructor = CallStatementContext;

CallStatementContext.prototype.CALL = function() {
    return this.getToken(MySQLParser.CALL, 0);
};

CallStatementContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

CallStatementContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

CallStatementContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

CallStatementContext.prototype.constants = function() {
    return this.getTypedRuleContext(ConstantsContext,0);
};

CallStatementContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

CallStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCallStatement(this);
	}
};

CallStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCallStatement(this);
	}
};

CallStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCallStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CallStatementContext = CallStatementContext;

MySQLParser.prototype.callStatement = function() {

    var localctx = new CallStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, MySQLParser.RULE_callStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2751;
        this.match(MySQLParser.CALL);
        this.state = 2752;
        this.fullId();
        this.state = 2759;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,356,this._ctx);
        if(la_===1) {
            this.state = 2753;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 2756;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,355,this._ctx);
            if(la_===1) {
                this.state = 2754;
                this.constants();

            } else if(la_===2) {
                this.state = 2755;
                this.expressions();

            }
            this.state = 2758;
            this.match(MySQLParser.RR_BRACKET);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeleteStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_deleteStatement;
    return this;
}

DeleteStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteStatementContext.prototype.constructor = DeleteStatementContext;

DeleteStatementContext.prototype.singleDeleteStatement = function() {
    return this.getTypedRuleContext(SingleDeleteStatementContext,0);
};

DeleteStatementContext.prototype.multipleDeleteStatement = function() {
    return this.getTypedRuleContext(MultipleDeleteStatementContext,0);
};

DeleteStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDeleteStatement(this);
	}
};

DeleteStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDeleteStatement(this);
	}
};

DeleteStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDeleteStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DeleteStatementContext = DeleteStatementContext;

MySQLParser.prototype.deleteStatement = function() {

    var localctx = new DeleteStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, MySQLParser.RULE_deleteStatement);
    try {
        this.state = 2763;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,357,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2761;
            this.singleDeleteStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2762;
            this.multipleDeleteStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DoStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_doStatement;
    return this;
}

DoStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoStatementContext.prototype.constructor = DoStatementContext;

DoStatementContext.prototype.DO = function() {
    return this.getToken(MySQLParser.DO, 0);
};

DoStatementContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

DoStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDoStatement(this);
	}
};

DoStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDoStatement(this);
	}
};

DoStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDoStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DoStatementContext = DoStatementContext;

MySQLParser.prototype.doStatement = function() {

    var localctx = new DoStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, MySQLParser.RULE_doStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2765;
        this.match(MySQLParser.DO);
        this.state = 2766;
        this.expressions();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HandlerStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_handlerStatement;
    return this;
}

HandlerStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlerStatementContext.prototype.constructor = HandlerStatementContext;

HandlerStatementContext.prototype.handlerOpenStatement = function() {
    return this.getTypedRuleContext(HandlerOpenStatementContext,0);
};

HandlerStatementContext.prototype.handlerReadIndexStatement = function() {
    return this.getTypedRuleContext(HandlerReadIndexStatementContext,0);
};

HandlerStatementContext.prototype.handlerReadStatement = function() {
    return this.getTypedRuleContext(HandlerReadStatementContext,0);
};

HandlerStatementContext.prototype.handlerCloseStatement = function() {
    return this.getTypedRuleContext(HandlerCloseStatementContext,0);
};

HandlerStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHandlerStatement(this);
	}
};

HandlerStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHandlerStatement(this);
	}
};

HandlerStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHandlerStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.HandlerStatementContext = HandlerStatementContext;

MySQLParser.prototype.handlerStatement = function() {

    var localctx = new HandlerStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, MySQLParser.RULE_handlerStatement);
    try {
        this.state = 2772;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,358,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2768;
            this.handlerOpenStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2769;
            this.handlerReadIndexStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2770;
            this.handlerReadStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2771;
            this.handlerCloseStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_insertStatement;
    this.priority = null; // Token
    this.partitions = null; // UidListContext
    this.columns = null; // UidListContext
    this.setFirst = null; // UpdatedElementContext
    this._updatedElement = null; // UpdatedElementContext
    this.setElements = []; // of UpdatedElementContexts
    this.duplicatedFirst = null; // UpdatedElementContext
    this.duplicatedElements = []; // of UpdatedElementContexts
    return this;
}

InsertStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertStatementContext.prototype.constructor = InsertStatementContext;

InsertStatementContext.prototype.INSERT = function() {
    return this.getToken(MySQLParser.INSERT, 0);
};

InsertStatementContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

InsertStatementContext.prototype.insertStatementValue = function() {
    return this.getTypedRuleContext(InsertStatementValueContext,0);
};

InsertStatementContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

InsertStatementContext.prototype.IGNORE = function() {
    return this.getToken(MySQLParser.IGNORE, 0);
};

InsertStatementContext.prototype.INTO = function() {
    return this.getToken(MySQLParser.INTO, 0);
};

InsertStatementContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

InsertStatementContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.LR_BRACKET);
    } else {
        return this.getToken(MySQLParser.LR_BRACKET, i);
    }
};


InsertStatementContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.RR_BRACKET);
    } else {
        return this.getToken(MySQLParser.RR_BRACKET, i);
    }
};


InsertStatementContext.prototype.updatedElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UpdatedElementContext);
    } else {
        return this.getTypedRuleContext(UpdatedElementContext,i);
    }
};

InsertStatementContext.prototype.ON = function() {
    return this.getToken(MySQLParser.ON, 0);
};

InsertStatementContext.prototype.DUPLICATE = function() {
    return this.getToken(MySQLParser.DUPLICATE, 0);
};

InsertStatementContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};

InsertStatementContext.prototype.UPDATE = function() {
    return this.getToken(MySQLParser.UPDATE, 0);
};

InsertStatementContext.prototype.LOW_PRIORITY = function() {
    return this.getToken(MySQLParser.LOW_PRIORITY, 0);
};

InsertStatementContext.prototype.DELAYED = function() {
    return this.getToken(MySQLParser.DELAYED, 0);
};

InsertStatementContext.prototype.HIGH_PRIORITY = function() {
    return this.getToken(MySQLParser.HIGH_PRIORITY, 0);
};

InsertStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


InsertStatementContext.prototype.uidList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidListContext);
    } else {
        return this.getTypedRuleContext(UidListContext,i);
    }
};

InsertStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInsertStatement(this);
	}
};

InsertStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInsertStatement(this);
	}
};

InsertStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInsertStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.InsertStatementContext = InsertStatementContext;

MySQLParser.prototype.insertStatement = function() {

    var localctx = new InsertStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, MySQLParser.RULE_insertStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2774;
        this.match(MySQLParser.INSERT);
        this.state = 2776;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DELAYED || _la===MySQLParser.HIGH_PRIORITY || _la===MySQLParser.LOW_PRIORITY) {
            this.state = 2775;
            localctx.priority = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DELAYED || _la===MySQLParser.HIGH_PRIORITY || _la===MySQLParser.LOW_PRIORITY)) {
                localctx.priority = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2779;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IGNORE) {
            this.state = 2778;
            this.match(MySQLParser.IGNORE);
        }

        this.state = 2782;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.INTO) {
            this.state = 2781;
            this.match(MySQLParser.INTO);
        }

        this.state = 2784;
        this.tableName();
        this.state = 2791;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.PARTITION) {
            this.state = 2785;
            this.match(MySQLParser.PARTITION);
            this.state = 2786;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 2788;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                this.state = 2787;
                localctx.partitions = this.uidList();
            }

            this.state = 2790;
            this.match(MySQLParser.RR_BRACKET);
        }

        this.state = 2809;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.SELECT:
        case MySQLParser.VALUES:
        case MySQLParser.VALUE:
        case MySQLParser.LR_BRACKET:
            this.state = 2797;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,364,this._ctx);
            if(la_===1) {
                this.state = 2793;
                this.match(MySQLParser.LR_BRACKET);
                this.state = 2794;
                localctx.columns = this.uidList();
                this.state = 2795;
                this.match(MySQLParser.RR_BRACKET);

            }
            this.state = 2799;
            this.insertStatementValue();
            break;
        case MySQLParser.SET:
            this.state = 2800;
            this.match(MySQLParser.SET);
            this.state = 2801;
            localctx.setFirst = this.updatedElement();
            this.state = 2806;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 2802;
                this.match(MySQLParser.COMMA);
                this.state = 2803;
                localctx._updatedElement = this.updatedElement();
                localctx.setElements.push(localctx._updatedElement);
                this.state = 2808;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2823;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ON) {
            this.state = 2811;
            this.match(MySQLParser.ON);
            this.state = 2812;
            this.match(MySQLParser.DUPLICATE);
            this.state = 2813;
            this.match(MySQLParser.KEY);
            this.state = 2814;
            this.match(MySQLParser.UPDATE);
            this.state = 2815;
            localctx.duplicatedFirst = this.updatedElement();
            this.state = 2820;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 2816;
                this.match(MySQLParser.COMMA);
                this.state = 2817;
                localctx._updatedElement = this.updatedElement();
                localctx.duplicatedElements.push(localctx._updatedElement);
                this.state = 2822;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LoadDataStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_loadDataStatement;
    this.priority = null; // Token
    this.filename = null; // Token
    this.violation = null; // Token
    this.charset = null; // CharsetNameContext
    this.fieldsFormat = null; // Token
    this.linesFormat = null; // Token
    return this;
}

LoadDataStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoadDataStatementContext.prototype.constructor = LoadDataStatementContext;

LoadDataStatementContext.prototype.LOAD = function() {
    return this.getToken(MySQLParser.LOAD, 0);
};

LoadDataStatementContext.prototype.DATA = function() {
    return this.getToken(MySQLParser.DATA, 0);
};

LoadDataStatementContext.prototype.INFILE = function() {
    return this.getToken(MySQLParser.INFILE, 0);
};

LoadDataStatementContext.prototype.INTO = function() {
    return this.getToken(MySQLParser.INTO, 0);
};

LoadDataStatementContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

LoadDataStatementContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

LoadDataStatementContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

LoadDataStatementContext.prototype.LOCAL = function() {
    return this.getToken(MySQLParser.LOCAL, 0);
};

LoadDataStatementContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

LoadDataStatementContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.LR_BRACKET);
    } else {
        return this.getToken(MySQLParser.LR_BRACKET, i);
    }
};


LoadDataStatementContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

LoadDataStatementContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.RR_BRACKET);
    } else {
        return this.getToken(MySQLParser.RR_BRACKET, i);
    }
};


LoadDataStatementContext.prototype.CHARACTER = function() {
    return this.getToken(MySQLParser.CHARACTER, 0);
};

LoadDataStatementContext.prototype.SET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.SET);
    } else {
        return this.getToken(MySQLParser.SET, i);
    }
};


LoadDataStatementContext.prototype.LINES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.LINES);
    } else {
        return this.getToken(MySQLParser.LINES, i);
    }
};


LoadDataStatementContext.prototype.IGNORE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.IGNORE);
    } else {
        return this.getToken(MySQLParser.IGNORE, i);
    }
};


LoadDataStatementContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

LoadDataStatementContext.prototype.assignmentField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentFieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentFieldContext,i);
    }
};

LoadDataStatementContext.prototype.updatedElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UpdatedElementContext);
    } else {
        return this.getTypedRuleContext(UpdatedElementContext,i);
    }
};

LoadDataStatementContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

LoadDataStatementContext.prototype.LOW_PRIORITY = function() {
    return this.getToken(MySQLParser.LOW_PRIORITY, 0);
};

LoadDataStatementContext.prototype.CONCURRENT = function() {
    return this.getToken(MySQLParser.CONCURRENT, 0);
};

LoadDataStatementContext.prototype.REPLACE = function() {
    return this.getToken(MySQLParser.REPLACE, 0);
};

LoadDataStatementContext.prototype.FIELDS = function() {
    return this.getToken(MySQLParser.FIELDS, 0);
};

LoadDataStatementContext.prototype.COLUMNS = function() {
    return this.getToken(MySQLParser.COLUMNS, 0);
};

LoadDataStatementContext.prototype.ROWS = function() {
    return this.getToken(MySQLParser.ROWS, 0);
};

LoadDataStatementContext.prototype.selectFieldsInto = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectFieldsIntoContext);
    } else {
        return this.getTypedRuleContext(SelectFieldsIntoContext,i);
    }
};

LoadDataStatementContext.prototype.selectLinesInto = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectLinesIntoContext);
    } else {
        return this.getTypedRuleContext(SelectLinesIntoContext,i);
    }
};

LoadDataStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


LoadDataStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLoadDataStatement(this);
	}
};

LoadDataStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLoadDataStatement(this);
	}
};

LoadDataStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLoadDataStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LoadDataStatementContext = LoadDataStatementContext;

MySQLParser.prototype.loadDataStatement = function() {

    var localctx = new LoadDataStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, MySQLParser.RULE_loadDataStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2825;
        this.match(MySQLParser.LOAD);
        this.state = 2826;
        this.match(MySQLParser.DATA);
        this.state = 2828;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LOW_PRIORITY || _la===MySQLParser.CONCURRENT) {
            this.state = 2827;
            localctx.priority = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.LOW_PRIORITY || _la===MySQLParser.CONCURRENT)) {
                localctx.priority = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2831;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LOCAL) {
            this.state = 2830;
            this.match(MySQLParser.LOCAL);
        }

        this.state = 2833;
        this.match(MySQLParser.INFILE);
        this.state = 2834;
        localctx.filename = this.match(MySQLParser.STRING_LITERAL);
        this.state = 2836;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IGNORE || _la===MySQLParser.REPLACE) {
            this.state = 2835;
            localctx.violation = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.IGNORE || _la===MySQLParser.REPLACE)) {
                localctx.violation = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2838;
        this.match(MySQLParser.INTO);
        this.state = 2839;
        this.match(MySQLParser.TABLE);
        this.state = 2840;
        this.tableName();
        this.state = 2846;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.PARTITION) {
            this.state = 2841;
            this.match(MySQLParser.PARTITION);
            this.state = 2842;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 2843;
            this.uidList();
            this.state = 2844;
            this.match(MySQLParser.RR_BRACKET);
        }

        this.state = 2851;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.CHARACTER) {
            this.state = 2848;
            this.match(MySQLParser.CHARACTER);
            this.state = 2849;
            this.match(MySQLParser.SET);
            this.state = 2850;
            localctx.charset = this.charsetName();
        }

        this.state = 2859;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.COLUMNS || _la===MySQLParser.FIELDS) {
            this.state = 2853;
            localctx.fieldsFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.COLUMNS || _la===MySQLParser.FIELDS)) {
                localctx.fieldsFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2855; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2854;
                this.selectFieldsInto();
                this.state = 2857; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===MySQLParser.ENCLOSED || _la===MySQLParser.ESCAPED || _la===MySQLParser.OPTIONALLY || _la===MySQLParser.TERMINATED);
        }

        this.state = 2867;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LINES) {
            this.state = 2861;
            this.match(MySQLParser.LINES);
            this.state = 2863; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2862;
                this.selectLinesInto();
                this.state = 2865; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===MySQLParser.STARTING || _la===MySQLParser.TERMINATED);
        }

        this.state = 2873;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IGNORE) {
            this.state = 2869;
            this.match(MySQLParser.IGNORE);
            this.state = 2870;
            this.decimalLiteral();
            this.state = 2871;
            localctx.linesFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.LINES || _la===MySQLParser.ROWS)) {
                localctx.linesFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2886;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,380,this._ctx);
        if(la_===1) {
            this.state = 2875;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 2876;
            this.assignmentField();
            this.state = 2881;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 2877;
                this.match(MySQLParser.COMMA);
                this.state = 2878;
                this.assignmentField();
                this.state = 2883;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2884;
            this.match(MySQLParser.RR_BRACKET);

        }
        this.state = 2897;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,382,this._ctx);
        if(la_===1) {
            this.state = 2888;
            this.match(MySQLParser.SET);
            this.state = 2889;
            this.updatedElement();
            this.state = 2894;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 2890;
                this.match(MySQLParser.COMMA);
                this.state = 2891;
                this.updatedElement();
                this.state = 2896;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LoadXmlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_loadXmlStatement;
    this.priority = null; // Token
    this.filename = null; // Token
    this.violation = null; // Token
    this.charset = null; // CharsetNameContext
    this.tag = null; // Token
    this.linesFormat = null; // Token
    return this;
}

LoadXmlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoadXmlStatementContext.prototype.constructor = LoadXmlStatementContext;

LoadXmlStatementContext.prototype.LOAD = function() {
    return this.getToken(MySQLParser.LOAD, 0);
};

LoadXmlStatementContext.prototype.XML = function() {
    return this.getToken(MySQLParser.XML, 0);
};

LoadXmlStatementContext.prototype.INFILE = function() {
    return this.getToken(MySQLParser.INFILE, 0);
};

LoadXmlStatementContext.prototype.INTO = function() {
    return this.getToken(MySQLParser.INTO, 0);
};

LoadXmlStatementContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

LoadXmlStatementContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

LoadXmlStatementContext.prototype.STRING_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.STRING_LITERAL);
    } else {
        return this.getToken(MySQLParser.STRING_LITERAL, i);
    }
};


LoadXmlStatementContext.prototype.LOCAL = function() {
    return this.getToken(MySQLParser.LOCAL, 0);
};

LoadXmlStatementContext.prototype.CHARACTER = function() {
    return this.getToken(MySQLParser.CHARACTER, 0);
};

LoadXmlStatementContext.prototype.SET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.SET);
    } else {
        return this.getToken(MySQLParser.SET, i);
    }
};


LoadXmlStatementContext.prototype.ROWS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.ROWS);
    } else {
        return this.getToken(MySQLParser.ROWS, i);
    }
};


LoadXmlStatementContext.prototype.IDENTIFIED = function() {
    return this.getToken(MySQLParser.IDENTIFIED, 0);
};

LoadXmlStatementContext.prototype.BY = function() {
    return this.getToken(MySQLParser.BY, 0);
};

LoadXmlStatementContext.prototype.LESS_SYMBOL = function() {
    return this.getToken(MySQLParser.LESS_SYMBOL, 0);
};

LoadXmlStatementContext.prototype.GREATER_SYMBOL = function() {
    return this.getToken(MySQLParser.GREATER_SYMBOL, 0);
};

LoadXmlStatementContext.prototype.IGNORE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.IGNORE);
    } else {
        return this.getToken(MySQLParser.IGNORE, i);
    }
};


LoadXmlStatementContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

LoadXmlStatementContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

LoadXmlStatementContext.prototype.assignmentField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentFieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentFieldContext,i);
    }
};

LoadXmlStatementContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

LoadXmlStatementContext.prototype.updatedElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UpdatedElementContext);
    } else {
        return this.getTypedRuleContext(UpdatedElementContext,i);
    }
};

LoadXmlStatementContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

LoadXmlStatementContext.prototype.LOW_PRIORITY = function() {
    return this.getToken(MySQLParser.LOW_PRIORITY, 0);
};

LoadXmlStatementContext.prototype.CONCURRENT = function() {
    return this.getToken(MySQLParser.CONCURRENT, 0);
};

LoadXmlStatementContext.prototype.REPLACE = function() {
    return this.getToken(MySQLParser.REPLACE, 0);
};

LoadXmlStatementContext.prototype.LINES = function() {
    return this.getToken(MySQLParser.LINES, 0);
};

LoadXmlStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


LoadXmlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLoadXmlStatement(this);
	}
};

LoadXmlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLoadXmlStatement(this);
	}
};

LoadXmlStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLoadXmlStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LoadXmlStatementContext = LoadXmlStatementContext;

MySQLParser.prototype.loadXmlStatement = function() {

    var localctx = new LoadXmlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, MySQLParser.RULE_loadXmlStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2899;
        this.match(MySQLParser.LOAD);
        this.state = 2900;
        this.match(MySQLParser.XML);
        this.state = 2902;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LOW_PRIORITY || _la===MySQLParser.CONCURRENT) {
            this.state = 2901;
            localctx.priority = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.LOW_PRIORITY || _la===MySQLParser.CONCURRENT)) {
                localctx.priority = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2905;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LOCAL) {
            this.state = 2904;
            this.match(MySQLParser.LOCAL);
        }

        this.state = 2907;
        this.match(MySQLParser.INFILE);
        this.state = 2908;
        localctx.filename = this.match(MySQLParser.STRING_LITERAL);
        this.state = 2910;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IGNORE || _la===MySQLParser.REPLACE) {
            this.state = 2909;
            localctx.violation = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.IGNORE || _la===MySQLParser.REPLACE)) {
                localctx.violation = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2912;
        this.match(MySQLParser.INTO);
        this.state = 2913;
        this.match(MySQLParser.TABLE);
        this.state = 2914;
        this.tableName();
        this.state = 2918;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.CHARACTER) {
            this.state = 2915;
            this.match(MySQLParser.CHARACTER);
            this.state = 2916;
            this.match(MySQLParser.SET);
            this.state = 2917;
            localctx.charset = this.charsetName();
        }

        this.state = 2926;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ROWS) {
            this.state = 2920;
            this.match(MySQLParser.ROWS);
            this.state = 2921;
            this.match(MySQLParser.IDENTIFIED);
            this.state = 2922;
            this.match(MySQLParser.BY);
            this.state = 2923;
            this.match(MySQLParser.LESS_SYMBOL);
            this.state = 2924;
            localctx.tag = this.match(MySQLParser.STRING_LITERAL);
            this.state = 2925;
            this.match(MySQLParser.GREATER_SYMBOL);
        }

        this.state = 2932;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IGNORE) {
            this.state = 2928;
            this.match(MySQLParser.IGNORE);
            this.state = 2929;
            this.decimalLiteral();
            this.state = 2930;
            localctx.linesFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.LINES || _la===MySQLParser.ROWS)) {
                localctx.linesFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2945;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,390,this._ctx);
        if(la_===1) {
            this.state = 2934;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 2935;
            this.assignmentField();
            this.state = 2940;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 2936;
                this.match(MySQLParser.COMMA);
                this.state = 2937;
                this.assignmentField();
                this.state = 2942;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2943;
            this.match(MySQLParser.RR_BRACKET);

        }
        this.state = 2956;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,392,this._ctx);
        if(la_===1) {
            this.state = 2947;
            this.match(MySQLParser.SET);
            this.state = 2948;
            this.updatedElement();
            this.state = 2953;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 2949;
                this.match(MySQLParser.COMMA);
                this.state = 2950;
                this.updatedElement();
                this.state = 2955;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReplaceStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_replaceStatement;
    this.priority = null; // Token
    this.partitions = null; // UidListContext
    this.columns = null; // UidListContext
    this.setFirst = null; // UpdatedElementContext
    this._updatedElement = null; // UpdatedElementContext
    this.setElements = []; // of UpdatedElementContexts
    return this;
}

ReplaceStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplaceStatementContext.prototype.constructor = ReplaceStatementContext;

ReplaceStatementContext.prototype.REPLACE = function() {
    return this.getToken(MySQLParser.REPLACE, 0);
};

ReplaceStatementContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

ReplaceStatementContext.prototype.insertStatementValue = function() {
    return this.getTypedRuleContext(InsertStatementValueContext,0);
};

ReplaceStatementContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

ReplaceStatementContext.prototype.INTO = function() {
    return this.getToken(MySQLParser.INTO, 0);
};

ReplaceStatementContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

ReplaceStatementContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.LR_BRACKET);
    } else {
        return this.getToken(MySQLParser.LR_BRACKET, i);
    }
};


ReplaceStatementContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.RR_BRACKET);
    } else {
        return this.getToken(MySQLParser.RR_BRACKET, i);
    }
};


ReplaceStatementContext.prototype.updatedElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UpdatedElementContext);
    } else {
        return this.getTypedRuleContext(UpdatedElementContext,i);
    }
};

ReplaceStatementContext.prototype.uidList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidListContext);
    } else {
        return this.getTypedRuleContext(UidListContext,i);
    }
};

ReplaceStatementContext.prototype.LOW_PRIORITY = function() {
    return this.getToken(MySQLParser.LOW_PRIORITY, 0);
};

ReplaceStatementContext.prototype.DELAYED = function() {
    return this.getToken(MySQLParser.DELAYED, 0);
};

ReplaceStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


ReplaceStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReplaceStatement(this);
	}
};

ReplaceStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReplaceStatement(this);
	}
};

ReplaceStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReplaceStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ReplaceStatementContext = ReplaceStatementContext;

MySQLParser.prototype.replaceStatement = function() {

    var localctx = new ReplaceStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, MySQLParser.RULE_replaceStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2958;
        this.match(MySQLParser.REPLACE);
        this.state = 2960;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DELAYED || _la===MySQLParser.LOW_PRIORITY) {
            this.state = 2959;
            localctx.priority = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DELAYED || _la===MySQLParser.LOW_PRIORITY)) {
                localctx.priority = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2963;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.INTO) {
            this.state = 2962;
            this.match(MySQLParser.INTO);
        }

        this.state = 2965;
        this.tableName();
        this.state = 2971;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.PARTITION) {
            this.state = 2966;
            this.match(MySQLParser.PARTITION);
            this.state = 2967;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 2968;
            localctx.partitions = this.uidList();
            this.state = 2969;
            this.match(MySQLParser.RR_BRACKET);
        }

        this.state = 2989;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.SELECT:
        case MySQLParser.VALUES:
        case MySQLParser.VALUE:
        case MySQLParser.LR_BRACKET:
            this.state = 2977;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,396,this._ctx);
            if(la_===1) {
                this.state = 2973;
                this.match(MySQLParser.LR_BRACKET);
                this.state = 2974;
                localctx.columns = this.uidList();
                this.state = 2975;
                this.match(MySQLParser.RR_BRACKET);

            }
            this.state = 2979;
            this.insertStatementValue();
            break;
        case MySQLParser.SET:
            this.state = 2980;
            this.match(MySQLParser.SET);
            this.state = 2981;
            localctx.setFirst = this.updatedElement();
            this.state = 2986;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 2982;
                this.match(MySQLParser.COMMA);
                this.state = 2983;
                localctx._updatedElement = this.updatedElement();
                localctx.setElements.push(localctx._updatedElement);
                this.state = 2988;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_selectStatement;
    return this;
}

SelectStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectStatementContext.prototype.constructor = SelectStatementContext;


 
SelectStatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function UnionSelectContext(parser, ctx) {
	SelectStatementContext.call(this, parser);
    this.unionType = null; // Token;
    SelectStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnionSelectContext.prototype = Object.create(SelectStatementContext.prototype);
UnionSelectContext.prototype.constructor = UnionSelectContext;

MySQLParser.UnionSelectContext = UnionSelectContext;

UnionSelectContext.prototype.querySpecificationNointo = function() {
    return this.getTypedRuleContext(QuerySpecificationNointoContext,0);
};

UnionSelectContext.prototype.unionStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnionStatementContext);
    } else {
        return this.getTypedRuleContext(UnionStatementContext,i);
    }
};

UnionSelectContext.prototype.UNION = function() {
    return this.getToken(MySQLParser.UNION, 0);
};

UnionSelectContext.prototype.orderByClause = function() {
    return this.getTypedRuleContext(OrderByClauseContext,0);
};

UnionSelectContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

UnionSelectContext.prototype.lockClause = function() {
    return this.getTypedRuleContext(LockClauseContext,0);
};

UnionSelectContext.prototype.querySpecification = function() {
    return this.getTypedRuleContext(QuerySpecificationContext,0);
};

UnionSelectContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

UnionSelectContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};

UnionSelectContext.prototype.DISTINCT = function() {
    return this.getToken(MySQLParser.DISTINCT, 0);
};
UnionSelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUnionSelect(this);
	}
};

UnionSelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUnionSelect(this);
	}
};

UnionSelectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUnionSelect(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnionParenthesisSelectContext(parser, ctx) {
	SelectStatementContext.call(this, parser);
    this.unionType = null; // Token;
    SelectStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnionParenthesisSelectContext.prototype = Object.create(SelectStatementContext.prototype);
UnionParenthesisSelectContext.prototype.constructor = UnionParenthesisSelectContext;

MySQLParser.UnionParenthesisSelectContext = UnionParenthesisSelectContext;

UnionParenthesisSelectContext.prototype.queryExpressionNointo = function() {
    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
};

UnionParenthesisSelectContext.prototype.unionParenthesis = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnionParenthesisContext);
    } else {
        return this.getTypedRuleContext(UnionParenthesisContext,i);
    }
};

UnionParenthesisSelectContext.prototype.UNION = function() {
    return this.getToken(MySQLParser.UNION, 0);
};

UnionParenthesisSelectContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

UnionParenthesisSelectContext.prototype.orderByClause = function() {
    return this.getTypedRuleContext(OrderByClauseContext,0);
};

UnionParenthesisSelectContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

UnionParenthesisSelectContext.prototype.lockClause = function() {
    return this.getTypedRuleContext(LockClauseContext,0);
};

UnionParenthesisSelectContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};

UnionParenthesisSelectContext.prototype.DISTINCT = function() {
    return this.getToken(MySQLParser.DISTINCT, 0);
};
UnionParenthesisSelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUnionParenthesisSelect(this);
	}
};

UnionParenthesisSelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUnionParenthesisSelect(this);
	}
};

UnionParenthesisSelectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUnionParenthesisSelect(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleSelectContext(parser, ctx) {
	SelectStatementContext.call(this, parser);
    SelectStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleSelectContext.prototype = Object.create(SelectStatementContext.prototype);
SimpleSelectContext.prototype.constructor = SimpleSelectContext;

MySQLParser.SimpleSelectContext = SimpleSelectContext;

SimpleSelectContext.prototype.querySpecification = function() {
    return this.getTypedRuleContext(QuerySpecificationContext,0);
};

SimpleSelectContext.prototype.lockClause = function() {
    return this.getTypedRuleContext(LockClauseContext,0);
};
SimpleSelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleSelect(this);
	}
};

SimpleSelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleSelect(this);
	}
};

SimpleSelectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleSelect(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ParenthesisSelectContext(parser, ctx) {
	SelectStatementContext.call(this, parser);
    SelectStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesisSelectContext.prototype = Object.create(SelectStatementContext.prototype);
ParenthesisSelectContext.prototype.constructor = ParenthesisSelectContext;

MySQLParser.ParenthesisSelectContext = ParenthesisSelectContext;

ParenthesisSelectContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

ParenthesisSelectContext.prototype.lockClause = function() {
    return this.getTypedRuleContext(LockClauseContext,0);
};
ParenthesisSelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterParenthesisSelect(this);
	}
};

ParenthesisSelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitParenthesisSelect(this);
	}
};

ParenthesisSelectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitParenthesisSelect(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.SelectStatementContext = SelectStatementContext;

MySQLParser.prototype.selectStatement = function() {

    var localctx = new SelectStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, MySQLParser.RULE_selectStatement);
    var _la = 0; // Token type
    try {
        this.state = 3046;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,414,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SimpleSelectContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2991;
            this.querySpecification();
            this.state = 2993;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,399,this._ctx);
            if(la_===1) {
                this.state = 2992;
                this.lockClause();

            }
            break;

        case 2:
            localctx = new ParenthesisSelectContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2995;
            this.queryExpression();
            this.state = 2997;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,400,this._ctx);
            if(la_===1) {
                this.state = 2996;
                this.lockClause();

            }
            break;

        case 3:
            localctx = new UnionSelectContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2999;
            this.querySpecificationNointo();
            this.state = 3001; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 3000;
            		this.unionStatement();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 3003; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,401, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 3013;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.UNION) {
                this.state = 3005;
                this.match(MySQLParser.UNION);
                this.state = 3007;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.ALL || _la===MySQLParser.DISTINCT) {
                    this.state = 3006;
                    localctx.unionType = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===MySQLParser.ALL || _la===MySQLParser.DISTINCT)) {
                        localctx.unionType = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 3011;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.SELECT:
                    this.state = 3009;
                    this.querySpecification();
                    break;
                case MySQLParser.LR_BRACKET:
                    this.state = 3010;
                    this.queryExpression();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }

            this.state = 3016;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ORDER) {
                this.state = 3015;
                this.orderByClause();
            }

            this.state = 3019;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIMIT) {
                this.state = 3018;
                this.limitClause();
            }

            this.state = 3022;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,407,this._ctx);
            if(la_===1) {
                this.state = 3021;
                this.lockClause();

            }
            break;

        case 4:
            localctx = new UnionParenthesisSelectContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 3024;
            this.queryExpressionNointo();
            this.state = 3026; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 3025;
            		this.unionParenthesis();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 3028; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,408, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 3035;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.UNION) {
                this.state = 3030;
                this.match(MySQLParser.UNION);
                this.state = 3032;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.ALL || _la===MySQLParser.DISTINCT) {
                    this.state = 3031;
                    localctx.unionType = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===MySQLParser.ALL || _la===MySQLParser.DISTINCT)) {
                        localctx.unionType = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 3034;
                this.queryExpression();
            }

            this.state = 3038;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ORDER) {
                this.state = 3037;
                this.orderByClause();
            }

            this.state = 3041;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIMIT) {
                this.state = 3040;
                this.limitClause();
            }

            this.state = 3044;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,413,this._ctx);
            if(la_===1) {
                this.state = 3043;
                this.lockClause();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UpdateStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_updateStatement;
    return this;
}

UpdateStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpdateStatementContext.prototype.constructor = UpdateStatementContext;

UpdateStatementContext.prototype.singleUpdateStatement = function() {
    return this.getTypedRuleContext(SingleUpdateStatementContext,0);
};

UpdateStatementContext.prototype.multipleUpdateStatement = function() {
    return this.getTypedRuleContext(MultipleUpdateStatementContext,0);
};

UpdateStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUpdateStatement(this);
	}
};

UpdateStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUpdateStatement(this);
	}
};

UpdateStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUpdateStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UpdateStatementContext = UpdateStatementContext;

MySQLParser.prototype.updateStatement = function() {

    var localctx = new UpdateStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, MySQLParser.RULE_updateStatement);
    try {
        this.state = 3050;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,415,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3048;
            this.singleUpdateStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3049;
            this.multipleUpdateStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertStatementValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_insertStatementValue;
    this.insertFormat = null; // Token
    return this;
}

InsertStatementValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertStatementValueContext.prototype.constructor = InsertStatementValueContext;

InsertStatementValueContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

InsertStatementValueContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.LR_BRACKET);
    } else {
        return this.getToken(MySQLParser.LR_BRACKET, i);
    }
};


InsertStatementValueContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.RR_BRACKET);
    } else {
        return this.getToken(MySQLParser.RR_BRACKET, i);
    }
};


InsertStatementValueContext.prototype.VALUES = function() {
    return this.getToken(MySQLParser.VALUES, 0);
};

InsertStatementValueContext.prototype.VALUE = function() {
    return this.getToken(MySQLParser.VALUE, 0);
};

InsertStatementValueContext.prototype.expressionsWithDefaults = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionsWithDefaultsContext);
    } else {
        return this.getTypedRuleContext(ExpressionsWithDefaultsContext,i);
    }
};

InsertStatementValueContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


InsertStatementValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInsertStatementValue(this);
	}
};

InsertStatementValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInsertStatementValue(this);
	}
};

InsertStatementValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInsertStatementValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.InsertStatementValueContext = InsertStatementValueContext;

MySQLParser.prototype.insertStatementValue = function() {

    var localctx = new InsertStatementValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, MySQLParser.RULE_insertStatementValue);
    var _la = 0; // Token type
    try {
        this.state = 3070;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.SELECT:
        case MySQLParser.LR_BRACKET:
            this.enterOuterAlt(localctx, 1);
            this.state = 3052;
            this.selectStatement();
            break;
        case MySQLParser.VALUES:
        case MySQLParser.VALUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 3053;
            localctx.insertFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.VALUES || _la===MySQLParser.VALUE)) {
                localctx.insertFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3054;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3056;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MySQLParser.CASE) | (1 << MySQLParser.CAST) | (1 << MySQLParser.CONVERT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.CURRENT_USER - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DEFAULT - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)) | (1 << (MySQLParser.EXISTS - 32)) | (1 << (MySQLParser.FALSE - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (MySQLParser.IF - 69)) | (1 << (MySQLParser.INSERT - 69)) | (1 << (MySQLParser.INTERVAL - 69)) | (1 << (MySQLParser.LEFT - 69)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (MySQLParser.NOT - 102)) | (1 << (MySQLParser.NULL_LITERAL - 102)) | (1 << (MySQLParser.NUMBER - 102)) | (1 << (MySQLParser.REPLACE - 102)) | (1 << (MySQLParser.RIGHT - 102)))) !== 0) || ((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (MySQLParser.STACKED - 151)) | (1 << (MySQLParser.TRUE - 151)) | (1 << (MySQLParser.VALUES - 151)))) !== 0) || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.CHAR - 199)) | (1 << (MySQLParser.BINARY - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.AVG - 233)) | (1 << (MySQLParser.BIT_AND - 233)) | (1 << (MySQLParser.BIT_OR - 233)) | (1 << (MySQLParser.BIT_XOR - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.GROUP_CONCAT - 233)) | (1 << (MySQLParser.MAX - 233)) | (1 << (MySQLParser.MIN - 233)) | (1 << (MySQLParser.STD - 233)) | (1 << (MySQLParser.STDDEV - 233)) | (1 << (MySQLParser.STDDEV_POP - 233)) | (1 << (MySQLParser.STDDEV_SAMP - 233)) | (1 << (MySQLParser.SUM - 233)) | (1 << (MySQLParser.VAR_POP - 233)) | (1 << (MySQLParser.VAR_SAMP - 233)) | (1 << (MySQLParser.VARIANCE - 233)) | (1 << (MySQLParser.CURRENT_DATE - 233)) | (1 << (MySQLParser.CURRENT_TIME - 233)) | (1 << (MySQLParser.CURRENT_TIMESTAMP - 233)) | (1 << (MySQLParser.LOCALTIME - 233)) | (1 << (MySQLParser.CURDATE - 233)) | (1 << (MySQLParser.CURTIME - 233)) | (1 << (MySQLParser.DATE_ADD - 233)) | (1 << (MySQLParser.DATE_SUB - 233)) | (1 << (MySQLParser.EXTRACT - 233)) | (1 << (MySQLParser.LOCALTIMESTAMP - 233)) | (1 << (MySQLParser.NOW - 233)) | (1 << (MySQLParser.POSITION - 233)) | (1 << (MySQLParser.SUBSTR - 233)) | (1 << (MySQLParser.SUBSTRING - 233)))) !== 0) || ((((_la - 265)) & ~0x1f) == 0 && ((1 << (_la - 265)) & ((1 << (MySQLParser.SYSDATE - 265)) | (1 << (MySQLParser.TRIM - 265)) | (1 << (MySQLParser.UTC_DATE - 265)) | (1 << (MySQLParser.UTC_TIME - 265)) | (1 << (MySQLParser.UTC_TIMESTAMP - 265)) | (1 << (MySQLParser.ACCOUNT - 265)) | (1 << (MySQLParser.ACTION - 265)) | (1 << (MySQLParser.AFTER - 265)) | (1 << (MySQLParser.AGGREGATE - 265)) | (1 << (MySQLParser.ALGORITHM - 265)) | (1 << (MySQLParser.ANY - 265)) | (1 << (MySQLParser.AT - 265)) | (1 << (MySQLParser.AUTHORS - 265)) | (1 << (MySQLParser.AUTOCOMMIT - 265)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 265)) | (1 << (MySQLParser.AUTO_INCREMENT - 265)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 265)) | (1 << (MySQLParser.BEGIN - 265)) | (1 << (MySQLParser.BINLOG - 265)) | (1 << (MySQLParser.BIT - 265)) | (1 << (MySQLParser.BLOCK - 265)) | (1 << (MySQLParser.BOOL - 265)) | (1 << (MySQLParser.BOOLEAN - 265)) | (1 << (MySQLParser.BTREE - 265)) | (1 << (MySQLParser.CACHE - 265)) | (1 << (MySQLParser.CASCADED - 265)) | (1 << (MySQLParser.CHAIN - 265)) | (1 << (MySQLParser.CHANGED - 265)) | (1 << (MySQLParser.CHANNEL - 265)) | (1 << (MySQLParser.CHECKSUM - 265)) | (1 << (MySQLParser.PAGE_CHECKSUM - 265)) | (1 << (MySQLParser.CIPHER - 265)))) !== 0) || ((((_la - 297)) & ~0x1f) == 0 && ((1 << (_la - 297)) & ((1 << (MySQLParser.CLASS_ORIGIN - 297)) | (1 << (MySQLParser.CLIENT - 297)) | (1 << (MySQLParser.CLOSE - 297)) | (1 << (MySQLParser.COALESCE - 297)) | (1 << (MySQLParser.CODE - 297)) | (1 << (MySQLParser.COLUMNS - 297)) | (1 << (MySQLParser.COLUMN_FORMAT - 297)) | (1 << (MySQLParser.COLUMN_NAME - 297)) | (1 << (MySQLParser.COMMENT - 297)) | (1 << (MySQLParser.COMMIT - 297)) | (1 << (MySQLParser.COMPACT - 297)) | (1 << (MySQLParser.COMPLETION - 297)) | (1 << (MySQLParser.COMPRESSED - 297)) | (1 << (MySQLParser.COMPRESSION - 297)) | (1 << (MySQLParser.CONCURRENT - 297)) | (1 << (MySQLParser.CONNECTION - 297)) | (1 << (MySQLParser.CONSISTENT - 297)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 297)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 297)) | (1 << (MySQLParser.CONSTRAINT_NAME - 297)) | (1 << (MySQLParser.CONTAINS - 297)) | (1 << (MySQLParser.CONTEXT - 297)) | (1 << (MySQLParser.CONTRIBUTORS - 297)) | (1 << (MySQLParser.COPY - 297)) | (1 << (MySQLParser.CPU - 297)) | (1 << (MySQLParser.CURSOR_NAME - 297)) | (1 << (MySQLParser.DATA - 297)) | (1 << (MySQLParser.DATAFILE - 297)) | (1 << (MySQLParser.DEALLOCATE - 297)) | (1 << (MySQLParser.DEFAULT_AUTH - 297)) | (1 << (MySQLParser.DEFINER - 297)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 297)))) !== 0) || ((((_la - 329)) & ~0x1f) == 0 && ((1 << (_la - 329)) & ((1 << (MySQLParser.DES_KEY_FILE - 329)) | (1 << (MySQLParser.DIRECTORY - 329)) | (1 << (MySQLParser.DISABLE - 329)) | (1 << (MySQLParser.DISCARD - 329)) | (1 << (MySQLParser.DISK - 329)) | (1 << (MySQLParser.DO - 329)) | (1 << (MySQLParser.DUMPFILE - 329)) | (1 << (MySQLParser.DUPLICATE - 329)) | (1 << (MySQLParser.DYNAMIC - 329)) | (1 << (MySQLParser.ENABLE - 329)) | (1 << (MySQLParser.ENCRYPTION - 329)) | (1 << (MySQLParser.END - 329)) | (1 << (MySQLParser.ENDS - 329)) | (1 << (MySQLParser.ENGINE - 329)) | (1 << (MySQLParser.ENGINES - 329)) | (1 << (MySQLParser.ERROR - 329)) | (1 << (MySQLParser.ERRORS - 329)) | (1 << (MySQLParser.ESCAPE - 329)) | (1 << (MySQLParser.EVEN - 329)) | (1 << (MySQLParser.EVENT - 329)) | (1 << (MySQLParser.EVENTS - 329)) | (1 << (MySQLParser.EVERY - 329)) | (1 << (MySQLParser.EXCHANGE - 329)) | (1 << (MySQLParser.EXCLUSIVE - 329)) | (1 << (MySQLParser.EXPIRE - 329)) | (1 << (MySQLParser.EXPORT - 329)) | (1 << (MySQLParser.EXTENDED - 329)) | (1 << (MySQLParser.EXTENT_SIZE - 329)) | (1 << (MySQLParser.FAST - 329)) | (1 << (MySQLParser.FAULTS - 329)) | (1 << (MySQLParser.FIELDS - 329)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 329)))) !== 0) || ((((_la - 361)) & ~0x1f) == 0 && ((1 << (_la - 361)) & ((1 << (MySQLParser.FILTER - 361)) | (1 << (MySQLParser.FIRST - 361)) | (1 << (MySQLParser.FIXED - 361)) | (1 << (MySQLParser.FLUSH - 361)) | (1 << (MySQLParser.FOLLOWS - 361)) | (1 << (MySQLParser.FOUND - 361)) | (1 << (MySQLParser.FULL - 361)) | (1 << (MySQLParser.FUNCTION - 361)) | (1 << (MySQLParser.GENERAL - 361)) | (1 << (MySQLParser.GLOBAL - 361)) | (1 << (MySQLParser.GRANTS - 361)) | (1 << (MySQLParser.GROUP_REPLICATION - 361)) | (1 << (MySQLParser.HANDLER - 361)) | (1 << (MySQLParser.HASH - 361)) | (1 << (MySQLParser.HELP - 361)) | (1 << (MySQLParser.HOST - 361)) | (1 << (MySQLParser.HOSTS - 361)) | (1 << (MySQLParser.IDENTIFIED - 361)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 361)) | (1 << (MySQLParser.IMPORT - 361)) | (1 << (MySQLParser.INDEXES - 361)) | (1 << (MySQLParser.INITIAL_SIZE - 361)) | (1 << (MySQLParser.INPLACE - 361)) | (1 << (MySQLParser.INSERT_METHOD - 361)) | (1 << (MySQLParser.INSTALL - 361)) | (1 << (MySQLParser.INSTANCE - 361)) | (1 << (MySQLParser.INVISIBLE - 361)) | (1 << (MySQLParser.INVOKER - 361)) | (1 << (MySQLParser.IO - 361)) | (1 << (MySQLParser.IO_THREAD - 361)) | (1 << (MySQLParser.IPC - 361)) | (1 << (MySQLParser.ISOLATION - 361)))) !== 0) || ((((_la - 393)) & ~0x1f) == 0 && ((1 << (_la - 393)) & ((1 << (MySQLParser.ISSUER - 393)) | (1 << (MySQLParser.JSON - 393)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 393)) | (1 << (MySQLParser.LANGUAGE - 393)) | (1 << (MySQLParser.LAST - 393)) | (1 << (MySQLParser.LEAVES - 393)) | (1 << (MySQLParser.LESS - 393)) | (1 << (MySQLParser.LEVEL - 393)) | (1 << (MySQLParser.LIST - 393)) | (1 << (MySQLParser.LOCAL - 393)) | (1 << (MySQLParser.LOGFILE - 393)) | (1 << (MySQLParser.LOGS - 393)) | (1 << (MySQLParser.MASTER - 393)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 393)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 393)) | (1 << (MySQLParser.MASTER_DELAY - 393)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 393)) | (1 << (MySQLParser.MASTER_HOST - 393)) | (1 << (MySQLParser.MASTER_LOG_FILE - 393)) | (1 << (MySQLParser.MASTER_LOG_POS - 393)) | (1 << (MySQLParser.MASTER_PASSWORD - 393)) | (1 << (MySQLParser.MASTER_PORT - 393)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 393)) | (1 << (MySQLParser.MASTER_SSL - 393)) | (1 << (MySQLParser.MASTER_SSL_CA - 393)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 393)) | (1 << (MySQLParser.MASTER_SSL_CERT - 393)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 393)) | (1 << (MySQLParser.MASTER_SSL_CRL - 393)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 393)) | (1 << (MySQLParser.MASTER_SSL_KEY - 393)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 393)))) !== 0) || ((((_la - 425)) & ~0x1f) == 0 && ((1 << (_la - 425)) & ((1 << (MySQLParser.MASTER_USER - 425)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 425)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 425)) | (1 << (MySQLParser.MAX_ROWS - 425)) | (1 << (MySQLParser.MAX_SIZE - 425)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 425)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 425)) | (1 << (MySQLParser.MEDIUM - 425)) | (1 << (MySQLParser.MERGE - 425)) | (1 << (MySQLParser.MESSAGE_TEXT - 425)) | (1 << (MySQLParser.MID - 425)) | (1 << (MySQLParser.MIGRATE - 425)) | (1 << (MySQLParser.MIN_ROWS - 425)) | (1 << (MySQLParser.MODE - 425)) | (1 << (MySQLParser.MODIFY - 425)) | (1 << (MySQLParser.MUTEX - 425)) | (1 << (MySQLParser.MYSQL - 425)) | (1 << (MySQLParser.MYSQL_ERRNO - 425)) | (1 << (MySQLParser.NAME - 425)) | (1 << (MySQLParser.NAMES - 425)) | (1 << (MySQLParser.NCHAR - 425)) | (1 << (MySQLParser.NEVER - 425)) | (1 << (MySQLParser.NEXT - 425)) | (1 << (MySQLParser.NO - 425)) | (1 << (MySQLParser.NODEGROUP - 425)) | (1 << (MySQLParser.NONE - 425)) | (1 << (MySQLParser.OFFLINE - 425)) | (1 << (MySQLParser.OFFSET - 425)) | (1 << (MySQLParser.OJ - 425)) | (1 << (MySQLParser.OLD_PASSWORD - 425)) | (1 << (MySQLParser.ONE - 425)) | (1 << (MySQLParser.ONLINE - 425)))) !== 0) || ((((_la - 457)) & ~0x1f) == 0 && ((1 << (_la - 457)) & ((1 << (MySQLParser.ONLY - 457)) | (1 << (MySQLParser.OPEN - 457)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 457)) | (1 << (MySQLParser.OPTIONS - 457)) | (1 << (MySQLParser.OWNER - 457)) | (1 << (MySQLParser.PACK_KEYS - 457)) | (1 << (MySQLParser.PAGE - 457)) | (1 << (MySQLParser.PARSER - 457)) | (1 << (MySQLParser.PARTIAL - 457)) | (1 << (MySQLParser.PARTITIONING - 457)) | (1 << (MySQLParser.PARTITIONS - 457)) | (1 << (MySQLParser.PASSWORD - 457)) | (1 << (MySQLParser.PHASE - 457)) | (1 << (MySQLParser.PLUGIN - 457)) | (1 << (MySQLParser.PLUGIN_DIR - 457)) | (1 << (MySQLParser.PLUGINS - 457)) | (1 << (MySQLParser.PORT - 457)) | (1 << (MySQLParser.PRECEDES - 457)) | (1 << (MySQLParser.PREPARE - 457)) | (1 << (MySQLParser.PRESERVE - 457)) | (1 << (MySQLParser.PREV - 457)) | (1 << (MySQLParser.PROCESSLIST - 457)) | (1 << (MySQLParser.PROFILE - 457)) | (1 << (MySQLParser.PROFILES - 457)) | (1 << (MySQLParser.PROXY - 457)) | (1 << (MySQLParser.QUERY - 457)) | (1 << (MySQLParser.QUICK - 457)) | (1 << (MySQLParser.REBUILD - 457)) | (1 << (MySQLParser.RECOVER - 457)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 457)) | (1 << (MySQLParser.REDUNDANT - 457)) | (1 << (MySQLParser.RELAY - 457)))) !== 0) || ((((_la - 489)) & ~0x1f) == 0 && ((1 << (_la - 489)) & ((1 << (MySQLParser.RELAY_LOG_FILE - 489)) | (1 << (MySQLParser.RELAY_LOG_POS - 489)) | (1 << (MySQLParser.RELAYLOG - 489)) | (1 << (MySQLParser.REMOVE - 489)) | (1 << (MySQLParser.REORGANIZE - 489)) | (1 << (MySQLParser.REPAIR - 489)) | (1 << (MySQLParser.REPLICATE_DO_DB - 489)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 489)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 489)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 489)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 489)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 489)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 489)) | (1 << (MySQLParser.REPLICATION - 489)) | (1 << (MySQLParser.RESET - 489)) | (1 << (MySQLParser.RESUME - 489)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 489)) | (1 << (MySQLParser.RETURNS - 489)) | (1 << (MySQLParser.ROLE - 489)) | (1 << (MySQLParser.ROLLBACK - 489)) | (1 << (MySQLParser.ROLLUP - 489)) | (1 << (MySQLParser.ROTATE - 489)) | (1 << (MySQLParser.ROW - 489)) | (1 << (MySQLParser.ROWS - 489)) | (1 << (MySQLParser.ROW_FORMAT - 489)) | (1 << (MySQLParser.SAVEPOINT - 489)) | (1 << (MySQLParser.SCHEDULE - 489)) | (1 << (MySQLParser.SECURITY - 489)) | (1 << (MySQLParser.SERVER - 489)) | (1 << (MySQLParser.SESSION - 489)) | (1 << (MySQLParser.SHARE - 489)) | (1 << (MySQLParser.SHARED - 489)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (MySQLParser.SIGNED - 521)) | (1 << (MySQLParser.SIMPLE - 521)) | (1 << (MySQLParser.SLAVE - 521)) | (1 << (MySQLParser.SLOW - 521)) | (1 << (MySQLParser.SNAPSHOT - 521)) | (1 << (MySQLParser.SOCKET - 521)) | (1 << (MySQLParser.SOME - 521)) | (1 << (MySQLParser.SONAME - 521)) | (1 << (MySQLParser.SOUNDS - 521)) | (1 << (MySQLParser.SOURCE - 521)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 521)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 521)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 521)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 521)) | (1 << (MySQLParser.SQL_CACHE - 521)) | (1 << (MySQLParser.SQL_NO_CACHE - 521)) | (1 << (MySQLParser.SQL_THREAD - 521)) | (1 << (MySQLParser.START - 521)) | (1 << (MySQLParser.STARTS - 521)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 521)) | (1 << (MySQLParser.STATS_PERSISTENT - 521)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 521)) | (1 << (MySQLParser.STATUS - 521)) | (1 << (MySQLParser.STOP - 521)) | (1 << (MySQLParser.STORAGE - 521)) | (1 << (MySQLParser.STRING - 521)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 521)) | (1 << (MySQLParser.SUBJECT - 521)) | (1 << (MySQLParser.SUBPARTITION - 521)) | (1 << (MySQLParser.SUBPARTITIONS - 521)) | (1 << (MySQLParser.SUSPEND - 521)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (MySQLParser.SWAPS - 553)) | (1 << (MySQLParser.SWITCHES - 553)) | (1 << (MySQLParser.TABLE_NAME - 553)) | (1 << (MySQLParser.TABLESPACE - 553)) | (1 << (MySQLParser.TEMPORARY - 553)) | (1 << (MySQLParser.TEMPTABLE - 553)) | (1 << (MySQLParser.THAN - 553)) | (1 << (MySQLParser.TRADITIONAL - 553)) | (1 << (MySQLParser.TRANSACTION - 553)) | (1 << (MySQLParser.TRANSACTIONAL - 553)) | (1 << (MySQLParser.TRIGGERS - 553)) | (1 << (MySQLParser.TRUNCATE - 553)) | (1 << (MySQLParser.UNDEFINED - 553)) | (1 << (MySQLParser.UNDOFILE - 553)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 553)) | (1 << (MySQLParser.UNINSTALL - 553)) | (1 << (MySQLParser.UNKNOWN - 553)) | (1 << (MySQLParser.UNTIL - 553)) | (1 << (MySQLParser.UPGRADE - 553)) | (1 << (MySQLParser.USER - 553)) | (1 << (MySQLParser.USE_FRM - 553)) | (1 << (MySQLParser.USER_RESOURCES - 553)) | (1 << (MySQLParser.VALIDATION - 553)) | (1 << (MySQLParser.VALUE - 553)) | (1 << (MySQLParser.VARIABLES - 553)) | (1 << (MySQLParser.VIEW - 553)) | (1 << (MySQLParser.VISIBLE - 553)) | (1 << (MySQLParser.WAIT - 553)) | (1 << (MySQLParser.WARNINGS - 553)) | (1 << (MySQLParser.WITHOUT - 553)) | (1 << (MySQLParser.WORK - 553)))) !== 0) || ((((_la - 585)) & ~0x1f) == 0 && ((1 << (_la - 585)) & ((1 << (MySQLParser.WRAPPER - 585)) | (1 << (MySQLParser.X509 - 585)) | (1 << (MySQLParser.XA - 585)) | (1 << (MySQLParser.XML - 585)) | (1 << (MySQLParser.INTERNAL - 585)) | (1 << (MySQLParser.QUARTER - 585)) | (1 << (MySQLParser.MONTH - 585)) | (1 << (MySQLParser.DAY - 585)) | (1 << (MySQLParser.HOUR - 585)) | (1 << (MySQLParser.MINUTE - 585)) | (1 << (MySQLParser.WEEK - 585)) | (1 << (MySQLParser.SECOND - 585)) | (1 << (MySQLParser.MICROSECOND - 585)) | (1 << (MySQLParser.TABLES - 585)) | (1 << (MySQLParser.ROUTINE - 585)) | (1 << (MySQLParser.EXECUTE - 585)) | (1 << (MySQLParser.FILE - 585)) | (1 << (MySQLParser.PROCESS - 585)) | (1 << (MySQLParser.RELOAD - 585)) | (1 << (MySQLParser.SHUTDOWN - 585)) | (1 << (MySQLParser.SUPER - 585)) | (1 << (MySQLParser.PRIVILEGES - 585)) | (1 << (MySQLParser.AUDIT_ADMIN - 585)) | (1 << (MySQLParser.BACKUP_ADMIN - 585)) | (1 << (MySQLParser.BINLOG_ADMIN - 585)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 585)) | (1 << (MySQLParser.CLONE_ADMIN - 585)))) !== 0) || ((((_la - 617)) & ~0x1f) == 0 && ((1 << (_la - 617)) & ((1 << (MySQLParser.CONNECTION_ADMIN - 617)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 617)) | (1 << (MySQLParser.FIREWALL_ADMIN - 617)) | (1 << (MySQLParser.FIREWALL_USER - 617)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 617)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 617)) | (1 << (MySQLParser.NDB_STORED_USER - 617)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 617)) | (1 << (MySQLParser.REPLICATION_APPLIER - 617)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 617)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 617)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 617)) | (1 << (MySQLParser.ROLE_ADMIN - 617)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 617)) | (1 << (MySQLParser.SET_USER_ID - 617)) | (1 << (MySQLParser.SHOW_ROUTINE - 617)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 617)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 617)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 617)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 617)) | (1 << (MySQLParser.ARMSCII8 - 617)) | (1 << (MySQLParser.ASCII - 617)) | (1 << (MySQLParser.BIG5 - 617)) | (1 << (MySQLParser.CP1250 - 617)) | (1 << (MySQLParser.CP1251 - 617)) | (1 << (MySQLParser.CP1256 - 617)) | (1 << (MySQLParser.CP1257 - 617)) | (1 << (MySQLParser.CP850 - 617)) | (1 << (MySQLParser.CP852 - 617)) | (1 << (MySQLParser.CP866 - 617)) | (1 << (MySQLParser.CP932 - 617)) | (1 << (MySQLParser.DEC8 - 617)))) !== 0) || ((((_la - 649)) & ~0x1f) == 0 && ((1 << (_la - 649)) & ((1 << (MySQLParser.EUCJPMS - 649)) | (1 << (MySQLParser.EUCKR - 649)) | (1 << (MySQLParser.GB2312 - 649)) | (1 << (MySQLParser.GBK - 649)) | (1 << (MySQLParser.GEOSTD8 - 649)) | (1 << (MySQLParser.GREEK - 649)) | (1 << (MySQLParser.HEBREW - 649)) | (1 << (MySQLParser.HP8 - 649)) | (1 << (MySQLParser.KEYBCS2 - 649)) | (1 << (MySQLParser.KOI8R - 649)) | (1 << (MySQLParser.KOI8U - 649)) | (1 << (MySQLParser.LATIN1 - 649)) | (1 << (MySQLParser.LATIN2 - 649)) | (1 << (MySQLParser.LATIN5 - 649)) | (1 << (MySQLParser.LATIN7 - 649)) | (1 << (MySQLParser.MACCE - 649)) | (1 << (MySQLParser.MACROMAN - 649)) | (1 << (MySQLParser.SJIS - 649)) | (1 << (MySQLParser.SWE7 - 649)) | (1 << (MySQLParser.TIS620 - 649)) | (1 << (MySQLParser.UCS2 - 649)) | (1 << (MySQLParser.UJIS - 649)) | (1 << (MySQLParser.UTF16 - 649)) | (1 << (MySQLParser.UTF16LE - 649)) | (1 << (MySQLParser.UTF32 - 649)) | (1 << (MySQLParser.UTF8 - 649)) | (1 << (MySQLParser.UTF8MB3 - 649)) | (1 << (MySQLParser.UTF8MB4 - 649)) | (1 << (MySQLParser.ARCHIVE - 649)) | (1 << (MySQLParser.BLACKHOLE - 649)) | (1 << (MySQLParser.CSV - 649)) | (1 << (MySQLParser.FEDERATED - 649)))) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & ((1 << (MySQLParser.INNODB - 681)) | (1 << (MySQLParser.MEMORY - 681)) | (1 << (MySQLParser.MRG_MYISAM - 681)) | (1 << (MySQLParser.MYISAM - 681)) | (1 << (MySQLParser.NDB - 681)) | (1 << (MySQLParser.NDBCLUSTER - 681)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 681)) | (1 << (MySQLParser.TOKUDB - 681)) | (1 << (MySQLParser.REPEATABLE - 681)) | (1 << (MySQLParser.COMMITTED - 681)) | (1 << (MySQLParser.UNCOMMITTED - 681)) | (1 << (MySQLParser.SERIALIZABLE - 681)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 681)) | (1 << (MySQLParser.LINESTRING - 681)) | (1 << (MySQLParser.MULTILINESTRING - 681)) | (1 << (MySQLParser.MULTIPOINT - 681)) | (1 << (MySQLParser.MULTIPOLYGON - 681)) | (1 << (MySQLParser.POINT - 681)) | (1 << (MySQLParser.POLYGON - 681)) | (1 << (MySQLParser.ABS - 681)) | (1 << (MySQLParser.ACOS - 681)) | (1 << (MySQLParser.ADDDATE - 681)) | (1 << (MySQLParser.ADDTIME - 681)) | (1 << (MySQLParser.AES_DECRYPT - 681)) | (1 << (MySQLParser.AES_ENCRYPT - 681)) | (1 << (MySQLParser.AREA - 681)) | (1 << (MySQLParser.ASBINARY - 681)) | (1 << (MySQLParser.ASIN - 681)) | (1 << (MySQLParser.ASTEXT - 681)) | (1 << (MySQLParser.ASWKB - 681)))) !== 0) || ((((_la - 713)) & ~0x1f) == 0 && ((1 << (_la - 713)) & ((1 << (MySQLParser.ASWKT - 713)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 713)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 713)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 713)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 713)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 713)) | (1 << (MySQLParser.ATAN - 713)) | (1 << (MySQLParser.ATAN2 - 713)) | (1 << (MySQLParser.BENCHMARK - 713)) | (1 << (MySQLParser.BIN - 713)) | (1 << (MySQLParser.BIT_COUNT - 713)) | (1 << (MySQLParser.BIT_LENGTH - 713)) | (1 << (MySQLParser.BUFFER - 713)) | (1 << (MySQLParser.CATALOG_NAME - 713)) | (1 << (MySQLParser.CEIL - 713)) | (1 << (MySQLParser.CEILING - 713)) | (1 << (MySQLParser.CENTROID - 713)) | (1 << (MySQLParser.CHARACTER_LENGTH - 713)) | (1 << (MySQLParser.CHARSET - 713)) | (1 << (MySQLParser.CHAR_LENGTH - 713)) | (1 << (MySQLParser.COERCIBILITY - 713)) | (1 << (MySQLParser.COLLATION - 713)) | (1 << (MySQLParser.COMPRESS - 713)) | (1 << (MySQLParser.CONCAT - 713)) | (1 << (MySQLParser.CONCAT_WS - 713)) | (1 << (MySQLParser.CONNECTION_ID - 713)) | (1 << (MySQLParser.CONV - 713)) | (1 << (MySQLParser.CONVERT_TZ - 713)) | (1 << (MySQLParser.COS - 713)) | (1 << (MySQLParser.COT - 713)) | (1 << (MySQLParser.CRC32 - 713)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 713)))) !== 0) || ((((_la - 745)) & ~0x1f) == 0 && ((1 << (_la - 745)) & ((1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 745)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 745)) | (1 << (MySQLParser.CREATE_DIGEST - 745)) | (1 << (MySQLParser.CROSSES - 745)) | (1 << (MySQLParser.DATEDIFF - 745)) | (1 << (MySQLParser.DATE_FORMAT - 745)) | (1 << (MySQLParser.DAYNAME - 745)) | (1 << (MySQLParser.DAYOFMONTH - 745)) | (1 << (MySQLParser.DAYOFWEEK - 745)) | (1 << (MySQLParser.DAYOFYEAR - 745)) | (1 << (MySQLParser.DECODE - 745)) | (1 << (MySQLParser.DEGREES - 745)) | (1 << (MySQLParser.DES_DECRYPT - 745)) | (1 << (MySQLParser.DES_ENCRYPT - 745)) | (1 << (MySQLParser.DIMENSION - 745)) | (1 << (MySQLParser.DISJOINT - 745)) | (1 << (MySQLParser.ELT - 745)) | (1 << (MySQLParser.ENCODE - 745)) | (1 << (MySQLParser.ENCRYPT - 745)) | (1 << (MySQLParser.ENDPOINT - 745)) | (1 << (MySQLParser.ENVELOPE - 745)) | (1 << (MySQLParser.EQUALS - 745)) | (1 << (MySQLParser.EXP - 745)) | (1 << (MySQLParser.EXPORT_SET - 745)) | (1 << (MySQLParser.EXTERIORRING - 745)) | (1 << (MySQLParser.EXTRACTVALUE - 745)) | (1 << (MySQLParser.FIELD - 745)) | (1 << (MySQLParser.FIND_IN_SET - 745)) | (1 << (MySQLParser.FLOOR - 745)) | (1 << (MySQLParser.FORMAT - 745)) | (1 << (MySQLParser.FOUND_ROWS - 745)) | (1 << (MySQLParser.FROM_BASE64 - 745)))) !== 0) || ((((_la - 777)) & ~0x1f) == 0 && ((1 << (_la - 777)) & ((1 << (MySQLParser.FROM_DAYS - 777)) | (1 << (MySQLParser.FROM_UNIXTIME - 777)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 777)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 777)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 777)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 777)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 777)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 777)) | (1 << (MySQLParser.GEOMETRYN - 777)) | (1 << (MySQLParser.GEOMETRYTYPE - 777)) | (1 << (MySQLParser.GEOMFROMTEXT - 777)) | (1 << (MySQLParser.GEOMFROMWKB - 777)) | (1 << (MySQLParser.GET_FORMAT - 777)) | (1 << (MySQLParser.GET_LOCK - 777)) | (1 << (MySQLParser.GLENGTH - 777)) | (1 << (MySQLParser.GREATEST - 777)) | (1 << (MySQLParser.GTID_SUBSET - 777)) | (1 << (MySQLParser.GTID_SUBTRACT - 777)) | (1 << (MySQLParser.HEX - 777)) | (1 << (MySQLParser.IFNULL - 777)) | (1 << (MySQLParser.INET6_ATON - 777)) | (1 << (MySQLParser.INET6_NTOA - 777)) | (1 << (MySQLParser.INET_ATON - 777)) | (1 << (MySQLParser.INET_NTOA - 777)) | (1 << (MySQLParser.INSTR - 777)) | (1 << (MySQLParser.INTERIORRINGN - 777)) | (1 << (MySQLParser.INTERSECTS - 777)) | (1 << (MySQLParser.ISCLOSED - 777)) | (1 << (MySQLParser.ISEMPTY - 777)) | (1 << (MySQLParser.ISNULL - 777)) | (1 << (MySQLParser.ISSIMPLE - 777)) | (1 << (MySQLParser.IS_FREE_LOCK - 777)))) !== 0) || ((((_la - 809)) & ~0x1f) == 0 && ((1 << (_la - 809)) & ((1 << (MySQLParser.IS_IPV4 - 809)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 809)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 809)) | (1 << (MySQLParser.IS_IPV6 - 809)) | (1 << (MySQLParser.IS_USED_LOCK - 809)) | (1 << (MySQLParser.LAST_INSERT_ID - 809)) | (1 << (MySQLParser.LCASE - 809)) | (1 << (MySQLParser.LEAST - 809)) | (1 << (MySQLParser.LENGTH - 809)) | (1 << (MySQLParser.LINEFROMTEXT - 809)) | (1 << (MySQLParser.LINEFROMWKB - 809)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 809)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 809)) | (1 << (MySQLParser.LN - 809)) | (1 << (MySQLParser.LOAD_FILE - 809)) | (1 << (MySQLParser.LOCATE - 809)) | (1 << (MySQLParser.LOG - 809)) | (1 << (MySQLParser.LOG10 - 809)) | (1 << (MySQLParser.LOG2 - 809)) | (1 << (MySQLParser.LOWER - 809)) | (1 << (MySQLParser.LPAD - 809)) | (1 << (MySQLParser.LTRIM - 809)) | (1 << (MySQLParser.MAKEDATE - 809)) | (1 << (MySQLParser.MAKETIME - 809)) | (1 << (MySQLParser.MAKE_SET - 809)) | (1 << (MySQLParser.MASTER_POS_WAIT - 809)) | (1 << (MySQLParser.MBRCONTAINS - 809)) | (1 << (MySQLParser.MBRDISJOINT - 809)) | (1 << (MySQLParser.MBREQUAL - 809)) | (1 << (MySQLParser.MBRINTERSECTS - 809)) | (1 << (MySQLParser.MBROVERLAPS - 809)) | (1 << (MySQLParser.MBRTOUCHES - 809)))) !== 0) || ((((_la - 841)) & ~0x1f) == 0 && ((1 << (_la - 841)) & ((1 << (MySQLParser.MBRWITHIN - 841)) | (1 << (MySQLParser.MD5 - 841)) | (1 << (MySQLParser.MLINEFROMTEXT - 841)) | (1 << (MySQLParser.MLINEFROMWKB - 841)) | (1 << (MySQLParser.MONTHNAME - 841)) | (1 << (MySQLParser.MPOINTFROMTEXT - 841)) | (1 << (MySQLParser.MPOINTFROMWKB - 841)) | (1 << (MySQLParser.MPOLYFROMTEXT - 841)) | (1 << (MySQLParser.MPOLYFROMWKB - 841)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 841)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 841)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 841)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 841)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 841)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 841)) | (1 << (MySQLParser.NAME_CONST - 841)) | (1 << (MySQLParser.NULLIF - 841)) | (1 << (MySQLParser.NUMGEOMETRIES - 841)) | (1 << (MySQLParser.NUMINTERIORRINGS - 841)) | (1 << (MySQLParser.NUMPOINTS - 841)) | (1 << (MySQLParser.OCT - 841)) | (1 << (MySQLParser.OCTET_LENGTH - 841)) | (1 << (MySQLParser.ORD - 841)) | (1 << (MySQLParser.OVERLAPS - 841)) | (1 << (MySQLParser.PERIOD_ADD - 841)) | (1 << (MySQLParser.PERIOD_DIFF - 841)) | (1 << (MySQLParser.PI - 841)) | (1 << (MySQLParser.POINTFROMTEXT - 841)) | (1 << (MySQLParser.POINTFROMWKB - 841)) | (1 << (MySQLParser.POINTN - 841)) | (1 << (MySQLParser.POLYFROMTEXT - 841)) | (1 << (MySQLParser.POLYFROMWKB - 841)))) !== 0) || ((((_la - 873)) & ~0x1f) == 0 && ((1 << (_la - 873)) & ((1 << (MySQLParser.POLYGONFROMTEXT - 873)) | (1 << (MySQLParser.POLYGONFROMWKB - 873)) | (1 << (MySQLParser.POW - 873)) | (1 << (MySQLParser.POWER - 873)) | (1 << (MySQLParser.QUOTE - 873)) | (1 << (MySQLParser.RADIANS - 873)) | (1 << (MySQLParser.RAND - 873)) | (1 << (MySQLParser.RANDOM_BYTES - 873)) | (1 << (MySQLParser.RELEASE_LOCK - 873)) | (1 << (MySQLParser.REVERSE - 873)) | (1 << (MySQLParser.ROUND - 873)) | (1 << (MySQLParser.ROW_COUNT - 873)) | (1 << (MySQLParser.RPAD - 873)) | (1 << (MySQLParser.RTRIM - 873)) | (1 << (MySQLParser.SEC_TO_TIME - 873)) | (1 << (MySQLParser.SESSION_USER - 873)) | (1 << (MySQLParser.SHA - 873)) | (1 << (MySQLParser.SHA1 - 873)) | (1 << (MySQLParser.SHA2 - 873)) | (1 << (MySQLParser.SCHEMA_NAME - 873)) | (1 << (MySQLParser.SIGN - 873)) | (1 << (MySQLParser.SIN - 873)) | (1 << (MySQLParser.SLEEP - 873)) | (1 << (MySQLParser.SOUNDEX - 873)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 873)) | (1 << (MySQLParser.SQRT - 873)) | (1 << (MySQLParser.SRID - 873)) | (1 << (MySQLParser.STARTPOINT - 873)) | (1 << (MySQLParser.STRCMP - 873)) | (1 << (MySQLParser.STR_TO_DATE - 873)) | (1 << (MySQLParser.ST_AREA - 873)) | (1 << (MySQLParser.ST_ASBINARY - 873)))) !== 0) || ((((_la - 905)) & ~0x1f) == 0 && ((1 << (_la - 905)) & ((1 << (MySQLParser.ST_ASTEXT - 905)) | (1 << (MySQLParser.ST_ASWKB - 905)) | (1 << (MySQLParser.ST_ASWKT - 905)) | (1 << (MySQLParser.ST_BUFFER - 905)) | (1 << (MySQLParser.ST_CENTROID - 905)) | (1 << (MySQLParser.ST_CONTAINS - 905)) | (1 << (MySQLParser.ST_CROSSES - 905)) | (1 << (MySQLParser.ST_DIFFERENCE - 905)) | (1 << (MySQLParser.ST_DIMENSION - 905)) | (1 << (MySQLParser.ST_DISJOINT - 905)) | (1 << (MySQLParser.ST_DISTANCE - 905)) | (1 << (MySQLParser.ST_ENDPOINT - 905)) | (1 << (MySQLParser.ST_ENVELOPE - 905)) | (1 << (MySQLParser.ST_EQUALS - 905)) | (1 << (MySQLParser.ST_EXTERIORRING - 905)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 905)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 905)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 905)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 905)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 905)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 905)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 905)) | (1 << (MySQLParser.ST_GEOMETRYN - 905)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 905)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 905)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 905)) | (1 << (MySQLParser.ST_INTERIORRINGN - 905)) | (1 << (MySQLParser.ST_INTERSECTION - 905)) | (1 << (MySQLParser.ST_INTERSECTS - 905)) | (1 << (MySQLParser.ST_ISCLOSED - 905)) | (1 << (MySQLParser.ST_ISEMPTY - 905)) | (1 << (MySQLParser.ST_ISSIMPLE - 905)))) !== 0) || ((((_la - 937)) & ~0x1f) == 0 && ((1 << (_la - 937)) & ((1 << (MySQLParser.ST_LINEFROMTEXT - 937)) | (1 << (MySQLParser.ST_LINEFROMWKB - 937)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 937)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 937)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 937)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 937)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 937)) | (1 << (MySQLParser.ST_NUMPOINTS - 937)) | (1 << (MySQLParser.ST_OVERLAPS - 937)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 937)) | (1 << (MySQLParser.ST_POINTFROMWKB - 937)) | (1 << (MySQLParser.ST_POINTN - 937)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 937)) | (1 << (MySQLParser.ST_POLYFROMWKB - 937)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 937)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 937)) | (1 << (MySQLParser.ST_SRID - 937)) | (1 << (MySQLParser.ST_STARTPOINT - 937)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 937)) | (1 << (MySQLParser.ST_TOUCHES - 937)) | (1 << (MySQLParser.ST_UNION - 937)) | (1 << (MySQLParser.ST_WITHIN - 937)) | (1 << (MySQLParser.ST_X - 937)) | (1 << (MySQLParser.ST_Y - 937)) | (1 << (MySQLParser.SUBDATE - 937)) | (1 << (MySQLParser.SUBSTRING_INDEX - 937)) | (1 << (MySQLParser.SUBTIME - 937)) | (1 << (MySQLParser.SYSTEM_USER - 937)) | (1 << (MySQLParser.TAN - 937)) | (1 << (MySQLParser.TIMEDIFF - 937)) | (1 << (MySQLParser.TIMESTAMPADD - 937)) | (1 << (MySQLParser.TIMESTAMPDIFF - 937)))) !== 0) || ((((_la - 969)) & ~0x1f) == 0 && ((1 << (_la - 969)) & ((1 << (MySQLParser.TIME_FORMAT - 969)) | (1 << (MySQLParser.TIME_TO_SEC - 969)) | (1 << (MySQLParser.TOUCHES - 969)) | (1 << (MySQLParser.TO_BASE64 - 969)) | (1 << (MySQLParser.TO_DAYS - 969)) | (1 << (MySQLParser.TO_SECONDS - 969)) | (1 << (MySQLParser.UCASE - 969)) | (1 << (MySQLParser.UNCOMPRESS - 969)) | (1 << (MySQLParser.UNCOMPRESSED_LENGTH - 969)) | (1 << (MySQLParser.UNHEX - 969)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 969)) | (1 << (MySQLParser.UPDATEXML - 969)) | (1 << (MySQLParser.UPPER - 969)) | (1 << (MySQLParser.UUID - 969)) | (1 << (MySQLParser.UUID_SHORT - 969)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 969)) | (1 << (MySQLParser.VERSION - 969)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 969)) | (1 << (MySQLParser.WEEKDAY - 969)) | (1 << (MySQLParser.WEEKOFYEAR - 969)) | (1 << (MySQLParser.WEIGHT_STRING - 969)) | (1 << (MySQLParser.WITHIN - 969)) | (1 << (MySQLParser.YEARWEEK - 969)) | (1 << (MySQLParser.Y_FUNCTION - 969)) | (1 << (MySQLParser.X_FUNCTION - 969)))) !== 0) || ((((_la - 1006)) & ~0x1f) == 0 && ((1 << (_la - 1006)) & ((1 << (MySQLParser.PLUS - 1006)) | (1 << (MySQLParser.MINUS - 1006)) | (1 << (MySQLParser.EXCLAMATION_SYMBOL - 1006)) | (1 << (MySQLParser.BIT_NOT_OP - 1006)) | (1 << (MySQLParser.LR_BRACKET - 1006)) | (1 << (MySQLParser.ZERO_DECIMAL - 1006)) | (1 << (MySQLParser.ONE_DECIMAL - 1006)) | (1 << (MySQLParser.TWO_DECIMAL - 1006)) | (1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1006)) | (1 << (MySQLParser.START_NATIONAL_STRING_LITERAL - 1006)) | (1 << (MySQLParser.STRING_LITERAL - 1006)) | (1 << (MySQLParser.DECIMAL_LITERAL - 1006)) | (1 << (MySQLParser.HEXADECIMAL_LITERAL - 1006)))) !== 0) || ((((_la - 1038)) & ~0x1f) == 0 && ((1 << (_la - 1038)) & ((1 << (MySQLParser.REAL_LITERAL - 1038)) | (1 << (MySQLParser.NULL_SPEC_LITERAL - 1038)) | (1 << (MySQLParser.BIT_STRING - 1038)) | (1 << (MySQLParser.STRING_CHARSET_NAME - 1038)) | (1 << (MySQLParser.ID - 1038)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1038)) | (1 << (MySQLParser.LOCAL_ID - 1038)) | (1 << (MySQLParser.GLOBAL_ID - 1038)))) !== 0)) {
                this.state = 3055;
                this.expressionsWithDefaults();
            }

            this.state = 3058;
            this.match(MySQLParser.RR_BRACKET);
            this.state = 3067;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 3059;
                this.match(MySQLParser.COMMA);
                this.state = 3060;
                this.match(MySQLParser.LR_BRACKET);
                this.state = 3062;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MySQLParser.CASE) | (1 << MySQLParser.CAST) | (1 << MySQLParser.CONVERT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.CURRENT_USER - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DEFAULT - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)) | (1 << (MySQLParser.EXISTS - 32)) | (1 << (MySQLParser.FALSE - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (MySQLParser.IF - 69)) | (1 << (MySQLParser.INSERT - 69)) | (1 << (MySQLParser.INTERVAL - 69)) | (1 << (MySQLParser.LEFT - 69)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (MySQLParser.NOT - 102)) | (1 << (MySQLParser.NULL_LITERAL - 102)) | (1 << (MySQLParser.NUMBER - 102)) | (1 << (MySQLParser.REPLACE - 102)) | (1 << (MySQLParser.RIGHT - 102)))) !== 0) || ((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (MySQLParser.STACKED - 151)) | (1 << (MySQLParser.TRUE - 151)) | (1 << (MySQLParser.VALUES - 151)))) !== 0) || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.CHAR - 199)) | (1 << (MySQLParser.BINARY - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.AVG - 233)) | (1 << (MySQLParser.BIT_AND - 233)) | (1 << (MySQLParser.BIT_OR - 233)) | (1 << (MySQLParser.BIT_XOR - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.GROUP_CONCAT - 233)) | (1 << (MySQLParser.MAX - 233)) | (1 << (MySQLParser.MIN - 233)) | (1 << (MySQLParser.STD - 233)) | (1 << (MySQLParser.STDDEV - 233)) | (1 << (MySQLParser.STDDEV_POP - 233)) | (1 << (MySQLParser.STDDEV_SAMP - 233)) | (1 << (MySQLParser.SUM - 233)) | (1 << (MySQLParser.VAR_POP - 233)) | (1 << (MySQLParser.VAR_SAMP - 233)) | (1 << (MySQLParser.VARIANCE - 233)) | (1 << (MySQLParser.CURRENT_DATE - 233)) | (1 << (MySQLParser.CURRENT_TIME - 233)) | (1 << (MySQLParser.CURRENT_TIMESTAMP - 233)) | (1 << (MySQLParser.LOCALTIME - 233)) | (1 << (MySQLParser.CURDATE - 233)) | (1 << (MySQLParser.CURTIME - 233)) | (1 << (MySQLParser.DATE_ADD - 233)) | (1 << (MySQLParser.DATE_SUB - 233)) | (1 << (MySQLParser.EXTRACT - 233)) | (1 << (MySQLParser.LOCALTIMESTAMP - 233)) | (1 << (MySQLParser.NOW - 233)) | (1 << (MySQLParser.POSITION - 233)) | (1 << (MySQLParser.SUBSTR - 233)) | (1 << (MySQLParser.SUBSTRING - 233)))) !== 0) || ((((_la - 265)) & ~0x1f) == 0 && ((1 << (_la - 265)) & ((1 << (MySQLParser.SYSDATE - 265)) | (1 << (MySQLParser.TRIM - 265)) | (1 << (MySQLParser.UTC_DATE - 265)) | (1 << (MySQLParser.UTC_TIME - 265)) | (1 << (MySQLParser.UTC_TIMESTAMP - 265)) | (1 << (MySQLParser.ACCOUNT - 265)) | (1 << (MySQLParser.ACTION - 265)) | (1 << (MySQLParser.AFTER - 265)) | (1 << (MySQLParser.AGGREGATE - 265)) | (1 << (MySQLParser.ALGORITHM - 265)) | (1 << (MySQLParser.ANY - 265)) | (1 << (MySQLParser.AT - 265)) | (1 << (MySQLParser.AUTHORS - 265)) | (1 << (MySQLParser.AUTOCOMMIT - 265)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 265)) | (1 << (MySQLParser.AUTO_INCREMENT - 265)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 265)) | (1 << (MySQLParser.BEGIN - 265)) | (1 << (MySQLParser.BINLOG - 265)) | (1 << (MySQLParser.BIT - 265)) | (1 << (MySQLParser.BLOCK - 265)) | (1 << (MySQLParser.BOOL - 265)) | (1 << (MySQLParser.BOOLEAN - 265)) | (1 << (MySQLParser.BTREE - 265)) | (1 << (MySQLParser.CACHE - 265)) | (1 << (MySQLParser.CASCADED - 265)) | (1 << (MySQLParser.CHAIN - 265)) | (1 << (MySQLParser.CHANGED - 265)) | (1 << (MySQLParser.CHANNEL - 265)) | (1 << (MySQLParser.CHECKSUM - 265)) | (1 << (MySQLParser.PAGE_CHECKSUM - 265)) | (1 << (MySQLParser.CIPHER - 265)))) !== 0) || ((((_la - 297)) & ~0x1f) == 0 && ((1 << (_la - 297)) & ((1 << (MySQLParser.CLASS_ORIGIN - 297)) | (1 << (MySQLParser.CLIENT - 297)) | (1 << (MySQLParser.CLOSE - 297)) | (1 << (MySQLParser.COALESCE - 297)) | (1 << (MySQLParser.CODE - 297)) | (1 << (MySQLParser.COLUMNS - 297)) | (1 << (MySQLParser.COLUMN_FORMAT - 297)) | (1 << (MySQLParser.COLUMN_NAME - 297)) | (1 << (MySQLParser.COMMENT - 297)) | (1 << (MySQLParser.COMMIT - 297)) | (1 << (MySQLParser.COMPACT - 297)) | (1 << (MySQLParser.COMPLETION - 297)) | (1 << (MySQLParser.COMPRESSED - 297)) | (1 << (MySQLParser.COMPRESSION - 297)) | (1 << (MySQLParser.CONCURRENT - 297)) | (1 << (MySQLParser.CONNECTION - 297)) | (1 << (MySQLParser.CONSISTENT - 297)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 297)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 297)) | (1 << (MySQLParser.CONSTRAINT_NAME - 297)) | (1 << (MySQLParser.CONTAINS - 297)) | (1 << (MySQLParser.CONTEXT - 297)) | (1 << (MySQLParser.CONTRIBUTORS - 297)) | (1 << (MySQLParser.COPY - 297)) | (1 << (MySQLParser.CPU - 297)) | (1 << (MySQLParser.CURSOR_NAME - 297)) | (1 << (MySQLParser.DATA - 297)) | (1 << (MySQLParser.DATAFILE - 297)) | (1 << (MySQLParser.DEALLOCATE - 297)) | (1 << (MySQLParser.DEFAULT_AUTH - 297)) | (1 << (MySQLParser.DEFINER - 297)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 297)))) !== 0) || ((((_la - 329)) & ~0x1f) == 0 && ((1 << (_la - 329)) & ((1 << (MySQLParser.DES_KEY_FILE - 329)) | (1 << (MySQLParser.DIRECTORY - 329)) | (1 << (MySQLParser.DISABLE - 329)) | (1 << (MySQLParser.DISCARD - 329)) | (1 << (MySQLParser.DISK - 329)) | (1 << (MySQLParser.DO - 329)) | (1 << (MySQLParser.DUMPFILE - 329)) | (1 << (MySQLParser.DUPLICATE - 329)) | (1 << (MySQLParser.DYNAMIC - 329)) | (1 << (MySQLParser.ENABLE - 329)) | (1 << (MySQLParser.ENCRYPTION - 329)) | (1 << (MySQLParser.END - 329)) | (1 << (MySQLParser.ENDS - 329)) | (1 << (MySQLParser.ENGINE - 329)) | (1 << (MySQLParser.ENGINES - 329)) | (1 << (MySQLParser.ERROR - 329)) | (1 << (MySQLParser.ERRORS - 329)) | (1 << (MySQLParser.ESCAPE - 329)) | (1 << (MySQLParser.EVEN - 329)) | (1 << (MySQLParser.EVENT - 329)) | (1 << (MySQLParser.EVENTS - 329)) | (1 << (MySQLParser.EVERY - 329)) | (1 << (MySQLParser.EXCHANGE - 329)) | (1 << (MySQLParser.EXCLUSIVE - 329)) | (1 << (MySQLParser.EXPIRE - 329)) | (1 << (MySQLParser.EXPORT - 329)) | (1 << (MySQLParser.EXTENDED - 329)) | (1 << (MySQLParser.EXTENT_SIZE - 329)) | (1 << (MySQLParser.FAST - 329)) | (1 << (MySQLParser.FAULTS - 329)) | (1 << (MySQLParser.FIELDS - 329)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 329)))) !== 0) || ((((_la - 361)) & ~0x1f) == 0 && ((1 << (_la - 361)) & ((1 << (MySQLParser.FILTER - 361)) | (1 << (MySQLParser.FIRST - 361)) | (1 << (MySQLParser.FIXED - 361)) | (1 << (MySQLParser.FLUSH - 361)) | (1 << (MySQLParser.FOLLOWS - 361)) | (1 << (MySQLParser.FOUND - 361)) | (1 << (MySQLParser.FULL - 361)) | (1 << (MySQLParser.FUNCTION - 361)) | (1 << (MySQLParser.GENERAL - 361)) | (1 << (MySQLParser.GLOBAL - 361)) | (1 << (MySQLParser.GRANTS - 361)) | (1 << (MySQLParser.GROUP_REPLICATION - 361)) | (1 << (MySQLParser.HANDLER - 361)) | (1 << (MySQLParser.HASH - 361)) | (1 << (MySQLParser.HELP - 361)) | (1 << (MySQLParser.HOST - 361)) | (1 << (MySQLParser.HOSTS - 361)) | (1 << (MySQLParser.IDENTIFIED - 361)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 361)) | (1 << (MySQLParser.IMPORT - 361)) | (1 << (MySQLParser.INDEXES - 361)) | (1 << (MySQLParser.INITIAL_SIZE - 361)) | (1 << (MySQLParser.INPLACE - 361)) | (1 << (MySQLParser.INSERT_METHOD - 361)) | (1 << (MySQLParser.INSTALL - 361)) | (1 << (MySQLParser.INSTANCE - 361)) | (1 << (MySQLParser.INVISIBLE - 361)) | (1 << (MySQLParser.INVOKER - 361)) | (1 << (MySQLParser.IO - 361)) | (1 << (MySQLParser.IO_THREAD - 361)) | (1 << (MySQLParser.IPC - 361)) | (1 << (MySQLParser.ISOLATION - 361)))) !== 0) || ((((_la - 393)) & ~0x1f) == 0 && ((1 << (_la - 393)) & ((1 << (MySQLParser.ISSUER - 393)) | (1 << (MySQLParser.JSON - 393)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 393)) | (1 << (MySQLParser.LANGUAGE - 393)) | (1 << (MySQLParser.LAST - 393)) | (1 << (MySQLParser.LEAVES - 393)) | (1 << (MySQLParser.LESS - 393)) | (1 << (MySQLParser.LEVEL - 393)) | (1 << (MySQLParser.LIST - 393)) | (1 << (MySQLParser.LOCAL - 393)) | (1 << (MySQLParser.LOGFILE - 393)) | (1 << (MySQLParser.LOGS - 393)) | (1 << (MySQLParser.MASTER - 393)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 393)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 393)) | (1 << (MySQLParser.MASTER_DELAY - 393)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 393)) | (1 << (MySQLParser.MASTER_HOST - 393)) | (1 << (MySQLParser.MASTER_LOG_FILE - 393)) | (1 << (MySQLParser.MASTER_LOG_POS - 393)) | (1 << (MySQLParser.MASTER_PASSWORD - 393)) | (1 << (MySQLParser.MASTER_PORT - 393)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 393)) | (1 << (MySQLParser.MASTER_SSL - 393)) | (1 << (MySQLParser.MASTER_SSL_CA - 393)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 393)) | (1 << (MySQLParser.MASTER_SSL_CERT - 393)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 393)) | (1 << (MySQLParser.MASTER_SSL_CRL - 393)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 393)) | (1 << (MySQLParser.MASTER_SSL_KEY - 393)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 393)))) !== 0) || ((((_la - 425)) & ~0x1f) == 0 && ((1 << (_la - 425)) & ((1 << (MySQLParser.MASTER_USER - 425)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 425)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 425)) | (1 << (MySQLParser.MAX_ROWS - 425)) | (1 << (MySQLParser.MAX_SIZE - 425)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 425)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 425)) | (1 << (MySQLParser.MEDIUM - 425)) | (1 << (MySQLParser.MERGE - 425)) | (1 << (MySQLParser.MESSAGE_TEXT - 425)) | (1 << (MySQLParser.MID - 425)) | (1 << (MySQLParser.MIGRATE - 425)) | (1 << (MySQLParser.MIN_ROWS - 425)) | (1 << (MySQLParser.MODE - 425)) | (1 << (MySQLParser.MODIFY - 425)) | (1 << (MySQLParser.MUTEX - 425)) | (1 << (MySQLParser.MYSQL - 425)) | (1 << (MySQLParser.MYSQL_ERRNO - 425)) | (1 << (MySQLParser.NAME - 425)) | (1 << (MySQLParser.NAMES - 425)) | (1 << (MySQLParser.NCHAR - 425)) | (1 << (MySQLParser.NEVER - 425)) | (1 << (MySQLParser.NEXT - 425)) | (1 << (MySQLParser.NO - 425)) | (1 << (MySQLParser.NODEGROUP - 425)) | (1 << (MySQLParser.NONE - 425)) | (1 << (MySQLParser.OFFLINE - 425)) | (1 << (MySQLParser.OFFSET - 425)) | (1 << (MySQLParser.OJ - 425)) | (1 << (MySQLParser.OLD_PASSWORD - 425)) | (1 << (MySQLParser.ONE - 425)) | (1 << (MySQLParser.ONLINE - 425)))) !== 0) || ((((_la - 457)) & ~0x1f) == 0 && ((1 << (_la - 457)) & ((1 << (MySQLParser.ONLY - 457)) | (1 << (MySQLParser.OPEN - 457)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 457)) | (1 << (MySQLParser.OPTIONS - 457)) | (1 << (MySQLParser.OWNER - 457)) | (1 << (MySQLParser.PACK_KEYS - 457)) | (1 << (MySQLParser.PAGE - 457)) | (1 << (MySQLParser.PARSER - 457)) | (1 << (MySQLParser.PARTIAL - 457)) | (1 << (MySQLParser.PARTITIONING - 457)) | (1 << (MySQLParser.PARTITIONS - 457)) | (1 << (MySQLParser.PASSWORD - 457)) | (1 << (MySQLParser.PHASE - 457)) | (1 << (MySQLParser.PLUGIN - 457)) | (1 << (MySQLParser.PLUGIN_DIR - 457)) | (1 << (MySQLParser.PLUGINS - 457)) | (1 << (MySQLParser.PORT - 457)) | (1 << (MySQLParser.PRECEDES - 457)) | (1 << (MySQLParser.PREPARE - 457)) | (1 << (MySQLParser.PRESERVE - 457)) | (1 << (MySQLParser.PREV - 457)) | (1 << (MySQLParser.PROCESSLIST - 457)) | (1 << (MySQLParser.PROFILE - 457)) | (1 << (MySQLParser.PROFILES - 457)) | (1 << (MySQLParser.PROXY - 457)) | (1 << (MySQLParser.QUERY - 457)) | (1 << (MySQLParser.QUICK - 457)) | (1 << (MySQLParser.REBUILD - 457)) | (1 << (MySQLParser.RECOVER - 457)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 457)) | (1 << (MySQLParser.REDUNDANT - 457)) | (1 << (MySQLParser.RELAY - 457)))) !== 0) || ((((_la - 489)) & ~0x1f) == 0 && ((1 << (_la - 489)) & ((1 << (MySQLParser.RELAY_LOG_FILE - 489)) | (1 << (MySQLParser.RELAY_LOG_POS - 489)) | (1 << (MySQLParser.RELAYLOG - 489)) | (1 << (MySQLParser.REMOVE - 489)) | (1 << (MySQLParser.REORGANIZE - 489)) | (1 << (MySQLParser.REPAIR - 489)) | (1 << (MySQLParser.REPLICATE_DO_DB - 489)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 489)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 489)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 489)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 489)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 489)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 489)) | (1 << (MySQLParser.REPLICATION - 489)) | (1 << (MySQLParser.RESET - 489)) | (1 << (MySQLParser.RESUME - 489)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 489)) | (1 << (MySQLParser.RETURNS - 489)) | (1 << (MySQLParser.ROLE - 489)) | (1 << (MySQLParser.ROLLBACK - 489)) | (1 << (MySQLParser.ROLLUP - 489)) | (1 << (MySQLParser.ROTATE - 489)) | (1 << (MySQLParser.ROW - 489)) | (1 << (MySQLParser.ROWS - 489)) | (1 << (MySQLParser.ROW_FORMAT - 489)) | (1 << (MySQLParser.SAVEPOINT - 489)) | (1 << (MySQLParser.SCHEDULE - 489)) | (1 << (MySQLParser.SECURITY - 489)) | (1 << (MySQLParser.SERVER - 489)) | (1 << (MySQLParser.SESSION - 489)) | (1 << (MySQLParser.SHARE - 489)) | (1 << (MySQLParser.SHARED - 489)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (MySQLParser.SIGNED - 521)) | (1 << (MySQLParser.SIMPLE - 521)) | (1 << (MySQLParser.SLAVE - 521)) | (1 << (MySQLParser.SLOW - 521)) | (1 << (MySQLParser.SNAPSHOT - 521)) | (1 << (MySQLParser.SOCKET - 521)) | (1 << (MySQLParser.SOME - 521)) | (1 << (MySQLParser.SONAME - 521)) | (1 << (MySQLParser.SOUNDS - 521)) | (1 << (MySQLParser.SOURCE - 521)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 521)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 521)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 521)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 521)) | (1 << (MySQLParser.SQL_CACHE - 521)) | (1 << (MySQLParser.SQL_NO_CACHE - 521)) | (1 << (MySQLParser.SQL_THREAD - 521)) | (1 << (MySQLParser.START - 521)) | (1 << (MySQLParser.STARTS - 521)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 521)) | (1 << (MySQLParser.STATS_PERSISTENT - 521)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 521)) | (1 << (MySQLParser.STATUS - 521)) | (1 << (MySQLParser.STOP - 521)) | (1 << (MySQLParser.STORAGE - 521)) | (1 << (MySQLParser.STRING - 521)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 521)) | (1 << (MySQLParser.SUBJECT - 521)) | (1 << (MySQLParser.SUBPARTITION - 521)) | (1 << (MySQLParser.SUBPARTITIONS - 521)) | (1 << (MySQLParser.SUSPEND - 521)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (MySQLParser.SWAPS - 553)) | (1 << (MySQLParser.SWITCHES - 553)) | (1 << (MySQLParser.TABLE_NAME - 553)) | (1 << (MySQLParser.TABLESPACE - 553)) | (1 << (MySQLParser.TEMPORARY - 553)) | (1 << (MySQLParser.TEMPTABLE - 553)) | (1 << (MySQLParser.THAN - 553)) | (1 << (MySQLParser.TRADITIONAL - 553)) | (1 << (MySQLParser.TRANSACTION - 553)) | (1 << (MySQLParser.TRANSACTIONAL - 553)) | (1 << (MySQLParser.TRIGGERS - 553)) | (1 << (MySQLParser.TRUNCATE - 553)) | (1 << (MySQLParser.UNDEFINED - 553)) | (1 << (MySQLParser.UNDOFILE - 553)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 553)) | (1 << (MySQLParser.UNINSTALL - 553)) | (1 << (MySQLParser.UNKNOWN - 553)) | (1 << (MySQLParser.UNTIL - 553)) | (1 << (MySQLParser.UPGRADE - 553)) | (1 << (MySQLParser.USER - 553)) | (1 << (MySQLParser.USE_FRM - 553)) | (1 << (MySQLParser.USER_RESOURCES - 553)) | (1 << (MySQLParser.VALIDATION - 553)) | (1 << (MySQLParser.VALUE - 553)) | (1 << (MySQLParser.VARIABLES - 553)) | (1 << (MySQLParser.VIEW - 553)) | (1 << (MySQLParser.VISIBLE - 553)) | (1 << (MySQLParser.WAIT - 553)) | (1 << (MySQLParser.WARNINGS - 553)) | (1 << (MySQLParser.WITHOUT - 553)) | (1 << (MySQLParser.WORK - 553)))) !== 0) || ((((_la - 585)) & ~0x1f) == 0 && ((1 << (_la - 585)) & ((1 << (MySQLParser.WRAPPER - 585)) | (1 << (MySQLParser.X509 - 585)) | (1 << (MySQLParser.XA - 585)) | (1 << (MySQLParser.XML - 585)) | (1 << (MySQLParser.INTERNAL - 585)) | (1 << (MySQLParser.QUARTER - 585)) | (1 << (MySQLParser.MONTH - 585)) | (1 << (MySQLParser.DAY - 585)) | (1 << (MySQLParser.HOUR - 585)) | (1 << (MySQLParser.MINUTE - 585)) | (1 << (MySQLParser.WEEK - 585)) | (1 << (MySQLParser.SECOND - 585)) | (1 << (MySQLParser.MICROSECOND - 585)) | (1 << (MySQLParser.TABLES - 585)) | (1 << (MySQLParser.ROUTINE - 585)) | (1 << (MySQLParser.EXECUTE - 585)) | (1 << (MySQLParser.FILE - 585)) | (1 << (MySQLParser.PROCESS - 585)) | (1 << (MySQLParser.RELOAD - 585)) | (1 << (MySQLParser.SHUTDOWN - 585)) | (1 << (MySQLParser.SUPER - 585)) | (1 << (MySQLParser.PRIVILEGES - 585)) | (1 << (MySQLParser.AUDIT_ADMIN - 585)) | (1 << (MySQLParser.BACKUP_ADMIN - 585)) | (1 << (MySQLParser.BINLOG_ADMIN - 585)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 585)) | (1 << (MySQLParser.CLONE_ADMIN - 585)))) !== 0) || ((((_la - 617)) & ~0x1f) == 0 && ((1 << (_la - 617)) & ((1 << (MySQLParser.CONNECTION_ADMIN - 617)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 617)) | (1 << (MySQLParser.FIREWALL_ADMIN - 617)) | (1 << (MySQLParser.FIREWALL_USER - 617)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 617)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 617)) | (1 << (MySQLParser.NDB_STORED_USER - 617)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 617)) | (1 << (MySQLParser.REPLICATION_APPLIER - 617)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 617)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 617)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 617)) | (1 << (MySQLParser.ROLE_ADMIN - 617)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 617)) | (1 << (MySQLParser.SET_USER_ID - 617)) | (1 << (MySQLParser.SHOW_ROUTINE - 617)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 617)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 617)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 617)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 617)) | (1 << (MySQLParser.ARMSCII8 - 617)) | (1 << (MySQLParser.ASCII - 617)) | (1 << (MySQLParser.BIG5 - 617)) | (1 << (MySQLParser.CP1250 - 617)) | (1 << (MySQLParser.CP1251 - 617)) | (1 << (MySQLParser.CP1256 - 617)) | (1 << (MySQLParser.CP1257 - 617)) | (1 << (MySQLParser.CP850 - 617)) | (1 << (MySQLParser.CP852 - 617)) | (1 << (MySQLParser.CP866 - 617)) | (1 << (MySQLParser.CP932 - 617)) | (1 << (MySQLParser.DEC8 - 617)))) !== 0) || ((((_la - 649)) & ~0x1f) == 0 && ((1 << (_la - 649)) & ((1 << (MySQLParser.EUCJPMS - 649)) | (1 << (MySQLParser.EUCKR - 649)) | (1 << (MySQLParser.GB2312 - 649)) | (1 << (MySQLParser.GBK - 649)) | (1 << (MySQLParser.GEOSTD8 - 649)) | (1 << (MySQLParser.GREEK - 649)) | (1 << (MySQLParser.HEBREW - 649)) | (1 << (MySQLParser.HP8 - 649)) | (1 << (MySQLParser.KEYBCS2 - 649)) | (1 << (MySQLParser.KOI8R - 649)) | (1 << (MySQLParser.KOI8U - 649)) | (1 << (MySQLParser.LATIN1 - 649)) | (1 << (MySQLParser.LATIN2 - 649)) | (1 << (MySQLParser.LATIN5 - 649)) | (1 << (MySQLParser.LATIN7 - 649)) | (1 << (MySQLParser.MACCE - 649)) | (1 << (MySQLParser.MACROMAN - 649)) | (1 << (MySQLParser.SJIS - 649)) | (1 << (MySQLParser.SWE7 - 649)) | (1 << (MySQLParser.TIS620 - 649)) | (1 << (MySQLParser.UCS2 - 649)) | (1 << (MySQLParser.UJIS - 649)) | (1 << (MySQLParser.UTF16 - 649)) | (1 << (MySQLParser.UTF16LE - 649)) | (1 << (MySQLParser.UTF32 - 649)) | (1 << (MySQLParser.UTF8 - 649)) | (1 << (MySQLParser.UTF8MB3 - 649)) | (1 << (MySQLParser.UTF8MB4 - 649)) | (1 << (MySQLParser.ARCHIVE - 649)) | (1 << (MySQLParser.BLACKHOLE - 649)) | (1 << (MySQLParser.CSV - 649)) | (1 << (MySQLParser.FEDERATED - 649)))) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & ((1 << (MySQLParser.INNODB - 681)) | (1 << (MySQLParser.MEMORY - 681)) | (1 << (MySQLParser.MRG_MYISAM - 681)) | (1 << (MySQLParser.MYISAM - 681)) | (1 << (MySQLParser.NDB - 681)) | (1 << (MySQLParser.NDBCLUSTER - 681)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 681)) | (1 << (MySQLParser.TOKUDB - 681)) | (1 << (MySQLParser.REPEATABLE - 681)) | (1 << (MySQLParser.COMMITTED - 681)) | (1 << (MySQLParser.UNCOMMITTED - 681)) | (1 << (MySQLParser.SERIALIZABLE - 681)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 681)) | (1 << (MySQLParser.LINESTRING - 681)) | (1 << (MySQLParser.MULTILINESTRING - 681)) | (1 << (MySQLParser.MULTIPOINT - 681)) | (1 << (MySQLParser.MULTIPOLYGON - 681)) | (1 << (MySQLParser.POINT - 681)) | (1 << (MySQLParser.POLYGON - 681)) | (1 << (MySQLParser.ABS - 681)) | (1 << (MySQLParser.ACOS - 681)) | (1 << (MySQLParser.ADDDATE - 681)) | (1 << (MySQLParser.ADDTIME - 681)) | (1 << (MySQLParser.AES_DECRYPT - 681)) | (1 << (MySQLParser.AES_ENCRYPT - 681)) | (1 << (MySQLParser.AREA - 681)) | (1 << (MySQLParser.ASBINARY - 681)) | (1 << (MySQLParser.ASIN - 681)) | (1 << (MySQLParser.ASTEXT - 681)) | (1 << (MySQLParser.ASWKB - 681)))) !== 0) || ((((_la - 713)) & ~0x1f) == 0 && ((1 << (_la - 713)) & ((1 << (MySQLParser.ASWKT - 713)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 713)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 713)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 713)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 713)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 713)) | (1 << (MySQLParser.ATAN - 713)) | (1 << (MySQLParser.ATAN2 - 713)) | (1 << (MySQLParser.BENCHMARK - 713)) | (1 << (MySQLParser.BIN - 713)) | (1 << (MySQLParser.BIT_COUNT - 713)) | (1 << (MySQLParser.BIT_LENGTH - 713)) | (1 << (MySQLParser.BUFFER - 713)) | (1 << (MySQLParser.CATALOG_NAME - 713)) | (1 << (MySQLParser.CEIL - 713)) | (1 << (MySQLParser.CEILING - 713)) | (1 << (MySQLParser.CENTROID - 713)) | (1 << (MySQLParser.CHARACTER_LENGTH - 713)) | (1 << (MySQLParser.CHARSET - 713)) | (1 << (MySQLParser.CHAR_LENGTH - 713)) | (1 << (MySQLParser.COERCIBILITY - 713)) | (1 << (MySQLParser.COLLATION - 713)) | (1 << (MySQLParser.COMPRESS - 713)) | (1 << (MySQLParser.CONCAT - 713)) | (1 << (MySQLParser.CONCAT_WS - 713)) | (1 << (MySQLParser.CONNECTION_ID - 713)) | (1 << (MySQLParser.CONV - 713)) | (1 << (MySQLParser.CONVERT_TZ - 713)) | (1 << (MySQLParser.COS - 713)) | (1 << (MySQLParser.COT - 713)) | (1 << (MySQLParser.CRC32 - 713)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 713)))) !== 0) || ((((_la - 745)) & ~0x1f) == 0 && ((1 << (_la - 745)) & ((1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 745)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 745)) | (1 << (MySQLParser.CREATE_DIGEST - 745)) | (1 << (MySQLParser.CROSSES - 745)) | (1 << (MySQLParser.DATEDIFF - 745)) | (1 << (MySQLParser.DATE_FORMAT - 745)) | (1 << (MySQLParser.DAYNAME - 745)) | (1 << (MySQLParser.DAYOFMONTH - 745)) | (1 << (MySQLParser.DAYOFWEEK - 745)) | (1 << (MySQLParser.DAYOFYEAR - 745)) | (1 << (MySQLParser.DECODE - 745)) | (1 << (MySQLParser.DEGREES - 745)) | (1 << (MySQLParser.DES_DECRYPT - 745)) | (1 << (MySQLParser.DES_ENCRYPT - 745)) | (1 << (MySQLParser.DIMENSION - 745)) | (1 << (MySQLParser.DISJOINT - 745)) | (1 << (MySQLParser.ELT - 745)) | (1 << (MySQLParser.ENCODE - 745)) | (1 << (MySQLParser.ENCRYPT - 745)) | (1 << (MySQLParser.ENDPOINT - 745)) | (1 << (MySQLParser.ENVELOPE - 745)) | (1 << (MySQLParser.EQUALS - 745)) | (1 << (MySQLParser.EXP - 745)) | (1 << (MySQLParser.EXPORT_SET - 745)) | (1 << (MySQLParser.EXTERIORRING - 745)) | (1 << (MySQLParser.EXTRACTVALUE - 745)) | (1 << (MySQLParser.FIELD - 745)) | (1 << (MySQLParser.FIND_IN_SET - 745)) | (1 << (MySQLParser.FLOOR - 745)) | (1 << (MySQLParser.FORMAT - 745)) | (1 << (MySQLParser.FOUND_ROWS - 745)) | (1 << (MySQLParser.FROM_BASE64 - 745)))) !== 0) || ((((_la - 777)) & ~0x1f) == 0 && ((1 << (_la - 777)) & ((1 << (MySQLParser.FROM_DAYS - 777)) | (1 << (MySQLParser.FROM_UNIXTIME - 777)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 777)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 777)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 777)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 777)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 777)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 777)) | (1 << (MySQLParser.GEOMETRYN - 777)) | (1 << (MySQLParser.GEOMETRYTYPE - 777)) | (1 << (MySQLParser.GEOMFROMTEXT - 777)) | (1 << (MySQLParser.GEOMFROMWKB - 777)) | (1 << (MySQLParser.GET_FORMAT - 777)) | (1 << (MySQLParser.GET_LOCK - 777)) | (1 << (MySQLParser.GLENGTH - 777)) | (1 << (MySQLParser.GREATEST - 777)) | (1 << (MySQLParser.GTID_SUBSET - 777)) | (1 << (MySQLParser.GTID_SUBTRACT - 777)) | (1 << (MySQLParser.HEX - 777)) | (1 << (MySQLParser.IFNULL - 777)) | (1 << (MySQLParser.INET6_ATON - 777)) | (1 << (MySQLParser.INET6_NTOA - 777)) | (1 << (MySQLParser.INET_ATON - 777)) | (1 << (MySQLParser.INET_NTOA - 777)) | (1 << (MySQLParser.INSTR - 777)) | (1 << (MySQLParser.INTERIORRINGN - 777)) | (1 << (MySQLParser.INTERSECTS - 777)) | (1 << (MySQLParser.ISCLOSED - 777)) | (1 << (MySQLParser.ISEMPTY - 777)) | (1 << (MySQLParser.ISNULL - 777)) | (1 << (MySQLParser.ISSIMPLE - 777)) | (1 << (MySQLParser.IS_FREE_LOCK - 777)))) !== 0) || ((((_la - 809)) & ~0x1f) == 0 && ((1 << (_la - 809)) & ((1 << (MySQLParser.IS_IPV4 - 809)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 809)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 809)) | (1 << (MySQLParser.IS_IPV6 - 809)) | (1 << (MySQLParser.IS_USED_LOCK - 809)) | (1 << (MySQLParser.LAST_INSERT_ID - 809)) | (1 << (MySQLParser.LCASE - 809)) | (1 << (MySQLParser.LEAST - 809)) | (1 << (MySQLParser.LENGTH - 809)) | (1 << (MySQLParser.LINEFROMTEXT - 809)) | (1 << (MySQLParser.LINEFROMWKB - 809)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 809)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 809)) | (1 << (MySQLParser.LN - 809)) | (1 << (MySQLParser.LOAD_FILE - 809)) | (1 << (MySQLParser.LOCATE - 809)) | (1 << (MySQLParser.LOG - 809)) | (1 << (MySQLParser.LOG10 - 809)) | (1 << (MySQLParser.LOG2 - 809)) | (1 << (MySQLParser.LOWER - 809)) | (1 << (MySQLParser.LPAD - 809)) | (1 << (MySQLParser.LTRIM - 809)) | (1 << (MySQLParser.MAKEDATE - 809)) | (1 << (MySQLParser.MAKETIME - 809)) | (1 << (MySQLParser.MAKE_SET - 809)) | (1 << (MySQLParser.MASTER_POS_WAIT - 809)) | (1 << (MySQLParser.MBRCONTAINS - 809)) | (1 << (MySQLParser.MBRDISJOINT - 809)) | (1 << (MySQLParser.MBREQUAL - 809)) | (1 << (MySQLParser.MBRINTERSECTS - 809)) | (1 << (MySQLParser.MBROVERLAPS - 809)) | (1 << (MySQLParser.MBRTOUCHES - 809)))) !== 0) || ((((_la - 841)) & ~0x1f) == 0 && ((1 << (_la - 841)) & ((1 << (MySQLParser.MBRWITHIN - 841)) | (1 << (MySQLParser.MD5 - 841)) | (1 << (MySQLParser.MLINEFROMTEXT - 841)) | (1 << (MySQLParser.MLINEFROMWKB - 841)) | (1 << (MySQLParser.MONTHNAME - 841)) | (1 << (MySQLParser.MPOINTFROMTEXT - 841)) | (1 << (MySQLParser.MPOINTFROMWKB - 841)) | (1 << (MySQLParser.MPOLYFROMTEXT - 841)) | (1 << (MySQLParser.MPOLYFROMWKB - 841)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 841)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 841)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 841)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 841)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 841)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 841)) | (1 << (MySQLParser.NAME_CONST - 841)) | (1 << (MySQLParser.NULLIF - 841)) | (1 << (MySQLParser.NUMGEOMETRIES - 841)) | (1 << (MySQLParser.NUMINTERIORRINGS - 841)) | (1 << (MySQLParser.NUMPOINTS - 841)) | (1 << (MySQLParser.OCT - 841)) | (1 << (MySQLParser.OCTET_LENGTH - 841)) | (1 << (MySQLParser.ORD - 841)) | (1 << (MySQLParser.OVERLAPS - 841)) | (1 << (MySQLParser.PERIOD_ADD - 841)) | (1 << (MySQLParser.PERIOD_DIFF - 841)) | (1 << (MySQLParser.PI - 841)) | (1 << (MySQLParser.POINTFROMTEXT - 841)) | (1 << (MySQLParser.POINTFROMWKB - 841)) | (1 << (MySQLParser.POINTN - 841)) | (1 << (MySQLParser.POLYFROMTEXT - 841)) | (1 << (MySQLParser.POLYFROMWKB - 841)))) !== 0) || ((((_la - 873)) & ~0x1f) == 0 && ((1 << (_la - 873)) & ((1 << (MySQLParser.POLYGONFROMTEXT - 873)) | (1 << (MySQLParser.POLYGONFROMWKB - 873)) | (1 << (MySQLParser.POW - 873)) | (1 << (MySQLParser.POWER - 873)) | (1 << (MySQLParser.QUOTE - 873)) | (1 << (MySQLParser.RADIANS - 873)) | (1 << (MySQLParser.RAND - 873)) | (1 << (MySQLParser.RANDOM_BYTES - 873)) | (1 << (MySQLParser.RELEASE_LOCK - 873)) | (1 << (MySQLParser.REVERSE - 873)) | (1 << (MySQLParser.ROUND - 873)) | (1 << (MySQLParser.ROW_COUNT - 873)) | (1 << (MySQLParser.RPAD - 873)) | (1 << (MySQLParser.RTRIM - 873)) | (1 << (MySQLParser.SEC_TO_TIME - 873)) | (1 << (MySQLParser.SESSION_USER - 873)) | (1 << (MySQLParser.SHA - 873)) | (1 << (MySQLParser.SHA1 - 873)) | (1 << (MySQLParser.SHA2 - 873)) | (1 << (MySQLParser.SCHEMA_NAME - 873)) | (1 << (MySQLParser.SIGN - 873)) | (1 << (MySQLParser.SIN - 873)) | (1 << (MySQLParser.SLEEP - 873)) | (1 << (MySQLParser.SOUNDEX - 873)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 873)) | (1 << (MySQLParser.SQRT - 873)) | (1 << (MySQLParser.SRID - 873)) | (1 << (MySQLParser.STARTPOINT - 873)) | (1 << (MySQLParser.STRCMP - 873)) | (1 << (MySQLParser.STR_TO_DATE - 873)) | (1 << (MySQLParser.ST_AREA - 873)) | (1 << (MySQLParser.ST_ASBINARY - 873)))) !== 0) || ((((_la - 905)) & ~0x1f) == 0 && ((1 << (_la - 905)) & ((1 << (MySQLParser.ST_ASTEXT - 905)) | (1 << (MySQLParser.ST_ASWKB - 905)) | (1 << (MySQLParser.ST_ASWKT - 905)) | (1 << (MySQLParser.ST_BUFFER - 905)) | (1 << (MySQLParser.ST_CENTROID - 905)) | (1 << (MySQLParser.ST_CONTAINS - 905)) | (1 << (MySQLParser.ST_CROSSES - 905)) | (1 << (MySQLParser.ST_DIFFERENCE - 905)) | (1 << (MySQLParser.ST_DIMENSION - 905)) | (1 << (MySQLParser.ST_DISJOINT - 905)) | (1 << (MySQLParser.ST_DISTANCE - 905)) | (1 << (MySQLParser.ST_ENDPOINT - 905)) | (1 << (MySQLParser.ST_ENVELOPE - 905)) | (1 << (MySQLParser.ST_EQUALS - 905)) | (1 << (MySQLParser.ST_EXTERIORRING - 905)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 905)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 905)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 905)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 905)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 905)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 905)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 905)) | (1 << (MySQLParser.ST_GEOMETRYN - 905)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 905)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 905)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 905)) | (1 << (MySQLParser.ST_INTERIORRINGN - 905)) | (1 << (MySQLParser.ST_INTERSECTION - 905)) | (1 << (MySQLParser.ST_INTERSECTS - 905)) | (1 << (MySQLParser.ST_ISCLOSED - 905)) | (1 << (MySQLParser.ST_ISEMPTY - 905)) | (1 << (MySQLParser.ST_ISSIMPLE - 905)))) !== 0) || ((((_la - 937)) & ~0x1f) == 0 && ((1 << (_la - 937)) & ((1 << (MySQLParser.ST_LINEFROMTEXT - 937)) | (1 << (MySQLParser.ST_LINEFROMWKB - 937)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 937)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 937)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 937)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 937)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 937)) | (1 << (MySQLParser.ST_NUMPOINTS - 937)) | (1 << (MySQLParser.ST_OVERLAPS - 937)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 937)) | (1 << (MySQLParser.ST_POINTFROMWKB - 937)) | (1 << (MySQLParser.ST_POINTN - 937)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 937)) | (1 << (MySQLParser.ST_POLYFROMWKB - 937)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 937)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 937)) | (1 << (MySQLParser.ST_SRID - 937)) | (1 << (MySQLParser.ST_STARTPOINT - 937)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 937)) | (1 << (MySQLParser.ST_TOUCHES - 937)) | (1 << (MySQLParser.ST_UNION - 937)) | (1 << (MySQLParser.ST_WITHIN - 937)) | (1 << (MySQLParser.ST_X - 937)) | (1 << (MySQLParser.ST_Y - 937)) | (1 << (MySQLParser.SUBDATE - 937)) | (1 << (MySQLParser.SUBSTRING_INDEX - 937)) | (1 << (MySQLParser.SUBTIME - 937)) | (1 << (MySQLParser.SYSTEM_USER - 937)) | (1 << (MySQLParser.TAN - 937)) | (1 << (MySQLParser.TIMEDIFF - 937)) | (1 << (MySQLParser.TIMESTAMPADD - 937)) | (1 << (MySQLParser.TIMESTAMPDIFF - 937)))) !== 0) || ((((_la - 969)) & ~0x1f) == 0 && ((1 << (_la - 969)) & ((1 << (MySQLParser.TIME_FORMAT - 969)) | (1 << (MySQLParser.TIME_TO_SEC - 969)) | (1 << (MySQLParser.TOUCHES - 969)) | (1 << (MySQLParser.TO_BASE64 - 969)) | (1 << (MySQLParser.TO_DAYS - 969)) | (1 << (MySQLParser.TO_SECONDS - 969)) | (1 << (MySQLParser.UCASE - 969)) | (1 << (MySQLParser.UNCOMPRESS - 969)) | (1 << (MySQLParser.UNCOMPRESSED_LENGTH - 969)) | (1 << (MySQLParser.UNHEX - 969)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 969)) | (1 << (MySQLParser.UPDATEXML - 969)) | (1 << (MySQLParser.UPPER - 969)) | (1 << (MySQLParser.UUID - 969)) | (1 << (MySQLParser.UUID_SHORT - 969)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 969)) | (1 << (MySQLParser.VERSION - 969)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 969)) | (1 << (MySQLParser.WEEKDAY - 969)) | (1 << (MySQLParser.WEEKOFYEAR - 969)) | (1 << (MySQLParser.WEIGHT_STRING - 969)) | (1 << (MySQLParser.WITHIN - 969)) | (1 << (MySQLParser.YEARWEEK - 969)) | (1 << (MySQLParser.Y_FUNCTION - 969)) | (1 << (MySQLParser.X_FUNCTION - 969)))) !== 0) || ((((_la - 1006)) & ~0x1f) == 0 && ((1 << (_la - 1006)) & ((1 << (MySQLParser.PLUS - 1006)) | (1 << (MySQLParser.MINUS - 1006)) | (1 << (MySQLParser.EXCLAMATION_SYMBOL - 1006)) | (1 << (MySQLParser.BIT_NOT_OP - 1006)) | (1 << (MySQLParser.LR_BRACKET - 1006)) | (1 << (MySQLParser.ZERO_DECIMAL - 1006)) | (1 << (MySQLParser.ONE_DECIMAL - 1006)) | (1 << (MySQLParser.TWO_DECIMAL - 1006)) | (1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1006)) | (1 << (MySQLParser.START_NATIONAL_STRING_LITERAL - 1006)) | (1 << (MySQLParser.STRING_LITERAL - 1006)) | (1 << (MySQLParser.DECIMAL_LITERAL - 1006)) | (1 << (MySQLParser.HEXADECIMAL_LITERAL - 1006)))) !== 0) || ((((_la - 1038)) & ~0x1f) == 0 && ((1 << (_la - 1038)) & ((1 << (MySQLParser.REAL_LITERAL - 1038)) | (1 << (MySQLParser.NULL_SPEC_LITERAL - 1038)) | (1 << (MySQLParser.BIT_STRING - 1038)) | (1 << (MySQLParser.STRING_CHARSET_NAME - 1038)) | (1 << (MySQLParser.ID - 1038)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1038)) | (1 << (MySQLParser.LOCAL_ID - 1038)) | (1 << (MySQLParser.GLOBAL_ID - 1038)))) !== 0)) {
                    this.state = 3061;
                    this.expressionsWithDefaults();
                }

                this.state = 3064;
                this.match(MySQLParser.RR_BRACKET);
                this.state = 3069;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UpdatedElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_updatedElement;
    return this;
}

UpdatedElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpdatedElementContext.prototype.constructor = UpdatedElementContext;

UpdatedElementContext.prototype.fullColumnName = function() {
    return this.getTypedRuleContext(FullColumnNameContext,0);
};

UpdatedElementContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

UpdatedElementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

UpdatedElementContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

UpdatedElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUpdatedElement(this);
	}
};

UpdatedElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUpdatedElement(this);
	}
};

UpdatedElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUpdatedElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UpdatedElementContext = UpdatedElementContext;

MySQLParser.prototype.updatedElement = function() {

    var localctx = new UpdatedElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, MySQLParser.RULE_updatedElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3072;
        this.fullColumnName();
        this.state = 3073;
        this.match(MySQLParser.EQUAL_SYMBOL);
        this.state = 3076;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CASE:
        case MySQLParser.CAST:
        case MySQLParser.CONVERT:
        case MySQLParser.CURRENT:
        case MySQLParser.CURRENT_USER:
        case MySQLParser.DATABASE:
        case MySQLParser.DIAGNOSTICS:
        case MySQLParser.EXISTS:
        case MySQLParser.FALSE:
        case MySQLParser.IF:
        case MySQLParser.INSERT:
        case MySQLParser.INTERVAL:
        case MySQLParser.LEFT:
        case MySQLParser.NOT:
        case MySQLParser.NULL_LITERAL:
        case MySQLParser.NUMBER:
        case MySQLParser.REPLACE:
        case MySQLParser.RIGHT:
        case MySQLParser.STACKED:
        case MySQLParser.TRUE:
        case MySQLParser.VALUES:
        case MySQLParser.DATE:
        case MySQLParser.TIME:
        case MySQLParser.TIMESTAMP:
        case MySQLParser.DATETIME:
        case MySQLParser.YEAR:
        case MySQLParser.CHAR:
        case MySQLParser.BINARY:
        case MySQLParser.TEXT:
        case MySQLParser.ENUM:
        case MySQLParser.SERIAL:
        case MySQLParser.JSON_VALID:
        case MySQLParser.JSON_SCHEMA_VALID:
        case MySQLParser.AVG:
        case MySQLParser.BIT_AND:
        case MySQLParser.BIT_OR:
        case MySQLParser.BIT_XOR:
        case MySQLParser.COUNT:
        case MySQLParser.GROUP_CONCAT:
        case MySQLParser.MAX:
        case MySQLParser.MIN:
        case MySQLParser.STD:
        case MySQLParser.STDDEV:
        case MySQLParser.STDDEV_POP:
        case MySQLParser.STDDEV_SAMP:
        case MySQLParser.SUM:
        case MySQLParser.VAR_POP:
        case MySQLParser.VAR_SAMP:
        case MySQLParser.VARIANCE:
        case MySQLParser.CURRENT_DATE:
        case MySQLParser.CURRENT_TIME:
        case MySQLParser.CURRENT_TIMESTAMP:
        case MySQLParser.LOCALTIME:
        case MySQLParser.CURDATE:
        case MySQLParser.CURTIME:
        case MySQLParser.DATE_ADD:
        case MySQLParser.DATE_SUB:
        case MySQLParser.EXTRACT:
        case MySQLParser.LOCALTIMESTAMP:
        case MySQLParser.NOW:
        case MySQLParser.POSITION:
        case MySQLParser.SUBSTR:
        case MySQLParser.SUBSTRING:
        case MySQLParser.SYSDATE:
        case MySQLParser.TRIM:
        case MySQLParser.UTC_DATE:
        case MySQLParser.UTC_TIME:
        case MySQLParser.UTC_TIMESTAMP:
        case MySQLParser.ACCOUNT:
        case MySQLParser.ACTION:
        case MySQLParser.AFTER:
        case MySQLParser.AGGREGATE:
        case MySQLParser.ALGORITHM:
        case MySQLParser.ANY:
        case MySQLParser.AT:
        case MySQLParser.AUTHORS:
        case MySQLParser.AUTOCOMMIT:
        case MySQLParser.AUTOEXTEND_SIZE:
        case MySQLParser.AUTO_INCREMENT:
        case MySQLParser.AVG_ROW_LENGTH:
        case MySQLParser.BEGIN:
        case MySQLParser.BINLOG:
        case MySQLParser.BIT:
        case MySQLParser.BLOCK:
        case MySQLParser.BOOL:
        case MySQLParser.BOOLEAN:
        case MySQLParser.BTREE:
        case MySQLParser.CACHE:
        case MySQLParser.CASCADED:
        case MySQLParser.CHAIN:
        case MySQLParser.CHANGED:
        case MySQLParser.CHANNEL:
        case MySQLParser.CHECKSUM:
        case MySQLParser.PAGE_CHECKSUM:
        case MySQLParser.CIPHER:
        case MySQLParser.CLASS_ORIGIN:
        case MySQLParser.CLIENT:
        case MySQLParser.CLOSE:
        case MySQLParser.COALESCE:
        case MySQLParser.CODE:
        case MySQLParser.COLUMNS:
        case MySQLParser.COLUMN_FORMAT:
        case MySQLParser.COLUMN_NAME:
        case MySQLParser.COMMENT:
        case MySQLParser.COMMIT:
        case MySQLParser.COMPACT:
        case MySQLParser.COMPLETION:
        case MySQLParser.COMPRESSED:
        case MySQLParser.COMPRESSION:
        case MySQLParser.CONCURRENT:
        case MySQLParser.CONNECTION:
        case MySQLParser.CONSISTENT:
        case MySQLParser.CONSTRAINT_CATALOG:
        case MySQLParser.CONSTRAINT_SCHEMA:
        case MySQLParser.CONSTRAINT_NAME:
        case MySQLParser.CONTAINS:
        case MySQLParser.CONTEXT:
        case MySQLParser.CONTRIBUTORS:
        case MySQLParser.COPY:
        case MySQLParser.CPU:
        case MySQLParser.CURSOR_NAME:
        case MySQLParser.DATA:
        case MySQLParser.DATAFILE:
        case MySQLParser.DEALLOCATE:
        case MySQLParser.DEFAULT_AUTH:
        case MySQLParser.DEFINER:
        case MySQLParser.DELAY_KEY_WRITE:
        case MySQLParser.DES_KEY_FILE:
        case MySQLParser.DIRECTORY:
        case MySQLParser.DISABLE:
        case MySQLParser.DISCARD:
        case MySQLParser.DISK:
        case MySQLParser.DO:
        case MySQLParser.DUMPFILE:
        case MySQLParser.DUPLICATE:
        case MySQLParser.DYNAMIC:
        case MySQLParser.ENABLE:
        case MySQLParser.ENCRYPTION:
        case MySQLParser.END:
        case MySQLParser.ENDS:
        case MySQLParser.ENGINE:
        case MySQLParser.ENGINES:
        case MySQLParser.ERROR:
        case MySQLParser.ERRORS:
        case MySQLParser.ESCAPE:
        case MySQLParser.EVEN:
        case MySQLParser.EVENT:
        case MySQLParser.EVENTS:
        case MySQLParser.EVERY:
        case MySQLParser.EXCHANGE:
        case MySQLParser.EXCLUSIVE:
        case MySQLParser.EXPIRE:
        case MySQLParser.EXPORT:
        case MySQLParser.EXTENDED:
        case MySQLParser.EXTENT_SIZE:
        case MySQLParser.FAST:
        case MySQLParser.FAULTS:
        case MySQLParser.FIELDS:
        case MySQLParser.FILE_BLOCK_SIZE:
        case MySQLParser.FILTER:
        case MySQLParser.FIRST:
        case MySQLParser.FIXED:
        case MySQLParser.FLUSH:
        case MySQLParser.FOLLOWS:
        case MySQLParser.FOUND:
        case MySQLParser.FULL:
        case MySQLParser.FUNCTION:
        case MySQLParser.GENERAL:
        case MySQLParser.GLOBAL:
        case MySQLParser.GRANTS:
        case MySQLParser.GROUP_REPLICATION:
        case MySQLParser.HANDLER:
        case MySQLParser.HASH:
        case MySQLParser.HELP:
        case MySQLParser.HOST:
        case MySQLParser.HOSTS:
        case MySQLParser.IDENTIFIED:
        case MySQLParser.IGNORE_SERVER_IDS:
        case MySQLParser.IMPORT:
        case MySQLParser.INDEXES:
        case MySQLParser.INITIAL_SIZE:
        case MySQLParser.INPLACE:
        case MySQLParser.INSERT_METHOD:
        case MySQLParser.INSTALL:
        case MySQLParser.INSTANCE:
        case MySQLParser.INVISIBLE:
        case MySQLParser.INVOKER:
        case MySQLParser.IO:
        case MySQLParser.IO_THREAD:
        case MySQLParser.IPC:
        case MySQLParser.ISOLATION:
        case MySQLParser.ISSUER:
        case MySQLParser.JSON:
        case MySQLParser.KEY_BLOCK_SIZE:
        case MySQLParser.LANGUAGE:
        case MySQLParser.LAST:
        case MySQLParser.LEAVES:
        case MySQLParser.LESS:
        case MySQLParser.LEVEL:
        case MySQLParser.LIST:
        case MySQLParser.LOCAL:
        case MySQLParser.LOGFILE:
        case MySQLParser.LOGS:
        case MySQLParser.MASTER:
        case MySQLParser.MASTER_AUTO_POSITION:
        case MySQLParser.MASTER_CONNECT_RETRY:
        case MySQLParser.MASTER_DELAY:
        case MySQLParser.MASTER_HEARTBEAT_PERIOD:
        case MySQLParser.MASTER_HOST:
        case MySQLParser.MASTER_LOG_FILE:
        case MySQLParser.MASTER_LOG_POS:
        case MySQLParser.MASTER_PASSWORD:
        case MySQLParser.MASTER_PORT:
        case MySQLParser.MASTER_RETRY_COUNT:
        case MySQLParser.MASTER_SSL:
        case MySQLParser.MASTER_SSL_CA:
        case MySQLParser.MASTER_SSL_CAPATH:
        case MySQLParser.MASTER_SSL_CERT:
        case MySQLParser.MASTER_SSL_CIPHER:
        case MySQLParser.MASTER_SSL_CRL:
        case MySQLParser.MASTER_SSL_CRLPATH:
        case MySQLParser.MASTER_SSL_KEY:
        case MySQLParser.MASTER_TLS_VERSION:
        case MySQLParser.MASTER_USER:
        case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser.MAX_QUERIES_PER_HOUR:
        case MySQLParser.MAX_ROWS:
        case MySQLParser.MAX_SIZE:
        case MySQLParser.MAX_UPDATES_PER_HOUR:
        case MySQLParser.MAX_USER_CONNECTIONS:
        case MySQLParser.MEDIUM:
        case MySQLParser.MERGE:
        case MySQLParser.MESSAGE_TEXT:
        case MySQLParser.MID:
        case MySQLParser.MIGRATE:
        case MySQLParser.MIN_ROWS:
        case MySQLParser.MODE:
        case MySQLParser.MODIFY:
        case MySQLParser.MUTEX:
        case MySQLParser.MYSQL:
        case MySQLParser.MYSQL_ERRNO:
        case MySQLParser.NAME:
        case MySQLParser.NAMES:
        case MySQLParser.NCHAR:
        case MySQLParser.NEVER:
        case MySQLParser.NEXT:
        case MySQLParser.NO:
        case MySQLParser.NODEGROUP:
        case MySQLParser.NONE:
        case MySQLParser.OFFLINE:
        case MySQLParser.OFFSET:
        case MySQLParser.OJ:
        case MySQLParser.OLD_PASSWORD:
        case MySQLParser.ONE:
        case MySQLParser.ONLINE:
        case MySQLParser.ONLY:
        case MySQLParser.OPEN:
        case MySQLParser.OPTIMIZER_COSTS:
        case MySQLParser.OPTIONS:
        case MySQLParser.OWNER:
        case MySQLParser.PACK_KEYS:
        case MySQLParser.PAGE:
        case MySQLParser.PARSER:
        case MySQLParser.PARTIAL:
        case MySQLParser.PARTITIONING:
        case MySQLParser.PARTITIONS:
        case MySQLParser.PASSWORD:
        case MySQLParser.PHASE:
        case MySQLParser.PLUGIN:
        case MySQLParser.PLUGIN_DIR:
        case MySQLParser.PLUGINS:
        case MySQLParser.PORT:
        case MySQLParser.PRECEDES:
        case MySQLParser.PREPARE:
        case MySQLParser.PRESERVE:
        case MySQLParser.PREV:
        case MySQLParser.PROCESSLIST:
        case MySQLParser.PROFILE:
        case MySQLParser.PROFILES:
        case MySQLParser.PROXY:
        case MySQLParser.QUERY:
        case MySQLParser.QUICK:
        case MySQLParser.REBUILD:
        case MySQLParser.RECOVER:
        case MySQLParser.REDO_BUFFER_SIZE:
        case MySQLParser.REDUNDANT:
        case MySQLParser.RELAY:
        case MySQLParser.RELAY_LOG_FILE:
        case MySQLParser.RELAY_LOG_POS:
        case MySQLParser.RELAYLOG:
        case MySQLParser.REMOVE:
        case MySQLParser.REORGANIZE:
        case MySQLParser.REPAIR:
        case MySQLParser.REPLICATE_DO_DB:
        case MySQLParser.REPLICATE_DO_TABLE:
        case MySQLParser.REPLICATE_IGNORE_DB:
        case MySQLParser.REPLICATE_IGNORE_TABLE:
        case MySQLParser.REPLICATE_REWRITE_DB:
        case MySQLParser.REPLICATE_WILD_DO_TABLE:
        case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser.REPLICATION:
        case MySQLParser.RESET:
        case MySQLParser.RESUME:
        case MySQLParser.RETURNED_SQLSTATE:
        case MySQLParser.RETURNS:
        case MySQLParser.ROLE:
        case MySQLParser.ROLLBACK:
        case MySQLParser.ROLLUP:
        case MySQLParser.ROTATE:
        case MySQLParser.ROW:
        case MySQLParser.ROWS:
        case MySQLParser.ROW_FORMAT:
        case MySQLParser.SAVEPOINT:
        case MySQLParser.SCHEDULE:
        case MySQLParser.SECURITY:
        case MySQLParser.SERVER:
        case MySQLParser.SESSION:
        case MySQLParser.SHARE:
        case MySQLParser.SHARED:
        case MySQLParser.SIGNED:
        case MySQLParser.SIMPLE:
        case MySQLParser.SLAVE:
        case MySQLParser.SLOW:
        case MySQLParser.SNAPSHOT:
        case MySQLParser.SOCKET:
        case MySQLParser.SOME:
        case MySQLParser.SONAME:
        case MySQLParser.SOUNDS:
        case MySQLParser.SOURCE:
        case MySQLParser.SQL_AFTER_GTIDS:
        case MySQLParser.SQL_AFTER_MTS_GAPS:
        case MySQLParser.SQL_BEFORE_GTIDS:
        case MySQLParser.SQL_BUFFER_RESULT:
        case MySQLParser.SQL_CACHE:
        case MySQLParser.SQL_NO_CACHE:
        case MySQLParser.SQL_THREAD:
        case MySQLParser.START:
        case MySQLParser.STARTS:
        case MySQLParser.STATS_AUTO_RECALC:
        case MySQLParser.STATS_PERSISTENT:
        case MySQLParser.STATS_SAMPLE_PAGES:
        case MySQLParser.STATUS:
        case MySQLParser.STOP:
        case MySQLParser.STORAGE:
        case MySQLParser.STRING:
        case MySQLParser.SUBCLASS_ORIGIN:
        case MySQLParser.SUBJECT:
        case MySQLParser.SUBPARTITION:
        case MySQLParser.SUBPARTITIONS:
        case MySQLParser.SUSPEND:
        case MySQLParser.SWAPS:
        case MySQLParser.SWITCHES:
        case MySQLParser.TABLE_NAME:
        case MySQLParser.TABLESPACE:
        case MySQLParser.TEMPORARY:
        case MySQLParser.TEMPTABLE:
        case MySQLParser.THAN:
        case MySQLParser.TRADITIONAL:
        case MySQLParser.TRANSACTION:
        case MySQLParser.TRANSACTIONAL:
        case MySQLParser.TRIGGERS:
        case MySQLParser.TRUNCATE:
        case MySQLParser.UNDEFINED:
        case MySQLParser.UNDOFILE:
        case MySQLParser.UNDO_BUFFER_SIZE:
        case MySQLParser.UNINSTALL:
        case MySQLParser.UNKNOWN:
        case MySQLParser.UNTIL:
        case MySQLParser.UPGRADE:
        case MySQLParser.USER:
        case MySQLParser.USE_FRM:
        case MySQLParser.USER_RESOURCES:
        case MySQLParser.VALIDATION:
        case MySQLParser.VALUE:
        case MySQLParser.VARIABLES:
        case MySQLParser.VIEW:
        case MySQLParser.VISIBLE:
        case MySQLParser.WAIT:
        case MySQLParser.WARNINGS:
        case MySQLParser.WITHOUT:
        case MySQLParser.WORK:
        case MySQLParser.WRAPPER:
        case MySQLParser.X509:
        case MySQLParser.XA:
        case MySQLParser.XML:
        case MySQLParser.INTERNAL:
        case MySQLParser.QUARTER:
        case MySQLParser.MONTH:
        case MySQLParser.DAY:
        case MySQLParser.HOUR:
        case MySQLParser.MINUTE:
        case MySQLParser.WEEK:
        case MySQLParser.SECOND:
        case MySQLParser.MICROSECOND:
        case MySQLParser.TABLES:
        case MySQLParser.ROUTINE:
        case MySQLParser.EXECUTE:
        case MySQLParser.FILE:
        case MySQLParser.PROCESS:
        case MySQLParser.RELOAD:
        case MySQLParser.SHUTDOWN:
        case MySQLParser.SUPER:
        case MySQLParser.PRIVILEGES:
        case MySQLParser.AUDIT_ADMIN:
        case MySQLParser.BACKUP_ADMIN:
        case MySQLParser.BINLOG_ADMIN:
        case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
        case MySQLParser.CLONE_ADMIN:
        case MySQLParser.CONNECTION_ADMIN:
        case MySQLParser.ENCRYPTION_KEY_ADMIN:
        case MySQLParser.FIREWALL_ADMIN:
        case MySQLParser.FIREWALL_USER:
        case MySQLParser.GROUP_REPLICATION_ADMIN:
        case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
        case MySQLParser.NDB_STORED_USER:
        case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
        case MySQLParser.REPLICATION_APPLIER:
        case MySQLParser.REPLICATION_SLAVE_ADMIN:
        case MySQLParser.RESOURCE_GROUP_ADMIN:
        case MySQLParser.RESOURCE_GROUP_USER:
        case MySQLParser.ROLE_ADMIN:
        case MySQLParser.SESSION_VARIABLES_ADMIN:
        case MySQLParser.SET_USER_ID:
        case MySQLParser.SHOW_ROUTINE:
        case MySQLParser.SYSTEM_VARIABLES_ADMIN:
        case MySQLParser.TABLE_ENCRYPTION_ADMIN:
        case MySQLParser.VERSION_TOKEN_ADMIN:
        case MySQLParser.XA_RECOVER_ADMIN:
        case MySQLParser.ARMSCII8:
        case MySQLParser.ASCII:
        case MySQLParser.BIG5:
        case MySQLParser.CP1250:
        case MySQLParser.CP1251:
        case MySQLParser.CP1256:
        case MySQLParser.CP1257:
        case MySQLParser.CP850:
        case MySQLParser.CP852:
        case MySQLParser.CP866:
        case MySQLParser.CP932:
        case MySQLParser.DEC8:
        case MySQLParser.EUCJPMS:
        case MySQLParser.EUCKR:
        case MySQLParser.GB2312:
        case MySQLParser.GBK:
        case MySQLParser.GEOSTD8:
        case MySQLParser.GREEK:
        case MySQLParser.HEBREW:
        case MySQLParser.HP8:
        case MySQLParser.KEYBCS2:
        case MySQLParser.KOI8R:
        case MySQLParser.KOI8U:
        case MySQLParser.LATIN1:
        case MySQLParser.LATIN2:
        case MySQLParser.LATIN5:
        case MySQLParser.LATIN7:
        case MySQLParser.MACCE:
        case MySQLParser.MACROMAN:
        case MySQLParser.SJIS:
        case MySQLParser.SWE7:
        case MySQLParser.TIS620:
        case MySQLParser.UCS2:
        case MySQLParser.UJIS:
        case MySQLParser.UTF16:
        case MySQLParser.UTF16LE:
        case MySQLParser.UTF32:
        case MySQLParser.UTF8:
        case MySQLParser.UTF8MB3:
        case MySQLParser.UTF8MB4:
        case MySQLParser.ARCHIVE:
        case MySQLParser.BLACKHOLE:
        case MySQLParser.CSV:
        case MySQLParser.FEDERATED:
        case MySQLParser.INNODB:
        case MySQLParser.MEMORY:
        case MySQLParser.MRG_MYISAM:
        case MySQLParser.MYISAM:
        case MySQLParser.NDB:
        case MySQLParser.NDBCLUSTER:
        case MySQLParser.PERFORMANCE_SCHEMA:
        case MySQLParser.TOKUDB:
        case MySQLParser.REPEATABLE:
        case MySQLParser.COMMITTED:
        case MySQLParser.UNCOMMITTED:
        case MySQLParser.SERIALIZABLE:
        case MySQLParser.GEOMETRYCOLLECTION:
        case MySQLParser.LINESTRING:
        case MySQLParser.MULTILINESTRING:
        case MySQLParser.MULTIPOINT:
        case MySQLParser.MULTIPOLYGON:
        case MySQLParser.POINT:
        case MySQLParser.POLYGON:
        case MySQLParser.ABS:
        case MySQLParser.ACOS:
        case MySQLParser.ADDDATE:
        case MySQLParser.ADDTIME:
        case MySQLParser.AES_DECRYPT:
        case MySQLParser.AES_ENCRYPT:
        case MySQLParser.AREA:
        case MySQLParser.ASBINARY:
        case MySQLParser.ASIN:
        case MySQLParser.ASTEXT:
        case MySQLParser.ASWKB:
        case MySQLParser.ASWKT:
        case MySQLParser.ASYMMETRIC_DECRYPT:
        case MySQLParser.ASYMMETRIC_DERIVE:
        case MySQLParser.ASYMMETRIC_ENCRYPT:
        case MySQLParser.ASYMMETRIC_SIGN:
        case MySQLParser.ASYMMETRIC_VERIFY:
        case MySQLParser.ATAN:
        case MySQLParser.ATAN2:
        case MySQLParser.BENCHMARK:
        case MySQLParser.BIN:
        case MySQLParser.BIT_COUNT:
        case MySQLParser.BIT_LENGTH:
        case MySQLParser.BUFFER:
        case MySQLParser.CATALOG_NAME:
        case MySQLParser.CEIL:
        case MySQLParser.CEILING:
        case MySQLParser.CENTROID:
        case MySQLParser.CHARACTER_LENGTH:
        case MySQLParser.CHARSET:
        case MySQLParser.CHAR_LENGTH:
        case MySQLParser.COERCIBILITY:
        case MySQLParser.COLLATION:
        case MySQLParser.COMPRESS:
        case MySQLParser.CONCAT:
        case MySQLParser.CONCAT_WS:
        case MySQLParser.CONNECTION_ID:
        case MySQLParser.CONV:
        case MySQLParser.CONVERT_TZ:
        case MySQLParser.COS:
        case MySQLParser.COT:
        case MySQLParser.CRC32:
        case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser.CREATE_DH_PARAMETERS:
        case MySQLParser.CREATE_DIGEST:
        case MySQLParser.CROSSES:
        case MySQLParser.DATEDIFF:
        case MySQLParser.DATE_FORMAT:
        case MySQLParser.DAYNAME:
        case MySQLParser.DAYOFMONTH:
        case MySQLParser.DAYOFWEEK:
        case MySQLParser.DAYOFYEAR:
        case MySQLParser.DECODE:
        case MySQLParser.DEGREES:
        case MySQLParser.DES_DECRYPT:
        case MySQLParser.DES_ENCRYPT:
        case MySQLParser.DIMENSION:
        case MySQLParser.DISJOINT:
        case MySQLParser.ELT:
        case MySQLParser.ENCODE:
        case MySQLParser.ENCRYPT:
        case MySQLParser.ENDPOINT:
        case MySQLParser.ENVELOPE:
        case MySQLParser.EQUALS:
        case MySQLParser.EXP:
        case MySQLParser.EXPORT_SET:
        case MySQLParser.EXTERIORRING:
        case MySQLParser.EXTRACTVALUE:
        case MySQLParser.FIELD:
        case MySQLParser.FIND_IN_SET:
        case MySQLParser.FLOOR:
        case MySQLParser.FORMAT:
        case MySQLParser.FOUND_ROWS:
        case MySQLParser.FROM_BASE64:
        case MySQLParser.FROM_DAYS:
        case MySQLParser.FROM_UNIXTIME:
        case MySQLParser.GEOMCOLLFROMTEXT:
        case MySQLParser.GEOMCOLLFROMWKB:
        case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.GEOMETRYFROMTEXT:
        case MySQLParser.GEOMETRYFROMWKB:
        case MySQLParser.GEOMETRYN:
        case MySQLParser.GEOMETRYTYPE:
        case MySQLParser.GEOMFROMTEXT:
        case MySQLParser.GEOMFROMWKB:
        case MySQLParser.GET_FORMAT:
        case MySQLParser.GET_LOCK:
        case MySQLParser.GLENGTH:
        case MySQLParser.GREATEST:
        case MySQLParser.GTID_SUBSET:
        case MySQLParser.GTID_SUBTRACT:
        case MySQLParser.HEX:
        case MySQLParser.IFNULL:
        case MySQLParser.INET6_ATON:
        case MySQLParser.INET6_NTOA:
        case MySQLParser.INET_ATON:
        case MySQLParser.INET_NTOA:
        case MySQLParser.INSTR:
        case MySQLParser.INTERIORRINGN:
        case MySQLParser.INTERSECTS:
        case MySQLParser.ISCLOSED:
        case MySQLParser.ISEMPTY:
        case MySQLParser.ISNULL:
        case MySQLParser.ISSIMPLE:
        case MySQLParser.IS_FREE_LOCK:
        case MySQLParser.IS_IPV4:
        case MySQLParser.IS_IPV4_COMPAT:
        case MySQLParser.IS_IPV4_MAPPED:
        case MySQLParser.IS_IPV6:
        case MySQLParser.IS_USED_LOCK:
        case MySQLParser.LAST_INSERT_ID:
        case MySQLParser.LCASE:
        case MySQLParser.LEAST:
        case MySQLParser.LENGTH:
        case MySQLParser.LINEFROMTEXT:
        case MySQLParser.LINEFROMWKB:
        case MySQLParser.LINESTRINGFROMTEXT:
        case MySQLParser.LINESTRINGFROMWKB:
        case MySQLParser.LN:
        case MySQLParser.LOAD_FILE:
        case MySQLParser.LOCATE:
        case MySQLParser.LOG:
        case MySQLParser.LOG10:
        case MySQLParser.LOG2:
        case MySQLParser.LOWER:
        case MySQLParser.LPAD:
        case MySQLParser.LTRIM:
        case MySQLParser.MAKEDATE:
        case MySQLParser.MAKETIME:
        case MySQLParser.MAKE_SET:
        case MySQLParser.MASTER_POS_WAIT:
        case MySQLParser.MBRCONTAINS:
        case MySQLParser.MBRDISJOINT:
        case MySQLParser.MBREQUAL:
        case MySQLParser.MBRINTERSECTS:
        case MySQLParser.MBROVERLAPS:
        case MySQLParser.MBRTOUCHES:
        case MySQLParser.MBRWITHIN:
        case MySQLParser.MD5:
        case MySQLParser.MLINEFROMTEXT:
        case MySQLParser.MLINEFROMWKB:
        case MySQLParser.MONTHNAME:
        case MySQLParser.MPOINTFROMTEXT:
        case MySQLParser.MPOINTFROMWKB:
        case MySQLParser.MPOLYFROMTEXT:
        case MySQLParser.MPOLYFROMWKB:
        case MySQLParser.MULTILINESTRINGFROMTEXT:
        case MySQLParser.MULTILINESTRINGFROMWKB:
        case MySQLParser.MULTIPOINTFROMTEXT:
        case MySQLParser.MULTIPOINTFROMWKB:
        case MySQLParser.MULTIPOLYGONFROMTEXT:
        case MySQLParser.MULTIPOLYGONFROMWKB:
        case MySQLParser.NAME_CONST:
        case MySQLParser.NULLIF:
        case MySQLParser.NUMGEOMETRIES:
        case MySQLParser.NUMINTERIORRINGS:
        case MySQLParser.NUMPOINTS:
        case MySQLParser.OCT:
        case MySQLParser.OCTET_LENGTH:
        case MySQLParser.ORD:
        case MySQLParser.OVERLAPS:
        case MySQLParser.PERIOD_ADD:
        case MySQLParser.PERIOD_DIFF:
        case MySQLParser.PI:
        case MySQLParser.POINTFROMTEXT:
        case MySQLParser.POINTFROMWKB:
        case MySQLParser.POINTN:
        case MySQLParser.POLYFROMTEXT:
        case MySQLParser.POLYFROMWKB:
        case MySQLParser.POLYGONFROMTEXT:
        case MySQLParser.POLYGONFROMWKB:
        case MySQLParser.POW:
        case MySQLParser.POWER:
        case MySQLParser.QUOTE:
        case MySQLParser.RADIANS:
        case MySQLParser.RAND:
        case MySQLParser.RANDOM_BYTES:
        case MySQLParser.RELEASE_LOCK:
        case MySQLParser.REVERSE:
        case MySQLParser.ROUND:
        case MySQLParser.ROW_COUNT:
        case MySQLParser.RPAD:
        case MySQLParser.RTRIM:
        case MySQLParser.SEC_TO_TIME:
        case MySQLParser.SESSION_USER:
        case MySQLParser.SHA:
        case MySQLParser.SHA1:
        case MySQLParser.SHA2:
        case MySQLParser.SCHEMA_NAME:
        case MySQLParser.SIGN:
        case MySQLParser.SIN:
        case MySQLParser.SLEEP:
        case MySQLParser.SOUNDEX:
        case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser.SQRT:
        case MySQLParser.SRID:
        case MySQLParser.STARTPOINT:
        case MySQLParser.STRCMP:
        case MySQLParser.STR_TO_DATE:
        case MySQLParser.ST_AREA:
        case MySQLParser.ST_ASBINARY:
        case MySQLParser.ST_ASTEXT:
        case MySQLParser.ST_ASWKB:
        case MySQLParser.ST_ASWKT:
        case MySQLParser.ST_BUFFER:
        case MySQLParser.ST_CENTROID:
        case MySQLParser.ST_CONTAINS:
        case MySQLParser.ST_CROSSES:
        case MySQLParser.ST_DIFFERENCE:
        case MySQLParser.ST_DIMENSION:
        case MySQLParser.ST_DISJOINT:
        case MySQLParser.ST_DISTANCE:
        case MySQLParser.ST_ENDPOINT:
        case MySQLParser.ST_ENVELOPE:
        case MySQLParser.ST_EQUALS:
        case MySQLParser.ST_EXTERIORRING:
        case MySQLParser.ST_GEOMCOLLFROMTEXT:
        case MySQLParser.ST_GEOMCOLLFROMTXT:
        case MySQLParser.ST_GEOMCOLLFROMWKB:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.ST_GEOMETRYFROMTEXT:
        case MySQLParser.ST_GEOMETRYFROMWKB:
        case MySQLParser.ST_GEOMETRYN:
        case MySQLParser.ST_GEOMETRYTYPE:
        case MySQLParser.ST_GEOMFROMTEXT:
        case MySQLParser.ST_GEOMFROMWKB:
        case MySQLParser.ST_INTERIORRINGN:
        case MySQLParser.ST_INTERSECTION:
        case MySQLParser.ST_INTERSECTS:
        case MySQLParser.ST_ISCLOSED:
        case MySQLParser.ST_ISEMPTY:
        case MySQLParser.ST_ISSIMPLE:
        case MySQLParser.ST_LINEFROMTEXT:
        case MySQLParser.ST_LINEFROMWKB:
        case MySQLParser.ST_LINESTRINGFROMTEXT:
        case MySQLParser.ST_LINESTRINGFROMWKB:
        case MySQLParser.ST_NUMGEOMETRIES:
        case MySQLParser.ST_NUMINTERIORRING:
        case MySQLParser.ST_NUMINTERIORRINGS:
        case MySQLParser.ST_NUMPOINTS:
        case MySQLParser.ST_OVERLAPS:
        case MySQLParser.ST_POINTFROMTEXT:
        case MySQLParser.ST_POINTFROMWKB:
        case MySQLParser.ST_POINTN:
        case MySQLParser.ST_POLYFROMTEXT:
        case MySQLParser.ST_POLYFROMWKB:
        case MySQLParser.ST_POLYGONFROMTEXT:
        case MySQLParser.ST_POLYGONFROMWKB:
        case MySQLParser.ST_SRID:
        case MySQLParser.ST_STARTPOINT:
        case MySQLParser.ST_SYMDIFFERENCE:
        case MySQLParser.ST_TOUCHES:
        case MySQLParser.ST_UNION:
        case MySQLParser.ST_WITHIN:
        case MySQLParser.ST_X:
        case MySQLParser.ST_Y:
        case MySQLParser.SUBDATE:
        case MySQLParser.SUBSTRING_INDEX:
        case MySQLParser.SUBTIME:
        case MySQLParser.SYSTEM_USER:
        case MySQLParser.TAN:
        case MySQLParser.TIMEDIFF:
        case MySQLParser.TIMESTAMPADD:
        case MySQLParser.TIMESTAMPDIFF:
        case MySQLParser.TIME_FORMAT:
        case MySQLParser.TIME_TO_SEC:
        case MySQLParser.TOUCHES:
        case MySQLParser.TO_BASE64:
        case MySQLParser.TO_DAYS:
        case MySQLParser.TO_SECONDS:
        case MySQLParser.UCASE:
        case MySQLParser.UNCOMPRESS:
        case MySQLParser.UNCOMPRESSED_LENGTH:
        case MySQLParser.UNHEX:
        case MySQLParser.UNIX_TIMESTAMP:
        case MySQLParser.UPDATEXML:
        case MySQLParser.UPPER:
        case MySQLParser.UUID:
        case MySQLParser.UUID_SHORT:
        case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser.VERSION:
        case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser.WEEKDAY:
        case MySQLParser.WEEKOFYEAR:
        case MySQLParser.WEIGHT_STRING:
        case MySQLParser.WITHIN:
        case MySQLParser.YEARWEEK:
        case MySQLParser.Y_FUNCTION:
        case MySQLParser.X_FUNCTION:
        case MySQLParser.PLUS:
        case MySQLParser.MINUS:
        case MySQLParser.EXCLAMATION_SYMBOL:
        case MySQLParser.BIT_NOT_OP:
        case MySQLParser.LR_BRACKET:
        case MySQLParser.ZERO_DECIMAL:
        case MySQLParser.ONE_DECIMAL:
        case MySQLParser.TWO_DECIMAL:
        case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser.START_NATIONAL_STRING_LITERAL:
        case MySQLParser.STRING_LITERAL:
        case MySQLParser.DECIMAL_LITERAL:
        case MySQLParser.HEXADECIMAL_LITERAL:
        case MySQLParser.REAL_LITERAL:
        case MySQLParser.NULL_SPEC_LITERAL:
        case MySQLParser.BIT_STRING:
        case MySQLParser.STRING_CHARSET_NAME:
        case MySQLParser.ID:
        case MySQLParser.REVERSE_QUOTE_ID:
        case MySQLParser.LOCAL_ID:
        case MySQLParser.GLOBAL_ID:
            this.state = 3074;
            this.expression(0);
            break;
        case MySQLParser.DEFAULT:
            this.state = 3075;
            this.match(MySQLParser.DEFAULT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_assignmentField;
    return this;
}

AssignmentFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentFieldContext.prototype.constructor = AssignmentFieldContext;

AssignmentFieldContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AssignmentFieldContext.prototype.LOCAL_ID = function() {
    return this.getToken(MySQLParser.LOCAL_ID, 0);
};

AssignmentFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAssignmentField(this);
	}
};

AssignmentFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAssignmentField(this);
	}
};

AssignmentFieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAssignmentField(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AssignmentFieldContext = AssignmentFieldContext;

MySQLParser.prototype.assignmentField = function() {

    var localctx = new AssignmentFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, MySQLParser.RULE_assignmentField);
    try {
        this.state = 3080;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CURRENT:
        case MySQLParser.DATABASE:
        case MySQLParser.DIAGNOSTICS:
        case MySQLParser.LEFT:
        case MySQLParser.NUMBER:
        case MySQLParser.RIGHT:
        case MySQLParser.STACKED:
        case MySQLParser.DATE:
        case MySQLParser.TIME:
        case MySQLParser.TIMESTAMP:
        case MySQLParser.DATETIME:
        case MySQLParser.YEAR:
        case MySQLParser.TEXT:
        case MySQLParser.ENUM:
        case MySQLParser.SERIAL:
        case MySQLParser.JSON_VALID:
        case MySQLParser.JSON_SCHEMA_VALID:
        case MySQLParser.COUNT:
        case MySQLParser.POSITION:
        case MySQLParser.ACCOUNT:
        case MySQLParser.ACTION:
        case MySQLParser.AFTER:
        case MySQLParser.AGGREGATE:
        case MySQLParser.ALGORITHM:
        case MySQLParser.ANY:
        case MySQLParser.AT:
        case MySQLParser.AUTHORS:
        case MySQLParser.AUTOCOMMIT:
        case MySQLParser.AUTOEXTEND_SIZE:
        case MySQLParser.AUTO_INCREMENT:
        case MySQLParser.AVG_ROW_LENGTH:
        case MySQLParser.BEGIN:
        case MySQLParser.BINLOG:
        case MySQLParser.BIT:
        case MySQLParser.BLOCK:
        case MySQLParser.BOOL:
        case MySQLParser.BOOLEAN:
        case MySQLParser.BTREE:
        case MySQLParser.CACHE:
        case MySQLParser.CASCADED:
        case MySQLParser.CHAIN:
        case MySQLParser.CHANGED:
        case MySQLParser.CHANNEL:
        case MySQLParser.CHECKSUM:
        case MySQLParser.PAGE_CHECKSUM:
        case MySQLParser.CIPHER:
        case MySQLParser.CLASS_ORIGIN:
        case MySQLParser.CLIENT:
        case MySQLParser.CLOSE:
        case MySQLParser.COALESCE:
        case MySQLParser.CODE:
        case MySQLParser.COLUMNS:
        case MySQLParser.COLUMN_FORMAT:
        case MySQLParser.COLUMN_NAME:
        case MySQLParser.COMMENT:
        case MySQLParser.COMMIT:
        case MySQLParser.COMPACT:
        case MySQLParser.COMPLETION:
        case MySQLParser.COMPRESSED:
        case MySQLParser.COMPRESSION:
        case MySQLParser.CONCURRENT:
        case MySQLParser.CONNECTION:
        case MySQLParser.CONSISTENT:
        case MySQLParser.CONSTRAINT_CATALOG:
        case MySQLParser.CONSTRAINT_SCHEMA:
        case MySQLParser.CONSTRAINT_NAME:
        case MySQLParser.CONTAINS:
        case MySQLParser.CONTEXT:
        case MySQLParser.CONTRIBUTORS:
        case MySQLParser.COPY:
        case MySQLParser.CPU:
        case MySQLParser.CURSOR_NAME:
        case MySQLParser.DATA:
        case MySQLParser.DATAFILE:
        case MySQLParser.DEALLOCATE:
        case MySQLParser.DEFAULT_AUTH:
        case MySQLParser.DEFINER:
        case MySQLParser.DELAY_KEY_WRITE:
        case MySQLParser.DES_KEY_FILE:
        case MySQLParser.DIRECTORY:
        case MySQLParser.DISABLE:
        case MySQLParser.DISCARD:
        case MySQLParser.DISK:
        case MySQLParser.DO:
        case MySQLParser.DUMPFILE:
        case MySQLParser.DUPLICATE:
        case MySQLParser.DYNAMIC:
        case MySQLParser.ENABLE:
        case MySQLParser.ENCRYPTION:
        case MySQLParser.END:
        case MySQLParser.ENDS:
        case MySQLParser.ENGINE:
        case MySQLParser.ENGINES:
        case MySQLParser.ERROR:
        case MySQLParser.ERRORS:
        case MySQLParser.ESCAPE:
        case MySQLParser.EVEN:
        case MySQLParser.EVENT:
        case MySQLParser.EVENTS:
        case MySQLParser.EVERY:
        case MySQLParser.EXCHANGE:
        case MySQLParser.EXCLUSIVE:
        case MySQLParser.EXPIRE:
        case MySQLParser.EXPORT:
        case MySQLParser.EXTENDED:
        case MySQLParser.EXTENT_SIZE:
        case MySQLParser.FAST:
        case MySQLParser.FAULTS:
        case MySQLParser.FIELDS:
        case MySQLParser.FILE_BLOCK_SIZE:
        case MySQLParser.FILTER:
        case MySQLParser.FIRST:
        case MySQLParser.FIXED:
        case MySQLParser.FLUSH:
        case MySQLParser.FOLLOWS:
        case MySQLParser.FOUND:
        case MySQLParser.FULL:
        case MySQLParser.FUNCTION:
        case MySQLParser.GENERAL:
        case MySQLParser.GLOBAL:
        case MySQLParser.GRANTS:
        case MySQLParser.GROUP_REPLICATION:
        case MySQLParser.HANDLER:
        case MySQLParser.HASH:
        case MySQLParser.HELP:
        case MySQLParser.HOST:
        case MySQLParser.HOSTS:
        case MySQLParser.IDENTIFIED:
        case MySQLParser.IGNORE_SERVER_IDS:
        case MySQLParser.IMPORT:
        case MySQLParser.INDEXES:
        case MySQLParser.INITIAL_SIZE:
        case MySQLParser.INPLACE:
        case MySQLParser.INSERT_METHOD:
        case MySQLParser.INSTALL:
        case MySQLParser.INSTANCE:
        case MySQLParser.INVISIBLE:
        case MySQLParser.INVOKER:
        case MySQLParser.IO:
        case MySQLParser.IO_THREAD:
        case MySQLParser.IPC:
        case MySQLParser.ISOLATION:
        case MySQLParser.ISSUER:
        case MySQLParser.JSON:
        case MySQLParser.KEY_BLOCK_SIZE:
        case MySQLParser.LANGUAGE:
        case MySQLParser.LAST:
        case MySQLParser.LEAVES:
        case MySQLParser.LESS:
        case MySQLParser.LEVEL:
        case MySQLParser.LIST:
        case MySQLParser.LOCAL:
        case MySQLParser.LOGFILE:
        case MySQLParser.LOGS:
        case MySQLParser.MASTER:
        case MySQLParser.MASTER_AUTO_POSITION:
        case MySQLParser.MASTER_CONNECT_RETRY:
        case MySQLParser.MASTER_DELAY:
        case MySQLParser.MASTER_HEARTBEAT_PERIOD:
        case MySQLParser.MASTER_HOST:
        case MySQLParser.MASTER_LOG_FILE:
        case MySQLParser.MASTER_LOG_POS:
        case MySQLParser.MASTER_PASSWORD:
        case MySQLParser.MASTER_PORT:
        case MySQLParser.MASTER_RETRY_COUNT:
        case MySQLParser.MASTER_SSL:
        case MySQLParser.MASTER_SSL_CA:
        case MySQLParser.MASTER_SSL_CAPATH:
        case MySQLParser.MASTER_SSL_CERT:
        case MySQLParser.MASTER_SSL_CIPHER:
        case MySQLParser.MASTER_SSL_CRL:
        case MySQLParser.MASTER_SSL_CRLPATH:
        case MySQLParser.MASTER_SSL_KEY:
        case MySQLParser.MASTER_TLS_VERSION:
        case MySQLParser.MASTER_USER:
        case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser.MAX_QUERIES_PER_HOUR:
        case MySQLParser.MAX_ROWS:
        case MySQLParser.MAX_SIZE:
        case MySQLParser.MAX_UPDATES_PER_HOUR:
        case MySQLParser.MAX_USER_CONNECTIONS:
        case MySQLParser.MEDIUM:
        case MySQLParser.MERGE:
        case MySQLParser.MESSAGE_TEXT:
        case MySQLParser.MID:
        case MySQLParser.MIGRATE:
        case MySQLParser.MIN_ROWS:
        case MySQLParser.MODE:
        case MySQLParser.MODIFY:
        case MySQLParser.MUTEX:
        case MySQLParser.MYSQL:
        case MySQLParser.MYSQL_ERRNO:
        case MySQLParser.NAME:
        case MySQLParser.NAMES:
        case MySQLParser.NCHAR:
        case MySQLParser.NEVER:
        case MySQLParser.NEXT:
        case MySQLParser.NO:
        case MySQLParser.NODEGROUP:
        case MySQLParser.NONE:
        case MySQLParser.OFFLINE:
        case MySQLParser.OFFSET:
        case MySQLParser.OJ:
        case MySQLParser.OLD_PASSWORD:
        case MySQLParser.ONE:
        case MySQLParser.ONLINE:
        case MySQLParser.ONLY:
        case MySQLParser.OPEN:
        case MySQLParser.OPTIMIZER_COSTS:
        case MySQLParser.OPTIONS:
        case MySQLParser.OWNER:
        case MySQLParser.PACK_KEYS:
        case MySQLParser.PAGE:
        case MySQLParser.PARSER:
        case MySQLParser.PARTIAL:
        case MySQLParser.PARTITIONING:
        case MySQLParser.PARTITIONS:
        case MySQLParser.PASSWORD:
        case MySQLParser.PHASE:
        case MySQLParser.PLUGIN:
        case MySQLParser.PLUGIN_DIR:
        case MySQLParser.PLUGINS:
        case MySQLParser.PORT:
        case MySQLParser.PRECEDES:
        case MySQLParser.PREPARE:
        case MySQLParser.PRESERVE:
        case MySQLParser.PREV:
        case MySQLParser.PROCESSLIST:
        case MySQLParser.PROFILE:
        case MySQLParser.PROFILES:
        case MySQLParser.PROXY:
        case MySQLParser.QUERY:
        case MySQLParser.QUICK:
        case MySQLParser.REBUILD:
        case MySQLParser.RECOVER:
        case MySQLParser.REDO_BUFFER_SIZE:
        case MySQLParser.REDUNDANT:
        case MySQLParser.RELAY:
        case MySQLParser.RELAY_LOG_FILE:
        case MySQLParser.RELAY_LOG_POS:
        case MySQLParser.RELAYLOG:
        case MySQLParser.REMOVE:
        case MySQLParser.REORGANIZE:
        case MySQLParser.REPAIR:
        case MySQLParser.REPLICATE_DO_DB:
        case MySQLParser.REPLICATE_DO_TABLE:
        case MySQLParser.REPLICATE_IGNORE_DB:
        case MySQLParser.REPLICATE_IGNORE_TABLE:
        case MySQLParser.REPLICATE_REWRITE_DB:
        case MySQLParser.REPLICATE_WILD_DO_TABLE:
        case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser.REPLICATION:
        case MySQLParser.RESET:
        case MySQLParser.RESUME:
        case MySQLParser.RETURNED_SQLSTATE:
        case MySQLParser.RETURNS:
        case MySQLParser.ROLE:
        case MySQLParser.ROLLBACK:
        case MySQLParser.ROLLUP:
        case MySQLParser.ROTATE:
        case MySQLParser.ROW:
        case MySQLParser.ROWS:
        case MySQLParser.ROW_FORMAT:
        case MySQLParser.SAVEPOINT:
        case MySQLParser.SCHEDULE:
        case MySQLParser.SECURITY:
        case MySQLParser.SERVER:
        case MySQLParser.SESSION:
        case MySQLParser.SHARE:
        case MySQLParser.SHARED:
        case MySQLParser.SIGNED:
        case MySQLParser.SIMPLE:
        case MySQLParser.SLAVE:
        case MySQLParser.SLOW:
        case MySQLParser.SNAPSHOT:
        case MySQLParser.SOCKET:
        case MySQLParser.SOME:
        case MySQLParser.SONAME:
        case MySQLParser.SOUNDS:
        case MySQLParser.SOURCE:
        case MySQLParser.SQL_AFTER_GTIDS:
        case MySQLParser.SQL_AFTER_MTS_GAPS:
        case MySQLParser.SQL_BEFORE_GTIDS:
        case MySQLParser.SQL_BUFFER_RESULT:
        case MySQLParser.SQL_CACHE:
        case MySQLParser.SQL_NO_CACHE:
        case MySQLParser.SQL_THREAD:
        case MySQLParser.START:
        case MySQLParser.STARTS:
        case MySQLParser.STATS_AUTO_RECALC:
        case MySQLParser.STATS_PERSISTENT:
        case MySQLParser.STATS_SAMPLE_PAGES:
        case MySQLParser.STATUS:
        case MySQLParser.STOP:
        case MySQLParser.STORAGE:
        case MySQLParser.STRING:
        case MySQLParser.SUBCLASS_ORIGIN:
        case MySQLParser.SUBJECT:
        case MySQLParser.SUBPARTITION:
        case MySQLParser.SUBPARTITIONS:
        case MySQLParser.SUSPEND:
        case MySQLParser.SWAPS:
        case MySQLParser.SWITCHES:
        case MySQLParser.TABLE_NAME:
        case MySQLParser.TABLESPACE:
        case MySQLParser.TEMPORARY:
        case MySQLParser.TEMPTABLE:
        case MySQLParser.THAN:
        case MySQLParser.TRADITIONAL:
        case MySQLParser.TRANSACTION:
        case MySQLParser.TRANSACTIONAL:
        case MySQLParser.TRIGGERS:
        case MySQLParser.TRUNCATE:
        case MySQLParser.UNDEFINED:
        case MySQLParser.UNDOFILE:
        case MySQLParser.UNDO_BUFFER_SIZE:
        case MySQLParser.UNINSTALL:
        case MySQLParser.UNKNOWN:
        case MySQLParser.UNTIL:
        case MySQLParser.UPGRADE:
        case MySQLParser.USER:
        case MySQLParser.USE_FRM:
        case MySQLParser.USER_RESOURCES:
        case MySQLParser.VALIDATION:
        case MySQLParser.VALUE:
        case MySQLParser.VARIABLES:
        case MySQLParser.VIEW:
        case MySQLParser.VISIBLE:
        case MySQLParser.WAIT:
        case MySQLParser.WARNINGS:
        case MySQLParser.WITHOUT:
        case MySQLParser.WORK:
        case MySQLParser.WRAPPER:
        case MySQLParser.X509:
        case MySQLParser.XA:
        case MySQLParser.XML:
        case MySQLParser.INTERNAL:
        case MySQLParser.QUARTER:
        case MySQLParser.MONTH:
        case MySQLParser.DAY:
        case MySQLParser.HOUR:
        case MySQLParser.MINUTE:
        case MySQLParser.WEEK:
        case MySQLParser.SECOND:
        case MySQLParser.MICROSECOND:
        case MySQLParser.TABLES:
        case MySQLParser.ROUTINE:
        case MySQLParser.EXECUTE:
        case MySQLParser.FILE:
        case MySQLParser.PROCESS:
        case MySQLParser.RELOAD:
        case MySQLParser.SHUTDOWN:
        case MySQLParser.SUPER:
        case MySQLParser.PRIVILEGES:
        case MySQLParser.AUDIT_ADMIN:
        case MySQLParser.BACKUP_ADMIN:
        case MySQLParser.BINLOG_ADMIN:
        case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
        case MySQLParser.CLONE_ADMIN:
        case MySQLParser.CONNECTION_ADMIN:
        case MySQLParser.ENCRYPTION_KEY_ADMIN:
        case MySQLParser.FIREWALL_ADMIN:
        case MySQLParser.FIREWALL_USER:
        case MySQLParser.GROUP_REPLICATION_ADMIN:
        case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
        case MySQLParser.NDB_STORED_USER:
        case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
        case MySQLParser.REPLICATION_APPLIER:
        case MySQLParser.REPLICATION_SLAVE_ADMIN:
        case MySQLParser.RESOURCE_GROUP_ADMIN:
        case MySQLParser.RESOURCE_GROUP_USER:
        case MySQLParser.ROLE_ADMIN:
        case MySQLParser.SESSION_VARIABLES_ADMIN:
        case MySQLParser.SET_USER_ID:
        case MySQLParser.SHOW_ROUTINE:
        case MySQLParser.SYSTEM_VARIABLES_ADMIN:
        case MySQLParser.TABLE_ENCRYPTION_ADMIN:
        case MySQLParser.VERSION_TOKEN_ADMIN:
        case MySQLParser.XA_RECOVER_ADMIN:
        case MySQLParser.ARMSCII8:
        case MySQLParser.ASCII:
        case MySQLParser.BIG5:
        case MySQLParser.CP1250:
        case MySQLParser.CP1251:
        case MySQLParser.CP1256:
        case MySQLParser.CP1257:
        case MySQLParser.CP850:
        case MySQLParser.CP852:
        case MySQLParser.CP866:
        case MySQLParser.CP932:
        case MySQLParser.DEC8:
        case MySQLParser.EUCJPMS:
        case MySQLParser.EUCKR:
        case MySQLParser.GB2312:
        case MySQLParser.GBK:
        case MySQLParser.GEOSTD8:
        case MySQLParser.GREEK:
        case MySQLParser.HEBREW:
        case MySQLParser.HP8:
        case MySQLParser.KEYBCS2:
        case MySQLParser.KOI8R:
        case MySQLParser.KOI8U:
        case MySQLParser.LATIN1:
        case MySQLParser.LATIN2:
        case MySQLParser.LATIN5:
        case MySQLParser.LATIN7:
        case MySQLParser.MACCE:
        case MySQLParser.MACROMAN:
        case MySQLParser.SJIS:
        case MySQLParser.SWE7:
        case MySQLParser.TIS620:
        case MySQLParser.UCS2:
        case MySQLParser.UJIS:
        case MySQLParser.UTF16:
        case MySQLParser.UTF16LE:
        case MySQLParser.UTF32:
        case MySQLParser.UTF8:
        case MySQLParser.UTF8MB3:
        case MySQLParser.UTF8MB4:
        case MySQLParser.ARCHIVE:
        case MySQLParser.BLACKHOLE:
        case MySQLParser.CSV:
        case MySQLParser.FEDERATED:
        case MySQLParser.INNODB:
        case MySQLParser.MEMORY:
        case MySQLParser.MRG_MYISAM:
        case MySQLParser.MYISAM:
        case MySQLParser.NDB:
        case MySQLParser.NDBCLUSTER:
        case MySQLParser.PERFORMANCE_SCHEMA:
        case MySQLParser.TOKUDB:
        case MySQLParser.REPEATABLE:
        case MySQLParser.COMMITTED:
        case MySQLParser.UNCOMMITTED:
        case MySQLParser.SERIALIZABLE:
        case MySQLParser.GEOMETRYCOLLECTION:
        case MySQLParser.LINESTRING:
        case MySQLParser.MULTILINESTRING:
        case MySQLParser.MULTIPOINT:
        case MySQLParser.MULTIPOLYGON:
        case MySQLParser.POINT:
        case MySQLParser.POLYGON:
        case MySQLParser.ABS:
        case MySQLParser.ACOS:
        case MySQLParser.ADDDATE:
        case MySQLParser.ADDTIME:
        case MySQLParser.AES_DECRYPT:
        case MySQLParser.AES_ENCRYPT:
        case MySQLParser.AREA:
        case MySQLParser.ASBINARY:
        case MySQLParser.ASIN:
        case MySQLParser.ASTEXT:
        case MySQLParser.ASWKB:
        case MySQLParser.ASWKT:
        case MySQLParser.ASYMMETRIC_DECRYPT:
        case MySQLParser.ASYMMETRIC_DERIVE:
        case MySQLParser.ASYMMETRIC_ENCRYPT:
        case MySQLParser.ASYMMETRIC_SIGN:
        case MySQLParser.ASYMMETRIC_VERIFY:
        case MySQLParser.ATAN:
        case MySQLParser.ATAN2:
        case MySQLParser.BENCHMARK:
        case MySQLParser.BIN:
        case MySQLParser.BIT_COUNT:
        case MySQLParser.BIT_LENGTH:
        case MySQLParser.BUFFER:
        case MySQLParser.CATALOG_NAME:
        case MySQLParser.CEIL:
        case MySQLParser.CEILING:
        case MySQLParser.CENTROID:
        case MySQLParser.CHARACTER_LENGTH:
        case MySQLParser.CHARSET:
        case MySQLParser.CHAR_LENGTH:
        case MySQLParser.COERCIBILITY:
        case MySQLParser.COLLATION:
        case MySQLParser.COMPRESS:
        case MySQLParser.CONCAT:
        case MySQLParser.CONCAT_WS:
        case MySQLParser.CONNECTION_ID:
        case MySQLParser.CONV:
        case MySQLParser.CONVERT_TZ:
        case MySQLParser.COS:
        case MySQLParser.COT:
        case MySQLParser.CRC32:
        case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser.CREATE_DH_PARAMETERS:
        case MySQLParser.CREATE_DIGEST:
        case MySQLParser.CROSSES:
        case MySQLParser.DATEDIFF:
        case MySQLParser.DATE_FORMAT:
        case MySQLParser.DAYNAME:
        case MySQLParser.DAYOFMONTH:
        case MySQLParser.DAYOFWEEK:
        case MySQLParser.DAYOFYEAR:
        case MySQLParser.DECODE:
        case MySQLParser.DEGREES:
        case MySQLParser.DES_DECRYPT:
        case MySQLParser.DES_ENCRYPT:
        case MySQLParser.DIMENSION:
        case MySQLParser.DISJOINT:
        case MySQLParser.ELT:
        case MySQLParser.ENCODE:
        case MySQLParser.ENCRYPT:
        case MySQLParser.ENDPOINT:
        case MySQLParser.ENVELOPE:
        case MySQLParser.EQUALS:
        case MySQLParser.EXP:
        case MySQLParser.EXPORT_SET:
        case MySQLParser.EXTERIORRING:
        case MySQLParser.EXTRACTVALUE:
        case MySQLParser.FIELD:
        case MySQLParser.FIND_IN_SET:
        case MySQLParser.FLOOR:
        case MySQLParser.FORMAT:
        case MySQLParser.FOUND_ROWS:
        case MySQLParser.FROM_BASE64:
        case MySQLParser.FROM_DAYS:
        case MySQLParser.FROM_UNIXTIME:
        case MySQLParser.GEOMCOLLFROMTEXT:
        case MySQLParser.GEOMCOLLFROMWKB:
        case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.GEOMETRYFROMTEXT:
        case MySQLParser.GEOMETRYFROMWKB:
        case MySQLParser.GEOMETRYN:
        case MySQLParser.GEOMETRYTYPE:
        case MySQLParser.GEOMFROMTEXT:
        case MySQLParser.GEOMFROMWKB:
        case MySQLParser.GET_FORMAT:
        case MySQLParser.GET_LOCK:
        case MySQLParser.GLENGTH:
        case MySQLParser.GREATEST:
        case MySQLParser.GTID_SUBSET:
        case MySQLParser.GTID_SUBTRACT:
        case MySQLParser.HEX:
        case MySQLParser.IFNULL:
        case MySQLParser.INET6_ATON:
        case MySQLParser.INET6_NTOA:
        case MySQLParser.INET_ATON:
        case MySQLParser.INET_NTOA:
        case MySQLParser.INSTR:
        case MySQLParser.INTERIORRINGN:
        case MySQLParser.INTERSECTS:
        case MySQLParser.ISCLOSED:
        case MySQLParser.ISEMPTY:
        case MySQLParser.ISNULL:
        case MySQLParser.ISSIMPLE:
        case MySQLParser.IS_FREE_LOCK:
        case MySQLParser.IS_IPV4:
        case MySQLParser.IS_IPV4_COMPAT:
        case MySQLParser.IS_IPV4_MAPPED:
        case MySQLParser.IS_IPV6:
        case MySQLParser.IS_USED_LOCK:
        case MySQLParser.LAST_INSERT_ID:
        case MySQLParser.LCASE:
        case MySQLParser.LEAST:
        case MySQLParser.LENGTH:
        case MySQLParser.LINEFROMTEXT:
        case MySQLParser.LINEFROMWKB:
        case MySQLParser.LINESTRINGFROMTEXT:
        case MySQLParser.LINESTRINGFROMWKB:
        case MySQLParser.LN:
        case MySQLParser.LOAD_FILE:
        case MySQLParser.LOCATE:
        case MySQLParser.LOG:
        case MySQLParser.LOG10:
        case MySQLParser.LOG2:
        case MySQLParser.LOWER:
        case MySQLParser.LPAD:
        case MySQLParser.LTRIM:
        case MySQLParser.MAKEDATE:
        case MySQLParser.MAKETIME:
        case MySQLParser.MAKE_SET:
        case MySQLParser.MASTER_POS_WAIT:
        case MySQLParser.MBRCONTAINS:
        case MySQLParser.MBRDISJOINT:
        case MySQLParser.MBREQUAL:
        case MySQLParser.MBRINTERSECTS:
        case MySQLParser.MBROVERLAPS:
        case MySQLParser.MBRTOUCHES:
        case MySQLParser.MBRWITHIN:
        case MySQLParser.MD5:
        case MySQLParser.MLINEFROMTEXT:
        case MySQLParser.MLINEFROMWKB:
        case MySQLParser.MONTHNAME:
        case MySQLParser.MPOINTFROMTEXT:
        case MySQLParser.MPOINTFROMWKB:
        case MySQLParser.MPOLYFROMTEXT:
        case MySQLParser.MPOLYFROMWKB:
        case MySQLParser.MULTILINESTRINGFROMTEXT:
        case MySQLParser.MULTILINESTRINGFROMWKB:
        case MySQLParser.MULTIPOINTFROMTEXT:
        case MySQLParser.MULTIPOINTFROMWKB:
        case MySQLParser.MULTIPOLYGONFROMTEXT:
        case MySQLParser.MULTIPOLYGONFROMWKB:
        case MySQLParser.NAME_CONST:
        case MySQLParser.NULLIF:
        case MySQLParser.NUMGEOMETRIES:
        case MySQLParser.NUMINTERIORRINGS:
        case MySQLParser.NUMPOINTS:
        case MySQLParser.OCT:
        case MySQLParser.OCTET_LENGTH:
        case MySQLParser.ORD:
        case MySQLParser.OVERLAPS:
        case MySQLParser.PERIOD_ADD:
        case MySQLParser.PERIOD_DIFF:
        case MySQLParser.PI:
        case MySQLParser.POINTFROMTEXT:
        case MySQLParser.POINTFROMWKB:
        case MySQLParser.POINTN:
        case MySQLParser.POLYFROMTEXT:
        case MySQLParser.POLYFROMWKB:
        case MySQLParser.POLYGONFROMTEXT:
        case MySQLParser.POLYGONFROMWKB:
        case MySQLParser.POW:
        case MySQLParser.POWER:
        case MySQLParser.QUOTE:
        case MySQLParser.RADIANS:
        case MySQLParser.RAND:
        case MySQLParser.RANDOM_BYTES:
        case MySQLParser.RELEASE_LOCK:
        case MySQLParser.REVERSE:
        case MySQLParser.ROUND:
        case MySQLParser.ROW_COUNT:
        case MySQLParser.RPAD:
        case MySQLParser.RTRIM:
        case MySQLParser.SEC_TO_TIME:
        case MySQLParser.SESSION_USER:
        case MySQLParser.SHA:
        case MySQLParser.SHA1:
        case MySQLParser.SHA2:
        case MySQLParser.SCHEMA_NAME:
        case MySQLParser.SIGN:
        case MySQLParser.SIN:
        case MySQLParser.SLEEP:
        case MySQLParser.SOUNDEX:
        case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser.SQRT:
        case MySQLParser.SRID:
        case MySQLParser.STARTPOINT:
        case MySQLParser.STRCMP:
        case MySQLParser.STR_TO_DATE:
        case MySQLParser.ST_AREA:
        case MySQLParser.ST_ASBINARY:
        case MySQLParser.ST_ASTEXT:
        case MySQLParser.ST_ASWKB:
        case MySQLParser.ST_ASWKT:
        case MySQLParser.ST_BUFFER:
        case MySQLParser.ST_CENTROID:
        case MySQLParser.ST_CONTAINS:
        case MySQLParser.ST_CROSSES:
        case MySQLParser.ST_DIFFERENCE:
        case MySQLParser.ST_DIMENSION:
        case MySQLParser.ST_DISJOINT:
        case MySQLParser.ST_DISTANCE:
        case MySQLParser.ST_ENDPOINT:
        case MySQLParser.ST_ENVELOPE:
        case MySQLParser.ST_EQUALS:
        case MySQLParser.ST_EXTERIORRING:
        case MySQLParser.ST_GEOMCOLLFROMTEXT:
        case MySQLParser.ST_GEOMCOLLFROMTXT:
        case MySQLParser.ST_GEOMCOLLFROMWKB:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.ST_GEOMETRYFROMTEXT:
        case MySQLParser.ST_GEOMETRYFROMWKB:
        case MySQLParser.ST_GEOMETRYN:
        case MySQLParser.ST_GEOMETRYTYPE:
        case MySQLParser.ST_GEOMFROMTEXT:
        case MySQLParser.ST_GEOMFROMWKB:
        case MySQLParser.ST_INTERIORRINGN:
        case MySQLParser.ST_INTERSECTION:
        case MySQLParser.ST_INTERSECTS:
        case MySQLParser.ST_ISCLOSED:
        case MySQLParser.ST_ISEMPTY:
        case MySQLParser.ST_ISSIMPLE:
        case MySQLParser.ST_LINEFROMTEXT:
        case MySQLParser.ST_LINEFROMWKB:
        case MySQLParser.ST_LINESTRINGFROMTEXT:
        case MySQLParser.ST_LINESTRINGFROMWKB:
        case MySQLParser.ST_NUMGEOMETRIES:
        case MySQLParser.ST_NUMINTERIORRING:
        case MySQLParser.ST_NUMINTERIORRINGS:
        case MySQLParser.ST_NUMPOINTS:
        case MySQLParser.ST_OVERLAPS:
        case MySQLParser.ST_POINTFROMTEXT:
        case MySQLParser.ST_POINTFROMWKB:
        case MySQLParser.ST_POINTN:
        case MySQLParser.ST_POLYFROMTEXT:
        case MySQLParser.ST_POLYFROMWKB:
        case MySQLParser.ST_POLYGONFROMTEXT:
        case MySQLParser.ST_POLYGONFROMWKB:
        case MySQLParser.ST_SRID:
        case MySQLParser.ST_STARTPOINT:
        case MySQLParser.ST_SYMDIFFERENCE:
        case MySQLParser.ST_TOUCHES:
        case MySQLParser.ST_UNION:
        case MySQLParser.ST_WITHIN:
        case MySQLParser.ST_X:
        case MySQLParser.ST_Y:
        case MySQLParser.SUBDATE:
        case MySQLParser.SUBSTRING_INDEX:
        case MySQLParser.SUBTIME:
        case MySQLParser.SYSTEM_USER:
        case MySQLParser.TAN:
        case MySQLParser.TIMEDIFF:
        case MySQLParser.TIMESTAMPADD:
        case MySQLParser.TIMESTAMPDIFF:
        case MySQLParser.TIME_FORMAT:
        case MySQLParser.TIME_TO_SEC:
        case MySQLParser.TOUCHES:
        case MySQLParser.TO_BASE64:
        case MySQLParser.TO_DAYS:
        case MySQLParser.TO_SECONDS:
        case MySQLParser.UCASE:
        case MySQLParser.UNCOMPRESS:
        case MySQLParser.UNCOMPRESSED_LENGTH:
        case MySQLParser.UNHEX:
        case MySQLParser.UNIX_TIMESTAMP:
        case MySQLParser.UPDATEXML:
        case MySQLParser.UPPER:
        case MySQLParser.UUID:
        case MySQLParser.UUID_SHORT:
        case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser.VERSION:
        case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser.WEEKDAY:
        case MySQLParser.WEEKOFYEAR:
        case MySQLParser.WEIGHT_STRING:
        case MySQLParser.WITHIN:
        case MySQLParser.YEARWEEK:
        case MySQLParser.Y_FUNCTION:
        case MySQLParser.X_FUNCTION:
        case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser.STRING_LITERAL:
        case MySQLParser.ID:
        case MySQLParser.REVERSE_QUOTE_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 3078;
            this.uid();
            break;
        case MySQLParser.LOCAL_ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 3079;
            this.match(MySQLParser.LOCAL_ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LockClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_lockClause;
    return this;
}

LockClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LockClauseContext.prototype.constructor = LockClauseContext;

LockClauseContext.prototype.FOR = function() {
    return this.getToken(MySQLParser.FOR, 0);
};

LockClauseContext.prototype.UPDATE = function() {
    return this.getToken(MySQLParser.UPDATE, 0);
};

LockClauseContext.prototype.LOCK = function() {
    return this.getToken(MySQLParser.LOCK, 0);
};

LockClauseContext.prototype.IN = function() {
    return this.getToken(MySQLParser.IN, 0);
};

LockClauseContext.prototype.SHARE = function() {
    return this.getToken(MySQLParser.SHARE, 0);
};

LockClauseContext.prototype.MODE = function() {
    return this.getToken(MySQLParser.MODE, 0);
};

LockClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLockClause(this);
	}
};

LockClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLockClause(this);
	}
};

LockClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLockClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LockClauseContext = LockClauseContext;

MySQLParser.prototype.lockClause = function() {

    var localctx = new LockClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, MySQLParser.RULE_lockClause);
    try {
        this.state = 3088;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.FOR:
            this.enterOuterAlt(localctx, 1);
            this.state = 3082;
            this.match(MySQLParser.FOR);
            this.state = 3083;
            this.match(MySQLParser.UPDATE);
            break;
        case MySQLParser.LOCK:
            this.enterOuterAlt(localctx, 2);
            this.state = 3084;
            this.match(MySQLParser.LOCK);
            this.state = 3085;
            this.match(MySQLParser.IN);
            this.state = 3086;
            this.match(MySQLParser.SHARE);
            this.state = 3087;
            this.match(MySQLParser.MODE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SingleDeleteStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_singleDeleteStatement;
    this.priority = null; // Token
    return this;
}

SingleDeleteStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleDeleteStatementContext.prototype.constructor = SingleDeleteStatementContext;

SingleDeleteStatementContext.prototype.DELETE = function() {
    return this.getToken(MySQLParser.DELETE, 0);
};

SingleDeleteStatementContext.prototype.FROM = function() {
    return this.getToken(MySQLParser.FROM, 0);
};

SingleDeleteStatementContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

SingleDeleteStatementContext.prototype.QUICK = function() {
    return this.getToken(MySQLParser.QUICK, 0);
};

SingleDeleteStatementContext.prototype.IGNORE = function() {
    return this.getToken(MySQLParser.IGNORE, 0);
};

SingleDeleteStatementContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

SingleDeleteStatementContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

SingleDeleteStatementContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

SingleDeleteStatementContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

SingleDeleteStatementContext.prototype.WHERE = function() {
    return this.getToken(MySQLParser.WHERE, 0);
};

SingleDeleteStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SingleDeleteStatementContext.prototype.orderByClause = function() {
    return this.getTypedRuleContext(OrderByClauseContext,0);
};

SingleDeleteStatementContext.prototype.LIMIT = function() {
    return this.getToken(MySQLParser.LIMIT, 0);
};

SingleDeleteStatementContext.prototype.limitClauseAtom = function() {
    return this.getTypedRuleContext(LimitClauseAtomContext,0);
};

SingleDeleteStatementContext.prototype.LOW_PRIORITY = function() {
    return this.getToken(MySQLParser.LOW_PRIORITY, 0);
};

SingleDeleteStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSingleDeleteStatement(this);
	}
};

SingleDeleteStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSingleDeleteStatement(this);
	}
};

SingleDeleteStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSingleDeleteStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SingleDeleteStatementContext = SingleDeleteStatementContext;

MySQLParser.prototype.singleDeleteStatement = function() {

    var localctx = new SingleDeleteStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, MySQLParser.RULE_singleDeleteStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3090;
        this.match(MySQLParser.DELETE);
        this.state = 3092;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LOW_PRIORITY) {
            this.state = 3091;
            localctx.priority = this.match(MySQLParser.LOW_PRIORITY);
        }

        this.state = 3095;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.QUICK) {
            this.state = 3094;
            this.match(MySQLParser.QUICK);
        }

        this.state = 3098;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IGNORE) {
            this.state = 3097;
            this.match(MySQLParser.IGNORE);
        }

        this.state = 3100;
        this.match(MySQLParser.FROM);
        this.state = 3101;
        this.tableName();
        this.state = 3107;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.PARTITION) {
            this.state = 3102;
            this.match(MySQLParser.PARTITION);
            this.state = 3103;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3104;
            this.uidList();
            this.state = 3105;
            this.match(MySQLParser.RR_BRACKET);
        }

        this.state = 3111;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WHERE) {
            this.state = 3109;
            this.match(MySQLParser.WHERE);
            this.state = 3110;
            this.expression(0);
        }

        this.state = 3114;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ORDER) {
            this.state = 3113;
            this.orderByClause();
        }

        this.state = 3118;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LIMIT) {
            this.state = 3116;
            this.match(MySQLParser.LIMIT);
            this.state = 3117;
            this.limitClauseAtom();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MultipleDeleteStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_multipleDeleteStatement;
    this.priority = null; // Token
    return this;
}

MultipleDeleteStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultipleDeleteStatementContext.prototype.constructor = MultipleDeleteStatementContext;

MultipleDeleteStatementContext.prototype.DELETE = function() {
    return this.getToken(MySQLParser.DELETE, 0);
};

MultipleDeleteStatementContext.prototype.tableName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableNameContext);
    } else {
        return this.getTypedRuleContext(TableNameContext,i);
    }
};

MultipleDeleteStatementContext.prototype.FROM = function() {
    return this.getToken(MySQLParser.FROM, 0);
};

MultipleDeleteStatementContext.prototype.tableSources = function() {
    return this.getTypedRuleContext(TableSourcesContext,0);
};

MultipleDeleteStatementContext.prototype.USING = function() {
    return this.getToken(MySQLParser.USING, 0);
};

MultipleDeleteStatementContext.prototype.QUICK = function() {
    return this.getToken(MySQLParser.QUICK, 0);
};

MultipleDeleteStatementContext.prototype.IGNORE = function() {
    return this.getToken(MySQLParser.IGNORE, 0);
};

MultipleDeleteStatementContext.prototype.WHERE = function() {
    return this.getToken(MySQLParser.WHERE, 0);
};

MultipleDeleteStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

MultipleDeleteStatementContext.prototype.LOW_PRIORITY = function() {
    return this.getToken(MySQLParser.LOW_PRIORITY, 0);
};

MultipleDeleteStatementContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.DOT);
    } else {
        return this.getToken(MySQLParser.DOT, i);
    }
};


MultipleDeleteStatementContext.prototype.STAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.STAR);
    } else {
        return this.getToken(MySQLParser.STAR, i);
    }
};


MultipleDeleteStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


MultipleDeleteStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterMultipleDeleteStatement(this);
	}
};

MultipleDeleteStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitMultipleDeleteStatement(this);
	}
};

MultipleDeleteStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitMultipleDeleteStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.MultipleDeleteStatementContext = MultipleDeleteStatementContext;

MySQLParser.prototype.multipleDeleteStatement = function() {

    var localctx = new MultipleDeleteStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, MySQLParser.RULE_multipleDeleteStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3120;
        this.match(MySQLParser.DELETE);
        this.state = 3122;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LOW_PRIORITY) {
            this.state = 3121;
            localctx.priority = this.match(MySQLParser.LOW_PRIORITY);
        }

        this.state = 3125;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,431,this._ctx);
        if(la_===1) {
            this.state = 3124;
            this.match(MySQLParser.QUICK);

        }
        this.state = 3128;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IGNORE) {
            this.state = 3127;
            this.match(MySQLParser.IGNORE);
        }

        this.state = 3169;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CURRENT:
        case MySQLParser.DATABASE:
        case MySQLParser.DIAGNOSTICS:
        case MySQLParser.LEFT:
        case MySQLParser.NUMBER:
        case MySQLParser.RIGHT:
        case MySQLParser.STACKED:
        case MySQLParser.DATE:
        case MySQLParser.TIME:
        case MySQLParser.TIMESTAMP:
        case MySQLParser.DATETIME:
        case MySQLParser.YEAR:
        case MySQLParser.TEXT:
        case MySQLParser.ENUM:
        case MySQLParser.SERIAL:
        case MySQLParser.JSON_VALID:
        case MySQLParser.JSON_SCHEMA_VALID:
        case MySQLParser.COUNT:
        case MySQLParser.POSITION:
        case MySQLParser.ACCOUNT:
        case MySQLParser.ACTION:
        case MySQLParser.AFTER:
        case MySQLParser.AGGREGATE:
        case MySQLParser.ALGORITHM:
        case MySQLParser.ANY:
        case MySQLParser.AT:
        case MySQLParser.AUTHORS:
        case MySQLParser.AUTOCOMMIT:
        case MySQLParser.AUTOEXTEND_SIZE:
        case MySQLParser.AUTO_INCREMENT:
        case MySQLParser.AVG_ROW_LENGTH:
        case MySQLParser.BEGIN:
        case MySQLParser.BINLOG:
        case MySQLParser.BIT:
        case MySQLParser.BLOCK:
        case MySQLParser.BOOL:
        case MySQLParser.BOOLEAN:
        case MySQLParser.BTREE:
        case MySQLParser.CACHE:
        case MySQLParser.CASCADED:
        case MySQLParser.CHAIN:
        case MySQLParser.CHANGED:
        case MySQLParser.CHANNEL:
        case MySQLParser.CHECKSUM:
        case MySQLParser.PAGE_CHECKSUM:
        case MySQLParser.CIPHER:
        case MySQLParser.CLASS_ORIGIN:
        case MySQLParser.CLIENT:
        case MySQLParser.CLOSE:
        case MySQLParser.COALESCE:
        case MySQLParser.CODE:
        case MySQLParser.COLUMNS:
        case MySQLParser.COLUMN_FORMAT:
        case MySQLParser.COLUMN_NAME:
        case MySQLParser.COMMENT:
        case MySQLParser.COMMIT:
        case MySQLParser.COMPACT:
        case MySQLParser.COMPLETION:
        case MySQLParser.COMPRESSED:
        case MySQLParser.COMPRESSION:
        case MySQLParser.CONCURRENT:
        case MySQLParser.CONNECTION:
        case MySQLParser.CONSISTENT:
        case MySQLParser.CONSTRAINT_CATALOG:
        case MySQLParser.CONSTRAINT_SCHEMA:
        case MySQLParser.CONSTRAINT_NAME:
        case MySQLParser.CONTAINS:
        case MySQLParser.CONTEXT:
        case MySQLParser.CONTRIBUTORS:
        case MySQLParser.COPY:
        case MySQLParser.CPU:
        case MySQLParser.CURSOR_NAME:
        case MySQLParser.DATA:
        case MySQLParser.DATAFILE:
        case MySQLParser.DEALLOCATE:
        case MySQLParser.DEFAULT_AUTH:
        case MySQLParser.DEFINER:
        case MySQLParser.DELAY_KEY_WRITE:
        case MySQLParser.DES_KEY_FILE:
        case MySQLParser.DIRECTORY:
        case MySQLParser.DISABLE:
        case MySQLParser.DISCARD:
        case MySQLParser.DISK:
        case MySQLParser.DO:
        case MySQLParser.DUMPFILE:
        case MySQLParser.DUPLICATE:
        case MySQLParser.DYNAMIC:
        case MySQLParser.ENABLE:
        case MySQLParser.ENCRYPTION:
        case MySQLParser.END:
        case MySQLParser.ENDS:
        case MySQLParser.ENGINE:
        case MySQLParser.ENGINES:
        case MySQLParser.ERROR:
        case MySQLParser.ERRORS:
        case MySQLParser.ESCAPE:
        case MySQLParser.EVEN:
        case MySQLParser.EVENT:
        case MySQLParser.EVENTS:
        case MySQLParser.EVERY:
        case MySQLParser.EXCHANGE:
        case MySQLParser.EXCLUSIVE:
        case MySQLParser.EXPIRE:
        case MySQLParser.EXPORT:
        case MySQLParser.EXTENDED:
        case MySQLParser.EXTENT_SIZE:
        case MySQLParser.FAST:
        case MySQLParser.FAULTS:
        case MySQLParser.FIELDS:
        case MySQLParser.FILE_BLOCK_SIZE:
        case MySQLParser.FILTER:
        case MySQLParser.FIRST:
        case MySQLParser.FIXED:
        case MySQLParser.FLUSH:
        case MySQLParser.FOLLOWS:
        case MySQLParser.FOUND:
        case MySQLParser.FULL:
        case MySQLParser.FUNCTION:
        case MySQLParser.GENERAL:
        case MySQLParser.GLOBAL:
        case MySQLParser.GRANTS:
        case MySQLParser.GROUP_REPLICATION:
        case MySQLParser.HANDLER:
        case MySQLParser.HASH:
        case MySQLParser.HELP:
        case MySQLParser.HOST:
        case MySQLParser.HOSTS:
        case MySQLParser.IDENTIFIED:
        case MySQLParser.IGNORE_SERVER_IDS:
        case MySQLParser.IMPORT:
        case MySQLParser.INDEXES:
        case MySQLParser.INITIAL_SIZE:
        case MySQLParser.INPLACE:
        case MySQLParser.INSERT_METHOD:
        case MySQLParser.INSTALL:
        case MySQLParser.INSTANCE:
        case MySQLParser.INVISIBLE:
        case MySQLParser.INVOKER:
        case MySQLParser.IO:
        case MySQLParser.IO_THREAD:
        case MySQLParser.IPC:
        case MySQLParser.ISOLATION:
        case MySQLParser.ISSUER:
        case MySQLParser.JSON:
        case MySQLParser.KEY_BLOCK_SIZE:
        case MySQLParser.LANGUAGE:
        case MySQLParser.LAST:
        case MySQLParser.LEAVES:
        case MySQLParser.LESS:
        case MySQLParser.LEVEL:
        case MySQLParser.LIST:
        case MySQLParser.LOCAL:
        case MySQLParser.LOGFILE:
        case MySQLParser.LOGS:
        case MySQLParser.MASTER:
        case MySQLParser.MASTER_AUTO_POSITION:
        case MySQLParser.MASTER_CONNECT_RETRY:
        case MySQLParser.MASTER_DELAY:
        case MySQLParser.MASTER_HEARTBEAT_PERIOD:
        case MySQLParser.MASTER_HOST:
        case MySQLParser.MASTER_LOG_FILE:
        case MySQLParser.MASTER_LOG_POS:
        case MySQLParser.MASTER_PASSWORD:
        case MySQLParser.MASTER_PORT:
        case MySQLParser.MASTER_RETRY_COUNT:
        case MySQLParser.MASTER_SSL:
        case MySQLParser.MASTER_SSL_CA:
        case MySQLParser.MASTER_SSL_CAPATH:
        case MySQLParser.MASTER_SSL_CERT:
        case MySQLParser.MASTER_SSL_CIPHER:
        case MySQLParser.MASTER_SSL_CRL:
        case MySQLParser.MASTER_SSL_CRLPATH:
        case MySQLParser.MASTER_SSL_KEY:
        case MySQLParser.MASTER_TLS_VERSION:
        case MySQLParser.MASTER_USER:
        case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser.MAX_QUERIES_PER_HOUR:
        case MySQLParser.MAX_ROWS:
        case MySQLParser.MAX_SIZE:
        case MySQLParser.MAX_UPDATES_PER_HOUR:
        case MySQLParser.MAX_USER_CONNECTIONS:
        case MySQLParser.MEDIUM:
        case MySQLParser.MERGE:
        case MySQLParser.MESSAGE_TEXT:
        case MySQLParser.MID:
        case MySQLParser.MIGRATE:
        case MySQLParser.MIN_ROWS:
        case MySQLParser.MODE:
        case MySQLParser.MODIFY:
        case MySQLParser.MUTEX:
        case MySQLParser.MYSQL:
        case MySQLParser.MYSQL_ERRNO:
        case MySQLParser.NAME:
        case MySQLParser.NAMES:
        case MySQLParser.NCHAR:
        case MySQLParser.NEVER:
        case MySQLParser.NEXT:
        case MySQLParser.NO:
        case MySQLParser.NODEGROUP:
        case MySQLParser.NONE:
        case MySQLParser.OFFLINE:
        case MySQLParser.OFFSET:
        case MySQLParser.OJ:
        case MySQLParser.OLD_PASSWORD:
        case MySQLParser.ONE:
        case MySQLParser.ONLINE:
        case MySQLParser.ONLY:
        case MySQLParser.OPEN:
        case MySQLParser.OPTIMIZER_COSTS:
        case MySQLParser.OPTIONS:
        case MySQLParser.OWNER:
        case MySQLParser.PACK_KEYS:
        case MySQLParser.PAGE:
        case MySQLParser.PARSER:
        case MySQLParser.PARTIAL:
        case MySQLParser.PARTITIONING:
        case MySQLParser.PARTITIONS:
        case MySQLParser.PASSWORD:
        case MySQLParser.PHASE:
        case MySQLParser.PLUGIN:
        case MySQLParser.PLUGIN_DIR:
        case MySQLParser.PLUGINS:
        case MySQLParser.PORT:
        case MySQLParser.PRECEDES:
        case MySQLParser.PREPARE:
        case MySQLParser.PRESERVE:
        case MySQLParser.PREV:
        case MySQLParser.PROCESSLIST:
        case MySQLParser.PROFILE:
        case MySQLParser.PROFILES:
        case MySQLParser.PROXY:
        case MySQLParser.QUERY:
        case MySQLParser.QUICK:
        case MySQLParser.REBUILD:
        case MySQLParser.RECOVER:
        case MySQLParser.REDO_BUFFER_SIZE:
        case MySQLParser.REDUNDANT:
        case MySQLParser.RELAY:
        case MySQLParser.RELAY_LOG_FILE:
        case MySQLParser.RELAY_LOG_POS:
        case MySQLParser.RELAYLOG:
        case MySQLParser.REMOVE:
        case MySQLParser.REORGANIZE:
        case MySQLParser.REPAIR:
        case MySQLParser.REPLICATE_DO_DB:
        case MySQLParser.REPLICATE_DO_TABLE:
        case MySQLParser.REPLICATE_IGNORE_DB:
        case MySQLParser.REPLICATE_IGNORE_TABLE:
        case MySQLParser.REPLICATE_REWRITE_DB:
        case MySQLParser.REPLICATE_WILD_DO_TABLE:
        case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser.REPLICATION:
        case MySQLParser.RESET:
        case MySQLParser.RESUME:
        case MySQLParser.RETURNED_SQLSTATE:
        case MySQLParser.RETURNS:
        case MySQLParser.ROLE:
        case MySQLParser.ROLLBACK:
        case MySQLParser.ROLLUP:
        case MySQLParser.ROTATE:
        case MySQLParser.ROW:
        case MySQLParser.ROWS:
        case MySQLParser.ROW_FORMAT:
        case MySQLParser.SAVEPOINT:
        case MySQLParser.SCHEDULE:
        case MySQLParser.SECURITY:
        case MySQLParser.SERVER:
        case MySQLParser.SESSION:
        case MySQLParser.SHARE:
        case MySQLParser.SHARED:
        case MySQLParser.SIGNED:
        case MySQLParser.SIMPLE:
        case MySQLParser.SLAVE:
        case MySQLParser.SLOW:
        case MySQLParser.SNAPSHOT:
        case MySQLParser.SOCKET:
        case MySQLParser.SOME:
        case MySQLParser.SONAME:
        case MySQLParser.SOUNDS:
        case MySQLParser.SOURCE:
        case MySQLParser.SQL_AFTER_GTIDS:
        case MySQLParser.SQL_AFTER_MTS_GAPS:
        case MySQLParser.SQL_BEFORE_GTIDS:
        case MySQLParser.SQL_BUFFER_RESULT:
        case MySQLParser.SQL_CACHE:
        case MySQLParser.SQL_NO_CACHE:
        case MySQLParser.SQL_THREAD:
        case MySQLParser.START:
        case MySQLParser.STARTS:
        case MySQLParser.STATS_AUTO_RECALC:
        case MySQLParser.STATS_PERSISTENT:
        case MySQLParser.STATS_SAMPLE_PAGES:
        case MySQLParser.STATUS:
        case MySQLParser.STOP:
        case MySQLParser.STORAGE:
        case MySQLParser.STRING:
        case MySQLParser.SUBCLASS_ORIGIN:
        case MySQLParser.SUBJECT:
        case MySQLParser.SUBPARTITION:
        case MySQLParser.SUBPARTITIONS:
        case MySQLParser.SUSPEND:
        case MySQLParser.SWAPS:
        case MySQLParser.SWITCHES:
        case MySQLParser.TABLE_NAME:
        case MySQLParser.TABLESPACE:
        case MySQLParser.TEMPORARY:
        case MySQLParser.TEMPTABLE:
        case MySQLParser.THAN:
        case MySQLParser.TRADITIONAL:
        case MySQLParser.TRANSACTION:
        case MySQLParser.TRANSACTIONAL:
        case MySQLParser.TRIGGERS:
        case MySQLParser.TRUNCATE:
        case MySQLParser.UNDEFINED:
        case MySQLParser.UNDOFILE:
        case MySQLParser.UNDO_BUFFER_SIZE:
        case MySQLParser.UNINSTALL:
        case MySQLParser.UNKNOWN:
        case MySQLParser.UNTIL:
        case MySQLParser.UPGRADE:
        case MySQLParser.USER:
        case MySQLParser.USE_FRM:
        case MySQLParser.USER_RESOURCES:
        case MySQLParser.VALIDATION:
        case MySQLParser.VALUE:
        case MySQLParser.VARIABLES:
        case MySQLParser.VIEW:
        case MySQLParser.VISIBLE:
        case MySQLParser.WAIT:
        case MySQLParser.WARNINGS:
        case MySQLParser.WITHOUT:
        case MySQLParser.WORK:
        case MySQLParser.WRAPPER:
        case MySQLParser.X509:
        case MySQLParser.XA:
        case MySQLParser.XML:
        case MySQLParser.INTERNAL:
        case MySQLParser.QUARTER:
        case MySQLParser.MONTH:
        case MySQLParser.DAY:
        case MySQLParser.HOUR:
        case MySQLParser.MINUTE:
        case MySQLParser.WEEK:
        case MySQLParser.SECOND:
        case MySQLParser.MICROSECOND:
        case MySQLParser.TABLES:
        case MySQLParser.ROUTINE:
        case MySQLParser.EXECUTE:
        case MySQLParser.FILE:
        case MySQLParser.PROCESS:
        case MySQLParser.RELOAD:
        case MySQLParser.SHUTDOWN:
        case MySQLParser.SUPER:
        case MySQLParser.PRIVILEGES:
        case MySQLParser.AUDIT_ADMIN:
        case MySQLParser.BACKUP_ADMIN:
        case MySQLParser.BINLOG_ADMIN:
        case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
        case MySQLParser.CLONE_ADMIN:
        case MySQLParser.CONNECTION_ADMIN:
        case MySQLParser.ENCRYPTION_KEY_ADMIN:
        case MySQLParser.FIREWALL_ADMIN:
        case MySQLParser.FIREWALL_USER:
        case MySQLParser.GROUP_REPLICATION_ADMIN:
        case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
        case MySQLParser.NDB_STORED_USER:
        case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
        case MySQLParser.REPLICATION_APPLIER:
        case MySQLParser.REPLICATION_SLAVE_ADMIN:
        case MySQLParser.RESOURCE_GROUP_ADMIN:
        case MySQLParser.RESOURCE_GROUP_USER:
        case MySQLParser.ROLE_ADMIN:
        case MySQLParser.SESSION_VARIABLES_ADMIN:
        case MySQLParser.SET_USER_ID:
        case MySQLParser.SHOW_ROUTINE:
        case MySQLParser.SYSTEM_VARIABLES_ADMIN:
        case MySQLParser.TABLE_ENCRYPTION_ADMIN:
        case MySQLParser.VERSION_TOKEN_ADMIN:
        case MySQLParser.XA_RECOVER_ADMIN:
        case MySQLParser.ARMSCII8:
        case MySQLParser.ASCII:
        case MySQLParser.BIG5:
        case MySQLParser.CP1250:
        case MySQLParser.CP1251:
        case MySQLParser.CP1256:
        case MySQLParser.CP1257:
        case MySQLParser.CP850:
        case MySQLParser.CP852:
        case MySQLParser.CP866:
        case MySQLParser.CP932:
        case MySQLParser.DEC8:
        case MySQLParser.EUCJPMS:
        case MySQLParser.EUCKR:
        case MySQLParser.GB2312:
        case MySQLParser.GBK:
        case MySQLParser.GEOSTD8:
        case MySQLParser.GREEK:
        case MySQLParser.HEBREW:
        case MySQLParser.HP8:
        case MySQLParser.KEYBCS2:
        case MySQLParser.KOI8R:
        case MySQLParser.KOI8U:
        case MySQLParser.LATIN1:
        case MySQLParser.LATIN2:
        case MySQLParser.LATIN5:
        case MySQLParser.LATIN7:
        case MySQLParser.MACCE:
        case MySQLParser.MACROMAN:
        case MySQLParser.SJIS:
        case MySQLParser.SWE7:
        case MySQLParser.TIS620:
        case MySQLParser.UCS2:
        case MySQLParser.UJIS:
        case MySQLParser.UTF16:
        case MySQLParser.UTF16LE:
        case MySQLParser.UTF32:
        case MySQLParser.UTF8:
        case MySQLParser.UTF8MB3:
        case MySQLParser.UTF8MB4:
        case MySQLParser.ARCHIVE:
        case MySQLParser.BLACKHOLE:
        case MySQLParser.CSV:
        case MySQLParser.FEDERATED:
        case MySQLParser.INNODB:
        case MySQLParser.MEMORY:
        case MySQLParser.MRG_MYISAM:
        case MySQLParser.MYISAM:
        case MySQLParser.NDB:
        case MySQLParser.NDBCLUSTER:
        case MySQLParser.PERFORMANCE_SCHEMA:
        case MySQLParser.TOKUDB:
        case MySQLParser.REPEATABLE:
        case MySQLParser.COMMITTED:
        case MySQLParser.UNCOMMITTED:
        case MySQLParser.SERIALIZABLE:
        case MySQLParser.GEOMETRYCOLLECTION:
        case MySQLParser.LINESTRING:
        case MySQLParser.MULTILINESTRING:
        case MySQLParser.MULTIPOINT:
        case MySQLParser.MULTIPOLYGON:
        case MySQLParser.POINT:
        case MySQLParser.POLYGON:
        case MySQLParser.ABS:
        case MySQLParser.ACOS:
        case MySQLParser.ADDDATE:
        case MySQLParser.ADDTIME:
        case MySQLParser.AES_DECRYPT:
        case MySQLParser.AES_ENCRYPT:
        case MySQLParser.AREA:
        case MySQLParser.ASBINARY:
        case MySQLParser.ASIN:
        case MySQLParser.ASTEXT:
        case MySQLParser.ASWKB:
        case MySQLParser.ASWKT:
        case MySQLParser.ASYMMETRIC_DECRYPT:
        case MySQLParser.ASYMMETRIC_DERIVE:
        case MySQLParser.ASYMMETRIC_ENCRYPT:
        case MySQLParser.ASYMMETRIC_SIGN:
        case MySQLParser.ASYMMETRIC_VERIFY:
        case MySQLParser.ATAN:
        case MySQLParser.ATAN2:
        case MySQLParser.BENCHMARK:
        case MySQLParser.BIN:
        case MySQLParser.BIT_COUNT:
        case MySQLParser.BIT_LENGTH:
        case MySQLParser.BUFFER:
        case MySQLParser.CATALOG_NAME:
        case MySQLParser.CEIL:
        case MySQLParser.CEILING:
        case MySQLParser.CENTROID:
        case MySQLParser.CHARACTER_LENGTH:
        case MySQLParser.CHARSET:
        case MySQLParser.CHAR_LENGTH:
        case MySQLParser.COERCIBILITY:
        case MySQLParser.COLLATION:
        case MySQLParser.COMPRESS:
        case MySQLParser.CONCAT:
        case MySQLParser.CONCAT_WS:
        case MySQLParser.CONNECTION_ID:
        case MySQLParser.CONV:
        case MySQLParser.CONVERT_TZ:
        case MySQLParser.COS:
        case MySQLParser.COT:
        case MySQLParser.CRC32:
        case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser.CREATE_DH_PARAMETERS:
        case MySQLParser.CREATE_DIGEST:
        case MySQLParser.CROSSES:
        case MySQLParser.DATEDIFF:
        case MySQLParser.DATE_FORMAT:
        case MySQLParser.DAYNAME:
        case MySQLParser.DAYOFMONTH:
        case MySQLParser.DAYOFWEEK:
        case MySQLParser.DAYOFYEAR:
        case MySQLParser.DECODE:
        case MySQLParser.DEGREES:
        case MySQLParser.DES_DECRYPT:
        case MySQLParser.DES_ENCRYPT:
        case MySQLParser.DIMENSION:
        case MySQLParser.DISJOINT:
        case MySQLParser.ELT:
        case MySQLParser.ENCODE:
        case MySQLParser.ENCRYPT:
        case MySQLParser.ENDPOINT:
        case MySQLParser.ENVELOPE:
        case MySQLParser.EQUALS:
        case MySQLParser.EXP:
        case MySQLParser.EXPORT_SET:
        case MySQLParser.EXTERIORRING:
        case MySQLParser.EXTRACTVALUE:
        case MySQLParser.FIELD:
        case MySQLParser.FIND_IN_SET:
        case MySQLParser.FLOOR:
        case MySQLParser.FORMAT:
        case MySQLParser.FOUND_ROWS:
        case MySQLParser.FROM_BASE64:
        case MySQLParser.FROM_DAYS:
        case MySQLParser.FROM_UNIXTIME:
        case MySQLParser.GEOMCOLLFROMTEXT:
        case MySQLParser.GEOMCOLLFROMWKB:
        case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.GEOMETRYFROMTEXT:
        case MySQLParser.GEOMETRYFROMWKB:
        case MySQLParser.GEOMETRYN:
        case MySQLParser.GEOMETRYTYPE:
        case MySQLParser.GEOMFROMTEXT:
        case MySQLParser.GEOMFROMWKB:
        case MySQLParser.GET_FORMAT:
        case MySQLParser.GET_LOCK:
        case MySQLParser.GLENGTH:
        case MySQLParser.GREATEST:
        case MySQLParser.GTID_SUBSET:
        case MySQLParser.GTID_SUBTRACT:
        case MySQLParser.HEX:
        case MySQLParser.IFNULL:
        case MySQLParser.INET6_ATON:
        case MySQLParser.INET6_NTOA:
        case MySQLParser.INET_ATON:
        case MySQLParser.INET_NTOA:
        case MySQLParser.INSTR:
        case MySQLParser.INTERIORRINGN:
        case MySQLParser.INTERSECTS:
        case MySQLParser.ISCLOSED:
        case MySQLParser.ISEMPTY:
        case MySQLParser.ISNULL:
        case MySQLParser.ISSIMPLE:
        case MySQLParser.IS_FREE_LOCK:
        case MySQLParser.IS_IPV4:
        case MySQLParser.IS_IPV4_COMPAT:
        case MySQLParser.IS_IPV4_MAPPED:
        case MySQLParser.IS_IPV6:
        case MySQLParser.IS_USED_LOCK:
        case MySQLParser.LAST_INSERT_ID:
        case MySQLParser.LCASE:
        case MySQLParser.LEAST:
        case MySQLParser.LENGTH:
        case MySQLParser.LINEFROMTEXT:
        case MySQLParser.LINEFROMWKB:
        case MySQLParser.LINESTRINGFROMTEXT:
        case MySQLParser.LINESTRINGFROMWKB:
        case MySQLParser.LN:
        case MySQLParser.LOAD_FILE:
        case MySQLParser.LOCATE:
        case MySQLParser.LOG:
        case MySQLParser.LOG10:
        case MySQLParser.LOG2:
        case MySQLParser.LOWER:
        case MySQLParser.LPAD:
        case MySQLParser.LTRIM:
        case MySQLParser.MAKEDATE:
        case MySQLParser.MAKETIME:
        case MySQLParser.MAKE_SET:
        case MySQLParser.MASTER_POS_WAIT:
        case MySQLParser.MBRCONTAINS:
        case MySQLParser.MBRDISJOINT:
        case MySQLParser.MBREQUAL:
        case MySQLParser.MBRINTERSECTS:
        case MySQLParser.MBROVERLAPS:
        case MySQLParser.MBRTOUCHES:
        case MySQLParser.MBRWITHIN:
        case MySQLParser.MD5:
        case MySQLParser.MLINEFROMTEXT:
        case MySQLParser.MLINEFROMWKB:
        case MySQLParser.MONTHNAME:
        case MySQLParser.MPOINTFROMTEXT:
        case MySQLParser.MPOINTFROMWKB:
        case MySQLParser.MPOLYFROMTEXT:
        case MySQLParser.MPOLYFROMWKB:
        case MySQLParser.MULTILINESTRINGFROMTEXT:
        case MySQLParser.MULTILINESTRINGFROMWKB:
        case MySQLParser.MULTIPOINTFROMTEXT:
        case MySQLParser.MULTIPOINTFROMWKB:
        case MySQLParser.MULTIPOLYGONFROMTEXT:
        case MySQLParser.MULTIPOLYGONFROMWKB:
        case MySQLParser.NAME_CONST:
        case MySQLParser.NULLIF:
        case MySQLParser.NUMGEOMETRIES:
        case MySQLParser.NUMINTERIORRINGS:
        case MySQLParser.NUMPOINTS:
        case MySQLParser.OCT:
        case MySQLParser.OCTET_LENGTH:
        case MySQLParser.ORD:
        case MySQLParser.OVERLAPS:
        case MySQLParser.PERIOD_ADD:
        case MySQLParser.PERIOD_DIFF:
        case MySQLParser.PI:
        case MySQLParser.POINTFROMTEXT:
        case MySQLParser.POINTFROMWKB:
        case MySQLParser.POINTN:
        case MySQLParser.POLYFROMTEXT:
        case MySQLParser.POLYFROMWKB:
        case MySQLParser.POLYGONFROMTEXT:
        case MySQLParser.POLYGONFROMWKB:
        case MySQLParser.POW:
        case MySQLParser.POWER:
        case MySQLParser.QUOTE:
        case MySQLParser.RADIANS:
        case MySQLParser.RAND:
        case MySQLParser.RANDOM_BYTES:
        case MySQLParser.RELEASE_LOCK:
        case MySQLParser.REVERSE:
        case MySQLParser.ROUND:
        case MySQLParser.ROW_COUNT:
        case MySQLParser.RPAD:
        case MySQLParser.RTRIM:
        case MySQLParser.SEC_TO_TIME:
        case MySQLParser.SESSION_USER:
        case MySQLParser.SHA:
        case MySQLParser.SHA1:
        case MySQLParser.SHA2:
        case MySQLParser.SCHEMA_NAME:
        case MySQLParser.SIGN:
        case MySQLParser.SIN:
        case MySQLParser.SLEEP:
        case MySQLParser.SOUNDEX:
        case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser.SQRT:
        case MySQLParser.SRID:
        case MySQLParser.STARTPOINT:
        case MySQLParser.STRCMP:
        case MySQLParser.STR_TO_DATE:
        case MySQLParser.ST_AREA:
        case MySQLParser.ST_ASBINARY:
        case MySQLParser.ST_ASTEXT:
        case MySQLParser.ST_ASWKB:
        case MySQLParser.ST_ASWKT:
        case MySQLParser.ST_BUFFER:
        case MySQLParser.ST_CENTROID:
        case MySQLParser.ST_CONTAINS:
        case MySQLParser.ST_CROSSES:
        case MySQLParser.ST_DIFFERENCE:
        case MySQLParser.ST_DIMENSION:
        case MySQLParser.ST_DISJOINT:
        case MySQLParser.ST_DISTANCE:
        case MySQLParser.ST_ENDPOINT:
        case MySQLParser.ST_ENVELOPE:
        case MySQLParser.ST_EQUALS:
        case MySQLParser.ST_EXTERIORRING:
        case MySQLParser.ST_GEOMCOLLFROMTEXT:
        case MySQLParser.ST_GEOMCOLLFROMTXT:
        case MySQLParser.ST_GEOMCOLLFROMWKB:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.ST_GEOMETRYFROMTEXT:
        case MySQLParser.ST_GEOMETRYFROMWKB:
        case MySQLParser.ST_GEOMETRYN:
        case MySQLParser.ST_GEOMETRYTYPE:
        case MySQLParser.ST_GEOMFROMTEXT:
        case MySQLParser.ST_GEOMFROMWKB:
        case MySQLParser.ST_INTERIORRINGN:
        case MySQLParser.ST_INTERSECTION:
        case MySQLParser.ST_INTERSECTS:
        case MySQLParser.ST_ISCLOSED:
        case MySQLParser.ST_ISEMPTY:
        case MySQLParser.ST_ISSIMPLE:
        case MySQLParser.ST_LINEFROMTEXT:
        case MySQLParser.ST_LINEFROMWKB:
        case MySQLParser.ST_LINESTRINGFROMTEXT:
        case MySQLParser.ST_LINESTRINGFROMWKB:
        case MySQLParser.ST_NUMGEOMETRIES:
        case MySQLParser.ST_NUMINTERIORRING:
        case MySQLParser.ST_NUMINTERIORRINGS:
        case MySQLParser.ST_NUMPOINTS:
        case MySQLParser.ST_OVERLAPS:
        case MySQLParser.ST_POINTFROMTEXT:
        case MySQLParser.ST_POINTFROMWKB:
        case MySQLParser.ST_POINTN:
        case MySQLParser.ST_POLYFROMTEXT:
        case MySQLParser.ST_POLYFROMWKB:
        case MySQLParser.ST_POLYGONFROMTEXT:
        case MySQLParser.ST_POLYGONFROMWKB:
        case MySQLParser.ST_SRID:
        case MySQLParser.ST_STARTPOINT:
        case MySQLParser.ST_SYMDIFFERENCE:
        case MySQLParser.ST_TOUCHES:
        case MySQLParser.ST_UNION:
        case MySQLParser.ST_WITHIN:
        case MySQLParser.ST_X:
        case MySQLParser.ST_Y:
        case MySQLParser.SUBDATE:
        case MySQLParser.SUBSTRING_INDEX:
        case MySQLParser.SUBTIME:
        case MySQLParser.SYSTEM_USER:
        case MySQLParser.TAN:
        case MySQLParser.TIMEDIFF:
        case MySQLParser.TIMESTAMPADD:
        case MySQLParser.TIMESTAMPDIFF:
        case MySQLParser.TIME_FORMAT:
        case MySQLParser.TIME_TO_SEC:
        case MySQLParser.TOUCHES:
        case MySQLParser.TO_BASE64:
        case MySQLParser.TO_DAYS:
        case MySQLParser.TO_SECONDS:
        case MySQLParser.UCASE:
        case MySQLParser.UNCOMPRESS:
        case MySQLParser.UNCOMPRESSED_LENGTH:
        case MySQLParser.UNHEX:
        case MySQLParser.UNIX_TIMESTAMP:
        case MySQLParser.UPDATEXML:
        case MySQLParser.UPPER:
        case MySQLParser.UUID:
        case MySQLParser.UUID_SHORT:
        case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser.VERSION:
        case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser.WEEKDAY:
        case MySQLParser.WEEKOFYEAR:
        case MySQLParser.WEIGHT_STRING:
        case MySQLParser.WITHIN:
        case MySQLParser.YEARWEEK:
        case MySQLParser.Y_FUNCTION:
        case MySQLParser.X_FUNCTION:
        case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser.STRING_LITERAL:
        case MySQLParser.ID:
        case MySQLParser.REVERSE_QUOTE_ID:
            this.state = 3130;
            this.tableName();
            this.state = 3133;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.DOT) {
                this.state = 3131;
                this.match(MySQLParser.DOT);
                this.state = 3132;
                this.match(MySQLParser.STAR);
            }

            this.state = 3143;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 3135;
                this.match(MySQLParser.COMMA);
                this.state = 3136;
                this.tableName();
                this.state = 3139;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.DOT) {
                    this.state = 3137;
                    this.match(MySQLParser.DOT);
                    this.state = 3138;
                    this.match(MySQLParser.STAR);
                }

                this.state = 3145;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3146;
            this.match(MySQLParser.FROM);
            this.state = 3147;
            this.tableSources();
            break;
        case MySQLParser.FROM:
            this.state = 3149;
            this.match(MySQLParser.FROM);
            this.state = 3150;
            this.tableName();
            this.state = 3153;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.DOT) {
                this.state = 3151;
                this.match(MySQLParser.DOT);
                this.state = 3152;
                this.match(MySQLParser.STAR);
            }

            this.state = 3163;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 3155;
                this.match(MySQLParser.COMMA);
                this.state = 3156;
                this.tableName();
                this.state = 3159;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.DOT) {
                    this.state = 3157;
                    this.match(MySQLParser.DOT);
                    this.state = 3158;
                    this.match(MySQLParser.STAR);
                }

                this.state = 3165;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3166;
            this.match(MySQLParser.USING);
            this.state = 3167;
            this.tableSources();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3173;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WHERE) {
            this.state = 3171;
            this.match(MySQLParser.WHERE);
            this.state = 3172;
            this.expression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HandlerOpenStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_handlerOpenStatement;
    return this;
}

HandlerOpenStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlerOpenStatementContext.prototype.constructor = HandlerOpenStatementContext;

HandlerOpenStatementContext.prototype.HANDLER = function() {
    return this.getToken(MySQLParser.HANDLER, 0);
};

HandlerOpenStatementContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

HandlerOpenStatementContext.prototype.OPEN = function() {
    return this.getToken(MySQLParser.OPEN, 0);
};

HandlerOpenStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

HandlerOpenStatementContext.prototype.AS = function() {
    return this.getToken(MySQLParser.AS, 0);
};

HandlerOpenStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHandlerOpenStatement(this);
	}
};

HandlerOpenStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHandlerOpenStatement(this);
	}
};

HandlerOpenStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHandlerOpenStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.HandlerOpenStatementContext = HandlerOpenStatementContext;

MySQLParser.prototype.handlerOpenStatement = function() {

    var localctx = new HandlerOpenStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, MySQLParser.RULE_handlerOpenStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3175;
        this.match(MySQLParser.HANDLER);
        this.state = 3176;
        this.tableName();
        this.state = 3177;
        this.match(MySQLParser.OPEN);
        this.state = 3182;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,442,this._ctx);
        if(la_===1) {
            this.state = 3179;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.AS) {
                this.state = 3178;
                this.match(MySQLParser.AS);
            }

            this.state = 3181;
            this.uid();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HandlerReadIndexStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_handlerReadIndexStatement;
    this.index = null; // UidContext
    this.moveOrder = null; // Token
    return this;
}

HandlerReadIndexStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlerReadIndexStatementContext.prototype.constructor = HandlerReadIndexStatementContext;

HandlerReadIndexStatementContext.prototype.HANDLER = function() {
    return this.getToken(MySQLParser.HANDLER, 0);
};

HandlerReadIndexStatementContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

HandlerReadIndexStatementContext.prototype.READ = function() {
    return this.getToken(MySQLParser.READ, 0);
};

HandlerReadIndexStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

HandlerReadIndexStatementContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

HandlerReadIndexStatementContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

HandlerReadIndexStatementContext.prototype.constants = function() {
    return this.getTypedRuleContext(ConstantsContext,0);
};

HandlerReadIndexStatementContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

HandlerReadIndexStatementContext.prototype.WHERE = function() {
    return this.getToken(MySQLParser.WHERE, 0);
};

HandlerReadIndexStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

HandlerReadIndexStatementContext.prototype.LIMIT = function() {
    return this.getToken(MySQLParser.LIMIT, 0);
};

HandlerReadIndexStatementContext.prototype.limitClauseAtom = function() {
    return this.getTypedRuleContext(LimitClauseAtomContext,0);
};

HandlerReadIndexStatementContext.prototype.FIRST = function() {
    return this.getToken(MySQLParser.FIRST, 0);
};

HandlerReadIndexStatementContext.prototype.NEXT = function() {
    return this.getToken(MySQLParser.NEXT, 0);
};

HandlerReadIndexStatementContext.prototype.PREV = function() {
    return this.getToken(MySQLParser.PREV, 0);
};

HandlerReadIndexStatementContext.prototype.LAST = function() {
    return this.getToken(MySQLParser.LAST, 0);
};

HandlerReadIndexStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHandlerReadIndexStatement(this);
	}
};

HandlerReadIndexStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHandlerReadIndexStatement(this);
	}
};

HandlerReadIndexStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHandlerReadIndexStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.HandlerReadIndexStatementContext = HandlerReadIndexStatementContext;

MySQLParser.prototype.handlerReadIndexStatement = function() {

    var localctx = new HandlerReadIndexStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, MySQLParser.RULE_handlerReadIndexStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3184;
        this.match(MySQLParser.HANDLER);
        this.state = 3185;
        this.tableName();
        this.state = 3186;
        this.match(MySQLParser.READ);
        this.state = 3187;
        localctx.index = this.uid();
        this.state = 3194;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.EQUAL_SYMBOL:
        case MySQLParser.GREATER_SYMBOL:
        case MySQLParser.LESS_SYMBOL:
        case MySQLParser.EXCLAMATION_SYMBOL:
            this.state = 3188;
            this.comparisonOperator();
            this.state = 3189;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3190;
            this.constants();
            this.state = 3191;
            this.match(MySQLParser.RR_BRACKET);
            break;
        case MySQLParser.FIRST:
        case MySQLParser.LAST:
        case MySQLParser.NEXT:
        case MySQLParser.PREV:
            this.state = 3193;
            localctx.moveOrder = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.FIRST || _la===MySQLParser.LAST || _la===MySQLParser.NEXT || _la===MySQLParser.PREV)) {
                localctx.moveOrder = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3198;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WHERE) {
            this.state = 3196;
            this.match(MySQLParser.WHERE);
            this.state = 3197;
            this.expression(0);
        }

        this.state = 3202;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LIMIT) {
            this.state = 3200;
            this.match(MySQLParser.LIMIT);
            this.state = 3201;
            this.limitClauseAtom();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HandlerReadStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_handlerReadStatement;
    this.moveOrder = null; // Token
    return this;
}

HandlerReadStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlerReadStatementContext.prototype.constructor = HandlerReadStatementContext;

HandlerReadStatementContext.prototype.HANDLER = function() {
    return this.getToken(MySQLParser.HANDLER, 0);
};

HandlerReadStatementContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

HandlerReadStatementContext.prototype.READ = function() {
    return this.getToken(MySQLParser.READ, 0);
};

HandlerReadStatementContext.prototype.FIRST = function() {
    return this.getToken(MySQLParser.FIRST, 0);
};

HandlerReadStatementContext.prototype.NEXT = function() {
    return this.getToken(MySQLParser.NEXT, 0);
};

HandlerReadStatementContext.prototype.WHERE = function() {
    return this.getToken(MySQLParser.WHERE, 0);
};

HandlerReadStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

HandlerReadStatementContext.prototype.LIMIT = function() {
    return this.getToken(MySQLParser.LIMIT, 0);
};

HandlerReadStatementContext.prototype.limitClauseAtom = function() {
    return this.getTypedRuleContext(LimitClauseAtomContext,0);
};

HandlerReadStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHandlerReadStatement(this);
	}
};

HandlerReadStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHandlerReadStatement(this);
	}
};

HandlerReadStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHandlerReadStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.HandlerReadStatementContext = HandlerReadStatementContext;

MySQLParser.prototype.handlerReadStatement = function() {

    var localctx = new HandlerReadStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, MySQLParser.RULE_handlerReadStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3204;
        this.match(MySQLParser.HANDLER);
        this.state = 3205;
        this.tableName();
        this.state = 3206;
        this.match(MySQLParser.READ);
        this.state = 3207;
        localctx.moveOrder = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.FIRST || _la===MySQLParser.NEXT)) {
            localctx.moveOrder = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3210;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WHERE) {
            this.state = 3208;
            this.match(MySQLParser.WHERE);
            this.state = 3209;
            this.expression(0);
        }

        this.state = 3214;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LIMIT) {
            this.state = 3212;
            this.match(MySQLParser.LIMIT);
            this.state = 3213;
            this.limitClauseAtom();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HandlerCloseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_handlerCloseStatement;
    return this;
}

HandlerCloseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlerCloseStatementContext.prototype.constructor = HandlerCloseStatementContext;

HandlerCloseStatementContext.prototype.HANDLER = function() {
    return this.getToken(MySQLParser.HANDLER, 0);
};

HandlerCloseStatementContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

HandlerCloseStatementContext.prototype.CLOSE = function() {
    return this.getToken(MySQLParser.CLOSE, 0);
};

HandlerCloseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHandlerCloseStatement(this);
	}
};

HandlerCloseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHandlerCloseStatement(this);
	}
};

HandlerCloseStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHandlerCloseStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.HandlerCloseStatementContext = HandlerCloseStatementContext;

MySQLParser.prototype.handlerCloseStatement = function() {

    var localctx = new HandlerCloseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, MySQLParser.RULE_handlerCloseStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3216;
        this.match(MySQLParser.HANDLER);
        this.state = 3217;
        this.tableName();
        this.state = 3218;
        this.match(MySQLParser.CLOSE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SingleUpdateStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_singleUpdateStatement;
    this.priority = null; // Token
    return this;
}

SingleUpdateStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleUpdateStatementContext.prototype.constructor = SingleUpdateStatementContext;

SingleUpdateStatementContext.prototype.UPDATE = function() {
    return this.getToken(MySQLParser.UPDATE, 0);
};

SingleUpdateStatementContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

SingleUpdateStatementContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

SingleUpdateStatementContext.prototype.updatedElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UpdatedElementContext);
    } else {
        return this.getTypedRuleContext(UpdatedElementContext,i);
    }
};

SingleUpdateStatementContext.prototype.IGNORE = function() {
    return this.getToken(MySQLParser.IGNORE, 0);
};

SingleUpdateStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

SingleUpdateStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


SingleUpdateStatementContext.prototype.WHERE = function() {
    return this.getToken(MySQLParser.WHERE, 0);
};

SingleUpdateStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SingleUpdateStatementContext.prototype.orderByClause = function() {
    return this.getTypedRuleContext(OrderByClauseContext,0);
};

SingleUpdateStatementContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

SingleUpdateStatementContext.prototype.LOW_PRIORITY = function() {
    return this.getToken(MySQLParser.LOW_PRIORITY, 0);
};

SingleUpdateStatementContext.prototype.AS = function() {
    return this.getToken(MySQLParser.AS, 0);
};

SingleUpdateStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSingleUpdateStatement(this);
	}
};

SingleUpdateStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSingleUpdateStatement(this);
	}
};

SingleUpdateStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSingleUpdateStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SingleUpdateStatementContext = SingleUpdateStatementContext;

MySQLParser.prototype.singleUpdateStatement = function() {

    var localctx = new SingleUpdateStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, MySQLParser.RULE_singleUpdateStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3220;
        this.match(MySQLParser.UPDATE);
        this.state = 3222;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LOW_PRIORITY) {
            this.state = 3221;
            localctx.priority = this.match(MySQLParser.LOW_PRIORITY);
        }

        this.state = 3225;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IGNORE) {
            this.state = 3224;
            this.match(MySQLParser.IGNORE);
        }

        this.state = 3227;
        this.tableName();
        this.state = 3232;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.AS || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
            this.state = 3229;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.AS) {
                this.state = 3228;
                this.match(MySQLParser.AS);
            }

            this.state = 3231;
            this.uid();
        }

        this.state = 3234;
        this.match(MySQLParser.SET);
        this.state = 3235;
        this.updatedElement();
        this.state = 3240;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 3236;
            this.match(MySQLParser.COMMA);
            this.state = 3237;
            this.updatedElement();
            this.state = 3242;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3245;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WHERE) {
            this.state = 3243;
            this.match(MySQLParser.WHERE);
            this.state = 3244;
            this.expression(0);
        }

        this.state = 3248;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ORDER) {
            this.state = 3247;
            this.orderByClause();
        }

        this.state = 3251;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LIMIT) {
            this.state = 3250;
            this.limitClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MultipleUpdateStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_multipleUpdateStatement;
    this.priority = null; // Token
    return this;
}

MultipleUpdateStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultipleUpdateStatementContext.prototype.constructor = MultipleUpdateStatementContext;

MultipleUpdateStatementContext.prototype.UPDATE = function() {
    return this.getToken(MySQLParser.UPDATE, 0);
};

MultipleUpdateStatementContext.prototype.tableSources = function() {
    return this.getTypedRuleContext(TableSourcesContext,0);
};

MultipleUpdateStatementContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

MultipleUpdateStatementContext.prototype.updatedElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UpdatedElementContext);
    } else {
        return this.getTypedRuleContext(UpdatedElementContext,i);
    }
};

MultipleUpdateStatementContext.prototype.IGNORE = function() {
    return this.getToken(MySQLParser.IGNORE, 0);
};

MultipleUpdateStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


MultipleUpdateStatementContext.prototype.WHERE = function() {
    return this.getToken(MySQLParser.WHERE, 0);
};

MultipleUpdateStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

MultipleUpdateStatementContext.prototype.LOW_PRIORITY = function() {
    return this.getToken(MySQLParser.LOW_PRIORITY, 0);
};

MultipleUpdateStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterMultipleUpdateStatement(this);
	}
};

MultipleUpdateStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitMultipleUpdateStatement(this);
	}
};

MultipleUpdateStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitMultipleUpdateStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.MultipleUpdateStatementContext = MultipleUpdateStatementContext;

MySQLParser.prototype.multipleUpdateStatement = function() {

    var localctx = new MultipleUpdateStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, MySQLParser.RULE_multipleUpdateStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3253;
        this.match(MySQLParser.UPDATE);
        this.state = 3255;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LOW_PRIORITY) {
            this.state = 3254;
            localctx.priority = this.match(MySQLParser.LOW_PRIORITY);
        }

        this.state = 3258;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IGNORE) {
            this.state = 3257;
            this.match(MySQLParser.IGNORE);
        }

        this.state = 3260;
        this.tableSources();
        this.state = 3261;
        this.match(MySQLParser.SET);
        this.state = 3262;
        this.updatedElement();
        this.state = 3267;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 3263;
            this.match(MySQLParser.COMMA);
            this.state = 3264;
            this.updatedElement();
            this.state = 3269;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3272;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WHERE) {
            this.state = 3270;
            this.match(MySQLParser.WHERE);
            this.state = 3271;
            this.expression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderByClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_orderByClause;
    return this;
}

OrderByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderByClauseContext.prototype.constructor = OrderByClauseContext;

OrderByClauseContext.prototype.ORDER = function() {
    return this.getToken(MySQLParser.ORDER, 0);
};

OrderByClauseContext.prototype.BY = function() {
    return this.getToken(MySQLParser.BY, 0);
};

OrderByClauseContext.prototype.orderByExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderByExpressionContext);
    } else {
        return this.getTypedRuleContext(OrderByExpressionContext,i);
    }
};

OrderByClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


OrderByClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOrderByClause(this);
	}
};

OrderByClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOrderByClause(this);
	}
};

OrderByClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOrderByClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OrderByClauseContext = OrderByClauseContext;

MySQLParser.prototype.orderByClause = function() {

    var localctx = new OrderByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, MySQLParser.RULE_orderByClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3274;
        this.match(MySQLParser.ORDER);
        this.state = 3275;
        this.match(MySQLParser.BY);
        this.state = 3276;
        this.orderByExpression();
        this.state = 3281;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 3277;
            this.match(MySQLParser.COMMA);
            this.state = 3278;
            this.orderByExpression();
            this.state = 3283;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderByExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_orderByExpression;
    this.order = null; // Token
    return this;
}

OrderByExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderByExpressionContext.prototype.constructor = OrderByExpressionContext;

OrderByExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

OrderByExpressionContext.prototype.ASC = function() {
    return this.getToken(MySQLParser.ASC, 0);
};

OrderByExpressionContext.prototype.DESC = function() {
    return this.getToken(MySQLParser.DESC, 0);
};

OrderByExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOrderByExpression(this);
	}
};

OrderByExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOrderByExpression(this);
	}
};

OrderByExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOrderByExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OrderByExpressionContext = OrderByExpressionContext;

MySQLParser.prototype.orderByExpression = function() {

    var localctx = new OrderByExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, MySQLParser.RULE_orderByExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3284;
        this.expression(0);
        this.state = 3286;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,461,this._ctx);
        if(la_===1) {
            this.state = 3285;
            localctx.order = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ASC || _la===MySQLParser.DESC)) {
                localctx.order = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableSourcesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableSources;
    return this;
}

TableSourcesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableSourcesContext.prototype.constructor = TableSourcesContext;

TableSourcesContext.prototype.tableSource = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableSourceContext);
    } else {
        return this.getTypedRuleContext(TableSourceContext,i);
    }
};

TableSourcesContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


TableSourcesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableSources(this);
	}
};

TableSourcesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableSources(this);
	}
};

TableSourcesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableSources(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableSourcesContext = TableSourcesContext;

MySQLParser.prototype.tableSources = function() {

    var localctx = new TableSourcesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, MySQLParser.RULE_tableSources);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3288;
        this.tableSource();
        this.state = 3293;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 3289;
            this.match(MySQLParser.COMMA);
            this.state = 3290;
            this.tableSource();
            this.state = 3295;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableSourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableSource;
    return this;
}

TableSourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableSourceContext.prototype.constructor = TableSourceContext;


 
TableSourceContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TableSourceNestedContext(parser, ctx) {
	TableSourceContext.call(this, parser);
    TableSourceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableSourceNestedContext.prototype = Object.create(TableSourceContext.prototype);
TableSourceNestedContext.prototype.constructor = TableSourceNestedContext;

MySQLParser.TableSourceNestedContext = TableSourceNestedContext;

TableSourceNestedContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

TableSourceNestedContext.prototype.tableSourceItem = function() {
    return this.getTypedRuleContext(TableSourceItemContext,0);
};

TableSourceNestedContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

TableSourceNestedContext.prototype.joinPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinPartContext);
    } else {
        return this.getTypedRuleContext(JoinPartContext,i);
    }
};
TableSourceNestedContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableSourceNested(this);
	}
};

TableSourceNestedContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableSourceNested(this);
	}
};

TableSourceNestedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableSourceNested(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableSourceBaseContext(parser, ctx) {
	TableSourceContext.call(this, parser);
    TableSourceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableSourceBaseContext.prototype = Object.create(TableSourceContext.prototype);
TableSourceBaseContext.prototype.constructor = TableSourceBaseContext;

MySQLParser.TableSourceBaseContext = TableSourceBaseContext;

TableSourceBaseContext.prototype.tableSourceItem = function() {
    return this.getTypedRuleContext(TableSourceItemContext,0);
};

TableSourceBaseContext.prototype.joinPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinPartContext);
    } else {
        return this.getTypedRuleContext(JoinPartContext,i);
    }
};
TableSourceBaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableSourceBase(this);
	}
};

TableSourceBaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableSourceBase(this);
	}
};

TableSourceBaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableSourceBase(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.TableSourceContext = TableSourceContext;

MySQLParser.prototype.tableSource = function() {

    var localctx = new TableSourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, MySQLParser.RULE_tableSource);
    var _la = 0; // Token type
    try {
        this.state = 3313;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,465,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TableSourceBaseContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 3296;
            this.tableSourceItem();
            this.state = 3300;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,463,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 3297;
                    this.joinPart(); 
                }
                this.state = 3302;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,463,this._ctx);
            }

            break;

        case 2:
            localctx = new TableSourceNestedContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 3303;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3304;
            this.tableSourceItem();
            this.state = 3308;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.CROSS || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (MySQLParser.INNER - 74)) | (1 << (MySQLParser.JOIN - 74)) | (1 << (MySQLParser.LEFT - 74)) | (1 << (MySQLParser.NATURAL - 74)))) !== 0) || _la===MySQLParser.RIGHT || _la===MySQLParser.STRAIGHT_JOIN) {
                this.state = 3305;
                this.joinPart();
                this.state = 3310;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3311;
            this.match(MySQLParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableSourceItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableSourceItem;
    return this;
}

TableSourceItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableSourceItemContext.prototype.constructor = TableSourceItemContext;


 
TableSourceItemContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SubqueryTableItemContext(parser, ctx) {
	TableSourceItemContext.call(this, parser);
    this.parenthesisSubquery = null; // SelectStatementContext;
    this.alias = null; // UidContext;
    TableSourceItemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryTableItemContext.prototype = Object.create(TableSourceItemContext.prototype);
SubqueryTableItemContext.prototype.constructor = SubqueryTableItemContext;

MySQLParser.SubqueryTableItemContext = SubqueryTableItemContext;

SubqueryTableItemContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

SubqueryTableItemContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

SubqueryTableItemContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

SubqueryTableItemContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

SubqueryTableItemContext.prototype.AS = function() {
    return this.getToken(MySQLParser.AS, 0);
};
SubqueryTableItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSubqueryTableItem(this);
	}
};

SubqueryTableItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSubqueryTableItem(this);
	}
};

SubqueryTableItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSubqueryTableItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AtomTableItemContext(parser, ctx) {
	TableSourceItemContext.call(this, parser);
    this.alias = null; // UidContext;
    TableSourceItemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtomTableItemContext.prototype = Object.create(TableSourceItemContext.prototype);
AtomTableItemContext.prototype.constructor = AtomTableItemContext;

MySQLParser.AtomTableItemContext = AtomTableItemContext;

AtomTableItemContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

AtomTableItemContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

AtomTableItemContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

AtomTableItemContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

AtomTableItemContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

AtomTableItemContext.prototype.indexHint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexHintContext);
    } else {
        return this.getTypedRuleContext(IndexHintContext,i);
    }
};

AtomTableItemContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AtomTableItemContext.prototype.AS = function() {
    return this.getToken(MySQLParser.AS, 0);
};

AtomTableItemContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

AtomTableItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAtomTableItem(this);
	}
};

AtomTableItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAtomTableItem(this);
	}
};

AtomTableItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAtomTableItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableSourcesItemContext(parser, ctx) {
	TableSourceItemContext.call(this, parser);
    TableSourceItemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableSourcesItemContext.prototype = Object.create(TableSourceItemContext.prototype);
TableSourcesItemContext.prototype.constructor = TableSourcesItemContext;

MySQLParser.TableSourcesItemContext = TableSourcesItemContext;

TableSourcesItemContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

TableSourcesItemContext.prototype.tableSources = function() {
    return this.getTypedRuleContext(TableSourcesContext,0);
};

TableSourcesItemContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};
TableSourcesItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableSourcesItem(this);
	}
};

TableSourcesItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableSourcesItem(this);
	}
};

TableSourcesItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableSourcesItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.TableSourceItemContext = TableSourceItemContext;

MySQLParser.prototype.tableSourceItem = function() {

    var localctx = new TableSourceItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, MySQLParser.RULE_tableSourceItem);
    var _la = 0; // Token type
    try {
        this.state = 3355;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,473,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AtomTableItemContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 3315;
            this.tableName();
            this.state = 3321;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.PARTITION) {
                this.state = 3316;
                this.match(MySQLParser.PARTITION);
                this.state = 3317;
                this.match(MySQLParser.LR_BRACKET);
                this.state = 3318;
                this.uidList();
                this.state = 3319;
                this.match(MySQLParser.RR_BRACKET);
            }

            this.state = 3327;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,468,this._ctx);
            if(la_===1) {
                this.state = 3324;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.AS) {
                    this.state = 3323;
                    this.match(MySQLParser.AS);
                }

                this.state = 3326;
                localctx.alias = this.uid();

            }
            this.state = 3337;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,470,this._ctx);
            if(la_===1) {
                this.state = 3329;
                this.indexHint();
                this.state = 3334;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,469,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 3330;
                        this.match(MySQLParser.COMMA);
                        this.state = 3331;
                        this.indexHint(); 
                    }
                    this.state = 3336;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,469,this._ctx);
                }


            }
            break;

        case 2:
            localctx = new SubqueryTableItemContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 3344;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,471,this._ctx);
            switch(la_) {
            case 1:
                this.state = 3339;
                this.selectStatement();
                break;

            case 2:
                this.state = 3340;
                this.match(MySQLParser.LR_BRACKET);
                this.state = 3341;
                localctx.parenthesisSubquery = this.selectStatement();
                this.state = 3342;
                this.match(MySQLParser.RR_BRACKET);
                break;

            }
            this.state = 3347;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.AS) {
                this.state = 3346;
                this.match(MySQLParser.AS);
            }

            this.state = 3349;
            localctx.alias = this.uid();
            break;

        case 3:
            localctx = new TableSourcesItemContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 3351;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3352;
            this.tableSources();
            this.state = 3353;
            this.match(MySQLParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexHintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexHint;
    this.indexHintAction = null; // Token
    this.keyFormat = null; // Token
    return this;
}

IndexHintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexHintContext.prototype.constructor = IndexHintContext;

IndexHintContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

IndexHintContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

IndexHintContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

IndexHintContext.prototype.USE = function() {
    return this.getToken(MySQLParser.USE, 0);
};

IndexHintContext.prototype.IGNORE = function() {
    return this.getToken(MySQLParser.IGNORE, 0);
};

IndexHintContext.prototype.FORCE = function() {
    return this.getToken(MySQLParser.FORCE, 0);
};

IndexHintContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

IndexHintContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};

IndexHintContext.prototype.FOR = function() {
    return this.getToken(MySQLParser.FOR, 0);
};

IndexHintContext.prototype.indexHintType = function() {
    return this.getTypedRuleContext(IndexHintTypeContext,0);
};

IndexHintContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexHint(this);
	}
};

IndexHintContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexHint(this);
	}
};

IndexHintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexHint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexHintContext = IndexHintContext;

MySQLParser.prototype.indexHint = function() {

    var localctx = new IndexHintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, MySQLParser.RULE_indexHint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3357;
        localctx.indexHintAction = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.FORCE || _la===MySQLParser.IGNORE || _la===MySQLParser.USE)) {
            localctx.indexHintAction = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3358;
        localctx.keyFormat = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.INDEX || _la===MySQLParser.KEY)) {
            localctx.keyFormat = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3361;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.FOR) {
            this.state = 3359;
            this.match(MySQLParser.FOR);
            this.state = 3360;
            this.indexHintType();
        }

        this.state = 3363;
        this.match(MySQLParser.LR_BRACKET);
        this.state = 3364;
        this.uidList();
        this.state = 3365;
        this.match(MySQLParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexHintTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexHintType;
    return this;
}

IndexHintTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexHintTypeContext.prototype.constructor = IndexHintTypeContext;

IndexHintTypeContext.prototype.JOIN = function() {
    return this.getToken(MySQLParser.JOIN, 0);
};

IndexHintTypeContext.prototype.ORDER = function() {
    return this.getToken(MySQLParser.ORDER, 0);
};

IndexHintTypeContext.prototype.BY = function() {
    return this.getToken(MySQLParser.BY, 0);
};

IndexHintTypeContext.prototype.GROUP = function() {
    return this.getToken(MySQLParser.GROUP, 0);
};

IndexHintTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexHintType(this);
	}
};

IndexHintTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexHintType(this);
	}
};

IndexHintTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexHintType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexHintTypeContext = IndexHintTypeContext;

MySQLParser.prototype.indexHintType = function() {

    var localctx = new IndexHintTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, MySQLParser.RULE_indexHintType);
    try {
        this.state = 3372;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.JOIN:
            this.enterOuterAlt(localctx, 1);
            this.state = 3367;
            this.match(MySQLParser.JOIN);
            break;
        case MySQLParser.ORDER:
            this.enterOuterAlt(localctx, 2);
            this.state = 3368;
            this.match(MySQLParser.ORDER);
            this.state = 3369;
            this.match(MySQLParser.BY);
            break;
        case MySQLParser.GROUP:
            this.enterOuterAlt(localctx, 3);
            this.state = 3370;
            this.match(MySQLParser.GROUP);
            this.state = 3371;
            this.match(MySQLParser.BY);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_joinPart;
    return this;
}

JoinPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinPartContext.prototype.constructor = JoinPartContext;


 
JoinPartContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function InnerJoinContext(parser, ctx) {
	JoinPartContext.call(this, parser);
    JoinPartContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InnerJoinContext.prototype = Object.create(JoinPartContext.prototype);
InnerJoinContext.prototype.constructor = InnerJoinContext;

MySQLParser.InnerJoinContext = InnerJoinContext;

InnerJoinContext.prototype.JOIN = function() {
    return this.getToken(MySQLParser.JOIN, 0);
};

InnerJoinContext.prototype.tableSourceItem = function() {
    return this.getTypedRuleContext(TableSourceItemContext,0);
};

InnerJoinContext.prototype.ON = function() {
    return this.getToken(MySQLParser.ON, 0);
};

InnerJoinContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

InnerJoinContext.prototype.USING = function() {
    return this.getToken(MySQLParser.USING, 0);
};

InnerJoinContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

InnerJoinContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

InnerJoinContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

InnerJoinContext.prototype.INNER = function() {
    return this.getToken(MySQLParser.INNER, 0);
};

InnerJoinContext.prototype.CROSS = function() {
    return this.getToken(MySQLParser.CROSS, 0);
};
InnerJoinContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInnerJoin(this);
	}
};

InnerJoinContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInnerJoin(this);
	}
};

InnerJoinContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInnerJoin(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NaturalJoinContext(parser, ctx) {
	JoinPartContext.call(this, parser);
    JoinPartContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NaturalJoinContext.prototype = Object.create(JoinPartContext.prototype);
NaturalJoinContext.prototype.constructor = NaturalJoinContext;

MySQLParser.NaturalJoinContext = NaturalJoinContext;

NaturalJoinContext.prototype.NATURAL = function() {
    return this.getToken(MySQLParser.NATURAL, 0);
};

NaturalJoinContext.prototype.JOIN = function() {
    return this.getToken(MySQLParser.JOIN, 0);
};

NaturalJoinContext.prototype.tableSourceItem = function() {
    return this.getTypedRuleContext(TableSourceItemContext,0);
};

NaturalJoinContext.prototype.LEFT = function() {
    return this.getToken(MySQLParser.LEFT, 0);
};

NaturalJoinContext.prototype.RIGHT = function() {
    return this.getToken(MySQLParser.RIGHT, 0);
};

NaturalJoinContext.prototype.OUTER = function() {
    return this.getToken(MySQLParser.OUTER, 0);
};
NaturalJoinContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNaturalJoin(this);
	}
};

NaturalJoinContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNaturalJoin(this);
	}
};

NaturalJoinContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNaturalJoin(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function OuterJoinContext(parser, ctx) {
	JoinPartContext.call(this, parser);
    JoinPartContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OuterJoinContext.prototype = Object.create(JoinPartContext.prototype);
OuterJoinContext.prototype.constructor = OuterJoinContext;

MySQLParser.OuterJoinContext = OuterJoinContext;

OuterJoinContext.prototype.JOIN = function() {
    return this.getToken(MySQLParser.JOIN, 0);
};

OuterJoinContext.prototype.tableSourceItem = function() {
    return this.getTypedRuleContext(TableSourceItemContext,0);
};

OuterJoinContext.prototype.LEFT = function() {
    return this.getToken(MySQLParser.LEFT, 0);
};

OuterJoinContext.prototype.RIGHT = function() {
    return this.getToken(MySQLParser.RIGHT, 0);
};

OuterJoinContext.prototype.ON = function() {
    return this.getToken(MySQLParser.ON, 0);
};

OuterJoinContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

OuterJoinContext.prototype.USING = function() {
    return this.getToken(MySQLParser.USING, 0);
};

OuterJoinContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

OuterJoinContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

OuterJoinContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

OuterJoinContext.prototype.OUTER = function() {
    return this.getToken(MySQLParser.OUTER, 0);
};
OuterJoinContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOuterJoin(this);
	}
};

OuterJoinContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOuterJoin(this);
	}
};

OuterJoinContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOuterJoin(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function StraightJoinContext(parser, ctx) {
	JoinPartContext.call(this, parser);
    JoinPartContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StraightJoinContext.prototype = Object.create(JoinPartContext.prototype);
StraightJoinContext.prototype.constructor = StraightJoinContext;

MySQLParser.StraightJoinContext = StraightJoinContext;

StraightJoinContext.prototype.STRAIGHT_JOIN = function() {
    return this.getToken(MySQLParser.STRAIGHT_JOIN, 0);
};

StraightJoinContext.prototype.tableSourceItem = function() {
    return this.getTypedRuleContext(TableSourceItemContext,0);
};

StraightJoinContext.prototype.ON = function() {
    return this.getToken(MySQLParser.ON, 0);
};

StraightJoinContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
StraightJoinContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStraightJoin(this);
	}
};

StraightJoinContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStraightJoin(this);
	}
};

StraightJoinContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStraightJoin(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.JoinPartContext = JoinPartContext;

MySQLParser.prototype.joinPart = function() {

    var localctx = new JoinPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, MySQLParser.RULE_joinPart);
    var _la = 0; // Token type
    try {
        this.state = 3418;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CROSS:
        case MySQLParser.INNER:
        case MySQLParser.JOIN:
            localctx = new InnerJoinContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 3375;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CROSS || _la===MySQLParser.INNER) {
                this.state = 3374;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.CROSS || _la===MySQLParser.INNER)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 3377;
            this.match(MySQLParser.JOIN);
            this.state = 3378;
            this.tableSourceItem();
            this.state = 3386;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,477,this._ctx);
            if(la_===1) {
                this.state = 3379;
                this.match(MySQLParser.ON);
                this.state = 3380;
                this.expression(0);

            } else if(la_===2) {
                this.state = 3381;
                this.match(MySQLParser.USING);
                this.state = 3382;
                this.match(MySQLParser.LR_BRACKET);
                this.state = 3383;
                this.uidList();
                this.state = 3384;
                this.match(MySQLParser.RR_BRACKET);

            }
            break;
        case MySQLParser.STRAIGHT_JOIN:
            localctx = new StraightJoinContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 3388;
            this.match(MySQLParser.STRAIGHT_JOIN);
            this.state = 3389;
            this.tableSourceItem();
            this.state = 3392;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,478,this._ctx);
            if(la_===1) {
                this.state = 3390;
                this.match(MySQLParser.ON);
                this.state = 3391;
                this.expression(0);

            }
            break;
        case MySQLParser.LEFT:
        case MySQLParser.RIGHT:
            localctx = new OuterJoinContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 3394;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.LEFT || _la===MySQLParser.RIGHT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3396;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.OUTER) {
                this.state = 3395;
                this.match(MySQLParser.OUTER);
            }

            this.state = 3398;
            this.match(MySQLParser.JOIN);
            this.state = 3399;
            this.tableSourceItem();
            this.state = 3407;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.ON:
                this.state = 3400;
                this.match(MySQLParser.ON);
                this.state = 3401;
                this.expression(0);
                break;
            case MySQLParser.USING:
                this.state = 3402;
                this.match(MySQLParser.USING);
                this.state = 3403;
                this.match(MySQLParser.LR_BRACKET);
                this.state = 3404;
                this.uidList();
                this.state = 3405;
                this.match(MySQLParser.RR_BRACKET);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case MySQLParser.NATURAL:
            localctx = new NaturalJoinContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 3409;
            this.match(MySQLParser.NATURAL);
            this.state = 3414;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LEFT || _la===MySQLParser.RIGHT) {
                this.state = 3410;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.LEFT || _la===MySQLParser.RIGHT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3412;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.OUTER) {
                    this.state = 3411;
                    this.match(MySQLParser.OUTER);
                }

            }

            this.state = 3416;
            this.match(MySQLParser.JOIN);
            this.state = 3417;
            this.tableSourceItem();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_queryExpression;
    return this;
}

QueryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryExpressionContext.prototype.constructor = QueryExpressionContext;

QueryExpressionContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

QueryExpressionContext.prototype.querySpecification = function() {
    return this.getTypedRuleContext(QuerySpecificationContext,0);
};

QueryExpressionContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

QueryExpressionContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

QueryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterQueryExpression(this);
	}
};

QueryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitQueryExpression(this);
	}
};

QueryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitQueryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.QueryExpressionContext = QueryExpressionContext;

MySQLParser.prototype.queryExpression = function() {

    var localctx = new QueryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, MySQLParser.RULE_queryExpression);
    try {
        this.state = 3428;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3420;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3421;
            this.querySpecification();
            this.state = 3422;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3424;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3425;
            this.queryExpression();
            this.state = 3426;
            this.match(MySQLParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryExpressionNointoContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_queryExpressionNointo;
    return this;
}

QueryExpressionNointoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryExpressionNointoContext.prototype.constructor = QueryExpressionNointoContext;

QueryExpressionNointoContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

QueryExpressionNointoContext.prototype.querySpecificationNointo = function() {
    return this.getTypedRuleContext(QuerySpecificationNointoContext,0);
};

QueryExpressionNointoContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

QueryExpressionNointoContext.prototype.queryExpressionNointo = function() {
    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
};

QueryExpressionNointoContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterQueryExpressionNointo(this);
	}
};

QueryExpressionNointoContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitQueryExpressionNointo(this);
	}
};

QueryExpressionNointoContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitQueryExpressionNointo(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.QueryExpressionNointoContext = QueryExpressionNointoContext;

MySQLParser.prototype.queryExpressionNointo = function() {

    var localctx = new QueryExpressionNointoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, MySQLParser.RULE_queryExpressionNointo);
    try {
        this.state = 3438;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,485,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3430;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3431;
            this.querySpecificationNointo();
            this.state = 3432;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3434;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3435;
            this.queryExpressionNointo();
            this.state = 3436;
            this.match(MySQLParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuerySpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_querySpecification;
    return this;
}

QuerySpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuerySpecificationContext.prototype.constructor = QuerySpecificationContext;

QuerySpecificationContext.prototype.SELECT = function() {
    return this.getToken(MySQLParser.SELECT, 0);
};

QuerySpecificationContext.prototype.selectElements = function() {
    return this.getTypedRuleContext(SelectElementsContext,0);
};

QuerySpecificationContext.prototype.selectSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectSpecContext);
    } else {
        return this.getTypedRuleContext(SelectSpecContext,i);
    }
};

QuerySpecificationContext.prototype.selectIntoExpression = function() {
    return this.getTypedRuleContext(SelectIntoExpressionContext,0);
};

QuerySpecificationContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

QuerySpecificationContext.prototype.orderByClause = function() {
    return this.getTypedRuleContext(OrderByClauseContext,0);
};

QuerySpecificationContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

QuerySpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterQuerySpecification(this);
	}
};

QuerySpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitQuerySpecification(this);
	}
};

QuerySpecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitQuerySpecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.QuerySpecificationContext = QuerySpecificationContext;

MySQLParser.prototype.querySpecification = function() {

    var localctx = new QuerySpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, MySQLParser.RULE_querySpecification);
    var _la = 0; // Token type
    try {
        this.state = 3480;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,496,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3440;
            this.match(MySQLParser.SELECT);
            this.state = 3444;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,486,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 3441;
                    this.selectSpec(); 
                }
                this.state = 3446;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,486,this._ctx);
            }

            this.state = 3447;
            this.selectElements();
            this.state = 3449;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.INTO) {
                this.state = 3448;
                this.selectIntoExpression();
            }

            this.state = 3452;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FROM) {
                this.state = 3451;
                this.fromClause();
            }

            this.state = 3455;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,489,this._ctx);
            if(la_===1) {
                this.state = 3454;
                this.orderByClause();

            }
            this.state = 3458;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,490,this._ctx);
            if(la_===1) {
                this.state = 3457;
                this.limitClause();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3460;
            this.match(MySQLParser.SELECT);
            this.state = 3464;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,491,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 3461;
                    this.selectSpec(); 
                }
                this.state = 3466;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,491,this._ctx);
            }

            this.state = 3467;
            this.selectElements();
            this.state = 3469;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FROM) {
                this.state = 3468;
                this.fromClause();
            }

            this.state = 3472;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,493,this._ctx);
            if(la_===1) {
                this.state = 3471;
                this.orderByClause();

            }
            this.state = 3475;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,494,this._ctx);
            if(la_===1) {
                this.state = 3474;
                this.limitClause();

            }
            this.state = 3478;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.INTO) {
                this.state = 3477;
                this.selectIntoExpression();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuerySpecificationNointoContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_querySpecificationNointo;
    return this;
}

QuerySpecificationNointoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuerySpecificationNointoContext.prototype.constructor = QuerySpecificationNointoContext;

QuerySpecificationNointoContext.prototype.SELECT = function() {
    return this.getToken(MySQLParser.SELECT, 0);
};

QuerySpecificationNointoContext.prototype.selectElements = function() {
    return this.getTypedRuleContext(SelectElementsContext,0);
};

QuerySpecificationNointoContext.prototype.selectSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectSpecContext);
    } else {
        return this.getTypedRuleContext(SelectSpecContext,i);
    }
};

QuerySpecificationNointoContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

QuerySpecificationNointoContext.prototype.orderByClause = function() {
    return this.getTypedRuleContext(OrderByClauseContext,0);
};

QuerySpecificationNointoContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

QuerySpecificationNointoContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterQuerySpecificationNointo(this);
	}
};

QuerySpecificationNointoContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitQuerySpecificationNointo(this);
	}
};

QuerySpecificationNointoContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitQuerySpecificationNointo(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.QuerySpecificationNointoContext = QuerySpecificationNointoContext;

MySQLParser.prototype.querySpecificationNointo = function() {

    var localctx = new QuerySpecificationNointoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, MySQLParser.RULE_querySpecificationNointo);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3482;
        this.match(MySQLParser.SELECT);
        this.state = 3486;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,497,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3483;
                this.selectSpec(); 
            }
            this.state = 3488;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,497,this._ctx);
        }

        this.state = 3489;
        this.selectElements();
        this.state = 3491;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.FROM) {
            this.state = 3490;
            this.fromClause();
        }

        this.state = 3494;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,499,this._ctx);
        if(la_===1) {
            this.state = 3493;
            this.orderByClause();

        }
        this.state = 3497;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,500,this._ctx);
        if(la_===1) {
            this.state = 3496;
            this.limitClause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnionParenthesisContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_unionParenthesis;
    this.unionType = null; // Token
    return this;
}

UnionParenthesisContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnionParenthesisContext.prototype.constructor = UnionParenthesisContext;

UnionParenthesisContext.prototype.UNION = function() {
    return this.getToken(MySQLParser.UNION, 0);
};

UnionParenthesisContext.prototype.queryExpressionNointo = function() {
    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
};

UnionParenthesisContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};

UnionParenthesisContext.prototype.DISTINCT = function() {
    return this.getToken(MySQLParser.DISTINCT, 0);
};

UnionParenthesisContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUnionParenthesis(this);
	}
};

UnionParenthesisContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUnionParenthesis(this);
	}
};

UnionParenthesisContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUnionParenthesis(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UnionParenthesisContext = UnionParenthesisContext;

MySQLParser.prototype.unionParenthesis = function() {

    var localctx = new UnionParenthesisContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, MySQLParser.RULE_unionParenthesis);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3499;
        this.match(MySQLParser.UNION);
        this.state = 3501;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ALL || _la===MySQLParser.DISTINCT) {
            this.state = 3500;
            localctx.unionType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ALL || _la===MySQLParser.DISTINCT)) {
                localctx.unionType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 3503;
        this.queryExpressionNointo();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_unionStatement;
    this.unionType = null; // Token
    return this;
}

UnionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnionStatementContext.prototype.constructor = UnionStatementContext;

UnionStatementContext.prototype.UNION = function() {
    return this.getToken(MySQLParser.UNION, 0);
};

UnionStatementContext.prototype.querySpecificationNointo = function() {
    return this.getTypedRuleContext(QuerySpecificationNointoContext,0);
};

UnionStatementContext.prototype.queryExpressionNointo = function() {
    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
};

UnionStatementContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};

UnionStatementContext.prototype.DISTINCT = function() {
    return this.getToken(MySQLParser.DISTINCT, 0);
};

UnionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUnionStatement(this);
	}
};

UnionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUnionStatement(this);
	}
};

UnionStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUnionStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UnionStatementContext = UnionStatementContext;

MySQLParser.prototype.unionStatement = function() {

    var localctx = new UnionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, MySQLParser.RULE_unionStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3505;
        this.match(MySQLParser.UNION);
        this.state = 3507;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ALL || _la===MySQLParser.DISTINCT) {
            this.state = 3506;
            localctx.unionType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ALL || _la===MySQLParser.DISTINCT)) {
                localctx.unionType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 3511;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.SELECT:
            this.state = 3509;
            this.querySpecificationNointo();
            break;
        case MySQLParser.LR_BRACKET:
            this.state = 3510;
            this.queryExpressionNointo();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_selectSpec;
    return this;
}

SelectSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectSpecContext.prototype.constructor = SelectSpecContext;

SelectSpecContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};

SelectSpecContext.prototype.DISTINCT = function() {
    return this.getToken(MySQLParser.DISTINCT, 0);
};

SelectSpecContext.prototype.DISTINCTROW = function() {
    return this.getToken(MySQLParser.DISTINCTROW, 0);
};

SelectSpecContext.prototype.HIGH_PRIORITY = function() {
    return this.getToken(MySQLParser.HIGH_PRIORITY, 0);
};

SelectSpecContext.prototype.STRAIGHT_JOIN = function() {
    return this.getToken(MySQLParser.STRAIGHT_JOIN, 0);
};

SelectSpecContext.prototype.SQL_SMALL_RESULT = function() {
    return this.getToken(MySQLParser.SQL_SMALL_RESULT, 0);
};

SelectSpecContext.prototype.SQL_BIG_RESULT = function() {
    return this.getToken(MySQLParser.SQL_BIG_RESULT, 0);
};

SelectSpecContext.prototype.SQL_BUFFER_RESULT = function() {
    return this.getToken(MySQLParser.SQL_BUFFER_RESULT, 0);
};

SelectSpecContext.prototype.SQL_CACHE = function() {
    return this.getToken(MySQLParser.SQL_CACHE, 0);
};

SelectSpecContext.prototype.SQL_NO_CACHE = function() {
    return this.getToken(MySQLParser.SQL_NO_CACHE, 0);
};

SelectSpecContext.prototype.SQL_CALC_FOUND_ROWS = function() {
    return this.getToken(MySQLParser.SQL_CALC_FOUND_ROWS, 0);
};

SelectSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectSpec(this);
	}
};

SelectSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectSpec(this);
	}
};

SelectSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SelectSpecContext = SelectSpecContext;

MySQLParser.prototype.selectSpec = function() {

    var localctx = new SelectSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, MySQLParser.RULE_selectSpec);
    var _la = 0; // Token type
    try {
        this.state = 3521;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ALL:
        case MySQLParser.DISTINCT:
        case MySQLParser.DISTINCTROW:
            this.enterOuterAlt(localctx, 1);
            this.state = 3513;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ALL || _la===MySQLParser.DISTINCT || _la===MySQLParser.DISTINCTROW)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case MySQLParser.HIGH_PRIORITY:
            this.enterOuterAlt(localctx, 2);
            this.state = 3514;
            this.match(MySQLParser.HIGH_PRIORITY);
            break;
        case MySQLParser.STRAIGHT_JOIN:
            this.enterOuterAlt(localctx, 3);
            this.state = 3515;
            this.match(MySQLParser.STRAIGHT_JOIN);
            break;
        case MySQLParser.SQL_SMALL_RESULT:
            this.enterOuterAlt(localctx, 4);
            this.state = 3516;
            this.match(MySQLParser.SQL_SMALL_RESULT);
            break;
        case MySQLParser.SQL_BIG_RESULT:
            this.enterOuterAlt(localctx, 5);
            this.state = 3517;
            this.match(MySQLParser.SQL_BIG_RESULT);
            break;
        case MySQLParser.SQL_BUFFER_RESULT:
            this.enterOuterAlt(localctx, 6);
            this.state = 3518;
            this.match(MySQLParser.SQL_BUFFER_RESULT);
            break;
        case MySQLParser.SQL_CACHE:
        case MySQLParser.SQL_NO_CACHE:
            this.enterOuterAlt(localctx, 7);
            this.state = 3519;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.SQL_CACHE || _la===MySQLParser.SQL_NO_CACHE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case MySQLParser.SQL_CALC_FOUND_ROWS:
            this.enterOuterAlt(localctx, 8);
            this.state = 3520;
            this.match(MySQLParser.SQL_CALC_FOUND_ROWS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_selectElements;
    this.star = null; // Token
    return this;
}

SelectElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectElementsContext.prototype.constructor = SelectElementsContext;

SelectElementsContext.prototype.selectElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectElementContext);
    } else {
        return this.getTypedRuleContext(SelectElementContext,i);
    }
};

SelectElementsContext.prototype.STAR = function() {
    return this.getToken(MySQLParser.STAR, 0);
};

SelectElementsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


SelectElementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectElements(this);
	}
};

SelectElementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectElements(this);
	}
};

SelectElementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectElements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SelectElementsContext = SelectElementsContext;

MySQLParser.prototype.selectElements = function() {

    var localctx = new SelectElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, MySQLParser.RULE_selectElements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3525;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.STAR:
            this.state = 3523;
            localctx.star = this.match(MySQLParser.STAR);
            break;
        case MySQLParser.CASE:
        case MySQLParser.CAST:
        case MySQLParser.CONVERT:
        case MySQLParser.CURRENT:
        case MySQLParser.CURRENT_USER:
        case MySQLParser.DATABASE:
        case MySQLParser.DIAGNOSTICS:
        case MySQLParser.EXISTS:
        case MySQLParser.FALSE:
        case MySQLParser.IF:
        case MySQLParser.INSERT:
        case MySQLParser.INTERVAL:
        case MySQLParser.LEFT:
        case MySQLParser.NOT:
        case MySQLParser.NULL_LITERAL:
        case MySQLParser.NUMBER:
        case MySQLParser.REPLACE:
        case MySQLParser.RIGHT:
        case MySQLParser.STACKED:
        case MySQLParser.TRUE:
        case MySQLParser.VALUES:
        case MySQLParser.DATE:
        case MySQLParser.TIME:
        case MySQLParser.TIMESTAMP:
        case MySQLParser.DATETIME:
        case MySQLParser.YEAR:
        case MySQLParser.CHAR:
        case MySQLParser.BINARY:
        case MySQLParser.TEXT:
        case MySQLParser.ENUM:
        case MySQLParser.SERIAL:
        case MySQLParser.JSON_VALID:
        case MySQLParser.JSON_SCHEMA_VALID:
        case MySQLParser.AVG:
        case MySQLParser.BIT_AND:
        case MySQLParser.BIT_OR:
        case MySQLParser.BIT_XOR:
        case MySQLParser.COUNT:
        case MySQLParser.GROUP_CONCAT:
        case MySQLParser.MAX:
        case MySQLParser.MIN:
        case MySQLParser.STD:
        case MySQLParser.STDDEV:
        case MySQLParser.STDDEV_POP:
        case MySQLParser.STDDEV_SAMP:
        case MySQLParser.SUM:
        case MySQLParser.VAR_POP:
        case MySQLParser.VAR_SAMP:
        case MySQLParser.VARIANCE:
        case MySQLParser.CURRENT_DATE:
        case MySQLParser.CURRENT_TIME:
        case MySQLParser.CURRENT_TIMESTAMP:
        case MySQLParser.LOCALTIME:
        case MySQLParser.CURDATE:
        case MySQLParser.CURTIME:
        case MySQLParser.DATE_ADD:
        case MySQLParser.DATE_SUB:
        case MySQLParser.EXTRACT:
        case MySQLParser.LOCALTIMESTAMP:
        case MySQLParser.NOW:
        case MySQLParser.POSITION:
        case MySQLParser.SUBSTR:
        case MySQLParser.SUBSTRING:
        case MySQLParser.SYSDATE:
        case MySQLParser.TRIM:
        case MySQLParser.UTC_DATE:
        case MySQLParser.UTC_TIME:
        case MySQLParser.UTC_TIMESTAMP:
        case MySQLParser.ACCOUNT:
        case MySQLParser.ACTION:
        case MySQLParser.AFTER:
        case MySQLParser.AGGREGATE:
        case MySQLParser.ALGORITHM:
        case MySQLParser.ANY:
        case MySQLParser.AT:
        case MySQLParser.AUTHORS:
        case MySQLParser.AUTOCOMMIT:
        case MySQLParser.AUTOEXTEND_SIZE:
        case MySQLParser.AUTO_INCREMENT:
        case MySQLParser.AVG_ROW_LENGTH:
        case MySQLParser.BEGIN:
        case MySQLParser.BINLOG:
        case MySQLParser.BIT:
        case MySQLParser.BLOCK:
        case MySQLParser.BOOL:
        case MySQLParser.BOOLEAN:
        case MySQLParser.BTREE:
        case MySQLParser.CACHE:
        case MySQLParser.CASCADED:
        case MySQLParser.CHAIN:
        case MySQLParser.CHANGED:
        case MySQLParser.CHANNEL:
        case MySQLParser.CHECKSUM:
        case MySQLParser.PAGE_CHECKSUM:
        case MySQLParser.CIPHER:
        case MySQLParser.CLASS_ORIGIN:
        case MySQLParser.CLIENT:
        case MySQLParser.CLOSE:
        case MySQLParser.COALESCE:
        case MySQLParser.CODE:
        case MySQLParser.COLUMNS:
        case MySQLParser.COLUMN_FORMAT:
        case MySQLParser.COLUMN_NAME:
        case MySQLParser.COMMENT:
        case MySQLParser.COMMIT:
        case MySQLParser.COMPACT:
        case MySQLParser.COMPLETION:
        case MySQLParser.COMPRESSED:
        case MySQLParser.COMPRESSION:
        case MySQLParser.CONCURRENT:
        case MySQLParser.CONNECTION:
        case MySQLParser.CONSISTENT:
        case MySQLParser.CONSTRAINT_CATALOG:
        case MySQLParser.CONSTRAINT_SCHEMA:
        case MySQLParser.CONSTRAINT_NAME:
        case MySQLParser.CONTAINS:
        case MySQLParser.CONTEXT:
        case MySQLParser.CONTRIBUTORS:
        case MySQLParser.COPY:
        case MySQLParser.CPU:
        case MySQLParser.CURSOR_NAME:
        case MySQLParser.DATA:
        case MySQLParser.DATAFILE:
        case MySQLParser.DEALLOCATE:
        case MySQLParser.DEFAULT_AUTH:
        case MySQLParser.DEFINER:
        case MySQLParser.DELAY_KEY_WRITE:
        case MySQLParser.DES_KEY_FILE:
        case MySQLParser.DIRECTORY:
        case MySQLParser.DISABLE:
        case MySQLParser.DISCARD:
        case MySQLParser.DISK:
        case MySQLParser.DO:
        case MySQLParser.DUMPFILE:
        case MySQLParser.DUPLICATE:
        case MySQLParser.DYNAMIC:
        case MySQLParser.ENABLE:
        case MySQLParser.ENCRYPTION:
        case MySQLParser.END:
        case MySQLParser.ENDS:
        case MySQLParser.ENGINE:
        case MySQLParser.ENGINES:
        case MySQLParser.ERROR:
        case MySQLParser.ERRORS:
        case MySQLParser.ESCAPE:
        case MySQLParser.EVEN:
        case MySQLParser.EVENT:
        case MySQLParser.EVENTS:
        case MySQLParser.EVERY:
        case MySQLParser.EXCHANGE:
        case MySQLParser.EXCLUSIVE:
        case MySQLParser.EXPIRE:
        case MySQLParser.EXPORT:
        case MySQLParser.EXTENDED:
        case MySQLParser.EXTENT_SIZE:
        case MySQLParser.FAST:
        case MySQLParser.FAULTS:
        case MySQLParser.FIELDS:
        case MySQLParser.FILE_BLOCK_SIZE:
        case MySQLParser.FILTER:
        case MySQLParser.FIRST:
        case MySQLParser.FIXED:
        case MySQLParser.FLUSH:
        case MySQLParser.FOLLOWS:
        case MySQLParser.FOUND:
        case MySQLParser.FULL:
        case MySQLParser.FUNCTION:
        case MySQLParser.GENERAL:
        case MySQLParser.GLOBAL:
        case MySQLParser.GRANTS:
        case MySQLParser.GROUP_REPLICATION:
        case MySQLParser.HANDLER:
        case MySQLParser.HASH:
        case MySQLParser.HELP:
        case MySQLParser.HOST:
        case MySQLParser.HOSTS:
        case MySQLParser.IDENTIFIED:
        case MySQLParser.IGNORE_SERVER_IDS:
        case MySQLParser.IMPORT:
        case MySQLParser.INDEXES:
        case MySQLParser.INITIAL_SIZE:
        case MySQLParser.INPLACE:
        case MySQLParser.INSERT_METHOD:
        case MySQLParser.INSTALL:
        case MySQLParser.INSTANCE:
        case MySQLParser.INVISIBLE:
        case MySQLParser.INVOKER:
        case MySQLParser.IO:
        case MySQLParser.IO_THREAD:
        case MySQLParser.IPC:
        case MySQLParser.ISOLATION:
        case MySQLParser.ISSUER:
        case MySQLParser.JSON:
        case MySQLParser.KEY_BLOCK_SIZE:
        case MySQLParser.LANGUAGE:
        case MySQLParser.LAST:
        case MySQLParser.LEAVES:
        case MySQLParser.LESS:
        case MySQLParser.LEVEL:
        case MySQLParser.LIST:
        case MySQLParser.LOCAL:
        case MySQLParser.LOGFILE:
        case MySQLParser.LOGS:
        case MySQLParser.MASTER:
        case MySQLParser.MASTER_AUTO_POSITION:
        case MySQLParser.MASTER_CONNECT_RETRY:
        case MySQLParser.MASTER_DELAY:
        case MySQLParser.MASTER_HEARTBEAT_PERIOD:
        case MySQLParser.MASTER_HOST:
        case MySQLParser.MASTER_LOG_FILE:
        case MySQLParser.MASTER_LOG_POS:
        case MySQLParser.MASTER_PASSWORD:
        case MySQLParser.MASTER_PORT:
        case MySQLParser.MASTER_RETRY_COUNT:
        case MySQLParser.MASTER_SSL:
        case MySQLParser.MASTER_SSL_CA:
        case MySQLParser.MASTER_SSL_CAPATH:
        case MySQLParser.MASTER_SSL_CERT:
        case MySQLParser.MASTER_SSL_CIPHER:
        case MySQLParser.MASTER_SSL_CRL:
        case MySQLParser.MASTER_SSL_CRLPATH:
        case MySQLParser.MASTER_SSL_KEY:
        case MySQLParser.MASTER_TLS_VERSION:
        case MySQLParser.MASTER_USER:
        case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser.MAX_QUERIES_PER_HOUR:
        case MySQLParser.MAX_ROWS:
        case MySQLParser.MAX_SIZE:
        case MySQLParser.MAX_UPDATES_PER_HOUR:
        case MySQLParser.MAX_USER_CONNECTIONS:
        case MySQLParser.MEDIUM:
        case MySQLParser.MERGE:
        case MySQLParser.MESSAGE_TEXT:
        case MySQLParser.MID:
        case MySQLParser.MIGRATE:
        case MySQLParser.MIN_ROWS:
        case MySQLParser.MODE:
        case MySQLParser.MODIFY:
        case MySQLParser.MUTEX:
        case MySQLParser.MYSQL:
        case MySQLParser.MYSQL_ERRNO:
        case MySQLParser.NAME:
        case MySQLParser.NAMES:
        case MySQLParser.NCHAR:
        case MySQLParser.NEVER:
        case MySQLParser.NEXT:
        case MySQLParser.NO:
        case MySQLParser.NODEGROUP:
        case MySQLParser.NONE:
        case MySQLParser.OFFLINE:
        case MySQLParser.OFFSET:
        case MySQLParser.OJ:
        case MySQLParser.OLD_PASSWORD:
        case MySQLParser.ONE:
        case MySQLParser.ONLINE:
        case MySQLParser.ONLY:
        case MySQLParser.OPEN:
        case MySQLParser.OPTIMIZER_COSTS:
        case MySQLParser.OPTIONS:
        case MySQLParser.OWNER:
        case MySQLParser.PACK_KEYS:
        case MySQLParser.PAGE:
        case MySQLParser.PARSER:
        case MySQLParser.PARTIAL:
        case MySQLParser.PARTITIONING:
        case MySQLParser.PARTITIONS:
        case MySQLParser.PASSWORD:
        case MySQLParser.PHASE:
        case MySQLParser.PLUGIN:
        case MySQLParser.PLUGIN_DIR:
        case MySQLParser.PLUGINS:
        case MySQLParser.PORT:
        case MySQLParser.PRECEDES:
        case MySQLParser.PREPARE:
        case MySQLParser.PRESERVE:
        case MySQLParser.PREV:
        case MySQLParser.PROCESSLIST:
        case MySQLParser.PROFILE:
        case MySQLParser.PROFILES:
        case MySQLParser.PROXY:
        case MySQLParser.QUERY:
        case MySQLParser.QUICK:
        case MySQLParser.REBUILD:
        case MySQLParser.RECOVER:
        case MySQLParser.REDO_BUFFER_SIZE:
        case MySQLParser.REDUNDANT:
        case MySQLParser.RELAY:
        case MySQLParser.RELAY_LOG_FILE:
        case MySQLParser.RELAY_LOG_POS:
        case MySQLParser.RELAYLOG:
        case MySQLParser.REMOVE:
        case MySQLParser.REORGANIZE:
        case MySQLParser.REPAIR:
        case MySQLParser.REPLICATE_DO_DB:
        case MySQLParser.REPLICATE_DO_TABLE:
        case MySQLParser.REPLICATE_IGNORE_DB:
        case MySQLParser.REPLICATE_IGNORE_TABLE:
        case MySQLParser.REPLICATE_REWRITE_DB:
        case MySQLParser.REPLICATE_WILD_DO_TABLE:
        case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser.REPLICATION:
        case MySQLParser.RESET:
        case MySQLParser.RESUME:
        case MySQLParser.RETURNED_SQLSTATE:
        case MySQLParser.RETURNS:
        case MySQLParser.ROLE:
        case MySQLParser.ROLLBACK:
        case MySQLParser.ROLLUP:
        case MySQLParser.ROTATE:
        case MySQLParser.ROW:
        case MySQLParser.ROWS:
        case MySQLParser.ROW_FORMAT:
        case MySQLParser.SAVEPOINT:
        case MySQLParser.SCHEDULE:
        case MySQLParser.SECURITY:
        case MySQLParser.SERVER:
        case MySQLParser.SESSION:
        case MySQLParser.SHARE:
        case MySQLParser.SHARED:
        case MySQLParser.SIGNED:
        case MySQLParser.SIMPLE:
        case MySQLParser.SLAVE:
        case MySQLParser.SLOW:
        case MySQLParser.SNAPSHOT:
        case MySQLParser.SOCKET:
        case MySQLParser.SOME:
        case MySQLParser.SONAME:
        case MySQLParser.SOUNDS:
        case MySQLParser.SOURCE:
        case MySQLParser.SQL_AFTER_GTIDS:
        case MySQLParser.SQL_AFTER_MTS_GAPS:
        case MySQLParser.SQL_BEFORE_GTIDS:
        case MySQLParser.SQL_BUFFER_RESULT:
        case MySQLParser.SQL_CACHE:
        case MySQLParser.SQL_NO_CACHE:
        case MySQLParser.SQL_THREAD:
        case MySQLParser.START:
        case MySQLParser.STARTS:
        case MySQLParser.STATS_AUTO_RECALC:
        case MySQLParser.STATS_PERSISTENT:
        case MySQLParser.STATS_SAMPLE_PAGES:
        case MySQLParser.STATUS:
        case MySQLParser.STOP:
        case MySQLParser.STORAGE:
        case MySQLParser.STRING:
        case MySQLParser.SUBCLASS_ORIGIN:
        case MySQLParser.SUBJECT:
        case MySQLParser.SUBPARTITION:
        case MySQLParser.SUBPARTITIONS:
        case MySQLParser.SUSPEND:
        case MySQLParser.SWAPS:
        case MySQLParser.SWITCHES:
        case MySQLParser.TABLE_NAME:
        case MySQLParser.TABLESPACE:
        case MySQLParser.TEMPORARY:
        case MySQLParser.TEMPTABLE:
        case MySQLParser.THAN:
        case MySQLParser.TRADITIONAL:
        case MySQLParser.TRANSACTION:
        case MySQLParser.TRANSACTIONAL:
        case MySQLParser.TRIGGERS:
        case MySQLParser.TRUNCATE:
        case MySQLParser.UNDEFINED:
        case MySQLParser.UNDOFILE:
        case MySQLParser.UNDO_BUFFER_SIZE:
        case MySQLParser.UNINSTALL:
        case MySQLParser.UNKNOWN:
        case MySQLParser.UNTIL:
        case MySQLParser.UPGRADE:
        case MySQLParser.USER:
        case MySQLParser.USE_FRM:
        case MySQLParser.USER_RESOURCES:
        case MySQLParser.VALIDATION:
        case MySQLParser.VALUE:
        case MySQLParser.VARIABLES:
        case MySQLParser.VIEW:
        case MySQLParser.VISIBLE:
        case MySQLParser.WAIT:
        case MySQLParser.WARNINGS:
        case MySQLParser.WITHOUT:
        case MySQLParser.WORK:
        case MySQLParser.WRAPPER:
        case MySQLParser.X509:
        case MySQLParser.XA:
        case MySQLParser.XML:
        case MySQLParser.INTERNAL:
        case MySQLParser.QUARTER:
        case MySQLParser.MONTH:
        case MySQLParser.DAY:
        case MySQLParser.HOUR:
        case MySQLParser.MINUTE:
        case MySQLParser.WEEK:
        case MySQLParser.SECOND:
        case MySQLParser.MICROSECOND:
        case MySQLParser.TABLES:
        case MySQLParser.ROUTINE:
        case MySQLParser.EXECUTE:
        case MySQLParser.FILE:
        case MySQLParser.PROCESS:
        case MySQLParser.RELOAD:
        case MySQLParser.SHUTDOWN:
        case MySQLParser.SUPER:
        case MySQLParser.PRIVILEGES:
        case MySQLParser.AUDIT_ADMIN:
        case MySQLParser.BACKUP_ADMIN:
        case MySQLParser.BINLOG_ADMIN:
        case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
        case MySQLParser.CLONE_ADMIN:
        case MySQLParser.CONNECTION_ADMIN:
        case MySQLParser.ENCRYPTION_KEY_ADMIN:
        case MySQLParser.FIREWALL_ADMIN:
        case MySQLParser.FIREWALL_USER:
        case MySQLParser.GROUP_REPLICATION_ADMIN:
        case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
        case MySQLParser.NDB_STORED_USER:
        case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
        case MySQLParser.REPLICATION_APPLIER:
        case MySQLParser.REPLICATION_SLAVE_ADMIN:
        case MySQLParser.RESOURCE_GROUP_ADMIN:
        case MySQLParser.RESOURCE_GROUP_USER:
        case MySQLParser.ROLE_ADMIN:
        case MySQLParser.SESSION_VARIABLES_ADMIN:
        case MySQLParser.SET_USER_ID:
        case MySQLParser.SHOW_ROUTINE:
        case MySQLParser.SYSTEM_VARIABLES_ADMIN:
        case MySQLParser.TABLE_ENCRYPTION_ADMIN:
        case MySQLParser.VERSION_TOKEN_ADMIN:
        case MySQLParser.XA_RECOVER_ADMIN:
        case MySQLParser.ARMSCII8:
        case MySQLParser.ASCII:
        case MySQLParser.BIG5:
        case MySQLParser.CP1250:
        case MySQLParser.CP1251:
        case MySQLParser.CP1256:
        case MySQLParser.CP1257:
        case MySQLParser.CP850:
        case MySQLParser.CP852:
        case MySQLParser.CP866:
        case MySQLParser.CP932:
        case MySQLParser.DEC8:
        case MySQLParser.EUCJPMS:
        case MySQLParser.EUCKR:
        case MySQLParser.GB2312:
        case MySQLParser.GBK:
        case MySQLParser.GEOSTD8:
        case MySQLParser.GREEK:
        case MySQLParser.HEBREW:
        case MySQLParser.HP8:
        case MySQLParser.KEYBCS2:
        case MySQLParser.KOI8R:
        case MySQLParser.KOI8U:
        case MySQLParser.LATIN1:
        case MySQLParser.LATIN2:
        case MySQLParser.LATIN5:
        case MySQLParser.LATIN7:
        case MySQLParser.MACCE:
        case MySQLParser.MACROMAN:
        case MySQLParser.SJIS:
        case MySQLParser.SWE7:
        case MySQLParser.TIS620:
        case MySQLParser.UCS2:
        case MySQLParser.UJIS:
        case MySQLParser.UTF16:
        case MySQLParser.UTF16LE:
        case MySQLParser.UTF32:
        case MySQLParser.UTF8:
        case MySQLParser.UTF8MB3:
        case MySQLParser.UTF8MB4:
        case MySQLParser.ARCHIVE:
        case MySQLParser.BLACKHOLE:
        case MySQLParser.CSV:
        case MySQLParser.FEDERATED:
        case MySQLParser.INNODB:
        case MySQLParser.MEMORY:
        case MySQLParser.MRG_MYISAM:
        case MySQLParser.MYISAM:
        case MySQLParser.NDB:
        case MySQLParser.NDBCLUSTER:
        case MySQLParser.PERFORMANCE_SCHEMA:
        case MySQLParser.TOKUDB:
        case MySQLParser.REPEATABLE:
        case MySQLParser.COMMITTED:
        case MySQLParser.UNCOMMITTED:
        case MySQLParser.SERIALIZABLE:
        case MySQLParser.GEOMETRYCOLLECTION:
        case MySQLParser.LINESTRING:
        case MySQLParser.MULTILINESTRING:
        case MySQLParser.MULTIPOINT:
        case MySQLParser.MULTIPOLYGON:
        case MySQLParser.POINT:
        case MySQLParser.POLYGON:
        case MySQLParser.ABS:
        case MySQLParser.ACOS:
        case MySQLParser.ADDDATE:
        case MySQLParser.ADDTIME:
        case MySQLParser.AES_DECRYPT:
        case MySQLParser.AES_ENCRYPT:
        case MySQLParser.AREA:
        case MySQLParser.ASBINARY:
        case MySQLParser.ASIN:
        case MySQLParser.ASTEXT:
        case MySQLParser.ASWKB:
        case MySQLParser.ASWKT:
        case MySQLParser.ASYMMETRIC_DECRYPT:
        case MySQLParser.ASYMMETRIC_DERIVE:
        case MySQLParser.ASYMMETRIC_ENCRYPT:
        case MySQLParser.ASYMMETRIC_SIGN:
        case MySQLParser.ASYMMETRIC_VERIFY:
        case MySQLParser.ATAN:
        case MySQLParser.ATAN2:
        case MySQLParser.BENCHMARK:
        case MySQLParser.BIN:
        case MySQLParser.BIT_COUNT:
        case MySQLParser.BIT_LENGTH:
        case MySQLParser.BUFFER:
        case MySQLParser.CATALOG_NAME:
        case MySQLParser.CEIL:
        case MySQLParser.CEILING:
        case MySQLParser.CENTROID:
        case MySQLParser.CHARACTER_LENGTH:
        case MySQLParser.CHARSET:
        case MySQLParser.CHAR_LENGTH:
        case MySQLParser.COERCIBILITY:
        case MySQLParser.COLLATION:
        case MySQLParser.COMPRESS:
        case MySQLParser.CONCAT:
        case MySQLParser.CONCAT_WS:
        case MySQLParser.CONNECTION_ID:
        case MySQLParser.CONV:
        case MySQLParser.CONVERT_TZ:
        case MySQLParser.COS:
        case MySQLParser.COT:
        case MySQLParser.CRC32:
        case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser.CREATE_DH_PARAMETERS:
        case MySQLParser.CREATE_DIGEST:
        case MySQLParser.CROSSES:
        case MySQLParser.DATEDIFF:
        case MySQLParser.DATE_FORMAT:
        case MySQLParser.DAYNAME:
        case MySQLParser.DAYOFMONTH:
        case MySQLParser.DAYOFWEEK:
        case MySQLParser.DAYOFYEAR:
        case MySQLParser.DECODE:
        case MySQLParser.DEGREES:
        case MySQLParser.DES_DECRYPT:
        case MySQLParser.DES_ENCRYPT:
        case MySQLParser.DIMENSION:
        case MySQLParser.DISJOINT:
        case MySQLParser.ELT:
        case MySQLParser.ENCODE:
        case MySQLParser.ENCRYPT:
        case MySQLParser.ENDPOINT:
        case MySQLParser.ENVELOPE:
        case MySQLParser.EQUALS:
        case MySQLParser.EXP:
        case MySQLParser.EXPORT_SET:
        case MySQLParser.EXTERIORRING:
        case MySQLParser.EXTRACTVALUE:
        case MySQLParser.FIELD:
        case MySQLParser.FIND_IN_SET:
        case MySQLParser.FLOOR:
        case MySQLParser.FORMAT:
        case MySQLParser.FOUND_ROWS:
        case MySQLParser.FROM_BASE64:
        case MySQLParser.FROM_DAYS:
        case MySQLParser.FROM_UNIXTIME:
        case MySQLParser.GEOMCOLLFROMTEXT:
        case MySQLParser.GEOMCOLLFROMWKB:
        case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.GEOMETRYFROMTEXT:
        case MySQLParser.GEOMETRYFROMWKB:
        case MySQLParser.GEOMETRYN:
        case MySQLParser.GEOMETRYTYPE:
        case MySQLParser.GEOMFROMTEXT:
        case MySQLParser.GEOMFROMWKB:
        case MySQLParser.GET_FORMAT:
        case MySQLParser.GET_LOCK:
        case MySQLParser.GLENGTH:
        case MySQLParser.GREATEST:
        case MySQLParser.GTID_SUBSET:
        case MySQLParser.GTID_SUBTRACT:
        case MySQLParser.HEX:
        case MySQLParser.IFNULL:
        case MySQLParser.INET6_ATON:
        case MySQLParser.INET6_NTOA:
        case MySQLParser.INET_ATON:
        case MySQLParser.INET_NTOA:
        case MySQLParser.INSTR:
        case MySQLParser.INTERIORRINGN:
        case MySQLParser.INTERSECTS:
        case MySQLParser.ISCLOSED:
        case MySQLParser.ISEMPTY:
        case MySQLParser.ISNULL:
        case MySQLParser.ISSIMPLE:
        case MySQLParser.IS_FREE_LOCK:
        case MySQLParser.IS_IPV4:
        case MySQLParser.IS_IPV4_COMPAT:
        case MySQLParser.IS_IPV4_MAPPED:
        case MySQLParser.IS_IPV6:
        case MySQLParser.IS_USED_LOCK:
        case MySQLParser.LAST_INSERT_ID:
        case MySQLParser.LCASE:
        case MySQLParser.LEAST:
        case MySQLParser.LENGTH:
        case MySQLParser.LINEFROMTEXT:
        case MySQLParser.LINEFROMWKB:
        case MySQLParser.LINESTRINGFROMTEXT:
        case MySQLParser.LINESTRINGFROMWKB:
        case MySQLParser.LN:
        case MySQLParser.LOAD_FILE:
        case MySQLParser.LOCATE:
        case MySQLParser.LOG:
        case MySQLParser.LOG10:
        case MySQLParser.LOG2:
        case MySQLParser.LOWER:
        case MySQLParser.LPAD:
        case MySQLParser.LTRIM:
        case MySQLParser.MAKEDATE:
        case MySQLParser.MAKETIME:
        case MySQLParser.MAKE_SET:
        case MySQLParser.MASTER_POS_WAIT:
        case MySQLParser.MBRCONTAINS:
        case MySQLParser.MBRDISJOINT:
        case MySQLParser.MBREQUAL:
        case MySQLParser.MBRINTERSECTS:
        case MySQLParser.MBROVERLAPS:
        case MySQLParser.MBRTOUCHES:
        case MySQLParser.MBRWITHIN:
        case MySQLParser.MD5:
        case MySQLParser.MLINEFROMTEXT:
        case MySQLParser.MLINEFROMWKB:
        case MySQLParser.MONTHNAME:
        case MySQLParser.MPOINTFROMTEXT:
        case MySQLParser.MPOINTFROMWKB:
        case MySQLParser.MPOLYFROMTEXT:
        case MySQLParser.MPOLYFROMWKB:
        case MySQLParser.MULTILINESTRINGFROMTEXT:
        case MySQLParser.MULTILINESTRINGFROMWKB:
        case MySQLParser.MULTIPOINTFROMTEXT:
        case MySQLParser.MULTIPOINTFROMWKB:
        case MySQLParser.MULTIPOLYGONFROMTEXT:
        case MySQLParser.MULTIPOLYGONFROMWKB:
        case MySQLParser.NAME_CONST:
        case MySQLParser.NULLIF:
        case MySQLParser.NUMGEOMETRIES:
        case MySQLParser.NUMINTERIORRINGS:
        case MySQLParser.NUMPOINTS:
        case MySQLParser.OCT:
        case MySQLParser.OCTET_LENGTH:
        case MySQLParser.ORD:
        case MySQLParser.OVERLAPS:
        case MySQLParser.PERIOD_ADD:
        case MySQLParser.PERIOD_DIFF:
        case MySQLParser.PI:
        case MySQLParser.POINTFROMTEXT:
        case MySQLParser.POINTFROMWKB:
        case MySQLParser.POINTN:
        case MySQLParser.POLYFROMTEXT:
        case MySQLParser.POLYFROMWKB:
        case MySQLParser.POLYGONFROMTEXT:
        case MySQLParser.POLYGONFROMWKB:
        case MySQLParser.POW:
        case MySQLParser.POWER:
        case MySQLParser.QUOTE:
        case MySQLParser.RADIANS:
        case MySQLParser.RAND:
        case MySQLParser.RANDOM_BYTES:
        case MySQLParser.RELEASE_LOCK:
        case MySQLParser.REVERSE:
        case MySQLParser.ROUND:
        case MySQLParser.ROW_COUNT:
        case MySQLParser.RPAD:
        case MySQLParser.RTRIM:
        case MySQLParser.SEC_TO_TIME:
        case MySQLParser.SESSION_USER:
        case MySQLParser.SHA:
        case MySQLParser.SHA1:
        case MySQLParser.SHA2:
        case MySQLParser.SCHEMA_NAME:
        case MySQLParser.SIGN:
        case MySQLParser.SIN:
        case MySQLParser.SLEEP:
        case MySQLParser.SOUNDEX:
        case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser.SQRT:
        case MySQLParser.SRID:
        case MySQLParser.STARTPOINT:
        case MySQLParser.STRCMP:
        case MySQLParser.STR_TO_DATE:
        case MySQLParser.ST_AREA:
        case MySQLParser.ST_ASBINARY:
        case MySQLParser.ST_ASTEXT:
        case MySQLParser.ST_ASWKB:
        case MySQLParser.ST_ASWKT:
        case MySQLParser.ST_BUFFER:
        case MySQLParser.ST_CENTROID:
        case MySQLParser.ST_CONTAINS:
        case MySQLParser.ST_CROSSES:
        case MySQLParser.ST_DIFFERENCE:
        case MySQLParser.ST_DIMENSION:
        case MySQLParser.ST_DISJOINT:
        case MySQLParser.ST_DISTANCE:
        case MySQLParser.ST_ENDPOINT:
        case MySQLParser.ST_ENVELOPE:
        case MySQLParser.ST_EQUALS:
        case MySQLParser.ST_EXTERIORRING:
        case MySQLParser.ST_GEOMCOLLFROMTEXT:
        case MySQLParser.ST_GEOMCOLLFROMTXT:
        case MySQLParser.ST_GEOMCOLLFROMWKB:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.ST_GEOMETRYFROMTEXT:
        case MySQLParser.ST_GEOMETRYFROMWKB:
        case MySQLParser.ST_GEOMETRYN:
        case MySQLParser.ST_GEOMETRYTYPE:
        case MySQLParser.ST_GEOMFROMTEXT:
        case MySQLParser.ST_GEOMFROMWKB:
        case MySQLParser.ST_INTERIORRINGN:
        case MySQLParser.ST_INTERSECTION:
        case MySQLParser.ST_INTERSECTS:
        case MySQLParser.ST_ISCLOSED:
        case MySQLParser.ST_ISEMPTY:
        case MySQLParser.ST_ISSIMPLE:
        case MySQLParser.ST_LINEFROMTEXT:
        case MySQLParser.ST_LINEFROMWKB:
        case MySQLParser.ST_LINESTRINGFROMTEXT:
        case MySQLParser.ST_LINESTRINGFROMWKB:
        case MySQLParser.ST_NUMGEOMETRIES:
        case MySQLParser.ST_NUMINTERIORRING:
        case MySQLParser.ST_NUMINTERIORRINGS:
        case MySQLParser.ST_NUMPOINTS:
        case MySQLParser.ST_OVERLAPS:
        case MySQLParser.ST_POINTFROMTEXT:
        case MySQLParser.ST_POINTFROMWKB:
        case MySQLParser.ST_POINTN:
        case MySQLParser.ST_POLYFROMTEXT:
        case MySQLParser.ST_POLYFROMWKB:
        case MySQLParser.ST_POLYGONFROMTEXT:
        case MySQLParser.ST_POLYGONFROMWKB:
        case MySQLParser.ST_SRID:
        case MySQLParser.ST_STARTPOINT:
        case MySQLParser.ST_SYMDIFFERENCE:
        case MySQLParser.ST_TOUCHES:
        case MySQLParser.ST_UNION:
        case MySQLParser.ST_WITHIN:
        case MySQLParser.ST_X:
        case MySQLParser.ST_Y:
        case MySQLParser.SUBDATE:
        case MySQLParser.SUBSTRING_INDEX:
        case MySQLParser.SUBTIME:
        case MySQLParser.SYSTEM_USER:
        case MySQLParser.TAN:
        case MySQLParser.TIMEDIFF:
        case MySQLParser.TIMESTAMPADD:
        case MySQLParser.TIMESTAMPDIFF:
        case MySQLParser.TIME_FORMAT:
        case MySQLParser.TIME_TO_SEC:
        case MySQLParser.TOUCHES:
        case MySQLParser.TO_BASE64:
        case MySQLParser.TO_DAYS:
        case MySQLParser.TO_SECONDS:
        case MySQLParser.UCASE:
        case MySQLParser.UNCOMPRESS:
        case MySQLParser.UNCOMPRESSED_LENGTH:
        case MySQLParser.UNHEX:
        case MySQLParser.UNIX_TIMESTAMP:
        case MySQLParser.UPDATEXML:
        case MySQLParser.UPPER:
        case MySQLParser.UUID:
        case MySQLParser.UUID_SHORT:
        case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser.VERSION:
        case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser.WEEKDAY:
        case MySQLParser.WEEKOFYEAR:
        case MySQLParser.WEIGHT_STRING:
        case MySQLParser.WITHIN:
        case MySQLParser.YEARWEEK:
        case MySQLParser.Y_FUNCTION:
        case MySQLParser.X_FUNCTION:
        case MySQLParser.PLUS:
        case MySQLParser.MINUS:
        case MySQLParser.EXCLAMATION_SYMBOL:
        case MySQLParser.BIT_NOT_OP:
        case MySQLParser.LR_BRACKET:
        case MySQLParser.ZERO_DECIMAL:
        case MySQLParser.ONE_DECIMAL:
        case MySQLParser.TWO_DECIMAL:
        case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser.START_NATIONAL_STRING_LITERAL:
        case MySQLParser.STRING_LITERAL:
        case MySQLParser.DECIMAL_LITERAL:
        case MySQLParser.HEXADECIMAL_LITERAL:
        case MySQLParser.REAL_LITERAL:
        case MySQLParser.NULL_SPEC_LITERAL:
        case MySQLParser.BIT_STRING:
        case MySQLParser.STRING_CHARSET_NAME:
        case MySQLParser.ID:
        case MySQLParser.REVERSE_QUOTE_ID:
        case MySQLParser.LOCAL_ID:
        case MySQLParser.GLOBAL_ID:
            this.state = 3524;
            this.selectElement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3531;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 3527;
            this.match(MySQLParser.COMMA);
            this.state = 3528;
            this.selectElement();
            this.state = 3533;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_selectElement;
    return this;
}

SelectElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectElementContext.prototype.constructor = SelectElementContext;


 
SelectElementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SelectExpressionElementContext(parser, ctx) {
	SelectElementContext.call(this, parser);
    SelectElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectExpressionElementContext.prototype = Object.create(SelectElementContext.prototype);
SelectExpressionElementContext.prototype.constructor = SelectExpressionElementContext;

MySQLParser.SelectExpressionElementContext = SelectExpressionElementContext;

SelectExpressionElementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SelectExpressionElementContext.prototype.LOCAL_ID = function() {
    return this.getToken(MySQLParser.LOCAL_ID, 0);
};

SelectExpressionElementContext.prototype.VAR_ASSIGN = function() {
    return this.getToken(MySQLParser.VAR_ASSIGN, 0);
};

SelectExpressionElementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

SelectExpressionElementContext.prototype.AS = function() {
    return this.getToken(MySQLParser.AS, 0);
};
SelectExpressionElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectExpressionElement(this);
	}
};

SelectExpressionElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectExpressionElement(this);
	}
};

SelectExpressionElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectExpressionElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SelectFunctionElementContext(parser, ctx) {
	SelectElementContext.call(this, parser);
    SelectElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectFunctionElementContext.prototype = Object.create(SelectElementContext.prototype);
SelectFunctionElementContext.prototype.constructor = SelectFunctionElementContext;

MySQLParser.SelectFunctionElementContext = SelectFunctionElementContext;

SelectFunctionElementContext.prototype.functionCall = function() {
    return this.getTypedRuleContext(FunctionCallContext,0);
};

SelectFunctionElementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

SelectFunctionElementContext.prototype.AS = function() {
    return this.getToken(MySQLParser.AS, 0);
};
SelectFunctionElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectFunctionElement(this);
	}
};

SelectFunctionElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectFunctionElement(this);
	}
};

SelectFunctionElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectFunctionElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SelectStarElementContext(parser, ctx) {
	SelectElementContext.call(this, parser);
    SelectElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectStarElementContext.prototype = Object.create(SelectElementContext.prototype);
SelectStarElementContext.prototype.constructor = SelectStarElementContext;

MySQLParser.SelectStarElementContext = SelectStarElementContext;

SelectStarElementContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

SelectStarElementContext.prototype.DOT = function() {
    return this.getToken(MySQLParser.DOT, 0);
};

SelectStarElementContext.prototype.STAR = function() {
    return this.getToken(MySQLParser.STAR, 0);
};
SelectStarElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectStarElement(this);
	}
};

SelectStarElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectStarElement(this);
	}
};

SelectStarElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectStarElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SelectColumnElementContext(parser, ctx) {
	SelectElementContext.call(this, parser);
    SelectElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectColumnElementContext.prototype = Object.create(SelectElementContext.prototype);
SelectColumnElementContext.prototype.constructor = SelectColumnElementContext;

MySQLParser.SelectColumnElementContext = SelectColumnElementContext;

SelectColumnElementContext.prototype.fullColumnName = function() {
    return this.getTypedRuleContext(FullColumnNameContext,0);
};

SelectColumnElementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

SelectColumnElementContext.prototype.AS = function() {
    return this.getToken(MySQLParser.AS, 0);
};
SelectColumnElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectColumnElement(this);
	}
};

SelectColumnElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectColumnElement(this);
	}
};

SelectColumnElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectColumnElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.SelectElementContext = SelectElementContext;

MySQLParser.prototype.selectElement = function() {

    var localctx = new SelectElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, MySQLParser.RULE_selectElement);
    var _la = 0; // Token type
    try {
        this.state = 3563;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,514,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SelectStarElementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 3534;
            this.fullId();
            this.state = 3535;
            this.match(MySQLParser.DOT);
            this.state = 3536;
            this.match(MySQLParser.STAR);
            break;

        case 2:
            localctx = new SelectColumnElementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 3538;
            this.fullColumnName();
            this.state = 3543;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,508,this._ctx);
            if(la_===1) {
                this.state = 3540;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.AS) {
                    this.state = 3539;
                    this.match(MySQLParser.AS);
                }

                this.state = 3542;
                this.uid();

            }
            break;

        case 3:
            localctx = new SelectFunctionElementContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 3545;
            this.functionCall();
            this.state = 3550;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,510,this._ctx);
            if(la_===1) {
                this.state = 3547;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.AS) {
                    this.state = 3546;
                    this.match(MySQLParser.AS);
                }

                this.state = 3549;
                this.uid();

            }
            break;

        case 4:
            localctx = new SelectExpressionElementContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 3554;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,511,this._ctx);
            if(la_===1) {
                this.state = 3552;
                this.match(MySQLParser.LOCAL_ID);
                this.state = 3553;
                this.match(MySQLParser.VAR_ASSIGN);

            }
            this.state = 3556;
            this.expression(0);
            this.state = 3561;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,513,this._ctx);
            if(la_===1) {
                this.state = 3558;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.AS) {
                    this.state = 3557;
                    this.match(MySQLParser.AS);
                }

                this.state = 3560;
                this.uid();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectIntoExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_selectIntoExpression;
    return this;
}

SelectIntoExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectIntoExpressionContext.prototype.constructor = SelectIntoExpressionContext;


 
SelectIntoExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SelectIntoVariablesContext(parser, ctx) {
	SelectIntoExpressionContext.call(this, parser);
    SelectIntoExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectIntoVariablesContext.prototype = Object.create(SelectIntoExpressionContext.prototype);
SelectIntoVariablesContext.prototype.constructor = SelectIntoVariablesContext;

MySQLParser.SelectIntoVariablesContext = SelectIntoVariablesContext;

SelectIntoVariablesContext.prototype.INTO = function() {
    return this.getToken(MySQLParser.INTO, 0);
};

SelectIntoVariablesContext.prototype.assignmentField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentFieldContext);
    } else {
        return this.getTypedRuleContext(AssignmentFieldContext,i);
    }
};

SelectIntoVariablesContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

SelectIntoVariablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectIntoVariables(this);
	}
};

SelectIntoVariablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectIntoVariables(this);
	}
};

SelectIntoVariablesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectIntoVariables(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SelectIntoTextFileContext(parser, ctx) {
	SelectIntoExpressionContext.call(this, parser);
    this.filename = null; // Token;
    this.charset = null; // CharsetNameContext;
    this.fieldsFormat = null; // Token;
    SelectIntoExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectIntoTextFileContext.prototype = Object.create(SelectIntoExpressionContext.prototype);
SelectIntoTextFileContext.prototype.constructor = SelectIntoTextFileContext;

MySQLParser.SelectIntoTextFileContext = SelectIntoTextFileContext;

SelectIntoTextFileContext.prototype.INTO = function() {
    return this.getToken(MySQLParser.INTO, 0);
};

SelectIntoTextFileContext.prototype.OUTFILE = function() {
    return this.getToken(MySQLParser.OUTFILE, 0);
};

SelectIntoTextFileContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

SelectIntoTextFileContext.prototype.CHARACTER = function() {
    return this.getToken(MySQLParser.CHARACTER, 0);
};

SelectIntoTextFileContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

SelectIntoTextFileContext.prototype.LINES = function() {
    return this.getToken(MySQLParser.LINES, 0);
};

SelectIntoTextFileContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

SelectIntoTextFileContext.prototype.FIELDS = function() {
    return this.getToken(MySQLParser.FIELDS, 0);
};

SelectIntoTextFileContext.prototype.COLUMNS = function() {
    return this.getToken(MySQLParser.COLUMNS, 0);
};

SelectIntoTextFileContext.prototype.selectFieldsInto = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectFieldsIntoContext);
    } else {
        return this.getTypedRuleContext(SelectFieldsIntoContext,i);
    }
};

SelectIntoTextFileContext.prototype.selectLinesInto = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectLinesIntoContext);
    } else {
        return this.getTypedRuleContext(SelectLinesIntoContext,i);
    }
};
SelectIntoTextFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectIntoTextFile(this);
	}
};

SelectIntoTextFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectIntoTextFile(this);
	}
};

SelectIntoTextFileContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectIntoTextFile(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SelectIntoDumpFileContext(parser, ctx) {
	SelectIntoExpressionContext.call(this, parser);
    SelectIntoExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectIntoDumpFileContext.prototype = Object.create(SelectIntoExpressionContext.prototype);
SelectIntoDumpFileContext.prototype.constructor = SelectIntoDumpFileContext;

MySQLParser.SelectIntoDumpFileContext = SelectIntoDumpFileContext;

SelectIntoDumpFileContext.prototype.INTO = function() {
    return this.getToken(MySQLParser.INTO, 0);
};

SelectIntoDumpFileContext.prototype.DUMPFILE = function() {
    return this.getToken(MySQLParser.DUMPFILE, 0);
};

SelectIntoDumpFileContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};
SelectIntoDumpFileContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectIntoDumpFile(this);
	}
};

SelectIntoDumpFileContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectIntoDumpFile(this);
	}
};

SelectIntoDumpFileContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectIntoDumpFile(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.SelectIntoExpressionContext = SelectIntoExpressionContext;

MySQLParser.prototype.selectIntoExpression = function() {

    var localctx = new SelectIntoExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, MySQLParser.RULE_selectIntoExpression);
    var _la = 0; // Token type
    try {
        this.state = 3601;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,521,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SelectIntoVariablesContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 3565;
            this.match(MySQLParser.INTO);
            this.state = 3566;
            this.assignmentField();
            this.state = 3571;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 3567;
                this.match(MySQLParser.COMMA);
                this.state = 3568;
                this.assignmentField();
                this.state = 3573;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            localctx = new SelectIntoDumpFileContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 3574;
            this.match(MySQLParser.INTO);
            this.state = 3575;
            this.match(MySQLParser.DUMPFILE);
            this.state = 3576;
            this.match(MySQLParser.STRING_LITERAL);
            break;

        case 3:
            localctx = new SelectIntoTextFileContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 3577;
            this.match(MySQLParser.INTO);
            this.state = 3578;
            this.match(MySQLParser.OUTFILE);
            this.state = 3579;
            localctx.filename = this.match(MySQLParser.STRING_LITERAL);
            this.state = 3583;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CHARACTER) {
                this.state = 3580;
                this.match(MySQLParser.CHARACTER);
                this.state = 3581;
                this.match(MySQLParser.SET);
                this.state = 3582;
                localctx.charset = this.charsetName();
            }

            this.state = 3591;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,518,this._ctx);
            if(la_===1) {
                this.state = 3585;
                localctx.fieldsFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.COLUMNS || _la===MySQLParser.FIELDS)) {
                    localctx.fieldsFormat = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3587; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 3586;
                    this.selectFieldsInto();
                    this.state = 3589; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===MySQLParser.ENCLOSED || _la===MySQLParser.ESCAPED || _la===MySQLParser.OPTIONALLY || _la===MySQLParser.TERMINATED);

            }
            this.state = 3599;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LINES) {
                this.state = 3593;
                this.match(MySQLParser.LINES);
                this.state = 3595; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 3594;
                    this.selectLinesInto();
                    this.state = 3597; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===MySQLParser.STARTING || _la===MySQLParser.TERMINATED);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectFieldsIntoContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_selectFieldsInto;
    this.terminationField = null; // Token
    this.enclosion = null; // Token
    this.escaping = null; // Token
    return this;
}

SelectFieldsIntoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectFieldsIntoContext.prototype.constructor = SelectFieldsIntoContext;

SelectFieldsIntoContext.prototype.TERMINATED = function() {
    return this.getToken(MySQLParser.TERMINATED, 0);
};

SelectFieldsIntoContext.prototype.BY = function() {
    return this.getToken(MySQLParser.BY, 0);
};

SelectFieldsIntoContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

SelectFieldsIntoContext.prototype.ENCLOSED = function() {
    return this.getToken(MySQLParser.ENCLOSED, 0);
};

SelectFieldsIntoContext.prototype.OPTIONALLY = function() {
    return this.getToken(MySQLParser.OPTIONALLY, 0);
};

SelectFieldsIntoContext.prototype.ESCAPED = function() {
    return this.getToken(MySQLParser.ESCAPED, 0);
};

SelectFieldsIntoContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectFieldsInto(this);
	}
};

SelectFieldsIntoContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectFieldsInto(this);
	}
};

SelectFieldsIntoContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectFieldsInto(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SelectFieldsIntoContext = SelectFieldsIntoContext;

MySQLParser.prototype.selectFieldsInto = function() {

    var localctx = new SelectFieldsIntoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, MySQLParser.RULE_selectFieldsInto);
    var _la = 0; // Token type
    try {
        this.state = 3615;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.TERMINATED:
            this.enterOuterAlt(localctx, 1);
            this.state = 3603;
            this.match(MySQLParser.TERMINATED);
            this.state = 3604;
            this.match(MySQLParser.BY);
            this.state = 3605;
            localctx.terminationField = this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.ENCLOSED:
        case MySQLParser.OPTIONALLY:
            this.enterOuterAlt(localctx, 2);
            this.state = 3607;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.OPTIONALLY) {
                this.state = 3606;
                this.match(MySQLParser.OPTIONALLY);
            }

            this.state = 3609;
            this.match(MySQLParser.ENCLOSED);
            this.state = 3610;
            this.match(MySQLParser.BY);
            this.state = 3611;
            localctx.enclosion = this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.ESCAPED:
            this.enterOuterAlt(localctx, 3);
            this.state = 3612;
            this.match(MySQLParser.ESCAPED);
            this.state = 3613;
            this.match(MySQLParser.BY);
            this.state = 3614;
            localctx.escaping = this.match(MySQLParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectLinesIntoContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_selectLinesInto;
    this.starting = null; // Token
    this.terminationLine = null; // Token
    return this;
}

SelectLinesIntoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectLinesIntoContext.prototype.constructor = SelectLinesIntoContext;

SelectLinesIntoContext.prototype.STARTING = function() {
    return this.getToken(MySQLParser.STARTING, 0);
};

SelectLinesIntoContext.prototype.BY = function() {
    return this.getToken(MySQLParser.BY, 0);
};

SelectLinesIntoContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

SelectLinesIntoContext.prototype.TERMINATED = function() {
    return this.getToken(MySQLParser.TERMINATED, 0);
};

SelectLinesIntoContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSelectLinesInto(this);
	}
};

SelectLinesIntoContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSelectLinesInto(this);
	}
};

SelectLinesIntoContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSelectLinesInto(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SelectLinesIntoContext = SelectLinesIntoContext;

MySQLParser.prototype.selectLinesInto = function() {

    var localctx = new SelectLinesIntoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, MySQLParser.RULE_selectLinesInto);
    try {
        this.state = 3623;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.STARTING:
            this.enterOuterAlt(localctx, 1);
            this.state = 3617;
            this.match(MySQLParser.STARTING);
            this.state = 3618;
            this.match(MySQLParser.BY);
            this.state = 3619;
            localctx.starting = this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.TERMINATED:
            this.enterOuterAlt(localctx, 2);
            this.state = 3620;
            this.match(MySQLParser.TERMINATED);
            this.state = 3621;
            this.match(MySQLParser.BY);
            this.state = 3622;
            localctx.terminationLine = this.match(MySQLParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FromClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fromClause;
    this.whereExpr = null; // ExpressionContext
    this.havingExpr = null; // ExpressionContext
    return this;
}

FromClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromClauseContext.prototype.constructor = FromClauseContext;

FromClauseContext.prototype.FROM = function() {
    return this.getToken(MySQLParser.FROM, 0);
};

FromClauseContext.prototype.tableSources = function() {
    return this.getTypedRuleContext(TableSourcesContext,0);
};

FromClauseContext.prototype.WHERE = function() {
    return this.getToken(MySQLParser.WHERE, 0);
};

FromClauseContext.prototype.GROUP = function() {
    return this.getToken(MySQLParser.GROUP, 0);
};

FromClauseContext.prototype.BY = function() {
    return this.getToken(MySQLParser.BY, 0);
};

FromClauseContext.prototype.groupByItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupByItemContext);
    } else {
        return this.getTypedRuleContext(GroupByItemContext,i);
    }
};

FromClauseContext.prototype.HAVING = function() {
    return this.getToken(MySQLParser.HAVING, 0);
};

FromClauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FromClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


FromClauseContext.prototype.WITH = function() {
    return this.getToken(MySQLParser.WITH, 0);
};

FromClauseContext.prototype.ROLLUP = function() {
    return this.getToken(MySQLParser.ROLLUP, 0);
};

FromClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFromClause(this);
	}
};

FromClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFromClause(this);
	}
};

FromClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFromClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FromClauseContext = FromClauseContext;

MySQLParser.prototype.fromClause = function() {

    var localctx = new FromClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, MySQLParser.RULE_fromClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3625;
        this.match(MySQLParser.FROM);
        this.state = 3626;
        this.tableSources();
        this.state = 3629;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WHERE) {
            this.state = 3627;
            this.match(MySQLParser.WHERE);
            this.state = 3628;
            localctx.whereExpr = this.expression(0);
        }

        this.state = 3645;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.GROUP) {
            this.state = 3631;
            this.match(MySQLParser.GROUP);
            this.state = 3632;
            this.match(MySQLParser.BY);
            this.state = 3633;
            this.groupByItem();
            this.state = 3638;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 3634;
                this.match(MySQLParser.COMMA);
                this.state = 3635;
                this.groupByItem();
                this.state = 3640;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3643;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,527,this._ctx);
            if(la_===1) {
                this.state = 3641;
                this.match(MySQLParser.WITH);
                this.state = 3642;
                this.match(MySQLParser.ROLLUP);

            }
        }

        this.state = 3649;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.HAVING) {
            this.state = 3647;
            this.match(MySQLParser.HAVING);
            this.state = 3648;
            localctx.havingExpr = this.expression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupByItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_groupByItem;
    this.order = null; // Token
    return this;
}

GroupByItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByItemContext.prototype.constructor = GroupByItemContext;

GroupByItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

GroupByItemContext.prototype.ASC = function() {
    return this.getToken(MySQLParser.ASC, 0);
};

GroupByItemContext.prototype.DESC = function() {
    return this.getToken(MySQLParser.DESC, 0);
};

GroupByItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGroupByItem(this);
	}
};

GroupByItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGroupByItem(this);
	}
};

GroupByItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGroupByItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GroupByItemContext = GroupByItemContext;

MySQLParser.prototype.groupByItem = function() {

    var localctx = new GroupByItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, MySQLParser.RULE_groupByItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3651;
        this.expression(0);
        this.state = 3653;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,530,this._ctx);
        if(la_===1) {
            this.state = 3652;
            localctx.order = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ASC || _la===MySQLParser.DESC)) {
                localctx.order = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_limitClause;
    this.offset = null; // LimitClauseAtomContext
    this.limit = null; // LimitClauseAtomContext
    return this;
}

LimitClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitClauseContext.prototype.constructor = LimitClauseContext;

LimitClauseContext.prototype.LIMIT = function() {
    return this.getToken(MySQLParser.LIMIT, 0);
};

LimitClauseContext.prototype.OFFSET = function() {
    return this.getToken(MySQLParser.OFFSET, 0);
};

LimitClauseContext.prototype.limitClauseAtom = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LimitClauseAtomContext);
    } else {
        return this.getTypedRuleContext(LimitClauseAtomContext,i);
    }
};

LimitClauseContext.prototype.COMMA = function() {
    return this.getToken(MySQLParser.COMMA, 0);
};

LimitClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLimitClause(this);
	}
};

LimitClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLimitClause(this);
	}
};

LimitClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLimitClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LimitClauseContext = LimitClauseContext;

MySQLParser.prototype.limitClause = function() {

    var localctx = new LimitClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, MySQLParser.RULE_limitClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3655;
        this.match(MySQLParser.LIMIT);
        this.state = 3666;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,532,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3659;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,531,this._ctx);
            if(la_===1) {
                this.state = 3656;
                localctx.offset = this.limitClauseAtom();
                this.state = 3657;
                this.match(MySQLParser.COMMA);

            }
            this.state = 3661;
            localctx.limit = this.limitClauseAtom();
            break;

        case 2:
            this.state = 3662;
            localctx.limit = this.limitClauseAtom();
            this.state = 3663;
            this.match(MySQLParser.OFFSET);
            this.state = 3664;
            localctx.offset = this.limitClauseAtom();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitClauseAtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_limitClauseAtom;
    return this;
}

LimitClauseAtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitClauseAtomContext.prototype.constructor = LimitClauseAtomContext;

LimitClauseAtomContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

LimitClauseAtomContext.prototype.mysqlVariable = function() {
    return this.getTypedRuleContext(MysqlVariableContext,0);
};

LimitClauseAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLimitClauseAtom(this);
	}
};

LimitClauseAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLimitClauseAtom(this);
	}
};

LimitClauseAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLimitClauseAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LimitClauseAtomContext = LimitClauseAtomContext;

MySQLParser.prototype.limitClauseAtom = function() {

    var localctx = new LimitClauseAtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, MySQLParser.RULE_limitClauseAtom);
    try {
        this.state = 3670;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ZERO_DECIMAL:
        case MySQLParser.ONE_DECIMAL:
        case MySQLParser.TWO_DECIMAL:
        case MySQLParser.DECIMAL_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 3668;
            this.decimalLiteral();
            break;
        case MySQLParser.LOCAL_ID:
        case MySQLParser.GLOBAL_ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 3669;
            this.mysqlVariable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StartTransactionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_startTransaction;
    return this;
}

StartTransactionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartTransactionContext.prototype.constructor = StartTransactionContext;

StartTransactionContext.prototype.START = function() {
    return this.getToken(MySQLParser.START, 0);
};

StartTransactionContext.prototype.TRANSACTION = function() {
    return this.getToken(MySQLParser.TRANSACTION, 0);
};

StartTransactionContext.prototype.transactionMode = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TransactionModeContext);
    } else {
        return this.getTypedRuleContext(TransactionModeContext,i);
    }
};

StartTransactionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


StartTransactionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStartTransaction(this);
	}
};

StartTransactionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStartTransaction(this);
	}
};

StartTransactionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStartTransaction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.StartTransactionContext = StartTransactionContext;

MySQLParser.prototype.startTransaction = function() {

    var localctx = new StartTransactionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, MySQLParser.RULE_startTransaction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3672;
        this.match(MySQLParser.START);
        this.state = 3673;
        this.match(MySQLParser.TRANSACTION);
        this.state = 3682;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.READ || _la===MySQLParser.WITH) {
            this.state = 3674;
            this.transactionMode();
            this.state = 3679;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 3675;
                this.match(MySQLParser.COMMA);
                this.state = 3676;
                this.transactionMode();
                this.state = 3681;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BeginWorkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_beginWork;
    return this;
}

BeginWorkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BeginWorkContext.prototype.constructor = BeginWorkContext;

BeginWorkContext.prototype.BEGIN = function() {
    return this.getToken(MySQLParser.BEGIN, 0);
};

BeginWorkContext.prototype.WORK = function() {
    return this.getToken(MySQLParser.WORK, 0);
};

BeginWorkContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterBeginWork(this);
	}
};

BeginWorkContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitBeginWork(this);
	}
};

BeginWorkContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitBeginWork(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.BeginWorkContext = BeginWorkContext;

MySQLParser.prototype.beginWork = function() {

    var localctx = new BeginWorkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, MySQLParser.RULE_beginWork);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3684;
        this.match(MySQLParser.BEGIN);
        this.state = 3686;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WORK) {
            this.state = 3685;
            this.match(MySQLParser.WORK);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CommitWorkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_commitWork;
    this.nochain = null; // Token
    this.norelease = null; // Token
    return this;
}

CommitWorkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommitWorkContext.prototype.constructor = CommitWorkContext;

CommitWorkContext.prototype.COMMIT = function() {
    return this.getToken(MySQLParser.COMMIT, 0);
};

CommitWorkContext.prototype.WORK = function() {
    return this.getToken(MySQLParser.WORK, 0);
};

CommitWorkContext.prototype.AND = function() {
    return this.getToken(MySQLParser.AND, 0);
};

CommitWorkContext.prototype.CHAIN = function() {
    return this.getToken(MySQLParser.CHAIN, 0);
};

CommitWorkContext.prototype.RELEASE = function() {
    return this.getToken(MySQLParser.RELEASE, 0);
};

CommitWorkContext.prototype.NO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.NO);
    } else {
        return this.getToken(MySQLParser.NO, i);
    }
};


CommitWorkContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCommitWork(this);
	}
};

CommitWorkContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCommitWork(this);
	}
};

CommitWorkContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCommitWork(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CommitWorkContext = CommitWorkContext;

MySQLParser.prototype.commitWork = function() {

    var localctx = new CommitWorkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, MySQLParser.RULE_commitWork);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3688;
        this.match(MySQLParser.COMMIT);
        this.state = 3690;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WORK) {
            this.state = 3689;
            this.match(MySQLParser.WORK);
        }

        this.state = 3697;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.AND) {
            this.state = 3692;
            this.match(MySQLParser.AND);
            this.state = 3694;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NO) {
                this.state = 3693;
                localctx.nochain = this.match(MySQLParser.NO);
            }

            this.state = 3696;
            this.match(MySQLParser.CHAIN);
        }

        this.state = 3703;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,541,this._ctx);
        if(la_===1) {
            this.state = 3700;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NO) {
                this.state = 3699;
                localctx.norelease = this.match(MySQLParser.NO);
            }

            this.state = 3702;
            this.match(MySQLParser.RELEASE);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RollbackWorkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_rollbackWork;
    this.nochain = null; // Token
    this.norelease = null; // Token
    return this;
}

RollbackWorkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RollbackWorkContext.prototype.constructor = RollbackWorkContext;

RollbackWorkContext.prototype.ROLLBACK = function() {
    return this.getToken(MySQLParser.ROLLBACK, 0);
};

RollbackWorkContext.prototype.WORK = function() {
    return this.getToken(MySQLParser.WORK, 0);
};

RollbackWorkContext.prototype.AND = function() {
    return this.getToken(MySQLParser.AND, 0);
};

RollbackWorkContext.prototype.CHAIN = function() {
    return this.getToken(MySQLParser.CHAIN, 0);
};

RollbackWorkContext.prototype.RELEASE = function() {
    return this.getToken(MySQLParser.RELEASE, 0);
};

RollbackWorkContext.prototype.NO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.NO);
    } else {
        return this.getToken(MySQLParser.NO, i);
    }
};


RollbackWorkContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRollbackWork(this);
	}
};

RollbackWorkContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRollbackWork(this);
	}
};

RollbackWorkContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRollbackWork(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RollbackWorkContext = RollbackWorkContext;

MySQLParser.prototype.rollbackWork = function() {

    var localctx = new RollbackWorkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, MySQLParser.RULE_rollbackWork);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3705;
        this.match(MySQLParser.ROLLBACK);
        this.state = 3707;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WORK) {
            this.state = 3706;
            this.match(MySQLParser.WORK);
        }

        this.state = 3714;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.AND) {
            this.state = 3709;
            this.match(MySQLParser.AND);
            this.state = 3711;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NO) {
                this.state = 3710;
                localctx.nochain = this.match(MySQLParser.NO);
            }

            this.state = 3713;
            this.match(MySQLParser.CHAIN);
        }

        this.state = 3720;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,546,this._ctx);
        if(la_===1) {
            this.state = 3717;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NO) {
                this.state = 3716;
                localctx.norelease = this.match(MySQLParser.NO);
            }

            this.state = 3719;
            this.match(MySQLParser.RELEASE);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SavepointStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_savepointStatement;
    return this;
}

SavepointStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SavepointStatementContext.prototype.constructor = SavepointStatementContext;

SavepointStatementContext.prototype.SAVEPOINT = function() {
    return this.getToken(MySQLParser.SAVEPOINT, 0);
};

SavepointStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

SavepointStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSavepointStatement(this);
	}
};

SavepointStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSavepointStatement(this);
	}
};

SavepointStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSavepointStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SavepointStatementContext = SavepointStatementContext;

MySQLParser.prototype.savepointStatement = function() {

    var localctx = new SavepointStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, MySQLParser.RULE_savepointStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3722;
        this.match(MySQLParser.SAVEPOINT);
        this.state = 3723;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RollbackStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_rollbackStatement;
    return this;
}

RollbackStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RollbackStatementContext.prototype.constructor = RollbackStatementContext;

RollbackStatementContext.prototype.ROLLBACK = function() {
    return this.getToken(MySQLParser.ROLLBACK, 0);
};

RollbackStatementContext.prototype.TO = function() {
    return this.getToken(MySQLParser.TO, 0);
};

RollbackStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

RollbackStatementContext.prototype.WORK = function() {
    return this.getToken(MySQLParser.WORK, 0);
};

RollbackStatementContext.prototype.SAVEPOINT = function() {
    return this.getToken(MySQLParser.SAVEPOINT, 0);
};

RollbackStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRollbackStatement(this);
	}
};

RollbackStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRollbackStatement(this);
	}
};

RollbackStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRollbackStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RollbackStatementContext = RollbackStatementContext;

MySQLParser.prototype.rollbackStatement = function() {

    var localctx = new RollbackStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, MySQLParser.RULE_rollbackStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3725;
        this.match(MySQLParser.ROLLBACK);
        this.state = 3727;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WORK) {
            this.state = 3726;
            this.match(MySQLParser.WORK);
        }

        this.state = 3729;
        this.match(MySQLParser.TO);
        this.state = 3731;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,548,this._ctx);
        if(la_===1) {
            this.state = 3730;
            this.match(MySQLParser.SAVEPOINT);

        }
        this.state = 3733;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReleaseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_releaseStatement;
    return this;
}

ReleaseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReleaseStatementContext.prototype.constructor = ReleaseStatementContext;

ReleaseStatementContext.prototype.RELEASE = function() {
    return this.getToken(MySQLParser.RELEASE, 0);
};

ReleaseStatementContext.prototype.SAVEPOINT = function() {
    return this.getToken(MySQLParser.SAVEPOINT, 0);
};

ReleaseStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

ReleaseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReleaseStatement(this);
	}
};

ReleaseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReleaseStatement(this);
	}
};

ReleaseStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReleaseStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ReleaseStatementContext = ReleaseStatementContext;

MySQLParser.prototype.releaseStatement = function() {

    var localctx = new ReleaseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, MySQLParser.RULE_releaseStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3735;
        this.match(MySQLParser.RELEASE);
        this.state = 3736;
        this.match(MySQLParser.SAVEPOINT);
        this.state = 3737;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LockTablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_lockTables;
    return this;
}

LockTablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LockTablesContext.prototype.constructor = LockTablesContext;

LockTablesContext.prototype.LOCK = function() {
    return this.getToken(MySQLParser.LOCK, 0);
};

LockTablesContext.prototype.TABLES = function() {
    return this.getToken(MySQLParser.TABLES, 0);
};

LockTablesContext.prototype.lockTableElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LockTableElementContext);
    } else {
        return this.getTypedRuleContext(LockTableElementContext,i);
    }
};

LockTablesContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


LockTablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLockTables(this);
	}
};

LockTablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLockTables(this);
	}
};

LockTablesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLockTables(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LockTablesContext = LockTablesContext;

MySQLParser.prototype.lockTables = function() {

    var localctx = new LockTablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, MySQLParser.RULE_lockTables);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3739;
        this.match(MySQLParser.LOCK);
        this.state = 3740;
        this.match(MySQLParser.TABLES);
        this.state = 3741;
        this.lockTableElement();
        this.state = 3746;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 3742;
            this.match(MySQLParser.COMMA);
            this.state = 3743;
            this.lockTableElement();
            this.state = 3748;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnlockTablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_unlockTables;
    return this;
}

UnlockTablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnlockTablesContext.prototype.constructor = UnlockTablesContext;

UnlockTablesContext.prototype.UNLOCK = function() {
    return this.getToken(MySQLParser.UNLOCK, 0);
};

UnlockTablesContext.prototype.TABLES = function() {
    return this.getToken(MySQLParser.TABLES, 0);
};

UnlockTablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUnlockTables(this);
	}
};

UnlockTablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUnlockTables(this);
	}
};

UnlockTablesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUnlockTables(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UnlockTablesContext = UnlockTablesContext;

MySQLParser.prototype.unlockTables = function() {

    var localctx = new UnlockTablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, MySQLParser.RULE_unlockTables);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3749;
        this.match(MySQLParser.UNLOCK);
        this.state = 3750;
        this.match(MySQLParser.TABLES);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetAutocommitStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_setAutocommitStatement;
    this.autocommitValue = null; // Token
    return this;
}

SetAutocommitStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetAutocommitStatementContext.prototype.constructor = SetAutocommitStatementContext;

SetAutocommitStatementContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

SetAutocommitStatementContext.prototype.AUTOCOMMIT = function() {
    return this.getToken(MySQLParser.AUTOCOMMIT, 0);
};

SetAutocommitStatementContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

SetAutocommitStatementContext.prototype.ZERO_DECIMAL = function() {
    return this.getToken(MySQLParser.ZERO_DECIMAL, 0);
};

SetAutocommitStatementContext.prototype.ONE_DECIMAL = function() {
    return this.getToken(MySQLParser.ONE_DECIMAL, 0);
};

SetAutocommitStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSetAutocommitStatement(this);
	}
};

SetAutocommitStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSetAutocommitStatement(this);
	}
};

SetAutocommitStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSetAutocommitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SetAutocommitStatementContext = SetAutocommitStatementContext;

MySQLParser.prototype.setAutocommitStatement = function() {

    var localctx = new SetAutocommitStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, MySQLParser.RULE_setAutocommitStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3752;
        this.match(MySQLParser.SET);
        this.state = 3753;
        this.match(MySQLParser.AUTOCOMMIT);
        this.state = 3754;
        this.match(MySQLParser.EQUAL_SYMBOL);
        this.state = 3755;
        localctx.autocommitValue = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.ZERO_DECIMAL || _la===MySQLParser.ONE_DECIMAL)) {
            localctx.autocommitValue = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetTransactionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_setTransactionStatement;
    this.transactionContext = null; // Token
    return this;
}

SetTransactionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetTransactionStatementContext.prototype.constructor = SetTransactionStatementContext;

SetTransactionStatementContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

SetTransactionStatementContext.prototype.TRANSACTION = function() {
    return this.getToken(MySQLParser.TRANSACTION, 0);
};

SetTransactionStatementContext.prototype.transactionOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TransactionOptionContext);
    } else {
        return this.getTypedRuleContext(TransactionOptionContext,i);
    }
};

SetTransactionStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


SetTransactionStatementContext.prototype.GLOBAL = function() {
    return this.getToken(MySQLParser.GLOBAL, 0);
};

SetTransactionStatementContext.prototype.SESSION = function() {
    return this.getToken(MySQLParser.SESSION, 0);
};

SetTransactionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSetTransactionStatement(this);
	}
};

SetTransactionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSetTransactionStatement(this);
	}
};

SetTransactionStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSetTransactionStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SetTransactionStatementContext = SetTransactionStatementContext;

MySQLParser.prototype.setTransactionStatement = function() {

    var localctx = new SetTransactionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, MySQLParser.RULE_setTransactionStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3757;
        this.match(MySQLParser.SET);
        this.state = 3759;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.GLOBAL || _la===MySQLParser.SESSION) {
            this.state = 3758;
            localctx.transactionContext = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.GLOBAL || _la===MySQLParser.SESSION)) {
                localctx.transactionContext = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 3761;
        this.match(MySQLParser.TRANSACTION);
        this.state = 3762;
        this.transactionOption();
        this.state = 3767;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 3763;
            this.match(MySQLParser.COMMA);
            this.state = 3764;
            this.transactionOption();
            this.state = 3769;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TransactionModeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_transactionMode;
    return this;
}

TransactionModeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransactionModeContext.prototype.constructor = TransactionModeContext;

TransactionModeContext.prototype.WITH = function() {
    return this.getToken(MySQLParser.WITH, 0);
};

TransactionModeContext.prototype.CONSISTENT = function() {
    return this.getToken(MySQLParser.CONSISTENT, 0);
};

TransactionModeContext.prototype.SNAPSHOT = function() {
    return this.getToken(MySQLParser.SNAPSHOT, 0);
};

TransactionModeContext.prototype.READ = function() {
    return this.getToken(MySQLParser.READ, 0);
};

TransactionModeContext.prototype.WRITE = function() {
    return this.getToken(MySQLParser.WRITE, 0);
};

TransactionModeContext.prototype.ONLY = function() {
    return this.getToken(MySQLParser.ONLY, 0);
};

TransactionModeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTransactionMode(this);
	}
};

TransactionModeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTransactionMode(this);
	}
};

TransactionModeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTransactionMode(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TransactionModeContext = TransactionModeContext;

MySQLParser.prototype.transactionMode = function() {

    var localctx = new TransactionModeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, MySQLParser.RULE_transactionMode);
    try {
        this.state = 3777;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,552,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3770;
            this.match(MySQLParser.WITH);
            this.state = 3771;
            this.match(MySQLParser.CONSISTENT);
            this.state = 3772;
            this.match(MySQLParser.SNAPSHOT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3773;
            this.match(MySQLParser.READ);
            this.state = 3774;
            this.match(MySQLParser.WRITE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3775;
            this.match(MySQLParser.READ);
            this.state = 3776;
            this.match(MySQLParser.ONLY);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LockTableElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_lockTableElement;
    return this;
}

LockTableElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LockTableElementContext.prototype.constructor = LockTableElementContext;

LockTableElementContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

LockTableElementContext.prototype.lockAction = function() {
    return this.getTypedRuleContext(LockActionContext,0);
};

LockTableElementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

LockTableElementContext.prototype.AS = function() {
    return this.getToken(MySQLParser.AS, 0);
};

LockTableElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLockTableElement(this);
	}
};

LockTableElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLockTableElement(this);
	}
};

LockTableElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLockTableElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LockTableElementContext = LockTableElementContext;

MySQLParser.prototype.lockTableElement = function() {

    var localctx = new LockTableElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, MySQLParser.RULE_lockTableElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3779;
        this.tableName();
        this.state = 3784;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.AS || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
            this.state = 3781;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.AS) {
                this.state = 3780;
                this.match(MySQLParser.AS);
            }

            this.state = 3783;
            this.uid();
        }

        this.state = 3786;
        this.lockAction();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LockActionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_lockAction;
    return this;
}

LockActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LockActionContext.prototype.constructor = LockActionContext;

LockActionContext.prototype.READ = function() {
    return this.getToken(MySQLParser.READ, 0);
};

LockActionContext.prototype.LOCAL = function() {
    return this.getToken(MySQLParser.LOCAL, 0);
};

LockActionContext.prototype.WRITE = function() {
    return this.getToken(MySQLParser.WRITE, 0);
};

LockActionContext.prototype.LOW_PRIORITY = function() {
    return this.getToken(MySQLParser.LOW_PRIORITY, 0);
};

LockActionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLockAction(this);
	}
};

LockActionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLockAction(this);
	}
};

LockActionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLockAction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LockActionContext = LockActionContext;

MySQLParser.prototype.lockAction = function() {

    var localctx = new LockActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, MySQLParser.RULE_lockAction);
    var _la = 0; // Token type
    try {
        this.state = 3796;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.READ:
            this.enterOuterAlt(localctx, 1);
            this.state = 3788;
            this.match(MySQLParser.READ);
            this.state = 3790;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LOCAL) {
                this.state = 3789;
                this.match(MySQLParser.LOCAL);
            }

            break;
        case MySQLParser.LOW_PRIORITY:
        case MySQLParser.WRITE:
            this.enterOuterAlt(localctx, 2);
            this.state = 3793;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LOW_PRIORITY) {
                this.state = 3792;
                this.match(MySQLParser.LOW_PRIORITY);
            }

            this.state = 3795;
            this.match(MySQLParser.WRITE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TransactionOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_transactionOption;
    return this;
}

TransactionOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransactionOptionContext.prototype.constructor = TransactionOptionContext;

TransactionOptionContext.prototype.ISOLATION = function() {
    return this.getToken(MySQLParser.ISOLATION, 0);
};

TransactionOptionContext.prototype.LEVEL = function() {
    return this.getToken(MySQLParser.LEVEL, 0);
};

TransactionOptionContext.prototype.transactionLevel = function() {
    return this.getTypedRuleContext(TransactionLevelContext,0);
};

TransactionOptionContext.prototype.READ = function() {
    return this.getToken(MySQLParser.READ, 0);
};

TransactionOptionContext.prototype.WRITE = function() {
    return this.getToken(MySQLParser.WRITE, 0);
};

TransactionOptionContext.prototype.ONLY = function() {
    return this.getToken(MySQLParser.ONLY, 0);
};

TransactionOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTransactionOption(this);
	}
};

TransactionOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTransactionOption(this);
	}
};

TransactionOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTransactionOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TransactionOptionContext = TransactionOptionContext;

MySQLParser.prototype.transactionOption = function() {

    var localctx = new TransactionOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, MySQLParser.RULE_transactionOption);
    try {
        this.state = 3805;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,558,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3798;
            this.match(MySQLParser.ISOLATION);
            this.state = 3799;
            this.match(MySQLParser.LEVEL);
            this.state = 3800;
            this.transactionLevel();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3801;
            this.match(MySQLParser.READ);
            this.state = 3802;
            this.match(MySQLParser.WRITE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3803;
            this.match(MySQLParser.READ);
            this.state = 3804;
            this.match(MySQLParser.ONLY);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TransactionLevelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_transactionLevel;
    return this;
}

TransactionLevelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransactionLevelContext.prototype.constructor = TransactionLevelContext;

TransactionLevelContext.prototype.REPEATABLE = function() {
    return this.getToken(MySQLParser.REPEATABLE, 0);
};

TransactionLevelContext.prototype.READ = function() {
    return this.getToken(MySQLParser.READ, 0);
};

TransactionLevelContext.prototype.COMMITTED = function() {
    return this.getToken(MySQLParser.COMMITTED, 0);
};

TransactionLevelContext.prototype.UNCOMMITTED = function() {
    return this.getToken(MySQLParser.UNCOMMITTED, 0);
};

TransactionLevelContext.prototype.SERIALIZABLE = function() {
    return this.getToken(MySQLParser.SERIALIZABLE, 0);
};

TransactionLevelContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTransactionLevel(this);
	}
};

TransactionLevelContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTransactionLevel(this);
	}
};

TransactionLevelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTransactionLevel(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TransactionLevelContext = TransactionLevelContext;

MySQLParser.prototype.transactionLevel = function() {

    var localctx = new TransactionLevelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, MySQLParser.RULE_transactionLevel);
    try {
        this.state = 3814;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,559,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3807;
            this.match(MySQLParser.REPEATABLE);
            this.state = 3808;
            this.match(MySQLParser.READ);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3809;
            this.match(MySQLParser.READ);
            this.state = 3810;
            this.match(MySQLParser.COMMITTED);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3811;
            this.match(MySQLParser.READ);
            this.state = 3812;
            this.match(MySQLParser.UNCOMMITTED);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3813;
            this.match(MySQLParser.SERIALIZABLE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChangeMasterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_changeMaster;
    return this;
}

ChangeMasterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChangeMasterContext.prototype.constructor = ChangeMasterContext;

ChangeMasterContext.prototype.CHANGE = function() {
    return this.getToken(MySQLParser.CHANGE, 0);
};

ChangeMasterContext.prototype.MASTER = function() {
    return this.getToken(MySQLParser.MASTER, 0);
};

ChangeMasterContext.prototype.TO = function() {
    return this.getToken(MySQLParser.TO, 0);
};

ChangeMasterContext.prototype.masterOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MasterOptionContext);
    } else {
        return this.getTypedRuleContext(MasterOptionContext,i);
    }
};

ChangeMasterContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


ChangeMasterContext.prototype.channelOption = function() {
    return this.getTypedRuleContext(ChannelOptionContext,0);
};

ChangeMasterContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterChangeMaster(this);
	}
};

ChangeMasterContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitChangeMaster(this);
	}
};

ChangeMasterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitChangeMaster(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ChangeMasterContext = ChangeMasterContext;

MySQLParser.prototype.changeMaster = function() {

    var localctx = new ChangeMasterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, MySQLParser.RULE_changeMaster);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3816;
        this.match(MySQLParser.CHANGE);
        this.state = 3817;
        this.match(MySQLParser.MASTER);
        this.state = 3818;
        this.match(MySQLParser.TO);
        this.state = 3819;
        this.masterOption();
        this.state = 3824;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 3820;
            this.match(MySQLParser.COMMA);
            this.state = 3821;
            this.masterOption();
            this.state = 3826;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3828;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.FOR) {
            this.state = 3827;
            this.channelOption();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChangeReplicationFilterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_changeReplicationFilter;
    return this;
}

ChangeReplicationFilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChangeReplicationFilterContext.prototype.constructor = ChangeReplicationFilterContext;

ChangeReplicationFilterContext.prototype.CHANGE = function() {
    return this.getToken(MySQLParser.CHANGE, 0);
};

ChangeReplicationFilterContext.prototype.REPLICATION = function() {
    return this.getToken(MySQLParser.REPLICATION, 0);
};

ChangeReplicationFilterContext.prototype.FILTER = function() {
    return this.getToken(MySQLParser.FILTER, 0);
};

ChangeReplicationFilterContext.prototype.replicationFilter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ReplicationFilterContext);
    } else {
        return this.getTypedRuleContext(ReplicationFilterContext,i);
    }
};

ChangeReplicationFilterContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


ChangeReplicationFilterContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterChangeReplicationFilter(this);
	}
};

ChangeReplicationFilterContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitChangeReplicationFilter(this);
	}
};

ChangeReplicationFilterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitChangeReplicationFilter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ChangeReplicationFilterContext = ChangeReplicationFilterContext;

MySQLParser.prototype.changeReplicationFilter = function() {

    var localctx = new ChangeReplicationFilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, MySQLParser.RULE_changeReplicationFilter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3830;
        this.match(MySQLParser.CHANGE);
        this.state = 3831;
        this.match(MySQLParser.REPLICATION);
        this.state = 3832;
        this.match(MySQLParser.FILTER);
        this.state = 3833;
        this.replicationFilter();
        this.state = 3838;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 3834;
            this.match(MySQLParser.COMMA);
            this.state = 3835;
            this.replicationFilter();
            this.state = 3840;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PurgeBinaryLogsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_purgeBinaryLogs;
    this.purgeFormat = null; // Token
    this.fileName = null; // Token
    this.timeValue = null; // Token
    return this;
}

PurgeBinaryLogsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PurgeBinaryLogsContext.prototype.constructor = PurgeBinaryLogsContext;

PurgeBinaryLogsContext.prototype.PURGE = function() {
    return this.getToken(MySQLParser.PURGE, 0);
};

PurgeBinaryLogsContext.prototype.LOGS = function() {
    return this.getToken(MySQLParser.LOGS, 0);
};

PurgeBinaryLogsContext.prototype.BINARY = function() {
    return this.getToken(MySQLParser.BINARY, 0);
};

PurgeBinaryLogsContext.prototype.MASTER = function() {
    return this.getToken(MySQLParser.MASTER, 0);
};

PurgeBinaryLogsContext.prototype.TO = function() {
    return this.getToken(MySQLParser.TO, 0);
};

PurgeBinaryLogsContext.prototype.BEFORE = function() {
    return this.getToken(MySQLParser.BEFORE, 0);
};

PurgeBinaryLogsContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

PurgeBinaryLogsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPurgeBinaryLogs(this);
	}
};

PurgeBinaryLogsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPurgeBinaryLogs(this);
	}
};

PurgeBinaryLogsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPurgeBinaryLogs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PurgeBinaryLogsContext = PurgeBinaryLogsContext;

MySQLParser.prototype.purgeBinaryLogs = function() {

    var localctx = new PurgeBinaryLogsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, MySQLParser.RULE_purgeBinaryLogs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3841;
        this.match(MySQLParser.PURGE);
        this.state = 3842;
        localctx.purgeFormat = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.BINARY || _la===MySQLParser.MASTER)) {
            localctx.purgeFormat = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3843;
        this.match(MySQLParser.LOGS);
        this.state = 3848;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.TO:
            this.state = 3844;
            this.match(MySQLParser.TO);
            this.state = 3845;
            localctx.fileName = this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.BEFORE:
            this.state = 3846;
            this.match(MySQLParser.BEFORE);
            this.state = 3847;
            localctx.timeValue = this.match(MySQLParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResetMasterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_resetMaster;
    return this;
}

ResetMasterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResetMasterContext.prototype.constructor = ResetMasterContext;

ResetMasterContext.prototype.RESET = function() {
    return this.getToken(MySQLParser.RESET, 0);
};

ResetMasterContext.prototype.MASTER = function() {
    return this.getToken(MySQLParser.MASTER, 0);
};

ResetMasterContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterResetMaster(this);
	}
};

ResetMasterContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitResetMaster(this);
	}
};

ResetMasterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitResetMaster(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ResetMasterContext = ResetMasterContext;

MySQLParser.prototype.resetMaster = function() {

    var localctx = new ResetMasterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, MySQLParser.RULE_resetMaster);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3850;
        this.match(MySQLParser.RESET);
        this.state = 3851;
        this.match(MySQLParser.MASTER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResetSlaveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_resetSlave;
    return this;
}

ResetSlaveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResetSlaveContext.prototype.constructor = ResetSlaveContext;

ResetSlaveContext.prototype.RESET = function() {
    return this.getToken(MySQLParser.RESET, 0);
};

ResetSlaveContext.prototype.SLAVE = function() {
    return this.getToken(MySQLParser.SLAVE, 0);
};

ResetSlaveContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};

ResetSlaveContext.prototype.channelOption = function() {
    return this.getTypedRuleContext(ChannelOptionContext,0);
};

ResetSlaveContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterResetSlave(this);
	}
};

ResetSlaveContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitResetSlave(this);
	}
};

ResetSlaveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitResetSlave(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ResetSlaveContext = ResetSlaveContext;

MySQLParser.prototype.resetSlave = function() {

    var localctx = new ResetSlaveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, MySQLParser.RULE_resetSlave);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3853;
        this.match(MySQLParser.RESET);
        this.state = 3854;
        this.match(MySQLParser.SLAVE);
        this.state = 3856;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ALL) {
            this.state = 3855;
            this.match(MySQLParser.ALL);
        }

        this.state = 3859;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.FOR) {
            this.state = 3858;
            this.channelOption();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StartSlaveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_startSlave;
    return this;
}

StartSlaveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartSlaveContext.prototype.constructor = StartSlaveContext;

StartSlaveContext.prototype.START = function() {
    return this.getToken(MySQLParser.START, 0);
};

StartSlaveContext.prototype.SLAVE = function() {
    return this.getToken(MySQLParser.SLAVE, 0);
};

StartSlaveContext.prototype.threadType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ThreadTypeContext);
    } else {
        return this.getTypedRuleContext(ThreadTypeContext,i);
    }
};

StartSlaveContext.prototype.UNTIL = function() {
    return this.getToken(MySQLParser.UNTIL, 0);
};

StartSlaveContext.prototype.untilOption = function() {
    return this.getTypedRuleContext(UntilOptionContext,0);
};

StartSlaveContext.prototype.connectionOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConnectionOptionContext);
    } else {
        return this.getTypedRuleContext(ConnectionOptionContext,i);
    }
};

StartSlaveContext.prototype.channelOption = function() {
    return this.getTypedRuleContext(ChannelOptionContext,0);
};

StartSlaveContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


StartSlaveContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStartSlave(this);
	}
};

StartSlaveContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStartSlave(this);
	}
};

StartSlaveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStartSlave(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.StartSlaveContext = StartSlaveContext;

MySQLParser.prototype.startSlave = function() {

    var localctx = new StartSlaveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, MySQLParser.RULE_startSlave);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3861;
        this.match(MySQLParser.START);
        this.state = 3862;
        this.match(MySQLParser.SLAVE);
        this.state = 3871;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IO_THREAD || _la===MySQLParser.SQL_THREAD) {
            this.state = 3863;
            this.threadType();
            this.state = 3868;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 3864;
                this.match(MySQLParser.COMMA);
                this.state = 3865;
                this.threadType();
                this.state = 3870;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 3875;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.UNTIL) {
            this.state = 3873;
            this.match(MySQLParser.UNTIL);
            this.state = 3874;
            this.untilOption();
        }

        this.state = 3880;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.DEFAULT_AUTH || _la===MySQLParser.PASSWORD || _la===MySQLParser.PLUGIN_DIR || _la===MySQLParser.USER) {
            this.state = 3877;
            this.connectionOption();
            this.state = 3882;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3884;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.FOR) {
            this.state = 3883;
            this.channelOption();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StopSlaveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_stopSlave;
    return this;
}

StopSlaveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StopSlaveContext.prototype.constructor = StopSlaveContext;

StopSlaveContext.prototype.STOP = function() {
    return this.getToken(MySQLParser.STOP, 0);
};

StopSlaveContext.prototype.SLAVE = function() {
    return this.getToken(MySQLParser.SLAVE, 0);
};

StopSlaveContext.prototype.threadType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ThreadTypeContext);
    } else {
        return this.getTypedRuleContext(ThreadTypeContext,i);
    }
};

StopSlaveContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


StopSlaveContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStopSlave(this);
	}
};

StopSlaveContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStopSlave(this);
	}
};

StopSlaveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStopSlave(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.StopSlaveContext = StopSlaveContext;

MySQLParser.prototype.stopSlave = function() {

    var localctx = new StopSlaveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, MySQLParser.RULE_stopSlave);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3886;
        this.match(MySQLParser.STOP);
        this.state = 3887;
        this.match(MySQLParser.SLAVE);
        this.state = 3896;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IO_THREAD || _la===MySQLParser.SQL_THREAD) {
            this.state = 3888;
            this.threadType();
            this.state = 3893;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 3889;
                this.match(MySQLParser.COMMA);
                this.state = 3890;
                this.threadType();
                this.state = 3895;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StartGroupReplicationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_startGroupReplication;
    return this;
}

StartGroupReplicationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartGroupReplicationContext.prototype.constructor = StartGroupReplicationContext;

StartGroupReplicationContext.prototype.START = function() {
    return this.getToken(MySQLParser.START, 0);
};

StartGroupReplicationContext.prototype.GROUP_REPLICATION = function() {
    return this.getToken(MySQLParser.GROUP_REPLICATION, 0);
};

StartGroupReplicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStartGroupReplication(this);
	}
};

StartGroupReplicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStartGroupReplication(this);
	}
};

StartGroupReplicationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStartGroupReplication(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.StartGroupReplicationContext = StartGroupReplicationContext;

MySQLParser.prototype.startGroupReplication = function() {

    var localctx = new StartGroupReplicationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, MySQLParser.RULE_startGroupReplication);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3898;
        this.match(MySQLParser.START);
        this.state = 3899;
        this.match(MySQLParser.GROUP_REPLICATION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StopGroupReplicationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_stopGroupReplication;
    return this;
}

StopGroupReplicationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StopGroupReplicationContext.prototype.constructor = StopGroupReplicationContext;

StopGroupReplicationContext.prototype.STOP = function() {
    return this.getToken(MySQLParser.STOP, 0);
};

StopGroupReplicationContext.prototype.GROUP_REPLICATION = function() {
    return this.getToken(MySQLParser.GROUP_REPLICATION, 0);
};

StopGroupReplicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStopGroupReplication(this);
	}
};

StopGroupReplicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStopGroupReplication(this);
	}
};

StopGroupReplicationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStopGroupReplication(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.StopGroupReplicationContext = StopGroupReplicationContext;

MySQLParser.prototype.stopGroupReplication = function() {

    var localctx = new StopGroupReplicationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, MySQLParser.RULE_stopGroupReplication);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3901;
        this.match(MySQLParser.STOP);
        this.state = 3902;
        this.match(MySQLParser.GROUP_REPLICATION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MasterOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_masterOption;
    return this;
}

MasterOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MasterOptionContext.prototype.constructor = MasterOptionContext;


 
MasterOptionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MasterStringOptionContext(parser, ctx) {
	MasterOptionContext.call(this, parser);
    MasterOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MasterStringOptionContext.prototype = Object.create(MasterOptionContext.prototype);
MasterStringOptionContext.prototype.constructor = MasterStringOptionContext;

MySQLParser.MasterStringOptionContext = MasterStringOptionContext;

MasterStringOptionContext.prototype.stringMasterOption = function() {
    return this.getTypedRuleContext(StringMasterOptionContext,0);
};

MasterStringOptionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

MasterStringOptionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};
MasterStringOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterMasterStringOption(this);
	}
};

MasterStringOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitMasterStringOption(this);
	}
};

MasterStringOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitMasterStringOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MasterRealOptionContext(parser, ctx) {
	MasterOptionContext.call(this, parser);
    MasterOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MasterRealOptionContext.prototype = Object.create(MasterOptionContext.prototype);
MasterRealOptionContext.prototype.constructor = MasterRealOptionContext;

MySQLParser.MasterRealOptionContext = MasterRealOptionContext;

MasterRealOptionContext.prototype.MASTER_HEARTBEAT_PERIOD = function() {
    return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD, 0);
};

MasterRealOptionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

MasterRealOptionContext.prototype.REAL_LITERAL = function() {
    return this.getToken(MySQLParser.REAL_LITERAL, 0);
};
MasterRealOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterMasterRealOption(this);
	}
};

MasterRealOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitMasterRealOption(this);
	}
};

MasterRealOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitMasterRealOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MasterBoolOptionContext(parser, ctx) {
	MasterOptionContext.call(this, parser);
    this.boolVal = null; // Token;
    MasterOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MasterBoolOptionContext.prototype = Object.create(MasterOptionContext.prototype);
MasterBoolOptionContext.prototype.constructor = MasterBoolOptionContext;

MySQLParser.MasterBoolOptionContext = MasterBoolOptionContext;

MasterBoolOptionContext.prototype.boolMasterOption = function() {
    return this.getTypedRuleContext(BoolMasterOptionContext,0);
};

MasterBoolOptionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

MasterBoolOptionContext.prototype.ZERO_DECIMAL = function() {
    return this.getToken(MySQLParser.ZERO_DECIMAL, 0);
};

MasterBoolOptionContext.prototype.ONE_DECIMAL = function() {
    return this.getToken(MySQLParser.ONE_DECIMAL, 0);
};
MasterBoolOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterMasterBoolOption(this);
	}
};

MasterBoolOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitMasterBoolOption(this);
	}
};

MasterBoolOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitMasterBoolOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MasterUidListOptionContext(parser, ctx) {
	MasterOptionContext.call(this, parser);
    MasterOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MasterUidListOptionContext.prototype = Object.create(MasterOptionContext.prototype);
MasterUidListOptionContext.prototype.constructor = MasterUidListOptionContext;

MySQLParser.MasterUidListOptionContext = MasterUidListOptionContext;

MasterUidListOptionContext.prototype.IGNORE_SERVER_IDS = function() {
    return this.getToken(MySQLParser.IGNORE_SERVER_IDS, 0);
};

MasterUidListOptionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

MasterUidListOptionContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

MasterUidListOptionContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

MasterUidListOptionContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

MasterUidListOptionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

MasterUidListOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterMasterUidListOption(this);
	}
};

MasterUidListOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitMasterUidListOption(this);
	}
};

MasterUidListOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitMasterUidListOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MasterDecimalOptionContext(parser, ctx) {
	MasterOptionContext.call(this, parser);
    MasterOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MasterDecimalOptionContext.prototype = Object.create(MasterOptionContext.prototype);
MasterDecimalOptionContext.prototype.constructor = MasterDecimalOptionContext;

MySQLParser.MasterDecimalOptionContext = MasterDecimalOptionContext;

MasterDecimalOptionContext.prototype.decimalMasterOption = function() {
    return this.getTypedRuleContext(DecimalMasterOptionContext,0);
};

MasterDecimalOptionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

MasterDecimalOptionContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};
MasterDecimalOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterMasterDecimalOption(this);
	}
};

MasterDecimalOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitMasterDecimalOption(this);
	}
};

MasterDecimalOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitMasterDecimalOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.MasterOptionContext = MasterOptionContext;

MySQLParser.prototype.masterOption = function() {

    var localctx = new MasterOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, MySQLParser.RULE_masterOption);
    var _la = 0; // Token type
    try {
        this.state = 3933;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.MASTER_BIND:
        case MySQLParser.MASTER_HOST:
        case MySQLParser.MASTER_LOG_FILE:
        case MySQLParser.MASTER_PASSWORD:
        case MySQLParser.MASTER_SSL_CA:
        case MySQLParser.MASTER_SSL_CAPATH:
        case MySQLParser.MASTER_SSL_CERT:
        case MySQLParser.MASTER_SSL_CIPHER:
        case MySQLParser.MASTER_SSL_CRL:
        case MySQLParser.MASTER_SSL_CRLPATH:
        case MySQLParser.MASTER_SSL_KEY:
        case MySQLParser.MASTER_TLS_VERSION:
        case MySQLParser.MASTER_USER:
        case MySQLParser.RELAY_LOG_FILE:
            localctx = new MasterStringOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 3904;
            this.stringMasterOption();
            this.state = 3905;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 3906;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.MASTER_CONNECT_RETRY:
        case MySQLParser.MASTER_DELAY:
        case MySQLParser.MASTER_LOG_POS:
        case MySQLParser.MASTER_PORT:
        case MySQLParser.MASTER_RETRY_COUNT:
        case MySQLParser.RELAY_LOG_POS:
            localctx = new MasterDecimalOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 3908;
            this.decimalMasterOption();
            this.state = 3909;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 3910;
            this.decimalLiteral();
            break;
        case MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT:
        case MySQLParser.MASTER_AUTO_POSITION:
        case MySQLParser.MASTER_SSL:
            localctx = new MasterBoolOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 3912;
            this.boolMasterOption();
            this.state = 3913;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 3914;
            localctx.boolVal = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ZERO_DECIMAL || _la===MySQLParser.ONE_DECIMAL)) {
                localctx.boolVal = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case MySQLParser.MASTER_HEARTBEAT_PERIOD:
            localctx = new MasterRealOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 3916;
            this.match(MySQLParser.MASTER_HEARTBEAT_PERIOD);
            this.state = 3917;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 3918;
            this.match(MySQLParser.REAL_LITERAL);
            break;
        case MySQLParser.IGNORE_SERVER_IDS:
            localctx = new MasterUidListOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 3919;
            this.match(MySQLParser.IGNORE_SERVER_IDS);
            this.state = 3920;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 3921;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3930;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
                this.state = 3922;
                this.uid();
                this.state = 3927;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===MySQLParser.COMMA) {
                    this.state = 3923;
                    this.match(MySQLParser.COMMA);
                    this.state = 3924;
                    this.uid();
                    this.state = 3929;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 3932;
            this.match(MySQLParser.RR_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringMasterOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_stringMasterOption;
    return this;
}

StringMasterOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringMasterOptionContext.prototype.constructor = StringMasterOptionContext;

StringMasterOptionContext.prototype.MASTER_BIND = function() {
    return this.getToken(MySQLParser.MASTER_BIND, 0);
};

StringMasterOptionContext.prototype.MASTER_HOST = function() {
    return this.getToken(MySQLParser.MASTER_HOST, 0);
};

StringMasterOptionContext.prototype.MASTER_USER = function() {
    return this.getToken(MySQLParser.MASTER_USER, 0);
};

StringMasterOptionContext.prototype.MASTER_PASSWORD = function() {
    return this.getToken(MySQLParser.MASTER_PASSWORD, 0);
};

StringMasterOptionContext.prototype.MASTER_LOG_FILE = function() {
    return this.getToken(MySQLParser.MASTER_LOG_FILE, 0);
};

StringMasterOptionContext.prototype.RELAY_LOG_FILE = function() {
    return this.getToken(MySQLParser.RELAY_LOG_FILE, 0);
};

StringMasterOptionContext.prototype.MASTER_SSL_CA = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CA, 0);
};

StringMasterOptionContext.prototype.MASTER_SSL_CAPATH = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CAPATH, 0);
};

StringMasterOptionContext.prototype.MASTER_SSL_CERT = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CERT, 0);
};

StringMasterOptionContext.prototype.MASTER_SSL_CRL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CRL, 0);
};

StringMasterOptionContext.prototype.MASTER_SSL_CRLPATH = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CRLPATH, 0);
};

StringMasterOptionContext.prototype.MASTER_SSL_KEY = function() {
    return this.getToken(MySQLParser.MASTER_SSL_KEY, 0);
};

StringMasterOptionContext.prototype.MASTER_SSL_CIPHER = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CIPHER, 0);
};

StringMasterOptionContext.prototype.MASTER_TLS_VERSION = function() {
    return this.getToken(MySQLParser.MASTER_TLS_VERSION, 0);
};

StringMasterOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStringMasterOption(this);
	}
};

StringMasterOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStringMasterOption(this);
	}
};

StringMasterOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStringMasterOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.StringMasterOptionContext = StringMasterOptionContext;

MySQLParser.prototype.stringMasterOption = function() {

    var localctx = new StringMasterOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, MySQLParser.RULE_stringMasterOption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3935;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.MASTER_BIND || ((((_la - 410)) & ~0x1f) == 0 && ((1 << (_la - 410)) & ((1 << (MySQLParser.MASTER_HOST - 410)) | (1 << (MySQLParser.MASTER_LOG_FILE - 410)) | (1 << (MySQLParser.MASTER_PASSWORD - 410)) | (1 << (MySQLParser.MASTER_SSL_CA - 410)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 410)) | (1 << (MySQLParser.MASTER_SSL_CERT - 410)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 410)) | (1 << (MySQLParser.MASTER_SSL_CRL - 410)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 410)) | (1 << (MySQLParser.MASTER_SSL_KEY - 410)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 410)) | (1 << (MySQLParser.MASTER_USER - 410)))) !== 0) || _la===MySQLParser.RELAY_LOG_FILE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DecimalMasterOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_decimalMasterOption;
    return this;
}

DecimalMasterOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecimalMasterOptionContext.prototype.constructor = DecimalMasterOptionContext;

DecimalMasterOptionContext.prototype.MASTER_PORT = function() {
    return this.getToken(MySQLParser.MASTER_PORT, 0);
};

DecimalMasterOptionContext.prototype.MASTER_CONNECT_RETRY = function() {
    return this.getToken(MySQLParser.MASTER_CONNECT_RETRY, 0);
};

DecimalMasterOptionContext.prototype.MASTER_RETRY_COUNT = function() {
    return this.getToken(MySQLParser.MASTER_RETRY_COUNT, 0);
};

DecimalMasterOptionContext.prototype.MASTER_DELAY = function() {
    return this.getToken(MySQLParser.MASTER_DELAY, 0);
};

DecimalMasterOptionContext.prototype.MASTER_LOG_POS = function() {
    return this.getToken(MySQLParser.MASTER_LOG_POS, 0);
};

DecimalMasterOptionContext.prototype.RELAY_LOG_POS = function() {
    return this.getToken(MySQLParser.RELAY_LOG_POS, 0);
};

DecimalMasterOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDecimalMasterOption(this);
	}
};

DecimalMasterOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDecimalMasterOption(this);
	}
};

DecimalMasterOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDecimalMasterOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DecimalMasterOptionContext = DecimalMasterOptionContext;

MySQLParser.prototype.decimalMasterOption = function() {

    var localctx = new DecimalMasterOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, MySQLParser.RULE_decimalMasterOption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3937;
        _la = this._input.LA(1);
        if(!(((((_la - 407)) & ~0x1f) == 0 && ((1 << (_la - 407)) & ((1 << (MySQLParser.MASTER_CONNECT_RETRY - 407)) | (1 << (MySQLParser.MASTER_DELAY - 407)) | (1 << (MySQLParser.MASTER_LOG_POS - 407)) | (1 << (MySQLParser.MASTER_PORT - 407)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 407)))) !== 0) || _la===MySQLParser.RELAY_LOG_POS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BoolMasterOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_boolMasterOption;
    return this;
}

BoolMasterOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BoolMasterOptionContext.prototype.constructor = BoolMasterOptionContext;

BoolMasterOptionContext.prototype.MASTER_AUTO_POSITION = function() {
    return this.getToken(MySQLParser.MASTER_AUTO_POSITION, 0);
};

BoolMasterOptionContext.prototype.MASTER_SSL = function() {
    return this.getToken(MySQLParser.MASTER_SSL, 0);
};

BoolMasterOptionContext.prototype.MASTER_SSL_VERIFY_SERVER_CERT = function() {
    return this.getToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT, 0);
};

BoolMasterOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterBoolMasterOption(this);
	}
};

BoolMasterOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitBoolMasterOption(this);
	}
};

BoolMasterOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitBoolMasterOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.BoolMasterOptionContext = BoolMasterOptionContext;

MySQLParser.prototype.boolMasterOption = function() {

    var localctx = new BoolMasterOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, MySQLParser.RULE_boolMasterOption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3939;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT || _la===MySQLParser.MASTER_AUTO_POSITION || _la===MySQLParser.MASTER_SSL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChannelOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_channelOption;
    return this;
}

ChannelOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChannelOptionContext.prototype.constructor = ChannelOptionContext;

ChannelOptionContext.prototype.FOR = function() {
    return this.getToken(MySQLParser.FOR, 0);
};

ChannelOptionContext.prototype.CHANNEL = function() {
    return this.getToken(MySQLParser.CHANNEL, 0);
};

ChannelOptionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

ChannelOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterChannelOption(this);
	}
};

ChannelOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitChannelOption(this);
	}
};

ChannelOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitChannelOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ChannelOptionContext = ChannelOptionContext;

MySQLParser.prototype.channelOption = function() {

    var localctx = new ChannelOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, MySQLParser.RULE_channelOption);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3941;
        this.match(MySQLParser.FOR);
        this.state = 3942;
        this.match(MySQLParser.CHANNEL);
        this.state = 3943;
        this.match(MySQLParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReplicationFilterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_replicationFilter;
    return this;
}

ReplicationFilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReplicationFilterContext.prototype.constructor = ReplicationFilterContext;


 
ReplicationFilterContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function WildIgnoreTableReplicationContext(parser, ctx) {
	ReplicationFilterContext.call(this, parser);
    ReplicationFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WildIgnoreTableReplicationContext.prototype = Object.create(ReplicationFilterContext.prototype);
WildIgnoreTableReplicationContext.prototype.constructor = WildIgnoreTableReplicationContext;

MySQLParser.WildIgnoreTableReplicationContext = WildIgnoreTableReplicationContext;

WildIgnoreTableReplicationContext.prototype.REPLICATE_WILD_IGNORE_TABLE = function() {
    return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE, 0);
};

WildIgnoreTableReplicationContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

WildIgnoreTableReplicationContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

WildIgnoreTableReplicationContext.prototype.simpleStrings = function() {
    return this.getTypedRuleContext(SimpleStringsContext,0);
};

WildIgnoreTableReplicationContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};
WildIgnoreTableReplicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWildIgnoreTableReplication(this);
	}
};

WildIgnoreTableReplicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWildIgnoreTableReplication(this);
	}
};

WildIgnoreTableReplicationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWildIgnoreTableReplication(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DoTableReplicationContext(parser, ctx) {
	ReplicationFilterContext.call(this, parser);
    ReplicationFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoTableReplicationContext.prototype = Object.create(ReplicationFilterContext.prototype);
DoTableReplicationContext.prototype.constructor = DoTableReplicationContext;

MySQLParser.DoTableReplicationContext = DoTableReplicationContext;

DoTableReplicationContext.prototype.REPLICATE_DO_TABLE = function() {
    return this.getToken(MySQLParser.REPLICATE_DO_TABLE, 0);
};

DoTableReplicationContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

DoTableReplicationContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

DoTableReplicationContext.prototype.tables = function() {
    return this.getTypedRuleContext(TablesContext,0);
};

DoTableReplicationContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};
DoTableReplicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDoTableReplication(this);
	}
};

DoTableReplicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDoTableReplication(this);
	}
};

DoTableReplicationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDoTableReplication(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IgnoreTableReplicationContext(parser, ctx) {
	ReplicationFilterContext.call(this, parser);
    ReplicationFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IgnoreTableReplicationContext.prototype = Object.create(ReplicationFilterContext.prototype);
IgnoreTableReplicationContext.prototype.constructor = IgnoreTableReplicationContext;

MySQLParser.IgnoreTableReplicationContext = IgnoreTableReplicationContext;

IgnoreTableReplicationContext.prototype.REPLICATE_IGNORE_TABLE = function() {
    return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE, 0);
};

IgnoreTableReplicationContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

IgnoreTableReplicationContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

IgnoreTableReplicationContext.prototype.tables = function() {
    return this.getTypedRuleContext(TablesContext,0);
};

IgnoreTableReplicationContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};
IgnoreTableReplicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIgnoreTableReplication(this);
	}
};

IgnoreTableReplicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIgnoreTableReplication(this);
	}
};

IgnoreTableReplicationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIgnoreTableReplication(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RewriteDbReplicationContext(parser, ctx) {
	ReplicationFilterContext.call(this, parser);
    ReplicationFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RewriteDbReplicationContext.prototype = Object.create(ReplicationFilterContext.prototype);
RewriteDbReplicationContext.prototype.constructor = RewriteDbReplicationContext;

MySQLParser.RewriteDbReplicationContext = RewriteDbReplicationContext;

RewriteDbReplicationContext.prototype.REPLICATE_REWRITE_DB = function() {
    return this.getToken(MySQLParser.REPLICATE_REWRITE_DB, 0);
};

RewriteDbReplicationContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

RewriteDbReplicationContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

RewriteDbReplicationContext.prototype.tablePair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TablePairContext);
    } else {
        return this.getTypedRuleContext(TablePairContext,i);
    }
};

RewriteDbReplicationContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

RewriteDbReplicationContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

RewriteDbReplicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRewriteDbReplication(this);
	}
};

RewriteDbReplicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRewriteDbReplication(this);
	}
};

RewriteDbReplicationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRewriteDbReplication(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DoDbReplicationContext(parser, ctx) {
	ReplicationFilterContext.call(this, parser);
    ReplicationFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoDbReplicationContext.prototype = Object.create(ReplicationFilterContext.prototype);
DoDbReplicationContext.prototype.constructor = DoDbReplicationContext;

MySQLParser.DoDbReplicationContext = DoDbReplicationContext;

DoDbReplicationContext.prototype.REPLICATE_DO_DB = function() {
    return this.getToken(MySQLParser.REPLICATE_DO_DB, 0);
};

DoDbReplicationContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

DoDbReplicationContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

DoDbReplicationContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

DoDbReplicationContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};
DoDbReplicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDoDbReplication(this);
	}
};

DoDbReplicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDoDbReplication(this);
	}
};

DoDbReplicationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDoDbReplication(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IgnoreDbReplicationContext(parser, ctx) {
	ReplicationFilterContext.call(this, parser);
    ReplicationFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IgnoreDbReplicationContext.prototype = Object.create(ReplicationFilterContext.prototype);
IgnoreDbReplicationContext.prototype.constructor = IgnoreDbReplicationContext;

MySQLParser.IgnoreDbReplicationContext = IgnoreDbReplicationContext;

IgnoreDbReplicationContext.prototype.REPLICATE_IGNORE_DB = function() {
    return this.getToken(MySQLParser.REPLICATE_IGNORE_DB, 0);
};

IgnoreDbReplicationContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

IgnoreDbReplicationContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

IgnoreDbReplicationContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

IgnoreDbReplicationContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};
IgnoreDbReplicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIgnoreDbReplication(this);
	}
};

IgnoreDbReplicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIgnoreDbReplication(this);
	}
};

IgnoreDbReplicationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIgnoreDbReplication(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function WildDoTableReplicationContext(parser, ctx) {
	ReplicationFilterContext.call(this, parser);
    ReplicationFilterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WildDoTableReplicationContext.prototype = Object.create(ReplicationFilterContext.prototype);
WildDoTableReplicationContext.prototype.constructor = WildDoTableReplicationContext;

MySQLParser.WildDoTableReplicationContext = WildDoTableReplicationContext;

WildDoTableReplicationContext.prototype.REPLICATE_WILD_DO_TABLE = function() {
    return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE, 0);
};

WildDoTableReplicationContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

WildDoTableReplicationContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

WildDoTableReplicationContext.prototype.simpleStrings = function() {
    return this.getTypedRuleContext(SimpleStringsContext,0);
};

WildDoTableReplicationContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};
WildDoTableReplicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWildDoTableReplication(this);
	}
};

WildDoTableReplicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWildDoTableReplication(this);
	}
};

WildDoTableReplicationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWildDoTableReplication(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.ReplicationFilterContext = ReplicationFilterContext;

MySQLParser.prototype.replicationFilter = function() {

    var localctx = new ReplicationFilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, MySQLParser.RULE_replicationFilter);
    var _la = 0; // Token type
    try {
        this.state = 3994;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.REPLICATE_DO_DB:
            localctx = new DoDbReplicationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 3945;
            this.match(MySQLParser.REPLICATE_DO_DB);
            this.state = 3946;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 3947;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3948;
            this.uidList();
            this.state = 3949;
            this.match(MySQLParser.RR_BRACKET);
            break;
        case MySQLParser.REPLICATE_IGNORE_DB:
            localctx = new IgnoreDbReplicationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 3951;
            this.match(MySQLParser.REPLICATE_IGNORE_DB);
            this.state = 3952;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 3953;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3954;
            this.uidList();
            this.state = 3955;
            this.match(MySQLParser.RR_BRACKET);
            break;
        case MySQLParser.REPLICATE_DO_TABLE:
            localctx = new DoTableReplicationContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 3957;
            this.match(MySQLParser.REPLICATE_DO_TABLE);
            this.state = 3958;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 3959;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3960;
            this.tables();
            this.state = 3961;
            this.match(MySQLParser.RR_BRACKET);
            break;
        case MySQLParser.REPLICATE_IGNORE_TABLE:
            localctx = new IgnoreTableReplicationContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 3963;
            this.match(MySQLParser.REPLICATE_IGNORE_TABLE);
            this.state = 3964;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 3965;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3966;
            this.tables();
            this.state = 3967;
            this.match(MySQLParser.RR_BRACKET);
            break;
        case MySQLParser.REPLICATE_WILD_DO_TABLE:
            localctx = new WildDoTableReplicationContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 3969;
            this.match(MySQLParser.REPLICATE_WILD_DO_TABLE);
            this.state = 3970;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 3971;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3972;
            this.simpleStrings();
            this.state = 3973;
            this.match(MySQLParser.RR_BRACKET);
            break;
        case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
            localctx = new WildIgnoreTableReplicationContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 3975;
            this.match(MySQLParser.REPLICATE_WILD_IGNORE_TABLE);
            this.state = 3976;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 3977;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3978;
            this.simpleStrings();
            this.state = 3979;
            this.match(MySQLParser.RR_BRACKET);
            break;
        case MySQLParser.REPLICATE_REWRITE_DB:
            localctx = new RewriteDbReplicationContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 3981;
            this.match(MySQLParser.REPLICATE_REWRITE_DB);
            this.state = 3982;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 3983;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 3984;
            this.tablePair();
            this.state = 3989;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 3985;
                this.match(MySQLParser.COMMA);
                this.state = 3986;
                this.tablePair();
                this.state = 3991;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3992;
            this.match(MySQLParser.RR_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablePairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tablePair;
    this.firstTable = null; // TableNameContext
    this.secondTable = null; // TableNameContext
    return this;
}

TablePairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePairContext.prototype.constructor = TablePairContext;

TablePairContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

TablePairContext.prototype.COMMA = function() {
    return this.getToken(MySQLParser.COMMA, 0);
};

TablePairContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

TablePairContext.prototype.tableName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableNameContext);
    } else {
        return this.getTypedRuleContext(TableNameContext,i);
    }
};

TablePairContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTablePair(this);
	}
};

TablePairContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTablePair(this);
	}
};

TablePairContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTablePair(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TablePairContext = TablePairContext;

MySQLParser.prototype.tablePair = function() {

    var localctx = new TablePairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, MySQLParser.RULE_tablePair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3996;
        this.match(MySQLParser.LR_BRACKET);
        this.state = 3997;
        localctx.firstTable = this.tableName();
        this.state = 3998;
        this.match(MySQLParser.COMMA);
        this.state = 3999;
        localctx.secondTable = this.tableName();
        this.state = 4000;
        this.match(MySQLParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ThreadTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_threadType;
    return this;
}

ThreadTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThreadTypeContext.prototype.constructor = ThreadTypeContext;

ThreadTypeContext.prototype.IO_THREAD = function() {
    return this.getToken(MySQLParser.IO_THREAD, 0);
};

ThreadTypeContext.prototype.SQL_THREAD = function() {
    return this.getToken(MySQLParser.SQL_THREAD, 0);
};

ThreadTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterThreadType(this);
	}
};

ThreadTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitThreadType(this);
	}
};

ThreadTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitThreadType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ThreadTypeContext = ThreadTypeContext;

MySQLParser.prototype.threadType = function() {

    var localctx = new ThreadTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, MySQLParser.RULE_threadType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4002;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.IO_THREAD || _la===MySQLParser.SQL_THREAD)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UntilOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_untilOption;
    return this;
}

UntilOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UntilOptionContext.prototype.constructor = UntilOptionContext;


 
UntilOptionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function GtidsUntilOptionContext(parser, ctx) {
	UntilOptionContext.call(this, parser);
    this.gtids = null; // Token;
    UntilOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GtidsUntilOptionContext.prototype = Object.create(UntilOptionContext.prototype);
GtidsUntilOptionContext.prototype.constructor = GtidsUntilOptionContext;

MySQLParser.GtidsUntilOptionContext = GtidsUntilOptionContext;

GtidsUntilOptionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

GtidsUntilOptionContext.prototype.gtuidSet = function() {
    return this.getTypedRuleContext(GtuidSetContext,0);
};

GtidsUntilOptionContext.prototype.SQL_BEFORE_GTIDS = function() {
    return this.getToken(MySQLParser.SQL_BEFORE_GTIDS, 0);
};

GtidsUntilOptionContext.prototype.SQL_AFTER_GTIDS = function() {
    return this.getToken(MySQLParser.SQL_AFTER_GTIDS, 0);
};
GtidsUntilOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGtidsUntilOption(this);
	}
};

GtidsUntilOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGtidsUntilOption(this);
	}
};

GtidsUntilOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGtidsUntilOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SqlGapsUntilOptionContext(parser, ctx) {
	UntilOptionContext.call(this, parser);
    UntilOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SqlGapsUntilOptionContext.prototype = Object.create(UntilOptionContext.prototype);
SqlGapsUntilOptionContext.prototype.constructor = SqlGapsUntilOptionContext;

MySQLParser.SqlGapsUntilOptionContext = SqlGapsUntilOptionContext;

SqlGapsUntilOptionContext.prototype.SQL_AFTER_MTS_GAPS = function() {
    return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS, 0);
};
SqlGapsUntilOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSqlGapsUntilOption(this);
	}
};

SqlGapsUntilOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSqlGapsUntilOption(this);
	}
};

SqlGapsUntilOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSqlGapsUntilOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MasterLogUntilOptionContext(parser, ctx) {
	UntilOptionContext.call(this, parser);
    UntilOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MasterLogUntilOptionContext.prototype = Object.create(UntilOptionContext.prototype);
MasterLogUntilOptionContext.prototype.constructor = MasterLogUntilOptionContext;

MySQLParser.MasterLogUntilOptionContext = MasterLogUntilOptionContext;

MasterLogUntilOptionContext.prototype.MASTER_LOG_FILE = function() {
    return this.getToken(MySQLParser.MASTER_LOG_FILE, 0);
};

MasterLogUntilOptionContext.prototype.EQUAL_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.EQUAL_SYMBOL);
    } else {
        return this.getToken(MySQLParser.EQUAL_SYMBOL, i);
    }
};


MasterLogUntilOptionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

MasterLogUntilOptionContext.prototype.COMMA = function() {
    return this.getToken(MySQLParser.COMMA, 0);
};

MasterLogUntilOptionContext.prototype.MASTER_LOG_POS = function() {
    return this.getToken(MySQLParser.MASTER_LOG_POS, 0);
};

MasterLogUntilOptionContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};
MasterLogUntilOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterMasterLogUntilOption(this);
	}
};

MasterLogUntilOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitMasterLogUntilOption(this);
	}
};

MasterLogUntilOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitMasterLogUntilOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RelayLogUntilOptionContext(parser, ctx) {
	UntilOptionContext.call(this, parser);
    UntilOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelayLogUntilOptionContext.prototype = Object.create(UntilOptionContext.prototype);
RelayLogUntilOptionContext.prototype.constructor = RelayLogUntilOptionContext;

MySQLParser.RelayLogUntilOptionContext = RelayLogUntilOptionContext;

RelayLogUntilOptionContext.prototype.RELAY_LOG_FILE = function() {
    return this.getToken(MySQLParser.RELAY_LOG_FILE, 0);
};

RelayLogUntilOptionContext.prototype.EQUAL_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.EQUAL_SYMBOL);
    } else {
        return this.getToken(MySQLParser.EQUAL_SYMBOL, i);
    }
};


RelayLogUntilOptionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

RelayLogUntilOptionContext.prototype.COMMA = function() {
    return this.getToken(MySQLParser.COMMA, 0);
};

RelayLogUntilOptionContext.prototype.RELAY_LOG_POS = function() {
    return this.getToken(MySQLParser.RELAY_LOG_POS, 0);
};

RelayLogUntilOptionContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};
RelayLogUntilOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRelayLogUntilOption(this);
	}
};

RelayLogUntilOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRelayLogUntilOption(this);
	}
};

RelayLogUntilOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRelayLogUntilOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.UntilOptionContext = UntilOptionContext;

MySQLParser.prototype.untilOption = function() {

    var localctx = new UntilOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, MySQLParser.RULE_untilOption);
    var _la = 0; // Token type
    try {
        this.state = 4022;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.SQL_AFTER_GTIDS:
        case MySQLParser.SQL_BEFORE_GTIDS:
            localctx = new GtidsUntilOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 4004;
            localctx.gtids = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.SQL_AFTER_GTIDS || _la===MySQLParser.SQL_BEFORE_GTIDS)) {
                localctx.gtids = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4005;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 4006;
            this.gtuidSet();
            break;
        case MySQLParser.MASTER_LOG_FILE:
            localctx = new MasterLogUntilOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 4007;
            this.match(MySQLParser.MASTER_LOG_FILE);
            this.state = 4008;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 4009;
            this.match(MySQLParser.STRING_LITERAL);
            this.state = 4010;
            this.match(MySQLParser.COMMA);
            this.state = 4011;
            this.match(MySQLParser.MASTER_LOG_POS);
            this.state = 4012;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 4013;
            this.decimalLiteral();
            break;
        case MySQLParser.RELAY_LOG_FILE:
            localctx = new RelayLogUntilOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 4014;
            this.match(MySQLParser.RELAY_LOG_FILE);
            this.state = 4015;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 4016;
            this.match(MySQLParser.STRING_LITERAL);
            this.state = 4017;
            this.match(MySQLParser.COMMA);
            this.state = 4018;
            this.match(MySQLParser.RELAY_LOG_POS);
            this.state = 4019;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 4020;
            this.decimalLiteral();
            break;
        case MySQLParser.SQL_AFTER_MTS_GAPS:
            localctx = new SqlGapsUntilOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 4021;
            this.match(MySQLParser.SQL_AFTER_MTS_GAPS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConnectionOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_connectionOption;
    return this;
}

ConnectionOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConnectionOptionContext.prototype.constructor = ConnectionOptionContext;


 
ConnectionOptionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PluginDirConnectionOptionContext(parser, ctx) {
	ConnectionOptionContext.call(this, parser);
    this.conOptPluginDir = null; // Token;
    ConnectionOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PluginDirConnectionOptionContext.prototype = Object.create(ConnectionOptionContext.prototype);
PluginDirConnectionOptionContext.prototype.constructor = PluginDirConnectionOptionContext;

MySQLParser.PluginDirConnectionOptionContext = PluginDirConnectionOptionContext;

PluginDirConnectionOptionContext.prototype.PLUGIN_DIR = function() {
    return this.getToken(MySQLParser.PLUGIN_DIR, 0);
};

PluginDirConnectionOptionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

PluginDirConnectionOptionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};
PluginDirConnectionOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPluginDirConnectionOption(this);
	}
};

PluginDirConnectionOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPluginDirConnectionOption(this);
	}
};

PluginDirConnectionOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPluginDirConnectionOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UserConnectionOptionContext(parser, ctx) {
	ConnectionOptionContext.call(this, parser);
    this.conOptUser = null; // Token;
    ConnectionOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UserConnectionOptionContext.prototype = Object.create(ConnectionOptionContext.prototype);
UserConnectionOptionContext.prototype.constructor = UserConnectionOptionContext;

MySQLParser.UserConnectionOptionContext = UserConnectionOptionContext;

UserConnectionOptionContext.prototype.USER = function() {
    return this.getToken(MySQLParser.USER, 0);
};

UserConnectionOptionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

UserConnectionOptionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};
UserConnectionOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUserConnectionOption(this);
	}
};

UserConnectionOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUserConnectionOption(this);
	}
};

UserConnectionOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUserConnectionOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DefaultAuthConnectionOptionContext(parser, ctx) {
	ConnectionOptionContext.call(this, parser);
    this.conOptDefAuth = null; // Token;
    ConnectionOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DefaultAuthConnectionOptionContext.prototype = Object.create(ConnectionOptionContext.prototype);
DefaultAuthConnectionOptionContext.prototype.constructor = DefaultAuthConnectionOptionContext;

MySQLParser.DefaultAuthConnectionOptionContext = DefaultAuthConnectionOptionContext;

DefaultAuthConnectionOptionContext.prototype.DEFAULT_AUTH = function() {
    return this.getToken(MySQLParser.DEFAULT_AUTH, 0);
};

DefaultAuthConnectionOptionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

DefaultAuthConnectionOptionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};
DefaultAuthConnectionOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDefaultAuthConnectionOption(this);
	}
};

DefaultAuthConnectionOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDefaultAuthConnectionOption(this);
	}
};

DefaultAuthConnectionOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDefaultAuthConnectionOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PasswordConnectionOptionContext(parser, ctx) {
	ConnectionOptionContext.call(this, parser);
    this.conOptPassword = null; // Token;
    ConnectionOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PasswordConnectionOptionContext.prototype = Object.create(ConnectionOptionContext.prototype);
PasswordConnectionOptionContext.prototype.constructor = PasswordConnectionOptionContext;

MySQLParser.PasswordConnectionOptionContext = PasswordConnectionOptionContext;

PasswordConnectionOptionContext.prototype.PASSWORD = function() {
    return this.getToken(MySQLParser.PASSWORD, 0);
};

PasswordConnectionOptionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

PasswordConnectionOptionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};
PasswordConnectionOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPasswordConnectionOption(this);
	}
};

PasswordConnectionOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPasswordConnectionOption(this);
	}
};

PasswordConnectionOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPasswordConnectionOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.ConnectionOptionContext = ConnectionOptionContext;

MySQLParser.prototype.connectionOption = function() {

    var localctx = new ConnectionOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, MySQLParser.RULE_connectionOption);
    try {
        this.state = 4036;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.USER:
            localctx = new UserConnectionOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 4024;
            this.match(MySQLParser.USER);
            this.state = 4025;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 4026;
            localctx.conOptUser = this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.PASSWORD:
            localctx = new PasswordConnectionOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 4027;
            this.match(MySQLParser.PASSWORD);
            this.state = 4028;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 4029;
            localctx.conOptPassword = this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.DEFAULT_AUTH:
            localctx = new DefaultAuthConnectionOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 4030;
            this.match(MySQLParser.DEFAULT_AUTH);
            this.state = 4031;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 4032;
            localctx.conOptDefAuth = this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.PLUGIN_DIR:
            localctx = new PluginDirConnectionOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 4033;
            this.match(MySQLParser.PLUGIN_DIR);
            this.state = 4034;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 4035;
            localctx.conOptPluginDir = this.match(MySQLParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GtuidSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_gtuidSet;
    return this;
}

GtuidSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GtuidSetContext.prototype.constructor = GtuidSetContext;

GtuidSetContext.prototype.uuidSet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UuidSetContext);
    } else {
        return this.getTypedRuleContext(UuidSetContext,i);
    }
};

GtuidSetContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


GtuidSetContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

GtuidSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGtuidSet(this);
	}
};

GtuidSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGtuidSet(this);
	}
};

GtuidSetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGtuidSet(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GtuidSetContext = GtuidSetContext;

MySQLParser.prototype.gtuidSet = function() {

    var localctx = new GtuidSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, MySQLParser.RULE_gtuidSet);
    var _la = 0; // Token type
    try {
        this.state = 4047;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ZERO_DECIMAL:
        case MySQLParser.ONE_DECIMAL:
        case MySQLParser.TWO_DECIMAL:
        case MySQLParser.DECIMAL_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 4038;
            this.uuidSet();
            this.state = 4043;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 4039;
                this.match(MySQLParser.COMMA);
                this.state = 4040;
                this.uuidSet();
                this.state = 4045;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case MySQLParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 4046;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function XaStartTransactionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_xaStartTransaction;
    this.xaStart = null; // Token
    this.xaAction = null; // Token
    return this;
}

XaStartTransactionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XaStartTransactionContext.prototype.constructor = XaStartTransactionContext;

XaStartTransactionContext.prototype.XA = function() {
    return this.getToken(MySQLParser.XA, 0);
};

XaStartTransactionContext.prototype.xid = function() {
    return this.getTypedRuleContext(XidContext,0);
};

XaStartTransactionContext.prototype.START = function() {
    return this.getToken(MySQLParser.START, 0);
};

XaStartTransactionContext.prototype.BEGIN = function() {
    return this.getToken(MySQLParser.BEGIN, 0);
};

XaStartTransactionContext.prototype.JOIN = function() {
    return this.getToken(MySQLParser.JOIN, 0);
};

XaStartTransactionContext.prototype.RESUME = function() {
    return this.getToken(MySQLParser.RESUME, 0);
};

XaStartTransactionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterXaStartTransaction(this);
	}
};

XaStartTransactionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitXaStartTransaction(this);
	}
};

XaStartTransactionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitXaStartTransaction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.XaStartTransactionContext = XaStartTransactionContext;

MySQLParser.prototype.xaStartTransaction = function() {

    var localctx = new XaStartTransactionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, MySQLParser.RULE_xaStartTransaction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4049;
        this.match(MySQLParser.XA);
        this.state = 4050;
        localctx.xaStart = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.BEGIN || _la===MySQLParser.START)) {
            localctx.xaStart = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4051;
        this.xid();
        this.state = 4053;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.JOIN || _la===MySQLParser.RESUME) {
            this.state = 4052;
            localctx.xaAction = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.JOIN || _la===MySQLParser.RESUME)) {
                localctx.xaAction = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function XaEndTransactionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_xaEndTransaction;
    return this;
}

XaEndTransactionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XaEndTransactionContext.prototype.constructor = XaEndTransactionContext;

XaEndTransactionContext.prototype.XA = function() {
    return this.getToken(MySQLParser.XA, 0);
};

XaEndTransactionContext.prototype.END = function() {
    return this.getToken(MySQLParser.END, 0);
};

XaEndTransactionContext.prototype.xid = function() {
    return this.getTypedRuleContext(XidContext,0);
};

XaEndTransactionContext.prototype.SUSPEND = function() {
    return this.getToken(MySQLParser.SUSPEND, 0);
};

XaEndTransactionContext.prototype.FOR = function() {
    return this.getToken(MySQLParser.FOR, 0);
};

XaEndTransactionContext.prototype.MIGRATE = function() {
    return this.getToken(MySQLParser.MIGRATE, 0);
};

XaEndTransactionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterXaEndTransaction(this);
	}
};

XaEndTransactionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitXaEndTransaction(this);
	}
};

XaEndTransactionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitXaEndTransaction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.XaEndTransactionContext = XaEndTransactionContext;

MySQLParser.prototype.xaEndTransaction = function() {

    var localctx = new XaEndTransactionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, MySQLParser.RULE_xaEndTransaction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4055;
        this.match(MySQLParser.XA);
        this.state = 4056;
        this.match(MySQLParser.END);
        this.state = 4057;
        this.xid();
        this.state = 4063;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.SUSPEND) {
            this.state = 4058;
            this.match(MySQLParser.SUSPEND);
            this.state = 4061;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR) {
                this.state = 4059;
                this.match(MySQLParser.FOR);
                this.state = 4060;
                this.match(MySQLParser.MIGRATE);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function XaPrepareStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_xaPrepareStatement;
    return this;
}

XaPrepareStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XaPrepareStatementContext.prototype.constructor = XaPrepareStatementContext;

XaPrepareStatementContext.prototype.XA = function() {
    return this.getToken(MySQLParser.XA, 0);
};

XaPrepareStatementContext.prototype.PREPARE = function() {
    return this.getToken(MySQLParser.PREPARE, 0);
};

XaPrepareStatementContext.prototype.xid = function() {
    return this.getTypedRuleContext(XidContext,0);
};

XaPrepareStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterXaPrepareStatement(this);
	}
};

XaPrepareStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitXaPrepareStatement(this);
	}
};

XaPrepareStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitXaPrepareStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.XaPrepareStatementContext = XaPrepareStatementContext;

MySQLParser.prototype.xaPrepareStatement = function() {

    var localctx = new XaPrepareStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, MySQLParser.RULE_xaPrepareStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4065;
        this.match(MySQLParser.XA);
        this.state = 4066;
        this.match(MySQLParser.PREPARE);
        this.state = 4067;
        this.xid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function XaCommitWorkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_xaCommitWork;
    return this;
}

XaCommitWorkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XaCommitWorkContext.prototype.constructor = XaCommitWorkContext;

XaCommitWorkContext.prototype.XA = function() {
    return this.getToken(MySQLParser.XA, 0);
};

XaCommitWorkContext.prototype.COMMIT = function() {
    return this.getToken(MySQLParser.COMMIT, 0);
};

XaCommitWorkContext.prototype.xid = function() {
    return this.getTypedRuleContext(XidContext,0);
};

XaCommitWorkContext.prototype.ONE = function() {
    return this.getToken(MySQLParser.ONE, 0);
};

XaCommitWorkContext.prototype.PHASE = function() {
    return this.getToken(MySQLParser.PHASE, 0);
};

XaCommitWorkContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterXaCommitWork(this);
	}
};

XaCommitWorkContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitXaCommitWork(this);
	}
};

XaCommitWorkContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitXaCommitWork(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.XaCommitWorkContext = XaCommitWorkContext;

MySQLParser.prototype.xaCommitWork = function() {

    var localctx = new XaCommitWorkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, MySQLParser.RULE_xaCommitWork);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4069;
        this.match(MySQLParser.XA);
        this.state = 4070;
        this.match(MySQLParser.COMMIT);
        this.state = 4071;
        this.xid();
        this.state = 4074;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ONE) {
            this.state = 4072;
            this.match(MySQLParser.ONE);
            this.state = 4073;
            this.match(MySQLParser.PHASE);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function XaRollbackWorkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_xaRollbackWork;
    return this;
}

XaRollbackWorkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XaRollbackWorkContext.prototype.constructor = XaRollbackWorkContext;

XaRollbackWorkContext.prototype.XA = function() {
    return this.getToken(MySQLParser.XA, 0);
};

XaRollbackWorkContext.prototype.ROLLBACK = function() {
    return this.getToken(MySQLParser.ROLLBACK, 0);
};

XaRollbackWorkContext.prototype.xid = function() {
    return this.getTypedRuleContext(XidContext,0);
};

XaRollbackWorkContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterXaRollbackWork(this);
	}
};

XaRollbackWorkContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitXaRollbackWork(this);
	}
};

XaRollbackWorkContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitXaRollbackWork(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.XaRollbackWorkContext = XaRollbackWorkContext;

MySQLParser.prototype.xaRollbackWork = function() {

    var localctx = new XaRollbackWorkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, MySQLParser.RULE_xaRollbackWork);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4076;
        this.match(MySQLParser.XA);
        this.state = 4077;
        this.match(MySQLParser.ROLLBACK);
        this.state = 4078;
        this.xid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function XaRecoverWorkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_xaRecoverWork;
    return this;
}

XaRecoverWorkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XaRecoverWorkContext.prototype.constructor = XaRecoverWorkContext;

XaRecoverWorkContext.prototype.XA = function() {
    return this.getToken(MySQLParser.XA, 0);
};

XaRecoverWorkContext.prototype.RECOVER = function() {
    return this.getToken(MySQLParser.RECOVER, 0);
};

XaRecoverWorkContext.prototype.CONVERT = function() {
    return this.getToken(MySQLParser.CONVERT, 0);
};

XaRecoverWorkContext.prototype.xid = function() {
    return this.getTypedRuleContext(XidContext,0);
};

XaRecoverWorkContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterXaRecoverWork(this);
	}
};

XaRecoverWorkContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitXaRecoverWork(this);
	}
};

XaRecoverWorkContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitXaRecoverWork(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.XaRecoverWorkContext = XaRecoverWorkContext;

MySQLParser.prototype.xaRecoverWork = function() {

    var localctx = new XaRecoverWorkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, MySQLParser.RULE_xaRecoverWork);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4080;
        this.match(MySQLParser.XA);
        this.state = 4081;
        this.match(MySQLParser.RECOVER);
        this.state = 4084;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.CONVERT) {
            this.state = 4082;
            this.match(MySQLParser.CONVERT);
            this.state = 4083;
            this.xid();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrepareStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_prepareStatement;
    this.query = null; // Token
    this.variable = null; // Token
    return this;
}

PrepareStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrepareStatementContext.prototype.constructor = PrepareStatementContext;

PrepareStatementContext.prototype.PREPARE = function() {
    return this.getToken(MySQLParser.PREPARE, 0);
};

PrepareStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

PrepareStatementContext.prototype.FROM = function() {
    return this.getToken(MySQLParser.FROM, 0);
};

PrepareStatementContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

PrepareStatementContext.prototype.LOCAL_ID = function() {
    return this.getToken(MySQLParser.LOCAL_ID, 0);
};

PrepareStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPrepareStatement(this);
	}
};

PrepareStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPrepareStatement(this);
	}
};

PrepareStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPrepareStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PrepareStatementContext = PrepareStatementContext;

MySQLParser.prototype.prepareStatement = function() {

    var localctx = new PrepareStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, MySQLParser.RULE_prepareStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4086;
        this.match(MySQLParser.PREPARE);
        this.state = 4087;
        this.uid();
        this.state = 4088;
        this.match(MySQLParser.FROM);
        this.state = 4091;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.STRING_LITERAL:
            this.state = 4089;
            localctx.query = this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.LOCAL_ID:
            this.state = 4090;
            localctx.variable = this.match(MySQLParser.LOCAL_ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExecuteStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_executeStatement;
    return this;
}

ExecuteStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExecuteStatementContext.prototype.constructor = ExecuteStatementContext;

ExecuteStatementContext.prototype.EXECUTE = function() {
    return this.getToken(MySQLParser.EXECUTE, 0);
};

ExecuteStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

ExecuteStatementContext.prototype.USING = function() {
    return this.getToken(MySQLParser.USING, 0);
};

ExecuteStatementContext.prototype.userVariables = function() {
    return this.getTypedRuleContext(UserVariablesContext,0);
};

ExecuteStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExecuteStatement(this);
	}
};

ExecuteStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExecuteStatement(this);
	}
};

ExecuteStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExecuteStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ExecuteStatementContext = ExecuteStatementContext;

MySQLParser.prototype.executeStatement = function() {

    var localctx = new ExecuteStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, MySQLParser.RULE_executeStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4093;
        this.match(MySQLParser.EXECUTE);
        this.state = 4094;
        this.uid();
        this.state = 4097;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.USING) {
            this.state = 4095;
            this.match(MySQLParser.USING);
            this.state = 4096;
            this.userVariables();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeallocatePrepareContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_deallocatePrepare;
    this.dropFormat = null; // Token
    return this;
}

DeallocatePrepareContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeallocatePrepareContext.prototype.constructor = DeallocatePrepareContext;

DeallocatePrepareContext.prototype.PREPARE = function() {
    return this.getToken(MySQLParser.PREPARE, 0);
};

DeallocatePrepareContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DeallocatePrepareContext.prototype.DEALLOCATE = function() {
    return this.getToken(MySQLParser.DEALLOCATE, 0);
};

DeallocatePrepareContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

DeallocatePrepareContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDeallocatePrepare(this);
	}
};

DeallocatePrepareContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDeallocatePrepare(this);
	}
};

DeallocatePrepareContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDeallocatePrepare(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DeallocatePrepareContext = DeallocatePrepareContext;

MySQLParser.prototype.deallocatePrepare = function() {

    var localctx = new DeallocatePrepareContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, MySQLParser.RULE_deallocatePrepare);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4099;
        localctx.dropFormat = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.DROP || _la===MySQLParser.DEALLOCATE)) {
            localctx.dropFormat = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4100;
        this.match(MySQLParser.PREPARE);
        this.state = 4101;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RoutineBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_routineBody;
    return this;
}

RoutineBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoutineBodyContext.prototype.constructor = RoutineBodyContext;

RoutineBodyContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

RoutineBodyContext.prototype.sqlStatement = function() {
    return this.getTypedRuleContext(SqlStatementContext,0);
};

RoutineBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRoutineBody(this);
	}
};

RoutineBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRoutineBody(this);
	}
};

RoutineBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRoutineBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RoutineBodyContext = RoutineBodyContext;

MySQLParser.prototype.routineBody = function() {

    var localctx = new RoutineBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, MySQLParser.RULE_routineBody);
    try {
        this.state = 4105;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,589,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4103;
            this.blockStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4104;
            this.sqlStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_blockStatement;
    return this;
}

BlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementContext.prototype.constructor = BlockStatementContext;

BlockStatementContext.prototype.BEGIN = function() {
    return this.getToken(MySQLParser.BEGIN, 0);
};

BlockStatementContext.prototype.END = function() {
    return this.getToken(MySQLParser.END, 0);
};

BlockStatementContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

BlockStatementContext.prototype.COLON_SYMB = function() {
    return this.getToken(MySQLParser.COLON_SYMB, 0);
};

BlockStatementContext.prototype.declareVariable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclareVariableContext);
    } else {
        return this.getTypedRuleContext(DeclareVariableContext,i);
    }
};

BlockStatementContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.SEMI);
    } else {
        return this.getToken(MySQLParser.SEMI, i);
    }
};


BlockStatementContext.prototype.declareCondition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclareConditionContext);
    } else {
        return this.getTypedRuleContext(DeclareConditionContext,i);
    }
};

BlockStatementContext.prototype.declareCursor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclareCursorContext);
    } else {
        return this.getTypedRuleContext(DeclareCursorContext,i);
    }
};

BlockStatementContext.prototype.declareHandler = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclareHandlerContext);
    } else {
        return this.getTypedRuleContext(DeclareHandlerContext,i);
    }
};

BlockStatementContext.prototype.procedureSqlStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
    } else {
        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
    }
};

BlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterBlockStatement(this);
	}
};

BlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitBlockStatement(this);
	}
};

BlockStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitBlockStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.BlockStatementContext = BlockStatementContext;

MySQLParser.prototype.blockStatement = function() {

    var localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, MySQLParser.RULE_blockStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4110;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,590,this._ctx);
        if(la_===1) {
            this.state = 4107;
            this.uid();
            this.state = 4108;
            this.match(MySQLParser.COLON_SYMB);

        }
        this.state = 4112;
        this.match(MySQLParser.BEGIN);
        this.state = 4151;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,596,this._ctx);
        if(la_===1) {
            this.state = 4118;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,591,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 4113;
                    this.declareVariable();
                    this.state = 4114;
                    this.match(MySQLParser.SEMI); 
                }
                this.state = 4120;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,591,this._ctx);
            }

            this.state = 4126;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,592,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 4121;
                    this.declareCondition();
                    this.state = 4122;
                    this.match(MySQLParser.SEMI); 
                }
                this.state = 4128;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,592,this._ctx);
            }

            this.state = 4134;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,593,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 4129;
                    this.declareCursor();
                    this.state = 4130;
                    this.match(MySQLParser.SEMI); 
                }
                this.state = 4136;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,593,this._ctx);
            }

            this.state = 4142;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.DECLARE) {
                this.state = 4137;
                this.declareHandler();
                this.state = 4138;
                this.match(MySQLParser.SEMI);
                this.state = 4144;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4148;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,595,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 4145;
                    this.procedureSqlStatement(); 
                }
                this.state = 4150;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,595,this._ctx);
            }


        }
        this.state = 4153;
        this.match(MySQLParser.END);
        this.state = 4155;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,597,this._ctx);
        if(la_===1) {
            this.state = 4154;
            this.uid();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CaseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_caseStatement;
    return this;
}

CaseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseStatementContext.prototype.constructor = CaseStatementContext;

CaseStatementContext.prototype.CASE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.CASE);
    } else {
        return this.getToken(MySQLParser.CASE, i);
    }
};


CaseStatementContext.prototype.END = function() {
    return this.getToken(MySQLParser.END, 0);
};

CaseStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CaseStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CaseStatementContext.prototype.caseAlternative = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseAlternativeContext);
    } else {
        return this.getTypedRuleContext(CaseAlternativeContext,i);
    }
};

CaseStatementContext.prototype.ELSE = function() {
    return this.getToken(MySQLParser.ELSE, 0);
};

CaseStatementContext.prototype.procedureSqlStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
    } else {
        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
    }
};

CaseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCaseStatement(this);
	}
};

CaseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCaseStatement(this);
	}
};

CaseStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCaseStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CaseStatementContext = CaseStatementContext;

MySQLParser.prototype.caseStatement = function() {

    var localctx = new CaseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, MySQLParser.RULE_caseStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4157;
        this.match(MySQLParser.CASE);
        this.state = 4160;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,598,this._ctx);
        if(la_===1) {
            this.state = 4158;
            this.uid();

        } else if(la_===2) {
            this.state = 4159;
            this.expression(0);

        }
        this.state = 4163; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 4162;
            this.caseAlternative();
            this.state = 4165; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===MySQLParser.WHEN);
        this.state = 4173;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ELSE) {
            this.state = 4167;
            this.match(MySQLParser.ELSE);
            this.state = 4169; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 4168;
            		this.procedureSqlStatement();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 4171; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,600, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        }

        this.state = 4175;
        this.match(MySQLParser.END);
        this.state = 4176;
        this.match(MySQLParser.CASE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_ifStatement;
    this._procedureSqlStatement = null; // ProcedureSqlStatementContext
    this.thenStatements = []; // of ProcedureSqlStatementContexts
    this.elseStatements = []; // of ProcedureSqlStatementContexts
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.IF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.IF);
    } else {
        return this.getToken(MySQLParser.IF, i);
    }
};


IfStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfStatementContext.prototype.THEN = function() {
    return this.getToken(MySQLParser.THEN, 0);
};

IfStatementContext.prototype.END = function() {
    return this.getToken(MySQLParser.END, 0);
};

IfStatementContext.prototype.elifAlternative = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElifAlternativeContext);
    } else {
        return this.getTypedRuleContext(ElifAlternativeContext,i);
    }
};

IfStatementContext.prototype.ELSE = function() {
    return this.getToken(MySQLParser.ELSE, 0);
};

IfStatementContext.prototype.procedureSqlStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
    } else {
        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
    }
};

IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIfStatement(this);
	}
};

IfStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIfStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IfStatementContext = IfStatementContext;

MySQLParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, MySQLParser.RULE_ifStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4178;
        this.match(MySQLParser.IF);
        this.state = 4179;
        this.expression(0);
        this.state = 4180;
        this.match(MySQLParser.THEN);
        this.state = 4182; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 4181;
        		localctx._procedureSqlStatement = this.procedureSqlStatement();
        		localctx.thenStatements.push(localctx._procedureSqlStatement);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 4184; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,602, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 4189;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.ELSEIF) {
            this.state = 4186;
            this.elifAlternative();
            this.state = 4191;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4198;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ELSE) {
            this.state = 4192;
            this.match(MySQLParser.ELSE);
            this.state = 4194; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 4193;
            		localctx._procedureSqlStatement = this.procedureSqlStatement();
            		localctx.elseStatements.push(localctx._procedureSqlStatement);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 4196; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,604, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        }

        this.state = 4200;
        this.match(MySQLParser.END);
        this.state = 4201;
        this.match(MySQLParser.IF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IterateStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_iterateStatement;
    return this;
}

IterateStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterateStatementContext.prototype.constructor = IterateStatementContext;

IterateStatementContext.prototype.ITERATE = function() {
    return this.getToken(MySQLParser.ITERATE, 0);
};

IterateStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

IterateStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIterateStatement(this);
	}
};

IterateStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIterateStatement(this);
	}
};

IterateStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIterateStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IterateStatementContext = IterateStatementContext;

MySQLParser.prototype.iterateStatement = function() {

    var localctx = new IterateStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, MySQLParser.RULE_iterateStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4203;
        this.match(MySQLParser.ITERATE);
        this.state = 4204;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LeaveStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_leaveStatement;
    return this;
}

LeaveStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LeaveStatementContext.prototype.constructor = LeaveStatementContext;

LeaveStatementContext.prototype.LEAVE = function() {
    return this.getToken(MySQLParser.LEAVE, 0);
};

LeaveStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

LeaveStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLeaveStatement(this);
	}
};

LeaveStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLeaveStatement(this);
	}
};

LeaveStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLeaveStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LeaveStatementContext = LeaveStatementContext;

MySQLParser.prototype.leaveStatement = function() {

    var localctx = new LeaveStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, MySQLParser.RULE_leaveStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4206;
        this.match(MySQLParser.LEAVE);
        this.state = 4207;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LoopStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_loopStatement;
    return this;
}

LoopStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoopStatementContext.prototype.constructor = LoopStatementContext;

LoopStatementContext.prototype.LOOP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.LOOP);
    } else {
        return this.getToken(MySQLParser.LOOP, i);
    }
};


LoopStatementContext.prototype.END = function() {
    return this.getToken(MySQLParser.END, 0);
};

LoopStatementContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

LoopStatementContext.prototype.COLON_SYMB = function() {
    return this.getToken(MySQLParser.COLON_SYMB, 0);
};

LoopStatementContext.prototype.procedureSqlStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
    } else {
        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
    }
};

LoopStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLoopStatement(this);
	}
};

LoopStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLoopStatement(this);
	}
};

LoopStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLoopStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LoopStatementContext = LoopStatementContext;

MySQLParser.prototype.loopStatement = function() {

    var localctx = new LoopStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, MySQLParser.RULE_loopStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4212;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
            this.state = 4209;
            this.uid();
            this.state = 4210;
            this.match(MySQLParser.COLON_SYMB);
        }

        this.state = 4214;
        this.match(MySQLParser.LOOP);
        this.state = 4216; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 4215;
        		this.procedureSqlStatement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 4218; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,607, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 4220;
        this.match(MySQLParser.END);
        this.state = 4221;
        this.match(MySQLParser.LOOP);
        this.state = 4223;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
            this.state = 4222;
            this.uid();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RepeatStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_repeatStatement;
    return this;
}

RepeatStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RepeatStatementContext.prototype.constructor = RepeatStatementContext;

RepeatStatementContext.prototype.REPEAT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.REPEAT);
    } else {
        return this.getToken(MySQLParser.REPEAT, i);
    }
};


RepeatStatementContext.prototype.UNTIL = function() {
    return this.getToken(MySQLParser.UNTIL, 0);
};

RepeatStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

RepeatStatementContext.prototype.END = function() {
    return this.getToken(MySQLParser.END, 0);
};

RepeatStatementContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

RepeatStatementContext.prototype.COLON_SYMB = function() {
    return this.getToken(MySQLParser.COLON_SYMB, 0);
};

RepeatStatementContext.prototype.procedureSqlStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
    } else {
        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
    }
};

RepeatStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRepeatStatement(this);
	}
};

RepeatStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRepeatStatement(this);
	}
};

RepeatStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRepeatStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RepeatStatementContext = RepeatStatementContext;

MySQLParser.prototype.repeatStatement = function() {

    var localctx = new RepeatStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, MySQLParser.RULE_repeatStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4228;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
            this.state = 4225;
            this.uid();
            this.state = 4226;
            this.match(MySQLParser.COLON_SYMB);
        }

        this.state = 4230;
        this.match(MySQLParser.REPEAT);
        this.state = 4232; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 4231;
        		this.procedureSqlStatement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 4234; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,610, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 4236;
        this.match(MySQLParser.UNTIL);
        this.state = 4237;
        this.expression(0);
        this.state = 4238;
        this.match(MySQLParser.END);
        this.state = 4239;
        this.match(MySQLParser.REPEAT);
        this.state = 4241;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
            this.state = 4240;
            this.uid();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(MySQLParser.RETURN, 0);
};

ReturnStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitReturnStatement(this);
	}
};

ReturnStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitReturnStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ReturnStatementContext = ReturnStatementContext;

MySQLParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, MySQLParser.RULE_returnStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4243;
        this.match(MySQLParser.RETURN);
        this.state = 4244;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_whileStatement;
    return this;
}

WhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.WHILE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.WHILE);
    } else {
        return this.getToken(MySQLParser.WHILE, i);
    }
};


WhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileStatementContext.prototype.DO = function() {
    return this.getToken(MySQLParser.DO, 0);
};

WhileStatementContext.prototype.END = function() {
    return this.getToken(MySQLParser.END, 0);
};

WhileStatementContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

WhileStatementContext.prototype.COLON_SYMB = function() {
    return this.getToken(MySQLParser.COLON_SYMB, 0);
};

WhileStatementContext.prototype.procedureSqlStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
    } else {
        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
    }
};

WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWhileStatement(this);
	}
};

WhileStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWhileStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.WhileStatementContext = WhileStatementContext;

MySQLParser.prototype.whileStatement = function() {

    var localctx = new WhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, MySQLParser.RULE_whileStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4249;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
            this.state = 4246;
            this.uid();
            this.state = 4247;
            this.match(MySQLParser.COLON_SYMB);
        }

        this.state = 4251;
        this.match(MySQLParser.WHILE);
        this.state = 4252;
        this.expression(0);
        this.state = 4253;
        this.match(MySQLParser.DO);
        this.state = 4255; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 4254;
        		this.procedureSqlStatement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 4257; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,613, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 4259;
        this.match(MySQLParser.END);
        this.state = 4260;
        this.match(MySQLParser.WHILE);
        this.state = 4262;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)))) !== 0) || _la===MySQLParser.LEFT || _la===MySQLParser.NUMBER || _la===MySQLParser.RIGHT || _la===MySQLParser.STACKED || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVISIBLE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.VISIBLE - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.QUARTER - 593)) | (1 << (MySQLParser.MONTH - 593)) | (1 << (MySQLParser.DAY - 593)) | (1 << (MySQLParser.HOUR - 593)) | (1 << (MySQLParser.MINUTE - 593)) | (1 << (MySQLParser.WEEK - 593)) | (1 << (MySQLParser.SECOND - 593)) | (1 << (MySQLParser.MICROSECOND - 593)) | (1 << (MySQLParser.TABLES - 593)) | (1 << (MySQLParser.ROUTINE - 593)) | (1 << (MySQLParser.EXECUTE - 593)) | (1 << (MySQLParser.FILE - 593)) | (1 << (MySQLParser.PROCESS - 593)) | (1 << (MySQLParser.RELOAD - 593)) | (1 << (MySQLParser.SHUTDOWN - 593)) | (1 << (MySQLParser.SUPER - 593)) | (1 << (MySQLParser.PRIVILEGES - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)) | (1 << (MySQLParser.ARMSCII8 - 625)) | (1 << (MySQLParser.ASCII - 625)) | (1 << (MySQLParser.BIG5 - 625)) | (1 << (MySQLParser.CP1250 - 625)) | (1 << (MySQLParser.CP1251 - 625)) | (1 << (MySQLParser.CP1256 - 625)) | (1 << (MySQLParser.CP1257 - 625)) | (1 << (MySQLParser.CP850 - 625)) | (1 << (MySQLParser.CP852 - 625)) | (1 << (MySQLParser.CP866 - 625)) | (1 << (MySQLParser.CP932 - 625)) | (1 << (MySQLParser.DEC8 - 625)) | (1 << (MySQLParser.EUCJPMS - 625)) | (1 << (MySQLParser.EUCKR - 625)) | (1 << (MySQLParser.GB2312 - 625)) | (1 << (MySQLParser.GBK - 625)) | (1 << (MySQLParser.GEOSTD8 - 625)) | (1 << (MySQLParser.GREEK - 625)) | (1 << (MySQLParser.HEBREW - 625)) | (1 << (MySQLParser.HP8 - 625)))) !== 0) || ((((_la - 657)) & ~0x1f) == 0 && ((1 << (_la - 657)) & ((1 << (MySQLParser.KEYBCS2 - 657)) | (1 << (MySQLParser.KOI8R - 657)) | (1 << (MySQLParser.KOI8U - 657)) | (1 << (MySQLParser.LATIN1 - 657)) | (1 << (MySQLParser.LATIN2 - 657)) | (1 << (MySQLParser.LATIN5 - 657)) | (1 << (MySQLParser.LATIN7 - 657)) | (1 << (MySQLParser.MACCE - 657)) | (1 << (MySQLParser.MACROMAN - 657)) | (1 << (MySQLParser.SJIS - 657)) | (1 << (MySQLParser.SWE7 - 657)) | (1 << (MySQLParser.TIS620 - 657)) | (1 << (MySQLParser.UCS2 - 657)) | (1 << (MySQLParser.UJIS - 657)) | (1 << (MySQLParser.UTF16 - 657)) | (1 << (MySQLParser.UTF16LE - 657)) | (1 << (MySQLParser.UTF32 - 657)) | (1 << (MySQLParser.UTF8 - 657)) | (1 << (MySQLParser.UTF8MB3 - 657)) | (1 << (MySQLParser.UTF8MB4 - 657)) | (1 << (MySQLParser.ARCHIVE - 657)) | (1 << (MySQLParser.BLACKHOLE - 657)) | (1 << (MySQLParser.CSV - 657)) | (1 << (MySQLParser.FEDERATED - 657)) | (1 << (MySQLParser.INNODB - 657)) | (1 << (MySQLParser.MEMORY - 657)) | (1 << (MySQLParser.MRG_MYISAM - 657)) | (1 << (MySQLParser.MYISAM - 657)) | (1 << (MySQLParser.NDB - 657)) | (1 << (MySQLParser.NDBCLUSTER - 657)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 657)) | (1 << (MySQLParser.TOKUDB - 657)))) !== 0) || ((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 689)) | (1 << (MySQLParser.LINESTRING - 689)) | (1 << (MySQLParser.MULTILINESTRING - 689)) | (1 << (MySQLParser.MULTIPOINT - 689)) | (1 << (MySQLParser.MULTIPOLYGON - 689)) | (1 << (MySQLParser.POINT - 689)) | (1 << (MySQLParser.POLYGON - 689)) | (1 << (MySQLParser.ABS - 689)) | (1 << (MySQLParser.ACOS - 689)) | (1 << (MySQLParser.ADDDATE - 689)) | (1 << (MySQLParser.ADDTIME - 689)) | (1 << (MySQLParser.AES_DECRYPT - 689)) | (1 << (MySQLParser.AES_ENCRYPT - 689)) | (1 << (MySQLParser.AREA - 689)) | (1 << (MySQLParser.ASBINARY - 689)) | (1 << (MySQLParser.ASIN - 689)) | (1 << (MySQLParser.ASTEXT - 689)) | (1 << (MySQLParser.ASWKB - 689)) | (1 << (MySQLParser.ASWKT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 689)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 689)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 689)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 689)) | (1 << (MySQLParser.ATAN - 689)) | (1 << (MySQLParser.ATAN2 - 689)))) !== 0) || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (MySQLParser.BENCHMARK - 721)) | (1 << (MySQLParser.BIN - 721)) | (1 << (MySQLParser.BIT_COUNT - 721)) | (1 << (MySQLParser.BIT_LENGTH - 721)) | (1 << (MySQLParser.BUFFER - 721)) | (1 << (MySQLParser.CATALOG_NAME - 721)) | (1 << (MySQLParser.CEIL - 721)) | (1 << (MySQLParser.CEILING - 721)) | (1 << (MySQLParser.CENTROID - 721)) | (1 << (MySQLParser.CHARACTER_LENGTH - 721)) | (1 << (MySQLParser.CHARSET - 721)) | (1 << (MySQLParser.CHAR_LENGTH - 721)) | (1 << (MySQLParser.COERCIBILITY - 721)) | (1 << (MySQLParser.COLLATION - 721)) | (1 << (MySQLParser.COMPRESS - 721)) | (1 << (MySQLParser.CONCAT - 721)) | (1 << (MySQLParser.CONCAT_WS - 721)) | (1 << (MySQLParser.CONNECTION_ID - 721)) | (1 << (MySQLParser.CONV - 721)) | (1 << (MySQLParser.CONVERT_TZ - 721)) | (1 << (MySQLParser.COS - 721)) | (1 << (MySQLParser.COT - 721)) | (1 << (MySQLParser.CRC32 - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 721)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 721)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 721)) | (1 << (MySQLParser.CREATE_DIGEST - 721)) | (1 << (MySQLParser.CROSSES - 721)) | (1 << (MySQLParser.DATEDIFF - 721)) | (1 << (MySQLParser.DATE_FORMAT - 721)) | (1 << (MySQLParser.DAYNAME - 721)) | (1 << (MySQLParser.DAYOFMONTH - 721)))) !== 0) || ((((_la - 753)) & ~0x1f) == 0 && ((1 << (_la - 753)) & ((1 << (MySQLParser.DAYOFWEEK - 753)) | (1 << (MySQLParser.DAYOFYEAR - 753)) | (1 << (MySQLParser.DECODE - 753)) | (1 << (MySQLParser.DEGREES - 753)) | (1 << (MySQLParser.DES_DECRYPT - 753)) | (1 << (MySQLParser.DES_ENCRYPT - 753)) | (1 << (MySQLParser.DIMENSION - 753)) | (1 << (MySQLParser.DISJOINT - 753)) | (1 << (MySQLParser.ELT - 753)) | (1 << (MySQLParser.ENCODE - 753)) | (1 << (MySQLParser.ENCRYPT - 753)) | (1 << (MySQLParser.ENDPOINT - 753)) | (1 << (MySQLParser.ENVELOPE - 753)) | (1 << (MySQLParser.EQUALS - 753)) | (1 << (MySQLParser.EXP - 753)) | (1 << (MySQLParser.EXPORT_SET - 753)) | (1 << (MySQLParser.EXTERIORRING - 753)) | (1 << (MySQLParser.EXTRACTVALUE - 753)) | (1 << (MySQLParser.FIELD - 753)) | (1 << (MySQLParser.FIND_IN_SET - 753)) | (1 << (MySQLParser.FLOOR - 753)) | (1 << (MySQLParser.FORMAT - 753)) | (1 << (MySQLParser.FOUND_ROWS - 753)) | (1 << (MySQLParser.FROM_BASE64 - 753)) | (1 << (MySQLParser.FROM_DAYS - 753)) | (1 << (MySQLParser.FROM_UNIXTIME - 753)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 753)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 753)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 753)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 753)))) !== 0) || ((((_la - 785)) & ~0x1f) == 0 && ((1 << (_la - 785)) & ((1 << (MySQLParser.GEOMETRYN - 785)) | (1 << (MySQLParser.GEOMETRYTYPE - 785)) | (1 << (MySQLParser.GEOMFROMTEXT - 785)) | (1 << (MySQLParser.GEOMFROMWKB - 785)) | (1 << (MySQLParser.GET_FORMAT - 785)) | (1 << (MySQLParser.GET_LOCK - 785)) | (1 << (MySQLParser.GLENGTH - 785)) | (1 << (MySQLParser.GREATEST - 785)) | (1 << (MySQLParser.GTID_SUBSET - 785)) | (1 << (MySQLParser.GTID_SUBTRACT - 785)) | (1 << (MySQLParser.HEX - 785)) | (1 << (MySQLParser.IFNULL - 785)) | (1 << (MySQLParser.INET6_ATON - 785)) | (1 << (MySQLParser.INET6_NTOA - 785)) | (1 << (MySQLParser.INET_ATON - 785)) | (1 << (MySQLParser.INET_NTOA - 785)) | (1 << (MySQLParser.INSTR - 785)) | (1 << (MySQLParser.INTERIORRINGN - 785)) | (1 << (MySQLParser.INTERSECTS - 785)) | (1 << (MySQLParser.ISCLOSED - 785)) | (1 << (MySQLParser.ISEMPTY - 785)) | (1 << (MySQLParser.ISNULL - 785)) | (1 << (MySQLParser.ISSIMPLE - 785)) | (1 << (MySQLParser.IS_FREE_LOCK - 785)) | (1 << (MySQLParser.IS_IPV4 - 785)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 785)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 785)) | (1 << (MySQLParser.IS_IPV6 - 785)) | (1 << (MySQLParser.IS_USED_LOCK - 785)) | (1 << (MySQLParser.LAST_INSERT_ID - 785)) | (1 << (MySQLParser.LCASE - 785)) | (1 << (MySQLParser.LEAST - 785)))) !== 0) || ((((_la - 817)) & ~0x1f) == 0 && ((1 << (_la - 817)) & ((1 << (MySQLParser.LENGTH - 817)) | (1 << (MySQLParser.LINEFROMTEXT - 817)) | (1 << (MySQLParser.LINEFROMWKB - 817)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 817)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 817)) | (1 << (MySQLParser.LN - 817)) | (1 << (MySQLParser.LOAD_FILE - 817)) | (1 << (MySQLParser.LOCATE - 817)) | (1 << (MySQLParser.LOG - 817)) | (1 << (MySQLParser.LOG10 - 817)) | (1 << (MySQLParser.LOG2 - 817)) | (1 << (MySQLParser.LOWER - 817)) | (1 << (MySQLParser.LPAD - 817)) | (1 << (MySQLParser.LTRIM - 817)) | (1 << (MySQLParser.MAKEDATE - 817)) | (1 << (MySQLParser.MAKETIME - 817)) | (1 << (MySQLParser.MAKE_SET - 817)) | (1 << (MySQLParser.MASTER_POS_WAIT - 817)) | (1 << (MySQLParser.MBRCONTAINS - 817)) | (1 << (MySQLParser.MBRDISJOINT - 817)) | (1 << (MySQLParser.MBREQUAL - 817)) | (1 << (MySQLParser.MBRINTERSECTS - 817)) | (1 << (MySQLParser.MBROVERLAPS - 817)) | (1 << (MySQLParser.MBRTOUCHES - 817)) | (1 << (MySQLParser.MBRWITHIN - 817)) | (1 << (MySQLParser.MD5 - 817)) | (1 << (MySQLParser.MLINEFROMTEXT - 817)) | (1 << (MySQLParser.MLINEFROMWKB - 817)) | (1 << (MySQLParser.MONTHNAME - 817)) | (1 << (MySQLParser.MPOINTFROMTEXT - 817)) | (1 << (MySQLParser.MPOINTFROMWKB - 817)) | (1 << (MySQLParser.MPOLYFROMTEXT - 817)))) !== 0) || ((((_la - 849)) & ~0x1f) == 0 && ((1 << (_la - 849)) & ((1 << (MySQLParser.MPOLYFROMWKB - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 849)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 849)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 849)) | (1 << (MySQLParser.NAME_CONST - 849)) | (1 << (MySQLParser.NULLIF - 849)) | (1 << (MySQLParser.NUMGEOMETRIES - 849)) | (1 << (MySQLParser.NUMINTERIORRINGS - 849)) | (1 << (MySQLParser.NUMPOINTS - 849)) | (1 << (MySQLParser.OCT - 849)) | (1 << (MySQLParser.OCTET_LENGTH - 849)) | (1 << (MySQLParser.ORD - 849)) | (1 << (MySQLParser.OVERLAPS - 849)) | (1 << (MySQLParser.PERIOD_ADD - 849)) | (1 << (MySQLParser.PERIOD_DIFF - 849)) | (1 << (MySQLParser.PI - 849)) | (1 << (MySQLParser.POINTFROMTEXT - 849)) | (1 << (MySQLParser.POINTFROMWKB - 849)) | (1 << (MySQLParser.POINTN - 849)) | (1 << (MySQLParser.POLYFROMTEXT - 849)) | (1 << (MySQLParser.POLYFROMWKB - 849)) | (1 << (MySQLParser.POLYGONFROMTEXT - 849)) | (1 << (MySQLParser.POLYGONFROMWKB - 849)) | (1 << (MySQLParser.POW - 849)) | (1 << (MySQLParser.POWER - 849)) | (1 << (MySQLParser.QUOTE - 849)) | (1 << (MySQLParser.RADIANS - 849)) | (1 << (MySQLParser.RAND - 849)) | (1 << (MySQLParser.RANDOM_BYTES - 849)))) !== 0) || ((((_la - 881)) & ~0x1f) == 0 && ((1 << (_la - 881)) & ((1 << (MySQLParser.RELEASE_LOCK - 881)) | (1 << (MySQLParser.REVERSE - 881)) | (1 << (MySQLParser.ROUND - 881)) | (1 << (MySQLParser.ROW_COUNT - 881)) | (1 << (MySQLParser.RPAD - 881)) | (1 << (MySQLParser.RTRIM - 881)) | (1 << (MySQLParser.SEC_TO_TIME - 881)) | (1 << (MySQLParser.SESSION_USER - 881)) | (1 << (MySQLParser.SHA - 881)) | (1 << (MySQLParser.SHA1 - 881)) | (1 << (MySQLParser.SHA2 - 881)) | (1 << (MySQLParser.SCHEMA_NAME - 881)) | (1 << (MySQLParser.SIGN - 881)) | (1 << (MySQLParser.SIN - 881)) | (1 << (MySQLParser.SLEEP - 881)) | (1 << (MySQLParser.SOUNDEX - 881)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 881)) | (1 << (MySQLParser.SQRT - 881)) | (1 << (MySQLParser.SRID - 881)) | (1 << (MySQLParser.STARTPOINT - 881)) | (1 << (MySQLParser.STRCMP - 881)) | (1 << (MySQLParser.STR_TO_DATE - 881)) | (1 << (MySQLParser.ST_AREA - 881)) | (1 << (MySQLParser.ST_ASBINARY - 881)) | (1 << (MySQLParser.ST_ASTEXT - 881)) | (1 << (MySQLParser.ST_ASWKB - 881)) | (1 << (MySQLParser.ST_ASWKT - 881)) | (1 << (MySQLParser.ST_BUFFER - 881)) | (1 << (MySQLParser.ST_CENTROID - 881)) | (1 << (MySQLParser.ST_CONTAINS - 881)) | (1 << (MySQLParser.ST_CROSSES - 881)) | (1 << (MySQLParser.ST_DIFFERENCE - 881)))) !== 0) || ((((_la - 913)) & ~0x1f) == 0 && ((1 << (_la - 913)) & ((1 << (MySQLParser.ST_DIMENSION - 913)) | (1 << (MySQLParser.ST_DISJOINT - 913)) | (1 << (MySQLParser.ST_DISTANCE - 913)) | (1 << (MySQLParser.ST_ENDPOINT - 913)) | (1 << (MySQLParser.ST_ENVELOPE - 913)) | (1 << (MySQLParser.ST_EQUALS - 913)) | (1 << (MySQLParser.ST_EXTERIORRING - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 913)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 913)) | (1 << (MySQLParser.ST_GEOMETRYN - 913)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 913)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 913)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 913)) | (1 << (MySQLParser.ST_INTERIORRINGN - 913)) | (1 << (MySQLParser.ST_INTERSECTION - 913)) | (1 << (MySQLParser.ST_INTERSECTS - 913)) | (1 << (MySQLParser.ST_ISCLOSED - 913)) | (1 << (MySQLParser.ST_ISEMPTY - 913)) | (1 << (MySQLParser.ST_ISSIMPLE - 913)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINEFROMWKB - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 913)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 913)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 913)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 913)) | (1 << (MySQLParser.ST_NUMPOINTS - 913)))) !== 0) || ((((_la - 945)) & ~0x1f) == 0 && ((1 << (_la - 945)) & ((1 << (MySQLParser.ST_OVERLAPS - 945)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 945)) | (1 << (MySQLParser.ST_POINTFROMWKB - 945)) | (1 << (MySQLParser.ST_POINTN - 945)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYFROMWKB - 945)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 945)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 945)) | (1 << (MySQLParser.ST_SRID - 945)) | (1 << (MySQLParser.ST_STARTPOINT - 945)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 945)) | (1 << (MySQLParser.ST_TOUCHES - 945)) | (1 << (MySQLParser.ST_UNION - 945)) | (1 << (MySQLParser.ST_WITHIN - 945)) | (1 << (MySQLParser.ST_X - 945)) | (1 << (MySQLParser.ST_Y - 945)) | (1 << (MySQLParser.SUBDATE - 945)) | (1 << (MySQLParser.SUBSTRING_INDEX - 945)) | (1 << (MySQLParser.SUBTIME - 945)) | (1 << (MySQLParser.SYSTEM_USER - 945)) | (1 << (MySQLParser.TAN - 945)) | (1 << (MySQLParser.TIMEDIFF - 945)) | (1 << (MySQLParser.TIMESTAMPADD - 945)) | (1 << (MySQLParser.TIMESTAMPDIFF - 945)) | (1 << (MySQLParser.TIME_FORMAT - 945)) | (1 << (MySQLParser.TIME_TO_SEC - 945)) | (1 << (MySQLParser.TOUCHES - 945)) | (1 << (MySQLParser.TO_BASE64 - 945)) | (1 << (MySQLParser.TO_DAYS - 945)) | (1 << (MySQLParser.TO_SECONDS - 945)) | (1 << (MySQLParser.UCASE - 945)) | (1 << (MySQLParser.UNCOMPRESS - 945)))) !== 0) || ((((_la - 977)) & ~0x1f) == 0 && ((1 << (_la - 977)) & ((1 << (MySQLParser.UNCOMPRESSED_LENGTH - 977)) | (1 << (MySQLParser.UNHEX - 977)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 977)) | (1 << (MySQLParser.UPDATEXML - 977)) | (1 << (MySQLParser.UPPER - 977)) | (1 << (MySQLParser.UUID - 977)) | (1 << (MySQLParser.UUID_SHORT - 977)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 977)) | (1 << (MySQLParser.VERSION - 977)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 977)) | (1 << (MySQLParser.WEEKDAY - 977)) | (1 << (MySQLParser.WEEKOFYEAR - 977)) | (1 << (MySQLParser.WEIGHT_STRING - 977)) | (1 << (MySQLParser.WITHIN - 977)) | (1 << (MySQLParser.YEARWEEK - 977)) | (1 << (MySQLParser.Y_FUNCTION - 977)) | (1 << (MySQLParser.X_FUNCTION - 977)))) !== 0) || ((((_la - 1032)) & ~0x1f) == 0 && ((1 << (_la - 1032)) & ((1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1032)) | (1 << (MySQLParser.STRING_LITERAL - 1032)) | (1 << (MySQLParser.ID - 1032)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1032)))) !== 0)) {
            this.state = 4261;
            this.uid();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CursorStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_cursorStatement;
    return this;
}

CursorStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CursorStatementContext.prototype.constructor = CursorStatementContext;


 
CursorStatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CloseCursorContext(parser, ctx) {
	CursorStatementContext.call(this, parser);
    CursorStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CloseCursorContext.prototype = Object.create(CursorStatementContext.prototype);
CloseCursorContext.prototype.constructor = CloseCursorContext;

MySQLParser.CloseCursorContext = CloseCursorContext;

CloseCursorContext.prototype.CLOSE = function() {
    return this.getToken(MySQLParser.CLOSE, 0);
};

CloseCursorContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};
CloseCursorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCloseCursor(this);
	}
};

CloseCursorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCloseCursor(this);
	}
};

CloseCursorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCloseCursor(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function OpenCursorContext(parser, ctx) {
	CursorStatementContext.call(this, parser);
    CursorStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OpenCursorContext.prototype = Object.create(CursorStatementContext.prototype);
OpenCursorContext.prototype.constructor = OpenCursorContext;

MySQLParser.OpenCursorContext = OpenCursorContext;

OpenCursorContext.prototype.OPEN = function() {
    return this.getToken(MySQLParser.OPEN, 0);
};

OpenCursorContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};
OpenCursorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOpenCursor(this);
	}
};

OpenCursorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOpenCursor(this);
	}
};

OpenCursorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOpenCursor(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FetchCursorContext(parser, ctx) {
	CursorStatementContext.call(this, parser);
    CursorStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FetchCursorContext.prototype = Object.create(CursorStatementContext.prototype);
FetchCursorContext.prototype.constructor = FetchCursorContext;

MySQLParser.FetchCursorContext = FetchCursorContext;

FetchCursorContext.prototype.FETCH = function() {
    return this.getToken(MySQLParser.FETCH, 0);
};

FetchCursorContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

FetchCursorContext.prototype.INTO = function() {
    return this.getToken(MySQLParser.INTO, 0);
};

FetchCursorContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

FetchCursorContext.prototype.FROM = function() {
    return this.getToken(MySQLParser.FROM, 0);
};

FetchCursorContext.prototype.NEXT = function() {
    return this.getToken(MySQLParser.NEXT, 0);
};
FetchCursorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFetchCursor(this);
	}
};

FetchCursorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFetchCursor(this);
	}
};

FetchCursorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFetchCursor(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.CursorStatementContext = CursorStatementContext;

MySQLParser.prototype.cursorStatement = function() {

    var localctx = new CursorStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, MySQLParser.RULE_cursorStatement);
    var _la = 0; // Token type
    try {
        this.state = 4279;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CLOSE:
            localctx = new CloseCursorContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 4264;
            this.match(MySQLParser.CLOSE);
            this.state = 4265;
            this.uid();
            break;
        case MySQLParser.FETCH:
            localctx = new FetchCursorContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 4266;
            this.match(MySQLParser.FETCH);
            this.state = 4271;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,616,this._ctx);
            if(la_===1) {
                this.state = 4268;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.NEXT) {
                    this.state = 4267;
                    this.match(MySQLParser.NEXT);
                }

                this.state = 4270;
                this.match(MySQLParser.FROM);

            }
            this.state = 4273;
            this.uid();
            this.state = 4274;
            this.match(MySQLParser.INTO);
            this.state = 4275;
            this.uidList();
            break;
        case MySQLParser.OPEN:
            localctx = new OpenCursorContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 4277;
            this.match(MySQLParser.OPEN);
            this.state = 4278;
            this.uid();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclareVariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_declareVariable;
    return this;
}

DeclareVariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclareVariableContext.prototype.constructor = DeclareVariableContext;

DeclareVariableContext.prototype.DECLARE = function() {
    return this.getToken(MySQLParser.DECLARE, 0);
};

DeclareVariableContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

DeclareVariableContext.prototype.dataType = function() {
    return this.getTypedRuleContext(DataTypeContext,0);
};

DeclareVariableContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

DeclareVariableContext.prototype.defaultValue = function() {
    return this.getTypedRuleContext(DefaultValueContext,0);
};

DeclareVariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDeclareVariable(this);
	}
};

DeclareVariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDeclareVariable(this);
	}
};

DeclareVariableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDeclareVariable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DeclareVariableContext = DeclareVariableContext;

MySQLParser.prototype.declareVariable = function() {

    var localctx = new DeclareVariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, MySQLParser.RULE_declareVariable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4281;
        this.match(MySQLParser.DECLARE);
        this.state = 4282;
        this.uidList();
        this.state = 4283;
        this.dataType();
        this.state = 4286;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.DEFAULT) {
            this.state = 4284;
            this.match(MySQLParser.DEFAULT);
            this.state = 4285;
            this.defaultValue();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclareConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_declareCondition;
    return this;
}

DeclareConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclareConditionContext.prototype.constructor = DeclareConditionContext;

DeclareConditionContext.prototype.DECLARE = function() {
    return this.getToken(MySQLParser.DECLARE, 0);
};

DeclareConditionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DeclareConditionContext.prototype.CONDITION = function() {
    return this.getToken(MySQLParser.CONDITION, 0);
};

DeclareConditionContext.prototype.FOR = function() {
    return this.getToken(MySQLParser.FOR, 0);
};

DeclareConditionContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

DeclareConditionContext.prototype.SQLSTATE = function() {
    return this.getToken(MySQLParser.SQLSTATE, 0);
};

DeclareConditionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

DeclareConditionContext.prototype.VALUE = function() {
    return this.getToken(MySQLParser.VALUE, 0);
};

DeclareConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDeclareCondition(this);
	}
};

DeclareConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDeclareCondition(this);
	}
};

DeclareConditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDeclareCondition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DeclareConditionContext = DeclareConditionContext;

MySQLParser.prototype.declareCondition = function() {

    var localctx = new DeclareConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, MySQLParser.RULE_declareCondition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4288;
        this.match(MySQLParser.DECLARE);
        this.state = 4289;
        this.uid();
        this.state = 4290;
        this.match(MySQLParser.CONDITION);
        this.state = 4291;
        this.match(MySQLParser.FOR);
        this.state = 4298;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ZERO_DECIMAL:
        case MySQLParser.ONE_DECIMAL:
        case MySQLParser.TWO_DECIMAL:
        case MySQLParser.DECIMAL_LITERAL:
            this.state = 4292;
            this.decimalLiteral();
            break;
        case MySQLParser.SQLSTATE:
            this.state = 4293;
            this.match(MySQLParser.SQLSTATE);
            this.state = 4295;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.VALUE) {
                this.state = 4294;
                this.match(MySQLParser.VALUE);
            }

            this.state = 4297;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclareCursorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_declareCursor;
    return this;
}

DeclareCursorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclareCursorContext.prototype.constructor = DeclareCursorContext;

DeclareCursorContext.prototype.DECLARE = function() {
    return this.getToken(MySQLParser.DECLARE, 0);
};

DeclareCursorContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DeclareCursorContext.prototype.CURSOR = function() {
    return this.getToken(MySQLParser.CURSOR, 0);
};

DeclareCursorContext.prototype.FOR = function() {
    return this.getToken(MySQLParser.FOR, 0);
};

DeclareCursorContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

DeclareCursorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDeclareCursor(this);
	}
};

DeclareCursorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDeclareCursor(this);
	}
};

DeclareCursorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDeclareCursor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DeclareCursorContext = DeclareCursorContext;

MySQLParser.prototype.declareCursor = function() {

    var localctx = new DeclareCursorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, MySQLParser.RULE_declareCursor);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4300;
        this.match(MySQLParser.DECLARE);
        this.state = 4301;
        this.uid();
        this.state = 4302;
        this.match(MySQLParser.CURSOR);
        this.state = 4303;
        this.match(MySQLParser.FOR);
        this.state = 4304;
        this.selectStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclareHandlerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_declareHandler;
    this.handlerAction = null; // Token
    return this;
}

DeclareHandlerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclareHandlerContext.prototype.constructor = DeclareHandlerContext;

DeclareHandlerContext.prototype.DECLARE = function() {
    return this.getToken(MySQLParser.DECLARE, 0);
};

DeclareHandlerContext.prototype.HANDLER = function() {
    return this.getToken(MySQLParser.HANDLER, 0);
};

DeclareHandlerContext.prototype.FOR = function() {
    return this.getToken(MySQLParser.FOR, 0);
};

DeclareHandlerContext.prototype.handlerConditionValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HandlerConditionValueContext);
    } else {
        return this.getTypedRuleContext(HandlerConditionValueContext,i);
    }
};

DeclareHandlerContext.prototype.routineBody = function() {
    return this.getTypedRuleContext(RoutineBodyContext,0);
};

DeclareHandlerContext.prototype.CONTINUE = function() {
    return this.getToken(MySQLParser.CONTINUE, 0);
};

DeclareHandlerContext.prototype.EXIT = function() {
    return this.getToken(MySQLParser.EXIT, 0);
};

DeclareHandlerContext.prototype.UNDO = function() {
    return this.getToken(MySQLParser.UNDO, 0);
};

DeclareHandlerContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


DeclareHandlerContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDeclareHandler(this);
	}
};

DeclareHandlerContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDeclareHandler(this);
	}
};

DeclareHandlerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDeclareHandler(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DeclareHandlerContext = DeclareHandlerContext;

MySQLParser.prototype.declareHandler = function() {

    var localctx = new DeclareHandlerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, MySQLParser.RULE_declareHandler);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4306;
        this.match(MySQLParser.DECLARE);
        this.state = 4307;
        localctx.handlerAction = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.CONTINUE || _la===MySQLParser.EXIT || _la===MySQLParser.UNDO)) {
            localctx.handlerAction = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4308;
        this.match(MySQLParser.HANDLER);
        this.state = 4309;
        this.match(MySQLParser.FOR);
        this.state = 4310;
        this.handlerConditionValue();
        this.state = 4315;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 4311;
            this.match(MySQLParser.COMMA);
            this.state = 4312;
            this.handlerConditionValue();
            this.state = 4317;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4318;
        this.routineBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HandlerConditionValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_handlerConditionValue;
    return this;
}

HandlerConditionValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HandlerConditionValueContext.prototype.constructor = HandlerConditionValueContext;


 
HandlerConditionValueContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function HandlerConditionWarningContext(parser, ctx) {
	HandlerConditionValueContext.call(this, parser);
    HandlerConditionValueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HandlerConditionWarningContext.prototype = Object.create(HandlerConditionValueContext.prototype);
HandlerConditionWarningContext.prototype.constructor = HandlerConditionWarningContext;

MySQLParser.HandlerConditionWarningContext = HandlerConditionWarningContext;

HandlerConditionWarningContext.prototype.SQLWARNING = function() {
    return this.getToken(MySQLParser.SQLWARNING, 0);
};
HandlerConditionWarningContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHandlerConditionWarning(this);
	}
};

HandlerConditionWarningContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHandlerConditionWarning(this);
	}
};

HandlerConditionWarningContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHandlerConditionWarning(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HandlerConditionCodeContext(parser, ctx) {
	HandlerConditionValueContext.call(this, parser);
    HandlerConditionValueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HandlerConditionCodeContext.prototype = Object.create(HandlerConditionValueContext.prototype);
HandlerConditionCodeContext.prototype.constructor = HandlerConditionCodeContext;

MySQLParser.HandlerConditionCodeContext = HandlerConditionCodeContext;

HandlerConditionCodeContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};
HandlerConditionCodeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHandlerConditionCode(this);
	}
};

HandlerConditionCodeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHandlerConditionCode(this);
	}
};

HandlerConditionCodeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHandlerConditionCode(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HandlerConditionNotfoundContext(parser, ctx) {
	HandlerConditionValueContext.call(this, parser);
    HandlerConditionValueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HandlerConditionNotfoundContext.prototype = Object.create(HandlerConditionValueContext.prototype);
HandlerConditionNotfoundContext.prototype.constructor = HandlerConditionNotfoundContext;

MySQLParser.HandlerConditionNotfoundContext = HandlerConditionNotfoundContext;

HandlerConditionNotfoundContext.prototype.NOT = function() {
    return this.getToken(MySQLParser.NOT, 0);
};

HandlerConditionNotfoundContext.prototype.FOUND = function() {
    return this.getToken(MySQLParser.FOUND, 0);
};
HandlerConditionNotfoundContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHandlerConditionNotfound(this);
	}
};

HandlerConditionNotfoundContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHandlerConditionNotfound(this);
	}
};

HandlerConditionNotfoundContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHandlerConditionNotfound(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HandlerConditionStateContext(parser, ctx) {
	HandlerConditionValueContext.call(this, parser);
    HandlerConditionValueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HandlerConditionStateContext.prototype = Object.create(HandlerConditionValueContext.prototype);
HandlerConditionStateContext.prototype.constructor = HandlerConditionStateContext;

MySQLParser.HandlerConditionStateContext = HandlerConditionStateContext;

HandlerConditionStateContext.prototype.SQLSTATE = function() {
    return this.getToken(MySQLParser.SQLSTATE, 0);
};

HandlerConditionStateContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

HandlerConditionStateContext.prototype.VALUE = function() {
    return this.getToken(MySQLParser.VALUE, 0);
};
HandlerConditionStateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHandlerConditionState(this);
	}
};

HandlerConditionStateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHandlerConditionState(this);
	}
};

HandlerConditionStateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHandlerConditionState(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HandlerConditionExceptionContext(parser, ctx) {
	HandlerConditionValueContext.call(this, parser);
    HandlerConditionValueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HandlerConditionExceptionContext.prototype = Object.create(HandlerConditionValueContext.prototype);
HandlerConditionExceptionContext.prototype.constructor = HandlerConditionExceptionContext;

MySQLParser.HandlerConditionExceptionContext = HandlerConditionExceptionContext;

HandlerConditionExceptionContext.prototype.SQLEXCEPTION = function() {
    return this.getToken(MySQLParser.SQLEXCEPTION, 0);
};
HandlerConditionExceptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHandlerConditionException(this);
	}
};

HandlerConditionExceptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHandlerConditionException(this);
	}
};

HandlerConditionExceptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHandlerConditionException(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HandlerConditionNameContext(parser, ctx) {
	HandlerConditionValueContext.call(this, parser);
    HandlerConditionValueContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HandlerConditionNameContext.prototype = Object.create(HandlerConditionValueContext.prototype);
HandlerConditionNameContext.prototype.constructor = HandlerConditionNameContext;

MySQLParser.HandlerConditionNameContext = HandlerConditionNameContext;

HandlerConditionNameContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};
HandlerConditionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHandlerConditionName(this);
	}
};

HandlerConditionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHandlerConditionName(this);
	}
};

HandlerConditionNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHandlerConditionName(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.HandlerConditionValueContext = HandlerConditionValueContext;

MySQLParser.prototype.handlerConditionValue = function() {

    var localctx = new HandlerConditionValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, MySQLParser.RULE_handlerConditionValue);
    var _la = 0; // Token type
    try {
        this.state = 4331;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ZERO_DECIMAL:
        case MySQLParser.ONE_DECIMAL:
        case MySQLParser.TWO_DECIMAL:
        case MySQLParser.DECIMAL_LITERAL:
            localctx = new HandlerConditionCodeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 4320;
            this.decimalLiteral();
            break;
        case MySQLParser.SQLSTATE:
            localctx = new HandlerConditionStateContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 4321;
            this.match(MySQLParser.SQLSTATE);
            this.state = 4323;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.VALUE) {
                this.state = 4322;
                this.match(MySQLParser.VALUE);
            }

            this.state = 4325;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.CURRENT:
        case MySQLParser.DATABASE:
        case MySQLParser.DIAGNOSTICS:
        case MySQLParser.LEFT:
        case MySQLParser.NUMBER:
        case MySQLParser.RIGHT:
        case MySQLParser.STACKED:
        case MySQLParser.DATE:
        case MySQLParser.TIME:
        case MySQLParser.TIMESTAMP:
        case MySQLParser.DATETIME:
        case MySQLParser.YEAR:
        case MySQLParser.TEXT:
        case MySQLParser.ENUM:
        case MySQLParser.SERIAL:
        case MySQLParser.JSON_VALID:
        case MySQLParser.JSON_SCHEMA_VALID:
        case MySQLParser.COUNT:
        case MySQLParser.POSITION:
        case MySQLParser.ACCOUNT:
        case MySQLParser.ACTION:
        case MySQLParser.AFTER:
        case MySQLParser.AGGREGATE:
        case MySQLParser.ALGORITHM:
        case MySQLParser.ANY:
        case MySQLParser.AT:
        case MySQLParser.AUTHORS:
        case MySQLParser.AUTOCOMMIT:
        case MySQLParser.AUTOEXTEND_SIZE:
        case MySQLParser.AUTO_INCREMENT:
        case MySQLParser.AVG_ROW_LENGTH:
        case MySQLParser.BEGIN:
        case MySQLParser.BINLOG:
        case MySQLParser.BIT:
        case MySQLParser.BLOCK:
        case MySQLParser.BOOL:
        case MySQLParser.BOOLEAN:
        case MySQLParser.BTREE:
        case MySQLParser.CACHE:
        case MySQLParser.CASCADED:
        case MySQLParser.CHAIN:
        case MySQLParser.CHANGED:
        case MySQLParser.CHANNEL:
        case MySQLParser.CHECKSUM:
        case MySQLParser.PAGE_CHECKSUM:
        case MySQLParser.CIPHER:
        case MySQLParser.CLASS_ORIGIN:
        case MySQLParser.CLIENT:
        case MySQLParser.CLOSE:
        case MySQLParser.COALESCE:
        case MySQLParser.CODE:
        case MySQLParser.COLUMNS:
        case MySQLParser.COLUMN_FORMAT:
        case MySQLParser.COLUMN_NAME:
        case MySQLParser.COMMENT:
        case MySQLParser.COMMIT:
        case MySQLParser.COMPACT:
        case MySQLParser.COMPLETION:
        case MySQLParser.COMPRESSED:
        case MySQLParser.COMPRESSION:
        case MySQLParser.CONCURRENT:
        case MySQLParser.CONNECTION:
        case MySQLParser.CONSISTENT:
        case MySQLParser.CONSTRAINT_CATALOG:
        case MySQLParser.CONSTRAINT_SCHEMA:
        case MySQLParser.CONSTRAINT_NAME:
        case MySQLParser.CONTAINS:
        case MySQLParser.CONTEXT:
        case MySQLParser.CONTRIBUTORS:
        case MySQLParser.COPY:
        case MySQLParser.CPU:
        case MySQLParser.CURSOR_NAME:
        case MySQLParser.DATA:
        case MySQLParser.DATAFILE:
        case MySQLParser.DEALLOCATE:
        case MySQLParser.DEFAULT_AUTH:
        case MySQLParser.DEFINER:
        case MySQLParser.DELAY_KEY_WRITE:
        case MySQLParser.DES_KEY_FILE:
        case MySQLParser.DIRECTORY:
        case MySQLParser.DISABLE:
        case MySQLParser.DISCARD:
        case MySQLParser.DISK:
        case MySQLParser.DO:
        case MySQLParser.DUMPFILE:
        case MySQLParser.DUPLICATE:
        case MySQLParser.DYNAMIC:
        case MySQLParser.ENABLE:
        case MySQLParser.ENCRYPTION:
        case MySQLParser.END:
        case MySQLParser.ENDS:
        case MySQLParser.ENGINE:
        case MySQLParser.ENGINES:
        case MySQLParser.ERROR:
        case MySQLParser.ERRORS:
        case MySQLParser.ESCAPE:
        case MySQLParser.EVEN:
        case MySQLParser.EVENT:
        case MySQLParser.EVENTS:
        case MySQLParser.EVERY:
        case MySQLParser.EXCHANGE:
        case MySQLParser.EXCLUSIVE:
        case MySQLParser.EXPIRE:
        case MySQLParser.EXPORT:
        case MySQLParser.EXTENDED:
        case MySQLParser.EXTENT_SIZE:
        case MySQLParser.FAST:
        case MySQLParser.FAULTS:
        case MySQLParser.FIELDS:
        case MySQLParser.FILE_BLOCK_SIZE:
        case MySQLParser.FILTER:
        case MySQLParser.FIRST:
        case MySQLParser.FIXED:
        case MySQLParser.FLUSH:
        case MySQLParser.FOLLOWS:
        case MySQLParser.FOUND:
        case MySQLParser.FULL:
        case MySQLParser.FUNCTION:
        case MySQLParser.GENERAL:
        case MySQLParser.GLOBAL:
        case MySQLParser.GRANTS:
        case MySQLParser.GROUP_REPLICATION:
        case MySQLParser.HANDLER:
        case MySQLParser.HASH:
        case MySQLParser.HELP:
        case MySQLParser.HOST:
        case MySQLParser.HOSTS:
        case MySQLParser.IDENTIFIED:
        case MySQLParser.IGNORE_SERVER_IDS:
        case MySQLParser.IMPORT:
        case MySQLParser.INDEXES:
        case MySQLParser.INITIAL_SIZE:
        case MySQLParser.INPLACE:
        case MySQLParser.INSERT_METHOD:
        case MySQLParser.INSTALL:
        case MySQLParser.INSTANCE:
        case MySQLParser.INVISIBLE:
        case MySQLParser.INVOKER:
        case MySQLParser.IO:
        case MySQLParser.IO_THREAD:
        case MySQLParser.IPC:
        case MySQLParser.ISOLATION:
        case MySQLParser.ISSUER:
        case MySQLParser.JSON:
        case MySQLParser.KEY_BLOCK_SIZE:
        case MySQLParser.LANGUAGE:
        case MySQLParser.LAST:
        case MySQLParser.LEAVES:
        case MySQLParser.LESS:
        case MySQLParser.LEVEL:
        case MySQLParser.LIST:
        case MySQLParser.LOCAL:
        case MySQLParser.LOGFILE:
        case MySQLParser.LOGS:
        case MySQLParser.MASTER:
        case MySQLParser.MASTER_AUTO_POSITION:
        case MySQLParser.MASTER_CONNECT_RETRY:
        case MySQLParser.MASTER_DELAY:
        case MySQLParser.MASTER_HEARTBEAT_PERIOD:
        case MySQLParser.MASTER_HOST:
        case MySQLParser.MASTER_LOG_FILE:
        case MySQLParser.MASTER_LOG_POS:
        case MySQLParser.MASTER_PASSWORD:
        case MySQLParser.MASTER_PORT:
        case MySQLParser.MASTER_RETRY_COUNT:
        case MySQLParser.MASTER_SSL:
        case MySQLParser.MASTER_SSL_CA:
        case MySQLParser.MASTER_SSL_CAPATH:
        case MySQLParser.MASTER_SSL_CERT:
        case MySQLParser.MASTER_SSL_CIPHER:
        case MySQLParser.MASTER_SSL_CRL:
        case MySQLParser.MASTER_SSL_CRLPATH:
        case MySQLParser.MASTER_SSL_KEY:
        case MySQLParser.MASTER_TLS_VERSION:
        case MySQLParser.MASTER_USER:
        case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser.MAX_QUERIES_PER_HOUR:
        case MySQLParser.MAX_ROWS:
        case MySQLParser.MAX_SIZE:
        case MySQLParser.MAX_UPDATES_PER_HOUR:
        case MySQLParser.MAX_USER_CONNECTIONS:
        case MySQLParser.MEDIUM:
        case MySQLParser.MERGE:
        case MySQLParser.MESSAGE_TEXT:
        case MySQLParser.MID:
        case MySQLParser.MIGRATE:
        case MySQLParser.MIN_ROWS:
        case MySQLParser.MODE:
        case MySQLParser.MODIFY:
        case MySQLParser.MUTEX:
        case MySQLParser.MYSQL:
        case MySQLParser.MYSQL_ERRNO:
        case MySQLParser.NAME:
        case MySQLParser.NAMES:
        case MySQLParser.NCHAR:
        case MySQLParser.NEVER:
        case MySQLParser.NEXT:
        case MySQLParser.NO:
        case MySQLParser.NODEGROUP:
        case MySQLParser.NONE:
        case MySQLParser.OFFLINE:
        case MySQLParser.OFFSET:
        case MySQLParser.OJ:
        case MySQLParser.OLD_PASSWORD:
        case MySQLParser.ONE:
        case MySQLParser.ONLINE:
        case MySQLParser.ONLY:
        case MySQLParser.OPEN:
        case MySQLParser.OPTIMIZER_COSTS:
        case MySQLParser.OPTIONS:
        case MySQLParser.OWNER:
        case MySQLParser.PACK_KEYS:
        case MySQLParser.PAGE:
        case MySQLParser.PARSER:
        case MySQLParser.PARTIAL:
        case MySQLParser.PARTITIONING:
        case MySQLParser.PARTITIONS:
        case MySQLParser.PASSWORD:
        case MySQLParser.PHASE:
        case MySQLParser.PLUGIN:
        case MySQLParser.PLUGIN_DIR:
        case MySQLParser.PLUGINS:
        case MySQLParser.PORT:
        case MySQLParser.PRECEDES:
        case MySQLParser.PREPARE:
        case MySQLParser.PRESERVE:
        case MySQLParser.PREV:
        case MySQLParser.PROCESSLIST:
        case MySQLParser.PROFILE:
        case MySQLParser.PROFILES:
        case MySQLParser.PROXY:
        case MySQLParser.QUERY:
        case MySQLParser.QUICK:
        case MySQLParser.REBUILD:
        case MySQLParser.RECOVER:
        case MySQLParser.REDO_BUFFER_SIZE:
        case MySQLParser.REDUNDANT:
        case MySQLParser.RELAY:
        case MySQLParser.RELAY_LOG_FILE:
        case MySQLParser.RELAY_LOG_POS:
        case MySQLParser.RELAYLOG:
        case MySQLParser.REMOVE:
        case MySQLParser.REORGANIZE:
        case MySQLParser.REPAIR:
        case MySQLParser.REPLICATE_DO_DB:
        case MySQLParser.REPLICATE_DO_TABLE:
        case MySQLParser.REPLICATE_IGNORE_DB:
        case MySQLParser.REPLICATE_IGNORE_TABLE:
        case MySQLParser.REPLICATE_REWRITE_DB:
        case MySQLParser.REPLICATE_WILD_DO_TABLE:
        case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser.REPLICATION:
        case MySQLParser.RESET:
        case MySQLParser.RESUME:
        case MySQLParser.RETURNED_SQLSTATE:
        case MySQLParser.RETURNS:
        case MySQLParser.ROLE:
        case MySQLParser.ROLLBACK:
        case MySQLParser.ROLLUP:
        case MySQLParser.ROTATE:
        case MySQLParser.ROW:
        case MySQLParser.ROWS:
        case MySQLParser.ROW_FORMAT:
        case MySQLParser.SAVEPOINT:
        case MySQLParser.SCHEDULE:
        case MySQLParser.SECURITY:
        case MySQLParser.SERVER:
        case MySQLParser.SESSION:
        case MySQLParser.SHARE:
        case MySQLParser.SHARED:
        case MySQLParser.SIGNED:
        case MySQLParser.SIMPLE:
        case MySQLParser.SLAVE:
        case MySQLParser.SLOW:
        case MySQLParser.SNAPSHOT:
        case MySQLParser.SOCKET:
        case MySQLParser.SOME:
        case MySQLParser.SONAME:
        case MySQLParser.SOUNDS:
        case MySQLParser.SOURCE:
        case MySQLParser.SQL_AFTER_GTIDS:
        case MySQLParser.SQL_AFTER_MTS_GAPS:
        case MySQLParser.SQL_BEFORE_GTIDS:
        case MySQLParser.SQL_BUFFER_RESULT:
        case MySQLParser.SQL_CACHE:
        case MySQLParser.SQL_NO_CACHE:
        case MySQLParser.SQL_THREAD:
        case MySQLParser.START:
        case MySQLParser.STARTS:
        case MySQLParser.STATS_AUTO_RECALC:
        case MySQLParser.STATS_PERSISTENT:
        case MySQLParser.STATS_SAMPLE_PAGES:
        case MySQLParser.STATUS:
        case MySQLParser.STOP:
        case MySQLParser.STORAGE:
        case MySQLParser.STRING:
        case MySQLParser.SUBCLASS_ORIGIN:
        case MySQLParser.SUBJECT:
        case MySQLParser.SUBPARTITION:
        case MySQLParser.SUBPARTITIONS:
        case MySQLParser.SUSPEND:
        case MySQLParser.SWAPS:
        case MySQLParser.SWITCHES:
        case MySQLParser.TABLE_NAME:
        case MySQLParser.TABLESPACE:
        case MySQLParser.TEMPORARY:
        case MySQLParser.TEMPTABLE:
        case MySQLParser.THAN:
        case MySQLParser.TRADITIONAL:
        case MySQLParser.TRANSACTION:
        case MySQLParser.TRANSACTIONAL:
        case MySQLParser.TRIGGERS:
        case MySQLParser.TRUNCATE:
        case MySQLParser.UNDEFINED:
        case MySQLParser.UNDOFILE:
        case MySQLParser.UNDO_BUFFER_SIZE:
        case MySQLParser.UNINSTALL:
        case MySQLParser.UNKNOWN:
        case MySQLParser.UNTIL:
        case MySQLParser.UPGRADE:
        case MySQLParser.USER:
        case MySQLParser.USE_FRM:
        case MySQLParser.USER_RESOURCES:
        case MySQLParser.VALIDATION:
        case MySQLParser.VALUE:
        case MySQLParser.VARIABLES:
        case MySQLParser.VIEW:
        case MySQLParser.VISIBLE:
        case MySQLParser.WAIT:
        case MySQLParser.WARNINGS:
        case MySQLParser.WITHOUT:
        case MySQLParser.WORK:
        case MySQLParser.WRAPPER:
        case MySQLParser.X509:
        case MySQLParser.XA:
        case MySQLParser.XML:
        case MySQLParser.INTERNAL:
        case MySQLParser.QUARTER:
        case MySQLParser.MONTH:
        case MySQLParser.DAY:
        case MySQLParser.HOUR:
        case MySQLParser.MINUTE:
        case MySQLParser.WEEK:
        case MySQLParser.SECOND:
        case MySQLParser.MICROSECOND:
        case MySQLParser.TABLES:
        case MySQLParser.ROUTINE:
        case MySQLParser.EXECUTE:
        case MySQLParser.FILE:
        case MySQLParser.PROCESS:
        case MySQLParser.RELOAD:
        case MySQLParser.SHUTDOWN:
        case MySQLParser.SUPER:
        case MySQLParser.PRIVILEGES:
        case MySQLParser.AUDIT_ADMIN:
        case MySQLParser.BACKUP_ADMIN:
        case MySQLParser.BINLOG_ADMIN:
        case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
        case MySQLParser.CLONE_ADMIN:
        case MySQLParser.CONNECTION_ADMIN:
        case MySQLParser.ENCRYPTION_KEY_ADMIN:
        case MySQLParser.FIREWALL_ADMIN:
        case MySQLParser.FIREWALL_USER:
        case MySQLParser.GROUP_REPLICATION_ADMIN:
        case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
        case MySQLParser.NDB_STORED_USER:
        case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
        case MySQLParser.REPLICATION_APPLIER:
        case MySQLParser.REPLICATION_SLAVE_ADMIN:
        case MySQLParser.RESOURCE_GROUP_ADMIN:
        case MySQLParser.RESOURCE_GROUP_USER:
        case MySQLParser.ROLE_ADMIN:
        case MySQLParser.SESSION_VARIABLES_ADMIN:
        case MySQLParser.SET_USER_ID:
        case MySQLParser.SHOW_ROUTINE:
        case MySQLParser.SYSTEM_VARIABLES_ADMIN:
        case MySQLParser.TABLE_ENCRYPTION_ADMIN:
        case MySQLParser.VERSION_TOKEN_ADMIN:
        case MySQLParser.XA_RECOVER_ADMIN:
        case MySQLParser.ARMSCII8:
        case MySQLParser.ASCII:
        case MySQLParser.BIG5:
        case MySQLParser.CP1250:
        case MySQLParser.CP1251:
        case MySQLParser.CP1256:
        case MySQLParser.CP1257:
        case MySQLParser.CP850:
        case MySQLParser.CP852:
        case MySQLParser.CP866:
        case MySQLParser.CP932:
        case MySQLParser.DEC8:
        case MySQLParser.EUCJPMS:
        case MySQLParser.EUCKR:
        case MySQLParser.GB2312:
        case MySQLParser.GBK:
        case MySQLParser.GEOSTD8:
        case MySQLParser.GREEK:
        case MySQLParser.HEBREW:
        case MySQLParser.HP8:
        case MySQLParser.KEYBCS2:
        case MySQLParser.KOI8R:
        case MySQLParser.KOI8U:
        case MySQLParser.LATIN1:
        case MySQLParser.LATIN2:
        case MySQLParser.LATIN5:
        case MySQLParser.LATIN7:
        case MySQLParser.MACCE:
        case MySQLParser.MACROMAN:
        case MySQLParser.SJIS:
        case MySQLParser.SWE7:
        case MySQLParser.TIS620:
        case MySQLParser.UCS2:
        case MySQLParser.UJIS:
        case MySQLParser.UTF16:
        case MySQLParser.UTF16LE:
        case MySQLParser.UTF32:
        case MySQLParser.UTF8:
        case MySQLParser.UTF8MB3:
        case MySQLParser.UTF8MB4:
        case MySQLParser.ARCHIVE:
        case MySQLParser.BLACKHOLE:
        case MySQLParser.CSV:
        case MySQLParser.FEDERATED:
        case MySQLParser.INNODB:
        case MySQLParser.MEMORY:
        case MySQLParser.MRG_MYISAM:
        case MySQLParser.MYISAM:
        case MySQLParser.NDB:
        case MySQLParser.NDBCLUSTER:
        case MySQLParser.PERFORMANCE_SCHEMA:
        case MySQLParser.TOKUDB:
        case MySQLParser.REPEATABLE:
        case MySQLParser.COMMITTED:
        case MySQLParser.UNCOMMITTED:
        case MySQLParser.SERIALIZABLE:
        case MySQLParser.GEOMETRYCOLLECTION:
        case MySQLParser.LINESTRING:
        case MySQLParser.MULTILINESTRING:
        case MySQLParser.MULTIPOINT:
        case MySQLParser.MULTIPOLYGON:
        case MySQLParser.POINT:
        case MySQLParser.POLYGON:
        case MySQLParser.ABS:
        case MySQLParser.ACOS:
        case MySQLParser.ADDDATE:
        case MySQLParser.ADDTIME:
        case MySQLParser.AES_DECRYPT:
        case MySQLParser.AES_ENCRYPT:
        case MySQLParser.AREA:
        case MySQLParser.ASBINARY:
        case MySQLParser.ASIN:
        case MySQLParser.ASTEXT:
        case MySQLParser.ASWKB:
        case MySQLParser.ASWKT:
        case MySQLParser.ASYMMETRIC_DECRYPT:
        case MySQLParser.ASYMMETRIC_DERIVE:
        case MySQLParser.ASYMMETRIC_ENCRYPT:
        case MySQLParser.ASYMMETRIC_SIGN:
        case MySQLParser.ASYMMETRIC_VERIFY:
        case MySQLParser.ATAN:
        case MySQLParser.ATAN2:
        case MySQLParser.BENCHMARK:
        case MySQLParser.BIN:
        case MySQLParser.BIT_COUNT:
        case MySQLParser.BIT_LENGTH:
        case MySQLParser.BUFFER:
        case MySQLParser.CATALOG_NAME:
        case MySQLParser.CEIL:
        case MySQLParser.CEILING:
        case MySQLParser.CENTROID:
        case MySQLParser.CHARACTER_LENGTH:
        case MySQLParser.CHARSET:
        case MySQLParser.CHAR_LENGTH:
        case MySQLParser.COERCIBILITY:
        case MySQLParser.COLLATION:
        case MySQLParser.COMPRESS:
        case MySQLParser.CONCAT:
        case MySQLParser.CONCAT_WS:
        case MySQLParser.CONNECTION_ID:
        case MySQLParser.CONV:
        case MySQLParser.CONVERT_TZ:
        case MySQLParser.COS:
        case MySQLParser.COT:
        case MySQLParser.CRC32:
        case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser.CREATE_DH_PARAMETERS:
        case MySQLParser.CREATE_DIGEST:
        case MySQLParser.CROSSES:
        case MySQLParser.DATEDIFF:
        case MySQLParser.DATE_FORMAT:
        case MySQLParser.DAYNAME:
        case MySQLParser.DAYOFMONTH:
        case MySQLParser.DAYOFWEEK:
        case MySQLParser.DAYOFYEAR:
        case MySQLParser.DECODE:
        case MySQLParser.DEGREES:
        case MySQLParser.DES_DECRYPT:
        case MySQLParser.DES_ENCRYPT:
        case MySQLParser.DIMENSION:
        case MySQLParser.DISJOINT:
        case MySQLParser.ELT:
        case MySQLParser.ENCODE:
        case MySQLParser.ENCRYPT:
        case MySQLParser.ENDPOINT:
        case MySQLParser.ENVELOPE:
        case MySQLParser.EQUALS:
        case MySQLParser.EXP:
        case MySQLParser.EXPORT_SET:
        case MySQLParser.EXTERIORRING:
        case MySQLParser.EXTRACTVALUE:
        case MySQLParser.FIELD:
        case MySQLParser.FIND_IN_SET:
        case MySQLParser.FLOOR:
        case MySQLParser.FORMAT:
        case MySQLParser.FOUND_ROWS:
        case MySQLParser.FROM_BASE64:
        case MySQLParser.FROM_DAYS:
        case MySQLParser.FROM_UNIXTIME:
        case MySQLParser.GEOMCOLLFROMTEXT:
        case MySQLParser.GEOMCOLLFROMWKB:
        case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.GEOMETRYFROMTEXT:
        case MySQLParser.GEOMETRYFROMWKB:
        case MySQLParser.GEOMETRYN:
        case MySQLParser.GEOMETRYTYPE:
        case MySQLParser.GEOMFROMTEXT:
        case MySQLParser.GEOMFROMWKB:
        case MySQLParser.GET_FORMAT:
        case MySQLParser.GET_LOCK:
        case MySQLParser.GLENGTH:
        case MySQLParser.GREATEST:
        case MySQLParser.GTID_SUBSET:
        case MySQLParser.GTID_SUBTRACT:
        case MySQLParser.HEX:
        case MySQLParser.IFNULL:
        case MySQLParser.INET6_ATON:
        case MySQLParser.INET6_NTOA:
        case MySQLParser.INET_ATON:
        case MySQLParser.INET_NTOA:
        case MySQLParser.INSTR:
        case MySQLParser.INTERIORRINGN:
        case MySQLParser.INTERSECTS:
        case MySQLParser.ISCLOSED:
        case MySQLParser.ISEMPTY:
        case MySQLParser.ISNULL:
        case MySQLParser.ISSIMPLE:
        case MySQLParser.IS_FREE_LOCK:
        case MySQLParser.IS_IPV4:
        case MySQLParser.IS_IPV4_COMPAT:
        case MySQLParser.IS_IPV4_MAPPED:
        case MySQLParser.IS_IPV6:
        case MySQLParser.IS_USED_LOCK:
        case MySQLParser.LAST_INSERT_ID:
        case MySQLParser.LCASE:
        case MySQLParser.LEAST:
        case MySQLParser.LENGTH:
        case MySQLParser.LINEFROMTEXT:
        case MySQLParser.LINEFROMWKB:
        case MySQLParser.LINESTRINGFROMTEXT:
        case MySQLParser.LINESTRINGFROMWKB:
        case MySQLParser.LN:
        case MySQLParser.LOAD_FILE:
        case MySQLParser.LOCATE:
        case MySQLParser.LOG:
        case MySQLParser.LOG10:
        case MySQLParser.LOG2:
        case MySQLParser.LOWER:
        case MySQLParser.LPAD:
        case MySQLParser.LTRIM:
        case MySQLParser.MAKEDATE:
        case MySQLParser.MAKETIME:
        case MySQLParser.MAKE_SET:
        case MySQLParser.MASTER_POS_WAIT:
        case MySQLParser.MBRCONTAINS:
        case MySQLParser.MBRDISJOINT:
        case MySQLParser.MBREQUAL:
        case MySQLParser.MBRINTERSECTS:
        case MySQLParser.MBROVERLAPS:
        case MySQLParser.MBRTOUCHES:
        case MySQLParser.MBRWITHIN:
        case MySQLParser.MD5:
        case MySQLParser.MLINEFROMTEXT:
        case MySQLParser.MLINEFROMWKB:
        case MySQLParser.MONTHNAME:
        case MySQLParser.MPOINTFROMTEXT:
        case MySQLParser.MPOINTFROMWKB:
        case MySQLParser.MPOLYFROMTEXT:
        case MySQLParser.MPOLYFROMWKB:
        case MySQLParser.MULTILINESTRINGFROMTEXT:
        case MySQLParser.MULTILINESTRINGFROMWKB:
        case MySQLParser.MULTIPOINTFROMTEXT:
        case MySQLParser.MULTIPOINTFROMWKB:
        case MySQLParser.MULTIPOLYGONFROMTEXT:
        case MySQLParser.MULTIPOLYGONFROMWKB:
        case MySQLParser.NAME_CONST:
        case MySQLParser.NULLIF:
        case MySQLParser.NUMGEOMETRIES:
        case MySQLParser.NUMINTERIORRINGS:
        case MySQLParser.NUMPOINTS:
        case MySQLParser.OCT:
        case MySQLParser.OCTET_LENGTH:
        case MySQLParser.ORD:
        case MySQLParser.OVERLAPS:
        case MySQLParser.PERIOD_ADD:
        case MySQLParser.PERIOD_DIFF:
        case MySQLParser.PI:
        case MySQLParser.POINTFROMTEXT:
        case MySQLParser.POINTFROMWKB:
        case MySQLParser.POINTN:
        case MySQLParser.POLYFROMTEXT:
        case MySQLParser.POLYFROMWKB:
        case MySQLParser.POLYGONFROMTEXT:
        case MySQLParser.POLYGONFROMWKB:
        case MySQLParser.POW:
        case MySQLParser.POWER:
        case MySQLParser.QUOTE:
        case MySQLParser.RADIANS:
        case MySQLParser.RAND:
        case MySQLParser.RANDOM_BYTES:
        case MySQLParser.RELEASE_LOCK:
        case MySQLParser.REVERSE:
        case MySQLParser.ROUND:
        case MySQLParser.ROW_COUNT:
        case MySQLParser.RPAD:
        case MySQLParser.RTRIM:
        case MySQLParser.SEC_TO_TIME:
        case MySQLParser.SESSION_USER:
        case MySQLParser.SHA:
        case MySQLParser.SHA1:
        case MySQLParser.SHA2:
        case MySQLParser.SCHEMA_NAME:
        case MySQLParser.SIGN:
        case MySQLParser.SIN:
        case MySQLParser.SLEEP:
        case MySQLParser.SOUNDEX:
        case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser.SQRT:
        case MySQLParser.SRID:
        case MySQLParser.STARTPOINT:
        case MySQLParser.STRCMP:
        case MySQLParser.STR_TO_DATE:
        case MySQLParser.ST_AREA:
        case MySQLParser.ST_ASBINARY:
        case MySQLParser.ST_ASTEXT:
        case MySQLParser.ST_ASWKB:
        case MySQLParser.ST_ASWKT:
        case MySQLParser.ST_BUFFER:
        case MySQLParser.ST_CENTROID:
        case MySQLParser.ST_CONTAINS:
        case MySQLParser.ST_CROSSES:
        case MySQLParser.ST_DIFFERENCE:
        case MySQLParser.ST_DIMENSION:
        case MySQLParser.ST_DISJOINT:
        case MySQLParser.ST_DISTANCE:
        case MySQLParser.ST_ENDPOINT:
        case MySQLParser.ST_ENVELOPE:
        case MySQLParser.ST_EQUALS:
        case MySQLParser.ST_EXTERIORRING:
        case MySQLParser.ST_GEOMCOLLFROMTEXT:
        case MySQLParser.ST_GEOMCOLLFROMTXT:
        case MySQLParser.ST_GEOMCOLLFROMWKB:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.ST_GEOMETRYFROMTEXT:
        case MySQLParser.ST_GEOMETRYFROMWKB:
        case MySQLParser.ST_GEOMETRYN:
        case MySQLParser.ST_GEOMETRYTYPE:
        case MySQLParser.ST_GEOMFROMTEXT:
        case MySQLParser.ST_GEOMFROMWKB:
        case MySQLParser.ST_INTERIORRINGN:
        case MySQLParser.ST_INTERSECTION:
        case MySQLParser.ST_INTERSECTS:
        case MySQLParser.ST_ISCLOSED:
        case MySQLParser.ST_ISEMPTY:
        case MySQLParser.ST_ISSIMPLE:
        case MySQLParser.ST_LINEFROMTEXT:
        case MySQLParser.ST_LINEFROMWKB:
        case MySQLParser.ST_LINESTRINGFROMTEXT:
        case MySQLParser.ST_LINESTRINGFROMWKB:
        case MySQLParser.ST_NUMGEOMETRIES:
        case MySQLParser.ST_NUMINTERIORRING:
        case MySQLParser.ST_NUMINTERIORRINGS:
        case MySQLParser.ST_NUMPOINTS:
        case MySQLParser.ST_OVERLAPS:
        case MySQLParser.ST_POINTFROMTEXT:
        case MySQLParser.ST_POINTFROMWKB:
        case MySQLParser.ST_POINTN:
        case MySQLParser.ST_POLYFROMTEXT:
        case MySQLParser.ST_POLYFROMWKB:
        case MySQLParser.ST_POLYGONFROMTEXT:
        case MySQLParser.ST_POLYGONFROMWKB:
        case MySQLParser.ST_SRID:
        case MySQLParser.ST_STARTPOINT:
        case MySQLParser.ST_SYMDIFFERENCE:
        case MySQLParser.ST_TOUCHES:
        case MySQLParser.ST_UNION:
        case MySQLParser.ST_WITHIN:
        case MySQLParser.ST_X:
        case MySQLParser.ST_Y:
        case MySQLParser.SUBDATE:
        case MySQLParser.SUBSTRING_INDEX:
        case MySQLParser.SUBTIME:
        case MySQLParser.SYSTEM_USER:
        case MySQLParser.TAN:
        case MySQLParser.TIMEDIFF:
        case MySQLParser.TIMESTAMPADD:
        case MySQLParser.TIMESTAMPDIFF:
        case MySQLParser.TIME_FORMAT:
        case MySQLParser.TIME_TO_SEC:
        case MySQLParser.TOUCHES:
        case MySQLParser.TO_BASE64:
        case MySQLParser.TO_DAYS:
        case MySQLParser.TO_SECONDS:
        case MySQLParser.UCASE:
        case MySQLParser.UNCOMPRESS:
        case MySQLParser.UNCOMPRESSED_LENGTH:
        case MySQLParser.UNHEX:
        case MySQLParser.UNIX_TIMESTAMP:
        case MySQLParser.UPDATEXML:
        case MySQLParser.UPPER:
        case MySQLParser.UUID:
        case MySQLParser.UUID_SHORT:
        case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser.VERSION:
        case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser.WEEKDAY:
        case MySQLParser.WEEKOFYEAR:
        case MySQLParser.WEIGHT_STRING:
        case MySQLParser.WITHIN:
        case MySQLParser.YEARWEEK:
        case MySQLParser.Y_FUNCTION:
        case MySQLParser.X_FUNCTION:
        case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser.STRING_LITERAL:
        case MySQLParser.ID:
        case MySQLParser.REVERSE_QUOTE_ID:
            localctx = new HandlerConditionNameContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 4326;
            this.uid();
            break;
        case MySQLParser.SQLWARNING:
            localctx = new HandlerConditionWarningContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 4327;
            this.match(MySQLParser.SQLWARNING);
            break;
        case MySQLParser.NOT:
            localctx = new HandlerConditionNotfoundContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 4328;
            this.match(MySQLParser.NOT);
            this.state = 4329;
            this.match(MySQLParser.FOUND);
            break;
        case MySQLParser.SQLEXCEPTION:
            localctx = new HandlerConditionExceptionContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 4330;
            this.match(MySQLParser.SQLEXCEPTION);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProcedureSqlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_procedureSqlStatement;
    return this;
}

ProcedureSqlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcedureSqlStatementContext.prototype.constructor = ProcedureSqlStatementContext;

ProcedureSqlStatementContext.prototype.SEMI = function() {
    return this.getToken(MySQLParser.SEMI, 0);
};

ProcedureSqlStatementContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

ProcedureSqlStatementContext.prototype.sqlStatement = function() {
    return this.getTypedRuleContext(SqlStatementContext,0);
};

ProcedureSqlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterProcedureSqlStatement(this);
	}
};

ProcedureSqlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitProcedureSqlStatement(this);
	}
};

ProcedureSqlStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitProcedureSqlStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ProcedureSqlStatementContext = ProcedureSqlStatementContext;

MySQLParser.prototype.procedureSqlStatement = function() {

    var localctx = new ProcedureSqlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, MySQLParser.RULE_procedureSqlStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4335;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,624,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4333;
            this.compoundStatement();
            break;

        case 2:
            this.state = 4334;
            this.sqlStatement();
            break;

        }
        this.state = 4337;
        this.match(MySQLParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CaseAlternativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_caseAlternative;
    return this;
}

CaseAlternativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseAlternativeContext.prototype.constructor = CaseAlternativeContext;

CaseAlternativeContext.prototype.WHEN = function() {
    return this.getToken(MySQLParser.WHEN, 0);
};

CaseAlternativeContext.prototype.THEN = function() {
    return this.getToken(MySQLParser.THEN, 0);
};

CaseAlternativeContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

CaseAlternativeContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CaseAlternativeContext.prototype.procedureSqlStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
    } else {
        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
    }
};

CaseAlternativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCaseAlternative(this);
	}
};

CaseAlternativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCaseAlternative(this);
	}
};

CaseAlternativeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCaseAlternative(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CaseAlternativeContext = CaseAlternativeContext;

MySQLParser.prototype.caseAlternative = function() {

    var localctx = new CaseAlternativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, MySQLParser.RULE_caseAlternative);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4339;
        this.match(MySQLParser.WHEN);
        this.state = 4342;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,625,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4340;
            this.constant();
            break;

        case 2:
            this.state = 4341;
            this.expression(0);
            break;

        }
        this.state = 4344;
        this.match(MySQLParser.THEN);
        this.state = 4346; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 4345;
        		this.procedureSqlStatement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 4348; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,626, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElifAlternativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_elifAlternative;
    return this;
}

ElifAlternativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElifAlternativeContext.prototype.constructor = ElifAlternativeContext;

ElifAlternativeContext.prototype.ELSEIF = function() {
    return this.getToken(MySQLParser.ELSEIF, 0);
};

ElifAlternativeContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElifAlternativeContext.prototype.THEN = function() {
    return this.getToken(MySQLParser.THEN, 0);
};

ElifAlternativeContext.prototype.procedureSqlStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
    } else {
        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
    }
};

ElifAlternativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterElifAlternative(this);
	}
};

ElifAlternativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitElifAlternative(this);
	}
};

ElifAlternativeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitElifAlternative(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ElifAlternativeContext = ElifAlternativeContext;

MySQLParser.prototype.elifAlternative = function() {

    var localctx = new ElifAlternativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, MySQLParser.RULE_elifAlternative);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4350;
        this.match(MySQLParser.ELSEIF);
        this.state = 4351;
        this.expression(0);
        this.state = 4352;
        this.match(MySQLParser.THEN);
        this.state = 4354; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 4353;
        		this.procedureSqlStatement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 4356; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,627, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_alterUser;
    return this;
}

AlterUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterUserContext.prototype.constructor = AlterUserContext;


 
AlterUserContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AlterUserMysqlV56Context(parser, ctx) {
	AlterUserContext.call(this, parser);
    AlterUserContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterUserMysqlV56Context.prototype = Object.create(AlterUserContext.prototype);
AlterUserMysqlV56Context.prototype.constructor = AlterUserMysqlV56Context;

MySQLParser.AlterUserMysqlV56Context = AlterUserMysqlV56Context;

AlterUserMysqlV56Context.prototype.ALTER = function() {
    return this.getToken(MySQLParser.ALTER, 0);
};

AlterUserMysqlV56Context.prototype.USER = function() {
    return this.getToken(MySQLParser.USER, 0);
};

AlterUserMysqlV56Context.prototype.userSpecification = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserSpecificationContext);
    } else {
        return this.getTypedRuleContext(UserSpecificationContext,i);
    }
};

AlterUserMysqlV56Context.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

AlterUserMysqlV56Context.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterUserMysqlV56(this);
	}
};

AlterUserMysqlV56Context.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterUserMysqlV56(this);
	}
};

AlterUserMysqlV56Context.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterUserMysqlV56(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterUserMysqlV57Context(parser, ctx) {
	AlterUserContext.call(this, parser);
    this.tlsNone = null; // Token;
    AlterUserContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterUserMysqlV57Context.prototype = Object.create(AlterUserContext.prototype);
AlterUserMysqlV57Context.prototype.constructor = AlterUserMysqlV57Context;

MySQLParser.AlterUserMysqlV57Context = AlterUserMysqlV57Context;

AlterUserMysqlV57Context.prototype.ALTER = function() {
    return this.getToken(MySQLParser.ALTER, 0);
};

AlterUserMysqlV57Context.prototype.USER = function() {
    return this.getToken(MySQLParser.USER, 0);
};

AlterUserMysqlV57Context.prototype.userAuthOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserAuthOptionContext);
    } else {
        return this.getTypedRuleContext(UserAuthOptionContext,i);
    }
};

AlterUserMysqlV57Context.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

AlterUserMysqlV57Context.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


AlterUserMysqlV57Context.prototype.REQUIRE = function() {
    return this.getToken(MySQLParser.REQUIRE, 0);
};

AlterUserMysqlV57Context.prototype.WITH = function() {
    return this.getToken(MySQLParser.WITH, 0);
};

AlterUserMysqlV57Context.prototype.userPasswordOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserPasswordOptionContext);
    } else {
        return this.getTypedRuleContext(UserPasswordOptionContext,i);
    }
};

AlterUserMysqlV57Context.prototype.userLockOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserLockOptionContext);
    } else {
        return this.getTypedRuleContext(UserLockOptionContext,i);
    }
};

AlterUserMysqlV57Context.prototype.tlsOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TlsOptionContext);
    } else {
        return this.getTypedRuleContext(TlsOptionContext,i);
    }
};

AlterUserMysqlV57Context.prototype.NONE = function() {
    return this.getToken(MySQLParser.NONE, 0);
};

AlterUserMysqlV57Context.prototype.userResourceOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserResourceOptionContext);
    } else {
        return this.getTypedRuleContext(UserResourceOptionContext,i);
    }
};

AlterUserMysqlV57Context.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.AND);
    } else {
        return this.getToken(MySQLParser.AND, i);
    }
};

AlterUserMysqlV57Context.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAlterUserMysqlV57(this);
	}
};

AlterUserMysqlV57Context.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAlterUserMysqlV57(this);
	}
};

AlterUserMysqlV57Context.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAlterUserMysqlV57(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.AlterUserContext = AlterUserContext;

MySQLParser.prototype.alterUser = function() {

    var localctx = new AlterUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, MySQLParser.RULE_alterUser);
    var _la = 0; // Token type
    try {
        this.state = 4412;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,639,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AlterUserMysqlV56Context(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 4358;
            this.match(MySQLParser.ALTER);
            this.state = 4359;
            this.match(MySQLParser.USER);
            this.state = 4360;
            this.userSpecification();
            this.state = 4365;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 4361;
                this.match(MySQLParser.COMMA);
                this.state = 4362;
                this.userSpecification();
                this.state = 4367;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            localctx = new AlterUserMysqlV57Context(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 4368;
            this.match(MySQLParser.ALTER);
            this.state = 4369;
            this.match(MySQLParser.USER);
            this.state = 4371;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.IF) {
                this.state = 4370;
                this.ifExists();
            }

            this.state = 4373;
            this.userAuthOption();
            this.state = 4378;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 4374;
                this.match(MySQLParser.COMMA);
                this.state = 4375;
                this.userAuthOption();
                this.state = 4380;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4395;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.REQUIRE) {
                this.state = 4381;
                this.match(MySQLParser.REQUIRE);
                this.state = 4393;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.NONE:
                    this.state = 4382;
                    localctx.tlsNone = this.match(MySQLParser.NONE);
                    break;
                case MySQLParser.SSL:
                case MySQLParser.CIPHER:
                case MySQLParser.ISSUER:
                case MySQLParser.SUBJECT:
                case MySQLParser.X509:
                    this.state = 4383;
                    this.tlsOption();
                    this.state = 4390;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===MySQLParser.AND || _la===MySQLParser.SSL || _la===MySQLParser.CIPHER || _la===MySQLParser.ISSUER || _la===MySQLParser.SUBJECT || _la===MySQLParser.X509) {
                        this.state = 4385;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===MySQLParser.AND) {
                            this.state = 4384;
                            this.match(MySQLParser.AND);
                        }

                        this.state = 4387;
                        this.tlsOption();
                        this.state = 4392;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }

            this.state = 4403;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.WITH) {
                this.state = 4397;
                this.match(MySQLParser.WITH);
                this.state = 4399; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 4398;
                    this.userResourceOption();
                    this.state = 4401; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(((((_la - 426)) & ~0x1f) == 0 && ((1 << (_la - 426)) & ((1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 426)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 426)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 426)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 426)))) !== 0));
            }

            this.state = 4409;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.ACCOUNT || _la===MySQLParser.PASSWORD) {
                this.state = 4407;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.PASSWORD:
                    this.state = 4405;
                    this.userPasswordOption();
                    break;
                case MySQLParser.ACCOUNT:
                    this.state = 4406;
                    this.userLockOption();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 4411;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createUser;
    return this;
}

CreateUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateUserContext.prototype.constructor = CreateUserContext;


 
CreateUserContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CreateUserMysqlV57Context(parser, ctx) {
	CreateUserContext.call(this, parser);
    this.tlsNone = null; // Token;
    CreateUserContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateUserMysqlV57Context.prototype = Object.create(CreateUserContext.prototype);
CreateUserMysqlV57Context.prototype.constructor = CreateUserMysqlV57Context;

MySQLParser.CreateUserMysqlV57Context = CreateUserMysqlV57Context;

CreateUserMysqlV57Context.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

CreateUserMysqlV57Context.prototype.USER = function() {
    return this.getToken(MySQLParser.USER, 0);
};

CreateUserMysqlV57Context.prototype.userAuthOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserAuthOptionContext);
    } else {
        return this.getTypedRuleContext(UserAuthOptionContext,i);
    }
};

CreateUserMysqlV57Context.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateUserMysqlV57Context.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


CreateUserMysqlV57Context.prototype.REQUIRE = function() {
    return this.getToken(MySQLParser.REQUIRE, 0);
};

CreateUserMysqlV57Context.prototype.WITH = function() {
    return this.getToken(MySQLParser.WITH, 0);
};

CreateUserMysqlV57Context.prototype.userPasswordOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserPasswordOptionContext);
    } else {
        return this.getTypedRuleContext(UserPasswordOptionContext,i);
    }
};

CreateUserMysqlV57Context.prototype.userLockOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserLockOptionContext);
    } else {
        return this.getTypedRuleContext(UserLockOptionContext,i);
    }
};

CreateUserMysqlV57Context.prototype.tlsOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TlsOptionContext);
    } else {
        return this.getTypedRuleContext(TlsOptionContext,i);
    }
};

CreateUserMysqlV57Context.prototype.NONE = function() {
    return this.getToken(MySQLParser.NONE, 0);
};

CreateUserMysqlV57Context.prototype.userResourceOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserResourceOptionContext);
    } else {
        return this.getTypedRuleContext(UserResourceOptionContext,i);
    }
};

CreateUserMysqlV57Context.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.AND);
    } else {
        return this.getToken(MySQLParser.AND, i);
    }
};

CreateUserMysqlV57Context.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateUserMysqlV57(this);
	}
};

CreateUserMysqlV57Context.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateUserMysqlV57(this);
	}
};

CreateUserMysqlV57Context.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateUserMysqlV57(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CreateUserMysqlV56Context(parser, ctx) {
	CreateUserContext.call(this, parser);
    CreateUserContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateUserMysqlV56Context.prototype = Object.create(CreateUserContext.prototype);
CreateUserMysqlV56Context.prototype.constructor = CreateUserMysqlV56Context;

MySQLParser.CreateUserMysqlV56Context = CreateUserMysqlV56Context;

CreateUserMysqlV56Context.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

CreateUserMysqlV56Context.prototype.USER = function() {
    return this.getToken(MySQLParser.USER, 0);
};

CreateUserMysqlV56Context.prototype.userAuthOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserAuthOptionContext);
    } else {
        return this.getTypedRuleContext(UserAuthOptionContext,i);
    }
};

CreateUserMysqlV56Context.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

CreateUserMysqlV56Context.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateUserMysqlV56(this);
	}
};

CreateUserMysqlV56Context.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateUserMysqlV56(this);
	}
};

CreateUserMysqlV56Context.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateUserMysqlV56(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.CreateUserContext = CreateUserContext;

MySQLParser.prototype.createUser = function() {

    var localctx = new CreateUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, MySQLParser.RULE_createUser);
    var _la = 0; // Token type
    try {
        this.state = 4468;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,651,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CreateUserMysqlV56Context(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 4414;
            this.match(MySQLParser.CREATE);
            this.state = 4415;
            this.match(MySQLParser.USER);
            this.state = 4416;
            this.userAuthOption();
            this.state = 4421;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 4417;
                this.match(MySQLParser.COMMA);
                this.state = 4418;
                this.userAuthOption();
                this.state = 4423;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            localctx = new CreateUserMysqlV57Context(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 4424;
            this.match(MySQLParser.CREATE);
            this.state = 4425;
            this.match(MySQLParser.USER);
            this.state = 4427;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.IF) {
                this.state = 4426;
                this.ifNotExists();
            }

            this.state = 4429;
            this.userAuthOption();
            this.state = 4434;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 4430;
                this.match(MySQLParser.COMMA);
                this.state = 4431;
                this.userAuthOption();
                this.state = 4436;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4451;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.REQUIRE) {
                this.state = 4437;
                this.match(MySQLParser.REQUIRE);
                this.state = 4449;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.NONE:
                    this.state = 4438;
                    localctx.tlsNone = this.match(MySQLParser.NONE);
                    break;
                case MySQLParser.SSL:
                case MySQLParser.CIPHER:
                case MySQLParser.ISSUER:
                case MySQLParser.SUBJECT:
                case MySQLParser.X509:
                    this.state = 4439;
                    this.tlsOption();
                    this.state = 4446;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===MySQLParser.AND || _la===MySQLParser.SSL || _la===MySQLParser.CIPHER || _la===MySQLParser.ISSUER || _la===MySQLParser.SUBJECT || _la===MySQLParser.X509) {
                        this.state = 4441;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===MySQLParser.AND) {
                            this.state = 4440;
                            this.match(MySQLParser.AND);
                        }

                        this.state = 4443;
                        this.tlsOption();
                        this.state = 4448;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }

            this.state = 4459;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.WITH) {
                this.state = 4453;
                this.match(MySQLParser.WITH);
                this.state = 4455; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 4454;
                    this.userResourceOption();
                    this.state = 4457; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(((((_la - 426)) & ~0x1f) == 0 && ((1 << (_la - 426)) & ((1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 426)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 426)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 426)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 426)))) !== 0));
            }

            this.state = 4465;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.ACCOUNT || _la===MySQLParser.PASSWORD) {
                this.state = 4463;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.PASSWORD:
                    this.state = 4461;
                    this.userPasswordOption();
                    break;
                case MySQLParser.ACCOUNT:
                    this.state = 4462;
                    this.userLockOption();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 4467;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dropUser;
    return this;
}

DropUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropUserContext.prototype.constructor = DropUserContext;

DropUserContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

DropUserContext.prototype.USER = function() {
    return this.getToken(MySQLParser.USER, 0);
};

DropUserContext.prototype.userName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserNameContext);
    } else {
        return this.getTypedRuleContext(UserNameContext,i);
    }
};

DropUserContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropUserContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


DropUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDropUser(this);
	}
};

DropUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDropUser(this);
	}
};

DropUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDropUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DropUserContext = DropUserContext;

MySQLParser.prototype.dropUser = function() {

    var localctx = new DropUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, MySQLParser.RULE_dropUser);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4470;
        this.match(MySQLParser.DROP);
        this.state = 4471;
        this.match(MySQLParser.USER);
        this.state = 4473;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IF) {
            this.state = 4472;
            this.ifExists();
        }

        this.state = 4475;
        this.userName();
        this.state = 4480;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 4476;
            this.match(MySQLParser.COMMA);
            this.state = 4477;
            this.userName();
            this.state = 4482;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GrantStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_grantStatement;
    this.privilegeObject = null; // Token
    this.tlsNone = null; // Token
    return this;
}

GrantStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrantStatementContext.prototype.constructor = GrantStatementContext;

GrantStatementContext.prototype.GRANT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.GRANT);
    } else {
        return this.getToken(MySQLParser.GRANT, i);
    }
};


GrantStatementContext.prototype.privelegeClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrivelegeClauseContext);
    } else {
        return this.getTypedRuleContext(PrivelegeClauseContext,i);
    }
};

GrantStatementContext.prototype.ON = function() {
    return this.getToken(MySQLParser.ON, 0);
};

GrantStatementContext.prototype.privilegeLevel = function() {
    return this.getTypedRuleContext(PrivilegeLevelContext,0);
};

GrantStatementContext.prototype.TO = function() {
    return this.getToken(MySQLParser.TO, 0);
};

GrantStatementContext.prototype.userAuthOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserAuthOptionContext);
    } else {
        return this.getTypedRuleContext(UserAuthOptionContext,i);
    }
};

GrantStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


GrantStatementContext.prototype.REQUIRE = function() {
    return this.getToken(MySQLParser.REQUIRE, 0);
};

GrantStatementContext.prototype.WITH = function() {
    return this.getToken(MySQLParser.WITH, 0);
};

GrantStatementContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

GrantStatementContext.prototype.FUNCTION = function() {
    return this.getToken(MySQLParser.FUNCTION, 0);
};

GrantStatementContext.prototype.PROCEDURE = function() {
    return this.getToken(MySQLParser.PROCEDURE, 0);
};

GrantStatementContext.prototype.tlsOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TlsOptionContext);
    } else {
        return this.getTypedRuleContext(TlsOptionContext,i);
    }
};

GrantStatementContext.prototype.NONE = function() {
    return this.getToken(MySQLParser.NONE, 0);
};

GrantStatementContext.prototype.OPTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.OPTION);
    } else {
        return this.getToken(MySQLParser.OPTION, i);
    }
};


GrantStatementContext.prototype.userResourceOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserResourceOptionContext);
    } else {
        return this.getTypedRuleContext(UserResourceOptionContext,i);
    }
};

GrantStatementContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.AND);
    } else {
        return this.getToken(MySQLParser.AND, i);
    }
};


GrantStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGrantStatement(this);
	}
};

GrantStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGrantStatement(this);
	}
};

GrantStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGrantStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GrantStatementContext = GrantStatementContext;

MySQLParser.prototype.grantStatement = function() {

    var localctx = new GrantStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, MySQLParser.RULE_grantStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4483;
        this.match(MySQLParser.GRANT);
        this.state = 4484;
        this.privelegeClause();
        this.state = 4489;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 4485;
            this.match(MySQLParser.COMMA);
            this.state = 4486;
            this.privelegeClause();
            this.state = 4491;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4492;
        this.match(MySQLParser.ON);
        this.state = 4494;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,655,this._ctx);
        if(la_===1) {
            this.state = 4493;
            localctx.privilegeObject = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.PROCEDURE || _la===MySQLParser.TABLE || _la===MySQLParser.FUNCTION)) {
                localctx.privilegeObject = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 4496;
        this.privilegeLevel();
        this.state = 4497;
        this.match(MySQLParser.TO);
        this.state = 4498;
        this.userAuthOption();
        this.state = 4503;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 4499;
            this.match(MySQLParser.COMMA);
            this.state = 4500;
            this.userAuthOption();
            this.state = 4505;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4520;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.REQUIRE) {
            this.state = 4506;
            this.match(MySQLParser.REQUIRE);
            this.state = 4518;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.NONE:
                this.state = 4507;
                localctx.tlsNone = this.match(MySQLParser.NONE);
                break;
            case MySQLParser.SSL:
            case MySQLParser.CIPHER:
            case MySQLParser.ISSUER:
            case MySQLParser.SUBJECT:
            case MySQLParser.X509:
                this.state = 4508;
                this.tlsOption();
                this.state = 4515;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===MySQLParser.AND || _la===MySQLParser.SSL || _la===MySQLParser.CIPHER || _la===MySQLParser.ISSUER || _la===MySQLParser.SUBJECT || _la===MySQLParser.X509) {
                    this.state = 4510;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===MySQLParser.AND) {
                        this.state = 4509;
                        this.match(MySQLParser.AND);
                    }

                    this.state = 4512;
                    this.tlsOption();
                    this.state = 4517;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

        this.state = 4531;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WITH) {
            this.state = 4522;
            this.match(MySQLParser.WITH);
            this.state = 4528;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,662,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 4526;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case MySQLParser.GRANT:
                        this.state = 4523;
                        this.match(MySQLParser.GRANT);
                        this.state = 4524;
                        this.match(MySQLParser.OPTION);
                        break;
                    case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
                    case MySQLParser.MAX_QUERIES_PER_HOUR:
                    case MySQLParser.MAX_UPDATES_PER_HOUR:
                    case MySQLParser.MAX_USER_CONNECTIONS:
                        this.state = 4525;
                        this.userResourceOption();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 4530;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,662,this._ctx);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GrantProxyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_grantProxy;
    this.fromFirst = null; // UserNameContext
    this.toFirst = null; // UserNameContext
    this._userName = null; // UserNameContext
    this.toOther = []; // of UserNameContexts
    return this;
}

GrantProxyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrantProxyContext.prototype.constructor = GrantProxyContext;

GrantProxyContext.prototype.GRANT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.GRANT);
    } else {
        return this.getToken(MySQLParser.GRANT, i);
    }
};


GrantProxyContext.prototype.PROXY = function() {
    return this.getToken(MySQLParser.PROXY, 0);
};

GrantProxyContext.prototype.ON = function() {
    return this.getToken(MySQLParser.ON, 0);
};

GrantProxyContext.prototype.TO = function() {
    return this.getToken(MySQLParser.TO, 0);
};

GrantProxyContext.prototype.userName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserNameContext);
    } else {
        return this.getTypedRuleContext(UserNameContext,i);
    }
};

GrantProxyContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


GrantProxyContext.prototype.WITH = function() {
    return this.getToken(MySQLParser.WITH, 0);
};

GrantProxyContext.prototype.OPTION = function() {
    return this.getToken(MySQLParser.OPTION, 0);
};

GrantProxyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGrantProxy(this);
	}
};

GrantProxyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGrantProxy(this);
	}
};

GrantProxyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGrantProxy(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.GrantProxyContext = GrantProxyContext;

MySQLParser.prototype.grantProxy = function() {

    var localctx = new GrantProxyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, MySQLParser.RULE_grantProxy);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4533;
        this.match(MySQLParser.GRANT);
        this.state = 4534;
        this.match(MySQLParser.PROXY);
        this.state = 4535;
        this.match(MySQLParser.ON);
        this.state = 4536;
        localctx.fromFirst = this.userName();
        this.state = 4537;
        this.match(MySQLParser.TO);
        this.state = 4538;
        localctx.toFirst = this.userName();
        this.state = 4543;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 4539;
            this.match(MySQLParser.COMMA);
            this.state = 4540;
            localctx._userName = this.userName();
            localctx.toOther.push(localctx._userName);
            this.state = 4545;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4549;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.WITH) {
            this.state = 4546;
            this.match(MySQLParser.WITH);
            this.state = 4547;
            this.match(MySQLParser.GRANT);
            this.state = 4548;
            this.match(MySQLParser.OPTION);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RenameUserContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_renameUser;
    return this;
}

RenameUserContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenameUserContext.prototype.constructor = RenameUserContext;

RenameUserContext.prototype.RENAME = function() {
    return this.getToken(MySQLParser.RENAME, 0);
};

RenameUserContext.prototype.USER = function() {
    return this.getToken(MySQLParser.USER, 0);
};

RenameUserContext.prototype.renameUserClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RenameUserClauseContext);
    } else {
        return this.getTypedRuleContext(RenameUserClauseContext,i);
    }
};

RenameUserContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


RenameUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRenameUser(this);
	}
};

RenameUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRenameUser(this);
	}
};

RenameUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRenameUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RenameUserContext = RenameUserContext;

MySQLParser.prototype.renameUser = function() {

    var localctx = new RenameUserContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, MySQLParser.RULE_renameUser);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4551;
        this.match(MySQLParser.RENAME);
        this.state = 4552;
        this.match(MySQLParser.USER);
        this.state = 4553;
        this.renameUserClause();
        this.state = 4558;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 4554;
            this.match(MySQLParser.COMMA);
            this.state = 4555;
            this.renameUserClause();
            this.state = 4560;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RevokeStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_revokeStatement;
    return this;
}

RevokeStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RevokeStatementContext.prototype.constructor = RevokeStatementContext;


 
RevokeStatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DetailRevokeContext(parser, ctx) {
	RevokeStatementContext.call(this, parser);
    this.privilegeObject = null; // Token;
    RevokeStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DetailRevokeContext.prototype = Object.create(RevokeStatementContext.prototype);
DetailRevokeContext.prototype.constructor = DetailRevokeContext;

MySQLParser.DetailRevokeContext = DetailRevokeContext;

DetailRevokeContext.prototype.REVOKE = function() {
    return this.getToken(MySQLParser.REVOKE, 0);
};

DetailRevokeContext.prototype.privelegeClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrivelegeClauseContext);
    } else {
        return this.getTypedRuleContext(PrivelegeClauseContext,i);
    }
};

DetailRevokeContext.prototype.ON = function() {
    return this.getToken(MySQLParser.ON, 0);
};

DetailRevokeContext.prototype.privilegeLevel = function() {
    return this.getTypedRuleContext(PrivilegeLevelContext,0);
};

DetailRevokeContext.prototype.FROM = function() {
    return this.getToken(MySQLParser.FROM, 0);
};

DetailRevokeContext.prototype.userName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserNameContext);
    } else {
        return this.getTypedRuleContext(UserNameContext,i);
    }
};

DetailRevokeContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


DetailRevokeContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

DetailRevokeContext.prototype.FUNCTION = function() {
    return this.getToken(MySQLParser.FUNCTION, 0);
};

DetailRevokeContext.prototype.PROCEDURE = function() {
    return this.getToken(MySQLParser.PROCEDURE, 0);
};
DetailRevokeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDetailRevoke(this);
	}
};

DetailRevokeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDetailRevoke(this);
	}
};

DetailRevokeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDetailRevoke(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShortRevokeContext(parser, ctx) {
	RevokeStatementContext.call(this, parser);
    RevokeStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShortRevokeContext.prototype = Object.create(RevokeStatementContext.prototype);
ShortRevokeContext.prototype.constructor = ShortRevokeContext;

MySQLParser.ShortRevokeContext = ShortRevokeContext;

ShortRevokeContext.prototype.REVOKE = function() {
    return this.getToken(MySQLParser.REVOKE, 0);
};

ShortRevokeContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};

ShortRevokeContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


ShortRevokeContext.prototype.GRANT = function() {
    return this.getToken(MySQLParser.GRANT, 0);
};

ShortRevokeContext.prototype.OPTION = function() {
    return this.getToken(MySQLParser.OPTION, 0);
};

ShortRevokeContext.prototype.FROM = function() {
    return this.getToken(MySQLParser.FROM, 0);
};

ShortRevokeContext.prototype.userName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserNameContext);
    } else {
        return this.getTypedRuleContext(UserNameContext,i);
    }
};

ShortRevokeContext.prototype.PRIVILEGES = function() {
    return this.getToken(MySQLParser.PRIVILEGES, 0);
};
ShortRevokeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShortRevoke(this);
	}
};

ShortRevokeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShortRevoke(this);
	}
};

ShortRevokeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShortRevoke(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.RevokeStatementContext = RevokeStatementContext;

MySQLParser.prototype.revokeStatement = function() {

    var localctx = new RevokeStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, MySQLParser.RULE_revokeStatement);
    var _la = 0; // Token type
    try {
        this.state = 4601;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,672,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DetailRevokeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 4561;
            this.match(MySQLParser.REVOKE);
            this.state = 4562;
            this.privelegeClause();
            this.state = 4567;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 4563;
                this.match(MySQLParser.COMMA);
                this.state = 4564;
                this.privelegeClause();
                this.state = 4569;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4570;
            this.match(MySQLParser.ON);
            this.state = 4572;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,668,this._ctx);
            if(la_===1) {
                this.state = 4571;
                localctx.privilegeObject = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.PROCEDURE || _la===MySQLParser.TABLE || _la===MySQLParser.FUNCTION)) {
                    localctx.privilegeObject = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 4574;
            this.privilegeLevel();
            this.state = 4575;
            this.match(MySQLParser.FROM);
            this.state = 4576;
            this.userName();
            this.state = 4581;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 4577;
                this.match(MySQLParser.COMMA);
                this.state = 4578;
                this.userName();
                this.state = 4583;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            localctx = new ShortRevokeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 4584;
            this.match(MySQLParser.REVOKE);
            this.state = 4585;
            this.match(MySQLParser.ALL);
            this.state = 4587;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.PRIVILEGES) {
                this.state = 4586;
                this.match(MySQLParser.PRIVILEGES);
            }

            this.state = 4589;
            this.match(MySQLParser.COMMA);
            this.state = 4590;
            this.match(MySQLParser.GRANT);
            this.state = 4591;
            this.match(MySQLParser.OPTION);
            this.state = 4592;
            this.match(MySQLParser.FROM);
            this.state = 4593;
            this.userName();
            this.state = 4598;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 4594;
                this.match(MySQLParser.COMMA);
                this.state = 4595;
                this.userName();
                this.state = 4600;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RevokeProxyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_revokeProxy;
    this.onUser = null; // UserNameContext
    this.fromFirst = null; // UserNameContext
    this._userName = null; // UserNameContext
    this.fromOther = []; // of UserNameContexts
    return this;
}

RevokeProxyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RevokeProxyContext.prototype.constructor = RevokeProxyContext;

RevokeProxyContext.prototype.REVOKE = function() {
    return this.getToken(MySQLParser.REVOKE, 0);
};

RevokeProxyContext.prototype.PROXY = function() {
    return this.getToken(MySQLParser.PROXY, 0);
};

RevokeProxyContext.prototype.ON = function() {
    return this.getToken(MySQLParser.ON, 0);
};

RevokeProxyContext.prototype.FROM = function() {
    return this.getToken(MySQLParser.FROM, 0);
};

RevokeProxyContext.prototype.userName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserNameContext);
    } else {
        return this.getTypedRuleContext(UserNameContext,i);
    }
};

RevokeProxyContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


RevokeProxyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRevokeProxy(this);
	}
};

RevokeProxyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRevokeProxy(this);
	}
};

RevokeProxyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRevokeProxy(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RevokeProxyContext = RevokeProxyContext;

MySQLParser.prototype.revokeProxy = function() {

    var localctx = new RevokeProxyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, MySQLParser.RULE_revokeProxy);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4603;
        this.match(MySQLParser.REVOKE);
        this.state = 4604;
        this.match(MySQLParser.PROXY);
        this.state = 4605;
        this.match(MySQLParser.ON);
        this.state = 4606;
        localctx.onUser = this.userName();
        this.state = 4607;
        this.match(MySQLParser.FROM);
        this.state = 4608;
        localctx.fromFirst = this.userName();
        this.state = 4613;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 4609;
            this.match(MySQLParser.COMMA);
            this.state = 4610;
            localctx._userName = this.userName();
            localctx.fromOther.push(localctx._userName);
            this.state = 4615;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetPasswordStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_setPasswordStatement;
    return this;
}

SetPasswordStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetPasswordStatementContext.prototype.constructor = SetPasswordStatementContext;

SetPasswordStatementContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

SetPasswordStatementContext.prototype.PASSWORD = function() {
    return this.getToken(MySQLParser.PASSWORD, 0);
};

SetPasswordStatementContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

SetPasswordStatementContext.prototype.passwordFunctionClause = function() {
    return this.getTypedRuleContext(PasswordFunctionClauseContext,0);
};

SetPasswordStatementContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

SetPasswordStatementContext.prototype.FOR = function() {
    return this.getToken(MySQLParser.FOR, 0);
};

SetPasswordStatementContext.prototype.userName = function() {
    return this.getTypedRuleContext(UserNameContext,0);
};

SetPasswordStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSetPasswordStatement(this);
	}
};

SetPasswordStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSetPasswordStatement(this);
	}
};

SetPasswordStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSetPasswordStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SetPasswordStatementContext = SetPasswordStatementContext;

MySQLParser.prototype.setPasswordStatement = function() {

    var localctx = new SetPasswordStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, MySQLParser.RULE_setPasswordStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4616;
        this.match(MySQLParser.SET);
        this.state = 4617;
        this.match(MySQLParser.PASSWORD);
        this.state = 4620;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.FOR) {
            this.state = 4618;
            this.match(MySQLParser.FOR);
            this.state = 4619;
            this.userName();
        }

        this.state = 4622;
        this.match(MySQLParser.EQUAL_SYMBOL);
        this.state = 4625;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.OLD_PASSWORD:
        case MySQLParser.PASSWORD:
            this.state = 4623;
            this.passwordFunctionClause();
            break;
        case MySQLParser.STRING_LITERAL:
            this.state = 4624;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserSpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_userSpecification;
    return this;
}

UserSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserSpecificationContext.prototype.constructor = UserSpecificationContext;

UserSpecificationContext.prototype.userName = function() {
    return this.getTypedRuleContext(UserNameContext,0);
};

UserSpecificationContext.prototype.userPasswordOption = function() {
    return this.getTypedRuleContext(UserPasswordOptionContext,0);
};

UserSpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUserSpecification(this);
	}
};

UserSpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUserSpecification(this);
	}
};

UserSpecificationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUserSpecification(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UserSpecificationContext = UserSpecificationContext;

MySQLParser.prototype.userSpecification = function() {

    var localctx = new UserSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, MySQLParser.RULE_userSpecification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4627;
        this.userName();
        this.state = 4628;
        this.userPasswordOption();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserAuthOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_userAuthOption;
    return this;
}

UserAuthOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserAuthOptionContext.prototype.constructor = UserAuthOptionContext;


 
UserAuthOptionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SimpleAuthOptionContext(parser, ctx) {
	UserAuthOptionContext.call(this, parser);
    UserAuthOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleAuthOptionContext.prototype = Object.create(UserAuthOptionContext.prototype);
SimpleAuthOptionContext.prototype.constructor = SimpleAuthOptionContext;

MySQLParser.SimpleAuthOptionContext = SimpleAuthOptionContext;

SimpleAuthOptionContext.prototype.userName = function() {
    return this.getTypedRuleContext(UserNameContext,0);
};
SimpleAuthOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleAuthOption(this);
	}
};

SimpleAuthOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleAuthOption(this);
	}
};

SimpleAuthOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleAuthOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PasswordAuthOptionContext(parser, ctx) {
	UserAuthOptionContext.call(this, parser);
    this.hashed = null; // Token;
    UserAuthOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PasswordAuthOptionContext.prototype = Object.create(UserAuthOptionContext.prototype);
PasswordAuthOptionContext.prototype.constructor = PasswordAuthOptionContext;

MySQLParser.PasswordAuthOptionContext = PasswordAuthOptionContext;

PasswordAuthOptionContext.prototype.userName = function() {
    return this.getTypedRuleContext(UserNameContext,0);
};

PasswordAuthOptionContext.prototype.IDENTIFIED = function() {
    return this.getToken(MySQLParser.IDENTIFIED, 0);
};

PasswordAuthOptionContext.prototype.BY = function() {
    return this.getToken(MySQLParser.BY, 0);
};

PasswordAuthOptionContext.prototype.PASSWORD = function() {
    return this.getToken(MySQLParser.PASSWORD, 0);
};

PasswordAuthOptionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};
PasswordAuthOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPasswordAuthOption(this);
	}
};

PasswordAuthOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPasswordAuthOption(this);
	}
};

PasswordAuthOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPasswordAuthOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function StringAuthOptionContext(parser, ctx) {
	UserAuthOptionContext.call(this, parser);
    UserAuthOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StringAuthOptionContext.prototype = Object.create(UserAuthOptionContext.prototype);
StringAuthOptionContext.prototype.constructor = StringAuthOptionContext;

MySQLParser.StringAuthOptionContext = StringAuthOptionContext;

StringAuthOptionContext.prototype.userName = function() {
    return this.getTypedRuleContext(UserNameContext,0);
};

StringAuthOptionContext.prototype.IDENTIFIED = function() {
    return this.getToken(MySQLParser.IDENTIFIED, 0);
};

StringAuthOptionContext.prototype.BY = function() {
    return this.getToken(MySQLParser.BY, 0);
};

StringAuthOptionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

StringAuthOptionContext.prototype.WITH = function() {
    return this.getToken(MySQLParser.WITH, 0);
};

StringAuthOptionContext.prototype.authPlugin = function() {
    return this.getTypedRuleContext(AuthPluginContext,0);
};
StringAuthOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStringAuthOption(this);
	}
};

StringAuthOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStringAuthOption(this);
	}
};

StringAuthOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStringAuthOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HashAuthOptionContext(parser, ctx) {
	UserAuthOptionContext.call(this, parser);
    UserAuthOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HashAuthOptionContext.prototype = Object.create(UserAuthOptionContext.prototype);
HashAuthOptionContext.prototype.constructor = HashAuthOptionContext;

MySQLParser.HashAuthOptionContext = HashAuthOptionContext;

HashAuthOptionContext.prototype.userName = function() {
    return this.getTypedRuleContext(UserNameContext,0);
};

HashAuthOptionContext.prototype.IDENTIFIED = function() {
    return this.getToken(MySQLParser.IDENTIFIED, 0);
};

HashAuthOptionContext.prototype.WITH = function() {
    return this.getToken(MySQLParser.WITH, 0);
};

HashAuthOptionContext.prototype.authPlugin = function() {
    return this.getTypedRuleContext(AuthPluginContext,0);
};

HashAuthOptionContext.prototype.AS = function() {
    return this.getToken(MySQLParser.AS, 0);
};

HashAuthOptionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};
HashAuthOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHashAuthOption(this);
	}
};

HashAuthOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHashAuthOption(this);
	}
};

HashAuthOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHashAuthOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.UserAuthOptionContext = UserAuthOptionContext;

MySQLParser.prototype.userAuthOption = function() {

    var localctx = new UserAuthOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, MySQLParser.RULE_userAuthOption);
    var _la = 0; // Token type
    try {
        this.state = 4654;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,678,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PasswordAuthOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 4630;
            this.userName();
            this.state = 4631;
            this.match(MySQLParser.IDENTIFIED);
            this.state = 4632;
            this.match(MySQLParser.BY);
            this.state = 4633;
            this.match(MySQLParser.PASSWORD);
            this.state = 4634;
            localctx.hashed = this.match(MySQLParser.STRING_LITERAL);
            break;

        case 2:
            localctx = new StringAuthOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 4636;
            this.userName();
            this.state = 4637;
            this.match(MySQLParser.IDENTIFIED);
            this.state = 4640;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.WITH) {
                this.state = 4638;
                this.match(MySQLParser.WITH);
                this.state = 4639;
                this.authPlugin();
            }

            this.state = 4642;
            this.match(MySQLParser.BY);
            this.state = 4643;
            this.match(MySQLParser.STRING_LITERAL);
            break;

        case 3:
            localctx = new HashAuthOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 4645;
            this.userName();
            this.state = 4646;
            this.match(MySQLParser.IDENTIFIED);
            this.state = 4647;
            this.match(MySQLParser.WITH);
            this.state = 4648;
            this.authPlugin();
            this.state = 4651;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.AS) {
                this.state = 4649;
                this.match(MySQLParser.AS);
                this.state = 4650;
                this.match(MySQLParser.STRING_LITERAL);
            }

            break;

        case 4:
            localctx = new SimpleAuthOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 4653;
            this.userName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TlsOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tlsOption;
    return this;
}

TlsOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TlsOptionContext.prototype.constructor = TlsOptionContext;

TlsOptionContext.prototype.SSL = function() {
    return this.getToken(MySQLParser.SSL, 0);
};

TlsOptionContext.prototype.X509 = function() {
    return this.getToken(MySQLParser.X509, 0);
};

TlsOptionContext.prototype.CIPHER = function() {
    return this.getToken(MySQLParser.CIPHER, 0);
};

TlsOptionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

TlsOptionContext.prototype.ISSUER = function() {
    return this.getToken(MySQLParser.ISSUER, 0);
};

TlsOptionContext.prototype.SUBJECT = function() {
    return this.getToken(MySQLParser.SUBJECT, 0);
};

TlsOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTlsOption(this);
	}
};

TlsOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTlsOption(this);
	}
};

TlsOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTlsOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TlsOptionContext = TlsOptionContext;

MySQLParser.prototype.tlsOption = function() {

    var localctx = new TlsOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, MySQLParser.RULE_tlsOption);
    try {
        this.state = 4664;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.SSL:
            this.enterOuterAlt(localctx, 1);
            this.state = 4656;
            this.match(MySQLParser.SSL);
            break;
        case MySQLParser.X509:
            this.enterOuterAlt(localctx, 2);
            this.state = 4657;
            this.match(MySQLParser.X509);
            break;
        case MySQLParser.CIPHER:
            this.enterOuterAlt(localctx, 3);
            this.state = 4658;
            this.match(MySQLParser.CIPHER);
            this.state = 4659;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.ISSUER:
            this.enterOuterAlt(localctx, 4);
            this.state = 4660;
            this.match(MySQLParser.ISSUER);
            this.state = 4661;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.SUBJECT:
            this.enterOuterAlt(localctx, 5);
            this.state = 4662;
            this.match(MySQLParser.SUBJECT);
            this.state = 4663;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserResourceOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_userResourceOption;
    return this;
}

UserResourceOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserResourceOptionContext.prototype.constructor = UserResourceOptionContext;

UserResourceOptionContext.prototype.MAX_QUERIES_PER_HOUR = function() {
    return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR, 0);
};

UserResourceOptionContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

UserResourceOptionContext.prototype.MAX_UPDATES_PER_HOUR = function() {
    return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR, 0);
};

UserResourceOptionContext.prototype.MAX_CONNECTIONS_PER_HOUR = function() {
    return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR, 0);
};

UserResourceOptionContext.prototype.MAX_USER_CONNECTIONS = function() {
    return this.getToken(MySQLParser.MAX_USER_CONNECTIONS, 0);
};

UserResourceOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUserResourceOption(this);
	}
};

UserResourceOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUserResourceOption(this);
	}
};

UserResourceOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUserResourceOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UserResourceOptionContext = UserResourceOptionContext;

MySQLParser.prototype.userResourceOption = function() {

    var localctx = new UserResourceOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, MySQLParser.RULE_userResourceOption);
    try {
        this.state = 4674;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.MAX_QUERIES_PER_HOUR:
            this.enterOuterAlt(localctx, 1);
            this.state = 4666;
            this.match(MySQLParser.MAX_QUERIES_PER_HOUR);
            this.state = 4667;
            this.decimalLiteral();
            break;
        case MySQLParser.MAX_UPDATES_PER_HOUR:
            this.enterOuterAlt(localctx, 2);
            this.state = 4668;
            this.match(MySQLParser.MAX_UPDATES_PER_HOUR);
            this.state = 4669;
            this.decimalLiteral();
            break;
        case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
            this.enterOuterAlt(localctx, 3);
            this.state = 4670;
            this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR);
            this.state = 4671;
            this.decimalLiteral();
            break;
        case MySQLParser.MAX_USER_CONNECTIONS:
            this.enterOuterAlt(localctx, 4);
            this.state = 4672;
            this.match(MySQLParser.MAX_USER_CONNECTIONS);
            this.state = 4673;
            this.decimalLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserPasswordOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_userPasswordOption;
    this.expireType = null; // Token
    return this;
}

UserPasswordOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserPasswordOptionContext.prototype.constructor = UserPasswordOptionContext;

UserPasswordOptionContext.prototype.PASSWORD = function() {
    return this.getToken(MySQLParser.PASSWORD, 0);
};

UserPasswordOptionContext.prototype.EXPIRE = function() {
    return this.getToken(MySQLParser.EXPIRE, 0);
};

UserPasswordOptionContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

UserPasswordOptionContext.prototype.DAY = function() {
    return this.getToken(MySQLParser.DAY, 0);
};

UserPasswordOptionContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

UserPasswordOptionContext.prototype.NEVER = function() {
    return this.getToken(MySQLParser.NEVER, 0);
};

UserPasswordOptionContext.prototype.INTERVAL = function() {
    return this.getToken(MySQLParser.INTERVAL, 0);
};

UserPasswordOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUserPasswordOption(this);
	}
};

UserPasswordOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUserPasswordOption(this);
	}
};

UserPasswordOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUserPasswordOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UserPasswordOptionContext = UserPasswordOptionContext;

MySQLParser.prototype.userPasswordOption = function() {

    var localctx = new UserPasswordOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, MySQLParser.RULE_userPasswordOption);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4676;
        this.match(MySQLParser.PASSWORD);
        this.state = 4677;
        this.match(MySQLParser.EXPIRE);
        this.state = 4684;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case MySQLParser.DEFAULT:
        	this.state = 4678;
        	localctx.expireType = this.match(MySQLParser.DEFAULT);
        	break;
        case MySQLParser.NEVER:
        	this.state = 4679;
        	localctx.expireType = this.match(MySQLParser.NEVER);
        	break;
        case MySQLParser.INTERVAL:
        	this.state = 4680;
        	localctx.expireType = this.match(MySQLParser.INTERVAL);
        	this.state = 4681;
        	this.decimalLiteral();
        	this.state = 4682;
        	this.match(MySQLParser.DAY);
        	break;
        case MySQLParser.EOF:
        case MySQLParser.ALTER:
        case MySQLParser.ANALYZE:
        case MySQLParser.CALL:
        case MySQLParser.CHANGE:
        case MySQLParser.CHECK:
        case MySQLParser.CREATE:
        case MySQLParser.DELETE:
        case MySQLParser.DESC:
        case MySQLParser.DESCRIBE:
        case MySQLParser.DROP:
        case MySQLParser.EXPLAIN:
        case MySQLParser.GET:
        case MySQLParser.GRANT:
        case MySQLParser.INSERT:
        case MySQLParser.KILL:
        case MySQLParser.LOAD:
        case MySQLParser.LOCK:
        case MySQLParser.OPTIMIZE:
        case MySQLParser.PURGE:
        case MySQLParser.RELEASE:
        case MySQLParser.RENAME:
        case MySQLParser.REPLACE:
        case MySQLParser.RESIGNAL:
        case MySQLParser.REVOKE:
        case MySQLParser.SELECT:
        case MySQLParser.SET:
        case MySQLParser.SHOW:
        case MySQLParser.SIGNAL:
        case MySQLParser.UNLOCK:
        case MySQLParser.UPDATE:
        case MySQLParser.USE:
        case MySQLParser.ACCOUNT:
        case MySQLParser.BEGIN:
        case MySQLParser.BINLOG:
        case MySQLParser.CACHE:
        case MySQLParser.CHECKSUM:
        case MySQLParser.COMMIT:
        case MySQLParser.DEALLOCATE:
        case MySQLParser.DO:
        case MySQLParser.FLUSH:
        case MySQLParser.HANDLER:
        case MySQLParser.HELP:
        case MySQLParser.INSTALL:
        case MySQLParser.PASSWORD:
        case MySQLParser.PREPARE:
        case MySQLParser.REPAIR:
        case MySQLParser.RESET:
        case MySQLParser.ROLLBACK:
        case MySQLParser.SAVEPOINT:
        case MySQLParser.START:
        case MySQLParser.STOP:
        case MySQLParser.TRUNCATE:
        case MySQLParser.UNINSTALL:
        case MySQLParser.XA:
        case MySQLParser.EXECUTE:
        case MySQLParser.SHUTDOWN:
        case MySQLParser.MINUSMINUS:
        case MySQLParser.LR_BRACKET:
        case MySQLParser.COMMA:
        case MySQLParser.SEMI:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserLockOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_userLockOption;
    this.lockType = null; // Token
    return this;
}

UserLockOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserLockOptionContext.prototype.constructor = UserLockOptionContext;

UserLockOptionContext.prototype.ACCOUNT = function() {
    return this.getToken(MySQLParser.ACCOUNT, 0);
};

UserLockOptionContext.prototype.LOCK = function() {
    return this.getToken(MySQLParser.LOCK, 0);
};

UserLockOptionContext.prototype.UNLOCK = function() {
    return this.getToken(MySQLParser.UNLOCK, 0);
};

UserLockOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUserLockOption(this);
	}
};

UserLockOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUserLockOption(this);
	}
};

UserLockOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUserLockOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UserLockOptionContext = UserLockOptionContext;

MySQLParser.prototype.userLockOption = function() {

    var localctx = new UserLockOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, MySQLParser.RULE_userLockOption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4686;
        this.match(MySQLParser.ACCOUNT);
        this.state = 4687;
        localctx.lockType = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.LOCK || _la===MySQLParser.UNLOCK)) {
            localctx.lockType = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrivelegeClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_privelegeClause;
    return this;
}

PrivelegeClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrivelegeClauseContext.prototype.constructor = PrivelegeClauseContext;

PrivelegeClauseContext.prototype.privilege = function() {
    return this.getTypedRuleContext(PrivilegeContext,0);
};

PrivelegeClauseContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

PrivelegeClauseContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

PrivelegeClauseContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

PrivelegeClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPrivelegeClause(this);
	}
};

PrivelegeClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPrivelegeClause(this);
	}
};

PrivelegeClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPrivelegeClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PrivelegeClauseContext = PrivelegeClauseContext;

MySQLParser.prototype.privelegeClause = function() {

    var localctx = new PrivelegeClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, MySQLParser.RULE_privelegeClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4689;
        this.privilege();
        this.state = 4694;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LR_BRACKET) {
            this.state = 4690;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 4691;
            this.uidList();
            this.state = 4692;
            this.match(MySQLParser.RR_BRACKET);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrivilegeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_privilege;
    return this;
}

PrivilegeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrivilegeContext.prototype.constructor = PrivilegeContext;

PrivilegeContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};

PrivilegeContext.prototype.PRIVILEGES = function() {
    return this.getToken(MySQLParser.PRIVILEGES, 0);
};

PrivilegeContext.prototype.ALTER = function() {
    return this.getToken(MySQLParser.ALTER, 0);
};

PrivilegeContext.prototype.ROUTINE = function() {
    return this.getToken(MySQLParser.ROUTINE, 0);
};

PrivilegeContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

PrivilegeContext.prototype.TEMPORARY = function() {
    return this.getToken(MySQLParser.TEMPORARY, 0);
};

PrivilegeContext.prototype.TABLES = function() {
    return this.getToken(MySQLParser.TABLES, 0);
};

PrivilegeContext.prototype.VIEW = function() {
    return this.getToken(MySQLParser.VIEW, 0);
};

PrivilegeContext.prototype.USER = function() {
    return this.getToken(MySQLParser.USER, 0);
};

PrivilegeContext.prototype.TABLESPACE = function() {
    return this.getToken(MySQLParser.TABLESPACE, 0);
};

PrivilegeContext.prototype.ROLE = function() {
    return this.getToken(MySQLParser.ROLE, 0);
};

PrivilegeContext.prototype.DELETE = function() {
    return this.getToken(MySQLParser.DELETE, 0);
};

PrivilegeContext.prototype.DROP = function() {
    return this.getToken(MySQLParser.DROP, 0);
};

PrivilegeContext.prototype.EVENT = function() {
    return this.getToken(MySQLParser.EVENT, 0);
};

PrivilegeContext.prototype.EXECUTE = function() {
    return this.getToken(MySQLParser.EXECUTE, 0);
};

PrivilegeContext.prototype.FILE = function() {
    return this.getToken(MySQLParser.FILE, 0);
};

PrivilegeContext.prototype.GRANT = function() {
    return this.getToken(MySQLParser.GRANT, 0);
};

PrivilegeContext.prototype.OPTION = function() {
    return this.getToken(MySQLParser.OPTION, 0);
};

PrivilegeContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

PrivilegeContext.prototype.INSERT = function() {
    return this.getToken(MySQLParser.INSERT, 0);
};

PrivilegeContext.prototype.LOCK = function() {
    return this.getToken(MySQLParser.LOCK, 0);
};

PrivilegeContext.prototype.PROCESS = function() {
    return this.getToken(MySQLParser.PROCESS, 0);
};

PrivilegeContext.prototype.PROXY = function() {
    return this.getToken(MySQLParser.PROXY, 0);
};

PrivilegeContext.prototype.REFERENCES = function() {
    return this.getToken(MySQLParser.REFERENCES, 0);
};

PrivilegeContext.prototype.RELOAD = function() {
    return this.getToken(MySQLParser.RELOAD, 0);
};

PrivilegeContext.prototype.REPLICATION = function() {
    return this.getToken(MySQLParser.REPLICATION, 0);
};

PrivilegeContext.prototype.CLIENT = function() {
    return this.getToken(MySQLParser.CLIENT, 0);
};

PrivilegeContext.prototype.SLAVE = function() {
    return this.getToken(MySQLParser.SLAVE, 0);
};

PrivilegeContext.prototype.SELECT = function() {
    return this.getToken(MySQLParser.SELECT, 0);
};

PrivilegeContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

PrivilegeContext.prototype.DATABASES = function() {
    return this.getToken(MySQLParser.DATABASES, 0);
};

PrivilegeContext.prototype.SHUTDOWN = function() {
    return this.getToken(MySQLParser.SHUTDOWN, 0);
};

PrivilegeContext.prototype.SUPER = function() {
    return this.getToken(MySQLParser.SUPER, 0);
};

PrivilegeContext.prototype.TRIGGER = function() {
    return this.getToken(MySQLParser.TRIGGER, 0);
};

PrivilegeContext.prototype.UPDATE = function() {
    return this.getToken(MySQLParser.UPDATE, 0);
};

PrivilegeContext.prototype.USAGE = function() {
    return this.getToken(MySQLParser.USAGE, 0);
};

PrivilegeContext.prototype.AUDIT_ADMIN = function() {
    return this.getToken(MySQLParser.AUDIT_ADMIN, 0);
};

PrivilegeContext.prototype.BACKUP_ADMIN = function() {
    return this.getToken(MySQLParser.BACKUP_ADMIN, 0);
};

PrivilegeContext.prototype.BINLOG_ADMIN = function() {
    return this.getToken(MySQLParser.BINLOG_ADMIN, 0);
};

PrivilegeContext.prototype.BINLOG_ENCRYPTION_ADMIN = function() {
    return this.getToken(MySQLParser.BINLOG_ENCRYPTION_ADMIN, 0);
};

PrivilegeContext.prototype.CLONE_ADMIN = function() {
    return this.getToken(MySQLParser.CLONE_ADMIN, 0);
};

PrivilegeContext.prototype.CONNECTION_ADMIN = function() {
    return this.getToken(MySQLParser.CONNECTION_ADMIN, 0);
};

PrivilegeContext.prototype.ENCRYPTION_KEY_ADMIN = function() {
    return this.getToken(MySQLParser.ENCRYPTION_KEY_ADMIN, 0);
};

PrivilegeContext.prototype.FIREWALL_ADMIN = function() {
    return this.getToken(MySQLParser.FIREWALL_ADMIN, 0);
};

PrivilegeContext.prototype.FIREWALL_USER = function() {
    return this.getToken(MySQLParser.FIREWALL_USER, 0);
};

PrivilegeContext.prototype.GROUP_REPLICATION_ADMIN = function() {
    return this.getToken(MySQLParser.GROUP_REPLICATION_ADMIN, 0);
};

PrivilegeContext.prototype.INNODB_REDO_LOG_ARCHIVE = function() {
    return this.getToken(MySQLParser.INNODB_REDO_LOG_ARCHIVE, 0);
};

PrivilegeContext.prototype.NDB_STORED_USER = function() {
    return this.getToken(MySQLParser.NDB_STORED_USER, 0);
};

PrivilegeContext.prototype.PERSIST_RO_VARIABLES_ADMIN = function() {
    return this.getToken(MySQLParser.PERSIST_RO_VARIABLES_ADMIN, 0);
};

PrivilegeContext.prototype.REPLICATION_APPLIER = function() {
    return this.getToken(MySQLParser.REPLICATION_APPLIER, 0);
};

PrivilegeContext.prototype.REPLICATION_SLAVE_ADMIN = function() {
    return this.getToken(MySQLParser.REPLICATION_SLAVE_ADMIN, 0);
};

PrivilegeContext.prototype.RESOURCE_GROUP_ADMIN = function() {
    return this.getToken(MySQLParser.RESOURCE_GROUP_ADMIN, 0);
};

PrivilegeContext.prototype.RESOURCE_GROUP_USER = function() {
    return this.getToken(MySQLParser.RESOURCE_GROUP_USER, 0);
};

PrivilegeContext.prototype.ROLE_ADMIN = function() {
    return this.getToken(MySQLParser.ROLE_ADMIN, 0);
};

PrivilegeContext.prototype.SESSION_VARIABLES_ADMIN = function() {
    return this.getToken(MySQLParser.SESSION_VARIABLES_ADMIN, 0);
};

PrivilegeContext.prototype.SET_USER_ID = function() {
    return this.getToken(MySQLParser.SET_USER_ID, 0);
};

PrivilegeContext.prototype.SHOW_ROUTINE = function() {
    return this.getToken(MySQLParser.SHOW_ROUTINE, 0);
};

PrivilegeContext.prototype.SYSTEM_VARIABLES_ADMIN = function() {
    return this.getToken(MySQLParser.SYSTEM_VARIABLES_ADMIN, 0);
};

PrivilegeContext.prototype.TABLE_ENCRYPTION_ADMIN = function() {
    return this.getToken(MySQLParser.TABLE_ENCRYPTION_ADMIN, 0);
};

PrivilegeContext.prototype.VERSION_TOKEN_ADMIN = function() {
    return this.getToken(MySQLParser.VERSION_TOKEN_ADMIN, 0);
};

PrivilegeContext.prototype.XA_RECOVER_ADMIN = function() {
    return this.getToken(MySQLParser.XA_RECOVER_ADMIN, 0);
};

PrivilegeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPrivilege(this);
	}
};

PrivilegeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPrivilege(this);
	}
};

PrivilegeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPrivilege(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PrivilegeContext = PrivilegeContext;

MySQLParser.prototype.privilege = function() {

    var localctx = new PrivilegeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, MySQLParser.RULE_privilege);
    var _la = 0; // Token type
    try {
        this.state = 4767;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ALL:
            this.enterOuterAlt(localctx, 1);
            this.state = 4696;
            this.match(MySQLParser.ALL);
            this.state = 4698;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.PRIVILEGES) {
                this.state = 4697;
                this.match(MySQLParser.PRIVILEGES);
            }

            break;
        case MySQLParser.ALTER:
            this.enterOuterAlt(localctx, 2);
            this.state = 4700;
            this.match(MySQLParser.ALTER);
            this.state = 4702;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ROUTINE) {
                this.state = 4701;
                this.match(MySQLParser.ROUTINE);
            }

            break;
        case MySQLParser.CREATE:
            this.enterOuterAlt(localctx, 3);
            this.state = 4704;
            this.match(MySQLParser.CREATE);
            this.state = 4712;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case MySQLParser.TEMPORARY:
            	this.state = 4705;
            	this.match(MySQLParser.TEMPORARY);
            	this.state = 4706;
            	this.match(MySQLParser.TABLES);
            	break;
            case MySQLParser.ROUTINE:
            	this.state = 4707;
            	this.match(MySQLParser.ROUTINE);
            	break;
            case MySQLParser.VIEW:
            	this.state = 4708;
            	this.match(MySQLParser.VIEW);
            	break;
            case MySQLParser.USER:
            	this.state = 4709;
            	this.match(MySQLParser.USER);
            	break;
            case MySQLParser.TABLESPACE:
            	this.state = 4710;
            	this.match(MySQLParser.TABLESPACE);
            	break;
            case MySQLParser.ROLE:
            	this.state = 4711;
            	this.match(MySQLParser.ROLE);
            	break;
            case MySQLParser.ON:
            case MySQLParser.LR_BRACKET:
            case MySQLParser.COMMA:
            	break;
            default:
            	break;
            }
            break;
        case MySQLParser.DELETE:
            this.enterOuterAlt(localctx, 4);
            this.state = 4714;
            this.match(MySQLParser.DELETE);
            break;
        case MySQLParser.DROP:
            this.enterOuterAlt(localctx, 5);
            this.state = 4715;
            this.match(MySQLParser.DROP);
            this.state = 4717;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ROLE) {
                this.state = 4716;
                this.match(MySQLParser.ROLE);
            }

            break;
        case MySQLParser.EVENT:
            this.enterOuterAlt(localctx, 6);
            this.state = 4719;
            this.match(MySQLParser.EVENT);
            break;
        case MySQLParser.EXECUTE:
            this.enterOuterAlt(localctx, 7);
            this.state = 4720;
            this.match(MySQLParser.EXECUTE);
            break;
        case MySQLParser.FILE:
            this.enterOuterAlt(localctx, 8);
            this.state = 4721;
            this.match(MySQLParser.FILE);
            break;
        case MySQLParser.GRANT:
            this.enterOuterAlt(localctx, 9);
            this.state = 4722;
            this.match(MySQLParser.GRANT);
            this.state = 4723;
            this.match(MySQLParser.OPTION);
            break;
        case MySQLParser.INDEX:
            this.enterOuterAlt(localctx, 10);
            this.state = 4724;
            this.match(MySQLParser.INDEX);
            break;
        case MySQLParser.INSERT:
            this.enterOuterAlt(localctx, 11);
            this.state = 4725;
            this.match(MySQLParser.INSERT);
            break;
        case MySQLParser.LOCK:
            this.enterOuterAlt(localctx, 12);
            this.state = 4726;
            this.match(MySQLParser.LOCK);
            this.state = 4727;
            this.match(MySQLParser.TABLES);
            break;
        case MySQLParser.PROCESS:
            this.enterOuterAlt(localctx, 13);
            this.state = 4728;
            this.match(MySQLParser.PROCESS);
            break;
        case MySQLParser.PROXY:
            this.enterOuterAlt(localctx, 14);
            this.state = 4729;
            this.match(MySQLParser.PROXY);
            break;
        case MySQLParser.REFERENCES:
            this.enterOuterAlt(localctx, 15);
            this.state = 4730;
            this.match(MySQLParser.REFERENCES);
            break;
        case MySQLParser.RELOAD:
            this.enterOuterAlt(localctx, 16);
            this.state = 4731;
            this.match(MySQLParser.RELOAD);
            break;
        case MySQLParser.REPLICATION:
            this.enterOuterAlt(localctx, 17);
            this.state = 4732;
            this.match(MySQLParser.REPLICATION);
            this.state = 4733;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CLIENT || _la===MySQLParser.SLAVE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case MySQLParser.SELECT:
            this.enterOuterAlt(localctx, 18);
            this.state = 4734;
            this.match(MySQLParser.SELECT);
            break;
        case MySQLParser.SHOW:
            this.enterOuterAlt(localctx, 19);
            this.state = 4735;
            this.match(MySQLParser.SHOW);
            this.state = 4736;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DATABASES || _la===MySQLParser.VIEW)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case MySQLParser.SHUTDOWN:
            this.enterOuterAlt(localctx, 20);
            this.state = 4737;
            this.match(MySQLParser.SHUTDOWN);
            break;
        case MySQLParser.SUPER:
            this.enterOuterAlt(localctx, 21);
            this.state = 4738;
            this.match(MySQLParser.SUPER);
            break;
        case MySQLParser.TRIGGER:
            this.enterOuterAlt(localctx, 22);
            this.state = 4739;
            this.match(MySQLParser.TRIGGER);
            break;
        case MySQLParser.UPDATE:
            this.enterOuterAlt(localctx, 23);
            this.state = 4740;
            this.match(MySQLParser.UPDATE);
            break;
        case MySQLParser.USAGE:
            this.enterOuterAlt(localctx, 24);
            this.state = 4741;
            this.match(MySQLParser.USAGE);
            break;
        case MySQLParser.AUDIT_ADMIN:
            this.enterOuterAlt(localctx, 25);
            this.state = 4742;
            this.match(MySQLParser.AUDIT_ADMIN);
            break;
        case MySQLParser.BACKUP_ADMIN:
            this.enterOuterAlt(localctx, 26);
            this.state = 4743;
            this.match(MySQLParser.BACKUP_ADMIN);
            break;
        case MySQLParser.BINLOG_ADMIN:
            this.enterOuterAlt(localctx, 27);
            this.state = 4744;
            this.match(MySQLParser.BINLOG_ADMIN);
            break;
        case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
            this.enterOuterAlt(localctx, 28);
            this.state = 4745;
            this.match(MySQLParser.BINLOG_ENCRYPTION_ADMIN);
            break;
        case MySQLParser.CLONE_ADMIN:
            this.enterOuterAlt(localctx, 29);
            this.state = 4746;
            this.match(MySQLParser.CLONE_ADMIN);
            break;
        case MySQLParser.CONNECTION_ADMIN:
            this.enterOuterAlt(localctx, 30);
            this.state = 4747;
            this.match(MySQLParser.CONNECTION_ADMIN);
            break;
        case MySQLParser.ENCRYPTION_KEY_ADMIN:
            this.enterOuterAlt(localctx, 31);
            this.state = 4748;
            this.match(MySQLParser.ENCRYPTION_KEY_ADMIN);
            break;
        case MySQLParser.FIREWALL_ADMIN:
            this.enterOuterAlt(localctx, 32);
            this.state = 4749;
            this.match(MySQLParser.FIREWALL_ADMIN);
            break;
        case MySQLParser.FIREWALL_USER:
            this.enterOuterAlt(localctx, 33);
            this.state = 4750;
            this.match(MySQLParser.FIREWALL_USER);
            break;
        case MySQLParser.GROUP_REPLICATION_ADMIN:
            this.enterOuterAlt(localctx, 34);
            this.state = 4751;
            this.match(MySQLParser.GROUP_REPLICATION_ADMIN);
            break;
        case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
            this.enterOuterAlt(localctx, 35);
            this.state = 4752;
            this.match(MySQLParser.INNODB_REDO_LOG_ARCHIVE);
            break;
        case MySQLParser.NDB_STORED_USER:
            this.enterOuterAlt(localctx, 36);
            this.state = 4753;
            this.match(MySQLParser.NDB_STORED_USER);
            break;
        case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
            this.enterOuterAlt(localctx, 37);
            this.state = 4754;
            this.match(MySQLParser.PERSIST_RO_VARIABLES_ADMIN);
            break;
        case MySQLParser.REPLICATION_APPLIER:
            this.enterOuterAlt(localctx, 38);
            this.state = 4755;
            this.match(MySQLParser.REPLICATION_APPLIER);
            break;
        case MySQLParser.REPLICATION_SLAVE_ADMIN:
            this.enterOuterAlt(localctx, 39);
            this.state = 4756;
            this.match(MySQLParser.REPLICATION_SLAVE_ADMIN);
            break;
        case MySQLParser.RESOURCE_GROUP_ADMIN:
            this.enterOuterAlt(localctx, 40);
            this.state = 4757;
            this.match(MySQLParser.RESOURCE_GROUP_ADMIN);
            break;
        case MySQLParser.RESOURCE_GROUP_USER:
            this.enterOuterAlt(localctx, 41);
            this.state = 4758;
            this.match(MySQLParser.RESOURCE_GROUP_USER);
            break;
        case MySQLParser.ROLE_ADMIN:
            this.enterOuterAlt(localctx, 42);
            this.state = 4759;
            this.match(MySQLParser.ROLE_ADMIN);
            break;
        case MySQLParser.SESSION_VARIABLES_ADMIN:
            this.enterOuterAlt(localctx, 43);
            this.state = 4760;
            this.match(MySQLParser.SESSION_VARIABLES_ADMIN);
            break;
        case MySQLParser.SET_USER_ID:
            this.enterOuterAlt(localctx, 44);
            this.state = 4761;
            this.match(MySQLParser.SET_USER_ID);
            break;
        case MySQLParser.SHOW_ROUTINE:
            this.enterOuterAlt(localctx, 45);
            this.state = 4762;
            this.match(MySQLParser.SHOW_ROUTINE);
            break;
        case MySQLParser.SYSTEM_VARIABLES_ADMIN:
            this.enterOuterAlt(localctx, 46);
            this.state = 4763;
            this.match(MySQLParser.SYSTEM_VARIABLES_ADMIN);
            break;
        case MySQLParser.TABLE_ENCRYPTION_ADMIN:
            this.enterOuterAlt(localctx, 47);
            this.state = 4764;
            this.match(MySQLParser.TABLE_ENCRYPTION_ADMIN);
            break;
        case MySQLParser.VERSION_TOKEN_ADMIN:
            this.enterOuterAlt(localctx, 48);
            this.state = 4765;
            this.match(MySQLParser.VERSION_TOKEN_ADMIN);
            break;
        case MySQLParser.XA_RECOVER_ADMIN:
            this.enterOuterAlt(localctx, 49);
            this.state = 4766;
            this.match(MySQLParser.XA_RECOVER_ADMIN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrivilegeLevelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_privilegeLevel;
    return this;
}

PrivilegeLevelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrivilegeLevelContext.prototype.constructor = PrivilegeLevelContext;


 
PrivilegeLevelContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DefiniteSchemaPrivLevelContext(parser, ctx) {
	PrivilegeLevelContext.call(this, parser);
    PrivilegeLevelContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DefiniteSchemaPrivLevelContext.prototype = Object.create(PrivilegeLevelContext.prototype);
DefiniteSchemaPrivLevelContext.prototype.constructor = DefiniteSchemaPrivLevelContext;

MySQLParser.DefiniteSchemaPrivLevelContext = DefiniteSchemaPrivLevelContext;

DefiniteSchemaPrivLevelContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DefiniteSchemaPrivLevelContext.prototype.DOT = function() {
    return this.getToken(MySQLParser.DOT, 0);
};

DefiniteSchemaPrivLevelContext.prototype.STAR = function() {
    return this.getToken(MySQLParser.STAR, 0);
};
DefiniteSchemaPrivLevelContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDefiniteSchemaPrivLevel(this);
	}
};

DefiniteSchemaPrivLevelContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDefiniteSchemaPrivLevel(this);
	}
};

DefiniteSchemaPrivLevelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDefiniteSchemaPrivLevel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DefiniteFullTablePrivLevel2Context(parser, ctx) {
	PrivilegeLevelContext.call(this, parser);
    PrivilegeLevelContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DefiniteFullTablePrivLevel2Context.prototype = Object.create(PrivilegeLevelContext.prototype);
DefiniteFullTablePrivLevel2Context.prototype.constructor = DefiniteFullTablePrivLevel2Context;

MySQLParser.DefiniteFullTablePrivLevel2Context = DefiniteFullTablePrivLevel2Context;

DefiniteFullTablePrivLevel2Context.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DefiniteFullTablePrivLevel2Context.prototype.dottedId = function() {
    return this.getTypedRuleContext(DottedIdContext,0);
};
DefiniteFullTablePrivLevel2Context.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDefiniteFullTablePrivLevel2(this);
	}
};

DefiniteFullTablePrivLevel2Context.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDefiniteFullTablePrivLevel2(this);
	}
};

DefiniteFullTablePrivLevel2Context.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDefiniteFullTablePrivLevel2(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DefiniteFullTablePrivLevelContext(parser, ctx) {
	PrivilegeLevelContext.call(this, parser);
    PrivilegeLevelContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DefiniteFullTablePrivLevelContext.prototype = Object.create(PrivilegeLevelContext.prototype);
DefiniteFullTablePrivLevelContext.prototype.constructor = DefiniteFullTablePrivLevelContext;

MySQLParser.DefiniteFullTablePrivLevelContext = DefiniteFullTablePrivLevelContext;

DefiniteFullTablePrivLevelContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

DefiniteFullTablePrivLevelContext.prototype.DOT = function() {
    return this.getToken(MySQLParser.DOT, 0);
};
DefiniteFullTablePrivLevelContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDefiniteFullTablePrivLevel(this);
	}
};

DefiniteFullTablePrivLevelContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDefiniteFullTablePrivLevel(this);
	}
};

DefiniteFullTablePrivLevelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDefiniteFullTablePrivLevel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function GlobalPrivLevelContext(parser, ctx) {
	PrivilegeLevelContext.call(this, parser);
    PrivilegeLevelContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GlobalPrivLevelContext.prototype = Object.create(PrivilegeLevelContext.prototype);
GlobalPrivLevelContext.prototype.constructor = GlobalPrivLevelContext;

MySQLParser.GlobalPrivLevelContext = GlobalPrivLevelContext;

GlobalPrivLevelContext.prototype.STAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.STAR);
    } else {
        return this.getToken(MySQLParser.STAR, i);
    }
};


GlobalPrivLevelContext.prototype.DOT = function() {
    return this.getToken(MySQLParser.DOT, 0);
};
GlobalPrivLevelContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGlobalPrivLevel(this);
	}
};

GlobalPrivLevelContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGlobalPrivLevel(this);
	}
};

GlobalPrivLevelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGlobalPrivLevel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DefiniteTablePrivLevelContext(parser, ctx) {
	PrivilegeLevelContext.call(this, parser);
    PrivilegeLevelContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DefiniteTablePrivLevelContext.prototype = Object.create(PrivilegeLevelContext.prototype);
DefiniteTablePrivLevelContext.prototype.constructor = DefiniteTablePrivLevelContext;

MySQLParser.DefiniteTablePrivLevelContext = DefiniteTablePrivLevelContext;

DefiniteTablePrivLevelContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};
DefiniteTablePrivLevelContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDefiniteTablePrivLevel(this);
	}
};

DefiniteTablePrivLevelContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDefiniteTablePrivLevel(this);
	}
};

DefiniteTablePrivLevelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDefiniteTablePrivLevel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CurrentSchemaPriviLevelContext(parser, ctx) {
	PrivilegeLevelContext.call(this, parser);
    PrivilegeLevelContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CurrentSchemaPriviLevelContext.prototype = Object.create(PrivilegeLevelContext.prototype);
CurrentSchemaPriviLevelContext.prototype.constructor = CurrentSchemaPriviLevelContext;

MySQLParser.CurrentSchemaPriviLevelContext = CurrentSchemaPriviLevelContext;

CurrentSchemaPriviLevelContext.prototype.STAR = function() {
    return this.getToken(MySQLParser.STAR, 0);
};
CurrentSchemaPriviLevelContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCurrentSchemaPriviLevel(this);
	}
};

CurrentSchemaPriviLevelContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCurrentSchemaPriviLevel(this);
	}
};

CurrentSchemaPriviLevelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCurrentSchemaPriviLevel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.PrivilegeLevelContext = PrivilegeLevelContext;

MySQLParser.prototype.privilegeLevel = function() {

    var localctx = new PrivilegeLevelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, MySQLParser.RULE_privilegeLevel);
    try {
        this.state = 4785;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,688,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CurrentSchemaPriviLevelContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 4769;
            this.match(MySQLParser.STAR);
            break;

        case 2:
            localctx = new GlobalPrivLevelContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 4770;
            this.match(MySQLParser.STAR);
            this.state = 4771;
            this.match(MySQLParser.DOT);
            this.state = 4772;
            this.match(MySQLParser.STAR);
            break;

        case 3:
            localctx = new DefiniteSchemaPrivLevelContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 4773;
            this.uid();
            this.state = 4774;
            this.match(MySQLParser.DOT);
            this.state = 4775;
            this.match(MySQLParser.STAR);
            break;

        case 4:
            localctx = new DefiniteFullTablePrivLevelContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 4777;
            this.uid();
            this.state = 4778;
            this.match(MySQLParser.DOT);
            this.state = 4779;
            this.uid();
            break;

        case 5:
            localctx = new DefiniteFullTablePrivLevel2Context(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 4781;
            this.uid();
            this.state = 4782;
            this.dottedId();
            break;

        case 6:
            localctx = new DefiniteTablePrivLevelContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 4784;
            this.uid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RenameUserClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_renameUserClause;
    this.fromFirst = null; // UserNameContext
    this.toFirst = null; // UserNameContext
    return this;
}

RenameUserClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenameUserClauseContext.prototype.constructor = RenameUserClauseContext;

RenameUserClauseContext.prototype.TO = function() {
    return this.getToken(MySQLParser.TO, 0);
};

RenameUserClauseContext.prototype.userName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UserNameContext);
    } else {
        return this.getTypedRuleContext(UserNameContext,i);
    }
};

RenameUserClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRenameUserClause(this);
	}
};

RenameUserClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRenameUserClause(this);
	}
};

RenameUserClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRenameUserClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RenameUserClauseContext = RenameUserClauseContext;

MySQLParser.prototype.renameUserClause = function() {

    var localctx = new RenameUserClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, MySQLParser.RULE_renameUserClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4787;
        localctx.fromFirst = this.userName();
        this.state = 4788;
        this.match(MySQLParser.TO);
        this.state = 4789;
        localctx.toFirst = this.userName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnalyzeTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_analyzeTable;
    this.actionOption = null; // Token
    return this;
}

AnalyzeTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnalyzeTableContext.prototype.constructor = AnalyzeTableContext;

AnalyzeTableContext.prototype.ANALYZE = function() {
    return this.getToken(MySQLParser.ANALYZE, 0);
};

AnalyzeTableContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

AnalyzeTableContext.prototype.tables = function() {
    return this.getTypedRuleContext(TablesContext,0);
};

AnalyzeTableContext.prototype.NO_WRITE_TO_BINLOG = function() {
    return this.getToken(MySQLParser.NO_WRITE_TO_BINLOG, 0);
};

AnalyzeTableContext.prototype.LOCAL = function() {
    return this.getToken(MySQLParser.LOCAL, 0);
};

AnalyzeTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAnalyzeTable(this);
	}
};

AnalyzeTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAnalyzeTable(this);
	}
};

AnalyzeTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAnalyzeTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AnalyzeTableContext = AnalyzeTableContext;

MySQLParser.prototype.analyzeTable = function() {

    var localctx = new AnalyzeTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, MySQLParser.RULE_analyzeTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4791;
        this.match(MySQLParser.ANALYZE);
        this.state = 4793;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.NO_WRITE_TO_BINLOG || _la===MySQLParser.LOCAL) {
            this.state = 4792;
            localctx.actionOption = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.NO_WRITE_TO_BINLOG || _la===MySQLParser.LOCAL)) {
                localctx.actionOption = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 4795;
        this.match(MySQLParser.TABLE);
        this.state = 4796;
        this.tables();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CheckTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_checkTable;
    return this;
}

CheckTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CheckTableContext.prototype.constructor = CheckTableContext;

CheckTableContext.prototype.CHECK = function() {
    return this.getToken(MySQLParser.CHECK, 0);
};

CheckTableContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

CheckTableContext.prototype.tables = function() {
    return this.getTypedRuleContext(TablesContext,0);
};

CheckTableContext.prototype.checkTableOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CheckTableOptionContext);
    } else {
        return this.getTypedRuleContext(CheckTableOptionContext,i);
    }
};

CheckTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCheckTable(this);
	}
};

CheckTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCheckTable(this);
	}
};

CheckTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCheckTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CheckTableContext = CheckTableContext;

MySQLParser.prototype.checkTable = function() {

    var localctx = new CheckTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, MySQLParser.RULE_checkTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4798;
        this.match(MySQLParser.CHECK);
        this.state = 4799;
        this.match(MySQLParser.TABLE);
        this.state = 4800;
        this.tables();
        this.state = 4804;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.FOR || _la===MySQLParser.CHANGED || _la===MySQLParser.EXTENDED || _la===MySQLParser.FAST || _la===MySQLParser.MEDIUM || _la===MySQLParser.QUICK) {
            this.state = 4801;
            this.checkTableOption();
            this.state = 4806;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChecksumTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_checksumTable;
    this.actionOption = null; // Token
    return this;
}

ChecksumTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChecksumTableContext.prototype.constructor = ChecksumTableContext;

ChecksumTableContext.prototype.CHECKSUM = function() {
    return this.getToken(MySQLParser.CHECKSUM, 0);
};

ChecksumTableContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

ChecksumTableContext.prototype.tables = function() {
    return this.getTypedRuleContext(TablesContext,0);
};

ChecksumTableContext.prototype.QUICK = function() {
    return this.getToken(MySQLParser.QUICK, 0);
};

ChecksumTableContext.prototype.EXTENDED = function() {
    return this.getToken(MySQLParser.EXTENDED, 0);
};

ChecksumTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterChecksumTable(this);
	}
};

ChecksumTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitChecksumTable(this);
	}
};

ChecksumTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitChecksumTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ChecksumTableContext = ChecksumTableContext;

MySQLParser.prototype.checksumTable = function() {

    var localctx = new ChecksumTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, MySQLParser.RULE_checksumTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4807;
        this.match(MySQLParser.CHECKSUM);
        this.state = 4808;
        this.match(MySQLParser.TABLE);
        this.state = 4809;
        this.tables();
        this.state = 4811;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.EXTENDED || _la===MySQLParser.QUICK) {
            this.state = 4810;
            localctx.actionOption = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.EXTENDED || _la===MySQLParser.QUICK)) {
                localctx.actionOption = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptimizeTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_optimizeTable;
    this.actionOption = null; // Token
    return this;
}

OptimizeTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptimizeTableContext.prototype.constructor = OptimizeTableContext;

OptimizeTableContext.prototype.OPTIMIZE = function() {
    return this.getToken(MySQLParser.OPTIMIZE, 0);
};

OptimizeTableContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

OptimizeTableContext.prototype.tables = function() {
    return this.getTypedRuleContext(TablesContext,0);
};

OptimizeTableContext.prototype.NO_WRITE_TO_BINLOG = function() {
    return this.getToken(MySQLParser.NO_WRITE_TO_BINLOG, 0);
};

OptimizeTableContext.prototype.LOCAL = function() {
    return this.getToken(MySQLParser.LOCAL, 0);
};

OptimizeTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterOptimizeTable(this);
	}
};

OptimizeTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitOptimizeTable(this);
	}
};

OptimizeTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitOptimizeTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.OptimizeTableContext = OptimizeTableContext;

MySQLParser.prototype.optimizeTable = function() {

    var localctx = new OptimizeTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, MySQLParser.RULE_optimizeTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4813;
        this.match(MySQLParser.OPTIMIZE);
        this.state = 4815;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.NO_WRITE_TO_BINLOG || _la===MySQLParser.LOCAL) {
            this.state = 4814;
            localctx.actionOption = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.NO_WRITE_TO_BINLOG || _la===MySQLParser.LOCAL)) {
                localctx.actionOption = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 4817;
        this.match(MySQLParser.TABLE);
        this.state = 4818;
        this.tables();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RepairTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_repairTable;
    this.actionOption = null; // Token
    return this;
}

RepairTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RepairTableContext.prototype.constructor = RepairTableContext;

RepairTableContext.prototype.REPAIR = function() {
    return this.getToken(MySQLParser.REPAIR, 0);
};

RepairTableContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

RepairTableContext.prototype.tables = function() {
    return this.getTypedRuleContext(TablesContext,0);
};

RepairTableContext.prototype.QUICK = function() {
    return this.getToken(MySQLParser.QUICK, 0);
};

RepairTableContext.prototype.EXTENDED = function() {
    return this.getToken(MySQLParser.EXTENDED, 0);
};

RepairTableContext.prototype.USE_FRM = function() {
    return this.getToken(MySQLParser.USE_FRM, 0);
};

RepairTableContext.prototype.NO_WRITE_TO_BINLOG = function() {
    return this.getToken(MySQLParser.NO_WRITE_TO_BINLOG, 0);
};

RepairTableContext.prototype.LOCAL = function() {
    return this.getToken(MySQLParser.LOCAL, 0);
};

RepairTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRepairTable(this);
	}
};

RepairTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRepairTable(this);
	}
};

RepairTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRepairTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.RepairTableContext = RepairTableContext;

MySQLParser.prototype.repairTable = function() {

    var localctx = new RepairTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, MySQLParser.RULE_repairTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4820;
        this.match(MySQLParser.REPAIR);
        this.state = 4822;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.NO_WRITE_TO_BINLOG || _la===MySQLParser.LOCAL) {
            this.state = 4821;
            localctx.actionOption = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.NO_WRITE_TO_BINLOG || _la===MySQLParser.LOCAL)) {
                localctx.actionOption = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 4824;
        this.match(MySQLParser.TABLE);
        this.state = 4825;
        this.tables();
        this.state = 4827;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.QUICK) {
            this.state = 4826;
            this.match(MySQLParser.QUICK);
        }

        this.state = 4830;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.EXTENDED) {
            this.state = 4829;
            this.match(MySQLParser.EXTENDED);
        }

        this.state = 4833;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.USE_FRM) {
            this.state = 4832;
            this.match(MySQLParser.USE_FRM);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CheckTableOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_checkTableOption;
    return this;
}

CheckTableOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CheckTableOptionContext.prototype.constructor = CheckTableOptionContext;

CheckTableOptionContext.prototype.FOR = function() {
    return this.getToken(MySQLParser.FOR, 0);
};

CheckTableOptionContext.prototype.UPGRADE = function() {
    return this.getToken(MySQLParser.UPGRADE, 0);
};

CheckTableOptionContext.prototype.QUICK = function() {
    return this.getToken(MySQLParser.QUICK, 0);
};

CheckTableOptionContext.prototype.FAST = function() {
    return this.getToken(MySQLParser.FAST, 0);
};

CheckTableOptionContext.prototype.MEDIUM = function() {
    return this.getToken(MySQLParser.MEDIUM, 0);
};

CheckTableOptionContext.prototype.EXTENDED = function() {
    return this.getToken(MySQLParser.EXTENDED, 0);
};

CheckTableOptionContext.prototype.CHANGED = function() {
    return this.getToken(MySQLParser.CHANGED, 0);
};

CheckTableOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCheckTableOption(this);
	}
};

CheckTableOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCheckTableOption(this);
	}
};

CheckTableOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCheckTableOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CheckTableOptionContext = CheckTableOptionContext;

MySQLParser.prototype.checkTableOption = function() {

    var localctx = new CheckTableOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, MySQLParser.RULE_checkTableOption);
    try {
        this.state = 4842;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.FOR:
            this.enterOuterAlt(localctx, 1);
            this.state = 4835;
            this.match(MySQLParser.FOR);
            this.state = 4836;
            this.match(MySQLParser.UPGRADE);
            break;
        case MySQLParser.QUICK:
            this.enterOuterAlt(localctx, 2);
            this.state = 4837;
            this.match(MySQLParser.QUICK);
            break;
        case MySQLParser.FAST:
            this.enterOuterAlt(localctx, 3);
            this.state = 4838;
            this.match(MySQLParser.FAST);
            break;
        case MySQLParser.MEDIUM:
            this.enterOuterAlt(localctx, 4);
            this.state = 4839;
            this.match(MySQLParser.MEDIUM);
            break;
        case MySQLParser.EXTENDED:
            this.enterOuterAlt(localctx, 5);
            this.state = 4840;
            this.match(MySQLParser.EXTENDED);
            break;
        case MySQLParser.CHANGED:
            this.enterOuterAlt(localctx, 6);
            this.state = 4841;
            this.match(MySQLParser.CHANGED);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateUdfunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_createUdfunction;
    this.returnType = null; // Token
    return this;
}

CreateUdfunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateUdfunctionContext.prototype.constructor = CreateUdfunctionContext;

CreateUdfunctionContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

CreateUdfunctionContext.prototype.FUNCTION = function() {
    return this.getToken(MySQLParser.FUNCTION, 0);
};

CreateUdfunctionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CreateUdfunctionContext.prototype.RETURNS = function() {
    return this.getToken(MySQLParser.RETURNS, 0);
};

CreateUdfunctionContext.prototype.SONAME = function() {
    return this.getToken(MySQLParser.SONAME, 0);
};

CreateUdfunctionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

CreateUdfunctionContext.prototype.STRING = function() {
    return this.getToken(MySQLParser.STRING, 0);
};

CreateUdfunctionContext.prototype.INTEGER = function() {
    return this.getToken(MySQLParser.INTEGER, 0);
};

CreateUdfunctionContext.prototype.REAL = function() {
    return this.getToken(MySQLParser.REAL, 0);
};

CreateUdfunctionContext.prototype.DECIMAL = function() {
    return this.getToken(MySQLParser.DECIMAL, 0);
};

CreateUdfunctionContext.prototype.AGGREGATE = function() {
    return this.getToken(MySQLParser.AGGREGATE, 0);
};

CreateUdfunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCreateUdfunction(this);
	}
};

CreateUdfunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCreateUdfunction(this);
	}
};

CreateUdfunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCreateUdfunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CreateUdfunctionContext = CreateUdfunctionContext;

MySQLParser.prototype.createUdfunction = function() {

    var localctx = new CreateUdfunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, MySQLParser.RULE_createUdfunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4844;
        this.match(MySQLParser.CREATE);
        this.state = 4846;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.AGGREGATE) {
            this.state = 4845;
            this.match(MySQLParser.AGGREGATE);
        }

        this.state = 4848;
        this.match(MySQLParser.FUNCTION);
        this.state = 4849;
        this.uid();
        this.state = 4850;
        this.match(MySQLParser.RETURNS);
        this.state = 4851;
        localctx.returnType = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(((((_la - 188)) & ~0x1f) == 0 && ((1 << (_la - 188)) & ((1 << (MySQLParser.INTEGER - 188)) | (1 << (MySQLParser.REAL - 188)) | (1 << (MySQLParser.DECIMAL - 188)))) !== 0) || _la===MySQLParser.STRING)) {
            localctx.returnType = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4852;
        this.match(MySQLParser.SONAME);
        this.state = 4853;
        this.match(MySQLParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InstallPluginContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_installPlugin;
    return this;
}

InstallPluginContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstallPluginContext.prototype.constructor = InstallPluginContext;

InstallPluginContext.prototype.INSTALL = function() {
    return this.getToken(MySQLParser.INSTALL, 0);
};

InstallPluginContext.prototype.PLUGIN = function() {
    return this.getToken(MySQLParser.PLUGIN, 0);
};

InstallPluginContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

InstallPluginContext.prototype.SONAME = function() {
    return this.getToken(MySQLParser.SONAME, 0);
};

InstallPluginContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

InstallPluginContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInstallPlugin(this);
	}
};

InstallPluginContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInstallPlugin(this);
	}
};

InstallPluginContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInstallPlugin(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.InstallPluginContext = InstallPluginContext;

MySQLParser.prototype.installPlugin = function() {

    var localctx = new InstallPluginContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, MySQLParser.RULE_installPlugin);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4855;
        this.match(MySQLParser.INSTALL);
        this.state = 4856;
        this.match(MySQLParser.PLUGIN);
        this.state = 4857;
        this.uid();
        this.state = 4858;
        this.match(MySQLParser.SONAME);
        this.state = 4859;
        this.match(MySQLParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UninstallPluginContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_uninstallPlugin;
    return this;
}

UninstallPluginContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UninstallPluginContext.prototype.constructor = UninstallPluginContext;

UninstallPluginContext.prototype.UNINSTALL = function() {
    return this.getToken(MySQLParser.UNINSTALL, 0);
};

UninstallPluginContext.prototype.PLUGIN = function() {
    return this.getToken(MySQLParser.PLUGIN, 0);
};

UninstallPluginContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

UninstallPluginContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUninstallPlugin(this);
	}
};

UninstallPluginContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUninstallPlugin(this);
	}
};

UninstallPluginContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUninstallPlugin(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UninstallPluginContext = UninstallPluginContext;

MySQLParser.prototype.uninstallPlugin = function() {

    var localctx = new UninstallPluginContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, MySQLParser.RULE_uninstallPlugin);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4861;
        this.match(MySQLParser.UNINSTALL);
        this.state = 4862;
        this.match(MySQLParser.PLUGIN);
        this.state = 4863;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_setStatement;
    return this;
}

SetStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetStatementContext.prototype.constructor = SetStatementContext;


 
SetStatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SetTransactionContext(parser, ctx) {
	SetStatementContext.call(this, parser);
    SetStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetTransactionContext.prototype = Object.create(SetStatementContext.prototype);
SetTransactionContext.prototype.constructor = SetTransactionContext;

MySQLParser.SetTransactionContext = SetTransactionContext;

SetTransactionContext.prototype.setTransactionStatement = function() {
    return this.getTypedRuleContext(SetTransactionStatementContext,0);
};
SetTransactionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSetTransaction(this);
	}
};

SetTransactionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSetTransaction(this);
	}
};

SetTransactionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSetTransaction(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SetCharsetContext(parser, ctx) {
	SetStatementContext.call(this, parser);
    SetStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetCharsetContext.prototype = Object.create(SetStatementContext.prototype);
SetCharsetContext.prototype.constructor = SetCharsetContext;

MySQLParser.SetCharsetContext = SetCharsetContext;

SetCharsetContext.prototype.SET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.SET);
    } else {
        return this.getToken(MySQLParser.SET, i);
    }
};


SetCharsetContext.prototype.CHARACTER = function() {
    return this.getToken(MySQLParser.CHARACTER, 0);
};

SetCharsetContext.prototype.CHARSET = function() {
    return this.getToken(MySQLParser.CHARSET, 0);
};

SetCharsetContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

SetCharsetContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};
SetCharsetContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSetCharset(this);
	}
};

SetCharsetContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSetCharset(this);
	}
};

SetCharsetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSetCharset(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SetNamesContext(parser, ctx) {
	SetStatementContext.call(this, parser);
    SetStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetNamesContext.prototype = Object.create(SetStatementContext.prototype);
SetNamesContext.prototype.constructor = SetNamesContext;

MySQLParser.SetNamesContext = SetNamesContext;

SetNamesContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

SetNamesContext.prototype.NAMES = function() {
    return this.getToken(MySQLParser.NAMES, 0);
};

SetNamesContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

SetNamesContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

SetNamesContext.prototype.COLLATE = function() {
    return this.getToken(MySQLParser.COLLATE, 0);
};

SetNamesContext.prototype.collationName = function() {
    return this.getTypedRuleContext(CollationNameContext,0);
};
SetNamesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSetNames(this);
	}
};

SetNamesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSetNames(this);
	}
};

SetNamesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSetNames(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SetPasswordContext(parser, ctx) {
	SetStatementContext.call(this, parser);
    SetStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetPasswordContext.prototype = Object.create(SetStatementContext.prototype);
SetPasswordContext.prototype.constructor = SetPasswordContext;

MySQLParser.SetPasswordContext = SetPasswordContext;

SetPasswordContext.prototype.setPasswordStatement = function() {
    return this.getTypedRuleContext(SetPasswordStatementContext,0);
};
SetPasswordContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSetPassword(this);
	}
};

SetPasswordContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSetPassword(this);
	}
};

SetPasswordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSetPassword(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SetAutocommitContext(parser, ctx) {
	SetStatementContext.call(this, parser);
    SetStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetAutocommitContext.prototype = Object.create(SetStatementContext.prototype);
SetAutocommitContext.prototype.constructor = SetAutocommitContext;

MySQLParser.SetAutocommitContext = SetAutocommitContext;

SetAutocommitContext.prototype.setAutocommitStatement = function() {
    return this.getTypedRuleContext(SetAutocommitStatementContext,0);
};
SetAutocommitContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSetAutocommit(this);
	}
};

SetAutocommitContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSetAutocommit(this);
	}
};

SetAutocommitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSetAutocommit(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SetNewValueInsideTriggerContext(parser, ctx) {
	SetStatementContext.call(this, parser);
    SetStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetNewValueInsideTriggerContext.prototype = Object.create(SetStatementContext.prototype);
SetNewValueInsideTriggerContext.prototype.constructor = SetNewValueInsideTriggerContext;

MySQLParser.SetNewValueInsideTriggerContext = SetNewValueInsideTriggerContext;

SetNewValueInsideTriggerContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

SetNewValueInsideTriggerContext.prototype.fullId = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FullIdContext);
    } else {
        return this.getTypedRuleContext(FullIdContext,i);
    }
};

SetNewValueInsideTriggerContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SetNewValueInsideTriggerContext.prototype.EQUAL_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.EQUAL_SYMBOL);
    } else {
        return this.getToken(MySQLParser.EQUAL_SYMBOL, i);
    }
};


SetNewValueInsideTriggerContext.prototype.VAR_ASSIGN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.VAR_ASSIGN);
    } else {
        return this.getToken(MySQLParser.VAR_ASSIGN, i);
    }
};


SetNewValueInsideTriggerContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

SetNewValueInsideTriggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSetNewValueInsideTrigger(this);
	}
};

SetNewValueInsideTriggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSetNewValueInsideTrigger(this);
	}
};

SetNewValueInsideTriggerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSetNewValueInsideTrigger(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SetVariableContext(parser, ctx) {
	SetStatementContext.call(this, parser);
    SetStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetVariableContext.prototype = Object.create(SetStatementContext.prototype);
SetVariableContext.prototype.constructor = SetVariableContext;

MySQLParser.SetVariableContext = SetVariableContext;

SetVariableContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

SetVariableContext.prototype.variableClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableClauseContext);
    } else {
        return this.getTypedRuleContext(VariableClauseContext,i);
    }
};

SetVariableContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SetVariableContext.prototype.EQUAL_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.EQUAL_SYMBOL);
    } else {
        return this.getToken(MySQLParser.EQUAL_SYMBOL, i);
    }
};


SetVariableContext.prototype.VAR_ASSIGN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.VAR_ASSIGN);
    } else {
        return this.getToken(MySQLParser.VAR_ASSIGN, i);
    }
};


SetVariableContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

SetVariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSetVariable(this);
	}
};

SetVariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSetVariable(this);
	}
};

SetVariableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSetVariable(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.SetStatementContext = SetStatementContext;

MySQLParser.prototype.setStatement = function() {

    var localctx = new SetStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, MySQLParser.RULE_setStatement);
    var _la = 0; // Token type
    try {
        this.state = 4916;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,705,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SetVariableContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 4865;
            this.match(MySQLParser.SET);
            this.state = 4866;
            this.variableClause();
            this.state = 4867;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.VAR_ASSIGN || _la===MySQLParser.EQUAL_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4868;
            this.expression(0);
            this.state = 4876;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 4869;
                this.match(MySQLParser.COMMA);
                this.state = 4870;
                this.variableClause();
                this.state = 4871;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.VAR_ASSIGN || _la===MySQLParser.EQUAL_SYMBOL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4872;
                this.expression(0);
                this.state = 4878;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            localctx = new SetCharsetContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 4879;
            this.match(MySQLParser.SET);
            this.state = 4883;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.CHARACTER:
                this.state = 4880;
                this.match(MySQLParser.CHARACTER);
                this.state = 4881;
                this.match(MySQLParser.SET);
                break;
            case MySQLParser.CHARSET:
                this.state = 4882;
                this.match(MySQLParser.CHARSET);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 4887;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.BINARY:
            case MySQLParser.ARMSCII8:
            case MySQLParser.ASCII:
            case MySQLParser.BIG5:
            case MySQLParser.CP1250:
            case MySQLParser.CP1251:
            case MySQLParser.CP1256:
            case MySQLParser.CP1257:
            case MySQLParser.CP850:
            case MySQLParser.CP852:
            case MySQLParser.CP866:
            case MySQLParser.CP932:
            case MySQLParser.DEC8:
            case MySQLParser.EUCJPMS:
            case MySQLParser.EUCKR:
            case MySQLParser.GB2312:
            case MySQLParser.GBK:
            case MySQLParser.GEOSTD8:
            case MySQLParser.GREEK:
            case MySQLParser.HEBREW:
            case MySQLParser.HP8:
            case MySQLParser.KEYBCS2:
            case MySQLParser.KOI8R:
            case MySQLParser.KOI8U:
            case MySQLParser.LATIN1:
            case MySQLParser.LATIN2:
            case MySQLParser.LATIN5:
            case MySQLParser.LATIN7:
            case MySQLParser.MACCE:
            case MySQLParser.MACROMAN:
            case MySQLParser.SJIS:
            case MySQLParser.SWE7:
            case MySQLParser.TIS620:
            case MySQLParser.UCS2:
            case MySQLParser.UJIS:
            case MySQLParser.UTF16:
            case MySQLParser.UTF16LE:
            case MySQLParser.UTF32:
            case MySQLParser.UTF8:
            case MySQLParser.UTF8MB3:
            case MySQLParser.UTF8MB4:
            case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySQLParser.STRING_LITERAL:
                this.state = 4885;
                this.charsetName();
                break;
            case MySQLParser.DEFAULT:
                this.state = 4886;
                this.match(MySQLParser.DEFAULT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 3:
            localctx = new SetNamesContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 4889;
            this.match(MySQLParser.SET);
            this.state = 4890;
            this.match(MySQLParser.NAMES);
            this.state = 4897;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.BINARY:
            case MySQLParser.ARMSCII8:
            case MySQLParser.ASCII:
            case MySQLParser.BIG5:
            case MySQLParser.CP1250:
            case MySQLParser.CP1251:
            case MySQLParser.CP1256:
            case MySQLParser.CP1257:
            case MySQLParser.CP850:
            case MySQLParser.CP852:
            case MySQLParser.CP866:
            case MySQLParser.CP932:
            case MySQLParser.DEC8:
            case MySQLParser.EUCJPMS:
            case MySQLParser.EUCKR:
            case MySQLParser.GB2312:
            case MySQLParser.GBK:
            case MySQLParser.GEOSTD8:
            case MySQLParser.GREEK:
            case MySQLParser.HEBREW:
            case MySQLParser.HP8:
            case MySQLParser.KEYBCS2:
            case MySQLParser.KOI8R:
            case MySQLParser.KOI8U:
            case MySQLParser.LATIN1:
            case MySQLParser.LATIN2:
            case MySQLParser.LATIN5:
            case MySQLParser.LATIN7:
            case MySQLParser.MACCE:
            case MySQLParser.MACROMAN:
            case MySQLParser.SJIS:
            case MySQLParser.SWE7:
            case MySQLParser.TIS620:
            case MySQLParser.UCS2:
            case MySQLParser.UJIS:
            case MySQLParser.UTF16:
            case MySQLParser.UTF16LE:
            case MySQLParser.UTF32:
            case MySQLParser.UTF8:
            case MySQLParser.UTF8MB3:
            case MySQLParser.UTF8MB4:
            case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySQLParser.STRING_LITERAL:
                this.state = 4891;
                this.charsetName();
                this.state = 4894;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.COLLATE) {
                    this.state = 4892;
                    this.match(MySQLParser.COLLATE);
                    this.state = 4893;
                    this.collationName();
                }

                break;
            case MySQLParser.DEFAULT:
                this.state = 4896;
                this.match(MySQLParser.DEFAULT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 4:
            localctx = new SetPasswordContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 4899;
            this.setPasswordStatement();
            break;

        case 5:
            localctx = new SetTransactionContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 4900;
            this.setTransactionStatement();
            break;

        case 6:
            localctx = new SetAutocommitContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 4901;
            this.setAutocommitStatement();
            break;

        case 7:
            localctx = new SetNewValueInsideTriggerContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 4902;
            this.match(MySQLParser.SET);
            this.state = 4903;
            this.fullId();
            this.state = 4904;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.VAR_ASSIGN || _la===MySQLParser.EQUAL_SYMBOL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4905;
            this.expression(0);
            this.state = 4913;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 4906;
                this.match(MySQLParser.COMMA);
                this.state = 4907;
                this.fullId();
                this.state = 4908;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.VAR_ASSIGN || _la===MySQLParser.EQUAL_SYMBOL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4909;
                this.expression(0);
                this.state = 4915;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ShowStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_showStatement;
    return this;
}

ShowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowStatementContext.prototype.constructor = ShowStatementContext;


 
ShowStatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ShowOpenTablesContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    this.schemaFormat = null; // Token;
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowOpenTablesContext.prototype = Object.create(ShowStatementContext.prototype);
ShowOpenTablesContext.prototype.constructor = ShowOpenTablesContext;

MySQLParser.ShowOpenTablesContext = ShowOpenTablesContext;

ShowOpenTablesContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowOpenTablesContext.prototype.OPEN = function() {
    return this.getToken(MySQLParser.OPEN, 0);
};

ShowOpenTablesContext.prototype.TABLES = function() {
    return this.getToken(MySQLParser.TABLES, 0);
};

ShowOpenTablesContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

ShowOpenTablesContext.prototype.showFilter = function() {
    return this.getTypedRuleContext(ShowFilterContext,0);
};

ShowOpenTablesContext.prototype.FROM = function() {
    return this.getToken(MySQLParser.FROM, 0);
};

ShowOpenTablesContext.prototype.IN = function() {
    return this.getToken(MySQLParser.IN, 0);
};
ShowOpenTablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowOpenTables(this);
	}
};

ShowOpenTablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowOpenTables(this);
	}
};

ShowOpenTablesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowOpenTables(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowGlobalInfoContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowGlobalInfoContext.prototype = Object.create(ShowStatementContext.prototype);
ShowGlobalInfoContext.prototype.constructor = ShowGlobalInfoContext;

MySQLParser.ShowGlobalInfoContext = ShowGlobalInfoContext;

ShowGlobalInfoContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowGlobalInfoContext.prototype.showGlobalInfoClause = function() {
    return this.getTypedRuleContext(ShowGlobalInfoClauseContext,0);
};
ShowGlobalInfoContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowGlobalInfo(this);
	}
};

ShowGlobalInfoContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowGlobalInfo(this);
	}
};

ShowGlobalInfoContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowGlobalInfo(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowCreateFullIdObjectContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    this.namedEntity = null; // Token;
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowCreateFullIdObjectContext.prototype = Object.create(ShowStatementContext.prototype);
ShowCreateFullIdObjectContext.prototype.constructor = ShowCreateFullIdObjectContext;

MySQLParser.ShowCreateFullIdObjectContext = ShowCreateFullIdObjectContext;

ShowCreateFullIdObjectContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowCreateFullIdObjectContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

ShowCreateFullIdObjectContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

ShowCreateFullIdObjectContext.prototype.EVENT = function() {
    return this.getToken(MySQLParser.EVENT, 0);
};

ShowCreateFullIdObjectContext.prototype.FUNCTION = function() {
    return this.getToken(MySQLParser.FUNCTION, 0);
};

ShowCreateFullIdObjectContext.prototype.PROCEDURE = function() {
    return this.getToken(MySQLParser.PROCEDURE, 0);
};

ShowCreateFullIdObjectContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

ShowCreateFullIdObjectContext.prototype.TRIGGER = function() {
    return this.getToken(MySQLParser.TRIGGER, 0);
};

ShowCreateFullIdObjectContext.prototype.VIEW = function() {
    return this.getToken(MySQLParser.VIEW, 0);
};
ShowCreateFullIdObjectContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowCreateFullIdObject(this);
	}
};

ShowCreateFullIdObjectContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowCreateFullIdObject(this);
	}
};

ShowCreateFullIdObjectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowCreateFullIdObject(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowCreateUserContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowCreateUserContext.prototype = Object.create(ShowStatementContext.prototype);
ShowCreateUserContext.prototype.constructor = ShowCreateUserContext;

MySQLParser.ShowCreateUserContext = ShowCreateUserContext;

ShowCreateUserContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowCreateUserContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

ShowCreateUserContext.prototype.USER = function() {
    return this.getToken(MySQLParser.USER, 0);
};

ShowCreateUserContext.prototype.userName = function() {
    return this.getTypedRuleContext(UserNameContext,0);
};
ShowCreateUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowCreateUser(this);
	}
};

ShowCreateUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowCreateUser(this);
	}
};

ShowCreateUserContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowCreateUser(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowErrorsContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    this.errorFormat = null; // Token;
    this.offset = null; // DecimalLiteralContext;
    this.rowCount = null; // DecimalLiteralContext;
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowErrorsContext.prototype = Object.create(ShowStatementContext.prototype);
ShowErrorsContext.prototype.constructor = ShowErrorsContext;

MySQLParser.ShowErrorsContext = ShowErrorsContext;

ShowErrorsContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowErrorsContext.prototype.ERRORS = function() {
    return this.getToken(MySQLParser.ERRORS, 0);
};

ShowErrorsContext.prototype.WARNINGS = function() {
    return this.getToken(MySQLParser.WARNINGS, 0);
};

ShowErrorsContext.prototype.LIMIT = function() {
    return this.getToken(MySQLParser.LIMIT, 0);
};

ShowErrorsContext.prototype.decimalLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DecimalLiteralContext);
    } else {
        return this.getTypedRuleContext(DecimalLiteralContext,i);
    }
};

ShowErrorsContext.prototype.COMMA = function() {
    return this.getToken(MySQLParser.COMMA, 0);
};
ShowErrorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowErrors(this);
	}
};

ShowErrorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowErrors(this);
	}
};

ShowErrorsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowErrors(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowCountErrorsContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    this.errorFormat = null; // Token;
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowCountErrorsContext.prototype = Object.create(ShowStatementContext.prototype);
ShowCountErrorsContext.prototype.constructor = ShowCountErrorsContext;

MySQLParser.ShowCountErrorsContext = ShowCountErrorsContext;

ShowCountErrorsContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowCountErrorsContext.prototype.COUNT = function() {
    return this.getToken(MySQLParser.COUNT, 0);
};

ShowCountErrorsContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

ShowCountErrorsContext.prototype.STAR = function() {
    return this.getToken(MySQLParser.STAR, 0);
};

ShowCountErrorsContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

ShowCountErrorsContext.prototype.ERRORS = function() {
    return this.getToken(MySQLParser.ERRORS, 0);
};

ShowCountErrorsContext.prototype.WARNINGS = function() {
    return this.getToken(MySQLParser.WARNINGS, 0);
};
ShowCountErrorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowCountErrors(this);
	}
};

ShowCountErrorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowCountErrors(this);
	}
};

ShowCountErrorsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowCountErrors(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowObjectFilterContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowObjectFilterContext.prototype = Object.create(ShowStatementContext.prototype);
ShowObjectFilterContext.prototype.constructor = ShowObjectFilterContext;

MySQLParser.ShowObjectFilterContext = ShowObjectFilterContext;

ShowObjectFilterContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowObjectFilterContext.prototype.showCommonEntity = function() {
    return this.getTypedRuleContext(ShowCommonEntityContext,0);
};

ShowObjectFilterContext.prototype.showFilter = function() {
    return this.getTypedRuleContext(ShowFilterContext,0);
};
ShowObjectFilterContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowObjectFilter(this);
	}
};

ShowObjectFilterContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowObjectFilter(this);
	}
};

ShowObjectFilterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowObjectFilter(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowCreateDbContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    this.schemaFormat = null; // Token;
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowCreateDbContext.prototype = Object.create(ShowStatementContext.prototype);
ShowCreateDbContext.prototype.constructor = ShowCreateDbContext;

MySQLParser.ShowCreateDbContext = ShowCreateDbContext;

ShowCreateDbContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowCreateDbContext.prototype.CREATE = function() {
    return this.getToken(MySQLParser.CREATE, 0);
};

ShowCreateDbContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

ShowCreateDbContext.prototype.DATABASE = function() {
    return this.getToken(MySQLParser.DATABASE, 0);
};

ShowCreateDbContext.prototype.SCHEMA = function() {
    return this.getToken(MySQLParser.SCHEMA, 0);
};

ShowCreateDbContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};
ShowCreateDbContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowCreateDb(this);
	}
};

ShowCreateDbContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowCreateDb(this);
	}
};

ShowCreateDbContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowCreateDb(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowEngineContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    this.engineOption = null; // Token;
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowEngineContext.prototype = Object.create(ShowStatementContext.prototype);
ShowEngineContext.prototype.constructor = ShowEngineContext;

MySQLParser.ShowEngineContext = ShowEngineContext;

ShowEngineContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowEngineContext.prototype.ENGINE = function() {
    return this.getToken(MySQLParser.ENGINE, 0);
};

ShowEngineContext.prototype.engineName = function() {
    return this.getTypedRuleContext(EngineNameContext,0);
};

ShowEngineContext.prototype.STATUS = function() {
    return this.getToken(MySQLParser.STATUS, 0);
};

ShowEngineContext.prototype.MUTEX = function() {
    return this.getToken(MySQLParser.MUTEX, 0);
};
ShowEngineContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowEngine(this);
	}
};

ShowEngineContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowEngine(this);
	}
};

ShowEngineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowEngine(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowSchemaFilterContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    this.schemaFormat = null; // Token;
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowSchemaFilterContext.prototype = Object.create(ShowStatementContext.prototype);
ShowSchemaFilterContext.prototype.constructor = ShowSchemaFilterContext;

MySQLParser.ShowSchemaFilterContext = ShowSchemaFilterContext;

ShowSchemaFilterContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowSchemaFilterContext.prototype.showSchemaEntity = function() {
    return this.getTypedRuleContext(ShowSchemaEntityContext,0);
};

ShowSchemaFilterContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

ShowSchemaFilterContext.prototype.showFilter = function() {
    return this.getTypedRuleContext(ShowFilterContext,0);
};

ShowSchemaFilterContext.prototype.FROM = function() {
    return this.getToken(MySQLParser.FROM, 0);
};

ShowSchemaFilterContext.prototype.IN = function() {
    return this.getToken(MySQLParser.IN, 0);
};
ShowSchemaFilterContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowSchemaFilter(this);
	}
};

ShowSchemaFilterContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowSchemaFilter(this);
	}
};

ShowSchemaFilterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowSchemaFilter(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowIndexesContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    this.indexFormat = null; // Token;
    this.tableFormat = null; // Token;
    this.schemaFormat = null; // Token;
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowIndexesContext.prototype = Object.create(ShowStatementContext.prototype);
ShowIndexesContext.prototype.constructor = ShowIndexesContext;

MySQLParser.ShowIndexesContext = ShowIndexesContext;

ShowIndexesContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowIndexesContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

ShowIndexesContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

ShowIndexesContext.prototype.INDEXES = function() {
    return this.getToken(MySQLParser.INDEXES, 0);
};

ShowIndexesContext.prototype.KEYS = function() {
    return this.getToken(MySQLParser.KEYS, 0);
};

ShowIndexesContext.prototype.FROM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.FROM);
    } else {
        return this.getToken(MySQLParser.FROM, i);
    }
};


ShowIndexesContext.prototype.IN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.IN);
    } else {
        return this.getToken(MySQLParser.IN, i);
    }
};


ShowIndexesContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

ShowIndexesContext.prototype.WHERE = function() {
    return this.getToken(MySQLParser.WHERE, 0);
};

ShowIndexesContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ShowIndexesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowIndexes(this);
	}
};

ShowIndexesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowIndexes(this);
	}
};

ShowIndexesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowIndexes(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowLogEventsContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    this.logFormat = null; // Token;
    this.filename = null; // Token;
    this.fromPosition = null; // DecimalLiteralContext;
    this.offset = null; // DecimalLiteralContext;
    this.rowCount = null; // DecimalLiteralContext;
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowLogEventsContext.prototype = Object.create(ShowStatementContext.prototype);
ShowLogEventsContext.prototype.constructor = ShowLogEventsContext;

MySQLParser.ShowLogEventsContext = ShowLogEventsContext;

ShowLogEventsContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowLogEventsContext.prototype.EVENTS = function() {
    return this.getToken(MySQLParser.EVENTS, 0);
};

ShowLogEventsContext.prototype.BINLOG = function() {
    return this.getToken(MySQLParser.BINLOG, 0);
};

ShowLogEventsContext.prototype.RELAYLOG = function() {
    return this.getToken(MySQLParser.RELAYLOG, 0);
};

ShowLogEventsContext.prototype.IN = function() {
    return this.getToken(MySQLParser.IN, 0);
};

ShowLogEventsContext.prototype.FROM = function() {
    return this.getToken(MySQLParser.FROM, 0);
};

ShowLogEventsContext.prototype.LIMIT = function() {
    return this.getToken(MySQLParser.LIMIT, 0);
};

ShowLogEventsContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

ShowLogEventsContext.prototype.decimalLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DecimalLiteralContext);
    } else {
        return this.getTypedRuleContext(DecimalLiteralContext,i);
    }
};

ShowLogEventsContext.prototype.COMMA = function() {
    return this.getToken(MySQLParser.COMMA, 0);
};
ShowLogEventsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowLogEvents(this);
	}
};

ShowLogEventsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowLogEvents(this);
	}
};

ShowLogEventsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowLogEvents(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowMasterLogsContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    this.logFormat = null; // Token;
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowMasterLogsContext.prototype = Object.create(ShowStatementContext.prototype);
ShowMasterLogsContext.prototype.constructor = ShowMasterLogsContext;

MySQLParser.ShowMasterLogsContext = ShowMasterLogsContext;

ShowMasterLogsContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowMasterLogsContext.prototype.LOGS = function() {
    return this.getToken(MySQLParser.LOGS, 0);
};

ShowMasterLogsContext.prototype.BINARY = function() {
    return this.getToken(MySQLParser.BINARY, 0);
};

ShowMasterLogsContext.prototype.MASTER = function() {
    return this.getToken(MySQLParser.MASTER, 0);
};
ShowMasterLogsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowMasterLogs(this);
	}
};

ShowMasterLogsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowMasterLogs(this);
	}
};

ShowMasterLogsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowMasterLogs(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowGrantsContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowGrantsContext.prototype = Object.create(ShowStatementContext.prototype);
ShowGrantsContext.prototype.constructor = ShowGrantsContext;

MySQLParser.ShowGrantsContext = ShowGrantsContext;

ShowGrantsContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowGrantsContext.prototype.GRANTS = function() {
    return this.getToken(MySQLParser.GRANTS, 0);
};

ShowGrantsContext.prototype.FOR = function() {
    return this.getToken(MySQLParser.FOR, 0);
};

ShowGrantsContext.prototype.userName = function() {
    return this.getTypedRuleContext(UserNameContext,0);
};
ShowGrantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowGrants(this);
	}
};

ShowGrantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowGrants(this);
	}
};

ShowGrantsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowGrants(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowSlaveStatusContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowSlaveStatusContext.prototype = Object.create(ShowStatementContext.prototype);
ShowSlaveStatusContext.prototype.constructor = ShowSlaveStatusContext;

MySQLParser.ShowSlaveStatusContext = ShowSlaveStatusContext;

ShowSlaveStatusContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowSlaveStatusContext.prototype.SLAVE = function() {
    return this.getToken(MySQLParser.SLAVE, 0);
};

ShowSlaveStatusContext.prototype.STATUS = function() {
    return this.getToken(MySQLParser.STATUS, 0);
};

ShowSlaveStatusContext.prototype.FOR = function() {
    return this.getToken(MySQLParser.FOR, 0);
};

ShowSlaveStatusContext.prototype.CHANNEL = function() {
    return this.getToken(MySQLParser.CHANNEL, 0);
};

ShowSlaveStatusContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};
ShowSlaveStatusContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowSlaveStatus(this);
	}
};

ShowSlaveStatusContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowSlaveStatus(this);
	}
};

ShowSlaveStatusContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowSlaveStatus(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowRoutineContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    this.routine = null; // Token;
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowRoutineContext.prototype = Object.create(ShowStatementContext.prototype);
ShowRoutineContext.prototype.constructor = ShowRoutineContext;

MySQLParser.ShowRoutineContext = ShowRoutineContext;

ShowRoutineContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowRoutineContext.prototype.CODE = function() {
    return this.getToken(MySQLParser.CODE, 0);
};

ShowRoutineContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

ShowRoutineContext.prototype.FUNCTION = function() {
    return this.getToken(MySQLParser.FUNCTION, 0);
};

ShowRoutineContext.prototype.PROCEDURE = function() {
    return this.getToken(MySQLParser.PROCEDURE, 0);
};
ShowRoutineContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowRoutine(this);
	}
};

ShowRoutineContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowRoutine(this);
	}
};

ShowRoutineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowRoutine(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowProfileContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    this.queryCount = null; // DecimalLiteralContext;
    this.offset = null; // DecimalLiteralContext;
    this.rowCount = null; // DecimalLiteralContext;
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowProfileContext.prototype = Object.create(ShowStatementContext.prototype);
ShowProfileContext.prototype.constructor = ShowProfileContext;

MySQLParser.ShowProfileContext = ShowProfileContext;

ShowProfileContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowProfileContext.prototype.PROFILE = function() {
    return this.getToken(MySQLParser.PROFILE, 0);
};

ShowProfileContext.prototype.showProfileType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ShowProfileTypeContext);
    } else {
        return this.getTypedRuleContext(ShowProfileTypeContext,i);
    }
};

ShowProfileContext.prototype.LIMIT = function() {
    return this.getToken(MySQLParser.LIMIT, 0);
};

ShowProfileContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


ShowProfileContext.prototype.FOR = function() {
    return this.getToken(MySQLParser.FOR, 0);
};

ShowProfileContext.prototype.QUERY = function() {
    return this.getToken(MySQLParser.QUERY, 0);
};

ShowProfileContext.prototype.decimalLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DecimalLiteralContext);
    } else {
        return this.getTypedRuleContext(DecimalLiteralContext,i);
    }
};
ShowProfileContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowProfile(this);
	}
};

ShowProfileContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowProfile(this);
	}
};

ShowProfileContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowProfile(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowColumnsContext(parser, ctx) {
	ShowStatementContext.call(this, parser);
    this.columnsFormat = null; // Token;
    this.tableFormat = null; // Token;
    this.schemaFormat = null; // Token;
    ShowStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowColumnsContext.prototype = Object.create(ShowStatementContext.prototype);
ShowColumnsContext.prototype.constructor = ShowColumnsContext;

MySQLParser.ShowColumnsContext = ShowColumnsContext;

ShowColumnsContext.prototype.SHOW = function() {
    return this.getToken(MySQLParser.SHOW, 0);
};

ShowColumnsContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

ShowColumnsContext.prototype.COLUMNS = function() {
    return this.getToken(MySQLParser.COLUMNS, 0);
};

ShowColumnsContext.prototype.FIELDS = function() {
    return this.getToken(MySQLParser.FIELDS, 0);
};

ShowColumnsContext.prototype.FROM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.FROM);
    } else {
        return this.getToken(MySQLParser.FROM, i);
    }
};


ShowColumnsContext.prototype.IN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.IN);
    } else {
        return this.getToken(MySQLParser.IN, i);
    }
};


ShowColumnsContext.prototype.FULL = function() {
    return this.getToken(MySQLParser.FULL, 0);
};

ShowColumnsContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

ShowColumnsContext.prototype.showFilter = function() {
    return this.getTypedRuleContext(ShowFilterContext,0);
};
ShowColumnsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowColumns(this);
	}
};

ShowColumnsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowColumns(this);
	}
};

ShowColumnsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowColumns(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.ShowStatementContext = ShowStatementContext;

MySQLParser.prototype.showStatement = function() {

    var localctx = new ShowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, MySQLParser.RULE_showStatement);
    var _la = 0; // Token type
    try {
        this.state = 5069;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,727,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ShowMasterLogsContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 4918;
            this.match(MySQLParser.SHOW);
            this.state = 4919;
            localctx.logFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.BINARY || _la===MySQLParser.MASTER)) {
                localctx.logFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4920;
            this.match(MySQLParser.LOGS);
            break;

        case 2:
            localctx = new ShowLogEventsContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 4921;
            this.match(MySQLParser.SHOW);
            this.state = 4922;
            localctx.logFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.BINLOG || _la===MySQLParser.RELAYLOG)) {
                localctx.logFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4923;
            this.match(MySQLParser.EVENTS);
            this.state = 4926;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.IN) {
                this.state = 4924;
                this.match(MySQLParser.IN);
                this.state = 4925;
                localctx.filename = this.match(MySQLParser.STRING_LITERAL);
            }

            this.state = 4930;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FROM) {
                this.state = 4928;
                this.match(MySQLParser.FROM);
                this.state = 4929;
                localctx.fromPosition = this.decimalLiteral();
            }

            this.state = 4939;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIMIT) {
                this.state = 4932;
                this.match(MySQLParser.LIMIT);
                this.state = 4936;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,708,this._ctx);
                if(la_===1) {
                    this.state = 4933;
                    localctx.offset = this.decimalLiteral();
                    this.state = 4934;
                    this.match(MySQLParser.COMMA);

                }
                this.state = 4938;
                localctx.rowCount = this.decimalLiteral();
            }

            break;

        case 3:
            localctx = new ShowObjectFilterContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 4941;
            this.match(MySQLParser.SHOW);
            this.state = 4942;
            this.showCommonEntity();
            this.state = 4944;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIKE || _la===MySQLParser.WHERE) {
                this.state = 4943;
                this.showFilter();
            }

            break;

        case 4:
            localctx = new ShowColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 4946;
            this.match(MySQLParser.SHOW);
            this.state = 4948;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FULL) {
                this.state = 4947;
                this.match(MySQLParser.FULL);
            }

            this.state = 4950;
            localctx.columnsFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.COLUMNS || _la===MySQLParser.FIELDS)) {
                localctx.columnsFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4951;
            localctx.tableFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.FROM || _la===MySQLParser.IN)) {
                localctx.tableFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4952;
            this.tableName();
            this.state = 4955;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FROM || _la===MySQLParser.IN) {
                this.state = 4953;
                localctx.schemaFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.FROM || _la===MySQLParser.IN)) {
                    localctx.schemaFormat = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4954;
                this.uid();
            }

            this.state = 4958;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIKE || _la===MySQLParser.WHERE) {
                this.state = 4957;
                this.showFilter();
            }

            break;

        case 5:
            localctx = new ShowCreateDbContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 4960;
            this.match(MySQLParser.SHOW);
            this.state = 4961;
            this.match(MySQLParser.CREATE);
            this.state = 4962;
            localctx.schemaFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.DATABASE || _la===MySQLParser.SCHEMA)) {
                localctx.schemaFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4964;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.IF) {
                this.state = 4963;
                this.ifNotExists();
            }

            this.state = 4966;
            this.uid();
            break;

        case 6:
            localctx = new ShowCreateFullIdObjectContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 4967;
            this.match(MySQLParser.SHOW);
            this.state = 4968;
            this.match(MySQLParser.CREATE);
            this.state = 4969;
            localctx.namedEntity = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.PROCEDURE || _la===MySQLParser.TABLE || _la===MySQLParser.TRIGGER || _la===MySQLParser.EVENT || _la===MySQLParser.FUNCTION || _la===MySQLParser.VIEW)) {
                localctx.namedEntity = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4970;
            this.fullId();
            break;

        case 7:
            localctx = new ShowCreateUserContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 4971;
            this.match(MySQLParser.SHOW);
            this.state = 4972;
            this.match(MySQLParser.CREATE);
            this.state = 4973;
            this.match(MySQLParser.USER);
            this.state = 4974;
            this.userName();
            break;

        case 8:
            localctx = new ShowEngineContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 4975;
            this.match(MySQLParser.SHOW);
            this.state = 4976;
            this.match(MySQLParser.ENGINE);
            this.state = 4977;
            this.engineName();
            this.state = 4978;
            localctx.engineOption = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.MUTEX || _la===MySQLParser.STATUS)) {
                localctx.engineOption = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 9:
            localctx = new ShowGlobalInfoContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 4980;
            this.match(MySQLParser.SHOW);
            this.state = 4981;
            this.showGlobalInfoClause();
            break;

        case 10:
            localctx = new ShowErrorsContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 4982;
            this.match(MySQLParser.SHOW);
            this.state = 4983;
            localctx.errorFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ERRORS || _la===MySQLParser.WARNINGS)) {
                localctx.errorFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

            this.state = 4984;
            this.match(MySQLParser.LIMIT);
            this.state = 4988;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,715,this._ctx);
            if(la_===1) {
                this.state = 4985;
                localctx.offset = this.decimalLiteral();
                this.state = 4986;
                this.match(MySQLParser.COMMA);

            }
            this.state = 4990;
            localctx.rowCount = this.decimalLiteral();
            break;

        case 11:
            localctx = new ShowCountErrorsContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 4991;
            this.match(MySQLParser.SHOW);
            this.state = 4992;
            this.match(MySQLParser.COUNT);
            this.state = 4993;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 4994;
            this.match(MySQLParser.STAR);
            this.state = 4995;
            this.match(MySQLParser.RR_BRACKET);
            this.state = 4996;
            localctx.errorFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ERRORS || _la===MySQLParser.WARNINGS)) {
                localctx.errorFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 12:
            localctx = new ShowSchemaFilterContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 4997;
            this.match(MySQLParser.SHOW);
            this.state = 4998;
            this.showSchemaEntity();
            this.state = 5001;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FROM || _la===MySQLParser.IN) {
                this.state = 4999;
                localctx.schemaFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.FROM || _la===MySQLParser.IN)) {
                    localctx.schemaFormat = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5000;
                this.uid();
            }

            this.state = 5004;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIKE || _la===MySQLParser.WHERE) {
                this.state = 5003;
                this.showFilter();
            }

            break;

        case 13:
            localctx = new ShowRoutineContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 5006;
            this.match(MySQLParser.SHOW);
            this.state = 5007;
            localctx.routine = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.PROCEDURE || _la===MySQLParser.FUNCTION)) {
                localctx.routine = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5008;
            this.match(MySQLParser.CODE);
            this.state = 5009;
            this.fullId();
            break;

        case 14:
            localctx = new ShowGrantsContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 5010;
            this.match(MySQLParser.SHOW);
            this.state = 5011;
            this.match(MySQLParser.GRANTS);
            this.state = 5014;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR) {
                this.state = 5012;
                this.match(MySQLParser.FOR);
                this.state = 5013;
                this.userName();
            }

            break;

        case 15:
            localctx = new ShowIndexesContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 5016;
            this.match(MySQLParser.SHOW);
            this.state = 5017;
            localctx.indexFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.INDEX || _la===MySQLParser.KEYS || _la===MySQLParser.INDEXES)) {
                localctx.indexFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5018;
            localctx.tableFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.FROM || _la===MySQLParser.IN)) {
                localctx.tableFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5019;
            this.tableName();
            this.state = 5022;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FROM || _la===MySQLParser.IN) {
                this.state = 5020;
                localctx.schemaFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.FROM || _la===MySQLParser.IN)) {
                    localctx.schemaFormat = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5021;
                this.uid();
            }

            this.state = 5026;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.WHERE) {
                this.state = 5024;
                this.match(MySQLParser.WHERE);
                this.state = 5025;
                this.expression(0);
            }

            break;

        case 16:
            localctx = new ShowOpenTablesContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 5028;
            this.match(MySQLParser.SHOW);
            this.state = 5029;
            this.match(MySQLParser.OPEN);
            this.state = 5030;
            this.match(MySQLParser.TABLES);
            this.state = 5033;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FROM || _la===MySQLParser.IN) {
                this.state = 5031;
                localctx.schemaFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.FROM || _la===MySQLParser.IN)) {
                    localctx.schemaFormat = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5032;
                this.uid();
            }

            this.state = 5036;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LIKE || _la===MySQLParser.WHERE) {
                this.state = 5035;
                this.showFilter();
            }

            break;

        case 17:
            localctx = new ShowProfileContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 5038;
            this.match(MySQLParser.SHOW);
            this.state = 5039;
            this.match(MySQLParser.PROFILE);
            this.state = 5040;
            this.showProfileType();
            this.state = 5045;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 5041;
                this.match(MySQLParser.COMMA);
                this.state = 5042;
                this.showProfileType();
                this.state = 5047;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 5051;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR) {
                this.state = 5048;
                this.match(MySQLParser.FOR);
                this.state = 5049;
                this.match(MySQLParser.QUERY);
                this.state = 5050;
                localctx.queryCount = this.decimalLiteral();
            }

            this.state = 5053;
            this.match(MySQLParser.LIMIT);
            this.state = 5057;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,725,this._ctx);
            if(la_===1) {
                this.state = 5054;
                localctx.offset = this.decimalLiteral();
                this.state = 5055;
                this.match(MySQLParser.COMMA);

            }
            this.state = 5059;
            localctx.rowCount = this.decimalLiteral();
            break;

        case 18:
            localctx = new ShowSlaveStatusContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 5061;
            this.match(MySQLParser.SHOW);
            this.state = 5062;
            this.match(MySQLParser.SLAVE);
            this.state = 5063;
            this.match(MySQLParser.STATUS);
            this.state = 5067;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR) {
                this.state = 5064;
                this.match(MySQLParser.FOR);
                this.state = 5065;
                this.match(MySQLParser.CHANNEL);
                this.state = 5066;
                this.match(MySQLParser.STRING_LITERAL);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_variableClause;
    return this;
}

VariableClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableClauseContext.prototype.constructor = VariableClauseContext;

VariableClauseContext.prototype.LOCAL_ID = function() {
    return this.getToken(MySQLParser.LOCAL_ID, 0);
};

VariableClauseContext.prototype.GLOBAL_ID = function() {
    return this.getToken(MySQLParser.GLOBAL_ID, 0);
};

VariableClauseContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

VariableClauseContext.prototype.GLOBAL = function() {
    return this.getToken(MySQLParser.GLOBAL, 0);
};

VariableClauseContext.prototype.SESSION = function() {
    return this.getToken(MySQLParser.SESSION, 0);
};

VariableClauseContext.prototype.LOCAL = function() {
    return this.getToken(MySQLParser.LOCAL, 0);
};

VariableClauseContext.prototype.AT_SIGN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.AT_SIGN);
    } else {
        return this.getToken(MySQLParser.AT_SIGN, i);
    }
};


VariableClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterVariableClause(this);
	}
};

VariableClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitVariableClause(this);
	}
};

VariableClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitVariableClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.VariableClauseContext = VariableClauseContext;

MySQLParser.prototype.variableClause = function() {

    var localctx = new VariableClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, MySQLParser.RULE_variableClause);
    var _la = 0; // Token type
    try {
        this.state = 5081;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.LOCAL_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 5071;
            this.match(MySQLParser.LOCAL_ID);
            break;
        case MySQLParser.GLOBAL_ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 5072;
            this.match(MySQLParser.GLOBAL_ID);
            break;
        case MySQLParser.CURRENT:
        case MySQLParser.DATABASE:
        case MySQLParser.DIAGNOSTICS:
        case MySQLParser.LEFT:
        case MySQLParser.NUMBER:
        case MySQLParser.RIGHT:
        case MySQLParser.STACKED:
        case MySQLParser.DATE:
        case MySQLParser.TIME:
        case MySQLParser.TIMESTAMP:
        case MySQLParser.DATETIME:
        case MySQLParser.YEAR:
        case MySQLParser.TEXT:
        case MySQLParser.ENUM:
        case MySQLParser.SERIAL:
        case MySQLParser.JSON_VALID:
        case MySQLParser.JSON_SCHEMA_VALID:
        case MySQLParser.COUNT:
        case MySQLParser.POSITION:
        case MySQLParser.ACCOUNT:
        case MySQLParser.ACTION:
        case MySQLParser.AFTER:
        case MySQLParser.AGGREGATE:
        case MySQLParser.ALGORITHM:
        case MySQLParser.ANY:
        case MySQLParser.AT:
        case MySQLParser.AUTHORS:
        case MySQLParser.AUTOCOMMIT:
        case MySQLParser.AUTOEXTEND_SIZE:
        case MySQLParser.AUTO_INCREMENT:
        case MySQLParser.AVG_ROW_LENGTH:
        case MySQLParser.BEGIN:
        case MySQLParser.BINLOG:
        case MySQLParser.BIT:
        case MySQLParser.BLOCK:
        case MySQLParser.BOOL:
        case MySQLParser.BOOLEAN:
        case MySQLParser.BTREE:
        case MySQLParser.CACHE:
        case MySQLParser.CASCADED:
        case MySQLParser.CHAIN:
        case MySQLParser.CHANGED:
        case MySQLParser.CHANNEL:
        case MySQLParser.CHECKSUM:
        case MySQLParser.PAGE_CHECKSUM:
        case MySQLParser.CIPHER:
        case MySQLParser.CLASS_ORIGIN:
        case MySQLParser.CLIENT:
        case MySQLParser.CLOSE:
        case MySQLParser.COALESCE:
        case MySQLParser.CODE:
        case MySQLParser.COLUMNS:
        case MySQLParser.COLUMN_FORMAT:
        case MySQLParser.COLUMN_NAME:
        case MySQLParser.COMMENT:
        case MySQLParser.COMMIT:
        case MySQLParser.COMPACT:
        case MySQLParser.COMPLETION:
        case MySQLParser.COMPRESSED:
        case MySQLParser.COMPRESSION:
        case MySQLParser.CONCURRENT:
        case MySQLParser.CONNECTION:
        case MySQLParser.CONSISTENT:
        case MySQLParser.CONSTRAINT_CATALOG:
        case MySQLParser.CONSTRAINT_SCHEMA:
        case MySQLParser.CONSTRAINT_NAME:
        case MySQLParser.CONTAINS:
        case MySQLParser.CONTEXT:
        case MySQLParser.CONTRIBUTORS:
        case MySQLParser.COPY:
        case MySQLParser.CPU:
        case MySQLParser.CURSOR_NAME:
        case MySQLParser.DATA:
        case MySQLParser.DATAFILE:
        case MySQLParser.DEALLOCATE:
        case MySQLParser.DEFAULT_AUTH:
        case MySQLParser.DEFINER:
        case MySQLParser.DELAY_KEY_WRITE:
        case MySQLParser.DES_KEY_FILE:
        case MySQLParser.DIRECTORY:
        case MySQLParser.DISABLE:
        case MySQLParser.DISCARD:
        case MySQLParser.DISK:
        case MySQLParser.DO:
        case MySQLParser.DUMPFILE:
        case MySQLParser.DUPLICATE:
        case MySQLParser.DYNAMIC:
        case MySQLParser.ENABLE:
        case MySQLParser.ENCRYPTION:
        case MySQLParser.END:
        case MySQLParser.ENDS:
        case MySQLParser.ENGINE:
        case MySQLParser.ENGINES:
        case MySQLParser.ERROR:
        case MySQLParser.ERRORS:
        case MySQLParser.ESCAPE:
        case MySQLParser.EVEN:
        case MySQLParser.EVENT:
        case MySQLParser.EVENTS:
        case MySQLParser.EVERY:
        case MySQLParser.EXCHANGE:
        case MySQLParser.EXCLUSIVE:
        case MySQLParser.EXPIRE:
        case MySQLParser.EXPORT:
        case MySQLParser.EXTENDED:
        case MySQLParser.EXTENT_SIZE:
        case MySQLParser.FAST:
        case MySQLParser.FAULTS:
        case MySQLParser.FIELDS:
        case MySQLParser.FILE_BLOCK_SIZE:
        case MySQLParser.FILTER:
        case MySQLParser.FIRST:
        case MySQLParser.FIXED:
        case MySQLParser.FLUSH:
        case MySQLParser.FOLLOWS:
        case MySQLParser.FOUND:
        case MySQLParser.FULL:
        case MySQLParser.FUNCTION:
        case MySQLParser.GENERAL:
        case MySQLParser.GLOBAL:
        case MySQLParser.GRANTS:
        case MySQLParser.GROUP_REPLICATION:
        case MySQLParser.HANDLER:
        case MySQLParser.HASH:
        case MySQLParser.HELP:
        case MySQLParser.HOST:
        case MySQLParser.HOSTS:
        case MySQLParser.IDENTIFIED:
        case MySQLParser.IGNORE_SERVER_IDS:
        case MySQLParser.IMPORT:
        case MySQLParser.INDEXES:
        case MySQLParser.INITIAL_SIZE:
        case MySQLParser.INPLACE:
        case MySQLParser.INSERT_METHOD:
        case MySQLParser.INSTALL:
        case MySQLParser.INSTANCE:
        case MySQLParser.INVISIBLE:
        case MySQLParser.INVOKER:
        case MySQLParser.IO:
        case MySQLParser.IO_THREAD:
        case MySQLParser.IPC:
        case MySQLParser.ISOLATION:
        case MySQLParser.ISSUER:
        case MySQLParser.JSON:
        case MySQLParser.KEY_BLOCK_SIZE:
        case MySQLParser.LANGUAGE:
        case MySQLParser.LAST:
        case MySQLParser.LEAVES:
        case MySQLParser.LESS:
        case MySQLParser.LEVEL:
        case MySQLParser.LIST:
        case MySQLParser.LOCAL:
        case MySQLParser.LOGFILE:
        case MySQLParser.LOGS:
        case MySQLParser.MASTER:
        case MySQLParser.MASTER_AUTO_POSITION:
        case MySQLParser.MASTER_CONNECT_RETRY:
        case MySQLParser.MASTER_DELAY:
        case MySQLParser.MASTER_HEARTBEAT_PERIOD:
        case MySQLParser.MASTER_HOST:
        case MySQLParser.MASTER_LOG_FILE:
        case MySQLParser.MASTER_LOG_POS:
        case MySQLParser.MASTER_PASSWORD:
        case MySQLParser.MASTER_PORT:
        case MySQLParser.MASTER_RETRY_COUNT:
        case MySQLParser.MASTER_SSL:
        case MySQLParser.MASTER_SSL_CA:
        case MySQLParser.MASTER_SSL_CAPATH:
        case MySQLParser.MASTER_SSL_CERT:
        case MySQLParser.MASTER_SSL_CIPHER:
        case MySQLParser.MASTER_SSL_CRL:
        case MySQLParser.MASTER_SSL_CRLPATH:
        case MySQLParser.MASTER_SSL_KEY:
        case MySQLParser.MASTER_TLS_VERSION:
        case MySQLParser.MASTER_USER:
        case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser.MAX_QUERIES_PER_HOUR:
        case MySQLParser.MAX_ROWS:
        case MySQLParser.MAX_SIZE:
        case MySQLParser.MAX_UPDATES_PER_HOUR:
        case MySQLParser.MAX_USER_CONNECTIONS:
        case MySQLParser.MEDIUM:
        case MySQLParser.MERGE:
        case MySQLParser.MESSAGE_TEXT:
        case MySQLParser.MID:
        case MySQLParser.MIGRATE:
        case MySQLParser.MIN_ROWS:
        case MySQLParser.MODE:
        case MySQLParser.MODIFY:
        case MySQLParser.MUTEX:
        case MySQLParser.MYSQL:
        case MySQLParser.MYSQL_ERRNO:
        case MySQLParser.NAME:
        case MySQLParser.NAMES:
        case MySQLParser.NCHAR:
        case MySQLParser.NEVER:
        case MySQLParser.NEXT:
        case MySQLParser.NO:
        case MySQLParser.NODEGROUP:
        case MySQLParser.NONE:
        case MySQLParser.OFFLINE:
        case MySQLParser.OFFSET:
        case MySQLParser.OJ:
        case MySQLParser.OLD_PASSWORD:
        case MySQLParser.ONE:
        case MySQLParser.ONLINE:
        case MySQLParser.ONLY:
        case MySQLParser.OPEN:
        case MySQLParser.OPTIMIZER_COSTS:
        case MySQLParser.OPTIONS:
        case MySQLParser.OWNER:
        case MySQLParser.PACK_KEYS:
        case MySQLParser.PAGE:
        case MySQLParser.PARSER:
        case MySQLParser.PARTIAL:
        case MySQLParser.PARTITIONING:
        case MySQLParser.PARTITIONS:
        case MySQLParser.PASSWORD:
        case MySQLParser.PHASE:
        case MySQLParser.PLUGIN:
        case MySQLParser.PLUGIN_DIR:
        case MySQLParser.PLUGINS:
        case MySQLParser.PORT:
        case MySQLParser.PRECEDES:
        case MySQLParser.PREPARE:
        case MySQLParser.PRESERVE:
        case MySQLParser.PREV:
        case MySQLParser.PROCESSLIST:
        case MySQLParser.PROFILE:
        case MySQLParser.PROFILES:
        case MySQLParser.PROXY:
        case MySQLParser.QUERY:
        case MySQLParser.QUICK:
        case MySQLParser.REBUILD:
        case MySQLParser.RECOVER:
        case MySQLParser.REDO_BUFFER_SIZE:
        case MySQLParser.REDUNDANT:
        case MySQLParser.RELAY:
        case MySQLParser.RELAY_LOG_FILE:
        case MySQLParser.RELAY_LOG_POS:
        case MySQLParser.RELAYLOG:
        case MySQLParser.REMOVE:
        case MySQLParser.REORGANIZE:
        case MySQLParser.REPAIR:
        case MySQLParser.REPLICATE_DO_DB:
        case MySQLParser.REPLICATE_DO_TABLE:
        case MySQLParser.REPLICATE_IGNORE_DB:
        case MySQLParser.REPLICATE_IGNORE_TABLE:
        case MySQLParser.REPLICATE_REWRITE_DB:
        case MySQLParser.REPLICATE_WILD_DO_TABLE:
        case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser.REPLICATION:
        case MySQLParser.RESET:
        case MySQLParser.RESUME:
        case MySQLParser.RETURNED_SQLSTATE:
        case MySQLParser.RETURNS:
        case MySQLParser.ROLE:
        case MySQLParser.ROLLBACK:
        case MySQLParser.ROLLUP:
        case MySQLParser.ROTATE:
        case MySQLParser.ROW:
        case MySQLParser.ROWS:
        case MySQLParser.ROW_FORMAT:
        case MySQLParser.SAVEPOINT:
        case MySQLParser.SCHEDULE:
        case MySQLParser.SECURITY:
        case MySQLParser.SERVER:
        case MySQLParser.SESSION:
        case MySQLParser.SHARE:
        case MySQLParser.SHARED:
        case MySQLParser.SIGNED:
        case MySQLParser.SIMPLE:
        case MySQLParser.SLAVE:
        case MySQLParser.SLOW:
        case MySQLParser.SNAPSHOT:
        case MySQLParser.SOCKET:
        case MySQLParser.SOME:
        case MySQLParser.SONAME:
        case MySQLParser.SOUNDS:
        case MySQLParser.SOURCE:
        case MySQLParser.SQL_AFTER_GTIDS:
        case MySQLParser.SQL_AFTER_MTS_GAPS:
        case MySQLParser.SQL_BEFORE_GTIDS:
        case MySQLParser.SQL_BUFFER_RESULT:
        case MySQLParser.SQL_CACHE:
        case MySQLParser.SQL_NO_CACHE:
        case MySQLParser.SQL_THREAD:
        case MySQLParser.START:
        case MySQLParser.STARTS:
        case MySQLParser.STATS_AUTO_RECALC:
        case MySQLParser.STATS_PERSISTENT:
        case MySQLParser.STATS_SAMPLE_PAGES:
        case MySQLParser.STATUS:
        case MySQLParser.STOP:
        case MySQLParser.STORAGE:
        case MySQLParser.STRING:
        case MySQLParser.SUBCLASS_ORIGIN:
        case MySQLParser.SUBJECT:
        case MySQLParser.SUBPARTITION:
        case MySQLParser.SUBPARTITIONS:
        case MySQLParser.SUSPEND:
        case MySQLParser.SWAPS:
        case MySQLParser.SWITCHES:
        case MySQLParser.TABLE_NAME:
        case MySQLParser.TABLESPACE:
        case MySQLParser.TEMPORARY:
        case MySQLParser.TEMPTABLE:
        case MySQLParser.THAN:
        case MySQLParser.TRADITIONAL:
        case MySQLParser.TRANSACTION:
        case MySQLParser.TRANSACTIONAL:
        case MySQLParser.TRIGGERS:
        case MySQLParser.TRUNCATE:
        case MySQLParser.UNDEFINED:
        case MySQLParser.UNDOFILE:
        case MySQLParser.UNDO_BUFFER_SIZE:
        case MySQLParser.UNINSTALL:
        case MySQLParser.UNKNOWN:
        case MySQLParser.UNTIL:
        case MySQLParser.UPGRADE:
        case MySQLParser.USER:
        case MySQLParser.USE_FRM:
        case MySQLParser.USER_RESOURCES:
        case MySQLParser.VALIDATION:
        case MySQLParser.VALUE:
        case MySQLParser.VARIABLES:
        case MySQLParser.VIEW:
        case MySQLParser.VISIBLE:
        case MySQLParser.WAIT:
        case MySQLParser.WARNINGS:
        case MySQLParser.WITHOUT:
        case MySQLParser.WORK:
        case MySQLParser.WRAPPER:
        case MySQLParser.X509:
        case MySQLParser.XA:
        case MySQLParser.XML:
        case MySQLParser.INTERNAL:
        case MySQLParser.QUARTER:
        case MySQLParser.MONTH:
        case MySQLParser.DAY:
        case MySQLParser.HOUR:
        case MySQLParser.MINUTE:
        case MySQLParser.WEEK:
        case MySQLParser.SECOND:
        case MySQLParser.MICROSECOND:
        case MySQLParser.TABLES:
        case MySQLParser.ROUTINE:
        case MySQLParser.EXECUTE:
        case MySQLParser.FILE:
        case MySQLParser.PROCESS:
        case MySQLParser.RELOAD:
        case MySQLParser.SHUTDOWN:
        case MySQLParser.SUPER:
        case MySQLParser.PRIVILEGES:
        case MySQLParser.AUDIT_ADMIN:
        case MySQLParser.BACKUP_ADMIN:
        case MySQLParser.BINLOG_ADMIN:
        case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
        case MySQLParser.CLONE_ADMIN:
        case MySQLParser.CONNECTION_ADMIN:
        case MySQLParser.ENCRYPTION_KEY_ADMIN:
        case MySQLParser.FIREWALL_ADMIN:
        case MySQLParser.FIREWALL_USER:
        case MySQLParser.GROUP_REPLICATION_ADMIN:
        case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
        case MySQLParser.NDB_STORED_USER:
        case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
        case MySQLParser.REPLICATION_APPLIER:
        case MySQLParser.REPLICATION_SLAVE_ADMIN:
        case MySQLParser.RESOURCE_GROUP_ADMIN:
        case MySQLParser.RESOURCE_GROUP_USER:
        case MySQLParser.ROLE_ADMIN:
        case MySQLParser.SESSION_VARIABLES_ADMIN:
        case MySQLParser.SET_USER_ID:
        case MySQLParser.SHOW_ROUTINE:
        case MySQLParser.SYSTEM_VARIABLES_ADMIN:
        case MySQLParser.TABLE_ENCRYPTION_ADMIN:
        case MySQLParser.VERSION_TOKEN_ADMIN:
        case MySQLParser.XA_RECOVER_ADMIN:
        case MySQLParser.ARMSCII8:
        case MySQLParser.ASCII:
        case MySQLParser.BIG5:
        case MySQLParser.CP1250:
        case MySQLParser.CP1251:
        case MySQLParser.CP1256:
        case MySQLParser.CP1257:
        case MySQLParser.CP850:
        case MySQLParser.CP852:
        case MySQLParser.CP866:
        case MySQLParser.CP932:
        case MySQLParser.DEC8:
        case MySQLParser.EUCJPMS:
        case MySQLParser.EUCKR:
        case MySQLParser.GB2312:
        case MySQLParser.GBK:
        case MySQLParser.GEOSTD8:
        case MySQLParser.GREEK:
        case MySQLParser.HEBREW:
        case MySQLParser.HP8:
        case MySQLParser.KEYBCS2:
        case MySQLParser.KOI8R:
        case MySQLParser.KOI8U:
        case MySQLParser.LATIN1:
        case MySQLParser.LATIN2:
        case MySQLParser.LATIN5:
        case MySQLParser.LATIN7:
        case MySQLParser.MACCE:
        case MySQLParser.MACROMAN:
        case MySQLParser.SJIS:
        case MySQLParser.SWE7:
        case MySQLParser.TIS620:
        case MySQLParser.UCS2:
        case MySQLParser.UJIS:
        case MySQLParser.UTF16:
        case MySQLParser.UTF16LE:
        case MySQLParser.UTF32:
        case MySQLParser.UTF8:
        case MySQLParser.UTF8MB3:
        case MySQLParser.UTF8MB4:
        case MySQLParser.ARCHIVE:
        case MySQLParser.BLACKHOLE:
        case MySQLParser.CSV:
        case MySQLParser.FEDERATED:
        case MySQLParser.INNODB:
        case MySQLParser.MEMORY:
        case MySQLParser.MRG_MYISAM:
        case MySQLParser.MYISAM:
        case MySQLParser.NDB:
        case MySQLParser.NDBCLUSTER:
        case MySQLParser.PERFORMANCE_SCHEMA:
        case MySQLParser.TOKUDB:
        case MySQLParser.REPEATABLE:
        case MySQLParser.COMMITTED:
        case MySQLParser.UNCOMMITTED:
        case MySQLParser.SERIALIZABLE:
        case MySQLParser.GEOMETRYCOLLECTION:
        case MySQLParser.LINESTRING:
        case MySQLParser.MULTILINESTRING:
        case MySQLParser.MULTIPOINT:
        case MySQLParser.MULTIPOLYGON:
        case MySQLParser.POINT:
        case MySQLParser.POLYGON:
        case MySQLParser.ABS:
        case MySQLParser.ACOS:
        case MySQLParser.ADDDATE:
        case MySQLParser.ADDTIME:
        case MySQLParser.AES_DECRYPT:
        case MySQLParser.AES_ENCRYPT:
        case MySQLParser.AREA:
        case MySQLParser.ASBINARY:
        case MySQLParser.ASIN:
        case MySQLParser.ASTEXT:
        case MySQLParser.ASWKB:
        case MySQLParser.ASWKT:
        case MySQLParser.ASYMMETRIC_DECRYPT:
        case MySQLParser.ASYMMETRIC_DERIVE:
        case MySQLParser.ASYMMETRIC_ENCRYPT:
        case MySQLParser.ASYMMETRIC_SIGN:
        case MySQLParser.ASYMMETRIC_VERIFY:
        case MySQLParser.ATAN:
        case MySQLParser.ATAN2:
        case MySQLParser.BENCHMARK:
        case MySQLParser.BIN:
        case MySQLParser.BIT_COUNT:
        case MySQLParser.BIT_LENGTH:
        case MySQLParser.BUFFER:
        case MySQLParser.CATALOG_NAME:
        case MySQLParser.CEIL:
        case MySQLParser.CEILING:
        case MySQLParser.CENTROID:
        case MySQLParser.CHARACTER_LENGTH:
        case MySQLParser.CHARSET:
        case MySQLParser.CHAR_LENGTH:
        case MySQLParser.COERCIBILITY:
        case MySQLParser.COLLATION:
        case MySQLParser.COMPRESS:
        case MySQLParser.CONCAT:
        case MySQLParser.CONCAT_WS:
        case MySQLParser.CONNECTION_ID:
        case MySQLParser.CONV:
        case MySQLParser.CONVERT_TZ:
        case MySQLParser.COS:
        case MySQLParser.COT:
        case MySQLParser.CRC32:
        case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser.CREATE_DH_PARAMETERS:
        case MySQLParser.CREATE_DIGEST:
        case MySQLParser.CROSSES:
        case MySQLParser.DATEDIFF:
        case MySQLParser.DATE_FORMAT:
        case MySQLParser.DAYNAME:
        case MySQLParser.DAYOFMONTH:
        case MySQLParser.DAYOFWEEK:
        case MySQLParser.DAYOFYEAR:
        case MySQLParser.DECODE:
        case MySQLParser.DEGREES:
        case MySQLParser.DES_DECRYPT:
        case MySQLParser.DES_ENCRYPT:
        case MySQLParser.DIMENSION:
        case MySQLParser.DISJOINT:
        case MySQLParser.ELT:
        case MySQLParser.ENCODE:
        case MySQLParser.ENCRYPT:
        case MySQLParser.ENDPOINT:
        case MySQLParser.ENVELOPE:
        case MySQLParser.EQUALS:
        case MySQLParser.EXP:
        case MySQLParser.EXPORT_SET:
        case MySQLParser.EXTERIORRING:
        case MySQLParser.EXTRACTVALUE:
        case MySQLParser.FIELD:
        case MySQLParser.FIND_IN_SET:
        case MySQLParser.FLOOR:
        case MySQLParser.FORMAT:
        case MySQLParser.FOUND_ROWS:
        case MySQLParser.FROM_BASE64:
        case MySQLParser.FROM_DAYS:
        case MySQLParser.FROM_UNIXTIME:
        case MySQLParser.GEOMCOLLFROMTEXT:
        case MySQLParser.GEOMCOLLFROMWKB:
        case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.GEOMETRYFROMTEXT:
        case MySQLParser.GEOMETRYFROMWKB:
        case MySQLParser.GEOMETRYN:
        case MySQLParser.GEOMETRYTYPE:
        case MySQLParser.GEOMFROMTEXT:
        case MySQLParser.GEOMFROMWKB:
        case MySQLParser.GET_FORMAT:
        case MySQLParser.GET_LOCK:
        case MySQLParser.GLENGTH:
        case MySQLParser.GREATEST:
        case MySQLParser.GTID_SUBSET:
        case MySQLParser.GTID_SUBTRACT:
        case MySQLParser.HEX:
        case MySQLParser.IFNULL:
        case MySQLParser.INET6_ATON:
        case MySQLParser.INET6_NTOA:
        case MySQLParser.INET_ATON:
        case MySQLParser.INET_NTOA:
        case MySQLParser.INSTR:
        case MySQLParser.INTERIORRINGN:
        case MySQLParser.INTERSECTS:
        case MySQLParser.ISCLOSED:
        case MySQLParser.ISEMPTY:
        case MySQLParser.ISNULL:
        case MySQLParser.ISSIMPLE:
        case MySQLParser.IS_FREE_LOCK:
        case MySQLParser.IS_IPV4:
        case MySQLParser.IS_IPV4_COMPAT:
        case MySQLParser.IS_IPV4_MAPPED:
        case MySQLParser.IS_IPV6:
        case MySQLParser.IS_USED_LOCK:
        case MySQLParser.LAST_INSERT_ID:
        case MySQLParser.LCASE:
        case MySQLParser.LEAST:
        case MySQLParser.LENGTH:
        case MySQLParser.LINEFROMTEXT:
        case MySQLParser.LINEFROMWKB:
        case MySQLParser.LINESTRINGFROMTEXT:
        case MySQLParser.LINESTRINGFROMWKB:
        case MySQLParser.LN:
        case MySQLParser.LOAD_FILE:
        case MySQLParser.LOCATE:
        case MySQLParser.LOG:
        case MySQLParser.LOG10:
        case MySQLParser.LOG2:
        case MySQLParser.LOWER:
        case MySQLParser.LPAD:
        case MySQLParser.LTRIM:
        case MySQLParser.MAKEDATE:
        case MySQLParser.MAKETIME:
        case MySQLParser.MAKE_SET:
        case MySQLParser.MASTER_POS_WAIT:
        case MySQLParser.MBRCONTAINS:
        case MySQLParser.MBRDISJOINT:
        case MySQLParser.MBREQUAL:
        case MySQLParser.MBRINTERSECTS:
        case MySQLParser.MBROVERLAPS:
        case MySQLParser.MBRTOUCHES:
        case MySQLParser.MBRWITHIN:
        case MySQLParser.MD5:
        case MySQLParser.MLINEFROMTEXT:
        case MySQLParser.MLINEFROMWKB:
        case MySQLParser.MONTHNAME:
        case MySQLParser.MPOINTFROMTEXT:
        case MySQLParser.MPOINTFROMWKB:
        case MySQLParser.MPOLYFROMTEXT:
        case MySQLParser.MPOLYFROMWKB:
        case MySQLParser.MULTILINESTRINGFROMTEXT:
        case MySQLParser.MULTILINESTRINGFROMWKB:
        case MySQLParser.MULTIPOINTFROMTEXT:
        case MySQLParser.MULTIPOINTFROMWKB:
        case MySQLParser.MULTIPOLYGONFROMTEXT:
        case MySQLParser.MULTIPOLYGONFROMWKB:
        case MySQLParser.NAME_CONST:
        case MySQLParser.NULLIF:
        case MySQLParser.NUMGEOMETRIES:
        case MySQLParser.NUMINTERIORRINGS:
        case MySQLParser.NUMPOINTS:
        case MySQLParser.OCT:
        case MySQLParser.OCTET_LENGTH:
        case MySQLParser.ORD:
        case MySQLParser.OVERLAPS:
        case MySQLParser.PERIOD_ADD:
        case MySQLParser.PERIOD_DIFF:
        case MySQLParser.PI:
        case MySQLParser.POINTFROMTEXT:
        case MySQLParser.POINTFROMWKB:
        case MySQLParser.POINTN:
        case MySQLParser.POLYFROMTEXT:
        case MySQLParser.POLYFROMWKB:
        case MySQLParser.POLYGONFROMTEXT:
        case MySQLParser.POLYGONFROMWKB:
        case MySQLParser.POW:
        case MySQLParser.POWER:
        case MySQLParser.QUOTE:
        case MySQLParser.RADIANS:
        case MySQLParser.RAND:
        case MySQLParser.RANDOM_BYTES:
        case MySQLParser.RELEASE_LOCK:
        case MySQLParser.REVERSE:
        case MySQLParser.ROUND:
        case MySQLParser.ROW_COUNT:
        case MySQLParser.RPAD:
        case MySQLParser.RTRIM:
        case MySQLParser.SEC_TO_TIME:
        case MySQLParser.SESSION_USER:
        case MySQLParser.SHA:
        case MySQLParser.SHA1:
        case MySQLParser.SHA2:
        case MySQLParser.SCHEMA_NAME:
        case MySQLParser.SIGN:
        case MySQLParser.SIN:
        case MySQLParser.SLEEP:
        case MySQLParser.SOUNDEX:
        case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser.SQRT:
        case MySQLParser.SRID:
        case MySQLParser.STARTPOINT:
        case MySQLParser.STRCMP:
        case MySQLParser.STR_TO_DATE:
        case MySQLParser.ST_AREA:
        case MySQLParser.ST_ASBINARY:
        case MySQLParser.ST_ASTEXT:
        case MySQLParser.ST_ASWKB:
        case MySQLParser.ST_ASWKT:
        case MySQLParser.ST_BUFFER:
        case MySQLParser.ST_CENTROID:
        case MySQLParser.ST_CONTAINS:
        case MySQLParser.ST_CROSSES:
        case MySQLParser.ST_DIFFERENCE:
        case MySQLParser.ST_DIMENSION:
        case MySQLParser.ST_DISJOINT:
        case MySQLParser.ST_DISTANCE:
        case MySQLParser.ST_ENDPOINT:
        case MySQLParser.ST_ENVELOPE:
        case MySQLParser.ST_EQUALS:
        case MySQLParser.ST_EXTERIORRING:
        case MySQLParser.ST_GEOMCOLLFROMTEXT:
        case MySQLParser.ST_GEOMCOLLFROMTXT:
        case MySQLParser.ST_GEOMCOLLFROMWKB:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.ST_GEOMETRYFROMTEXT:
        case MySQLParser.ST_GEOMETRYFROMWKB:
        case MySQLParser.ST_GEOMETRYN:
        case MySQLParser.ST_GEOMETRYTYPE:
        case MySQLParser.ST_GEOMFROMTEXT:
        case MySQLParser.ST_GEOMFROMWKB:
        case MySQLParser.ST_INTERIORRINGN:
        case MySQLParser.ST_INTERSECTION:
        case MySQLParser.ST_INTERSECTS:
        case MySQLParser.ST_ISCLOSED:
        case MySQLParser.ST_ISEMPTY:
        case MySQLParser.ST_ISSIMPLE:
        case MySQLParser.ST_LINEFROMTEXT:
        case MySQLParser.ST_LINEFROMWKB:
        case MySQLParser.ST_LINESTRINGFROMTEXT:
        case MySQLParser.ST_LINESTRINGFROMWKB:
        case MySQLParser.ST_NUMGEOMETRIES:
        case MySQLParser.ST_NUMINTERIORRING:
        case MySQLParser.ST_NUMINTERIORRINGS:
        case MySQLParser.ST_NUMPOINTS:
        case MySQLParser.ST_OVERLAPS:
        case MySQLParser.ST_POINTFROMTEXT:
        case MySQLParser.ST_POINTFROMWKB:
        case MySQLParser.ST_POINTN:
        case MySQLParser.ST_POLYFROMTEXT:
        case MySQLParser.ST_POLYFROMWKB:
        case MySQLParser.ST_POLYGONFROMTEXT:
        case MySQLParser.ST_POLYGONFROMWKB:
        case MySQLParser.ST_SRID:
        case MySQLParser.ST_STARTPOINT:
        case MySQLParser.ST_SYMDIFFERENCE:
        case MySQLParser.ST_TOUCHES:
        case MySQLParser.ST_UNION:
        case MySQLParser.ST_WITHIN:
        case MySQLParser.ST_X:
        case MySQLParser.ST_Y:
        case MySQLParser.SUBDATE:
        case MySQLParser.SUBSTRING_INDEX:
        case MySQLParser.SUBTIME:
        case MySQLParser.SYSTEM_USER:
        case MySQLParser.TAN:
        case MySQLParser.TIMEDIFF:
        case MySQLParser.TIMESTAMPADD:
        case MySQLParser.TIMESTAMPDIFF:
        case MySQLParser.TIME_FORMAT:
        case MySQLParser.TIME_TO_SEC:
        case MySQLParser.TOUCHES:
        case MySQLParser.TO_BASE64:
        case MySQLParser.TO_DAYS:
        case MySQLParser.TO_SECONDS:
        case MySQLParser.UCASE:
        case MySQLParser.UNCOMPRESS:
        case MySQLParser.UNCOMPRESSED_LENGTH:
        case MySQLParser.UNHEX:
        case MySQLParser.UNIX_TIMESTAMP:
        case MySQLParser.UPDATEXML:
        case MySQLParser.UPPER:
        case MySQLParser.UUID:
        case MySQLParser.UUID_SHORT:
        case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser.VERSION:
        case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser.WEEKDAY:
        case MySQLParser.WEEKOFYEAR:
        case MySQLParser.WEIGHT_STRING:
        case MySQLParser.WITHIN:
        case MySQLParser.YEARWEEK:
        case MySQLParser.Y_FUNCTION:
        case MySQLParser.X_FUNCTION:
        case MySQLParser.AT_SIGN:
        case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser.STRING_LITERAL:
        case MySQLParser.ID:
        case MySQLParser.REVERSE_QUOTE_ID:
            this.enterOuterAlt(localctx, 3);
            this.state = 5078;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,729,this._ctx);
            if(la_===1) {
                this.state = 5075;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.AT_SIGN) {
                    this.state = 5073;
                    this.match(MySQLParser.AT_SIGN);
                    this.state = 5074;
                    this.match(MySQLParser.AT_SIGN);
                }

                this.state = 5077;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.GLOBAL || _la===MySQLParser.LOCAL || _la===MySQLParser.SESSION)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 5080;
            this.uid();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ShowCommonEntityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_showCommonEntity;
    return this;
}

ShowCommonEntityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowCommonEntityContext.prototype.constructor = ShowCommonEntityContext;

ShowCommonEntityContext.prototype.CHARACTER = function() {
    return this.getToken(MySQLParser.CHARACTER, 0);
};

ShowCommonEntityContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

ShowCommonEntityContext.prototype.COLLATION = function() {
    return this.getToken(MySQLParser.COLLATION, 0);
};

ShowCommonEntityContext.prototype.DATABASES = function() {
    return this.getToken(MySQLParser.DATABASES, 0);
};

ShowCommonEntityContext.prototype.SCHEMAS = function() {
    return this.getToken(MySQLParser.SCHEMAS, 0);
};

ShowCommonEntityContext.prototype.FUNCTION = function() {
    return this.getToken(MySQLParser.FUNCTION, 0);
};

ShowCommonEntityContext.prototype.STATUS = function() {
    return this.getToken(MySQLParser.STATUS, 0);
};

ShowCommonEntityContext.prototype.PROCEDURE = function() {
    return this.getToken(MySQLParser.PROCEDURE, 0);
};

ShowCommonEntityContext.prototype.VARIABLES = function() {
    return this.getToken(MySQLParser.VARIABLES, 0);
};

ShowCommonEntityContext.prototype.GLOBAL = function() {
    return this.getToken(MySQLParser.GLOBAL, 0);
};

ShowCommonEntityContext.prototype.SESSION = function() {
    return this.getToken(MySQLParser.SESSION, 0);
};

ShowCommonEntityContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowCommonEntity(this);
	}
};

ShowCommonEntityContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowCommonEntity(this);
	}
};

ShowCommonEntityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowCommonEntity(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ShowCommonEntityContext = ShowCommonEntityContext;

MySQLParser.prototype.showCommonEntity = function() {

    var localctx = new ShowCommonEntityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, MySQLParser.RULE_showCommonEntity);
    var _la = 0; // Token type
    try {
        this.state = 5096;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CHARACTER:
            this.enterOuterAlt(localctx, 1);
            this.state = 5083;
            this.match(MySQLParser.CHARACTER);
            this.state = 5084;
            this.match(MySQLParser.SET);
            break;
        case MySQLParser.COLLATION:
            this.enterOuterAlt(localctx, 2);
            this.state = 5085;
            this.match(MySQLParser.COLLATION);
            break;
        case MySQLParser.DATABASES:
            this.enterOuterAlt(localctx, 3);
            this.state = 5086;
            this.match(MySQLParser.DATABASES);
            break;
        case MySQLParser.SCHEMAS:
            this.enterOuterAlt(localctx, 4);
            this.state = 5087;
            this.match(MySQLParser.SCHEMAS);
            break;
        case MySQLParser.FUNCTION:
            this.enterOuterAlt(localctx, 5);
            this.state = 5088;
            this.match(MySQLParser.FUNCTION);
            this.state = 5089;
            this.match(MySQLParser.STATUS);
            break;
        case MySQLParser.PROCEDURE:
            this.enterOuterAlt(localctx, 6);
            this.state = 5090;
            this.match(MySQLParser.PROCEDURE);
            this.state = 5091;
            this.match(MySQLParser.STATUS);
            break;
        case MySQLParser.GLOBAL:
        case MySQLParser.SESSION:
        case MySQLParser.STATUS:
        case MySQLParser.VARIABLES:
            this.enterOuterAlt(localctx, 7);
            this.state = 5093;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.GLOBAL || _la===MySQLParser.SESSION) {
                this.state = 5092;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.GLOBAL || _la===MySQLParser.SESSION)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 5095;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.STATUS || _la===MySQLParser.VARIABLES)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ShowFilterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_showFilter;
    return this;
}

ShowFilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowFilterContext.prototype.constructor = ShowFilterContext;

ShowFilterContext.prototype.LIKE = function() {
    return this.getToken(MySQLParser.LIKE, 0);
};

ShowFilterContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

ShowFilterContext.prototype.WHERE = function() {
    return this.getToken(MySQLParser.WHERE, 0);
};

ShowFilterContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ShowFilterContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowFilter(this);
	}
};

ShowFilterContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowFilter(this);
	}
};

ShowFilterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowFilter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ShowFilterContext = ShowFilterContext;

MySQLParser.prototype.showFilter = function() {

    var localctx = new ShowFilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, MySQLParser.RULE_showFilter);
    try {
        this.state = 5102;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.LIKE:
            this.enterOuterAlt(localctx, 1);
            this.state = 5098;
            this.match(MySQLParser.LIKE);
            this.state = 5099;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.WHERE:
            this.enterOuterAlt(localctx, 2);
            this.state = 5100;
            this.match(MySQLParser.WHERE);
            this.state = 5101;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ShowGlobalInfoClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_showGlobalInfoClause;
    return this;
}

ShowGlobalInfoClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowGlobalInfoClauseContext.prototype.constructor = ShowGlobalInfoClauseContext;

ShowGlobalInfoClauseContext.prototype.ENGINES = function() {
    return this.getToken(MySQLParser.ENGINES, 0);
};

ShowGlobalInfoClauseContext.prototype.STORAGE = function() {
    return this.getToken(MySQLParser.STORAGE, 0);
};

ShowGlobalInfoClauseContext.prototype.MASTER = function() {
    return this.getToken(MySQLParser.MASTER, 0);
};

ShowGlobalInfoClauseContext.prototype.STATUS = function() {
    return this.getToken(MySQLParser.STATUS, 0);
};

ShowGlobalInfoClauseContext.prototype.PLUGINS = function() {
    return this.getToken(MySQLParser.PLUGINS, 0);
};

ShowGlobalInfoClauseContext.prototype.PRIVILEGES = function() {
    return this.getToken(MySQLParser.PRIVILEGES, 0);
};

ShowGlobalInfoClauseContext.prototype.PROCESSLIST = function() {
    return this.getToken(MySQLParser.PROCESSLIST, 0);
};

ShowGlobalInfoClauseContext.prototype.FULL = function() {
    return this.getToken(MySQLParser.FULL, 0);
};

ShowGlobalInfoClauseContext.prototype.PROFILES = function() {
    return this.getToken(MySQLParser.PROFILES, 0);
};

ShowGlobalInfoClauseContext.prototype.SLAVE = function() {
    return this.getToken(MySQLParser.SLAVE, 0);
};

ShowGlobalInfoClauseContext.prototype.HOSTS = function() {
    return this.getToken(MySQLParser.HOSTS, 0);
};

ShowGlobalInfoClauseContext.prototype.AUTHORS = function() {
    return this.getToken(MySQLParser.AUTHORS, 0);
};

ShowGlobalInfoClauseContext.prototype.CONTRIBUTORS = function() {
    return this.getToken(MySQLParser.CONTRIBUTORS, 0);
};

ShowGlobalInfoClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowGlobalInfoClause(this);
	}
};

ShowGlobalInfoClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowGlobalInfoClause(this);
	}
};

ShowGlobalInfoClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowGlobalInfoClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ShowGlobalInfoClauseContext = ShowGlobalInfoClauseContext;

MySQLParser.prototype.showGlobalInfoClause = function() {

    var localctx = new ShowGlobalInfoClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, MySQLParser.RULE_showGlobalInfoClause);
    var _la = 0; // Token type
    try {
        this.state = 5121;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ENGINES:
        case MySQLParser.STORAGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 5105;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.STORAGE) {
                this.state = 5104;
                this.match(MySQLParser.STORAGE);
            }

            this.state = 5107;
            this.match(MySQLParser.ENGINES);
            break;
        case MySQLParser.MASTER:
            this.enterOuterAlt(localctx, 2);
            this.state = 5108;
            this.match(MySQLParser.MASTER);
            this.state = 5109;
            this.match(MySQLParser.STATUS);
            break;
        case MySQLParser.PLUGINS:
            this.enterOuterAlt(localctx, 3);
            this.state = 5110;
            this.match(MySQLParser.PLUGINS);
            break;
        case MySQLParser.PRIVILEGES:
            this.enterOuterAlt(localctx, 4);
            this.state = 5111;
            this.match(MySQLParser.PRIVILEGES);
            break;
        case MySQLParser.FULL:
        case MySQLParser.PROCESSLIST:
            this.enterOuterAlt(localctx, 5);
            this.state = 5113;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FULL) {
                this.state = 5112;
                this.match(MySQLParser.FULL);
            }

            this.state = 5115;
            this.match(MySQLParser.PROCESSLIST);
            break;
        case MySQLParser.PROFILES:
            this.enterOuterAlt(localctx, 6);
            this.state = 5116;
            this.match(MySQLParser.PROFILES);
            break;
        case MySQLParser.SLAVE:
            this.enterOuterAlt(localctx, 7);
            this.state = 5117;
            this.match(MySQLParser.SLAVE);
            this.state = 5118;
            this.match(MySQLParser.HOSTS);
            break;
        case MySQLParser.AUTHORS:
            this.enterOuterAlt(localctx, 8);
            this.state = 5119;
            this.match(MySQLParser.AUTHORS);
            break;
        case MySQLParser.CONTRIBUTORS:
            this.enterOuterAlt(localctx, 9);
            this.state = 5120;
            this.match(MySQLParser.CONTRIBUTORS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ShowSchemaEntityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_showSchemaEntity;
    return this;
}

ShowSchemaEntityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowSchemaEntityContext.prototype.constructor = ShowSchemaEntityContext;

ShowSchemaEntityContext.prototype.EVENTS = function() {
    return this.getToken(MySQLParser.EVENTS, 0);
};

ShowSchemaEntityContext.prototype.TABLE = function() {
    return this.getToken(MySQLParser.TABLE, 0);
};

ShowSchemaEntityContext.prototype.STATUS = function() {
    return this.getToken(MySQLParser.STATUS, 0);
};

ShowSchemaEntityContext.prototype.TABLES = function() {
    return this.getToken(MySQLParser.TABLES, 0);
};

ShowSchemaEntityContext.prototype.FULL = function() {
    return this.getToken(MySQLParser.FULL, 0);
};

ShowSchemaEntityContext.prototype.TRIGGERS = function() {
    return this.getToken(MySQLParser.TRIGGERS, 0);
};

ShowSchemaEntityContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowSchemaEntity(this);
	}
};

ShowSchemaEntityContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowSchemaEntity(this);
	}
};

ShowSchemaEntityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowSchemaEntity(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ShowSchemaEntityContext = ShowSchemaEntityContext;

MySQLParser.prototype.showSchemaEntity = function() {

    var localctx = new ShowSchemaEntityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, MySQLParser.RULE_showSchemaEntity);
    var _la = 0; // Token type
    try {
        this.state = 5131;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.EVENTS:
            this.enterOuterAlt(localctx, 1);
            this.state = 5123;
            this.match(MySQLParser.EVENTS);
            break;
        case MySQLParser.TABLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 5124;
            this.match(MySQLParser.TABLE);
            this.state = 5125;
            this.match(MySQLParser.STATUS);
            break;
        case MySQLParser.FULL:
        case MySQLParser.TABLES:
            this.enterOuterAlt(localctx, 3);
            this.state = 5127;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FULL) {
                this.state = 5126;
                this.match(MySQLParser.FULL);
            }

            this.state = 5129;
            this.match(MySQLParser.TABLES);
            break;
        case MySQLParser.TRIGGERS:
            this.enterOuterAlt(localctx, 4);
            this.state = 5130;
            this.match(MySQLParser.TRIGGERS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ShowProfileTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_showProfileType;
    return this;
}

ShowProfileTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowProfileTypeContext.prototype.constructor = ShowProfileTypeContext;

ShowProfileTypeContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};

ShowProfileTypeContext.prototype.BLOCK = function() {
    return this.getToken(MySQLParser.BLOCK, 0);
};

ShowProfileTypeContext.prototype.IO = function() {
    return this.getToken(MySQLParser.IO, 0);
};

ShowProfileTypeContext.prototype.CONTEXT = function() {
    return this.getToken(MySQLParser.CONTEXT, 0);
};

ShowProfileTypeContext.prototype.SWITCHES = function() {
    return this.getToken(MySQLParser.SWITCHES, 0);
};

ShowProfileTypeContext.prototype.CPU = function() {
    return this.getToken(MySQLParser.CPU, 0);
};

ShowProfileTypeContext.prototype.IPC = function() {
    return this.getToken(MySQLParser.IPC, 0);
};

ShowProfileTypeContext.prototype.MEMORY = function() {
    return this.getToken(MySQLParser.MEMORY, 0);
};

ShowProfileTypeContext.prototype.PAGE = function() {
    return this.getToken(MySQLParser.PAGE, 0);
};

ShowProfileTypeContext.prototype.FAULTS = function() {
    return this.getToken(MySQLParser.FAULTS, 0);
};

ShowProfileTypeContext.prototype.SOURCE = function() {
    return this.getToken(MySQLParser.SOURCE, 0);
};

ShowProfileTypeContext.prototype.SWAPS = function() {
    return this.getToken(MySQLParser.SWAPS, 0);
};

ShowProfileTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShowProfileType(this);
	}
};

ShowProfileTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShowProfileType(this);
	}
};

ShowProfileTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShowProfileType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ShowProfileTypeContext = ShowProfileTypeContext;

MySQLParser.prototype.showProfileType = function() {

    var localctx = new ShowProfileTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, MySQLParser.RULE_showProfileType);
    try {
        this.state = 5145;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.ALL:
            this.enterOuterAlt(localctx, 1);
            this.state = 5133;
            this.match(MySQLParser.ALL);
            break;
        case MySQLParser.BLOCK:
            this.enterOuterAlt(localctx, 2);
            this.state = 5134;
            this.match(MySQLParser.BLOCK);
            this.state = 5135;
            this.match(MySQLParser.IO);
            break;
        case MySQLParser.CONTEXT:
            this.enterOuterAlt(localctx, 3);
            this.state = 5136;
            this.match(MySQLParser.CONTEXT);
            this.state = 5137;
            this.match(MySQLParser.SWITCHES);
            break;
        case MySQLParser.CPU:
            this.enterOuterAlt(localctx, 4);
            this.state = 5138;
            this.match(MySQLParser.CPU);
            break;
        case MySQLParser.IPC:
            this.enterOuterAlt(localctx, 5);
            this.state = 5139;
            this.match(MySQLParser.IPC);
            break;
        case MySQLParser.MEMORY:
            this.enterOuterAlt(localctx, 6);
            this.state = 5140;
            this.match(MySQLParser.MEMORY);
            break;
        case MySQLParser.PAGE:
            this.enterOuterAlt(localctx, 7);
            this.state = 5141;
            this.match(MySQLParser.PAGE);
            this.state = 5142;
            this.match(MySQLParser.FAULTS);
            break;
        case MySQLParser.SOURCE:
            this.enterOuterAlt(localctx, 8);
            this.state = 5143;
            this.match(MySQLParser.SOURCE);
            break;
        case MySQLParser.SWAPS:
            this.enterOuterAlt(localctx, 9);
            this.state = 5144;
            this.match(MySQLParser.SWAPS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BinlogStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_binlogStatement;
    return this;
}

BinlogStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinlogStatementContext.prototype.constructor = BinlogStatementContext;

BinlogStatementContext.prototype.BINLOG = function() {
    return this.getToken(MySQLParser.BINLOG, 0);
};

BinlogStatementContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

BinlogStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterBinlogStatement(this);
	}
};

BinlogStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitBinlogStatement(this);
	}
};

BinlogStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitBinlogStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.BinlogStatementContext = BinlogStatementContext;

MySQLParser.prototype.binlogStatement = function() {

    var localctx = new BinlogStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, MySQLParser.RULE_binlogStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5147;
        this.match(MySQLParser.BINLOG);
        this.state = 5148;
        this.match(MySQLParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CacheIndexStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_cacheIndexStatement;
    this.schema = null; // UidContext
    return this;
}

CacheIndexStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CacheIndexStatementContext.prototype.constructor = CacheIndexStatementContext;

CacheIndexStatementContext.prototype.CACHE = function() {
    return this.getToken(MySQLParser.CACHE, 0);
};

CacheIndexStatementContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

CacheIndexStatementContext.prototype.tableIndexes = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableIndexesContext);
    } else {
        return this.getTypedRuleContext(TableIndexesContext,i);
    }
};

CacheIndexStatementContext.prototype.IN = function() {
    return this.getToken(MySQLParser.IN, 0);
};

CacheIndexStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CacheIndexStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


CacheIndexStatementContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

CacheIndexStatementContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

CacheIndexStatementContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

CacheIndexStatementContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

CacheIndexStatementContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};

CacheIndexStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCacheIndexStatement(this);
	}
};

CacheIndexStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCacheIndexStatement(this);
	}
};

CacheIndexStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCacheIndexStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CacheIndexStatementContext = CacheIndexStatementContext;

MySQLParser.prototype.cacheIndexStatement = function() {

    var localctx = new CacheIndexStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, MySQLParser.RULE_cacheIndexStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5150;
        this.match(MySQLParser.CACHE);
        this.state = 5151;
        this.match(MySQLParser.INDEX);
        this.state = 5152;
        this.tableIndexes();
        this.state = 5157;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 5153;
            this.match(MySQLParser.COMMA);
            this.state = 5154;
            this.tableIndexes();
            this.state = 5159;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5167;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.PARTITION) {
            this.state = 5160;
            this.match(MySQLParser.PARTITION);
            this.state = 5161;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5164;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.CURRENT:
            case MySQLParser.DATABASE:
            case MySQLParser.DIAGNOSTICS:
            case MySQLParser.LEFT:
            case MySQLParser.NUMBER:
            case MySQLParser.RIGHT:
            case MySQLParser.STACKED:
            case MySQLParser.DATE:
            case MySQLParser.TIME:
            case MySQLParser.TIMESTAMP:
            case MySQLParser.DATETIME:
            case MySQLParser.YEAR:
            case MySQLParser.TEXT:
            case MySQLParser.ENUM:
            case MySQLParser.SERIAL:
            case MySQLParser.JSON_VALID:
            case MySQLParser.JSON_SCHEMA_VALID:
            case MySQLParser.COUNT:
            case MySQLParser.POSITION:
            case MySQLParser.ACCOUNT:
            case MySQLParser.ACTION:
            case MySQLParser.AFTER:
            case MySQLParser.AGGREGATE:
            case MySQLParser.ALGORITHM:
            case MySQLParser.ANY:
            case MySQLParser.AT:
            case MySQLParser.AUTHORS:
            case MySQLParser.AUTOCOMMIT:
            case MySQLParser.AUTOEXTEND_SIZE:
            case MySQLParser.AUTO_INCREMENT:
            case MySQLParser.AVG_ROW_LENGTH:
            case MySQLParser.BEGIN:
            case MySQLParser.BINLOG:
            case MySQLParser.BIT:
            case MySQLParser.BLOCK:
            case MySQLParser.BOOL:
            case MySQLParser.BOOLEAN:
            case MySQLParser.BTREE:
            case MySQLParser.CACHE:
            case MySQLParser.CASCADED:
            case MySQLParser.CHAIN:
            case MySQLParser.CHANGED:
            case MySQLParser.CHANNEL:
            case MySQLParser.CHECKSUM:
            case MySQLParser.PAGE_CHECKSUM:
            case MySQLParser.CIPHER:
            case MySQLParser.CLASS_ORIGIN:
            case MySQLParser.CLIENT:
            case MySQLParser.CLOSE:
            case MySQLParser.COALESCE:
            case MySQLParser.CODE:
            case MySQLParser.COLUMNS:
            case MySQLParser.COLUMN_FORMAT:
            case MySQLParser.COLUMN_NAME:
            case MySQLParser.COMMENT:
            case MySQLParser.COMMIT:
            case MySQLParser.COMPACT:
            case MySQLParser.COMPLETION:
            case MySQLParser.COMPRESSED:
            case MySQLParser.COMPRESSION:
            case MySQLParser.CONCURRENT:
            case MySQLParser.CONNECTION:
            case MySQLParser.CONSISTENT:
            case MySQLParser.CONSTRAINT_CATALOG:
            case MySQLParser.CONSTRAINT_SCHEMA:
            case MySQLParser.CONSTRAINT_NAME:
            case MySQLParser.CONTAINS:
            case MySQLParser.CONTEXT:
            case MySQLParser.CONTRIBUTORS:
            case MySQLParser.COPY:
            case MySQLParser.CPU:
            case MySQLParser.CURSOR_NAME:
            case MySQLParser.DATA:
            case MySQLParser.DATAFILE:
            case MySQLParser.DEALLOCATE:
            case MySQLParser.DEFAULT_AUTH:
            case MySQLParser.DEFINER:
            case MySQLParser.DELAY_KEY_WRITE:
            case MySQLParser.DES_KEY_FILE:
            case MySQLParser.DIRECTORY:
            case MySQLParser.DISABLE:
            case MySQLParser.DISCARD:
            case MySQLParser.DISK:
            case MySQLParser.DO:
            case MySQLParser.DUMPFILE:
            case MySQLParser.DUPLICATE:
            case MySQLParser.DYNAMIC:
            case MySQLParser.ENABLE:
            case MySQLParser.ENCRYPTION:
            case MySQLParser.END:
            case MySQLParser.ENDS:
            case MySQLParser.ENGINE:
            case MySQLParser.ENGINES:
            case MySQLParser.ERROR:
            case MySQLParser.ERRORS:
            case MySQLParser.ESCAPE:
            case MySQLParser.EVEN:
            case MySQLParser.EVENT:
            case MySQLParser.EVENTS:
            case MySQLParser.EVERY:
            case MySQLParser.EXCHANGE:
            case MySQLParser.EXCLUSIVE:
            case MySQLParser.EXPIRE:
            case MySQLParser.EXPORT:
            case MySQLParser.EXTENDED:
            case MySQLParser.EXTENT_SIZE:
            case MySQLParser.FAST:
            case MySQLParser.FAULTS:
            case MySQLParser.FIELDS:
            case MySQLParser.FILE_BLOCK_SIZE:
            case MySQLParser.FILTER:
            case MySQLParser.FIRST:
            case MySQLParser.FIXED:
            case MySQLParser.FLUSH:
            case MySQLParser.FOLLOWS:
            case MySQLParser.FOUND:
            case MySQLParser.FULL:
            case MySQLParser.FUNCTION:
            case MySQLParser.GENERAL:
            case MySQLParser.GLOBAL:
            case MySQLParser.GRANTS:
            case MySQLParser.GROUP_REPLICATION:
            case MySQLParser.HANDLER:
            case MySQLParser.HASH:
            case MySQLParser.HELP:
            case MySQLParser.HOST:
            case MySQLParser.HOSTS:
            case MySQLParser.IDENTIFIED:
            case MySQLParser.IGNORE_SERVER_IDS:
            case MySQLParser.IMPORT:
            case MySQLParser.INDEXES:
            case MySQLParser.INITIAL_SIZE:
            case MySQLParser.INPLACE:
            case MySQLParser.INSERT_METHOD:
            case MySQLParser.INSTALL:
            case MySQLParser.INSTANCE:
            case MySQLParser.INVISIBLE:
            case MySQLParser.INVOKER:
            case MySQLParser.IO:
            case MySQLParser.IO_THREAD:
            case MySQLParser.IPC:
            case MySQLParser.ISOLATION:
            case MySQLParser.ISSUER:
            case MySQLParser.JSON:
            case MySQLParser.KEY_BLOCK_SIZE:
            case MySQLParser.LANGUAGE:
            case MySQLParser.LAST:
            case MySQLParser.LEAVES:
            case MySQLParser.LESS:
            case MySQLParser.LEVEL:
            case MySQLParser.LIST:
            case MySQLParser.LOCAL:
            case MySQLParser.LOGFILE:
            case MySQLParser.LOGS:
            case MySQLParser.MASTER:
            case MySQLParser.MASTER_AUTO_POSITION:
            case MySQLParser.MASTER_CONNECT_RETRY:
            case MySQLParser.MASTER_DELAY:
            case MySQLParser.MASTER_HEARTBEAT_PERIOD:
            case MySQLParser.MASTER_HOST:
            case MySQLParser.MASTER_LOG_FILE:
            case MySQLParser.MASTER_LOG_POS:
            case MySQLParser.MASTER_PASSWORD:
            case MySQLParser.MASTER_PORT:
            case MySQLParser.MASTER_RETRY_COUNT:
            case MySQLParser.MASTER_SSL:
            case MySQLParser.MASTER_SSL_CA:
            case MySQLParser.MASTER_SSL_CAPATH:
            case MySQLParser.MASTER_SSL_CERT:
            case MySQLParser.MASTER_SSL_CIPHER:
            case MySQLParser.MASTER_SSL_CRL:
            case MySQLParser.MASTER_SSL_CRLPATH:
            case MySQLParser.MASTER_SSL_KEY:
            case MySQLParser.MASTER_TLS_VERSION:
            case MySQLParser.MASTER_USER:
            case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
            case MySQLParser.MAX_QUERIES_PER_HOUR:
            case MySQLParser.MAX_ROWS:
            case MySQLParser.MAX_SIZE:
            case MySQLParser.MAX_UPDATES_PER_HOUR:
            case MySQLParser.MAX_USER_CONNECTIONS:
            case MySQLParser.MEDIUM:
            case MySQLParser.MERGE:
            case MySQLParser.MESSAGE_TEXT:
            case MySQLParser.MID:
            case MySQLParser.MIGRATE:
            case MySQLParser.MIN_ROWS:
            case MySQLParser.MODE:
            case MySQLParser.MODIFY:
            case MySQLParser.MUTEX:
            case MySQLParser.MYSQL:
            case MySQLParser.MYSQL_ERRNO:
            case MySQLParser.NAME:
            case MySQLParser.NAMES:
            case MySQLParser.NCHAR:
            case MySQLParser.NEVER:
            case MySQLParser.NEXT:
            case MySQLParser.NO:
            case MySQLParser.NODEGROUP:
            case MySQLParser.NONE:
            case MySQLParser.OFFLINE:
            case MySQLParser.OFFSET:
            case MySQLParser.OJ:
            case MySQLParser.OLD_PASSWORD:
            case MySQLParser.ONE:
            case MySQLParser.ONLINE:
            case MySQLParser.ONLY:
            case MySQLParser.OPEN:
            case MySQLParser.OPTIMIZER_COSTS:
            case MySQLParser.OPTIONS:
            case MySQLParser.OWNER:
            case MySQLParser.PACK_KEYS:
            case MySQLParser.PAGE:
            case MySQLParser.PARSER:
            case MySQLParser.PARTIAL:
            case MySQLParser.PARTITIONING:
            case MySQLParser.PARTITIONS:
            case MySQLParser.PASSWORD:
            case MySQLParser.PHASE:
            case MySQLParser.PLUGIN:
            case MySQLParser.PLUGIN_DIR:
            case MySQLParser.PLUGINS:
            case MySQLParser.PORT:
            case MySQLParser.PRECEDES:
            case MySQLParser.PREPARE:
            case MySQLParser.PRESERVE:
            case MySQLParser.PREV:
            case MySQLParser.PROCESSLIST:
            case MySQLParser.PROFILE:
            case MySQLParser.PROFILES:
            case MySQLParser.PROXY:
            case MySQLParser.QUERY:
            case MySQLParser.QUICK:
            case MySQLParser.REBUILD:
            case MySQLParser.RECOVER:
            case MySQLParser.REDO_BUFFER_SIZE:
            case MySQLParser.REDUNDANT:
            case MySQLParser.RELAY:
            case MySQLParser.RELAY_LOG_FILE:
            case MySQLParser.RELAY_LOG_POS:
            case MySQLParser.RELAYLOG:
            case MySQLParser.REMOVE:
            case MySQLParser.REORGANIZE:
            case MySQLParser.REPAIR:
            case MySQLParser.REPLICATE_DO_DB:
            case MySQLParser.REPLICATE_DO_TABLE:
            case MySQLParser.REPLICATE_IGNORE_DB:
            case MySQLParser.REPLICATE_IGNORE_TABLE:
            case MySQLParser.REPLICATE_REWRITE_DB:
            case MySQLParser.REPLICATE_WILD_DO_TABLE:
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySQLParser.REPLICATION:
            case MySQLParser.RESET:
            case MySQLParser.RESUME:
            case MySQLParser.RETURNED_SQLSTATE:
            case MySQLParser.RETURNS:
            case MySQLParser.ROLE:
            case MySQLParser.ROLLBACK:
            case MySQLParser.ROLLUP:
            case MySQLParser.ROTATE:
            case MySQLParser.ROW:
            case MySQLParser.ROWS:
            case MySQLParser.ROW_FORMAT:
            case MySQLParser.SAVEPOINT:
            case MySQLParser.SCHEDULE:
            case MySQLParser.SECURITY:
            case MySQLParser.SERVER:
            case MySQLParser.SESSION:
            case MySQLParser.SHARE:
            case MySQLParser.SHARED:
            case MySQLParser.SIGNED:
            case MySQLParser.SIMPLE:
            case MySQLParser.SLAVE:
            case MySQLParser.SLOW:
            case MySQLParser.SNAPSHOT:
            case MySQLParser.SOCKET:
            case MySQLParser.SOME:
            case MySQLParser.SONAME:
            case MySQLParser.SOUNDS:
            case MySQLParser.SOURCE:
            case MySQLParser.SQL_AFTER_GTIDS:
            case MySQLParser.SQL_AFTER_MTS_GAPS:
            case MySQLParser.SQL_BEFORE_GTIDS:
            case MySQLParser.SQL_BUFFER_RESULT:
            case MySQLParser.SQL_CACHE:
            case MySQLParser.SQL_NO_CACHE:
            case MySQLParser.SQL_THREAD:
            case MySQLParser.START:
            case MySQLParser.STARTS:
            case MySQLParser.STATS_AUTO_RECALC:
            case MySQLParser.STATS_PERSISTENT:
            case MySQLParser.STATS_SAMPLE_PAGES:
            case MySQLParser.STATUS:
            case MySQLParser.STOP:
            case MySQLParser.STORAGE:
            case MySQLParser.STRING:
            case MySQLParser.SUBCLASS_ORIGIN:
            case MySQLParser.SUBJECT:
            case MySQLParser.SUBPARTITION:
            case MySQLParser.SUBPARTITIONS:
            case MySQLParser.SUSPEND:
            case MySQLParser.SWAPS:
            case MySQLParser.SWITCHES:
            case MySQLParser.TABLE_NAME:
            case MySQLParser.TABLESPACE:
            case MySQLParser.TEMPORARY:
            case MySQLParser.TEMPTABLE:
            case MySQLParser.THAN:
            case MySQLParser.TRADITIONAL:
            case MySQLParser.TRANSACTION:
            case MySQLParser.TRANSACTIONAL:
            case MySQLParser.TRIGGERS:
            case MySQLParser.TRUNCATE:
            case MySQLParser.UNDEFINED:
            case MySQLParser.UNDOFILE:
            case MySQLParser.UNDO_BUFFER_SIZE:
            case MySQLParser.UNINSTALL:
            case MySQLParser.UNKNOWN:
            case MySQLParser.UNTIL:
            case MySQLParser.UPGRADE:
            case MySQLParser.USER:
            case MySQLParser.USE_FRM:
            case MySQLParser.USER_RESOURCES:
            case MySQLParser.VALIDATION:
            case MySQLParser.VALUE:
            case MySQLParser.VARIABLES:
            case MySQLParser.VIEW:
            case MySQLParser.VISIBLE:
            case MySQLParser.WAIT:
            case MySQLParser.WARNINGS:
            case MySQLParser.WITHOUT:
            case MySQLParser.WORK:
            case MySQLParser.WRAPPER:
            case MySQLParser.X509:
            case MySQLParser.XA:
            case MySQLParser.XML:
            case MySQLParser.INTERNAL:
            case MySQLParser.QUARTER:
            case MySQLParser.MONTH:
            case MySQLParser.DAY:
            case MySQLParser.HOUR:
            case MySQLParser.MINUTE:
            case MySQLParser.WEEK:
            case MySQLParser.SECOND:
            case MySQLParser.MICROSECOND:
            case MySQLParser.TABLES:
            case MySQLParser.ROUTINE:
            case MySQLParser.EXECUTE:
            case MySQLParser.FILE:
            case MySQLParser.PROCESS:
            case MySQLParser.RELOAD:
            case MySQLParser.SHUTDOWN:
            case MySQLParser.SUPER:
            case MySQLParser.PRIVILEGES:
            case MySQLParser.AUDIT_ADMIN:
            case MySQLParser.BACKUP_ADMIN:
            case MySQLParser.BINLOG_ADMIN:
            case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
            case MySQLParser.CLONE_ADMIN:
            case MySQLParser.CONNECTION_ADMIN:
            case MySQLParser.ENCRYPTION_KEY_ADMIN:
            case MySQLParser.FIREWALL_ADMIN:
            case MySQLParser.FIREWALL_USER:
            case MySQLParser.GROUP_REPLICATION_ADMIN:
            case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
            case MySQLParser.NDB_STORED_USER:
            case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySQLParser.REPLICATION_APPLIER:
            case MySQLParser.REPLICATION_SLAVE_ADMIN:
            case MySQLParser.RESOURCE_GROUP_ADMIN:
            case MySQLParser.RESOURCE_GROUP_USER:
            case MySQLParser.ROLE_ADMIN:
            case MySQLParser.SESSION_VARIABLES_ADMIN:
            case MySQLParser.SET_USER_ID:
            case MySQLParser.SHOW_ROUTINE:
            case MySQLParser.SYSTEM_VARIABLES_ADMIN:
            case MySQLParser.TABLE_ENCRYPTION_ADMIN:
            case MySQLParser.VERSION_TOKEN_ADMIN:
            case MySQLParser.XA_RECOVER_ADMIN:
            case MySQLParser.ARMSCII8:
            case MySQLParser.ASCII:
            case MySQLParser.BIG5:
            case MySQLParser.CP1250:
            case MySQLParser.CP1251:
            case MySQLParser.CP1256:
            case MySQLParser.CP1257:
            case MySQLParser.CP850:
            case MySQLParser.CP852:
            case MySQLParser.CP866:
            case MySQLParser.CP932:
            case MySQLParser.DEC8:
            case MySQLParser.EUCJPMS:
            case MySQLParser.EUCKR:
            case MySQLParser.GB2312:
            case MySQLParser.GBK:
            case MySQLParser.GEOSTD8:
            case MySQLParser.GREEK:
            case MySQLParser.HEBREW:
            case MySQLParser.HP8:
            case MySQLParser.KEYBCS2:
            case MySQLParser.KOI8R:
            case MySQLParser.KOI8U:
            case MySQLParser.LATIN1:
            case MySQLParser.LATIN2:
            case MySQLParser.LATIN5:
            case MySQLParser.LATIN7:
            case MySQLParser.MACCE:
            case MySQLParser.MACROMAN:
            case MySQLParser.SJIS:
            case MySQLParser.SWE7:
            case MySQLParser.TIS620:
            case MySQLParser.UCS2:
            case MySQLParser.UJIS:
            case MySQLParser.UTF16:
            case MySQLParser.UTF16LE:
            case MySQLParser.UTF32:
            case MySQLParser.UTF8:
            case MySQLParser.UTF8MB3:
            case MySQLParser.UTF8MB4:
            case MySQLParser.ARCHIVE:
            case MySQLParser.BLACKHOLE:
            case MySQLParser.CSV:
            case MySQLParser.FEDERATED:
            case MySQLParser.INNODB:
            case MySQLParser.MEMORY:
            case MySQLParser.MRG_MYISAM:
            case MySQLParser.MYISAM:
            case MySQLParser.NDB:
            case MySQLParser.NDBCLUSTER:
            case MySQLParser.PERFORMANCE_SCHEMA:
            case MySQLParser.TOKUDB:
            case MySQLParser.REPEATABLE:
            case MySQLParser.COMMITTED:
            case MySQLParser.UNCOMMITTED:
            case MySQLParser.SERIALIZABLE:
            case MySQLParser.GEOMETRYCOLLECTION:
            case MySQLParser.LINESTRING:
            case MySQLParser.MULTILINESTRING:
            case MySQLParser.MULTIPOINT:
            case MySQLParser.MULTIPOLYGON:
            case MySQLParser.POINT:
            case MySQLParser.POLYGON:
            case MySQLParser.ABS:
            case MySQLParser.ACOS:
            case MySQLParser.ADDDATE:
            case MySQLParser.ADDTIME:
            case MySQLParser.AES_DECRYPT:
            case MySQLParser.AES_ENCRYPT:
            case MySQLParser.AREA:
            case MySQLParser.ASBINARY:
            case MySQLParser.ASIN:
            case MySQLParser.ASTEXT:
            case MySQLParser.ASWKB:
            case MySQLParser.ASWKT:
            case MySQLParser.ASYMMETRIC_DECRYPT:
            case MySQLParser.ASYMMETRIC_DERIVE:
            case MySQLParser.ASYMMETRIC_ENCRYPT:
            case MySQLParser.ASYMMETRIC_SIGN:
            case MySQLParser.ASYMMETRIC_VERIFY:
            case MySQLParser.ATAN:
            case MySQLParser.ATAN2:
            case MySQLParser.BENCHMARK:
            case MySQLParser.BIN:
            case MySQLParser.BIT_COUNT:
            case MySQLParser.BIT_LENGTH:
            case MySQLParser.BUFFER:
            case MySQLParser.CATALOG_NAME:
            case MySQLParser.CEIL:
            case MySQLParser.CEILING:
            case MySQLParser.CENTROID:
            case MySQLParser.CHARACTER_LENGTH:
            case MySQLParser.CHARSET:
            case MySQLParser.CHAR_LENGTH:
            case MySQLParser.COERCIBILITY:
            case MySQLParser.COLLATION:
            case MySQLParser.COMPRESS:
            case MySQLParser.CONCAT:
            case MySQLParser.CONCAT_WS:
            case MySQLParser.CONNECTION_ID:
            case MySQLParser.CONV:
            case MySQLParser.CONVERT_TZ:
            case MySQLParser.COS:
            case MySQLParser.COT:
            case MySQLParser.CRC32:
            case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySQLParser.CREATE_DH_PARAMETERS:
            case MySQLParser.CREATE_DIGEST:
            case MySQLParser.CROSSES:
            case MySQLParser.DATEDIFF:
            case MySQLParser.DATE_FORMAT:
            case MySQLParser.DAYNAME:
            case MySQLParser.DAYOFMONTH:
            case MySQLParser.DAYOFWEEK:
            case MySQLParser.DAYOFYEAR:
            case MySQLParser.DECODE:
            case MySQLParser.DEGREES:
            case MySQLParser.DES_DECRYPT:
            case MySQLParser.DES_ENCRYPT:
            case MySQLParser.DIMENSION:
            case MySQLParser.DISJOINT:
            case MySQLParser.ELT:
            case MySQLParser.ENCODE:
            case MySQLParser.ENCRYPT:
            case MySQLParser.ENDPOINT:
            case MySQLParser.ENVELOPE:
            case MySQLParser.EQUALS:
            case MySQLParser.EXP:
            case MySQLParser.EXPORT_SET:
            case MySQLParser.EXTERIORRING:
            case MySQLParser.EXTRACTVALUE:
            case MySQLParser.FIELD:
            case MySQLParser.FIND_IN_SET:
            case MySQLParser.FLOOR:
            case MySQLParser.FORMAT:
            case MySQLParser.FOUND_ROWS:
            case MySQLParser.FROM_BASE64:
            case MySQLParser.FROM_DAYS:
            case MySQLParser.FROM_UNIXTIME:
            case MySQLParser.GEOMCOLLFROMTEXT:
            case MySQLParser.GEOMCOLLFROMWKB:
            case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.GEOMETRYFROMTEXT:
            case MySQLParser.GEOMETRYFROMWKB:
            case MySQLParser.GEOMETRYN:
            case MySQLParser.GEOMETRYTYPE:
            case MySQLParser.GEOMFROMTEXT:
            case MySQLParser.GEOMFROMWKB:
            case MySQLParser.GET_FORMAT:
            case MySQLParser.GET_LOCK:
            case MySQLParser.GLENGTH:
            case MySQLParser.GREATEST:
            case MySQLParser.GTID_SUBSET:
            case MySQLParser.GTID_SUBTRACT:
            case MySQLParser.HEX:
            case MySQLParser.IFNULL:
            case MySQLParser.INET6_ATON:
            case MySQLParser.INET6_NTOA:
            case MySQLParser.INET_ATON:
            case MySQLParser.INET_NTOA:
            case MySQLParser.INSTR:
            case MySQLParser.INTERIORRINGN:
            case MySQLParser.INTERSECTS:
            case MySQLParser.ISCLOSED:
            case MySQLParser.ISEMPTY:
            case MySQLParser.ISNULL:
            case MySQLParser.ISSIMPLE:
            case MySQLParser.IS_FREE_LOCK:
            case MySQLParser.IS_IPV4:
            case MySQLParser.IS_IPV4_COMPAT:
            case MySQLParser.IS_IPV4_MAPPED:
            case MySQLParser.IS_IPV6:
            case MySQLParser.IS_USED_LOCK:
            case MySQLParser.LAST_INSERT_ID:
            case MySQLParser.LCASE:
            case MySQLParser.LEAST:
            case MySQLParser.LENGTH:
            case MySQLParser.LINEFROMTEXT:
            case MySQLParser.LINEFROMWKB:
            case MySQLParser.LINESTRINGFROMTEXT:
            case MySQLParser.LINESTRINGFROMWKB:
            case MySQLParser.LN:
            case MySQLParser.LOAD_FILE:
            case MySQLParser.LOCATE:
            case MySQLParser.LOG:
            case MySQLParser.LOG10:
            case MySQLParser.LOG2:
            case MySQLParser.LOWER:
            case MySQLParser.LPAD:
            case MySQLParser.LTRIM:
            case MySQLParser.MAKEDATE:
            case MySQLParser.MAKETIME:
            case MySQLParser.MAKE_SET:
            case MySQLParser.MASTER_POS_WAIT:
            case MySQLParser.MBRCONTAINS:
            case MySQLParser.MBRDISJOINT:
            case MySQLParser.MBREQUAL:
            case MySQLParser.MBRINTERSECTS:
            case MySQLParser.MBROVERLAPS:
            case MySQLParser.MBRTOUCHES:
            case MySQLParser.MBRWITHIN:
            case MySQLParser.MD5:
            case MySQLParser.MLINEFROMTEXT:
            case MySQLParser.MLINEFROMWKB:
            case MySQLParser.MONTHNAME:
            case MySQLParser.MPOINTFROMTEXT:
            case MySQLParser.MPOINTFROMWKB:
            case MySQLParser.MPOLYFROMTEXT:
            case MySQLParser.MPOLYFROMWKB:
            case MySQLParser.MULTILINESTRINGFROMTEXT:
            case MySQLParser.MULTILINESTRINGFROMWKB:
            case MySQLParser.MULTIPOINTFROMTEXT:
            case MySQLParser.MULTIPOINTFROMWKB:
            case MySQLParser.MULTIPOLYGONFROMTEXT:
            case MySQLParser.MULTIPOLYGONFROMWKB:
            case MySQLParser.NAME_CONST:
            case MySQLParser.NULLIF:
            case MySQLParser.NUMGEOMETRIES:
            case MySQLParser.NUMINTERIORRINGS:
            case MySQLParser.NUMPOINTS:
            case MySQLParser.OCT:
            case MySQLParser.OCTET_LENGTH:
            case MySQLParser.ORD:
            case MySQLParser.OVERLAPS:
            case MySQLParser.PERIOD_ADD:
            case MySQLParser.PERIOD_DIFF:
            case MySQLParser.PI:
            case MySQLParser.POINTFROMTEXT:
            case MySQLParser.POINTFROMWKB:
            case MySQLParser.POINTN:
            case MySQLParser.POLYFROMTEXT:
            case MySQLParser.POLYFROMWKB:
            case MySQLParser.POLYGONFROMTEXT:
            case MySQLParser.POLYGONFROMWKB:
            case MySQLParser.POW:
            case MySQLParser.POWER:
            case MySQLParser.QUOTE:
            case MySQLParser.RADIANS:
            case MySQLParser.RAND:
            case MySQLParser.RANDOM_BYTES:
            case MySQLParser.RELEASE_LOCK:
            case MySQLParser.REVERSE:
            case MySQLParser.ROUND:
            case MySQLParser.ROW_COUNT:
            case MySQLParser.RPAD:
            case MySQLParser.RTRIM:
            case MySQLParser.SEC_TO_TIME:
            case MySQLParser.SESSION_USER:
            case MySQLParser.SHA:
            case MySQLParser.SHA1:
            case MySQLParser.SHA2:
            case MySQLParser.SCHEMA_NAME:
            case MySQLParser.SIGN:
            case MySQLParser.SIN:
            case MySQLParser.SLEEP:
            case MySQLParser.SOUNDEX:
            case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySQLParser.SQRT:
            case MySQLParser.SRID:
            case MySQLParser.STARTPOINT:
            case MySQLParser.STRCMP:
            case MySQLParser.STR_TO_DATE:
            case MySQLParser.ST_AREA:
            case MySQLParser.ST_ASBINARY:
            case MySQLParser.ST_ASTEXT:
            case MySQLParser.ST_ASWKB:
            case MySQLParser.ST_ASWKT:
            case MySQLParser.ST_BUFFER:
            case MySQLParser.ST_CENTROID:
            case MySQLParser.ST_CONTAINS:
            case MySQLParser.ST_CROSSES:
            case MySQLParser.ST_DIFFERENCE:
            case MySQLParser.ST_DIMENSION:
            case MySQLParser.ST_DISJOINT:
            case MySQLParser.ST_DISTANCE:
            case MySQLParser.ST_ENDPOINT:
            case MySQLParser.ST_ENVELOPE:
            case MySQLParser.ST_EQUALS:
            case MySQLParser.ST_EXTERIORRING:
            case MySQLParser.ST_GEOMCOLLFROMTEXT:
            case MySQLParser.ST_GEOMCOLLFROMTXT:
            case MySQLParser.ST_GEOMCOLLFROMWKB:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.ST_GEOMETRYFROMTEXT:
            case MySQLParser.ST_GEOMETRYFROMWKB:
            case MySQLParser.ST_GEOMETRYN:
            case MySQLParser.ST_GEOMETRYTYPE:
            case MySQLParser.ST_GEOMFROMTEXT:
            case MySQLParser.ST_GEOMFROMWKB:
            case MySQLParser.ST_INTERIORRINGN:
            case MySQLParser.ST_INTERSECTION:
            case MySQLParser.ST_INTERSECTS:
            case MySQLParser.ST_ISCLOSED:
            case MySQLParser.ST_ISEMPTY:
            case MySQLParser.ST_ISSIMPLE:
            case MySQLParser.ST_LINEFROMTEXT:
            case MySQLParser.ST_LINEFROMWKB:
            case MySQLParser.ST_LINESTRINGFROMTEXT:
            case MySQLParser.ST_LINESTRINGFROMWKB:
            case MySQLParser.ST_NUMGEOMETRIES:
            case MySQLParser.ST_NUMINTERIORRING:
            case MySQLParser.ST_NUMINTERIORRINGS:
            case MySQLParser.ST_NUMPOINTS:
            case MySQLParser.ST_OVERLAPS:
            case MySQLParser.ST_POINTFROMTEXT:
            case MySQLParser.ST_POINTFROMWKB:
            case MySQLParser.ST_POINTN:
            case MySQLParser.ST_POLYFROMTEXT:
            case MySQLParser.ST_POLYFROMWKB:
            case MySQLParser.ST_POLYGONFROMTEXT:
            case MySQLParser.ST_POLYGONFROMWKB:
            case MySQLParser.ST_SRID:
            case MySQLParser.ST_STARTPOINT:
            case MySQLParser.ST_SYMDIFFERENCE:
            case MySQLParser.ST_TOUCHES:
            case MySQLParser.ST_UNION:
            case MySQLParser.ST_WITHIN:
            case MySQLParser.ST_X:
            case MySQLParser.ST_Y:
            case MySQLParser.SUBDATE:
            case MySQLParser.SUBSTRING_INDEX:
            case MySQLParser.SUBTIME:
            case MySQLParser.SYSTEM_USER:
            case MySQLParser.TAN:
            case MySQLParser.TIMEDIFF:
            case MySQLParser.TIMESTAMPADD:
            case MySQLParser.TIMESTAMPDIFF:
            case MySQLParser.TIME_FORMAT:
            case MySQLParser.TIME_TO_SEC:
            case MySQLParser.TOUCHES:
            case MySQLParser.TO_BASE64:
            case MySQLParser.TO_DAYS:
            case MySQLParser.TO_SECONDS:
            case MySQLParser.UCASE:
            case MySQLParser.UNCOMPRESS:
            case MySQLParser.UNCOMPRESSED_LENGTH:
            case MySQLParser.UNHEX:
            case MySQLParser.UNIX_TIMESTAMP:
            case MySQLParser.UPDATEXML:
            case MySQLParser.UPPER:
            case MySQLParser.UUID:
            case MySQLParser.UUID_SHORT:
            case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
            case MySQLParser.VERSION:
            case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySQLParser.WEEKDAY:
            case MySQLParser.WEEKOFYEAR:
            case MySQLParser.WEIGHT_STRING:
            case MySQLParser.WITHIN:
            case MySQLParser.YEARWEEK:
            case MySQLParser.Y_FUNCTION:
            case MySQLParser.X_FUNCTION:
            case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySQLParser.STRING_LITERAL:
            case MySQLParser.ID:
            case MySQLParser.REVERSE_QUOTE_ID:
                this.state = 5162;
                this.uidList();
                break;
            case MySQLParser.ALL:
                this.state = 5163;
                this.match(MySQLParser.ALL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 5166;
            this.match(MySQLParser.RR_BRACKET);
        }

        this.state = 5169;
        this.match(MySQLParser.IN);
        this.state = 5170;
        localctx.schema = this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FlushStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_flushStatement;
    this.flushFormat = null; // Token
    return this;
}

FlushStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FlushStatementContext.prototype.constructor = FlushStatementContext;

FlushStatementContext.prototype.FLUSH = function() {
    return this.getToken(MySQLParser.FLUSH, 0);
};

FlushStatementContext.prototype.flushOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FlushOptionContext);
    } else {
        return this.getTypedRuleContext(FlushOptionContext,i);
    }
};

FlushStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


FlushStatementContext.prototype.NO_WRITE_TO_BINLOG = function() {
    return this.getToken(MySQLParser.NO_WRITE_TO_BINLOG, 0);
};

FlushStatementContext.prototype.LOCAL = function() {
    return this.getToken(MySQLParser.LOCAL, 0);
};

FlushStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFlushStatement(this);
	}
};

FlushStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFlushStatement(this);
	}
};

FlushStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFlushStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FlushStatementContext = FlushStatementContext;

MySQLParser.prototype.flushStatement = function() {

    var localctx = new FlushStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, MySQLParser.RULE_flushStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5172;
        this.match(MySQLParser.FLUSH);
        this.state = 5174;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.NO_WRITE_TO_BINLOG || _la===MySQLParser.LOCAL) {
            this.state = 5173;
            localctx.flushFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.NO_WRITE_TO_BINLOG || _la===MySQLParser.LOCAL)) {
                localctx.flushFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 5176;
        this.flushOption();
        this.state = 5181;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 5177;
            this.match(MySQLParser.COMMA);
            this.state = 5178;
            this.flushOption();
            this.state = 5183;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KillStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_killStatement;
    this.connectionFormat = null; // Token
    return this;
}

KillStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KillStatementContext.prototype.constructor = KillStatementContext;

KillStatementContext.prototype.KILL = function() {
    return this.getToken(MySQLParser.KILL, 0);
};

KillStatementContext.prototype.decimalLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DecimalLiteralContext);
    } else {
        return this.getTypedRuleContext(DecimalLiteralContext,i);
    }
};

KillStatementContext.prototype.CONNECTION = function() {
    return this.getToken(MySQLParser.CONNECTION, 0);
};

KillStatementContext.prototype.QUERY = function() {
    return this.getToken(MySQLParser.QUERY, 0);
};

KillStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterKillStatement(this);
	}
};

KillStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitKillStatement(this);
	}
};

KillStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitKillStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.KillStatementContext = KillStatementContext;

MySQLParser.prototype.killStatement = function() {

    var localctx = new KillStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, MySQLParser.RULE_killStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5184;
        this.match(MySQLParser.KILL);
        this.state = 5186;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.CONNECTION || _la===MySQLParser.QUERY) {
            this.state = 5185;
            localctx.connectionFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CONNECTION || _la===MySQLParser.QUERY)) {
                localctx.connectionFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 5189; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 5188;
            this.decimalLiteral();
            this.state = 5191; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 1025)) & ~0x1f) == 0 && ((1 << (_la - 1025)) & ((1 << (MySQLParser.ZERO_DECIMAL - 1025)) | (1 << (MySQLParser.ONE_DECIMAL - 1025)) | (1 << (MySQLParser.TWO_DECIMAL - 1025)) | (1 << (MySQLParser.DECIMAL_LITERAL - 1025)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LoadIndexIntoCacheContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_loadIndexIntoCache;
    return this;
}

LoadIndexIntoCacheContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoadIndexIntoCacheContext.prototype.constructor = LoadIndexIntoCacheContext;

LoadIndexIntoCacheContext.prototype.LOAD = function() {
    return this.getToken(MySQLParser.LOAD, 0);
};

LoadIndexIntoCacheContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

LoadIndexIntoCacheContext.prototype.INTO = function() {
    return this.getToken(MySQLParser.INTO, 0);
};

LoadIndexIntoCacheContext.prototype.CACHE = function() {
    return this.getToken(MySQLParser.CACHE, 0);
};

LoadIndexIntoCacheContext.prototype.loadedTableIndexes = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LoadedTableIndexesContext);
    } else {
        return this.getTypedRuleContext(LoadedTableIndexesContext,i);
    }
};

LoadIndexIntoCacheContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


LoadIndexIntoCacheContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLoadIndexIntoCache(this);
	}
};

LoadIndexIntoCacheContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLoadIndexIntoCache(this);
	}
};

LoadIndexIntoCacheContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLoadIndexIntoCache(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LoadIndexIntoCacheContext = LoadIndexIntoCacheContext;

MySQLParser.prototype.loadIndexIntoCache = function() {

    var localctx = new LoadIndexIntoCacheContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, MySQLParser.RULE_loadIndexIntoCache);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5193;
        this.match(MySQLParser.LOAD);
        this.state = 5194;
        this.match(MySQLParser.INDEX);
        this.state = 5195;
        this.match(MySQLParser.INTO);
        this.state = 5196;
        this.match(MySQLParser.CACHE);
        this.state = 5197;
        this.loadedTableIndexes();
        this.state = 5202;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 5198;
            this.match(MySQLParser.COMMA);
            this.state = 5199;
            this.loadedTableIndexes();
            this.state = 5204;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResetStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_resetStatement;
    return this;
}

ResetStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResetStatementContext.prototype.constructor = ResetStatementContext;

ResetStatementContext.prototype.RESET = function() {
    return this.getToken(MySQLParser.RESET, 0);
};

ResetStatementContext.prototype.QUERY = function() {
    return this.getToken(MySQLParser.QUERY, 0);
};

ResetStatementContext.prototype.CACHE = function() {
    return this.getToken(MySQLParser.CACHE, 0);
};

ResetStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterResetStatement(this);
	}
};

ResetStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitResetStatement(this);
	}
};

ResetStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitResetStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ResetStatementContext = ResetStatementContext;

MySQLParser.prototype.resetStatement = function() {

    var localctx = new ResetStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, MySQLParser.RULE_resetStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5205;
        this.match(MySQLParser.RESET);
        this.state = 5206;
        this.match(MySQLParser.QUERY);
        this.state = 5207;
        this.match(MySQLParser.CACHE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ShutdownStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_shutdownStatement;
    return this;
}

ShutdownStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShutdownStatementContext.prototype.constructor = ShutdownStatementContext;

ShutdownStatementContext.prototype.SHUTDOWN = function() {
    return this.getToken(MySQLParser.SHUTDOWN, 0);
};

ShutdownStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterShutdownStatement(this);
	}
};

ShutdownStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitShutdownStatement(this);
	}
};

ShutdownStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitShutdownStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ShutdownStatementContext = ShutdownStatementContext;

MySQLParser.prototype.shutdownStatement = function() {

    var localctx = new ShutdownStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, MySQLParser.RULE_shutdownStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5209;
        this.match(MySQLParser.SHUTDOWN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableIndexesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableIndexes;
    this.indexFormat = null; // Token
    return this;
}

TableIndexesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableIndexesContext.prototype.constructor = TableIndexesContext;

TableIndexesContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

TableIndexesContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

TableIndexesContext.prototype.uidList = function() {
    return this.getTypedRuleContext(UidListContext,0);
};

TableIndexesContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

TableIndexesContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

TableIndexesContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};

TableIndexesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableIndexes(this);
	}
};

TableIndexesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableIndexes(this);
	}
};

TableIndexesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableIndexes(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableIndexesContext = TableIndexesContext;

MySQLParser.prototype.tableIndexes = function() {

    var localctx = new TableIndexesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, MySQLParser.RULE_tableIndexes);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5211;
        this.tableName();
        this.state = 5219;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.INDEX || _la===MySQLParser.KEY || _la===MySQLParser.LR_BRACKET) {
            this.state = 5213;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.INDEX || _la===MySQLParser.KEY) {
                this.state = 5212;
                localctx.indexFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.INDEX || _la===MySQLParser.KEY)) {
                    localctx.indexFormat = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 5215;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5216;
            this.uidList();
            this.state = 5217;
            this.match(MySQLParser.RR_BRACKET);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FlushOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_flushOption;
    return this;
}

FlushOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FlushOptionContext.prototype.constructor = FlushOptionContext;


 
FlushOptionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TableFlushOptionContext(parser, ctx) {
	FlushOptionContext.call(this, parser);
    FlushOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableFlushOptionContext.prototype = Object.create(FlushOptionContext.prototype);
TableFlushOptionContext.prototype.constructor = TableFlushOptionContext;

MySQLParser.TableFlushOptionContext = TableFlushOptionContext;

TableFlushOptionContext.prototype.TABLES = function() {
    return this.getToken(MySQLParser.TABLES, 0);
};

TableFlushOptionContext.prototype.tables = function() {
    return this.getTypedRuleContext(TablesContext,0);
};

TableFlushOptionContext.prototype.flushTableOption = function() {
    return this.getTypedRuleContext(FlushTableOptionContext,0);
};
TableFlushOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableFlushOption(this);
	}
};

TableFlushOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableFlushOption(this);
	}
};

TableFlushOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableFlushOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ChannelFlushOptionContext(parser, ctx) {
	FlushOptionContext.call(this, parser);
    FlushOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ChannelFlushOptionContext.prototype = Object.create(FlushOptionContext.prototype);
ChannelFlushOptionContext.prototype.constructor = ChannelFlushOptionContext;

MySQLParser.ChannelFlushOptionContext = ChannelFlushOptionContext;

ChannelFlushOptionContext.prototype.RELAY = function() {
    return this.getToken(MySQLParser.RELAY, 0);
};

ChannelFlushOptionContext.prototype.LOGS = function() {
    return this.getToken(MySQLParser.LOGS, 0);
};

ChannelFlushOptionContext.prototype.channelOption = function() {
    return this.getTypedRuleContext(ChannelOptionContext,0);
};
ChannelFlushOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterChannelFlushOption(this);
	}
};

ChannelFlushOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitChannelFlushOption(this);
	}
};

ChannelFlushOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitChannelFlushOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleFlushOptionContext(parser, ctx) {
	FlushOptionContext.call(this, parser);
    FlushOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleFlushOptionContext.prototype = Object.create(FlushOptionContext.prototype);
SimpleFlushOptionContext.prototype.constructor = SimpleFlushOptionContext;

MySQLParser.SimpleFlushOptionContext = SimpleFlushOptionContext;

SimpleFlushOptionContext.prototype.DES_KEY_FILE = function() {
    return this.getToken(MySQLParser.DES_KEY_FILE, 0);
};

SimpleFlushOptionContext.prototype.HOSTS = function() {
    return this.getToken(MySQLParser.HOSTS, 0);
};

SimpleFlushOptionContext.prototype.LOGS = function() {
    return this.getToken(MySQLParser.LOGS, 0);
};

SimpleFlushOptionContext.prototype.OPTIMIZER_COSTS = function() {
    return this.getToken(MySQLParser.OPTIMIZER_COSTS, 0);
};

SimpleFlushOptionContext.prototype.PRIVILEGES = function() {
    return this.getToken(MySQLParser.PRIVILEGES, 0);
};

SimpleFlushOptionContext.prototype.QUERY = function() {
    return this.getToken(MySQLParser.QUERY, 0);
};

SimpleFlushOptionContext.prototype.CACHE = function() {
    return this.getToken(MySQLParser.CACHE, 0);
};

SimpleFlushOptionContext.prototype.STATUS = function() {
    return this.getToken(MySQLParser.STATUS, 0);
};

SimpleFlushOptionContext.prototype.USER_RESOURCES = function() {
    return this.getToken(MySQLParser.USER_RESOURCES, 0);
};

SimpleFlushOptionContext.prototype.TABLES = function() {
    return this.getToken(MySQLParser.TABLES, 0);
};

SimpleFlushOptionContext.prototype.WITH = function() {
    return this.getToken(MySQLParser.WITH, 0);
};

SimpleFlushOptionContext.prototype.READ = function() {
    return this.getToken(MySQLParser.READ, 0);
};

SimpleFlushOptionContext.prototype.LOCK = function() {
    return this.getToken(MySQLParser.LOCK, 0);
};

SimpleFlushOptionContext.prototype.BINARY = function() {
    return this.getToken(MySQLParser.BINARY, 0);
};

SimpleFlushOptionContext.prototype.ENGINE = function() {
    return this.getToken(MySQLParser.ENGINE, 0);
};

SimpleFlushOptionContext.prototype.ERROR = function() {
    return this.getToken(MySQLParser.ERROR, 0);
};

SimpleFlushOptionContext.prototype.GENERAL = function() {
    return this.getToken(MySQLParser.GENERAL, 0);
};

SimpleFlushOptionContext.prototype.RELAY = function() {
    return this.getToken(MySQLParser.RELAY, 0);
};

SimpleFlushOptionContext.prototype.SLOW = function() {
    return this.getToken(MySQLParser.SLOW, 0);
};
SimpleFlushOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleFlushOption(this);
	}
};

SimpleFlushOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleFlushOption(this);
	}
};

SimpleFlushOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleFlushOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.FlushOptionContext = FlushOptionContext;

MySQLParser.prototype.flushOption = function() {

    var localctx = new FlushOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, MySQLParser.RULE_flushOption);
    var _la = 0; // Token type
    try {
        this.state = 5251;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,755,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SimpleFlushOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 5239;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.DES_KEY_FILE:
                this.state = 5221;
                this.match(MySQLParser.DES_KEY_FILE);
                break;
            case MySQLParser.HOSTS:
                this.state = 5222;
                this.match(MySQLParser.HOSTS);
                break;
            case MySQLParser.BINARY:
            case MySQLParser.ENGINE:
            case MySQLParser.ERROR:
            case MySQLParser.GENERAL:
            case MySQLParser.LOGS:
            case MySQLParser.RELAY:
            case MySQLParser.SLOW:
                this.state = 5224;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.BINARY || ((((_la - 342)) & ~0x1f) == 0 && ((1 << (_la - 342)) & ((1 << (MySQLParser.ENGINE - 342)) | (1 << (MySQLParser.ERROR - 342)) | (1 << (MySQLParser.GENERAL - 342)))) !== 0) || _la===MySQLParser.RELAY || _la===MySQLParser.SLOW) {
                    this.state = 5223;
                    _la = this._input.LA(1);
                    if(!(_la===MySQLParser.BINARY || ((((_la - 342)) & ~0x1f) == 0 && ((1 << (_la - 342)) & ((1 << (MySQLParser.ENGINE - 342)) | (1 << (MySQLParser.ERROR - 342)) | (1 << (MySQLParser.GENERAL - 342)))) !== 0) || _la===MySQLParser.RELAY || _la===MySQLParser.SLOW)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 5226;
                this.match(MySQLParser.LOGS);
                break;
            case MySQLParser.OPTIMIZER_COSTS:
                this.state = 5227;
                this.match(MySQLParser.OPTIMIZER_COSTS);
                break;
            case MySQLParser.PRIVILEGES:
                this.state = 5228;
                this.match(MySQLParser.PRIVILEGES);
                break;
            case MySQLParser.QUERY:
                this.state = 5229;
                this.match(MySQLParser.QUERY);
                this.state = 5230;
                this.match(MySQLParser.CACHE);
                break;
            case MySQLParser.STATUS:
                this.state = 5231;
                this.match(MySQLParser.STATUS);
                break;
            case MySQLParser.USER_RESOURCES:
                this.state = 5232;
                this.match(MySQLParser.USER_RESOURCES);
                break;
            case MySQLParser.TABLES:
                this.state = 5233;
                this.match(MySQLParser.TABLES);
                this.state = 5237;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.WITH) {
                    this.state = 5234;
                    this.match(MySQLParser.WITH);
                    this.state = 5235;
                    this.match(MySQLParser.READ);
                    this.state = 5236;
                    this.match(MySQLParser.LOCK);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            localctx = new ChannelFlushOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 5241;
            this.match(MySQLParser.RELAY);
            this.state = 5242;
            this.match(MySQLParser.LOGS);
            this.state = 5244;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR) {
                this.state = 5243;
                this.channelOption();
            }

            break;

        case 3:
            localctx = new TableFlushOptionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 5246;
            this.match(MySQLParser.TABLES);
            this.state = 5247;
            this.tables();
            this.state = 5249;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR || _la===MySQLParser.WITH) {
                this.state = 5248;
                this.flushTableOption();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FlushTableOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_flushTableOption;
    return this;
}

FlushTableOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FlushTableOptionContext.prototype.constructor = FlushTableOptionContext;

FlushTableOptionContext.prototype.WITH = function() {
    return this.getToken(MySQLParser.WITH, 0);
};

FlushTableOptionContext.prototype.READ = function() {
    return this.getToken(MySQLParser.READ, 0);
};

FlushTableOptionContext.prototype.LOCK = function() {
    return this.getToken(MySQLParser.LOCK, 0);
};

FlushTableOptionContext.prototype.FOR = function() {
    return this.getToken(MySQLParser.FOR, 0);
};

FlushTableOptionContext.prototype.EXPORT = function() {
    return this.getToken(MySQLParser.EXPORT, 0);
};

FlushTableOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFlushTableOption(this);
	}
};

FlushTableOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFlushTableOption(this);
	}
};

FlushTableOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFlushTableOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FlushTableOptionContext = FlushTableOptionContext;

MySQLParser.prototype.flushTableOption = function() {

    var localctx = new FlushTableOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, MySQLParser.RULE_flushTableOption);
    try {
        this.state = 5258;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.WITH:
            this.enterOuterAlt(localctx, 1);
            this.state = 5253;
            this.match(MySQLParser.WITH);
            this.state = 5254;
            this.match(MySQLParser.READ);
            this.state = 5255;
            this.match(MySQLParser.LOCK);
            break;
        case MySQLParser.FOR:
            this.enterOuterAlt(localctx, 2);
            this.state = 5256;
            this.match(MySQLParser.FOR);
            this.state = 5257;
            this.match(MySQLParser.EXPORT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LoadedTableIndexesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_loadedTableIndexes;
    this.partitionList = null; // UidListContext
    this.indexFormat = null; // Token
    this.indexList = null; // UidListContext
    return this;
}

LoadedTableIndexesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoadedTableIndexesContext.prototype.constructor = LoadedTableIndexesContext;

LoadedTableIndexesContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

LoadedTableIndexesContext.prototype.PARTITION = function() {
    return this.getToken(MySQLParser.PARTITION, 0);
};

LoadedTableIndexesContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.LR_BRACKET);
    } else {
        return this.getToken(MySQLParser.LR_BRACKET, i);
    }
};


LoadedTableIndexesContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.RR_BRACKET);
    } else {
        return this.getToken(MySQLParser.RR_BRACKET, i);
    }
};


LoadedTableIndexesContext.prototype.IGNORE = function() {
    return this.getToken(MySQLParser.IGNORE, 0);
};

LoadedTableIndexesContext.prototype.LEAVES = function() {
    return this.getToken(MySQLParser.LEAVES, 0);
};

LoadedTableIndexesContext.prototype.uidList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidListContext);
    } else {
        return this.getTypedRuleContext(UidListContext,i);
    }
};

LoadedTableIndexesContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};

LoadedTableIndexesContext.prototype.INDEX = function() {
    return this.getToken(MySQLParser.INDEX, 0);
};

LoadedTableIndexesContext.prototype.KEY = function() {
    return this.getToken(MySQLParser.KEY, 0);
};

LoadedTableIndexesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLoadedTableIndexes(this);
	}
};

LoadedTableIndexesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLoadedTableIndexes(this);
	}
};

LoadedTableIndexesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLoadedTableIndexes(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LoadedTableIndexesContext = LoadedTableIndexesContext;

MySQLParser.prototype.loadedTableIndexes = function() {

    var localctx = new LoadedTableIndexesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, MySQLParser.RULE_loadedTableIndexes);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5260;
        this.tableName();
        this.state = 5268;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.PARTITION) {
            this.state = 5261;
            this.match(MySQLParser.PARTITION);
            this.state = 5262;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5265;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.CURRENT:
            case MySQLParser.DATABASE:
            case MySQLParser.DIAGNOSTICS:
            case MySQLParser.LEFT:
            case MySQLParser.NUMBER:
            case MySQLParser.RIGHT:
            case MySQLParser.STACKED:
            case MySQLParser.DATE:
            case MySQLParser.TIME:
            case MySQLParser.TIMESTAMP:
            case MySQLParser.DATETIME:
            case MySQLParser.YEAR:
            case MySQLParser.TEXT:
            case MySQLParser.ENUM:
            case MySQLParser.SERIAL:
            case MySQLParser.JSON_VALID:
            case MySQLParser.JSON_SCHEMA_VALID:
            case MySQLParser.COUNT:
            case MySQLParser.POSITION:
            case MySQLParser.ACCOUNT:
            case MySQLParser.ACTION:
            case MySQLParser.AFTER:
            case MySQLParser.AGGREGATE:
            case MySQLParser.ALGORITHM:
            case MySQLParser.ANY:
            case MySQLParser.AT:
            case MySQLParser.AUTHORS:
            case MySQLParser.AUTOCOMMIT:
            case MySQLParser.AUTOEXTEND_SIZE:
            case MySQLParser.AUTO_INCREMENT:
            case MySQLParser.AVG_ROW_LENGTH:
            case MySQLParser.BEGIN:
            case MySQLParser.BINLOG:
            case MySQLParser.BIT:
            case MySQLParser.BLOCK:
            case MySQLParser.BOOL:
            case MySQLParser.BOOLEAN:
            case MySQLParser.BTREE:
            case MySQLParser.CACHE:
            case MySQLParser.CASCADED:
            case MySQLParser.CHAIN:
            case MySQLParser.CHANGED:
            case MySQLParser.CHANNEL:
            case MySQLParser.CHECKSUM:
            case MySQLParser.PAGE_CHECKSUM:
            case MySQLParser.CIPHER:
            case MySQLParser.CLASS_ORIGIN:
            case MySQLParser.CLIENT:
            case MySQLParser.CLOSE:
            case MySQLParser.COALESCE:
            case MySQLParser.CODE:
            case MySQLParser.COLUMNS:
            case MySQLParser.COLUMN_FORMAT:
            case MySQLParser.COLUMN_NAME:
            case MySQLParser.COMMENT:
            case MySQLParser.COMMIT:
            case MySQLParser.COMPACT:
            case MySQLParser.COMPLETION:
            case MySQLParser.COMPRESSED:
            case MySQLParser.COMPRESSION:
            case MySQLParser.CONCURRENT:
            case MySQLParser.CONNECTION:
            case MySQLParser.CONSISTENT:
            case MySQLParser.CONSTRAINT_CATALOG:
            case MySQLParser.CONSTRAINT_SCHEMA:
            case MySQLParser.CONSTRAINT_NAME:
            case MySQLParser.CONTAINS:
            case MySQLParser.CONTEXT:
            case MySQLParser.CONTRIBUTORS:
            case MySQLParser.COPY:
            case MySQLParser.CPU:
            case MySQLParser.CURSOR_NAME:
            case MySQLParser.DATA:
            case MySQLParser.DATAFILE:
            case MySQLParser.DEALLOCATE:
            case MySQLParser.DEFAULT_AUTH:
            case MySQLParser.DEFINER:
            case MySQLParser.DELAY_KEY_WRITE:
            case MySQLParser.DES_KEY_FILE:
            case MySQLParser.DIRECTORY:
            case MySQLParser.DISABLE:
            case MySQLParser.DISCARD:
            case MySQLParser.DISK:
            case MySQLParser.DO:
            case MySQLParser.DUMPFILE:
            case MySQLParser.DUPLICATE:
            case MySQLParser.DYNAMIC:
            case MySQLParser.ENABLE:
            case MySQLParser.ENCRYPTION:
            case MySQLParser.END:
            case MySQLParser.ENDS:
            case MySQLParser.ENGINE:
            case MySQLParser.ENGINES:
            case MySQLParser.ERROR:
            case MySQLParser.ERRORS:
            case MySQLParser.ESCAPE:
            case MySQLParser.EVEN:
            case MySQLParser.EVENT:
            case MySQLParser.EVENTS:
            case MySQLParser.EVERY:
            case MySQLParser.EXCHANGE:
            case MySQLParser.EXCLUSIVE:
            case MySQLParser.EXPIRE:
            case MySQLParser.EXPORT:
            case MySQLParser.EXTENDED:
            case MySQLParser.EXTENT_SIZE:
            case MySQLParser.FAST:
            case MySQLParser.FAULTS:
            case MySQLParser.FIELDS:
            case MySQLParser.FILE_BLOCK_SIZE:
            case MySQLParser.FILTER:
            case MySQLParser.FIRST:
            case MySQLParser.FIXED:
            case MySQLParser.FLUSH:
            case MySQLParser.FOLLOWS:
            case MySQLParser.FOUND:
            case MySQLParser.FULL:
            case MySQLParser.FUNCTION:
            case MySQLParser.GENERAL:
            case MySQLParser.GLOBAL:
            case MySQLParser.GRANTS:
            case MySQLParser.GROUP_REPLICATION:
            case MySQLParser.HANDLER:
            case MySQLParser.HASH:
            case MySQLParser.HELP:
            case MySQLParser.HOST:
            case MySQLParser.HOSTS:
            case MySQLParser.IDENTIFIED:
            case MySQLParser.IGNORE_SERVER_IDS:
            case MySQLParser.IMPORT:
            case MySQLParser.INDEXES:
            case MySQLParser.INITIAL_SIZE:
            case MySQLParser.INPLACE:
            case MySQLParser.INSERT_METHOD:
            case MySQLParser.INSTALL:
            case MySQLParser.INSTANCE:
            case MySQLParser.INVISIBLE:
            case MySQLParser.INVOKER:
            case MySQLParser.IO:
            case MySQLParser.IO_THREAD:
            case MySQLParser.IPC:
            case MySQLParser.ISOLATION:
            case MySQLParser.ISSUER:
            case MySQLParser.JSON:
            case MySQLParser.KEY_BLOCK_SIZE:
            case MySQLParser.LANGUAGE:
            case MySQLParser.LAST:
            case MySQLParser.LEAVES:
            case MySQLParser.LESS:
            case MySQLParser.LEVEL:
            case MySQLParser.LIST:
            case MySQLParser.LOCAL:
            case MySQLParser.LOGFILE:
            case MySQLParser.LOGS:
            case MySQLParser.MASTER:
            case MySQLParser.MASTER_AUTO_POSITION:
            case MySQLParser.MASTER_CONNECT_RETRY:
            case MySQLParser.MASTER_DELAY:
            case MySQLParser.MASTER_HEARTBEAT_PERIOD:
            case MySQLParser.MASTER_HOST:
            case MySQLParser.MASTER_LOG_FILE:
            case MySQLParser.MASTER_LOG_POS:
            case MySQLParser.MASTER_PASSWORD:
            case MySQLParser.MASTER_PORT:
            case MySQLParser.MASTER_RETRY_COUNT:
            case MySQLParser.MASTER_SSL:
            case MySQLParser.MASTER_SSL_CA:
            case MySQLParser.MASTER_SSL_CAPATH:
            case MySQLParser.MASTER_SSL_CERT:
            case MySQLParser.MASTER_SSL_CIPHER:
            case MySQLParser.MASTER_SSL_CRL:
            case MySQLParser.MASTER_SSL_CRLPATH:
            case MySQLParser.MASTER_SSL_KEY:
            case MySQLParser.MASTER_TLS_VERSION:
            case MySQLParser.MASTER_USER:
            case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
            case MySQLParser.MAX_QUERIES_PER_HOUR:
            case MySQLParser.MAX_ROWS:
            case MySQLParser.MAX_SIZE:
            case MySQLParser.MAX_UPDATES_PER_HOUR:
            case MySQLParser.MAX_USER_CONNECTIONS:
            case MySQLParser.MEDIUM:
            case MySQLParser.MERGE:
            case MySQLParser.MESSAGE_TEXT:
            case MySQLParser.MID:
            case MySQLParser.MIGRATE:
            case MySQLParser.MIN_ROWS:
            case MySQLParser.MODE:
            case MySQLParser.MODIFY:
            case MySQLParser.MUTEX:
            case MySQLParser.MYSQL:
            case MySQLParser.MYSQL_ERRNO:
            case MySQLParser.NAME:
            case MySQLParser.NAMES:
            case MySQLParser.NCHAR:
            case MySQLParser.NEVER:
            case MySQLParser.NEXT:
            case MySQLParser.NO:
            case MySQLParser.NODEGROUP:
            case MySQLParser.NONE:
            case MySQLParser.OFFLINE:
            case MySQLParser.OFFSET:
            case MySQLParser.OJ:
            case MySQLParser.OLD_PASSWORD:
            case MySQLParser.ONE:
            case MySQLParser.ONLINE:
            case MySQLParser.ONLY:
            case MySQLParser.OPEN:
            case MySQLParser.OPTIMIZER_COSTS:
            case MySQLParser.OPTIONS:
            case MySQLParser.OWNER:
            case MySQLParser.PACK_KEYS:
            case MySQLParser.PAGE:
            case MySQLParser.PARSER:
            case MySQLParser.PARTIAL:
            case MySQLParser.PARTITIONING:
            case MySQLParser.PARTITIONS:
            case MySQLParser.PASSWORD:
            case MySQLParser.PHASE:
            case MySQLParser.PLUGIN:
            case MySQLParser.PLUGIN_DIR:
            case MySQLParser.PLUGINS:
            case MySQLParser.PORT:
            case MySQLParser.PRECEDES:
            case MySQLParser.PREPARE:
            case MySQLParser.PRESERVE:
            case MySQLParser.PREV:
            case MySQLParser.PROCESSLIST:
            case MySQLParser.PROFILE:
            case MySQLParser.PROFILES:
            case MySQLParser.PROXY:
            case MySQLParser.QUERY:
            case MySQLParser.QUICK:
            case MySQLParser.REBUILD:
            case MySQLParser.RECOVER:
            case MySQLParser.REDO_BUFFER_SIZE:
            case MySQLParser.REDUNDANT:
            case MySQLParser.RELAY:
            case MySQLParser.RELAY_LOG_FILE:
            case MySQLParser.RELAY_LOG_POS:
            case MySQLParser.RELAYLOG:
            case MySQLParser.REMOVE:
            case MySQLParser.REORGANIZE:
            case MySQLParser.REPAIR:
            case MySQLParser.REPLICATE_DO_DB:
            case MySQLParser.REPLICATE_DO_TABLE:
            case MySQLParser.REPLICATE_IGNORE_DB:
            case MySQLParser.REPLICATE_IGNORE_TABLE:
            case MySQLParser.REPLICATE_REWRITE_DB:
            case MySQLParser.REPLICATE_WILD_DO_TABLE:
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySQLParser.REPLICATION:
            case MySQLParser.RESET:
            case MySQLParser.RESUME:
            case MySQLParser.RETURNED_SQLSTATE:
            case MySQLParser.RETURNS:
            case MySQLParser.ROLE:
            case MySQLParser.ROLLBACK:
            case MySQLParser.ROLLUP:
            case MySQLParser.ROTATE:
            case MySQLParser.ROW:
            case MySQLParser.ROWS:
            case MySQLParser.ROW_FORMAT:
            case MySQLParser.SAVEPOINT:
            case MySQLParser.SCHEDULE:
            case MySQLParser.SECURITY:
            case MySQLParser.SERVER:
            case MySQLParser.SESSION:
            case MySQLParser.SHARE:
            case MySQLParser.SHARED:
            case MySQLParser.SIGNED:
            case MySQLParser.SIMPLE:
            case MySQLParser.SLAVE:
            case MySQLParser.SLOW:
            case MySQLParser.SNAPSHOT:
            case MySQLParser.SOCKET:
            case MySQLParser.SOME:
            case MySQLParser.SONAME:
            case MySQLParser.SOUNDS:
            case MySQLParser.SOURCE:
            case MySQLParser.SQL_AFTER_GTIDS:
            case MySQLParser.SQL_AFTER_MTS_GAPS:
            case MySQLParser.SQL_BEFORE_GTIDS:
            case MySQLParser.SQL_BUFFER_RESULT:
            case MySQLParser.SQL_CACHE:
            case MySQLParser.SQL_NO_CACHE:
            case MySQLParser.SQL_THREAD:
            case MySQLParser.START:
            case MySQLParser.STARTS:
            case MySQLParser.STATS_AUTO_RECALC:
            case MySQLParser.STATS_PERSISTENT:
            case MySQLParser.STATS_SAMPLE_PAGES:
            case MySQLParser.STATUS:
            case MySQLParser.STOP:
            case MySQLParser.STORAGE:
            case MySQLParser.STRING:
            case MySQLParser.SUBCLASS_ORIGIN:
            case MySQLParser.SUBJECT:
            case MySQLParser.SUBPARTITION:
            case MySQLParser.SUBPARTITIONS:
            case MySQLParser.SUSPEND:
            case MySQLParser.SWAPS:
            case MySQLParser.SWITCHES:
            case MySQLParser.TABLE_NAME:
            case MySQLParser.TABLESPACE:
            case MySQLParser.TEMPORARY:
            case MySQLParser.TEMPTABLE:
            case MySQLParser.THAN:
            case MySQLParser.TRADITIONAL:
            case MySQLParser.TRANSACTION:
            case MySQLParser.TRANSACTIONAL:
            case MySQLParser.TRIGGERS:
            case MySQLParser.TRUNCATE:
            case MySQLParser.UNDEFINED:
            case MySQLParser.UNDOFILE:
            case MySQLParser.UNDO_BUFFER_SIZE:
            case MySQLParser.UNINSTALL:
            case MySQLParser.UNKNOWN:
            case MySQLParser.UNTIL:
            case MySQLParser.UPGRADE:
            case MySQLParser.USER:
            case MySQLParser.USE_FRM:
            case MySQLParser.USER_RESOURCES:
            case MySQLParser.VALIDATION:
            case MySQLParser.VALUE:
            case MySQLParser.VARIABLES:
            case MySQLParser.VIEW:
            case MySQLParser.VISIBLE:
            case MySQLParser.WAIT:
            case MySQLParser.WARNINGS:
            case MySQLParser.WITHOUT:
            case MySQLParser.WORK:
            case MySQLParser.WRAPPER:
            case MySQLParser.X509:
            case MySQLParser.XA:
            case MySQLParser.XML:
            case MySQLParser.INTERNAL:
            case MySQLParser.QUARTER:
            case MySQLParser.MONTH:
            case MySQLParser.DAY:
            case MySQLParser.HOUR:
            case MySQLParser.MINUTE:
            case MySQLParser.WEEK:
            case MySQLParser.SECOND:
            case MySQLParser.MICROSECOND:
            case MySQLParser.TABLES:
            case MySQLParser.ROUTINE:
            case MySQLParser.EXECUTE:
            case MySQLParser.FILE:
            case MySQLParser.PROCESS:
            case MySQLParser.RELOAD:
            case MySQLParser.SHUTDOWN:
            case MySQLParser.SUPER:
            case MySQLParser.PRIVILEGES:
            case MySQLParser.AUDIT_ADMIN:
            case MySQLParser.BACKUP_ADMIN:
            case MySQLParser.BINLOG_ADMIN:
            case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
            case MySQLParser.CLONE_ADMIN:
            case MySQLParser.CONNECTION_ADMIN:
            case MySQLParser.ENCRYPTION_KEY_ADMIN:
            case MySQLParser.FIREWALL_ADMIN:
            case MySQLParser.FIREWALL_USER:
            case MySQLParser.GROUP_REPLICATION_ADMIN:
            case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
            case MySQLParser.NDB_STORED_USER:
            case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySQLParser.REPLICATION_APPLIER:
            case MySQLParser.REPLICATION_SLAVE_ADMIN:
            case MySQLParser.RESOURCE_GROUP_ADMIN:
            case MySQLParser.RESOURCE_GROUP_USER:
            case MySQLParser.ROLE_ADMIN:
            case MySQLParser.SESSION_VARIABLES_ADMIN:
            case MySQLParser.SET_USER_ID:
            case MySQLParser.SHOW_ROUTINE:
            case MySQLParser.SYSTEM_VARIABLES_ADMIN:
            case MySQLParser.TABLE_ENCRYPTION_ADMIN:
            case MySQLParser.VERSION_TOKEN_ADMIN:
            case MySQLParser.XA_RECOVER_ADMIN:
            case MySQLParser.ARMSCII8:
            case MySQLParser.ASCII:
            case MySQLParser.BIG5:
            case MySQLParser.CP1250:
            case MySQLParser.CP1251:
            case MySQLParser.CP1256:
            case MySQLParser.CP1257:
            case MySQLParser.CP850:
            case MySQLParser.CP852:
            case MySQLParser.CP866:
            case MySQLParser.CP932:
            case MySQLParser.DEC8:
            case MySQLParser.EUCJPMS:
            case MySQLParser.EUCKR:
            case MySQLParser.GB2312:
            case MySQLParser.GBK:
            case MySQLParser.GEOSTD8:
            case MySQLParser.GREEK:
            case MySQLParser.HEBREW:
            case MySQLParser.HP8:
            case MySQLParser.KEYBCS2:
            case MySQLParser.KOI8R:
            case MySQLParser.KOI8U:
            case MySQLParser.LATIN1:
            case MySQLParser.LATIN2:
            case MySQLParser.LATIN5:
            case MySQLParser.LATIN7:
            case MySQLParser.MACCE:
            case MySQLParser.MACROMAN:
            case MySQLParser.SJIS:
            case MySQLParser.SWE7:
            case MySQLParser.TIS620:
            case MySQLParser.UCS2:
            case MySQLParser.UJIS:
            case MySQLParser.UTF16:
            case MySQLParser.UTF16LE:
            case MySQLParser.UTF32:
            case MySQLParser.UTF8:
            case MySQLParser.UTF8MB3:
            case MySQLParser.UTF8MB4:
            case MySQLParser.ARCHIVE:
            case MySQLParser.BLACKHOLE:
            case MySQLParser.CSV:
            case MySQLParser.FEDERATED:
            case MySQLParser.INNODB:
            case MySQLParser.MEMORY:
            case MySQLParser.MRG_MYISAM:
            case MySQLParser.MYISAM:
            case MySQLParser.NDB:
            case MySQLParser.NDBCLUSTER:
            case MySQLParser.PERFORMANCE_SCHEMA:
            case MySQLParser.TOKUDB:
            case MySQLParser.REPEATABLE:
            case MySQLParser.COMMITTED:
            case MySQLParser.UNCOMMITTED:
            case MySQLParser.SERIALIZABLE:
            case MySQLParser.GEOMETRYCOLLECTION:
            case MySQLParser.LINESTRING:
            case MySQLParser.MULTILINESTRING:
            case MySQLParser.MULTIPOINT:
            case MySQLParser.MULTIPOLYGON:
            case MySQLParser.POINT:
            case MySQLParser.POLYGON:
            case MySQLParser.ABS:
            case MySQLParser.ACOS:
            case MySQLParser.ADDDATE:
            case MySQLParser.ADDTIME:
            case MySQLParser.AES_DECRYPT:
            case MySQLParser.AES_ENCRYPT:
            case MySQLParser.AREA:
            case MySQLParser.ASBINARY:
            case MySQLParser.ASIN:
            case MySQLParser.ASTEXT:
            case MySQLParser.ASWKB:
            case MySQLParser.ASWKT:
            case MySQLParser.ASYMMETRIC_DECRYPT:
            case MySQLParser.ASYMMETRIC_DERIVE:
            case MySQLParser.ASYMMETRIC_ENCRYPT:
            case MySQLParser.ASYMMETRIC_SIGN:
            case MySQLParser.ASYMMETRIC_VERIFY:
            case MySQLParser.ATAN:
            case MySQLParser.ATAN2:
            case MySQLParser.BENCHMARK:
            case MySQLParser.BIN:
            case MySQLParser.BIT_COUNT:
            case MySQLParser.BIT_LENGTH:
            case MySQLParser.BUFFER:
            case MySQLParser.CATALOG_NAME:
            case MySQLParser.CEIL:
            case MySQLParser.CEILING:
            case MySQLParser.CENTROID:
            case MySQLParser.CHARACTER_LENGTH:
            case MySQLParser.CHARSET:
            case MySQLParser.CHAR_LENGTH:
            case MySQLParser.COERCIBILITY:
            case MySQLParser.COLLATION:
            case MySQLParser.COMPRESS:
            case MySQLParser.CONCAT:
            case MySQLParser.CONCAT_WS:
            case MySQLParser.CONNECTION_ID:
            case MySQLParser.CONV:
            case MySQLParser.CONVERT_TZ:
            case MySQLParser.COS:
            case MySQLParser.COT:
            case MySQLParser.CRC32:
            case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySQLParser.CREATE_DH_PARAMETERS:
            case MySQLParser.CREATE_DIGEST:
            case MySQLParser.CROSSES:
            case MySQLParser.DATEDIFF:
            case MySQLParser.DATE_FORMAT:
            case MySQLParser.DAYNAME:
            case MySQLParser.DAYOFMONTH:
            case MySQLParser.DAYOFWEEK:
            case MySQLParser.DAYOFYEAR:
            case MySQLParser.DECODE:
            case MySQLParser.DEGREES:
            case MySQLParser.DES_DECRYPT:
            case MySQLParser.DES_ENCRYPT:
            case MySQLParser.DIMENSION:
            case MySQLParser.DISJOINT:
            case MySQLParser.ELT:
            case MySQLParser.ENCODE:
            case MySQLParser.ENCRYPT:
            case MySQLParser.ENDPOINT:
            case MySQLParser.ENVELOPE:
            case MySQLParser.EQUALS:
            case MySQLParser.EXP:
            case MySQLParser.EXPORT_SET:
            case MySQLParser.EXTERIORRING:
            case MySQLParser.EXTRACTVALUE:
            case MySQLParser.FIELD:
            case MySQLParser.FIND_IN_SET:
            case MySQLParser.FLOOR:
            case MySQLParser.FORMAT:
            case MySQLParser.FOUND_ROWS:
            case MySQLParser.FROM_BASE64:
            case MySQLParser.FROM_DAYS:
            case MySQLParser.FROM_UNIXTIME:
            case MySQLParser.GEOMCOLLFROMTEXT:
            case MySQLParser.GEOMCOLLFROMWKB:
            case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.GEOMETRYFROMTEXT:
            case MySQLParser.GEOMETRYFROMWKB:
            case MySQLParser.GEOMETRYN:
            case MySQLParser.GEOMETRYTYPE:
            case MySQLParser.GEOMFROMTEXT:
            case MySQLParser.GEOMFROMWKB:
            case MySQLParser.GET_FORMAT:
            case MySQLParser.GET_LOCK:
            case MySQLParser.GLENGTH:
            case MySQLParser.GREATEST:
            case MySQLParser.GTID_SUBSET:
            case MySQLParser.GTID_SUBTRACT:
            case MySQLParser.HEX:
            case MySQLParser.IFNULL:
            case MySQLParser.INET6_ATON:
            case MySQLParser.INET6_NTOA:
            case MySQLParser.INET_ATON:
            case MySQLParser.INET_NTOA:
            case MySQLParser.INSTR:
            case MySQLParser.INTERIORRINGN:
            case MySQLParser.INTERSECTS:
            case MySQLParser.ISCLOSED:
            case MySQLParser.ISEMPTY:
            case MySQLParser.ISNULL:
            case MySQLParser.ISSIMPLE:
            case MySQLParser.IS_FREE_LOCK:
            case MySQLParser.IS_IPV4:
            case MySQLParser.IS_IPV4_COMPAT:
            case MySQLParser.IS_IPV4_MAPPED:
            case MySQLParser.IS_IPV6:
            case MySQLParser.IS_USED_LOCK:
            case MySQLParser.LAST_INSERT_ID:
            case MySQLParser.LCASE:
            case MySQLParser.LEAST:
            case MySQLParser.LENGTH:
            case MySQLParser.LINEFROMTEXT:
            case MySQLParser.LINEFROMWKB:
            case MySQLParser.LINESTRINGFROMTEXT:
            case MySQLParser.LINESTRINGFROMWKB:
            case MySQLParser.LN:
            case MySQLParser.LOAD_FILE:
            case MySQLParser.LOCATE:
            case MySQLParser.LOG:
            case MySQLParser.LOG10:
            case MySQLParser.LOG2:
            case MySQLParser.LOWER:
            case MySQLParser.LPAD:
            case MySQLParser.LTRIM:
            case MySQLParser.MAKEDATE:
            case MySQLParser.MAKETIME:
            case MySQLParser.MAKE_SET:
            case MySQLParser.MASTER_POS_WAIT:
            case MySQLParser.MBRCONTAINS:
            case MySQLParser.MBRDISJOINT:
            case MySQLParser.MBREQUAL:
            case MySQLParser.MBRINTERSECTS:
            case MySQLParser.MBROVERLAPS:
            case MySQLParser.MBRTOUCHES:
            case MySQLParser.MBRWITHIN:
            case MySQLParser.MD5:
            case MySQLParser.MLINEFROMTEXT:
            case MySQLParser.MLINEFROMWKB:
            case MySQLParser.MONTHNAME:
            case MySQLParser.MPOINTFROMTEXT:
            case MySQLParser.MPOINTFROMWKB:
            case MySQLParser.MPOLYFROMTEXT:
            case MySQLParser.MPOLYFROMWKB:
            case MySQLParser.MULTILINESTRINGFROMTEXT:
            case MySQLParser.MULTILINESTRINGFROMWKB:
            case MySQLParser.MULTIPOINTFROMTEXT:
            case MySQLParser.MULTIPOINTFROMWKB:
            case MySQLParser.MULTIPOLYGONFROMTEXT:
            case MySQLParser.MULTIPOLYGONFROMWKB:
            case MySQLParser.NAME_CONST:
            case MySQLParser.NULLIF:
            case MySQLParser.NUMGEOMETRIES:
            case MySQLParser.NUMINTERIORRINGS:
            case MySQLParser.NUMPOINTS:
            case MySQLParser.OCT:
            case MySQLParser.OCTET_LENGTH:
            case MySQLParser.ORD:
            case MySQLParser.OVERLAPS:
            case MySQLParser.PERIOD_ADD:
            case MySQLParser.PERIOD_DIFF:
            case MySQLParser.PI:
            case MySQLParser.POINTFROMTEXT:
            case MySQLParser.POINTFROMWKB:
            case MySQLParser.POINTN:
            case MySQLParser.POLYFROMTEXT:
            case MySQLParser.POLYFROMWKB:
            case MySQLParser.POLYGONFROMTEXT:
            case MySQLParser.POLYGONFROMWKB:
            case MySQLParser.POW:
            case MySQLParser.POWER:
            case MySQLParser.QUOTE:
            case MySQLParser.RADIANS:
            case MySQLParser.RAND:
            case MySQLParser.RANDOM_BYTES:
            case MySQLParser.RELEASE_LOCK:
            case MySQLParser.REVERSE:
            case MySQLParser.ROUND:
            case MySQLParser.ROW_COUNT:
            case MySQLParser.RPAD:
            case MySQLParser.RTRIM:
            case MySQLParser.SEC_TO_TIME:
            case MySQLParser.SESSION_USER:
            case MySQLParser.SHA:
            case MySQLParser.SHA1:
            case MySQLParser.SHA2:
            case MySQLParser.SCHEMA_NAME:
            case MySQLParser.SIGN:
            case MySQLParser.SIN:
            case MySQLParser.SLEEP:
            case MySQLParser.SOUNDEX:
            case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySQLParser.SQRT:
            case MySQLParser.SRID:
            case MySQLParser.STARTPOINT:
            case MySQLParser.STRCMP:
            case MySQLParser.STR_TO_DATE:
            case MySQLParser.ST_AREA:
            case MySQLParser.ST_ASBINARY:
            case MySQLParser.ST_ASTEXT:
            case MySQLParser.ST_ASWKB:
            case MySQLParser.ST_ASWKT:
            case MySQLParser.ST_BUFFER:
            case MySQLParser.ST_CENTROID:
            case MySQLParser.ST_CONTAINS:
            case MySQLParser.ST_CROSSES:
            case MySQLParser.ST_DIFFERENCE:
            case MySQLParser.ST_DIMENSION:
            case MySQLParser.ST_DISJOINT:
            case MySQLParser.ST_DISTANCE:
            case MySQLParser.ST_ENDPOINT:
            case MySQLParser.ST_ENVELOPE:
            case MySQLParser.ST_EQUALS:
            case MySQLParser.ST_EXTERIORRING:
            case MySQLParser.ST_GEOMCOLLFROMTEXT:
            case MySQLParser.ST_GEOMCOLLFROMTXT:
            case MySQLParser.ST_GEOMCOLLFROMWKB:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.ST_GEOMETRYFROMTEXT:
            case MySQLParser.ST_GEOMETRYFROMWKB:
            case MySQLParser.ST_GEOMETRYN:
            case MySQLParser.ST_GEOMETRYTYPE:
            case MySQLParser.ST_GEOMFROMTEXT:
            case MySQLParser.ST_GEOMFROMWKB:
            case MySQLParser.ST_INTERIORRINGN:
            case MySQLParser.ST_INTERSECTION:
            case MySQLParser.ST_INTERSECTS:
            case MySQLParser.ST_ISCLOSED:
            case MySQLParser.ST_ISEMPTY:
            case MySQLParser.ST_ISSIMPLE:
            case MySQLParser.ST_LINEFROMTEXT:
            case MySQLParser.ST_LINEFROMWKB:
            case MySQLParser.ST_LINESTRINGFROMTEXT:
            case MySQLParser.ST_LINESTRINGFROMWKB:
            case MySQLParser.ST_NUMGEOMETRIES:
            case MySQLParser.ST_NUMINTERIORRING:
            case MySQLParser.ST_NUMINTERIORRINGS:
            case MySQLParser.ST_NUMPOINTS:
            case MySQLParser.ST_OVERLAPS:
            case MySQLParser.ST_POINTFROMTEXT:
            case MySQLParser.ST_POINTFROMWKB:
            case MySQLParser.ST_POINTN:
            case MySQLParser.ST_POLYFROMTEXT:
            case MySQLParser.ST_POLYFROMWKB:
            case MySQLParser.ST_POLYGONFROMTEXT:
            case MySQLParser.ST_POLYGONFROMWKB:
            case MySQLParser.ST_SRID:
            case MySQLParser.ST_STARTPOINT:
            case MySQLParser.ST_SYMDIFFERENCE:
            case MySQLParser.ST_TOUCHES:
            case MySQLParser.ST_UNION:
            case MySQLParser.ST_WITHIN:
            case MySQLParser.ST_X:
            case MySQLParser.ST_Y:
            case MySQLParser.SUBDATE:
            case MySQLParser.SUBSTRING_INDEX:
            case MySQLParser.SUBTIME:
            case MySQLParser.SYSTEM_USER:
            case MySQLParser.TAN:
            case MySQLParser.TIMEDIFF:
            case MySQLParser.TIMESTAMPADD:
            case MySQLParser.TIMESTAMPDIFF:
            case MySQLParser.TIME_FORMAT:
            case MySQLParser.TIME_TO_SEC:
            case MySQLParser.TOUCHES:
            case MySQLParser.TO_BASE64:
            case MySQLParser.TO_DAYS:
            case MySQLParser.TO_SECONDS:
            case MySQLParser.UCASE:
            case MySQLParser.UNCOMPRESS:
            case MySQLParser.UNCOMPRESSED_LENGTH:
            case MySQLParser.UNHEX:
            case MySQLParser.UNIX_TIMESTAMP:
            case MySQLParser.UPDATEXML:
            case MySQLParser.UPPER:
            case MySQLParser.UUID:
            case MySQLParser.UUID_SHORT:
            case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
            case MySQLParser.VERSION:
            case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySQLParser.WEEKDAY:
            case MySQLParser.WEEKOFYEAR:
            case MySQLParser.WEIGHT_STRING:
            case MySQLParser.WITHIN:
            case MySQLParser.YEARWEEK:
            case MySQLParser.Y_FUNCTION:
            case MySQLParser.X_FUNCTION:
            case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySQLParser.STRING_LITERAL:
            case MySQLParser.ID:
            case MySQLParser.REVERSE_QUOTE_ID:
                this.state = 5263;
                localctx.partitionList = this.uidList();
                break;
            case MySQLParser.ALL:
                this.state = 5264;
                this.match(MySQLParser.ALL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 5267;
            this.match(MySQLParser.RR_BRACKET);
        }

        this.state = 5277;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,760,this._ctx);
        if(la_===1) {
            this.state = 5271;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.INDEX || _la===MySQLParser.KEY) {
                this.state = 5270;
                localctx.indexFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.INDEX || _la===MySQLParser.KEY)) {
                    localctx.indexFormat = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 5273;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5274;
            localctx.indexList = this.uidList();
            this.state = 5275;
            this.match(MySQLParser.RR_BRACKET);

        }
        this.state = 5281;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.IGNORE) {
            this.state = 5279;
            this.match(MySQLParser.IGNORE);
            this.state = 5280;
            this.match(MySQLParser.LEAVES);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleDescribeStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_simpleDescribeStatement;
    this.command = null; // Token
    this.column = null; // UidContext
    this.pattern = null; // Token
    return this;
}

SimpleDescribeStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleDescribeStatementContext.prototype.constructor = SimpleDescribeStatementContext;

SimpleDescribeStatementContext.prototype.tableName = function() {
    return this.getTypedRuleContext(TableNameContext,0);
};

SimpleDescribeStatementContext.prototype.EXPLAIN = function() {
    return this.getToken(MySQLParser.EXPLAIN, 0);
};

SimpleDescribeStatementContext.prototype.DESCRIBE = function() {
    return this.getToken(MySQLParser.DESCRIBE, 0);
};

SimpleDescribeStatementContext.prototype.DESC = function() {
    return this.getToken(MySQLParser.DESC, 0);
};

SimpleDescribeStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

SimpleDescribeStatementContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

SimpleDescribeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleDescribeStatement(this);
	}
};

SimpleDescribeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleDescribeStatement(this);
	}
};

SimpleDescribeStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleDescribeStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SimpleDescribeStatementContext = SimpleDescribeStatementContext;

MySQLParser.prototype.simpleDescribeStatement = function() {

    var localctx = new SimpleDescribeStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, MySQLParser.RULE_simpleDescribeStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5283;
        localctx.command = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (MySQLParser.DESC - 41)) | (1 << (MySQLParser.DESCRIBE - 41)) | (1 << (MySQLParser.EXPLAIN - 41)))) !== 0))) {
            localctx.command = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 5284;
        this.tableName();
        this.state = 5287;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,762,this._ctx);
        if(la_===1) {
            this.state = 5285;
            localctx.column = this.uid();

        } else if(la_===2) {
            this.state = 5286;
            localctx.pattern = this.match(MySQLParser.STRING_LITERAL);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FullDescribeStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fullDescribeStatement;
    this.command = null; // Token
    this.formatType = null; // Token
    this.formatValue = null; // Token
    return this;
}

FullDescribeStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FullDescribeStatementContext.prototype.constructor = FullDescribeStatementContext;

FullDescribeStatementContext.prototype.describeObjectClause = function() {
    return this.getTypedRuleContext(DescribeObjectClauseContext,0);
};

FullDescribeStatementContext.prototype.EXPLAIN = function() {
    return this.getToken(MySQLParser.EXPLAIN, 0);
};

FullDescribeStatementContext.prototype.DESCRIBE = function() {
    return this.getToken(MySQLParser.DESCRIBE, 0);
};

FullDescribeStatementContext.prototype.DESC = function() {
    return this.getToken(MySQLParser.DESC, 0);
};

FullDescribeStatementContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

FullDescribeStatementContext.prototype.EXTENDED = function() {
    return this.getToken(MySQLParser.EXTENDED, 0);
};

FullDescribeStatementContext.prototype.PARTITIONS = function() {
    return this.getToken(MySQLParser.PARTITIONS, 0);
};

FullDescribeStatementContext.prototype.FORMAT = function() {
    return this.getToken(MySQLParser.FORMAT, 0);
};

FullDescribeStatementContext.prototype.TRADITIONAL = function() {
    return this.getToken(MySQLParser.TRADITIONAL, 0);
};

FullDescribeStatementContext.prototype.JSON = function() {
    return this.getToken(MySQLParser.JSON, 0);
};

FullDescribeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFullDescribeStatement(this);
	}
};

FullDescribeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFullDescribeStatement(this);
	}
};

FullDescribeStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFullDescribeStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FullDescribeStatementContext = FullDescribeStatementContext;

MySQLParser.prototype.fullDescribeStatement = function() {

    var localctx = new FullDescribeStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, MySQLParser.RULE_fullDescribeStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5289;
        localctx.command = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (MySQLParser.DESC - 41)) | (1 << (MySQLParser.DESCRIBE - 41)) | (1 << (MySQLParser.EXPLAIN - 41)))) !== 0))) {
            localctx.command = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 5293;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.EXTENDED || _la===MySQLParser.PARTITIONS || _la===MySQLParser.FORMAT) {
            this.state = 5290;
            localctx.formatType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.EXTENDED || _la===MySQLParser.PARTITIONS || _la===MySQLParser.FORMAT)) {
                localctx.formatType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5291;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 5292;
            localctx.formatValue = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.JSON || _la===MySQLParser.TRADITIONAL)) {
                localctx.formatValue = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 5295;
        this.describeObjectClause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HelpStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_helpStatement;
    return this;
}

HelpStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HelpStatementContext.prototype.constructor = HelpStatementContext;

HelpStatementContext.prototype.HELP = function() {
    return this.getToken(MySQLParser.HELP, 0);
};

HelpStatementContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

HelpStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHelpStatement(this);
	}
};

HelpStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHelpStatement(this);
	}
};

HelpStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHelpStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.HelpStatementContext = HelpStatementContext;

MySQLParser.prototype.helpStatement = function() {

    var localctx = new HelpStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, MySQLParser.RULE_helpStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5297;
        this.match(MySQLParser.HELP);
        this.state = 5298;
        this.match(MySQLParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_useStatement;
    return this;
}

UseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UseStatementContext.prototype.constructor = UseStatementContext;

UseStatementContext.prototype.USE = function() {
    return this.getToken(MySQLParser.USE, 0);
};

UseStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

UseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUseStatement(this);
	}
};

UseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUseStatement(this);
	}
};

UseStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUseStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UseStatementContext = UseStatementContext;

MySQLParser.prototype.useStatement = function() {

    var localctx = new UseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, MySQLParser.RULE_useStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5300;
        this.match(MySQLParser.USE);
        this.state = 5301;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SignalStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_signalStatement;
    return this;
}

SignalStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignalStatementContext.prototype.constructor = SignalStatementContext;

SignalStatementContext.prototype.SIGNAL = function() {
    return this.getToken(MySQLParser.SIGNAL, 0);
};

SignalStatementContext.prototype.ID = function() {
    return this.getToken(MySQLParser.ID, 0);
};

SignalStatementContext.prototype.REVERSE_QUOTE_ID = function() {
    return this.getToken(MySQLParser.REVERSE_QUOTE_ID, 0);
};

SignalStatementContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

SignalStatementContext.prototype.signalConditionInformation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SignalConditionInformationContext);
    } else {
        return this.getTypedRuleContext(SignalConditionInformationContext,i);
    }
};

SignalStatementContext.prototype.SQLSTATE = function() {
    return this.getToken(MySQLParser.SQLSTATE, 0);
};

SignalStatementContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

SignalStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


SignalStatementContext.prototype.VALUE = function() {
    return this.getToken(MySQLParser.VALUE, 0);
};

SignalStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSignalStatement(this);
	}
};

SignalStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSignalStatement(this);
	}
};

SignalStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSignalStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SignalStatementContext = SignalStatementContext;

MySQLParser.prototype.signalStatement = function() {

    var localctx = new SignalStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, MySQLParser.RULE_signalStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5303;
        this.match(MySQLParser.SIGNAL);
        this.state = 5311;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.SQLSTATE:
            this.state = 5304;
            this.match(MySQLParser.SQLSTATE);
            this.state = 5306;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.VALUE) {
                this.state = 5305;
                this.match(MySQLParser.VALUE);
            }

            this.state = 5308;
            this.stringLiteral();
            break;
        case MySQLParser.ID:
            this.state = 5309;
            this.match(MySQLParser.ID);
            break;
        case MySQLParser.REVERSE_QUOTE_ID:
            this.state = 5310;
            this.match(MySQLParser.REVERSE_QUOTE_ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 5322;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,767,this._ctx);
        if(la_===1) {
            this.state = 5313;
            this.match(MySQLParser.SET);
            this.state = 5314;
            this.signalConditionInformation();
            this.state = 5319;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 5315;
                this.match(MySQLParser.COMMA);
                this.state = 5316;
                this.signalConditionInformation();
                this.state = 5321;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResignalStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_resignalStatement;
    return this;
}

ResignalStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResignalStatementContext.prototype.constructor = ResignalStatementContext;

ResignalStatementContext.prototype.RESIGNAL = function() {
    return this.getToken(MySQLParser.RESIGNAL, 0);
};

ResignalStatementContext.prototype.ID = function() {
    return this.getToken(MySQLParser.ID, 0);
};

ResignalStatementContext.prototype.REVERSE_QUOTE_ID = function() {
    return this.getToken(MySQLParser.REVERSE_QUOTE_ID, 0);
};

ResignalStatementContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

ResignalStatementContext.prototype.signalConditionInformation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SignalConditionInformationContext);
    } else {
        return this.getTypedRuleContext(SignalConditionInformationContext,i);
    }
};

ResignalStatementContext.prototype.SQLSTATE = function() {
    return this.getToken(MySQLParser.SQLSTATE, 0);
};

ResignalStatementContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

ResignalStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


ResignalStatementContext.prototype.VALUE = function() {
    return this.getToken(MySQLParser.VALUE, 0);
};

ResignalStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterResignalStatement(this);
	}
};

ResignalStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitResignalStatement(this);
	}
};

ResignalStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitResignalStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ResignalStatementContext = ResignalStatementContext;

MySQLParser.prototype.resignalStatement = function() {

    var localctx = new ResignalStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, MySQLParser.RULE_resignalStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5324;
        this.match(MySQLParser.RESIGNAL);
        this.state = 5332;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case MySQLParser.SQLSTATE:
        	this.state = 5325;
        	this.match(MySQLParser.SQLSTATE);
        	this.state = 5327;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===MySQLParser.VALUE) {
        	    this.state = 5326;
        	    this.match(MySQLParser.VALUE);
        	}

        	this.state = 5329;
        	this.stringLiteral();
        	break;
        case MySQLParser.ID:
        	this.state = 5330;
        	this.match(MySQLParser.ID);
        	break;
        case MySQLParser.REVERSE_QUOTE_ID:
        	this.state = 5331;
        	this.match(MySQLParser.REVERSE_QUOTE_ID);
        	break;
        case MySQLParser.EOF:
        case MySQLParser.ALTER:
        case MySQLParser.ANALYZE:
        case MySQLParser.CALL:
        case MySQLParser.CHANGE:
        case MySQLParser.CHECK:
        case MySQLParser.CREATE:
        case MySQLParser.DELETE:
        case MySQLParser.DESC:
        case MySQLParser.DESCRIBE:
        case MySQLParser.DROP:
        case MySQLParser.EXPLAIN:
        case MySQLParser.GET:
        case MySQLParser.GRANT:
        case MySQLParser.INSERT:
        case MySQLParser.KILL:
        case MySQLParser.LOAD:
        case MySQLParser.LOCK:
        case MySQLParser.OPTIMIZE:
        case MySQLParser.PURGE:
        case MySQLParser.RELEASE:
        case MySQLParser.RENAME:
        case MySQLParser.REPLACE:
        case MySQLParser.RESIGNAL:
        case MySQLParser.REVOKE:
        case MySQLParser.SELECT:
        case MySQLParser.SET:
        case MySQLParser.SHOW:
        case MySQLParser.SIGNAL:
        case MySQLParser.UNLOCK:
        case MySQLParser.UPDATE:
        case MySQLParser.USE:
        case MySQLParser.BEGIN:
        case MySQLParser.BINLOG:
        case MySQLParser.CACHE:
        case MySQLParser.CHECKSUM:
        case MySQLParser.COMMIT:
        case MySQLParser.DEALLOCATE:
        case MySQLParser.DO:
        case MySQLParser.FLUSH:
        case MySQLParser.HANDLER:
        case MySQLParser.HELP:
        case MySQLParser.INSTALL:
        case MySQLParser.PREPARE:
        case MySQLParser.REPAIR:
        case MySQLParser.RESET:
        case MySQLParser.ROLLBACK:
        case MySQLParser.SAVEPOINT:
        case MySQLParser.START:
        case MySQLParser.STOP:
        case MySQLParser.TRUNCATE:
        case MySQLParser.UNINSTALL:
        case MySQLParser.XA:
        case MySQLParser.EXECUTE:
        case MySQLParser.SHUTDOWN:
        case MySQLParser.MINUSMINUS:
        case MySQLParser.LR_BRACKET:
        case MySQLParser.SEMI:
        	break;
        default:
        	break;
        }
        this.state = 5343;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,771,this._ctx);
        if(la_===1) {
            this.state = 5334;
            this.match(MySQLParser.SET);
            this.state = 5335;
            this.signalConditionInformation();
            this.state = 5340;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 5336;
                this.match(MySQLParser.COMMA);
                this.state = 5337;
                this.signalConditionInformation();
                this.state = 5342;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SignalConditionInformationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_signalConditionInformation;
    return this;
}

SignalConditionInformationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignalConditionInformationContext.prototype.constructor = SignalConditionInformationContext;

SignalConditionInformationContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

SignalConditionInformationContext.prototype.CLASS_ORIGIN = function() {
    return this.getToken(MySQLParser.CLASS_ORIGIN, 0);
};

SignalConditionInformationContext.prototype.SUBCLASS_ORIGIN = function() {
    return this.getToken(MySQLParser.SUBCLASS_ORIGIN, 0);
};

SignalConditionInformationContext.prototype.MESSAGE_TEXT = function() {
    return this.getToken(MySQLParser.MESSAGE_TEXT, 0);
};

SignalConditionInformationContext.prototype.MYSQL_ERRNO = function() {
    return this.getToken(MySQLParser.MYSQL_ERRNO, 0);
};

SignalConditionInformationContext.prototype.CONSTRAINT_CATALOG = function() {
    return this.getToken(MySQLParser.CONSTRAINT_CATALOG, 0);
};

SignalConditionInformationContext.prototype.CONSTRAINT_SCHEMA = function() {
    return this.getToken(MySQLParser.CONSTRAINT_SCHEMA, 0);
};

SignalConditionInformationContext.prototype.CONSTRAINT_NAME = function() {
    return this.getToken(MySQLParser.CONSTRAINT_NAME, 0);
};

SignalConditionInformationContext.prototype.CATALOG_NAME = function() {
    return this.getToken(MySQLParser.CATALOG_NAME, 0);
};

SignalConditionInformationContext.prototype.SCHEMA_NAME = function() {
    return this.getToken(MySQLParser.SCHEMA_NAME, 0);
};

SignalConditionInformationContext.prototype.TABLE_NAME = function() {
    return this.getToken(MySQLParser.TABLE_NAME, 0);
};

SignalConditionInformationContext.prototype.COLUMN_NAME = function() {
    return this.getToken(MySQLParser.COLUMN_NAME, 0);
};

SignalConditionInformationContext.prototype.CURSOR_NAME = function() {
    return this.getToken(MySQLParser.CURSOR_NAME, 0);
};

SignalConditionInformationContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

SignalConditionInformationContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(MySQLParser.DECIMAL_LITERAL, 0);
};

SignalConditionInformationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSignalConditionInformation(this);
	}
};

SignalConditionInformationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSignalConditionInformation(this);
	}
};

SignalConditionInformationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSignalConditionInformation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SignalConditionInformationContext = SignalConditionInformationContext;

MySQLParser.prototype.signalConditionInformation = function() {

    var localctx = new SignalConditionInformationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 488, MySQLParser.RULE_signalConditionInformation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5345;
        _la = this._input.LA(1);
        if(!(((((_la - 297)) & ~0x1f) == 0 && ((1 << (_la - 297)) & ((1 << (MySQLParser.CLASS_ORIGIN - 297)) | (1 << (MySQLParser.COLUMN_NAME - 297)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 297)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 297)) | (1 << (MySQLParser.CONSTRAINT_NAME - 297)) | (1 << (MySQLParser.CURSOR_NAME - 297)))) !== 0) || _la===MySQLParser.MESSAGE_TEXT || _la===MySQLParser.MYSQL_ERRNO || _la===MySQLParser.SUBCLASS_ORIGIN || _la===MySQLParser.TABLE_NAME || _la===MySQLParser.CATALOG_NAME || _la===MySQLParser.SCHEMA_NAME)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 5346;
        this.match(MySQLParser.EQUAL_SYMBOL);
        this.state = 5349;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.START_NATIONAL_STRING_LITERAL:
        case MySQLParser.STRING_LITERAL:
        case MySQLParser.STRING_CHARSET_NAME:
            this.state = 5347;
            this.stringLiteral();
            break;
        case MySQLParser.DECIMAL_LITERAL:
            this.state = 5348;
            this.match(MySQLParser.DECIMAL_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DiagnosticsStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_diagnosticsStatement;
    return this;
}

DiagnosticsStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DiagnosticsStatementContext.prototype.constructor = DiagnosticsStatementContext;

DiagnosticsStatementContext.prototype.GET = function() {
    return this.getToken(MySQLParser.GET, 0);
};

DiagnosticsStatementContext.prototype.DIAGNOSTICS = function() {
    return this.getToken(MySQLParser.DIAGNOSTICS, 0);
};

DiagnosticsStatementContext.prototype.CURRENT = function() {
    return this.getToken(MySQLParser.CURRENT, 0);
};

DiagnosticsStatementContext.prototype.STACKED = function() {
    return this.getToken(MySQLParser.STACKED, 0);
};

DiagnosticsStatementContext.prototype.variableClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableClauseContext);
    } else {
        return this.getTypedRuleContext(VariableClauseContext,i);
    }
};

DiagnosticsStatementContext.prototype.EQUAL_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.EQUAL_SYMBOL);
    } else {
        return this.getToken(MySQLParser.EQUAL_SYMBOL, i);
    }
};


DiagnosticsStatementContext.prototype.CONDITION = function() {
    return this.getToken(MySQLParser.CONDITION, 0);
};

DiagnosticsStatementContext.prototype.diagnosticsConditionInformationName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DiagnosticsConditionInformationNameContext);
    } else {
        return this.getTypedRuleContext(DiagnosticsConditionInformationNameContext,i);
    }
};

DiagnosticsStatementContext.prototype.NUMBER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.NUMBER);
    } else {
        return this.getToken(MySQLParser.NUMBER, i);
    }
};


DiagnosticsStatementContext.prototype.ROW_COUNT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.ROW_COUNT);
    } else {
        return this.getToken(MySQLParser.ROW_COUNT, i);
    }
};


DiagnosticsStatementContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

DiagnosticsStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


DiagnosticsStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDiagnosticsStatement(this);
	}
};

DiagnosticsStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDiagnosticsStatement(this);
	}
};

DiagnosticsStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDiagnosticsStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DiagnosticsStatementContext = DiagnosticsStatementContext;

MySQLParser.prototype.diagnosticsStatement = function() {

    var localctx = new DiagnosticsStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 490, MySQLParser.RULE_diagnosticsStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5351;
        this.match(MySQLParser.GET);
        this.state = 5353;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.CURRENT || _la===MySQLParser.STACKED) {
            this.state = 5352;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CURRENT || _la===MySQLParser.STACKED)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 5355;
        this.match(MySQLParser.DIAGNOSTICS);
        this.state = 5387;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CURRENT:
        case MySQLParser.DATABASE:
        case MySQLParser.DIAGNOSTICS:
        case MySQLParser.LEFT:
        case MySQLParser.NUMBER:
        case MySQLParser.RIGHT:
        case MySQLParser.STACKED:
        case MySQLParser.DATE:
        case MySQLParser.TIME:
        case MySQLParser.TIMESTAMP:
        case MySQLParser.DATETIME:
        case MySQLParser.YEAR:
        case MySQLParser.TEXT:
        case MySQLParser.ENUM:
        case MySQLParser.SERIAL:
        case MySQLParser.JSON_VALID:
        case MySQLParser.JSON_SCHEMA_VALID:
        case MySQLParser.COUNT:
        case MySQLParser.POSITION:
        case MySQLParser.ACCOUNT:
        case MySQLParser.ACTION:
        case MySQLParser.AFTER:
        case MySQLParser.AGGREGATE:
        case MySQLParser.ALGORITHM:
        case MySQLParser.ANY:
        case MySQLParser.AT:
        case MySQLParser.AUTHORS:
        case MySQLParser.AUTOCOMMIT:
        case MySQLParser.AUTOEXTEND_SIZE:
        case MySQLParser.AUTO_INCREMENT:
        case MySQLParser.AVG_ROW_LENGTH:
        case MySQLParser.BEGIN:
        case MySQLParser.BINLOG:
        case MySQLParser.BIT:
        case MySQLParser.BLOCK:
        case MySQLParser.BOOL:
        case MySQLParser.BOOLEAN:
        case MySQLParser.BTREE:
        case MySQLParser.CACHE:
        case MySQLParser.CASCADED:
        case MySQLParser.CHAIN:
        case MySQLParser.CHANGED:
        case MySQLParser.CHANNEL:
        case MySQLParser.CHECKSUM:
        case MySQLParser.PAGE_CHECKSUM:
        case MySQLParser.CIPHER:
        case MySQLParser.CLASS_ORIGIN:
        case MySQLParser.CLIENT:
        case MySQLParser.CLOSE:
        case MySQLParser.COALESCE:
        case MySQLParser.CODE:
        case MySQLParser.COLUMNS:
        case MySQLParser.COLUMN_FORMAT:
        case MySQLParser.COLUMN_NAME:
        case MySQLParser.COMMENT:
        case MySQLParser.COMMIT:
        case MySQLParser.COMPACT:
        case MySQLParser.COMPLETION:
        case MySQLParser.COMPRESSED:
        case MySQLParser.COMPRESSION:
        case MySQLParser.CONCURRENT:
        case MySQLParser.CONNECTION:
        case MySQLParser.CONSISTENT:
        case MySQLParser.CONSTRAINT_CATALOG:
        case MySQLParser.CONSTRAINT_SCHEMA:
        case MySQLParser.CONSTRAINT_NAME:
        case MySQLParser.CONTAINS:
        case MySQLParser.CONTEXT:
        case MySQLParser.CONTRIBUTORS:
        case MySQLParser.COPY:
        case MySQLParser.CPU:
        case MySQLParser.CURSOR_NAME:
        case MySQLParser.DATA:
        case MySQLParser.DATAFILE:
        case MySQLParser.DEALLOCATE:
        case MySQLParser.DEFAULT_AUTH:
        case MySQLParser.DEFINER:
        case MySQLParser.DELAY_KEY_WRITE:
        case MySQLParser.DES_KEY_FILE:
        case MySQLParser.DIRECTORY:
        case MySQLParser.DISABLE:
        case MySQLParser.DISCARD:
        case MySQLParser.DISK:
        case MySQLParser.DO:
        case MySQLParser.DUMPFILE:
        case MySQLParser.DUPLICATE:
        case MySQLParser.DYNAMIC:
        case MySQLParser.ENABLE:
        case MySQLParser.ENCRYPTION:
        case MySQLParser.END:
        case MySQLParser.ENDS:
        case MySQLParser.ENGINE:
        case MySQLParser.ENGINES:
        case MySQLParser.ERROR:
        case MySQLParser.ERRORS:
        case MySQLParser.ESCAPE:
        case MySQLParser.EVEN:
        case MySQLParser.EVENT:
        case MySQLParser.EVENTS:
        case MySQLParser.EVERY:
        case MySQLParser.EXCHANGE:
        case MySQLParser.EXCLUSIVE:
        case MySQLParser.EXPIRE:
        case MySQLParser.EXPORT:
        case MySQLParser.EXTENDED:
        case MySQLParser.EXTENT_SIZE:
        case MySQLParser.FAST:
        case MySQLParser.FAULTS:
        case MySQLParser.FIELDS:
        case MySQLParser.FILE_BLOCK_SIZE:
        case MySQLParser.FILTER:
        case MySQLParser.FIRST:
        case MySQLParser.FIXED:
        case MySQLParser.FLUSH:
        case MySQLParser.FOLLOWS:
        case MySQLParser.FOUND:
        case MySQLParser.FULL:
        case MySQLParser.FUNCTION:
        case MySQLParser.GENERAL:
        case MySQLParser.GLOBAL:
        case MySQLParser.GRANTS:
        case MySQLParser.GROUP_REPLICATION:
        case MySQLParser.HANDLER:
        case MySQLParser.HASH:
        case MySQLParser.HELP:
        case MySQLParser.HOST:
        case MySQLParser.HOSTS:
        case MySQLParser.IDENTIFIED:
        case MySQLParser.IGNORE_SERVER_IDS:
        case MySQLParser.IMPORT:
        case MySQLParser.INDEXES:
        case MySQLParser.INITIAL_SIZE:
        case MySQLParser.INPLACE:
        case MySQLParser.INSERT_METHOD:
        case MySQLParser.INSTALL:
        case MySQLParser.INSTANCE:
        case MySQLParser.INVISIBLE:
        case MySQLParser.INVOKER:
        case MySQLParser.IO:
        case MySQLParser.IO_THREAD:
        case MySQLParser.IPC:
        case MySQLParser.ISOLATION:
        case MySQLParser.ISSUER:
        case MySQLParser.JSON:
        case MySQLParser.KEY_BLOCK_SIZE:
        case MySQLParser.LANGUAGE:
        case MySQLParser.LAST:
        case MySQLParser.LEAVES:
        case MySQLParser.LESS:
        case MySQLParser.LEVEL:
        case MySQLParser.LIST:
        case MySQLParser.LOCAL:
        case MySQLParser.LOGFILE:
        case MySQLParser.LOGS:
        case MySQLParser.MASTER:
        case MySQLParser.MASTER_AUTO_POSITION:
        case MySQLParser.MASTER_CONNECT_RETRY:
        case MySQLParser.MASTER_DELAY:
        case MySQLParser.MASTER_HEARTBEAT_PERIOD:
        case MySQLParser.MASTER_HOST:
        case MySQLParser.MASTER_LOG_FILE:
        case MySQLParser.MASTER_LOG_POS:
        case MySQLParser.MASTER_PASSWORD:
        case MySQLParser.MASTER_PORT:
        case MySQLParser.MASTER_RETRY_COUNT:
        case MySQLParser.MASTER_SSL:
        case MySQLParser.MASTER_SSL_CA:
        case MySQLParser.MASTER_SSL_CAPATH:
        case MySQLParser.MASTER_SSL_CERT:
        case MySQLParser.MASTER_SSL_CIPHER:
        case MySQLParser.MASTER_SSL_CRL:
        case MySQLParser.MASTER_SSL_CRLPATH:
        case MySQLParser.MASTER_SSL_KEY:
        case MySQLParser.MASTER_TLS_VERSION:
        case MySQLParser.MASTER_USER:
        case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser.MAX_QUERIES_PER_HOUR:
        case MySQLParser.MAX_ROWS:
        case MySQLParser.MAX_SIZE:
        case MySQLParser.MAX_UPDATES_PER_HOUR:
        case MySQLParser.MAX_USER_CONNECTIONS:
        case MySQLParser.MEDIUM:
        case MySQLParser.MERGE:
        case MySQLParser.MESSAGE_TEXT:
        case MySQLParser.MID:
        case MySQLParser.MIGRATE:
        case MySQLParser.MIN_ROWS:
        case MySQLParser.MODE:
        case MySQLParser.MODIFY:
        case MySQLParser.MUTEX:
        case MySQLParser.MYSQL:
        case MySQLParser.MYSQL_ERRNO:
        case MySQLParser.NAME:
        case MySQLParser.NAMES:
        case MySQLParser.NCHAR:
        case MySQLParser.NEVER:
        case MySQLParser.NEXT:
        case MySQLParser.NO:
        case MySQLParser.NODEGROUP:
        case MySQLParser.NONE:
        case MySQLParser.OFFLINE:
        case MySQLParser.OFFSET:
        case MySQLParser.OJ:
        case MySQLParser.OLD_PASSWORD:
        case MySQLParser.ONE:
        case MySQLParser.ONLINE:
        case MySQLParser.ONLY:
        case MySQLParser.OPEN:
        case MySQLParser.OPTIMIZER_COSTS:
        case MySQLParser.OPTIONS:
        case MySQLParser.OWNER:
        case MySQLParser.PACK_KEYS:
        case MySQLParser.PAGE:
        case MySQLParser.PARSER:
        case MySQLParser.PARTIAL:
        case MySQLParser.PARTITIONING:
        case MySQLParser.PARTITIONS:
        case MySQLParser.PASSWORD:
        case MySQLParser.PHASE:
        case MySQLParser.PLUGIN:
        case MySQLParser.PLUGIN_DIR:
        case MySQLParser.PLUGINS:
        case MySQLParser.PORT:
        case MySQLParser.PRECEDES:
        case MySQLParser.PREPARE:
        case MySQLParser.PRESERVE:
        case MySQLParser.PREV:
        case MySQLParser.PROCESSLIST:
        case MySQLParser.PROFILE:
        case MySQLParser.PROFILES:
        case MySQLParser.PROXY:
        case MySQLParser.QUERY:
        case MySQLParser.QUICK:
        case MySQLParser.REBUILD:
        case MySQLParser.RECOVER:
        case MySQLParser.REDO_BUFFER_SIZE:
        case MySQLParser.REDUNDANT:
        case MySQLParser.RELAY:
        case MySQLParser.RELAY_LOG_FILE:
        case MySQLParser.RELAY_LOG_POS:
        case MySQLParser.RELAYLOG:
        case MySQLParser.REMOVE:
        case MySQLParser.REORGANIZE:
        case MySQLParser.REPAIR:
        case MySQLParser.REPLICATE_DO_DB:
        case MySQLParser.REPLICATE_DO_TABLE:
        case MySQLParser.REPLICATE_IGNORE_DB:
        case MySQLParser.REPLICATE_IGNORE_TABLE:
        case MySQLParser.REPLICATE_REWRITE_DB:
        case MySQLParser.REPLICATE_WILD_DO_TABLE:
        case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser.REPLICATION:
        case MySQLParser.RESET:
        case MySQLParser.RESUME:
        case MySQLParser.RETURNED_SQLSTATE:
        case MySQLParser.RETURNS:
        case MySQLParser.ROLE:
        case MySQLParser.ROLLBACK:
        case MySQLParser.ROLLUP:
        case MySQLParser.ROTATE:
        case MySQLParser.ROW:
        case MySQLParser.ROWS:
        case MySQLParser.ROW_FORMAT:
        case MySQLParser.SAVEPOINT:
        case MySQLParser.SCHEDULE:
        case MySQLParser.SECURITY:
        case MySQLParser.SERVER:
        case MySQLParser.SESSION:
        case MySQLParser.SHARE:
        case MySQLParser.SHARED:
        case MySQLParser.SIGNED:
        case MySQLParser.SIMPLE:
        case MySQLParser.SLAVE:
        case MySQLParser.SLOW:
        case MySQLParser.SNAPSHOT:
        case MySQLParser.SOCKET:
        case MySQLParser.SOME:
        case MySQLParser.SONAME:
        case MySQLParser.SOUNDS:
        case MySQLParser.SOURCE:
        case MySQLParser.SQL_AFTER_GTIDS:
        case MySQLParser.SQL_AFTER_MTS_GAPS:
        case MySQLParser.SQL_BEFORE_GTIDS:
        case MySQLParser.SQL_BUFFER_RESULT:
        case MySQLParser.SQL_CACHE:
        case MySQLParser.SQL_NO_CACHE:
        case MySQLParser.SQL_THREAD:
        case MySQLParser.START:
        case MySQLParser.STARTS:
        case MySQLParser.STATS_AUTO_RECALC:
        case MySQLParser.STATS_PERSISTENT:
        case MySQLParser.STATS_SAMPLE_PAGES:
        case MySQLParser.STATUS:
        case MySQLParser.STOP:
        case MySQLParser.STORAGE:
        case MySQLParser.STRING:
        case MySQLParser.SUBCLASS_ORIGIN:
        case MySQLParser.SUBJECT:
        case MySQLParser.SUBPARTITION:
        case MySQLParser.SUBPARTITIONS:
        case MySQLParser.SUSPEND:
        case MySQLParser.SWAPS:
        case MySQLParser.SWITCHES:
        case MySQLParser.TABLE_NAME:
        case MySQLParser.TABLESPACE:
        case MySQLParser.TEMPORARY:
        case MySQLParser.TEMPTABLE:
        case MySQLParser.THAN:
        case MySQLParser.TRADITIONAL:
        case MySQLParser.TRANSACTION:
        case MySQLParser.TRANSACTIONAL:
        case MySQLParser.TRIGGERS:
        case MySQLParser.TRUNCATE:
        case MySQLParser.UNDEFINED:
        case MySQLParser.UNDOFILE:
        case MySQLParser.UNDO_BUFFER_SIZE:
        case MySQLParser.UNINSTALL:
        case MySQLParser.UNKNOWN:
        case MySQLParser.UNTIL:
        case MySQLParser.UPGRADE:
        case MySQLParser.USER:
        case MySQLParser.USE_FRM:
        case MySQLParser.USER_RESOURCES:
        case MySQLParser.VALIDATION:
        case MySQLParser.VALUE:
        case MySQLParser.VARIABLES:
        case MySQLParser.VIEW:
        case MySQLParser.VISIBLE:
        case MySQLParser.WAIT:
        case MySQLParser.WARNINGS:
        case MySQLParser.WITHOUT:
        case MySQLParser.WORK:
        case MySQLParser.WRAPPER:
        case MySQLParser.X509:
        case MySQLParser.XA:
        case MySQLParser.XML:
        case MySQLParser.INTERNAL:
        case MySQLParser.QUARTER:
        case MySQLParser.MONTH:
        case MySQLParser.DAY:
        case MySQLParser.HOUR:
        case MySQLParser.MINUTE:
        case MySQLParser.WEEK:
        case MySQLParser.SECOND:
        case MySQLParser.MICROSECOND:
        case MySQLParser.TABLES:
        case MySQLParser.ROUTINE:
        case MySQLParser.EXECUTE:
        case MySQLParser.FILE:
        case MySQLParser.PROCESS:
        case MySQLParser.RELOAD:
        case MySQLParser.SHUTDOWN:
        case MySQLParser.SUPER:
        case MySQLParser.PRIVILEGES:
        case MySQLParser.AUDIT_ADMIN:
        case MySQLParser.BACKUP_ADMIN:
        case MySQLParser.BINLOG_ADMIN:
        case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
        case MySQLParser.CLONE_ADMIN:
        case MySQLParser.CONNECTION_ADMIN:
        case MySQLParser.ENCRYPTION_KEY_ADMIN:
        case MySQLParser.FIREWALL_ADMIN:
        case MySQLParser.FIREWALL_USER:
        case MySQLParser.GROUP_REPLICATION_ADMIN:
        case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
        case MySQLParser.NDB_STORED_USER:
        case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
        case MySQLParser.REPLICATION_APPLIER:
        case MySQLParser.REPLICATION_SLAVE_ADMIN:
        case MySQLParser.RESOURCE_GROUP_ADMIN:
        case MySQLParser.RESOURCE_GROUP_USER:
        case MySQLParser.ROLE_ADMIN:
        case MySQLParser.SESSION_VARIABLES_ADMIN:
        case MySQLParser.SET_USER_ID:
        case MySQLParser.SHOW_ROUTINE:
        case MySQLParser.SYSTEM_VARIABLES_ADMIN:
        case MySQLParser.TABLE_ENCRYPTION_ADMIN:
        case MySQLParser.VERSION_TOKEN_ADMIN:
        case MySQLParser.XA_RECOVER_ADMIN:
        case MySQLParser.ARMSCII8:
        case MySQLParser.ASCII:
        case MySQLParser.BIG5:
        case MySQLParser.CP1250:
        case MySQLParser.CP1251:
        case MySQLParser.CP1256:
        case MySQLParser.CP1257:
        case MySQLParser.CP850:
        case MySQLParser.CP852:
        case MySQLParser.CP866:
        case MySQLParser.CP932:
        case MySQLParser.DEC8:
        case MySQLParser.EUCJPMS:
        case MySQLParser.EUCKR:
        case MySQLParser.GB2312:
        case MySQLParser.GBK:
        case MySQLParser.GEOSTD8:
        case MySQLParser.GREEK:
        case MySQLParser.HEBREW:
        case MySQLParser.HP8:
        case MySQLParser.KEYBCS2:
        case MySQLParser.KOI8R:
        case MySQLParser.KOI8U:
        case MySQLParser.LATIN1:
        case MySQLParser.LATIN2:
        case MySQLParser.LATIN5:
        case MySQLParser.LATIN7:
        case MySQLParser.MACCE:
        case MySQLParser.MACROMAN:
        case MySQLParser.SJIS:
        case MySQLParser.SWE7:
        case MySQLParser.TIS620:
        case MySQLParser.UCS2:
        case MySQLParser.UJIS:
        case MySQLParser.UTF16:
        case MySQLParser.UTF16LE:
        case MySQLParser.UTF32:
        case MySQLParser.UTF8:
        case MySQLParser.UTF8MB3:
        case MySQLParser.UTF8MB4:
        case MySQLParser.ARCHIVE:
        case MySQLParser.BLACKHOLE:
        case MySQLParser.CSV:
        case MySQLParser.FEDERATED:
        case MySQLParser.INNODB:
        case MySQLParser.MEMORY:
        case MySQLParser.MRG_MYISAM:
        case MySQLParser.MYISAM:
        case MySQLParser.NDB:
        case MySQLParser.NDBCLUSTER:
        case MySQLParser.PERFORMANCE_SCHEMA:
        case MySQLParser.TOKUDB:
        case MySQLParser.REPEATABLE:
        case MySQLParser.COMMITTED:
        case MySQLParser.UNCOMMITTED:
        case MySQLParser.SERIALIZABLE:
        case MySQLParser.GEOMETRYCOLLECTION:
        case MySQLParser.LINESTRING:
        case MySQLParser.MULTILINESTRING:
        case MySQLParser.MULTIPOINT:
        case MySQLParser.MULTIPOLYGON:
        case MySQLParser.POINT:
        case MySQLParser.POLYGON:
        case MySQLParser.ABS:
        case MySQLParser.ACOS:
        case MySQLParser.ADDDATE:
        case MySQLParser.ADDTIME:
        case MySQLParser.AES_DECRYPT:
        case MySQLParser.AES_ENCRYPT:
        case MySQLParser.AREA:
        case MySQLParser.ASBINARY:
        case MySQLParser.ASIN:
        case MySQLParser.ASTEXT:
        case MySQLParser.ASWKB:
        case MySQLParser.ASWKT:
        case MySQLParser.ASYMMETRIC_DECRYPT:
        case MySQLParser.ASYMMETRIC_DERIVE:
        case MySQLParser.ASYMMETRIC_ENCRYPT:
        case MySQLParser.ASYMMETRIC_SIGN:
        case MySQLParser.ASYMMETRIC_VERIFY:
        case MySQLParser.ATAN:
        case MySQLParser.ATAN2:
        case MySQLParser.BENCHMARK:
        case MySQLParser.BIN:
        case MySQLParser.BIT_COUNT:
        case MySQLParser.BIT_LENGTH:
        case MySQLParser.BUFFER:
        case MySQLParser.CATALOG_NAME:
        case MySQLParser.CEIL:
        case MySQLParser.CEILING:
        case MySQLParser.CENTROID:
        case MySQLParser.CHARACTER_LENGTH:
        case MySQLParser.CHARSET:
        case MySQLParser.CHAR_LENGTH:
        case MySQLParser.COERCIBILITY:
        case MySQLParser.COLLATION:
        case MySQLParser.COMPRESS:
        case MySQLParser.CONCAT:
        case MySQLParser.CONCAT_WS:
        case MySQLParser.CONNECTION_ID:
        case MySQLParser.CONV:
        case MySQLParser.CONVERT_TZ:
        case MySQLParser.COS:
        case MySQLParser.COT:
        case MySQLParser.CRC32:
        case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser.CREATE_DH_PARAMETERS:
        case MySQLParser.CREATE_DIGEST:
        case MySQLParser.CROSSES:
        case MySQLParser.DATEDIFF:
        case MySQLParser.DATE_FORMAT:
        case MySQLParser.DAYNAME:
        case MySQLParser.DAYOFMONTH:
        case MySQLParser.DAYOFWEEK:
        case MySQLParser.DAYOFYEAR:
        case MySQLParser.DECODE:
        case MySQLParser.DEGREES:
        case MySQLParser.DES_DECRYPT:
        case MySQLParser.DES_ENCRYPT:
        case MySQLParser.DIMENSION:
        case MySQLParser.DISJOINT:
        case MySQLParser.ELT:
        case MySQLParser.ENCODE:
        case MySQLParser.ENCRYPT:
        case MySQLParser.ENDPOINT:
        case MySQLParser.ENVELOPE:
        case MySQLParser.EQUALS:
        case MySQLParser.EXP:
        case MySQLParser.EXPORT_SET:
        case MySQLParser.EXTERIORRING:
        case MySQLParser.EXTRACTVALUE:
        case MySQLParser.FIELD:
        case MySQLParser.FIND_IN_SET:
        case MySQLParser.FLOOR:
        case MySQLParser.FORMAT:
        case MySQLParser.FOUND_ROWS:
        case MySQLParser.FROM_BASE64:
        case MySQLParser.FROM_DAYS:
        case MySQLParser.FROM_UNIXTIME:
        case MySQLParser.GEOMCOLLFROMTEXT:
        case MySQLParser.GEOMCOLLFROMWKB:
        case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.GEOMETRYFROMTEXT:
        case MySQLParser.GEOMETRYFROMWKB:
        case MySQLParser.GEOMETRYN:
        case MySQLParser.GEOMETRYTYPE:
        case MySQLParser.GEOMFROMTEXT:
        case MySQLParser.GEOMFROMWKB:
        case MySQLParser.GET_FORMAT:
        case MySQLParser.GET_LOCK:
        case MySQLParser.GLENGTH:
        case MySQLParser.GREATEST:
        case MySQLParser.GTID_SUBSET:
        case MySQLParser.GTID_SUBTRACT:
        case MySQLParser.HEX:
        case MySQLParser.IFNULL:
        case MySQLParser.INET6_ATON:
        case MySQLParser.INET6_NTOA:
        case MySQLParser.INET_ATON:
        case MySQLParser.INET_NTOA:
        case MySQLParser.INSTR:
        case MySQLParser.INTERIORRINGN:
        case MySQLParser.INTERSECTS:
        case MySQLParser.ISCLOSED:
        case MySQLParser.ISEMPTY:
        case MySQLParser.ISNULL:
        case MySQLParser.ISSIMPLE:
        case MySQLParser.IS_FREE_LOCK:
        case MySQLParser.IS_IPV4:
        case MySQLParser.IS_IPV4_COMPAT:
        case MySQLParser.IS_IPV4_MAPPED:
        case MySQLParser.IS_IPV6:
        case MySQLParser.IS_USED_LOCK:
        case MySQLParser.LAST_INSERT_ID:
        case MySQLParser.LCASE:
        case MySQLParser.LEAST:
        case MySQLParser.LENGTH:
        case MySQLParser.LINEFROMTEXT:
        case MySQLParser.LINEFROMWKB:
        case MySQLParser.LINESTRINGFROMTEXT:
        case MySQLParser.LINESTRINGFROMWKB:
        case MySQLParser.LN:
        case MySQLParser.LOAD_FILE:
        case MySQLParser.LOCATE:
        case MySQLParser.LOG:
        case MySQLParser.LOG10:
        case MySQLParser.LOG2:
        case MySQLParser.LOWER:
        case MySQLParser.LPAD:
        case MySQLParser.LTRIM:
        case MySQLParser.MAKEDATE:
        case MySQLParser.MAKETIME:
        case MySQLParser.MAKE_SET:
        case MySQLParser.MASTER_POS_WAIT:
        case MySQLParser.MBRCONTAINS:
        case MySQLParser.MBRDISJOINT:
        case MySQLParser.MBREQUAL:
        case MySQLParser.MBRINTERSECTS:
        case MySQLParser.MBROVERLAPS:
        case MySQLParser.MBRTOUCHES:
        case MySQLParser.MBRWITHIN:
        case MySQLParser.MD5:
        case MySQLParser.MLINEFROMTEXT:
        case MySQLParser.MLINEFROMWKB:
        case MySQLParser.MONTHNAME:
        case MySQLParser.MPOINTFROMTEXT:
        case MySQLParser.MPOINTFROMWKB:
        case MySQLParser.MPOLYFROMTEXT:
        case MySQLParser.MPOLYFROMWKB:
        case MySQLParser.MULTILINESTRINGFROMTEXT:
        case MySQLParser.MULTILINESTRINGFROMWKB:
        case MySQLParser.MULTIPOINTFROMTEXT:
        case MySQLParser.MULTIPOINTFROMWKB:
        case MySQLParser.MULTIPOLYGONFROMTEXT:
        case MySQLParser.MULTIPOLYGONFROMWKB:
        case MySQLParser.NAME_CONST:
        case MySQLParser.NULLIF:
        case MySQLParser.NUMGEOMETRIES:
        case MySQLParser.NUMINTERIORRINGS:
        case MySQLParser.NUMPOINTS:
        case MySQLParser.OCT:
        case MySQLParser.OCTET_LENGTH:
        case MySQLParser.ORD:
        case MySQLParser.OVERLAPS:
        case MySQLParser.PERIOD_ADD:
        case MySQLParser.PERIOD_DIFF:
        case MySQLParser.PI:
        case MySQLParser.POINTFROMTEXT:
        case MySQLParser.POINTFROMWKB:
        case MySQLParser.POINTN:
        case MySQLParser.POLYFROMTEXT:
        case MySQLParser.POLYFROMWKB:
        case MySQLParser.POLYGONFROMTEXT:
        case MySQLParser.POLYGONFROMWKB:
        case MySQLParser.POW:
        case MySQLParser.POWER:
        case MySQLParser.QUOTE:
        case MySQLParser.RADIANS:
        case MySQLParser.RAND:
        case MySQLParser.RANDOM_BYTES:
        case MySQLParser.RELEASE_LOCK:
        case MySQLParser.REVERSE:
        case MySQLParser.ROUND:
        case MySQLParser.ROW_COUNT:
        case MySQLParser.RPAD:
        case MySQLParser.RTRIM:
        case MySQLParser.SEC_TO_TIME:
        case MySQLParser.SESSION_USER:
        case MySQLParser.SHA:
        case MySQLParser.SHA1:
        case MySQLParser.SHA2:
        case MySQLParser.SCHEMA_NAME:
        case MySQLParser.SIGN:
        case MySQLParser.SIN:
        case MySQLParser.SLEEP:
        case MySQLParser.SOUNDEX:
        case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser.SQRT:
        case MySQLParser.SRID:
        case MySQLParser.STARTPOINT:
        case MySQLParser.STRCMP:
        case MySQLParser.STR_TO_DATE:
        case MySQLParser.ST_AREA:
        case MySQLParser.ST_ASBINARY:
        case MySQLParser.ST_ASTEXT:
        case MySQLParser.ST_ASWKB:
        case MySQLParser.ST_ASWKT:
        case MySQLParser.ST_BUFFER:
        case MySQLParser.ST_CENTROID:
        case MySQLParser.ST_CONTAINS:
        case MySQLParser.ST_CROSSES:
        case MySQLParser.ST_DIFFERENCE:
        case MySQLParser.ST_DIMENSION:
        case MySQLParser.ST_DISJOINT:
        case MySQLParser.ST_DISTANCE:
        case MySQLParser.ST_ENDPOINT:
        case MySQLParser.ST_ENVELOPE:
        case MySQLParser.ST_EQUALS:
        case MySQLParser.ST_EXTERIORRING:
        case MySQLParser.ST_GEOMCOLLFROMTEXT:
        case MySQLParser.ST_GEOMCOLLFROMTXT:
        case MySQLParser.ST_GEOMCOLLFROMWKB:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.ST_GEOMETRYFROMTEXT:
        case MySQLParser.ST_GEOMETRYFROMWKB:
        case MySQLParser.ST_GEOMETRYN:
        case MySQLParser.ST_GEOMETRYTYPE:
        case MySQLParser.ST_GEOMFROMTEXT:
        case MySQLParser.ST_GEOMFROMWKB:
        case MySQLParser.ST_INTERIORRINGN:
        case MySQLParser.ST_INTERSECTION:
        case MySQLParser.ST_INTERSECTS:
        case MySQLParser.ST_ISCLOSED:
        case MySQLParser.ST_ISEMPTY:
        case MySQLParser.ST_ISSIMPLE:
        case MySQLParser.ST_LINEFROMTEXT:
        case MySQLParser.ST_LINEFROMWKB:
        case MySQLParser.ST_LINESTRINGFROMTEXT:
        case MySQLParser.ST_LINESTRINGFROMWKB:
        case MySQLParser.ST_NUMGEOMETRIES:
        case MySQLParser.ST_NUMINTERIORRING:
        case MySQLParser.ST_NUMINTERIORRINGS:
        case MySQLParser.ST_NUMPOINTS:
        case MySQLParser.ST_OVERLAPS:
        case MySQLParser.ST_POINTFROMTEXT:
        case MySQLParser.ST_POINTFROMWKB:
        case MySQLParser.ST_POINTN:
        case MySQLParser.ST_POLYFROMTEXT:
        case MySQLParser.ST_POLYFROMWKB:
        case MySQLParser.ST_POLYGONFROMTEXT:
        case MySQLParser.ST_POLYGONFROMWKB:
        case MySQLParser.ST_SRID:
        case MySQLParser.ST_STARTPOINT:
        case MySQLParser.ST_SYMDIFFERENCE:
        case MySQLParser.ST_TOUCHES:
        case MySQLParser.ST_UNION:
        case MySQLParser.ST_WITHIN:
        case MySQLParser.ST_X:
        case MySQLParser.ST_Y:
        case MySQLParser.SUBDATE:
        case MySQLParser.SUBSTRING_INDEX:
        case MySQLParser.SUBTIME:
        case MySQLParser.SYSTEM_USER:
        case MySQLParser.TAN:
        case MySQLParser.TIMEDIFF:
        case MySQLParser.TIMESTAMPADD:
        case MySQLParser.TIMESTAMPDIFF:
        case MySQLParser.TIME_FORMAT:
        case MySQLParser.TIME_TO_SEC:
        case MySQLParser.TOUCHES:
        case MySQLParser.TO_BASE64:
        case MySQLParser.TO_DAYS:
        case MySQLParser.TO_SECONDS:
        case MySQLParser.UCASE:
        case MySQLParser.UNCOMPRESS:
        case MySQLParser.UNCOMPRESSED_LENGTH:
        case MySQLParser.UNHEX:
        case MySQLParser.UNIX_TIMESTAMP:
        case MySQLParser.UPDATEXML:
        case MySQLParser.UPPER:
        case MySQLParser.UUID:
        case MySQLParser.UUID_SHORT:
        case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser.VERSION:
        case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser.WEEKDAY:
        case MySQLParser.WEEKOFYEAR:
        case MySQLParser.WEIGHT_STRING:
        case MySQLParser.WITHIN:
        case MySQLParser.YEARWEEK:
        case MySQLParser.Y_FUNCTION:
        case MySQLParser.X_FUNCTION:
        case MySQLParser.AT_SIGN:
        case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser.STRING_LITERAL:
        case MySQLParser.ID:
        case MySQLParser.REVERSE_QUOTE_ID:
        case MySQLParser.LOCAL_ID:
        case MySQLParser.GLOBAL_ID:
            this.state = 5356;
            this.variableClause();
            this.state = 5357;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 5358;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.NUMBER || _la===MySQLParser.ROW_COUNT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5366;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 5359;
                this.match(MySQLParser.COMMA);
                this.state = 5360;
                this.variableClause();
                this.state = 5361;
                this.match(MySQLParser.EQUAL_SYMBOL);
                this.state = 5362;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.NUMBER || _la===MySQLParser.ROW_COUNT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5368;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case MySQLParser.CONDITION:
            this.state = 5369;
            this.match(MySQLParser.CONDITION);
            this.state = 5372;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.ZERO_DECIMAL:
            case MySQLParser.ONE_DECIMAL:
            case MySQLParser.TWO_DECIMAL:
            case MySQLParser.DECIMAL_LITERAL:
                this.state = 5370;
                this.decimalLiteral();
                break;
            case MySQLParser.CURRENT:
            case MySQLParser.DATABASE:
            case MySQLParser.DIAGNOSTICS:
            case MySQLParser.LEFT:
            case MySQLParser.NUMBER:
            case MySQLParser.RIGHT:
            case MySQLParser.STACKED:
            case MySQLParser.DATE:
            case MySQLParser.TIME:
            case MySQLParser.TIMESTAMP:
            case MySQLParser.DATETIME:
            case MySQLParser.YEAR:
            case MySQLParser.TEXT:
            case MySQLParser.ENUM:
            case MySQLParser.SERIAL:
            case MySQLParser.JSON_VALID:
            case MySQLParser.JSON_SCHEMA_VALID:
            case MySQLParser.COUNT:
            case MySQLParser.POSITION:
            case MySQLParser.ACCOUNT:
            case MySQLParser.ACTION:
            case MySQLParser.AFTER:
            case MySQLParser.AGGREGATE:
            case MySQLParser.ALGORITHM:
            case MySQLParser.ANY:
            case MySQLParser.AT:
            case MySQLParser.AUTHORS:
            case MySQLParser.AUTOCOMMIT:
            case MySQLParser.AUTOEXTEND_SIZE:
            case MySQLParser.AUTO_INCREMENT:
            case MySQLParser.AVG_ROW_LENGTH:
            case MySQLParser.BEGIN:
            case MySQLParser.BINLOG:
            case MySQLParser.BIT:
            case MySQLParser.BLOCK:
            case MySQLParser.BOOL:
            case MySQLParser.BOOLEAN:
            case MySQLParser.BTREE:
            case MySQLParser.CACHE:
            case MySQLParser.CASCADED:
            case MySQLParser.CHAIN:
            case MySQLParser.CHANGED:
            case MySQLParser.CHANNEL:
            case MySQLParser.CHECKSUM:
            case MySQLParser.PAGE_CHECKSUM:
            case MySQLParser.CIPHER:
            case MySQLParser.CLASS_ORIGIN:
            case MySQLParser.CLIENT:
            case MySQLParser.CLOSE:
            case MySQLParser.COALESCE:
            case MySQLParser.CODE:
            case MySQLParser.COLUMNS:
            case MySQLParser.COLUMN_FORMAT:
            case MySQLParser.COLUMN_NAME:
            case MySQLParser.COMMENT:
            case MySQLParser.COMMIT:
            case MySQLParser.COMPACT:
            case MySQLParser.COMPLETION:
            case MySQLParser.COMPRESSED:
            case MySQLParser.COMPRESSION:
            case MySQLParser.CONCURRENT:
            case MySQLParser.CONNECTION:
            case MySQLParser.CONSISTENT:
            case MySQLParser.CONSTRAINT_CATALOG:
            case MySQLParser.CONSTRAINT_SCHEMA:
            case MySQLParser.CONSTRAINT_NAME:
            case MySQLParser.CONTAINS:
            case MySQLParser.CONTEXT:
            case MySQLParser.CONTRIBUTORS:
            case MySQLParser.COPY:
            case MySQLParser.CPU:
            case MySQLParser.CURSOR_NAME:
            case MySQLParser.DATA:
            case MySQLParser.DATAFILE:
            case MySQLParser.DEALLOCATE:
            case MySQLParser.DEFAULT_AUTH:
            case MySQLParser.DEFINER:
            case MySQLParser.DELAY_KEY_WRITE:
            case MySQLParser.DES_KEY_FILE:
            case MySQLParser.DIRECTORY:
            case MySQLParser.DISABLE:
            case MySQLParser.DISCARD:
            case MySQLParser.DISK:
            case MySQLParser.DO:
            case MySQLParser.DUMPFILE:
            case MySQLParser.DUPLICATE:
            case MySQLParser.DYNAMIC:
            case MySQLParser.ENABLE:
            case MySQLParser.ENCRYPTION:
            case MySQLParser.END:
            case MySQLParser.ENDS:
            case MySQLParser.ENGINE:
            case MySQLParser.ENGINES:
            case MySQLParser.ERROR:
            case MySQLParser.ERRORS:
            case MySQLParser.ESCAPE:
            case MySQLParser.EVEN:
            case MySQLParser.EVENT:
            case MySQLParser.EVENTS:
            case MySQLParser.EVERY:
            case MySQLParser.EXCHANGE:
            case MySQLParser.EXCLUSIVE:
            case MySQLParser.EXPIRE:
            case MySQLParser.EXPORT:
            case MySQLParser.EXTENDED:
            case MySQLParser.EXTENT_SIZE:
            case MySQLParser.FAST:
            case MySQLParser.FAULTS:
            case MySQLParser.FIELDS:
            case MySQLParser.FILE_BLOCK_SIZE:
            case MySQLParser.FILTER:
            case MySQLParser.FIRST:
            case MySQLParser.FIXED:
            case MySQLParser.FLUSH:
            case MySQLParser.FOLLOWS:
            case MySQLParser.FOUND:
            case MySQLParser.FULL:
            case MySQLParser.FUNCTION:
            case MySQLParser.GENERAL:
            case MySQLParser.GLOBAL:
            case MySQLParser.GRANTS:
            case MySQLParser.GROUP_REPLICATION:
            case MySQLParser.HANDLER:
            case MySQLParser.HASH:
            case MySQLParser.HELP:
            case MySQLParser.HOST:
            case MySQLParser.HOSTS:
            case MySQLParser.IDENTIFIED:
            case MySQLParser.IGNORE_SERVER_IDS:
            case MySQLParser.IMPORT:
            case MySQLParser.INDEXES:
            case MySQLParser.INITIAL_SIZE:
            case MySQLParser.INPLACE:
            case MySQLParser.INSERT_METHOD:
            case MySQLParser.INSTALL:
            case MySQLParser.INSTANCE:
            case MySQLParser.INVISIBLE:
            case MySQLParser.INVOKER:
            case MySQLParser.IO:
            case MySQLParser.IO_THREAD:
            case MySQLParser.IPC:
            case MySQLParser.ISOLATION:
            case MySQLParser.ISSUER:
            case MySQLParser.JSON:
            case MySQLParser.KEY_BLOCK_SIZE:
            case MySQLParser.LANGUAGE:
            case MySQLParser.LAST:
            case MySQLParser.LEAVES:
            case MySQLParser.LESS:
            case MySQLParser.LEVEL:
            case MySQLParser.LIST:
            case MySQLParser.LOCAL:
            case MySQLParser.LOGFILE:
            case MySQLParser.LOGS:
            case MySQLParser.MASTER:
            case MySQLParser.MASTER_AUTO_POSITION:
            case MySQLParser.MASTER_CONNECT_RETRY:
            case MySQLParser.MASTER_DELAY:
            case MySQLParser.MASTER_HEARTBEAT_PERIOD:
            case MySQLParser.MASTER_HOST:
            case MySQLParser.MASTER_LOG_FILE:
            case MySQLParser.MASTER_LOG_POS:
            case MySQLParser.MASTER_PASSWORD:
            case MySQLParser.MASTER_PORT:
            case MySQLParser.MASTER_RETRY_COUNT:
            case MySQLParser.MASTER_SSL:
            case MySQLParser.MASTER_SSL_CA:
            case MySQLParser.MASTER_SSL_CAPATH:
            case MySQLParser.MASTER_SSL_CERT:
            case MySQLParser.MASTER_SSL_CIPHER:
            case MySQLParser.MASTER_SSL_CRL:
            case MySQLParser.MASTER_SSL_CRLPATH:
            case MySQLParser.MASTER_SSL_KEY:
            case MySQLParser.MASTER_TLS_VERSION:
            case MySQLParser.MASTER_USER:
            case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
            case MySQLParser.MAX_QUERIES_PER_HOUR:
            case MySQLParser.MAX_ROWS:
            case MySQLParser.MAX_SIZE:
            case MySQLParser.MAX_UPDATES_PER_HOUR:
            case MySQLParser.MAX_USER_CONNECTIONS:
            case MySQLParser.MEDIUM:
            case MySQLParser.MERGE:
            case MySQLParser.MESSAGE_TEXT:
            case MySQLParser.MID:
            case MySQLParser.MIGRATE:
            case MySQLParser.MIN_ROWS:
            case MySQLParser.MODE:
            case MySQLParser.MODIFY:
            case MySQLParser.MUTEX:
            case MySQLParser.MYSQL:
            case MySQLParser.MYSQL_ERRNO:
            case MySQLParser.NAME:
            case MySQLParser.NAMES:
            case MySQLParser.NCHAR:
            case MySQLParser.NEVER:
            case MySQLParser.NEXT:
            case MySQLParser.NO:
            case MySQLParser.NODEGROUP:
            case MySQLParser.NONE:
            case MySQLParser.OFFLINE:
            case MySQLParser.OFFSET:
            case MySQLParser.OJ:
            case MySQLParser.OLD_PASSWORD:
            case MySQLParser.ONE:
            case MySQLParser.ONLINE:
            case MySQLParser.ONLY:
            case MySQLParser.OPEN:
            case MySQLParser.OPTIMIZER_COSTS:
            case MySQLParser.OPTIONS:
            case MySQLParser.OWNER:
            case MySQLParser.PACK_KEYS:
            case MySQLParser.PAGE:
            case MySQLParser.PARSER:
            case MySQLParser.PARTIAL:
            case MySQLParser.PARTITIONING:
            case MySQLParser.PARTITIONS:
            case MySQLParser.PASSWORD:
            case MySQLParser.PHASE:
            case MySQLParser.PLUGIN:
            case MySQLParser.PLUGIN_DIR:
            case MySQLParser.PLUGINS:
            case MySQLParser.PORT:
            case MySQLParser.PRECEDES:
            case MySQLParser.PREPARE:
            case MySQLParser.PRESERVE:
            case MySQLParser.PREV:
            case MySQLParser.PROCESSLIST:
            case MySQLParser.PROFILE:
            case MySQLParser.PROFILES:
            case MySQLParser.PROXY:
            case MySQLParser.QUERY:
            case MySQLParser.QUICK:
            case MySQLParser.REBUILD:
            case MySQLParser.RECOVER:
            case MySQLParser.REDO_BUFFER_SIZE:
            case MySQLParser.REDUNDANT:
            case MySQLParser.RELAY:
            case MySQLParser.RELAY_LOG_FILE:
            case MySQLParser.RELAY_LOG_POS:
            case MySQLParser.RELAYLOG:
            case MySQLParser.REMOVE:
            case MySQLParser.REORGANIZE:
            case MySQLParser.REPAIR:
            case MySQLParser.REPLICATE_DO_DB:
            case MySQLParser.REPLICATE_DO_TABLE:
            case MySQLParser.REPLICATE_IGNORE_DB:
            case MySQLParser.REPLICATE_IGNORE_TABLE:
            case MySQLParser.REPLICATE_REWRITE_DB:
            case MySQLParser.REPLICATE_WILD_DO_TABLE:
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySQLParser.REPLICATION:
            case MySQLParser.RESET:
            case MySQLParser.RESUME:
            case MySQLParser.RETURNED_SQLSTATE:
            case MySQLParser.RETURNS:
            case MySQLParser.ROLE:
            case MySQLParser.ROLLBACK:
            case MySQLParser.ROLLUP:
            case MySQLParser.ROTATE:
            case MySQLParser.ROW:
            case MySQLParser.ROWS:
            case MySQLParser.ROW_FORMAT:
            case MySQLParser.SAVEPOINT:
            case MySQLParser.SCHEDULE:
            case MySQLParser.SECURITY:
            case MySQLParser.SERVER:
            case MySQLParser.SESSION:
            case MySQLParser.SHARE:
            case MySQLParser.SHARED:
            case MySQLParser.SIGNED:
            case MySQLParser.SIMPLE:
            case MySQLParser.SLAVE:
            case MySQLParser.SLOW:
            case MySQLParser.SNAPSHOT:
            case MySQLParser.SOCKET:
            case MySQLParser.SOME:
            case MySQLParser.SONAME:
            case MySQLParser.SOUNDS:
            case MySQLParser.SOURCE:
            case MySQLParser.SQL_AFTER_GTIDS:
            case MySQLParser.SQL_AFTER_MTS_GAPS:
            case MySQLParser.SQL_BEFORE_GTIDS:
            case MySQLParser.SQL_BUFFER_RESULT:
            case MySQLParser.SQL_CACHE:
            case MySQLParser.SQL_NO_CACHE:
            case MySQLParser.SQL_THREAD:
            case MySQLParser.START:
            case MySQLParser.STARTS:
            case MySQLParser.STATS_AUTO_RECALC:
            case MySQLParser.STATS_PERSISTENT:
            case MySQLParser.STATS_SAMPLE_PAGES:
            case MySQLParser.STATUS:
            case MySQLParser.STOP:
            case MySQLParser.STORAGE:
            case MySQLParser.STRING:
            case MySQLParser.SUBCLASS_ORIGIN:
            case MySQLParser.SUBJECT:
            case MySQLParser.SUBPARTITION:
            case MySQLParser.SUBPARTITIONS:
            case MySQLParser.SUSPEND:
            case MySQLParser.SWAPS:
            case MySQLParser.SWITCHES:
            case MySQLParser.TABLE_NAME:
            case MySQLParser.TABLESPACE:
            case MySQLParser.TEMPORARY:
            case MySQLParser.TEMPTABLE:
            case MySQLParser.THAN:
            case MySQLParser.TRADITIONAL:
            case MySQLParser.TRANSACTION:
            case MySQLParser.TRANSACTIONAL:
            case MySQLParser.TRIGGERS:
            case MySQLParser.TRUNCATE:
            case MySQLParser.UNDEFINED:
            case MySQLParser.UNDOFILE:
            case MySQLParser.UNDO_BUFFER_SIZE:
            case MySQLParser.UNINSTALL:
            case MySQLParser.UNKNOWN:
            case MySQLParser.UNTIL:
            case MySQLParser.UPGRADE:
            case MySQLParser.USER:
            case MySQLParser.USE_FRM:
            case MySQLParser.USER_RESOURCES:
            case MySQLParser.VALIDATION:
            case MySQLParser.VALUE:
            case MySQLParser.VARIABLES:
            case MySQLParser.VIEW:
            case MySQLParser.VISIBLE:
            case MySQLParser.WAIT:
            case MySQLParser.WARNINGS:
            case MySQLParser.WITHOUT:
            case MySQLParser.WORK:
            case MySQLParser.WRAPPER:
            case MySQLParser.X509:
            case MySQLParser.XA:
            case MySQLParser.XML:
            case MySQLParser.INTERNAL:
            case MySQLParser.QUARTER:
            case MySQLParser.MONTH:
            case MySQLParser.DAY:
            case MySQLParser.HOUR:
            case MySQLParser.MINUTE:
            case MySQLParser.WEEK:
            case MySQLParser.SECOND:
            case MySQLParser.MICROSECOND:
            case MySQLParser.TABLES:
            case MySQLParser.ROUTINE:
            case MySQLParser.EXECUTE:
            case MySQLParser.FILE:
            case MySQLParser.PROCESS:
            case MySQLParser.RELOAD:
            case MySQLParser.SHUTDOWN:
            case MySQLParser.SUPER:
            case MySQLParser.PRIVILEGES:
            case MySQLParser.AUDIT_ADMIN:
            case MySQLParser.BACKUP_ADMIN:
            case MySQLParser.BINLOG_ADMIN:
            case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
            case MySQLParser.CLONE_ADMIN:
            case MySQLParser.CONNECTION_ADMIN:
            case MySQLParser.ENCRYPTION_KEY_ADMIN:
            case MySQLParser.FIREWALL_ADMIN:
            case MySQLParser.FIREWALL_USER:
            case MySQLParser.GROUP_REPLICATION_ADMIN:
            case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
            case MySQLParser.NDB_STORED_USER:
            case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySQLParser.REPLICATION_APPLIER:
            case MySQLParser.REPLICATION_SLAVE_ADMIN:
            case MySQLParser.RESOURCE_GROUP_ADMIN:
            case MySQLParser.RESOURCE_GROUP_USER:
            case MySQLParser.ROLE_ADMIN:
            case MySQLParser.SESSION_VARIABLES_ADMIN:
            case MySQLParser.SET_USER_ID:
            case MySQLParser.SHOW_ROUTINE:
            case MySQLParser.SYSTEM_VARIABLES_ADMIN:
            case MySQLParser.TABLE_ENCRYPTION_ADMIN:
            case MySQLParser.VERSION_TOKEN_ADMIN:
            case MySQLParser.XA_RECOVER_ADMIN:
            case MySQLParser.ARMSCII8:
            case MySQLParser.ASCII:
            case MySQLParser.BIG5:
            case MySQLParser.CP1250:
            case MySQLParser.CP1251:
            case MySQLParser.CP1256:
            case MySQLParser.CP1257:
            case MySQLParser.CP850:
            case MySQLParser.CP852:
            case MySQLParser.CP866:
            case MySQLParser.CP932:
            case MySQLParser.DEC8:
            case MySQLParser.EUCJPMS:
            case MySQLParser.EUCKR:
            case MySQLParser.GB2312:
            case MySQLParser.GBK:
            case MySQLParser.GEOSTD8:
            case MySQLParser.GREEK:
            case MySQLParser.HEBREW:
            case MySQLParser.HP8:
            case MySQLParser.KEYBCS2:
            case MySQLParser.KOI8R:
            case MySQLParser.KOI8U:
            case MySQLParser.LATIN1:
            case MySQLParser.LATIN2:
            case MySQLParser.LATIN5:
            case MySQLParser.LATIN7:
            case MySQLParser.MACCE:
            case MySQLParser.MACROMAN:
            case MySQLParser.SJIS:
            case MySQLParser.SWE7:
            case MySQLParser.TIS620:
            case MySQLParser.UCS2:
            case MySQLParser.UJIS:
            case MySQLParser.UTF16:
            case MySQLParser.UTF16LE:
            case MySQLParser.UTF32:
            case MySQLParser.UTF8:
            case MySQLParser.UTF8MB3:
            case MySQLParser.UTF8MB4:
            case MySQLParser.ARCHIVE:
            case MySQLParser.BLACKHOLE:
            case MySQLParser.CSV:
            case MySQLParser.FEDERATED:
            case MySQLParser.INNODB:
            case MySQLParser.MEMORY:
            case MySQLParser.MRG_MYISAM:
            case MySQLParser.MYISAM:
            case MySQLParser.NDB:
            case MySQLParser.NDBCLUSTER:
            case MySQLParser.PERFORMANCE_SCHEMA:
            case MySQLParser.TOKUDB:
            case MySQLParser.REPEATABLE:
            case MySQLParser.COMMITTED:
            case MySQLParser.UNCOMMITTED:
            case MySQLParser.SERIALIZABLE:
            case MySQLParser.GEOMETRYCOLLECTION:
            case MySQLParser.LINESTRING:
            case MySQLParser.MULTILINESTRING:
            case MySQLParser.MULTIPOINT:
            case MySQLParser.MULTIPOLYGON:
            case MySQLParser.POINT:
            case MySQLParser.POLYGON:
            case MySQLParser.ABS:
            case MySQLParser.ACOS:
            case MySQLParser.ADDDATE:
            case MySQLParser.ADDTIME:
            case MySQLParser.AES_DECRYPT:
            case MySQLParser.AES_ENCRYPT:
            case MySQLParser.AREA:
            case MySQLParser.ASBINARY:
            case MySQLParser.ASIN:
            case MySQLParser.ASTEXT:
            case MySQLParser.ASWKB:
            case MySQLParser.ASWKT:
            case MySQLParser.ASYMMETRIC_DECRYPT:
            case MySQLParser.ASYMMETRIC_DERIVE:
            case MySQLParser.ASYMMETRIC_ENCRYPT:
            case MySQLParser.ASYMMETRIC_SIGN:
            case MySQLParser.ASYMMETRIC_VERIFY:
            case MySQLParser.ATAN:
            case MySQLParser.ATAN2:
            case MySQLParser.BENCHMARK:
            case MySQLParser.BIN:
            case MySQLParser.BIT_COUNT:
            case MySQLParser.BIT_LENGTH:
            case MySQLParser.BUFFER:
            case MySQLParser.CATALOG_NAME:
            case MySQLParser.CEIL:
            case MySQLParser.CEILING:
            case MySQLParser.CENTROID:
            case MySQLParser.CHARACTER_LENGTH:
            case MySQLParser.CHARSET:
            case MySQLParser.CHAR_LENGTH:
            case MySQLParser.COERCIBILITY:
            case MySQLParser.COLLATION:
            case MySQLParser.COMPRESS:
            case MySQLParser.CONCAT:
            case MySQLParser.CONCAT_WS:
            case MySQLParser.CONNECTION_ID:
            case MySQLParser.CONV:
            case MySQLParser.CONVERT_TZ:
            case MySQLParser.COS:
            case MySQLParser.COT:
            case MySQLParser.CRC32:
            case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySQLParser.CREATE_DH_PARAMETERS:
            case MySQLParser.CREATE_DIGEST:
            case MySQLParser.CROSSES:
            case MySQLParser.DATEDIFF:
            case MySQLParser.DATE_FORMAT:
            case MySQLParser.DAYNAME:
            case MySQLParser.DAYOFMONTH:
            case MySQLParser.DAYOFWEEK:
            case MySQLParser.DAYOFYEAR:
            case MySQLParser.DECODE:
            case MySQLParser.DEGREES:
            case MySQLParser.DES_DECRYPT:
            case MySQLParser.DES_ENCRYPT:
            case MySQLParser.DIMENSION:
            case MySQLParser.DISJOINT:
            case MySQLParser.ELT:
            case MySQLParser.ENCODE:
            case MySQLParser.ENCRYPT:
            case MySQLParser.ENDPOINT:
            case MySQLParser.ENVELOPE:
            case MySQLParser.EQUALS:
            case MySQLParser.EXP:
            case MySQLParser.EXPORT_SET:
            case MySQLParser.EXTERIORRING:
            case MySQLParser.EXTRACTVALUE:
            case MySQLParser.FIELD:
            case MySQLParser.FIND_IN_SET:
            case MySQLParser.FLOOR:
            case MySQLParser.FORMAT:
            case MySQLParser.FOUND_ROWS:
            case MySQLParser.FROM_BASE64:
            case MySQLParser.FROM_DAYS:
            case MySQLParser.FROM_UNIXTIME:
            case MySQLParser.GEOMCOLLFROMTEXT:
            case MySQLParser.GEOMCOLLFROMWKB:
            case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.GEOMETRYFROMTEXT:
            case MySQLParser.GEOMETRYFROMWKB:
            case MySQLParser.GEOMETRYN:
            case MySQLParser.GEOMETRYTYPE:
            case MySQLParser.GEOMFROMTEXT:
            case MySQLParser.GEOMFROMWKB:
            case MySQLParser.GET_FORMAT:
            case MySQLParser.GET_LOCK:
            case MySQLParser.GLENGTH:
            case MySQLParser.GREATEST:
            case MySQLParser.GTID_SUBSET:
            case MySQLParser.GTID_SUBTRACT:
            case MySQLParser.HEX:
            case MySQLParser.IFNULL:
            case MySQLParser.INET6_ATON:
            case MySQLParser.INET6_NTOA:
            case MySQLParser.INET_ATON:
            case MySQLParser.INET_NTOA:
            case MySQLParser.INSTR:
            case MySQLParser.INTERIORRINGN:
            case MySQLParser.INTERSECTS:
            case MySQLParser.ISCLOSED:
            case MySQLParser.ISEMPTY:
            case MySQLParser.ISNULL:
            case MySQLParser.ISSIMPLE:
            case MySQLParser.IS_FREE_LOCK:
            case MySQLParser.IS_IPV4:
            case MySQLParser.IS_IPV4_COMPAT:
            case MySQLParser.IS_IPV4_MAPPED:
            case MySQLParser.IS_IPV6:
            case MySQLParser.IS_USED_LOCK:
            case MySQLParser.LAST_INSERT_ID:
            case MySQLParser.LCASE:
            case MySQLParser.LEAST:
            case MySQLParser.LENGTH:
            case MySQLParser.LINEFROMTEXT:
            case MySQLParser.LINEFROMWKB:
            case MySQLParser.LINESTRINGFROMTEXT:
            case MySQLParser.LINESTRINGFROMWKB:
            case MySQLParser.LN:
            case MySQLParser.LOAD_FILE:
            case MySQLParser.LOCATE:
            case MySQLParser.LOG:
            case MySQLParser.LOG10:
            case MySQLParser.LOG2:
            case MySQLParser.LOWER:
            case MySQLParser.LPAD:
            case MySQLParser.LTRIM:
            case MySQLParser.MAKEDATE:
            case MySQLParser.MAKETIME:
            case MySQLParser.MAKE_SET:
            case MySQLParser.MASTER_POS_WAIT:
            case MySQLParser.MBRCONTAINS:
            case MySQLParser.MBRDISJOINT:
            case MySQLParser.MBREQUAL:
            case MySQLParser.MBRINTERSECTS:
            case MySQLParser.MBROVERLAPS:
            case MySQLParser.MBRTOUCHES:
            case MySQLParser.MBRWITHIN:
            case MySQLParser.MD5:
            case MySQLParser.MLINEFROMTEXT:
            case MySQLParser.MLINEFROMWKB:
            case MySQLParser.MONTHNAME:
            case MySQLParser.MPOINTFROMTEXT:
            case MySQLParser.MPOINTFROMWKB:
            case MySQLParser.MPOLYFROMTEXT:
            case MySQLParser.MPOLYFROMWKB:
            case MySQLParser.MULTILINESTRINGFROMTEXT:
            case MySQLParser.MULTILINESTRINGFROMWKB:
            case MySQLParser.MULTIPOINTFROMTEXT:
            case MySQLParser.MULTIPOINTFROMWKB:
            case MySQLParser.MULTIPOLYGONFROMTEXT:
            case MySQLParser.MULTIPOLYGONFROMWKB:
            case MySQLParser.NAME_CONST:
            case MySQLParser.NULLIF:
            case MySQLParser.NUMGEOMETRIES:
            case MySQLParser.NUMINTERIORRINGS:
            case MySQLParser.NUMPOINTS:
            case MySQLParser.OCT:
            case MySQLParser.OCTET_LENGTH:
            case MySQLParser.ORD:
            case MySQLParser.OVERLAPS:
            case MySQLParser.PERIOD_ADD:
            case MySQLParser.PERIOD_DIFF:
            case MySQLParser.PI:
            case MySQLParser.POINTFROMTEXT:
            case MySQLParser.POINTFROMWKB:
            case MySQLParser.POINTN:
            case MySQLParser.POLYFROMTEXT:
            case MySQLParser.POLYFROMWKB:
            case MySQLParser.POLYGONFROMTEXT:
            case MySQLParser.POLYGONFROMWKB:
            case MySQLParser.POW:
            case MySQLParser.POWER:
            case MySQLParser.QUOTE:
            case MySQLParser.RADIANS:
            case MySQLParser.RAND:
            case MySQLParser.RANDOM_BYTES:
            case MySQLParser.RELEASE_LOCK:
            case MySQLParser.REVERSE:
            case MySQLParser.ROUND:
            case MySQLParser.ROW_COUNT:
            case MySQLParser.RPAD:
            case MySQLParser.RTRIM:
            case MySQLParser.SEC_TO_TIME:
            case MySQLParser.SESSION_USER:
            case MySQLParser.SHA:
            case MySQLParser.SHA1:
            case MySQLParser.SHA2:
            case MySQLParser.SCHEMA_NAME:
            case MySQLParser.SIGN:
            case MySQLParser.SIN:
            case MySQLParser.SLEEP:
            case MySQLParser.SOUNDEX:
            case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySQLParser.SQRT:
            case MySQLParser.SRID:
            case MySQLParser.STARTPOINT:
            case MySQLParser.STRCMP:
            case MySQLParser.STR_TO_DATE:
            case MySQLParser.ST_AREA:
            case MySQLParser.ST_ASBINARY:
            case MySQLParser.ST_ASTEXT:
            case MySQLParser.ST_ASWKB:
            case MySQLParser.ST_ASWKT:
            case MySQLParser.ST_BUFFER:
            case MySQLParser.ST_CENTROID:
            case MySQLParser.ST_CONTAINS:
            case MySQLParser.ST_CROSSES:
            case MySQLParser.ST_DIFFERENCE:
            case MySQLParser.ST_DIMENSION:
            case MySQLParser.ST_DISJOINT:
            case MySQLParser.ST_DISTANCE:
            case MySQLParser.ST_ENDPOINT:
            case MySQLParser.ST_ENVELOPE:
            case MySQLParser.ST_EQUALS:
            case MySQLParser.ST_EXTERIORRING:
            case MySQLParser.ST_GEOMCOLLFROMTEXT:
            case MySQLParser.ST_GEOMCOLLFROMTXT:
            case MySQLParser.ST_GEOMCOLLFROMWKB:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.ST_GEOMETRYFROMTEXT:
            case MySQLParser.ST_GEOMETRYFROMWKB:
            case MySQLParser.ST_GEOMETRYN:
            case MySQLParser.ST_GEOMETRYTYPE:
            case MySQLParser.ST_GEOMFROMTEXT:
            case MySQLParser.ST_GEOMFROMWKB:
            case MySQLParser.ST_INTERIORRINGN:
            case MySQLParser.ST_INTERSECTION:
            case MySQLParser.ST_INTERSECTS:
            case MySQLParser.ST_ISCLOSED:
            case MySQLParser.ST_ISEMPTY:
            case MySQLParser.ST_ISSIMPLE:
            case MySQLParser.ST_LINEFROMTEXT:
            case MySQLParser.ST_LINEFROMWKB:
            case MySQLParser.ST_LINESTRINGFROMTEXT:
            case MySQLParser.ST_LINESTRINGFROMWKB:
            case MySQLParser.ST_NUMGEOMETRIES:
            case MySQLParser.ST_NUMINTERIORRING:
            case MySQLParser.ST_NUMINTERIORRINGS:
            case MySQLParser.ST_NUMPOINTS:
            case MySQLParser.ST_OVERLAPS:
            case MySQLParser.ST_POINTFROMTEXT:
            case MySQLParser.ST_POINTFROMWKB:
            case MySQLParser.ST_POINTN:
            case MySQLParser.ST_POLYFROMTEXT:
            case MySQLParser.ST_POLYFROMWKB:
            case MySQLParser.ST_POLYGONFROMTEXT:
            case MySQLParser.ST_POLYGONFROMWKB:
            case MySQLParser.ST_SRID:
            case MySQLParser.ST_STARTPOINT:
            case MySQLParser.ST_SYMDIFFERENCE:
            case MySQLParser.ST_TOUCHES:
            case MySQLParser.ST_UNION:
            case MySQLParser.ST_WITHIN:
            case MySQLParser.ST_X:
            case MySQLParser.ST_Y:
            case MySQLParser.SUBDATE:
            case MySQLParser.SUBSTRING_INDEX:
            case MySQLParser.SUBTIME:
            case MySQLParser.SYSTEM_USER:
            case MySQLParser.TAN:
            case MySQLParser.TIMEDIFF:
            case MySQLParser.TIMESTAMPADD:
            case MySQLParser.TIMESTAMPDIFF:
            case MySQLParser.TIME_FORMAT:
            case MySQLParser.TIME_TO_SEC:
            case MySQLParser.TOUCHES:
            case MySQLParser.TO_BASE64:
            case MySQLParser.TO_DAYS:
            case MySQLParser.TO_SECONDS:
            case MySQLParser.UCASE:
            case MySQLParser.UNCOMPRESS:
            case MySQLParser.UNCOMPRESSED_LENGTH:
            case MySQLParser.UNHEX:
            case MySQLParser.UNIX_TIMESTAMP:
            case MySQLParser.UPDATEXML:
            case MySQLParser.UPPER:
            case MySQLParser.UUID:
            case MySQLParser.UUID_SHORT:
            case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
            case MySQLParser.VERSION:
            case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySQLParser.WEEKDAY:
            case MySQLParser.WEEKOFYEAR:
            case MySQLParser.WEIGHT_STRING:
            case MySQLParser.WITHIN:
            case MySQLParser.YEARWEEK:
            case MySQLParser.Y_FUNCTION:
            case MySQLParser.X_FUNCTION:
            case MySQLParser.AT_SIGN:
            case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySQLParser.STRING_LITERAL:
            case MySQLParser.ID:
            case MySQLParser.REVERSE_QUOTE_ID:
            case MySQLParser.LOCAL_ID:
            case MySQLParser.GLOBAL_ID:
                this.state = 5371;
                this.variableClause();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 5374;
            this.variableClause();
            this.state = 5375;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 5376;
            this.diagnosticsConditionInformationName();
            this.state = 5384;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 5377;
                this.match(MySQLParser.COMMA);
                this.state = 5378;
                this.variableClause();
                this.state = 5379;
                this.match(MySQLParser.EQUAL_SYMBOL);
                this.state = 5380;
                this.diagnosticsConditionInformationName();
                this.state = 5386;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DiagnosticsConditionInformationNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_diagnosticsConditionInformationName;
    return this;
}

DiagnosticsConditionInformationNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DiagnosticsConditionInformationNameContext.prototype.constructor = DiagnosticsConditionInformationNameContext;

DiagnosticsConditionInformationNameContext.prototype.CLASS_ORIGIN = function() {
    return this.getToken(MySQLParser.CLASS_ORIGIN, 0);
};

DiagnosticsConditionInformationNameContext.prototype.SUBCLASS_ORIGIN = function() {
    return this.getToken(MySQLParser.SUBCLASS_ORIGIN, 0);
};

DiagnosticsConditionInformationNameContext.prototype.RETURNED_SQLSTATE = function() {
    return this.getToken(MySQLParser.RETURNED_SQLSTATE, 0);
};

DiagnosticsConditionInformationNameContext.prototype.MESSAGE_TEXT = function() {
    return this.getToken(MySQLParser.MESSAGE_TEXT, 0);
};

DiagnosticsConditionInformationNameContext.prototype.MYSQL_ERRNO = function() {
    return this.getToken(MySQLParser.MYSQL_ERRNO, 0);
};

DiagnosticsConditionInformationNameContext.prototype.CONSTRAINT_CATALOG = function() {
    return this.getToken(MySQLParser.CONSTRAINT_CATALOG, 0);
};

DiagnosticsConditionInformationNameContext.prototype.CONSTRAINT_SCHEMA = function() {
    return this.getToken(MySQLParser.CONSTRAINT_SCHEMA, 0);
};

DiagnosticsConditionInformationNameContext.prototype.CONSTRAINT_NAME = function() {
    return this.getToken(MySQLParser.CONSTRAINT_NAME, 0);
};

DiagnosticsConditionInformationNameContext.prototype.CATALOG_NAME = function() {
    return this.getToken(MySQLParser.CATALOG_NAME, 0);
};

DiagnosticsConditionInformationNameContext.prototype.SCHEMA_NAME = function() {
    return this.getToken(MySQLParser.SCHEMA_NAME, 0);
};

DiagnosticsConditionInformationNameContext.prototype.TABLE_NAME = function() {
    return this.getToken(MySQLParser.TABLE_NAME, 0);
};

DiagnosticsConditionInformationNameContext.prototype.COLUMN_NAME = function() {
    return this.getToken(MySQLParser.COLUMN_NAME, 0);
};

DiagnosticsConditionInformationNameContext.prototype.CURSOR_NAME = function() {
    return this.getToken(MySQLParser.CURSOR_NAME, 0);
};

DiagnosticsConditionInformationNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDiagnosticsConditionInformationName(this);
	}
};

DiagnosticsConditionInformationNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDiagnosticsConditionInformationName(this);
	}
};

DiagnosticsConditionInformationNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDiagnosticsConditionInformationName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DiagnosticsConditionInformationNameContext = DiagnosticsConditionInformationNameContext;

MySQLParser.prototype.diagnosticsConditionInformationName = function() {

    var localctx = new DiagnosticsConditionInformationNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 492, MySQLParser.RULE_diagnosticsConditionInformationName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5389;
        _la = this._input.LA(1);
        if(!(((((_la - 297)) & ~0x1f) == 0 && ((1 << (_la - 297)) & ((1 << (MySQLParser.CLASS_ORIGIN - 297)) | (1 << (MySQLParser.COLUMN_NAME - 297)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 297)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 297)) | (1 << (MySQLParser.CONSTRAINT_NAME - 297)) | (1 << (MySQLParser.CURSOR_NAME - 297)))) !== 0) || _la===MySQLParser.MESSAGE_TEXT || _la===MySQLParser.MYSQL_ERRNO || _la===MySQLParser.RETURNED_SQLSTATE || _la===MySQLParser.SUBCLASS_ORIGIN || _la===MySQLParser.TABLE_NAME || _la===MySQLParser.CATALOG_NAME || _la===MySQLParser.SCHEMA_NAME)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DescribeObjectClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_describeObjectClause;
    return this;
}

DescribeObjectClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescribeObjectClauseContext.prototype.constructor = DescribeObjectClauseContext;


 
DescribeObjectClauseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DescribeStatementsContext(parser, ctx) {
	DescribeObjectClauseContext.call(this, parser);
    DescribeObjectClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DescribeStatementsContext.prototype = Object.create(DescribeObjectClauseContext.prototype);
DescribeStatementsContext.prototype.constructor = DescribeStatementsContext;

MySQLParser.DescribeStatementsContext = DescribeStatementsContext;

DescribeStatementsContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

DescribeStatementsContext.prototype.deleteStatement = function() {
    return this.getTypedRuleContext(DeleteStatementContext,0);
};

DescribeStatementsContext.prototype.insertStatement = function() {
    return this.getTypedRuleContext(InsertStatementContext,0);
};

DescribeStatementsContext.prototype.replaceStatement = function() {
    return this.getTypedRuleContext(ReplaceStatementContext,0);
};

DescribeStatementsContext.prototype.updateStatement = function() {
    return this.getTypedRuleContext(UpdateStatementContext,0);
};
DescribeStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDescribeStatements(this);
	}
};

DescribeStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDescribeStatements(this);
	}
};

DescribeStatementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDescribeStatements(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DescribeConnectionContext(parser, ctx) {
	DescribeObjectClauseContext.call(this, parser);
    DescribeObjectClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DescribeConnectionContext.prototype = Object.create(DescribeObjectClauseContext.prototype);
DescribeConnectionContext.prototype.constructor = DescribeConnectionContext;

MySQLParser.DescribeConnectionContext = DescribeConnectionContext;

DescribeConnectionContext.prototype.FOR = function() {
    return this.getToken(MySQLParser.FOR, 0);
};

DescribeConnectionContext.prototype.CONNECTION = function() {
    return this.getToken(MySQLParser.CONNECTION, 0);
};

DescribeConnectionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};
DescribeConnectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDescribeConnection(this);
	}
};

DescribeConnectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDescribeConnection(this);
	}
};

DescribeConnectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDescribeConnection(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.DescribeObjectClauseContext = DescribeObjectClauseContext;

MySQLParser.prototype.describeObjectClause = function() {

    var localctx = new DescribeObjectClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 494, MySQLParser.RULE_describeObjectClause);
    try {
        this.state = 5401;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.DELETE:
        case MySQLParser.INSERT:
        case MySQLParser.REPLACE:
        case MySQLParser.SELECT:
        case MySQLParser.UPDATE:
        case MySQLParser.LR_BRACKET:
            localctx = new DescribeStatementsContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 5396;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.SELECT:
            case MySQLParser.LR_BRACKET:
                this.state = 5391;
                this.selectStatement();
                break;
            case MySQLParser.DELETE:
                this.state = 5392;
                this.deleteStatement();
                break;
            case MySQLParser.INSERT:
                this.state = 5393;
                this.insertStatement();
                break;
            case MySQLParser.REPLACE:
                this.state = 5394;
                this.replaceStatement();
                break;
            case MySQLParser.UPDATE:
                this.state = 5395;
                this.updateStatement();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case MySQLParser.FOR:
            localctx = new DescribeConnectionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 5398;
            this.match(MySQLParser.FOR);
            this.state = 5399;
            this.match(MySQLParser.CONNECTION);
            this.state = 5400;
            this.uid();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FullIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fullId;
    return this;
}

FullIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FullIdContext.prototype.constructor = FullIdContext;

FullIdContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

FullIdContext.prototype.DOT_ID = function() {
    return this.getToken(MySQLParser.DOT_ID, 0);
};

FullIdContext.prototype.DOT = function() {
    return this.getToken(MySQLParser.DOT, 0);
};

FullIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFullId(this);
	}
};

FullIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFullId(this);
	}
};

FullIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFullId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FullIdContext = FullIdContext;

MySQLParser.prototype.fullId = function() {

    var localctx = new FullIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 496, MySQLParser.RULE_fullId);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5403;
        this.uid();
        this.state = 5407;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,780,this._ctx);
        if(la_===1) {
            this.state = 5404;
            this.match(MySQLParser.DOT_ID);

        } else if(la_===2) {
            this.state = 5405;
            this.match(MySQLParser.DOT);
            this.state = 5406;
            this.uid();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tableName;
    return this;
}

TableNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableNameContext.prototype.constructor = TableNameContext;

TableNameContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

TableNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTableName(this);
	}
};

TableNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTableName(this);
	}
};

TableNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTableName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TableNameContext = TableNameContext;

MySQLParser.prototype.tableName = function() {

    var localctx = new TableNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 498, MySQLParser.RULE_tableName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5409;
        this.fullId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FullColumnNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fullColumnName;
    return this;
}

FullColumnNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FullColumnNameContext.prototype.constructor = FullColumnNameContext;

FullColumnNameContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

FullColumnNameContext.prototype.dottedId = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DottedIdContext);
    } else {
        return this.getTypedRuleContext(DottedIdContext,i);
    }
};

FullColumnNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFullColumnName(this);
	}
};

FullColumnNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFullColumnName(this);
	}
};

FullColumnNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFullColumnName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FullColumnNameContext = FullColumnNameContext;

MySQLParser.prototype.fullColumnName = function() {

    var localctx = new FullColumnNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 500, MySQLParser.RULE_fullColumnName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5411;
        this.uid();
        this.state = 5416;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,782,this._ctx);
        if(la_===1) {
            this.state = 5412;
            this.dottedId();
            this.state = 5414;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,781,this._ctx);
            if(la_===1) {
                this.state = 5413;
                this.dottedId();

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexColumnNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexColumnName;
    this.sortType = null; // Token
    return this;
}

IndexColumnNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexColumnNameContext.prototype.constructor = IndexColumnNameContext;

IndexColumnNameContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

IndexColumnNameContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

IndexColumnNameContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

IndexColumnNameContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

IndexColumnNameContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

IndexColumnNameContext.prototype.ASC = function() {
    return this.getToken(MySQLParser.ASC, 0);
};

IndexColumnNameContext.prototype.DESC = function() {
    return this.getToken(MySQLParser.DESC, 0);
};

IndexColumnNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexColumnName(this);
	}
};

IndexColumnNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexColumnName(this);
	}
};

IndexColumnNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexColumnName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexColumnNameContext = IndexColumnNameContext;

MySQLParser.prototype.indexColumnName = function() {

    var localctx = new IndexColumnNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 502, MySQLParser.RULE_indexColumnName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5420;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,783,this._ctx);
        switch(la_) {
        case 1:
            this.state = 5418;
            this.uid();
            break;

        case 2:
            this.state = 5419;
            this.match(MySQLParser.STRING_LITERAL);
            break;

        }
        this.state = 5426;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.LR_BRACKET) {
            this.state = 5422;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5423;
            this.decimalLiteral();
            this.state = 5424;
            this.match(MySQLParser.RR_BRACKET);
        }

        this.state = 5429;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ASC || _la===MySQLParser.DESC) {
            this.state = 5428;
            localctx.sortType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ASC || _la===MySQLParser.DESC)) {
                localctx.sortType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_userName;
    return this;
}

UserNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserNameContext.prototype.constructor = UserNameContext;

UserNameContext.prototype.STRING_USER_NAME = function() {
    return this.getToken(MySQLParser.STRING_USER_NAME, 0);
};

UserNameContext.prototype.ID = function() {
    return this.getToken(MySQLParser.ID, 0);
};

UserNameContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

UserNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUserName(this);
	}
};

UserNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUserName(this);
	}
};

UserNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUserName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UserNameContext = UserNameContext;

MySQLParser.prototype.userName = function() {

    var localctx = new UserNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 504, MySQLParser.RULE_userName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5431;
        _la = this._input.LA(1);
        if(!(((((_la - 1035)) & ~0x1f) == 0 && ((1 << (_la - 1035)) & ((1 << (MySQLParser.STRING_LITERAL - 1035)) | (1 << (MySQLParser.ID - 1035)) | (1 << (MySQLParser.STRING_USER_NAME - 1035)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MysqlVariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_mysqlVariable;
    return this;
}

MysqlVariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MysqlVariableContext.prototype.constructor = MysqlVariableContext;

MysqlVariableContext.prototype.LOCAL_ID = function() {
    return this.getToken(MySQLParser.LOCAL_ID, 0);
};

MysqlVariableContext.prototype.GLOBAL_ID = function() {
    return this.getToken(MySQLParser.GLOBAL_ID, 0);
};

MysqlVariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterMysqlVariable(this);
	}
};

MysqlVariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitMysqlVariable(this);
	}
};

MysqlVariableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitMysqlVariable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.MysqlVariableContext = MysqlVariableContext;

MySQLParser.prototype.mysqlVariable = function() {

    var localctx = new MysqlVariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 506, MySQLParser.RULE_mysqlVariable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5433;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.LOCAL_ID || _la===MySQLParser.GLOBAL_ID)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CharsetNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_charsetName;
    return this;
}

CharsetNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CharsetNameContext.prototype.constructor = CharsetNameContext;

CharsetNameContext.prototype.BINARY = function() {
    return this.getToken(MySQLParser.BINARY, 0);
};

CharsetNameContext.prototype.charsetNameBase = function() {
    return this.getTypedRuleContext(CharsetNameBaseContext,0);
};

CharsetNameContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

CharsetNameContext.prototype.CHARSET_REVERSE_QOUTE_STRING = function() {
    return this.getToken(MySQLParser.CHARSET_REVERSE_QOUTE_STRING, 0);
};

CharsetNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCharsetName(this);
	}
};

CharsetNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCharsetName(this);
	}
};

CharsetNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCharsetName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CharsetNameContext = CharsetNameContext;

MySQLParser.prototype.charsetName = function() {

    var localctx = new CharsetNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 508, MySQLParser.RULE_charsetName);
    try {
        this.state = 5439;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.BINARY:
            this.enterOuterAlt(localctx, 1);
            this.state = 5435;
            this.match(MySQLParser.BINARY);
            break;
        case MySQLParser.ARMSCII8:
        case MySQLParser.ASCII:
        case MySQLParser.BIG5:
        case MySQLParser.CP1250:
        case MySQLParser.CP1251:
        case MySQLParser.CP1256:
        case MySQLParser.CP1257:
        case MySQLParser.CP850:
        case MySQLParser.CP852:
        case MySQLParser.CP866:
        case MySQLParser.CP932:
        case MySQLParser.DEC8:
        case MySQLParser.EUCJPMS:
        case MySQLParser.EUCKR:
        case MySQLParser.GB2312:
        case MySQLParser.GBK:
        case MySQLParser.GEOSTD8:
        case MySQLParser.GREEK:
        case MySQLParser.HEBREW:
        case MySQLParser.HP8:
        case MySQLParser.KEYBCS2:
        case MySQLParser.KOI8R:
        case MySQLParser.KOI8U:
        case MySQLParser.LATIN1:
        case MySQLParser.LATIN2:
        case MySQLParser.LATIN5:
        case MySQLParser.LATIN7:
        case MySQLParser.MACCE:
        case MySQLParser.MACROMAN:
        case MySQLParser.SJIS:
        case MySQLParser.SWE7:
        case MySQLParser.TIS620:
        case MySQLParser.UCS2:
        case MySQLParser.UJIS:
        case MySQLParser.UTF16:
        case MySQLParser.UTF16LE:
        case MySQLParser.UTF32:
        case MySQLParser.UTF8:
        case MySQLParser.UTF8MB3:
        case MySQLParser.UTF8MB4:
            this.enterOuterAlt(localctx, 2);
            this.state = 5436;
            this.charsetNameBase();
            break;
        case MySQLParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 5437;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            this.enterOuterAlt(localctx, 4);
            this.state = 5438;
            this.match(MySQLParser.CHARSET_REVERSE_QOUTE_STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CollationNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_collationName;
    return this;
}

CollationNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollationNameContext.prototype.constructor = CollationNameContext;

CollationNameContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CollationNameContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

CollationNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCollationName(this);
	}
};

CollationNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCollationName(this);
	}
};

CollationNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCollationName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CollationNameContext = CollationNameContext;

MySQLParser.prototype.collationName = function() {

    var localctx = new CollationNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 510, MySQLParser.RULE_collationName);
    try {
        this.state = 5443;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,787,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5441;
            this.uid();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5442;
            this.match(MySQLParser.STRING_LITERAL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EngineNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_engineName;
    return this;
}

EngineNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EngineNameContext.prototype.constructor = EngineNameContext;

EngineNameContext.prototype.ARCHIVE = function() {
    return this.getToken(MySQLParser.ARCHIVE, 0);
};

EngineNameContext.prototype.BLACKHOLE = function() {
    return this.getToken(MySQLParser.BLACKHOLE, 0);
};

EngineNameContext.prototype.CSV = function() {
    return this.getToken(MySQLParser.CSV, 0);
};

EngineNameContext.prototype.FEDERATED = function() {
    return this.getToken(MySQLParser.FEDERATED, 0);
};

EngineNameContext.prototype.INNODB = function() {
    return this.getToken(MySQLParser.INNODB, 0);
};

EngineNameContext.prototype.MEMORY = function() {
    return this.getToken(MySQLParser.MEMORY, 0);
};

EngineNameContext.prototype.MRG_MYISAM = function() {
    return this.getToken(MySQLParser.MRG_MYISAM, 0);
};

EngineNameContext.prototype.MYISAM = function() {
    return this.getToken(MySQLParser.MYISAM, 0);
};

EngineNameContext.prototype.NDB = function() {
    return this.getToken(MySQLParser.NDB, 0);
};

EngineNameContext.prototype.NDBCLUSTER = function() {
    return this.getToken(MySQLParser.NDBCLUSTER, 0);
};

EngineNameContext.prototype.PERFORMANCE_SCHEMA = function() {
    return this.getToken(MySQLParser.PERFORMANCE_SCHEMA, 0);
};

EngineNameContext.prototype.TOKUDB = function() {
    return this.getToken(MySQLParser.TOKUDB, 0);
};

EngineNameContext.prototype.ID = function() {
    return this.getToken(MySQLParser.ID, 0);
};

EngineNameContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

EngineNameContext.prototype.REVERSE_QUOTE_ID = function() {
    return this.getToken(MySQLParser.REVERSE_QUOTE_ID, 0);
};

EngineNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterEngineName(this);
	}
};

EngineNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitEngineName(this);
	}
};

EngineNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitEngineName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.EngineNameContext = EngineNameContext;

MySQLParser.prototype.engineName = function() {

    var localctx = new EngineNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 512, MySQLParser.RULE_engineName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5445;
        _la = this._input.LA(1);
        if(!(((((_la - 677)) & ~0x1f) == 0 && ((1 << (_la - 677)) & ((1 << (MySQLParser.ARCHIVE - 677)) | (1 << (MySQLParser.BLACKHOLE - 677)) | (1 << (MySQLParser.CSV - 677)) | (1 << (MySQLParser.FEDERATED - 677)) | (1 << (MySQLParser.INNODB - 677)) | (1 << (MySQLParser.MEMORY - 677)) | (1 << (MySQLParser.MRG_MYISAM - 677)) | (1 << (MySQLParser.MYISAM - 677)) | (1 << (MySQLParser.NDB - 677)) | (1 << (MySQLParser.NDBCLUSTER - 677)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 677)) | (1 << (MySQLParser.TOKUDB - 677)))) !== 0) || ((((_la - 1035)) & ~0x1f) == 0 && ((1 << (_la - 1035)) & ((1 << (MySQLParser.STRING_LITERAL - 1035)) | (1 << (MySQLParser.ID - 1035)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1035)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UuidSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_uuidSet;
    return this;
}

UuidSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UuidSetContext.prototype.constructor = UuidSetContext;

UuidSetContext.prototype.decimalLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DecimalLiteralContext);
    } else {
        return this.getTypedRuleContext(DecimalLiteralContext,i);
    }
};

UuidSetContext.prototype.MINUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.MINUS);
    } else {
        return this.getToken(MySQLParser.MINUS, i);
    }
};


UuidSetContext.prototype.COLON_SYMB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COLON_SYMB);
    } else {
        return this.getToken(MySQLParser.COLON_SYMB, i);
    }
};


UuidSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUuidSet(this);
	}
};

UuidSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUuidSet(this);
	}
};

UuidSetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUuidSet(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UuidSetContext = UuidSetContext;

MySQLParser.prototype.uuidSet = function() {

    var localctx = new UuidSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 514, MySQLParser.RULE_uuidSet);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5447;
        this.decimalLiteral();
        this.state = 5448;
        this.match(MySQLParser.MINUS);
        this.state = 5449;
        this.decimalLiteral();
        this.state = 5450;
        this.match(MySQLParser.MINUS);
        this.state = 5451;
        this.decimalLiteral();
        this.state = 5452;
        this.match(MySQLParser.MINUS);
        this.state = 5453;
        this.decimalLiteral();
        this.state = 5454;
        this.match(MySQLParser.MINUS);
        this.state = 5455;
        this.decimalLiteral();
        this.state = 5461; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 5456;
            this.match(MySQLParser.COLON_SYMB);
            this.state = 5457;
            this.decimalLiteral();
            this.state = 5458;
            this.match(MySQLParser.MINUS);
            this.state = 5459;
            this.decimalLiteral();
            this.state = 5463; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===MySQLParser.COLON_SYMB);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function XidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_xid;
    this.globalTableUid = null; // XuidStringIdContext
    this.qualifier = null; // XuidStringIdContext
    this.idFormat = null; // DecimalLiteralContext
    return this;
}

XidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XidContext.prototype.constructor = XidContext;

XidContext.prototype.xuidStringId = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(XuidStringIdContext);
    } else {
        return this.getTypedRuleContext(XuidStringIdContext,i);
    }
};

XidContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


XidContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

XidContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterXid(this);
	}
};

XidContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitXid(this);
	}
};

XidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitXid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.XidContext = XidContext;

MySQLParser.prototype.xid = function() {

    var localctx = new XidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 516, MySQLParser.RULE_xid);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5465;
        localctx.globalTableUid = this.xuidStringId();
        this.state = 5472;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.COMMA) {
            this.state = 5466;
            this.match(MySQLParser.COMMA);
            this.state = 5467;
            localctx.qualifier = this.xuidStringId();
            this.state = 5470;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.COMMA) {
                this.state = 5468;
                this.match(MySQLParser.COMMA);
                this.state = 5469;
                localctx.idFormat = this.decimalLiteral();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function XuidStringIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_xuidStringId;
    return this;
}

XuidStringIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XuidStringIdContext.prototype.constructor = XuidStringIdContext;

XuidStringIdContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

XuidStringIdContext.prototype.BIT_STRING = function() {
    return this.getToken(MySQLParser.BIT_STRING, 0);
};

XuidStringIdContext.prototype.HEXADECIMAL_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.HEXADECIMAL_LITERAL);
    } else {
        return this.getToken(MySQLParser.HEXADECIMAL_LITERAL, i);
    }
};


XuidStringIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterXuidStringId(this);
	}
};

XuidStringIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitXuidStringId(this);
	}
};

XuidStringIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitXuidStringId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.XuidStringIdContext = XuidStringIdContext;

MySQLParser.prototype.xuidStringId = function() {

    var localctx = new XuidStringIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 518, MySQLParser.RULE_xuidStringId);
    var _la = 0; // Token type
    try {
        this.state = 5481;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 5474;
            this.match(MySQLParser.STRING_LITERAL);
            break;
        case MySQLParser.BIT_STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 5475;
            this.match(MySQLParser.BIT_STRING);
            break;
        case MySQLParser.HEXADECIMAL_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 5477; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 5476;
                this.match(MySQLParser.HEXADECIMAL_LITERAL);
                this.state = 5479; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===MySQLParser.HEXADECIMAL_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AuthPluginContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_authPlugin;
    return this;
}

AuthPluginContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AuthPluginContext.prototype.constructor = AuthPluginContext;

AuthPluginContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AuthPluginContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

AuthPluginContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAuthPlugin(this);
	}
};

AuthPluginContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAuthPlugin(this);
	}
};

AuthPluginContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAuthPlugin(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AuthPluginContext = AuthPluginContext;

MySQLParser.prototype.authPlugin = function() {

    var localctx = new AuthPluginContext(this, this._ctx, this.state);
    this.enterRule(localctx, 520, MySQLParser.RULE_authPlugin);
    try {
        this.state = 5485;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,793,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5483;
            this.uid();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5484;
            this.match(MySQLParser.STRING_LITERAL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_uid;
    return this;
}

UidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UidContext.prototype.constructor = UidContext;

UidContext.prototype.simpleId = function() {
    return this.getTypedRuleContext(SimpleIdContext,0);
};

UidContext.prototype.REVERSE_QUOTE_ID = function() {
    return this.getToken(MySQLParser.REVERSE_QUOTE_ID, 0);
};

UidContext.prototype.CHARSET_REVERSE_QOUTE_STRING = function() {
    return this.getToken(MySQLParser.CHARSET_REVERSE_QOUTE_STRING, 0);
};

UidContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUid(this);
	}
};

UidContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUid(this);
	}
};

UidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UidContext = UidContext;

MySQLParser.prototype.uid = function() {

    var localctx = new UidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 522, MySQLParser.RULE_uid);
    try {
        this.state = 5490;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,794,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5487;
            this.simpleId();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5488;
            this.match(MySQLParser.REVERSE_QUOTE_ID);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 5489;
            this.match(MySQLParser.CHARSET_REVERSE_QOUTE_STRING);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_simpleId;
    return this;
}

SimpleIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleIdContext.prototype.constructor = SimpleIdContext;

SimpleIdContext.prototype.ID = function() {
    return this.getToken(MySQLParser.ID, 0);
};

SimpleIdContext.prototype.charsetNameBase = function() {
    return this.getTypedRuleContext(CharsetNameBaseContext,0);
};

SimpleIdContext.prototype.transactionLevelBase = function() {
    return this.getTypedRuleContext(TransactionLevelBaseContext,0);
};

SimpleIdContext.prototype.engineName = function() {
    return this.getTypedRuleContext(EngineNameContext,0);
};

SimpleIdContext.prototype.privilegesBase = function() {
    return this.getTypedRuleContext(PrivilegesBaseContext,0);
};

SimpleIdContext.prototype.intervalTypeBase = function() {
    return this.getTypedRuleContext(IntervalTypeBaseContext,0);
};

SimpleIdContext.prototype.dataTypeBase = function() {
    return this.getTypedRuleContext(DataTypeBaseContext,0);
};

SimpleIdContext.prototype.keywordsCanBeId = function() {
    return this.getTypedRuleContext(KeywordsCanBeIdContext,0);
};

SimpleIdContext.prototype.functionNameBase = function() {
    return this.getTypedRuleContext(FunctionNameBaseContext,0);
};

SimpleIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleId(this);
	}
};

SimpleIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleId(this);
	}
};

SimpleIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SimpleIdContext = SimpleIdContext;

MySQLParser.prototype.simpleId = function() {

    var localctx = new SimpleIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 524, MySQLParser.RULE_simpleId);
    try {
        this.state = 5501;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,795,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5492;
            this.match(MySQLParser.ID);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5493;
            this.charsetNameBase();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 5494;
            this.transactionLevelBase();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 5495;
            this.engineName();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 5496;
            this.privilegesBase();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 5497;
            this.intervalTypeBase();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 5498;
            this.dataTypeBase();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 5499;
            this.keywordsCanBeId();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 5500;
            this.functionNameBase();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DottedIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dottedId;
    return this;
}

DottedIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DottedIdContext.prototype.constructor = DottedIdContext;

DottedIdContext.prototype.DOT_ID = function() {
    return this.getToken(MySQLParser.DOT_ID, 0);
};

DottedIdContext.prototype.DOT = function() {
    return this.getToken(MySQLParser.DOT, 0);
};

DottedIdContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DottedIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDottedId(this);
	}
};

DottedIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDottedId(this);
	}
};

DottedIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDottedId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DottedIdContext = DottedIdContext;

MySQLParser.prototype.dottedId = function() {

    var localctx = new DottedIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 526, MySQLParser.RULE_dottedId);
    try {
        this.state = 5506;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.DOT_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 5503;
            this.match(MySQLParser.DOT_ID);
            break;
        case MySQLParser.DOT:
            this.enterOuterAlt(localctx, 2);
            this.state = 5504;
            this.match(MySQLParser.DOT);
            this.state = 5505;
            this.uid();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DecimalLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_decimalLiteral;
    return this;
}

DecimalLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

DecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(MySQLParser.DECIMAL_LITERAL, 0);
};

DecimalLiteralContext.prototype.ZERO_DECIMAL = function() {
    return this.getToken(MySQLParser.ZERO_DECIMAL, 0);
};

DecimalLiteralContext.prototype.ONE_DECIMAL = function() {
    return this.getToken(MySQLParser.ONE_DECIMAL, 0);
};

DecimalLiteralContext.prototype.TWO_DECIMAL = function() {
    return this.getToken(MySQLParser.TWO_DECIMAL, 0);
};

DecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDecimalLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DecimalLiteralContext = DecimalLiteralContext;

MySQLParser.prototype.decimalLiteral = function() {

    var localctx = new DecimalLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 528, MySQLParser.RULE_decimalLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5508;
        _la = this._input.LA(1);
        if(!(((((_la - 1025)) & ~0x1f) == 0 && ((1 << (_la - 1025)) & ((1 << (MySQLParser.ZERO_DECIMAL - 1025)) | (1 << (MySQLParser.ONE_DECIMAL - 1025)) | (1 << (MySQLParser.TWO_DECIMAL - 1025)) | (1 << (MySQLParser.DECIMAL_LITERAL - 1025)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FileSizeLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_fileSizeLiteral;
    return this;
}

FileSizeLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FileSizeLiteralContext.prototype.constructor = FileSizeLiteralContext;

FileSizeLiteralContext.prototype.FILESIZE_LITERAL = function() {
    return this.getToken(MySQLParser.FILESIZE_LITERAL, 0);
};

FileSizeLiteralContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

FileSizeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFileSizeLiteral(this);
	}
};

FileSizeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFileSizeLiteral(this);
	}
};

FileSizeLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFileSizeLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FileSizeLiteralContext = FileSizeLiteralContext;

MySQLParser.prototype.fileSizeLiteral = function() {

    var localctx = new FileSizeLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 530, MySQLParser.RULE_fileSizeLiteral);
    try {
        this.state = 5512;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.FILESIZE_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 5510;
            this.match(MySQLParser.FILESIZE_LITERAL);
            break;
        case MySQLParser.ZERO_DECIMAL:
        case MySQLParser.ONE_DECIMAL:
        case MySQLParser.TWO_DECIMAL:
        case MySQLParser.DECIMAL_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 5511;
            this.decimalLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_stringLiteral;
    return this;
}

StringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

StringLiteralContext.prototype.STRING_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.STRING_LITERAL);
    } else {
        return this.getToken(MySQLParser.STRING_LITERAL, i);
    }
};


StringLiteralContext.prototype.START_NATIONAL_STRING_LITERAL = function() {
    return this.getToken(MySQLParser.START_NATIONAL_STRING_LITERAL, 0);
};

StringLiteralContext.prototype.STRING_CHARSET_NAME = function() {
    return this.getToken(MySQLParser.STRING_CHARSET_NAME, 0);
};

StringLiteralContext.prototype.COLLATE = function() {
    return this.getToken(MySQLParser.COLLATE, 0);
};

StringLiteralContext.prototype.collationName = function() {
    return this.getTypedRuleContext(CollationNameContext,0);
};

StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStringLiteral(this);
	}
};

StringLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStringLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.StringLiteralContext = StringLiteralContext;

MySQLParser.prototype.stringLiteral = function() {

    var localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 532, MySQLParser.RULE_stringLiteral);
    var _la = 0; // Token type
    try {
        this.state = 5537;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,804,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5519;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.STRING_LITERAL:
            case MySQLParser.STRING_CHARSET_NAME:
                this.state = 5515;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.STRING_CHARSET_NAME) {
                    this.state = 5514;
                    this.match(MySQLParser.STRING_CHARSET_NAME);
                }

                this.state = 5517;
                this.match(MySQLParser.STRING_LITERAL);
                break;
            case MySQLParser.START_NATIONAL_STRING_LITERAL:
                this.state = 5518;
                this.match(MySQLParser.START_NATIONAL_STRING_LITERAL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 5522; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 5521;
            		this.match(MySQLParser.STRING_LITERAL);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 5524; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,800, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5531;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.STRING_LITERAL:
            case MySQLParser.STRING_CHARSET_NAME:
                this.state = 5527;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.STRING_CHARSET_NAME) {
                    this.state = 5526;
                    this.match(MySQLParser.STRING_CHARSET_NAME);
                }

                this.state = 5529;
                this.match(MySQLParser.STRING_LITERAL);
                break;
            case MySQLParser.START_NATIONAL_STRING_LITERAL:
                this.state = 5530;
                this.match(MySQLParser.START_NATIONAL_STRING_LITERAL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 5535;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,803,this._ctx);
            if(la_===1) {
                this.state = 5533;
                this.match(MySQLParser.COLLATE);
                this.state = 5534;
                this.collationName();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_booleanLiteral;
    return this;
}

BooleanLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.TRUE = function() {
    return this.getToken(MySQLParser.TRUE, 0);
};

BooleanLiteralContext.prototype.FALSE = function() {
    return this.getToken(MySQLParser.FALSE, 0);
};

BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitBooleanLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.BooleanLiteralContext = BooleanLiteralContext;

MySQLParser.prototype.booleanLiteral = function() {

    var localctx = new BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 534, MySQLParser.RULE_booleanLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5539;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.FALSE || _la===MySQLParser.TRUE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HexadecimalLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_hexadecimalLiteral;
    return this;
}

HexadecimalLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HexadecimalLiteralContext.prototype.constructor = HexadecimalLiteralContext;

HexadecimalLiteralContext.prototype.HEXADECIMAL_LITERAL = function() {
    return this.getToken(MySQLParser.HEXADECIMAL_LITERAL, 0);
};

HexadecimalLiteralContext.prototype.STRING_CHARSET_NAME = function() {
    return this.getToken(MySQLParser.STRING_CHARSET_NAME, 0);
};

HexadecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterHexadecimalLiteral(this);
	}
};

HexadecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitHexadecimalLiteral(this);
	}
};

HexadecimalLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitHexadecimalLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.HexadecimalLiteralContext = HexadecimalLiteralContext;

MySQLParser.prototype.hexadecimalLiteral = function() {

    var localctx = new HexadecimalLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 536, MySQLParser.RULE_hexadecimalLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5542;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.STRING_CHARSET_NAME) {
            this.state = 5541;
            this.match(MySQLParser.STRING_CHARSET_NAME);
        }

        this.state = 5544;
        this.match(MySQLParser.HEXADECIMAL_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NullNotnullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_nullNotnull;
    return this;
}

NullNotnullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NullNotnullContext.prototype.constructor = NullNotnullContext;

NullNotnullContext.prototype.NULL_LITERAL = function() {
    return this.getToken(MySQLParser.NULL_LITERAL, 0);
};

NullNotnullContext.prototype.NULL_SPEC_LITERAL = function() {
    return this.getToken(MySQLParser.NULL_SPEC_LITERAL, 0);
};

NullNotnullContext.prototype.NOT = function() {
    return this.getToken(MySQLParser.NOT, 0);
};

NullNotnullContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNullNotnull(this);
	}
};

NullNotnullContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNullNotnull(this);
	}
};

NullNotnullContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNullNotnull(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.NullNotnullContext = NullNotnullContext;

MySQLParser.prototype.nullNotnull = function() {

    var localctx = new NullNotnullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 538, MySQLParser.RULE_nullNotnull);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5547;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.NOT) {
            this.state = 5546;
            this.match(MySQLParser.NOT);
        }

        this.state = 5549;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.NULL_LITERAL || _la===MySQLParser.NULL_SPEC_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_constant;
    this.nullLiteral = null; // Token
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

ConstantContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

ConstantContext.prototype.MINUS = function() {
    return this.getToken(MySQLParser.MINUS, 0);
};

ConstantContext.prototype.hexadecimalLiteral = function() {
    return this.getTypedRuleContext(HexadecimalLiteralContext,0);
};

ConstantContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

ConstantContext.prototype.REAL_LITERAL = function() {
    return this.getToken(MySQLParser.REAL_LITERAL, 0);
};

ConstantContext.prototype.BIT_STRING = function() {
    return this.getToken(MySQLParser.BIT_STRING, 0);
};

ConstantContext.prototype.NULL_LITERAL = function() {
    return this.getToken(MySQLParser.NULL_LITERAL, 0);
};

ConstantContext.prototype.NULL_SPEC_LITERAL = function() {
    return this.getToken(MySQLParser.NULL_SPEC_LITERAL, 0);
};

ConstantContext.prototype.NOT = function() {
    return this.getToken(MySQLParser.NOT, 0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitConstant(this);
	}
};

ConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ConstantContext = ConstantContext;

MySQLParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 540, MySQLParser.RULE_constant);
    var _la = 0; // Token type
    try {
        this.state = 5563;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,808,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5551;
            this.stringLiteral();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5552;
            this.decimalLiteral();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 5553;
            this.match(MySQLParser.MINUS);
            this.state = 5554;
            this.decimalLiteral();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 5555;
            this.hexadecimalLiteral();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 5556;
            this.booleanLiteral();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 5557;
            this.match(MySQLParser.REAL_LITERAL);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 5558;
            this.match(MySQLParser.BIT_STRING);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 5560;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NOT) {
                this.state = 5559;
                this.match(MySQLParser.NOT);
            }

            this.state = 5562;
            localctx.nullLiteral = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.NULL_LITERAL || _la===MySQLParser.NULL_SPEC_LITERAL)) {
                localctx.nullLiteral = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dataType;
    return this;
}

DataTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeContext.prototype.constructor = DataTypeContext;


 
DataTypeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SpatialDataTypeContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    this.typeName = null; // Token;
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SpatialDataTypeContext.prototype = Object.create(DataTypeContext.prototype);
SpatialDataTypeContext.prototype.constructor = SpatialDataTypeContext;

MySQLParser.SpatialDataTypeContext = SpatialDataTypeContext;

SpatialDataTypeContext.prototype.GEOMETRYCOLLECTION = function() {
    return this.getToken(MySQLParser.GEOMETRYCOLLECTION, 0);
};

SpatialDataTypeContext.prototype.GEOMCOLLECTION = function() {
    return this.getToken(MySQLParser.GEOMCOLLECTION, 0);
};

SpatialDataTypeContext.prototype.LINESTRING = function() {
    return this.getToken(MySQLParser.LINESTRING, 0);
};

SpatialDataTypeContext.prototype.MULTILINESTRING = function() {
    return this.getToken(MySQLParser.MULTILINESTRING, 0);
};

SpatialDataTypeContext.prototype.MULTIPOINT = function() {
    return this.getToken(MySQLParser.MULTIPOINT, 0);
};

SpatialDataTypeContext.prototype.MULTIPOLYGON = function() {
    return this.getToken(MySQLParser.MULTIPOLYGON, 0);
};

SpatialDataTypeContext.prototype.POINT = function() {
    return this.getToken(MySQLParser.POINT, 0);
};

SpatialDataTypeContext.prototype.POLYGON = function() {
    return this.getToken(MySQLParser.POLYGON, 0);
};

SpatialDataTypeContext.prototype.JSON = function() {
    return this.getToken(MySQLParser.JSON, 0);
};

SpatialDataTypeContext.prototype.GEOMETRY = function() {
    return this.getToken(MySQLParser.GEOMETRY, 0);
};
SpatialDataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSpatialDataType(this);
	}
};

SpatialDataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSpatialDataType(this);
	}
};

SpatialDataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSpatialDataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LongVarbinaryDataTypeContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LongVarbinaryDataTypeContext.prototype = Object.create(DataTypeContext.prototype);
LongVarbinaryDataTypeContext.prototype.constructor = LongVarbinaryDataTypeContext;

MySQLParser.LongVarbinaryDataTypeContext = LongVarbinaryDataTypeContext;

LongVarbinaryDataTypeContext.prototype.LONG = function() {
    return this.getToken(MySQLParser.LONG, 0);
};

LongVarbinaryDataTypeContext.prototype.VARBINARY = function() {
    return this.getToken(MySQLParser.VARBINARY, 0);
};
LongVarbinaryDataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLongVarbinaryDataType(this);
	}
};

LongVarbinaryDataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLongVarbinaryDataType(this);
	}
};

LongVarbinaryDataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLongVarbinaryDataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CollectionDataTypeContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    this.typeName = null; // Token;
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CollectionDataTypeContext.prototype = Object.create(DataTypeContext.prototype);
CollectionDataTypeContext.prototype.constructor = CollectionDataTypeContext;

MySQLParser.CollectionDataTypeContext = CollectionDataTypeContext;

CollectionDataTypeContext.prototype.collectionOptions = function() {
    return this.getTypedRuleContext(CollectionOptionsContext,0);
};

CollectionDataTypeContext.prototype.ENUM = function() {
    return this.getToken(MySQLParser.ENUM, 0);
};

CollectionDataTypeContext.prototype.SET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.SET);
    } else {
        return this.getToken(MySQLParser.SET, i);
    }
};


CollectionDataTypeContext.prototype.BINARY = function() {
    return this.getToken(MySQLParser.BINARY, 0);
};

CollectionDataTypeContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

CollectionDataTypeContext.prototype.CHARACTER = function() {
    return this.getToken(MySQLParser.CHARACTER, 0);
};

CollectionDataTypeContext.prototype.CHARSET = function() {
    return this.getToken(MySQLParser.CHARSET, 0);
};
CollectionDataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCollectionDataType(this);
	}
};

CollectionDataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCollectionDataType(this);
	}
};

CollectionDataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCollectionDataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NationalVaryingStringDataTypeContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    this.typeName = null; // Token;
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NationalVaryingStringDataTypeContext.prototype = Object.create(DataTypeContext.prototype);
NationalVaryingStringDataTypeContext.prototype.constructor = NationalVaryingStringDataTypeContext;

MySQLParser.NationalVaryingStringDataTypeContext = NationalVaryingStringDataTypeContext;

NationalVaryingStringDataTypeContext.prototype.NATIONAL = function() {
    return this.getToken(MySQLParser.NATIONAL, 0);
};

NationalVaryingStringDataTypeContext.prototype.VARYING = function() {
    return this.getToken(MySQLParser.VARYING, 0);
};

NationalVaryingStringDataTypeContext.prototype.CHAR = function() {
    return this.getToken(MySQLParser.CHAR, 0);
};

NationalVaryingStringDataTypeContext.prototype.CHARACTER = function() {
    return this.getToken(MySQLParser.CHARACTER, 0);
};

NationalVaryingStringDataTypeContext.prototype.lengthOneDimension = function() {
    return this.getTypedRuleContext(LengthOneDimensionContext,0);
};

NationalVaryingStringDataTypeContext.prototype.BINARY = function() {
    return this.getToken(MySQLParser.BINARY, 0);
};
NationalVaryingStringDataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNationalVaryingStringDataType(this);
	}
};

NationalVaryingStringDataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNationalVaryingStringDataType(this);
	}
};

NationalVaryingStringDataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNationalVaryingStringDataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DimensionDataTypeContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    this.typeName = null; // Token;
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DimensionDataTypeContext.prototype = Object.create(DataTypeContext.prototype);
DimensionDataTypeContext.prototype.constructor = DimensionDataTypeContext;

MySQLParser.DimensionDataTypeContext = DimensionDataTypeContext;

DimensionDataTypeContext.prototype.TINYINT = function() {
    return this.getToken(MySQLParser.TINYINT, 0);
};

DimensionDataTypeContext.prototype.SMALLINT = function() {
    return this.getToken(MySQLParser.SMALLINT, 0);
};

DimensionDataTypeContext.prototype.MEDIUMINT = function() {
    return this.getToken(MySQLParser.MEDIUMINT, 0);
};

DimensionDataTypeContext.prototype.INT = function() {
    return this.getToken(MySQLParser.INT, 0);
};

DimensionDataTypeContext.prototype.INTEGER = function() {
    return this.getToken(MySQLParser.INTEGER, 0);
};

DimensionDataTypeContext.prototype.BIGINT = function() {
    return this.getToken(MySQLParser.BIGINT, 0);
};

DimensionDataTypeContext.prototype.MIDDLEINT = function() {
    return this.getToken(MySQLParser.MIDDLEINT, 0);
};

DimensionDataTypeContext.prototype.INT1 = function() {
    return this.getToken(MySQLParser.INT1, 0);
};

DimensionDataTypeContext.prototype.INT2 = function() {
    return this.getToken(MySQLParser.INT2, 0);
};

DimensionDataTypeContext.prototype.INT3 = function() {
    return this.getToken(MySQLParser.INT3, 0);
};

DimensionDataTypeContext.prototype.INT4 = function() {
    return this.getToken(MySQLParser.INT4, 0);
};

DimensionDataTypeContext.prototype.INT8 = function() {
    return this.getToken(MySQLParser.INT8, 0);
};

DimensionDataTypeContext.prototype.lengthOneDimension = function() {
    return this.getTypedRuleContext(LengthOneDimensionContext,0);
};

DimensionDataTypeContext.prototype.ZEROFILL = function() {
    return this.getToken(MySQLParser.ZEROFILL, 0);
};

DimensionDataTypeContext.prototype.SIGNED = function() {
    return this.getToken(MySQLParser.SIGNED, 0);
};

DimensionDataTypeContext.prototype.UNSIGNED = function() {
    return this.getToken(MySQLParser.UNSIGNED, 0);
};

DimensionDataTypeContext.prototype.REAL = function() {
    return this.getToken(MySQLParser.REAL, 0);
};

DimensionDataTypeContext.prototype.lengthTwoDimension = function() {
    return this.getTypedRuleContext(LengthTwoDimensionContext,0);
};

DimensionDataTypeContext.prototype.DOUBLE = function() {
    return this.getToken(MySQLParser.DOUBLE, 0);
};

DimensionDataTypeContext.prototype.PRECISION = function() {
    return this.getToken(MySQLParser.PRECISION, 0);
};

DimensionDataTypeContext.prototype.DECIMAL = function() {
    return this.getToken(MySQLParser.DECIMAL, 0);
};

DimensionDataTypeContext.prototype.DEC = function() {
    return this.getToken(MySQLParser.DEC, 0);
};

DimensionDataTypeContext.prototype.FIXED = function() {
    return this.getToken(MySQLParser.FIXED, 0);
};

DimensionDataTypeContext.prototype.NUMERIC = function() {
    return this.getToken(MySQLParser.NUMERIC, 0);
};

DimensionDataTypeContext.prototype.FLOAT = function() {
    return this.getToken(MySQLParser.FLOAT, 0);
};

DimensionDataTypeContext.prototype.FLOAT4 = function() {
    return this.getToken(MySQLParser.FLOAT4, 0);
};

DimensionDataTypeContext.prototype.FLOAT8 = function() {
    return this.getToken(MySQLParser.FLOAT8, 0);
};

DimensionDataTypeContext.prototype.lengthTwoOptionalDimension = function() {
    return this.getTypedRuleContext(LengthTwoOptionalDimensionContext,0);
};

DimensionDataTypeContext.prototype.BIT = function() {
    return this.getToken(MySQLParser.BIT, 0);
};

DimensionDataTypeContext.prototype.TIME = function() {
    return this.getToken(MySQLParser.TIME, 0);
};

DimensionDataTypeContext.prototype.TIMESTAMP = function() {
    return this.getToken(MySQLParser.TIMESTAMP, 0);
};

DimensionDataTypeContext.prototype.DATETIME = function() {
    return this.getToken(MySQLParser.DATETIME, 0);
};

DimensionDataTypeContext.prototype.BINARY = function() {
    return this.getToken(MySQLParser.BINARY, 0);
};

DimensionDataTypeContext.prototype.VARBINARY = function() {
    return this.getToken(MySQLParser.VARBINARY, 0);
};

DimensionDataTypeContext.prototype.YEAR = function() {
    return this.getToken(MySQLParser.YEAR, 0);
};
DimensionDataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDimensionDataType(this);
	}
};

DimensionDataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDimensionDataType(this);
	}
};

DimensionDataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDimensionDataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function StringDataTypeContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    this.typeName = null; // Token;
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StringDataTypeContext.prototype = Object.create(DataTypeContext.prototype);
StringDataTypeContext.prototype.constructor = StringDataTypeContext;

MySQLParser.StringDataTypeContext = StringDataTypeContext;

StringDataTypeContext.prototype.CHAR = function() {
    return this.getToken(MySQLParser.CHAR, 0);
};

StringDataTypeContext.prototype.CHARACTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.CHARACTER);
    } else {
        return this.getToken(MySQLParser.CHARACTER, i);
    }
};


StringDataTypeContext.prototype.VARCHAR = function() {
    return this.getToken(MySQLParser.VARCHAR, 0);
};

StringDataTypeContext.prototype.TINYTEXT = function() {
    return this.getToken(MySQLParser.TINYTEXT, 0);
};

StringDataTypeContext.prototype.TEXT = function() {
    return this.getToken(MySQLParser.TEXT, 0);
};

StringDataTypeContext.prototype.MEDIUMTEXT = function() {
    return this.getToken(MySQLParser.MEDIUMTEXT, 0);
};

StringDataTypeContext.prototype.LONGTEXT = function() {
    return this.getToken(MySQLParser.LONGTEXT, 0);
};

StringDataTypeContext.prototype.NCHAR = function() {
    return this.getToken(MySQLParser.NCHAR, 0);
};

StringDataTypeContext.prototype.NVARCHAR = function() {
    return this.getToken(MySQLParser.NVARCHAR, 0);
};

StringDataTypeContext.prototype.LONG = function() {
    return this.getToken(MySQLParser.LONG, 0);
};

StringDataTypeContext.prototype.lengthOneDimension = function() {
    return this.getTypedRuleContext(LengthOneDimensionContext,0);
};

StringDataTypeContext.prototype.BINARY = function() {
    return this.getToken(MySQLParser.BINARY, 0);
};

StringDataTypeContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

StringDataTypeContext.prototype.COLLATE = function() {
    return this.getToken(MySQLParser.COLLATE, 0);
};

StringDataTypeContext.prototype.collationName = function() {
    return this.getTypedRuleContext(CollationNameContext,0);
};

StringDataTypeContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

StringDataTypeContext.prototype.CHARSET = function() {
    return this.getToken(MySQLParser.CHARSET, 0);
};
StringDataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterStringDataType(this);
	}
};

StringDataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitStringDataType(this);
	}
};

StringDataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitStringDataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LongVarcharDataTypeContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    this.typeName = null; // Token;
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LongVarcharDataTypeContext.prototype = Object.create(DataTypeContext.prototype);
LongVarcharDataTypeContext.prototype.constructor = LongVarcharDataTypeContext;

MySQLParser.LongVarcharDataTypeContext = LongVarcharDataTypeContext;

LongVarcharDataTypeContext.prototype.LONG = function() {
    return this.getToken(MySQLParser.LONG, 0);
};

LongVarcharDataTypeContext.prototype.VARCHAR = function() {
    return this.getToken(MySQLParser.VARCHAR, 0);
};

LongVarcharDataTypeContext.prototype.BINARY = function() {
    return this.getToken(MySQLParser.BINARY, 0);
};

LongVarcharDataTypeContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

LongVarcharDataTypeContext.prototype.COLLATE = function() {
    return this.getToken(MySQLParser.COLLATE, 0);
};

LongVarcharDataTypeContext.prototype.collationName = function() {
    return this.getTypedRuleContext(CollationNameContext,0);
};

LongVarcharDataTypeContext.prototype.CHARACTER = function() {
    return this.getToken(MySQLParser.CHARACTER, 0);
};

LongVarcharDataTypeContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

LongVarcharDataTypeContext.prototype.CHARSET = function() {
    return this.getToken(MySQLParser.CHARSET, 0);
};
LongVarcharDataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLongVarcharDataType(this);
	}
};

LongVarcharDataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLongVarcharDataType(this);
	}
};

LongVarcharDataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLongVarcharDataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NationalStringDataTypeContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    this.typeName = null; // Token;
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NationalStringDataTypeContext.prototype = Object.create(DataTypeContext.prototype);
NationalStringDataTypeContext.prototype.constructor = NationalStringDataTypeContext;

MySQLParser.NationalStringDataTypeContext = NationalStringDataTypeContext;

NationalStringDataTypeContext.prototype.NATIONAL = function() {
    return this.getToken(MySQLParser.NATIONAL, 0);
};

NationalStringDataTypeContext.prototype.VARCHAR = function() {
    return this.getToken(MySQLParser.VARCHAR, 0);
};

NationalStringDataTypeContext.prototype.CHARACTER = function() {
    return this.getToken(MySQLParser.CHARACTER, 0);
};

NationalStringDataTypeContext.prototype.lengthOneDimension = function() {
    return this.getTypedRuleContext(LengthOneDimensionContext,0);
};

NationalStringDataTypeContext.prototype.BINARY = function() {
    return this.getToken(MySQLParser.BINARY, 0);
};

NationalStringDataTypeContext.prototype.NCHAR = function() {
    return this.getToken(MySQLParser.NCHAR, 0);
};
NationalStringDataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNationalStringDataType(this);
	}
};

NationalStringDataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNationalStringDataType(this);
	}
};

NationalStringDataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNationalStringDataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleDataTypeContext(parser, ctx) {
	DataTypeContext.call(this, parser);
    this.typeName = null; // Token;
    DataTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleDataTypeContext.prototype = Object.create(DataTypeContext.prototype);
SimpleDataTypeContext.prototype.constructor = SimpleDataTypeContext;

MySQLParser.SimpleDataTypeContext = SimpleDataTypeContext;

SimpleDataTypeContext.prototype.DATE = function() {
    return this.getToken(MySQLParser.DATE, 0);
};

SimpleDataTypeContext.prototype.TINYBLOB = function() {
    return this.getToken(MySQLParser.TINYBLOB, 0);
};

SimpleDataTypeContext.prototype.BLOB = function() {
    return this.getToken(MySQLParser.BLOB, 0);
};

SimpleDataTypeContext.prototype.MEDIUMBLOB = function() {
    return this.getToken(MySQLParser.MEDIUMBLOB, 0);
};

SimpleDataTypeContext.prototype.LONGBLOB = function() {
    return this.getToken(MySQLParser.LONGBLOB, 0);
};

SimpleDataTypeContext.prototype.BOOL = function() {
    return this.getToken(MySQLParser.BOOL, 0);
};

SimpleDataTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(MySQLParser.BOOLEAN, 0);
};

SimpleDataTypeContext.prototype.SERIAL = function() {
    return this.getToken(MySQLParser.SERIAL, 0);
};
SimpleDataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleDataType(this);
	}
};

SimpleDataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleDataType(this);
	}
};

SimpleDataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleDataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.DataTypeContext = DataTypeContext;

MySQLParser.prototype.dataType = function() {

    var localctx = new DataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 542, MySQLParser.RULE_dataType);
    var _la = 0; // Token type
    try {
        this.state = 5692;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,842,this._ctx);
        switch(la_) {
        case 1:
            localctx = new StringDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 5565;
            localctx.typeName = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CHARACTER || ((((_la - 204)) & ~0x1f) == 0 && ((1 << (_la - 204)) & ((1 << (MySQLParser.CHAR - 204)) | (1 << (MySQLParser.VARCHAR - 204)) | (1 << (MySQLParser.NVARCHAR - 204)) | (1 << (MySQLParser.LONG - 204)) | (1 << (MySQLParser.TINYTEXT - 204)) | (1 << (MySQLParser.TEXT - 204)) | (1 << (MySQLParser.MEDIUMTEXT - 204)) | (1 << (MySQLParser.LONGTEXT - 204)))) !== 0) || _la===MySQLParser.NCHAR)) {
                localctx.typeName = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5567;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,809,this._ctx);
            if(la_===1) {
                this.state = 5566;
                this.lengthOneDimension();

            }
            this.state = 5570;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.BINARY) {
                this.state = 5569;
                this.match(MySQLParser.BINARY);
            }

            this.state = 5578;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,812,this._ctx);
            if(la_===1) {
                this.state = 5575;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.CHARACTER:
                    this.state = 5572;
                    this.match(MySQLParser.CHARACTER);
                    this.state = 5573;
                    this.match(MySQLParser.SET);
                    break;
                case MySQLParser.CHARSET:
                    this.state = 5574;
                    this.match(MySQLParser.CHARSET);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 5577;
                this.charsetName();

            }
            this.state = 5582;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,813,this._ctx);
            if(la_===1) {
                this.state = 5580;
                this.match(MySQLParser.COLLATE);
                this.state = 5581;
                this.collationName();

            }
            break;

        case 2:
            localctx = new NationalStringDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 5584;
            this.match(MySQLParser.NATIONAL);
            this.state = 5585;
            localctx.typeName = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CHARACTER || _la===MySQLParser.VARCHAR)) {
                localctx.typeName = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5587;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,814,this._ctx);
            if(la_===1) {
                this.state = 5586;
                this.lengthOneDimension();

            }
            this.state = 5590;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.BINARY) {
                this.state = 5589;
                this.match(MySQLParser.BINARY);
            }

            break;

        case 3:
            localctx = new NationalStringDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 5592;
            this.match(MySQLParser.NCHAR);
            this.state = 5593;
            localctx.typeName = this.match(MySQLParser.VARCHAR);
            this.state = 5595;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,816,this._ctx);
            if(la_===1) {
                this.state = 5594;
                this.lengthOneDimension();

            }
            this.state = 5598;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.BINARY) {
                this.state = 5597;
                this.match(MySQLParser.BINARY);
            }

            break;

        case 4:
            localctx = new NationalVaryingStringDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 5600;
            this.match(MySQLParser.NATIONAL);
            this.state = 5601;
            localctx.typeName = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CHARACTER || _la===MySQLParser.CHAR)) {
                localctx.typeName = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5602;
            this.match(MySQLParser.VARYING);
            this.state = 5604;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,818,this._ctx);
            if(la_===1) {
                this.state = 5603;
                this.lengthOneDimension();

            }
            this.state = 5607;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.BINARY) {
                this.state = 5606;
                this.match(MySQLParser.BINARY);
            }

            break;

        case 5:
            localctx = new DimensionDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 5609;
            localctx.typeName = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 178)) & ~0x1f) == 0 && ((1 << (_la - 178)) & ((1 << (MySQLParser.TINYINT - 178)) | (1 << (MySQLParser.SMALLINT - 178)) | (1 << (MySQLParser.MEDIUMINT - 178)) | (1 << (MySQLParser.MIDDLEINT - 178)) | (1 << (MySQLParser.INT - 178)) | (1 << (MySQLParser.INT1 - 178)) | (1 << (MySQLParser.INT2 - 178)) | (1 << (MySQLParser.INT3 - 178)) | (1 << (MySQLParser.INT4 - 178)) | (1 << (MySQLParser.INT8 - 178)) | (1 << (MySQLParser.INTEGER - 178)) | (1 << (MySQLParser.BIGINT - 178)))) !== 0))) {
                localctx.typeName = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5611;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,820,this._ctx);
            if(la_===1) {
                this.state = 5610;
                this.lengthOneDimension();

            }
            this.state = 5614;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,821,this._ctx);
            if(la_===1) {
                this.state = 5613;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.UNSIGNED || _la===MySQLParser.SIGNED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 5617;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ZEROFILL) {
                this.state = 5616;
                this.match(MySQLParser.ZEROFILL);
            }

            break;

        case 6:
            localctx = new DimensionDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 5619;
            localctx.typeName = this.match(MySQLParser.REAL);
            this.state = 5621;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,823,this._ctx);
            if(la_===1) {
                this.state = 5620;
                this.lengthTwoDimension();

            }
            this.state = 5624;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,824,this._ctx);
            if(la_===1) {
                this.state = 5623;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.UNSIGNED || _la===MySQLParser.SIGNED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 5627;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ZEROFILL) {
                this.state = 5626;
                this.match(MySQLParser.ZEROFILL);
            }

            break;

        case 7:
            localctx = new DimensionDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 5629;
            localctx.typeName = this.match(MySQLParser.DOUBLE);
            this.state = 5631;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.PRECISION) {
                this.state = 5630;
                this.match(MySQLParser.PRECISION);
            }

            this.state = 5634;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,827,this._ctx);
            if(la_===1) {
                this.state = 5633;
                this.lengthTwoDimension();

            }
            this.state = 5637;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,828,this._ctx);
            if(la_===1) {
                this.state = 5636;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.UNSIGNED || _la===MySQLParser.SIGNED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 5640;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ZEROFILL) {
                this.state = 5639;
                this.match(MySQLParser.ZEROFILL);
            }

            break;

        case 8:
            localctx = new DimensionDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 5642;
            localctx.typeName = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (MySQLParser.FLOAT - 193)) | (1 << (MySQLParser.FLOAT4 - 193)) | (1 << (MySQLParser.FLOAT8 - 193)) | (1 << (MySQLParser.DECIMAL - 193)) | (1 << (MySQLParser.DEC - 193)) | (1 << (MySQLParser.NUMERIC - 193)))) !== 0) || _la===MySQLParser.FIXED)) {
                localctx.typeName = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5644;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,830,this._ctx);
            if(la_===1) {
                this.state = 5643;
                this.lengthTwoOptionalDimension();

            }
            this.state = 5647;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,831,this._ctx);
            if(la_===1) {
                this.state = 5646;
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.UNSIGNED || _la===MySQLParser.SIGNED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 5650;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ZEROFILL) {
                this.state = 5649;
                this.match(MySQLParser.ZEROFILL);
            }

            break;

        case 9:
            localctx = new SimpleDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 5652;
            localctx.typeName = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TINYBLOB - 199)) | (1 << (MySQLParser.BLOB - 199)) | (1 << (MySQLParser.MEDIUMBLOB - 199)) | (1 << (MySQLParser.LONGBLOB - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || _la===MySQLParser.BOOL || _la===MySQLParser.BOOLEAN)) {
                localctx.typeName = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 10:
            localctx = new DimensionDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 5653;
            localctx.typeName = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 200)) & ~0x1f) == 0 && ((1 << (_la - 200)) & ((1 << (MySQLParser.TIME - 200)) | (1 << (MySQLParser.TIMESTAMP - 200)) | (1 << (MySQLParser.DATETIME - 200)) | (1 << (MySQLParser.YEAR - 200)) | (1 << (MySQLParser.BINARY - 200)) | (1 << (MySQLParser.VARBINARY - 200)))) !== 0) || _la===MySQLParser.BIT)) {
                localctx.typeName = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5655;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,833,this._ctx);
            if(la_===1) {
                this.state = 5654;
                this.lengthOneDimension();

            }
            break;

        case 11:
            localctx = new CollectionDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 5657;
            localctx.typeName = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.SET || _la===MySQLParser.ENUM)) {
                localctx.typeName = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5658;
            this.collectionOptions();
            this.state = 5660;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.BINARY) {
                this.state = 5659;
                this.match(MySQLParser.BINARY);
            }

            this.state = 5668;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,836,this._ctx);
            if(la_===1) {
                this.state = 5665;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.CHARACTER:
                    this.state = 5662;
                    this.match(MySQLParser.CHARACTER);
                    this.state = 5663;
                    this.match(MySQLParser.SET);
                    break;
                case MySQLParser.CHARSET:
                    this.state = 5664;
                    this.match(MySQLParser.CHARSET);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 5667;
                this.charsetName();

            }
            break;

        case 12:
            localctx = new SpatialDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 5670;
            localctx.typeName = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.JSON || ((((_la - 693)) & ~0x1f) == 0 && ((1 << (_la - 693)) & ((1 << (MySQLParser.GEOMETRYCOLLECTION - 693)) | (1 << (MySQLParser.GEOMCOLLECTION - 693)) | (1 << (MySQLParser.GEOMETRY - 693)) | (1 << (MySQLParser.LINESTRING - 693)) | (1 << (MySQLParser.MULTILINESTRING - 693)) | (1 << (MySQLParser.MULTIPOINT - 693)) | (1 << (MySQLParser.MULTIPOLYGON - 693)) | (1 << (MySQLParser.POINT - 693)) | (1 << (MySQLParser.POLYGON - 693)))) !== 0))) {
                localctx.typeName = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 13:
            localctx = new LongVarcharDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 5671;
            localctx.typeName = this.match(MySQLParser.LONG);
            this.state = 5673;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.VARCHAR) {
                this.state = 5672;
                this.match(MySQLParser.VARCHAR);
            }

            this.state = 5676;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.BINARY) {
                this.state = 5675;
                this.match(MySQLParser.BINARY);
            }

            this.state = 5684;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,840,this._ctx);
            if(la_===1) {
                this.state = 5681;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.CHARACTER:
                    this.state = 5678;
                    this.match(MySQLParser.CHARACTER);
                    this.state = 5679;
                    this.match(MySQLParser.SET);
                    break;
                case MySQLParser.CHARSET:
                    this.state = 5680;
                    this.match(MySQLParser.CHARSET);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 5683;
                this.charsetName();

            }
            this.state = 5688;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,841,this._ctx);
            if(la_===1) {
                this.state = 5686;
                this.match(MySQLParser.COLLATE);
                this.state = 5687;
                this.collationName();

            }
            break;

        case 14:
            localctx = new LongVarbinaryDataTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 5690;
            this.match(MySQLParser.LONG);
            this.state = 5691;
            this.match(MySQLParser.VARBINARY);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CollectionOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_collectionOptions;
    return this;
}

CollectionOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollectionOptionsContext.prototype.constructor = CollectionOptionsContext;

CollectionOptionsContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

CollectionOptionsContext.prototype.STRING_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.STRING_LITERAL);
    } else {
        return this.getToken(MySQLParser.STRING_LITERAL, i);
    }
};


CollectionOptionsContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

CollectionOptionsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


CollectionOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCollectionOptions(this);
	}
};

CollectionOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCollectionOptions(this);
	}
};

CollectionOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCollectionOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CollectionOptionsContext = CollectionOptionsContext;

MySQLParser.prototype.collectionOptions = function() {

    var localctx = new CollectionOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 544, MySQLParser.RULE_collectionOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5694;
        this.match(MySQLParser.LR_BRACKET);
        this.state = 5695;
        this.match(MySQLParser.STRING_LITERAL);
        this.state = 5700;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 5696;
            this.match(MySQLParser.COMMA);
            this.state = 5697;
            this.match(MySQLParser.STRING_LITERAL);
            this.state = 5702;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5703;
        this.match(MySQLParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConvertedDataTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_convertedDataType;
    this.typeName = null; // Token
    return this;
}

ConvertedDataTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConvertedDataTypeContext.prototype.constructor = ConvertedDataTypeContext;

ConvertedDataTypeContext.prototype.BINARY = function() {
    return this.getToken(MySQLParser.BINARY, 0);
};

ConvertedDataTypeContext.prototype.NCHAR = function() {
    return this.getToken(MySQLParser.NCHAR, 0);
};

ConvertedDataTypeContext.prototype.lengthOneDimension = function() {
    return this.getTypedRuleContext(LengthOneDimensionContext,0);
};

ConvertedDataTypeContext.prototype.CHAR = function() {
    return this.getToken(MySQLParser.CHAR, 0);
};

ConvertedDataTypeContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

ConvertedDataTypeContext.prototype.CHARACTER = function() {
    return this.getToken(MySQLParser.CHARACTER, 0);
};

ConvertedDataTypeContext.prototype.SET = function() {
    return this.getToken(MySQLParser.SET, 0);
};

ConvertedDataTypeContext.prototype.CHARSET = function() {
    return this.getToken(MySQLParser.CHARSET, 0);
};

ConvertedDataTypeContext.prototype.DATE = function() {
    return this.getToken(MySQLParser.DATE, 0);
};

ConvertedDataTypeContext.prototype.DATETIME = function() {
    return this.getToken(MySQLParser.DATETIME, 0);
};

ConvertedDataTypeContext.prototype.TIME = function() {
    return this.getToken(MySQLParser.TIME, 0);
};

ConvertedDataTypeContext.prototype.JSON = function() {
    return this.getToken(MySQLParser.JSON, 0);
};

ConvertedDataTypeContext.prototype.DECIMAL = function() {
    return this.getToken(MySQLParser.DECIMAL, 0);
};

ConvertedDataTypeContext.prototype.lengthTwoDimension = function() {
    return this.getTypedRuleContext(LengthTwoDimensionContext,0);
};

ConvertedDataTypeContext.prototype.SIGNED = function() {
    return this.getToken(MySQLParser.SIGNED, 0);
};

ConvertedDataTypeContext.prototype.UNSIGNED = function() {
    return this.getToken(MySQLParser.UNSIGNED, 0);
};

ConvertedDataTypeContext.prototype.INTEGER = function() {
    return this.getToken(MySQLParser.INTEGER, 0);
};

ConvertedDataTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterConvertedDataType(this);
	}
};

ConvertedDataTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitConvertedDataType(this);
	}
};

ConvertedDataTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitConvertedDataType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ConvertedDataTypeContext = ConvertedDataTypeContext;

MySQLParser.prototype.convertedDataType = function() {

    var localctx = new ConvertedDataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 546, MySQLParser.RULE_convertedDataType);
    var _la = 0; // Token type
    try {
        this.state = 5730;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.BINARY:
        case MySQLParser.NCHAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 5705;
            localctx.typeName = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.BINARY || _la===MySQLParser.NCHAR)) {
                localctx.typeName = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5707;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LR_BRACKET) {
                this.state = 5706;
                this.lengthOneDimension();
            }

            break;
        case MySQLParser.CHAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 5709;
            localctx.typeName = this.match(MySQLParser.CHAR);
            this.state = 5711;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LR_BRACKET) {
                this.state = 5710;
                this.lengthOneDimension();
            }

            this.state = 5719;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.CHARACTER || _la===MySQLParser.CHARSET) {
                this.state = 5716;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case MySQLParser.CHARACTER:
                    this.state = 5713;
                    this.match(MySQLParser.CHARACTER);
                    this.state = 5714;
                    this.match(MySQLParser.SET);
                    break;
                case MySQLParser.CHARSET:
                    this.state = 5715;
                    this.match(MySQLParser.CHARSET);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 5718;
                this.charsetName();
            }

            break;
        case MySQLParser.DATE:
        case MySQLParser.TIME:
        case MySQLParser.DATETIME:
        case MySQLParser.JSON:
            this.enterOuterAlt(localctx, 3);
            this.state = 5721;
            localctx.typeName = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.DATETIME - 199)))) !== 0) || _la===MySQLParser.JSON)) {
                localctx.typeName = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case MySQLParser.DECIMAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 5722;
            localctx.typeName = this.match(MySQLParser.DECIMAL);
            this.state = 5724;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LR_BRACKET) {
                this.state = 5723;
                this.lengthTwoDimension();
            }

            break;
        case MySQLParser.UNSIGNED:
        case MySQLParser.SIGNED:
            this.enterOuterAlt(localctx, 5);
            this.state = 5726;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.UNSIGNED || _la===MySQLParser.SIGNED)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5728;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.INTEGER) {
                this.state = 5727;
                this.match(MySQLParser.INTEGER);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LengthOneDimensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_lengthOneDimension;
    return this;
}

LengthOneDimensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LengthOneDimensionContext.prototype.constructor = LengthOneDimensionContext;

LengthOneDimensionContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

LengthOneDimensionContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

LengthOneDimensionContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

LengthOneDimensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLengthOneDimension(this);
	}
};

LengthOneDimensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLengthOneDimension(this);
	}
};

LengthOneDimensionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLengthOneDimension(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LengthOneDimensionContext = LengthOneDimensionContext;

MySQLParser.prototype.lengthOneDimension = function() {

    var localctx = new LengthOneDimensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 548, MySQLParser.RULE_lengthOneDimension);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5732;
        this.match(MySQLParser.LR_BRACKET);
        this.state = 5733;
        this.decimalLiteral();
        this.state = 5734;
        this.match(MySQLParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LengthTwoDimensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_lengthTwoDimension;
    return this;
}

LengthTwoDimensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LengthTwoDimensionContext.prototype.constructor = LengthTwoDimensionContext;

LengthTwoDimensionContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

LengthTwoDimensionContext.prototype.decimalLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DecimalLiteralContext);
    } else {
        return this.getTypedRuleContext(DecimalLiteralContext,i);
    }
};

LengthTwoDimensionContext.prototype.COMMA = function() {
    return this.getToken(MySQLParser.COMMA, 0);
};

LengthTwoDimensionContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

LengthTwoDimensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLengthTwoDimension(this);
	}
};

LengthTwoDimensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLengthTwoDimension(this);
	}
};

LengthTwoDimensionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLengthTwoDimension(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LengthTwoDimensionContext = LengthTwoDimensionContext;

MySQLParser.prototype.lengthTwoDimension = function() {

    var localctx = new LengthTwoDimensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 550, MySQLParser.RULE_lengthTwoDimension);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5736;
        this.match(MySQLParser.LR_BRACKET);
        this.state = 5737;
        this.decimalLiteral();
        this.state = 5738;
        this.match(MySQLParser.COMMA);
        this.state = 5739;
        this.decimalLiteral();
        this.state = 5740;
        this.match(MySQLParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LengthTwoOptionalDimensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_lengthTwoOptionalDimension;
    return this;
}

LengthTwoOptionalDimensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LengthTwoOptionalDimensionContext.prototype.constructor = LengthTwoOptionalDimensionContext;

LengthTwoOptionalDimensionContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

LengthTwoOptionalDimensionContext.prototype.decimalLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DecimalLiteralContext);
    } else {
        return this.getTypedRuleContext(DecimalLiteralContext,i);
    }
};

LengthTwoOptionalDimensionContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

LengthTwoOptionalDimensionContext.prototype.COMMA = function() {
    return this.getToken(MySQLParser.COMMA, 0);
};

LengthTwoOptionalDimensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLengthTwoOptionalDimension(this);
	}
};

LengthTwoOptionalDimensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLengthTwoOptionalDimension(this);
	}
};

LengthTwoOptionalDimensionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLengthTwoOptionalDimension(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LengthTwoOptionalDimensionContext = LengthTwoOptionalDimensionContext;

MySQLParser.prototype.lengthTwoOptionalDimension = function() {

    var localctx = new LengthTwoOptionalDimensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 552, MySQLParser.RULE_lengthTwoOptionalDimension);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5742;
        this.match(MySQLParser.LR_BRACKET);
        this.state = 5743;
        this.decimalLiteral();
        this.state = 5746;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.COMMA) {
            this.state = 5744;
            this.match(MySQLParser.COMMA);
            this.state = 5745;
            this.decimalLiteral();
        }

        this.state = 5748;
        this.match(MySQLParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UidListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_uidList;
    return this;
}

UidListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UidListContext.prototype.constructor = UidListContext;

UidListContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

UidListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


UidListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUidList(this);
	}
};

UidListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUidList(this);
	}
};

UidListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUidList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UidListContext = UidListContext;

MySQLParser.prototype.uidList = function() {

    var localctx = new UidListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 554, MySQLParser.RULE_uidList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5750;
        this.uid();
        this.state = 5755;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,852,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 5751;
                this.match(MySQLParser.COMMA);
                this.state = 5752;
                this.uid(); 
            }
            this.state = 5757;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,852,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_tables;
    return this;
}

TablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablesContext.prototype.constructor = TablesContext;

TablesContext.prototype.tableName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableNameContext);
    } else {
        return this.getTypedRuleContext(TableNameContext,i);
    }
};

TablesContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


TablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTables(this);
	}
};

TablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTables(this);
	}
};

TablesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTables(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TablesContext = TablesContext;

MySQLParser.prototype.tables = function() {

    var localctx = new TablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 556, MySQLParser.RULE_tables);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5758;
        this.tableName();
        this.state = 5763;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,853,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 5759;
                this.match(MySQLParser.COMMA);
                this.state = 5760;
                this.tableName(); 
            }
            this.state = 5765;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,853,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexColumnNamesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_indexColumnNames;
    return this;
}

IndexColumnNamesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexColumnNamesContext.prototype.constructor = IndexColumnNamesContext;

IndexColumnNamesContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

IndexColumnNamesContext.prototype.indexColumnName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexColumnNameContext);
    } else {
        return this.getTypedRuleContext(IndexColumnNameContext,i);
    }
};

IndexColumnNamesContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

IndexColumnNamesContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


IndexColumnNamesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIndexColumnNames(this);
	}
};

IndexColumnNamesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIndexColumnNames(this);
	}
};

IndexColumnNamesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIndexColumnNames(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IndexColumnNamesContext = IndexColumnNamesContext;

MySQLParser.prototype.indexColumnNames = function() {

    var localctx = new IndexColumnNamesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 558, MySQLParser.RULE_indexColumnNames);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5766;
        this.match(MySQLParser.LR_BRACKET);
        this.state = 5767;
        this.indexColumnName();
        this.state = 5772;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 5768;
            this.match(MySQLParser.COMMA);
            this.state = 5769;
            this.indexColumnName();
            this.state = 5774;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5775;
        this.match(MySQLParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_expressions;
    return this;
}

ExpressionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionsContext.prototype.constructor = ExpressionsContext;

ExpressionsContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


ExpressionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExpressions(this);
	}
};

ExpressionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExpressions(this);
	}
};

ExpressionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExpressions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ExpressionsContext = ExpressionsContext;

MySQLParser.prototype.expressions = function() {

    var localctx = new ExpressionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 560, MySQLParser.RULE_expressions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5777;
        this.expression(0);
        this.state = 5782;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 5778;
            this.match(MySQLParser.COMMA);
            this.state = 5779;
            this.expression(0);
            this.state = 5784;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionsWithDefaultsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_expressionsWithDefaults;
    return this;
}

ExpressionsWithDefaultsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionsWithDefaultsContext.prototype.constructor = ExpressionsWithDefaultsContext;

ExpressionsWithDefaultsContext.prototype.expressionOrDefault = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionOrDefaultContext);
    } else {
        return this.getTypedRuleContext(ExpressionOrDefaultContext,i);
    }
};

ExpressionsWithDefaultsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


ExpressionsWithDefaultsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExpressionsWithDefaults(this);
	}
};

ExpressionsWithDefaultsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExpressionsWithDefaults(this);
	}
};

ExpressionsWithDefaultsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExpressionsWithDefaults(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ExpressionsWithDefaultsContext = ExpressionsWithDefaultsContext;

MySQLParser.prototype.expressionsWithDefaults = function() {

    var localctx = new ExpressionsWithDefaultsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 562, MySQLParser.RULE_expressionsWithDefaults);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5785;
        this.expressionOrDefault();
        this.state = 5790;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 5786;
            this.match(MySQLParser.COMMA);
            this.state = 5787;
            this.expressionOrDefault();
            this.state = 5792;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_constants;
    return this;
}

ConstantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantsContext.prototype.constructor = ConstantsContext;

ConstantsContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

ConstantsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


ConstantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterConstants(this);
	}
};

ConstantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitConstants(this);
	}
};

ConstantsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitConstants(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ConstantsContext = ConstantsContext;

MySQLParser.prototype.constants = function() {

    var localctx = new ConstantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 564, MySQLParser.RULE_constants);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5793;
        this.constant();
        this.state = 5798;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 5794;
            this.match(MySQLParser.COMMA);
            this.state = 5795;
            this.constant();
            this.state = 5800;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleStringsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_simpleStrings;
    return this;
}

SimpleStringsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleStringsContext.prototype.constructor = SimpleStringsContext;

SimpleStringsContext.prototype.STRING_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.STRING_LITERAL);
    } else {
        return this.getToken(MySQLParser.STRING_LITERAL, i);
    }
};


SimpleStringsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


SimpleStringsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleStrings(this);
	}
};

SimpleStringsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleStrings(this);
	}
};

SimpleStringsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleStrings(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.SimpleStringsContext = SimpleStringsContext;

MySQLParser.prototype.simpleStrings = function() {

    var localctx = new SimpleStringsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 566, MySQLParser.RULE_simpleStrings);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5801;
        this.match(MySQLParser.STRING_LITERAL);
        this.state = 5806;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 5802;
            this.match(MySQLParser.COMMA);
            this.state = 5803;
            this.match(MySQLParser.STRING_LITERAL);
            this.state = 5808;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UserVariablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_userVariables;
    return this;
}

UserVariablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserVariablesContext.prototype.constructor = UserVariablesContext;

UserVariablesContext.prototype.LOCAL_ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.LOCAL_ID);
    } else {
        return this.getToken(MySQLParser.LOCAL_ID, i);
    }
};


UserVariablesContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


UserVariablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUserVariables(this);
	}
};

UserVariablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUserVariables(this);
	}
};

UserVariablesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUserVariables(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UserVariablesContext = UserVariablesContext;

MySQLParser.prototype.userVariables = function() {

    var localctx = new UserVariablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 568, MySQLParser.RULE_userVariables);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5809;
        this.match(MySQLParser.LOCAL_ID);
        this.state = 5814;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 5810;
            this.match(MySQLParser.COMMA);
            this.state = 5811;
            this.match(MySQLParser.LOCAL_ID);
            this.state = 5816;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefaultValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_defaultValue;
    return this;
}

DefaultValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultValueContext.prototype.constructor = DefaultValueContext;

DefaultValueContext.prototype.NULL_LITERAL = function() {
    return this.getToken(MySQLParser.NULL_LITERAL, 0);
};

DefaultValueContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

DefaultValueContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

DefaultValueContext.prototype.currentTimestamp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CurrentTimestampContext);
    } else {
        return this.getTypedRuleContext(CurrentTimestampContext,i);
    }
};

DefaultValueContext.prototype.ON = function() {
    return this.getToken(MySQLParser.ON, 0);
};

DefaultValueContext.prototype.UPDATE = function() {
    return this.getToken(MySQLParser.UPDATE, 0);
};

DefaultValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDefaultValue(this);
	}
};

DefaultValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDefaultValue(this);
	}
};

DefaultValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDefaultValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DefaultValueContext = DefaultValueContext;

MySQLParser.prototype.defaultValue = function() {

    var localctx = new DefaultValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 570, MySQLParser.RULE_defaultValue);
    try {
        this.state = 5828;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,862,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5817;
            this.match(MySQLParser.NULL_LITERAL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5819;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,860,this._ctx);
            if(la_===1) {
                this.state = 5818;
                this.unaryOperator();

            }
            this.state = 5821;
            this.constant();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 5822;
            this.currentTimestamp();
            this.state = 5826;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,861,this._ctx);
            if(la_===1) {
                this.state = 5823;
                this.match(MySQLParser.ON);
                this.state = 5824;
                this.match(MySQLParser.UPDATE);
                this.state = 5825;
                this.currentTimestamp();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CurrentTimestampContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_currentTimestamp;
    return this;
}

CurrentTimestampContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CurrentTimestampContext.prototype.constructor = CurrentTimestampContext;

CurrentTimestampContext.prototype.NOW = function() {
    return this.getToken(MySQLParser.NOW, 0);
};

CurrentTimestampContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

CurrentTimestampContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

CurrentTimestampContext.prototype.CURRENT_TIMESTAMP = function() {
    return this.getToken(MySQLParser.CURRENT_TIMESTAMP, 0);
};

CurrentTimestampContext.prototype.LOCALTIME = function() {
    return this.getToken(MySQLParser.LOCALTIME, 0);
};

CurrentTimestampContext.prototype.LOCALTIMESTAMP = function() {
    return this.getToken(MySQLParser.LOCALTIMESTAMP, 0);
};

CurrentTimestampContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

CurrentTimestampContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCurrentTimestamp(this);
	}
};

CurrentTimestampContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCurrentTimestamp(this);
	}
};

CurrentTimestampContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCurrentTimestamp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CurrentTimestampContext = CurrentTimestampContext;

MySQLParser.prototype.currentTimestamp = function() {

    var localctx = new CurrentTimestampContext(this, this._ctx, this.state);
    this.enterRule(localctx, 572, MySQLParser.RULE_currentTimestamp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5844;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CURRENT_TIMESTAMP:
        case MySQLParser.LOCALTIME:
        case MySQLParser.LOCALTIMESTAMP:
            this.state = 5830;
            _la = this._input.LA(1);
            if(!(((((_la - 253)) & ~0x1f) == 0 && ((1 << (_la - 253)) & ((1 << (MySQLParser.CURRENT_TIMESTAMP - 253)) | (1 << (MySQLParser.LOCALTIME - 253)) | (1 << (MySQLParser.LOCALTIMESTAMP - 253)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5836;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,864,this._ctx);
            if(la_===1) {
                this.state = 5831;
                this.match(MySQLParser.LR_BRACKET);
                this.state = 5833;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 1025)) & ~0x1f) == 0 && ((1 << (_la - 1025)) & ((1 << (MySQLParser.ZERO_DECIMAL - 1025)) | (1 << (MySQLParser.ONE_DECIMAL - 1025)) | (1 << (MySQLParser.TWO_DECIMAL - 1025)) | (1 << (MySQLParser.DECIMAL_LITERAL - 1025)))) !== 0)) {
                    this.state = 5832;
                    this.decimalLiteral();
                }

                this.state = 5835;
                this.match(MySQLParser.RR_BRACKET);

            }
            break;
        case MySQLParser.NOW:
            this.state = 5838;
            this.match(MySQLParser.NOW);
            this.state = 5839;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5841;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 1025)) & ~0x1f) == 0 && ((1 << (_la - 1025)) & ((1 << (MySQLParser.ZERO_DECIMAL - 1025)) | (1 << (MySQLParser.ONE_DECIMAL - 1025)) | (1 << (MySQLParser.TWO_DECIMAL - 1025)) | (1 << (MySQLParser.DECIMAL_LITERAL - 1025)))) !== 0)) {
                this.state = 5840;
                this.decimalLiteral();
            }

            this.state = 5843;
            this.match(MySQLParser.RR_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionOrDefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_expressionOrDefault;
    return this;
}

ExpressionOrDefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionOrDefaultContext.prototype.constructor = ExpressionOrDefaultContext;

ExpressionOrDefaultContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionOrDefaultContext.prototype.DEFAULT = function() {
    return this.getToken(MySQLParser.DEFAULT, 0);
};

ExpressionOrDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExpressionOrDefault(this);
	}
};

ExpressionOrDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExpressionOrDefault(this);
	}
};

ExpressionOrDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExpressionOrDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ExpressionOrDefaultContext = ExpressionOrDefaultContext;

MySQLParser.prototype.expressionOrDefault = function() {

    var localctx = new ExpressionOrDefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 574, MySQLParser.RULE_expressionOrDefault);
    try {
        this.state = 5848;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.CASE:
        case MySQLParser.CAST:
        case MySQLParser.CONVERT:
        case MySQLParser.CURRENT:
        case MySQLParser.CURRENT_USER:
        case MySQLParser.DATABASE:
        case MySQLParser.DIAGNOSTICS:
        case MySQLParser.EXISTS:
        case MySQLParser.FALSE:
        case MySQLParser.IF:
        case MySQLParser.INSERT:
        case MySQLParser.INTERVAL:
        case MySQLParser.LEFT:
        case MySQLParser.NOT:
        case MySQLParser.NULL_LITERAL:
        case MySQLParser.NUMBER:
        case MySQLParser.REPLACE:
        case MySQLParser.RIGHT:
        case MySQLParser.STACKED:
        case MySQLParser.TRUE:
        case MySQLParser.VALUES:
        case MySQLParser.DATE:
        case MySQLParser.TIME:
        case MySQLParser.TIMESTAMP:
        case MySQLParser.DATETIME:
        case MySQLParser.YEAR:
        case MySQLParser.CHAR:
        case MySQLParser.BINARY:
        case MySQLParser.TEXT:
        case MySQLParser.ENUM:
        case MySQLParser.SERIAL:
        case MySQLParser.JSON_VALID:
        case MySQLParser.JSON_SCHEMA_VALID:
        case MySQLParser.AVG:
        case MySQLParser.BIT_AND:
        case MySQLParser.BIT_OR:
        case MySQLParser.BIT_XOR:
        case MySQLParser.COUNT:
        case MySQLParser.GROUP_CONCAT:
        case MySQLParser.MAX:
        case MySQLParser.MIN:
        case MySQLParser.STD:
        case MySQLParser.STDDEV:
        case MySQLParser.STDDEV_POP:
        case MySQLParser.STDDEV_SAMP:
        case MySQLParser.SUM:
        case MySQLParser.VAR_POP:
        case MySQLParser.VAR_SAMP:
        case MySQLParser.VARIANCE:
        case MySQLParser.CURRENT_DATE:
        case MySQLParser.CURRENT_TIME:
        case MySQLParser.CURRENT_TIMESTAMP:
        case MySQLParser.LOCALTIME:
        case MySQLParser.CURDATE:
        case MySQLParser.CURTIME:
        case MySQLParser.DATE_ADD:
        case MySQLParser.DATE_SUB:
        case MySQLParser.EXTRACT:
        case MySQLParser.LOCALTIMESTAMP:
        case MySQLParser.NOW:
        case MySQLParser.POSITION:
        case MySQLParser.SUBSTR:
        case MySQLParser.SUBSTRING:
        case MySQLParser.SYSDATE:
        case MySQLParser.TRIM:
        case MySQLParser.UTC_DATE:
        case MySQLParser.UTC_TIME:
        case MySQLParser.UTC_TIMESTAMP:
        case MySQLParser.ACCOUNT:
        case MySQLParser.ACTION:
        case MySQLParser.AFTER:
        case MySQLParser.AGGREGATE:
        case MySQLParser.ALGORITHM:
        case MySQLParser.ANY:
        case MySQLParser.AT:
        case MySQLParser.AUTHORS:
        case MySQLParser.AUTOCOMMIT:
        case MySQLParser.AUTOEXTEND_SIZE:
        case MySQLParser.AUTO_INCREMENT:
        case MySQLParser.AVG_ROW_LENGTH:
        case MySQLParser.BEGIN:
        case MySQLParser.BINLOG:
        case MySQLParser.BIT:
        case MySQLParser.BLOCK:
        case MySQLParser.BOOL:
        case MySQLParser.BOOLEAN:
        case MySQLParser.BTREE:
        case MySQLParser.CACHE:
        case MySQLParser.CASCADED:
        case MySQLParser.CHAIN:
        case MySQLParser.CHANGED:
        case MySQLParser.CHANNEL:
        case MySQLParser.CHECKSUM:
        case MySQLParser.PAGE_CHECKSUM:
        case MySQLParser.CIPHER:
        case MySQLParser.CLASS_ORIGIN:
        case MySQLParser.CLIENT:
        case MySQLParser.CLOSE:
        case MySQLParser.COALESCE:
        case MySQLParser.CODE:
        case MySQLParser.COLUMNS:
        case MySQLParser.COLUMN_FORMAT:
        case MySQLParser.COLUMN_NAME:
        case MySQLParser.COMMENT:
        case MySQLParser.COMMIT:
        case MySQLParser.COMPACT:
        case MySQLParser.COMPLETION:
        case MySQLParser.COMPRESSED:
        case MySQLParser.COMPRESSION:
        case MySQLParser.CONCURRENT:
        case MySQLParser.CONNECTION:
        case MySQLParser.CONSISTENT:
        case MySQLParser.CONSTRAINT_CATALOG:
        case MySQLParser.CONSTRAINT_SCHEMA:
        case MySQLParser.CONSTRAINT_NAME:
        case MySQLParser.CONTAINS:
        case MySQLParser.CONTEXT:
        case MySQLParser.CONTRIBUTORS:
        case MySQLParser.COPY:
        case MySQLParser.CPU:
        case MySQLParser.CURSOR_NAME:
        case MySQLParser.DATA:
        case MySQLParser.DATAFILE:
        case MySQLParser.DEALLOCATE:
        case MySQLParser.DEFAULT_AUTH:
        case MySQLParser.DEFINER:
        case MySQLParser.DELAY_KEY_WRITE:
        case MySQLParser.DES_KEY_FILE:
        case MySQLParser.DIRECTORY:
        case MySQLParser.DISABLE:
        case MySQLParser.DISCARD:
        case MySQLParser.DISK:
        case MySQLParser.DO:
        case MySQLParser.DUMPFILE:
        case MySQLParser.DUPLICATE:
        case MySQLParser.DYNAMIC:
        case MySQLParser.ENABLE:
        case MySQLParser.ENCRYPTION:
        case MySQLParser.END:
        case MySQLParser.ENDS:
        case MySQLParser.ENGINE:
        case MySQLParser.ENGINES:
        case MySQLParser.ERROR:
        case MySQLParser.ERRORS:
        case MySQLParser.ESCAPE:
        case MySQLParser.EVEN:
        case MySQLParser.EVENT:
        case MySQLParser.EVENTS:
        case MySQLParser.EVERY:
        case MySQLParser.EXCHANGE:
        case MySQLParser.EXCLUSIVE:
        case MySQLParser.EXPIRE:
        case MySQLParser.EXPORT:
        case MySQLParser.EXTENDED:
        case MySQLParser.EXTENT_SIZE:
        case MySQLParser.FAST:
        case MySQLParser.FAULTS:
        case MySQLParser.FIELDS:
        case MySQLParser.FILE_BLOCK_SIZE:
        case MySQLParser.FILTER:
        case MySQLParser.FIRST:
        case MySQLParser.FIXED:
        case MySQLParser.FLUSH:
        case MySQLParser.FOLLOWS:
        case MySQLParser.FOUND:
        case MySQLParser.FULL:
        case MySQLParser.FUNCTION:
        case MySQLParser.GENERAL:
        case MySQLParser.GLOBAL:
        case MySQLParser.GRANTS:
        case MySQLParser.GROUP_REPLICATION:
        case MySQLParser.HANDLER:
        case MySQLParser.HASH:
        case MySQLParser.HELP:
        case MySQLParser.HOST:
        case MySQLParser.HOSTS:
        case MySQLParser.IDENTIFIED:
        case MySQLParser.IGNORE_SERVER_IDS:
        case MySQLParser.IMPORT:
        case MySQLParser.INDEXES:
        case MySQLParser.INITIAL_SIZE:
        case MySQLParser.INPLACE:
        case MySQLParser.INSERT_METHOD:
        case MySQLParser.INSTALL:
        case MySQLParser.INSTANCE:
        case MySQLParser.INVISIBLE:
        case MySQLParser.INVOKER:
        case MySQLParser.IO:
        case MySQLParser.IO_THREAD:
        case MySQLParser.IPC:
        case MySQLParser.ISOLATION:
        case MySQLParser.ISSUER:
        case MySQLParser.JSON:
        case MySQLParser.KEY_BLOCK_SIZE:
        case MySQLParser.LANGUAGE:
        case MySQLParser.LAST:
        case MySQLParser.LEAVES:
        case MySQLParser.LESS:
        case MySQLParser.LEVEL:
        case MySQLParser.LIST:
        case MySQLParser.LOCAL:
        case MySQLParser.LOGFILE:
        case MySQLParser.LOGS:
        case MySQLParser.MASTER:
        case MySQLParser.MASTER_AUTO_POSITION:
        case MySQLParser.MASTER_CONNECT_RETRY:
        case MySQLParser.MASTER_DELAY:
        case MySQLParser.MASTER_HEARTBEAT_PERIOD:
        case MySQLParser.MASTER_HOST:
        case MySQLParser.MASTER_LOG_FILE:
        case MySQLParser.MASTER_LOG_POS:
        case MySQLParser.MASTER_PASSWORD:
        case MySQLParser.MASTER_PORT:
        case MySQLParser.MASTER_RETRY_COUNT:
        case MySQLParser.MASTER_SSL:
        case MySQLParser.MASTER_SSL_CA:
        case MySQLParser.MASTER_SSL_CAPATH:
        case MySQLParser.MASTER_SSL_CERT:
        case MySQLParser.MASTER_SSL_CIPHER:
        case MySQLParser.MASTER_SSL_CRL:
        case MySQLParser.MASTER_SSL_CRLPATH:
        case MySQLParser.MASTER_SSL_KEY:
        case MySQLParser.MASTER_TLS_VERSION:
        case MySQLParser.MASTER_USER:
        case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
        case MySQLParser.MAX_QUERIES_PER_HOUR:
        case MySQLParser.MAX_ROWS:
        case MySQLParser.MAX_SIZE:
        case MySQLParser.MAX_UPDATES_PER_HOUR:
        case MySQLParser.MAX_USER_CONNECTIONS:
        case MySQLParser.MEDIUM:
        case MySQLParser.MERGE:
        case MySQLParser.MESSAGE_TEXT:
        case MySQLParser.MID:
        case MySQLParser.MIGRATE:
        case MySQLParser.MIN_ROWS:
        case MySQLParser.MODE:
        case MySQLParser.MODIFY:
        case MySQLParser.MUTEX:
        case MySQLParser.MYSQL:
        case MySQLParser.MYSQL_ERRNO:
        case MySQLParser.NAME:
        case MySQLParser.NAMES:
        case MySQLParser.NCHAR:
        case MySQLParser.NEVER:
        case MySQLParser.NEXT:
        case MySQLParser.NO:
        case MySQLParser.NODEGROUP:
        case MySQLParser.NONE:
        case MySQLParser.OFFLINE:
        case MySQLParser.OFFSET:
        case MySQLParser.OJ:
        case MySQLParser.OLD_PASSWORD:
        case MySQLParser.ONE:
        case MySQLParser.ONLINE:
        case MySQLParser.ONLY:
        case MySQLParser.OPEN:
        case MySQLParser.OPTIMIZER_COSTS:
        case MySQLParser.OPTIONS:
        case MySQLParser.OWNER:
        case MySQLParser.PACK_KEYS:
        case MySQLParser.PAGE:
        case MySQLParser.PARSER:
        case MySQLParser.PARTIAL:
        case MySQLParser.PARTITIONING:
        case MySQLParser.PARTITIONS:
        case MySQLParser.PASSWORD:
        case MySQLParser.PHASE:
        case MySQLParser.PLUGIN:
        case MySQLParser.PLUGIN_DIR:
        case MySQLParser.PLUGINS:
        case MySQLParser.PORT:
        case MySQLParser.PRECEDES:
        case MySQLParser.PREPARE:
        case MySQLParser.PRESERVE:
        case MySQLParser.PREV:
        case MySQLParser.PROCESSLIST:
        case MySQLParser.PROFILE:
        case MySQLParser.PROFILES:
        case MySQLParser.PROXY:
        case MySQLParser.QUERY:
        case MySQLParser.QUICK:
        case MySQLParser.REBUILD:
        case MySQLParser.RECOVER:
        case MySQLParser.REDO_BUFFER_SIZE:
        case MySQLParser.REDUNDANT:
        case MySQLParser.RELAY:
        case MySQLParser.RELAY_LOG_FILE:
        case MySQLParser.RELAY_LOG_POS:
        case MySQLParser.RELAYLOG:
        case MySQLParser.REMOVE:
        case MySQLParser.REORGANIZE:
        case MySQLParser.REPAIR:
        case MySQLParser.REPLICATE_DO_DB:
        case MySQLParser.REPLICATE_DO_TABLE:
        case MySQLParser.REPLICATE_IGNORE_DB:
        case MySQLParser.REPLICATE_IGNORE_TABLE:
        case MySQLParser.REPLICATE_REWRITE_DB:
        case MySQLParser.REPLICATE_WILD_DO_TABLE:
        case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
        case MySQLParser.REPLICATION:
        case MySQLParser.RESET:
        case MySQLParser.RESUME:
        case MySQLParser.RETURNED_SQLSTATE:
        case MySQLParser.RETURNS:
        case MySQLParser.ROLE:
        case MySQLParser.ROLLBACK:
        case MySQLParser.ROLLUP:
        case MySQLParser.ROTATE:
        case MySQLParser.ROW:
        case MySQLParser.ROWS:
        case MySQLParser.ROW_FORMAT:
        case MySQLParser.SAVEPOINT:
        case MySQLParser.SCHEDULE:
        case MySQLParser.SECURITY:
        case MySQLParser.SERVER:
        case MySQLParser.SESSION:
        case MySQLParser.SHARE:
        case MySQLParser.SHARED:
        case MySQLParser.SIGNED:
        case MySQLParser.SIMPLE:
        case MySQLParser.SLAVE:
        case MySQLParser.SLOW:
        case MySQLParser.SNAPSHOT:
        case MySQLParser.SOCKET:
        case MySQLParser.SOME:
        case MySQLParser.SONAME:
        case MySQLParser.SOUNDS:
        case MySQLParser.SOURCE:
        case MySQLParser.SQL_AFTER_GTIDS:
        case MySQLParser.SQL_AFTER_MTS_GAPS:
        case MySQLParser.SQL_BEFORE_GTIDS:
        case MySQLParser.SQL_BUFFER_RESULT:
        case MySQLParser.SQL_CACHE:
        case MySQLParser.SQL_NO_CACHE:
        case MySQLParser.SQL_THREAD:
        case MySQLParser.START:
        case MySQLParser.STARTS:
        case MySQLParser.STATS_AUTO_RECALC:
        case MySQLParser.STATS_PERSISTENT:
        case MySQLParser.STATS_SAMPLE_PAGES:
        case MySQLParser.STATUS:
        case MySQLParser.STOP:
        case MySQLParser.STORAGE:
        case MySQLParser.STRING:
        case MySQLParser.SUBCLASS_ORIGIN:
        case MySQLParser.SUBJECT:
        case MySQLParser.SUBPARTITION:
        case MySQLParser.SUBPARTITIONS:
        case MySQLParser.SUSPEND:
        case MySQLParser.SWAPS:
        case MySQLParser.SWITCHES:
        case MySQLParser.TABLE_NAME:
        case MySQLParser.TABLESPACE:
        case MySQLParser.TEMPORARY:
        case MySQLParser.TEMPTABLE:
        case MySQLParser.THAN:
        case MySQLParser.TRADITIONAL:
        case MySQLParser.TRANSACTION:
        case MySQLParser.TRANSACTIONAL:
        case MySQLParser.TRIGGERS:
        case MySQLParser.TRUNCATE:
        case MySQLParser.UNDEFINED:
        case MySQLParser.UNDOFILE:
        case MySQLParser.UNDO_BUFFER_SIZE:
        case MySQLParser.UNINSTALL:
        case MySQLParser.UNKNOWN:
        case MySQLParser.UNTIL:
        case MySQLParser.UPGRADE:
        case MySQLParser.USER:
        case MySQLParser.USE_FRM:
        case MySQLParser.USER_RESOURCES:
        case MySQLParser.VALIDATION:
        case MySQLParser.VALUE:
        case MySQLParser.VARIABLES:
        case MySQLParser.VIEW:
        case MySQLParser.VISIBLE:
        case MySQLParser.WAIT:
        case MySQLParser.WARNINGS:
        case MySQLParser.WITHOUT:
        case MySQLParser.WORK:
        case MySQLParser.WRAPPER:
        case MySQLParser.X509:
        case MySQLParser.XA:
        case MySQLParser.XML:
        case MySQLParser.INTERNAL:
        case MySQLParser.QUARTER:
        case MySQLParser.MONTH:
        case MySQLParser.DAY:
        case MySQLParser.HOUR:
        case MySQLParser.MINUTE:
        case MySQLParser.WEEK:
        case MySQLParser.SECOND:
        case MySQLParser.MICROSECOND:
        case MySQLParser.TABLES:
        case MySQLParser.ROUTINE:
        case MySQLParser.EXECUTE:
        case MySQLParser.FILE:
        case MySQLParser.PROCESS:
        case MySQLParser.RELOAD:
        case MySQLParser.SHUTDOWN:
        case MySQLParser.SUPER:
        case MySQLParser.PRIVILEGES:
        case MySQLParser.AUDIT_ADMIN:
        case MySQLParser.BACKUP_ADMIN:
        case MySQLParser.BINLOG_ADMIN:
        case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
        case MySQLParser.CLONE_ADMIN:
        case MySQLParser.CONNECTION_ADMIN:
        case MySQLParser.ENCRYPTION_KEY_ADMIN:
        case MySQLParser.FIREWALL_ADMIN:
        case MySQLParser.FIREWALL_USER:
        case MySQLParser.GROUP_REPLICATION_ADMIN:
        case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
        case MySQLParser.NDB_STORED_USER:
        case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
        case MySQLParser.REPLICATION_APPLIER:
        case MySQLParser.REPLICATION_SLAVE_ADMIN:
        case MySQLParser.RESOURCE_GROUP_ADMIN:
        case MySQLParser.RESOURCE_GROUP_USER:
        case MySQLParser.ROLE_ADMIN:
        case MySQLParser.SESSION_VARIABLES_ADMIN:
        case MySQLParser.SET_USER_ID:
        case MySQLParser.SHOW_ROUTINE:
        case MySQLParser.SYSTEM_VARIABLES_ADMIN:
        case MySQLParser.TABLE_ENCRYPTION_ADMIN:
        case MySQLParser.VERSION_TOKEN_ADMIN:
        case MySQLParser.XA_RECOVER_ADMIN:
        case MySQLParser.ARMSCII8:
        case MySQLParser.ASCII:
        case MySQLParser.BIG5:
        case MySQLParser.CP1250:
        case MySQLParser.CP1251:
        case MySQLParser.CP1256:
        case MySQLParser.CP1257:
        case MySQLParser.CP850:
        case MySQLParser.CP852:
        case MySQLParser.CP866:
        case MySQLParser.CP932:
        case MySQLParser.DEC8:
        case MySQLParser.EUCJPMS:
        case MySQLParser.EUCKR:
        case MySQLParser.GB2312:
        case MySQLParser.GBK:
        case MySQLParser.GEOSTD8:
        case MySQLParser.GREEK:
        case MySQLParser.HEBREW:
        case MySQLParser.HP8:
        case MySQLParser.KEYBCS2:
        case MySQLParser.KOI8R:
        case MySQLParser.KOI8U:
        case MySQLParser.LATIN1:
        case MySQLParser.LATIN2:
        case MySQLParser.LATIN5:
        case MySQLParser.LATIN7:
        case MySQLParser.MACCE:
        case MySQLParser.MACROMAN:
        case MySQLParser.SJIS:
        case MySQLParser.SWE7:
        case MySQLParser.TIS620:
        case MySQLParser.UCS2:
        case MySQLParser.UJIS:
        case MySQLParser.UTF16:
        case MySQLParser.UTF16LE:
        case MySQLParser.UTF32:
        case MySQLParser.UTF8:
        case MySQLParser.UTF8MB3:
        case MySQLParser.UTF8MB4:
        case MySQLParser.ARCHIVE:
        case MySQLParser.BLACKHOLE:
        case MySQLParser.CSV:
        case MySQLParser.FEDERATED:
        case MySQLParser.INNODB:
        case MySQLParser.MEMORY:
        case MySQLParser.MRG_MYISAM:
        case MySQLParser.MYISAM:
        case MySQLParser.NDB:
        case MySQLParser.NDBCLUSTER:
        case MySQLParser.PERFORMANCE_SCHEMA:
        case MySQLParser.TOKUDB:
        case MySQLParser.REPEATABLE:
        case MySQLParser.COMMITTED:
        case MySQLParser.UNCOMMITTED:
        case MySQLParser.SERIALIZABLE:
        case MySQLParser.GEOMETRYCOLLECTION:
        case MySQLParser.LINESTRING:
        case MySQLParser.MULTILINESTRING:
        case MySQLParser.MULTIPOINT:
        case MySQLParser.MULTIPOLYGON:
        case MySQLParser.POINT:
        case MySQLParser.POLYGON:
        case MySQLParser.ABS:
        case MySQLParser.ACOS:
        case MySQLParser.ADDDATE:
        case MySQLParser.ADDTIME:
        case MySQLParser.AES_DECRYPT:
        case MySQLParser.AES_ENCRYPT:
        case MySQLParser.AREA:
        case MySQLParser.ASBINARY:
        case MySQLParser.ASIN:
        case MySQLParser.ASTEXT:
        case MySQLParser.ASWKB:
        case MySQLParser.ASWKT:
        case MySQLParser.ASYMMETRIC_DECRYPT:
        case MySQLParser.ASYMMETRIC_DERIVE:
        case MySQLParser.ASYMMETRIC_ENCRYPT:
        case MySQLParser.ASYMMETRIC_SIGN:
        case MySQLParser.ASYMMETRIC_VERIFY:
        case MySQLParser.ATAN:
        case MySQLParser.ATAN2:
        case MySQLParser.BENCHMARK:
        case MySQLParser.BIN:
        case MySQLParser.BIT_COUNT:
        case MySQLParser.BIT_LENGTH:
        case MySQLParser.BUFFER:
        case MySQLParser.CATALOG_NAME:
        case MySQLParser.CEIL:
        case MySQLParser.CEILING:
        case MySQLParser.CENTROID:
        case MySQLParser.CHARACTER_LENGTH:
        case MySQLParser.CHARSET:
        case MySQLParser.CHAR_LENGTH:
        case MySQLParser.COERCIBILITY:
        case MySQLParser.COLLATION:
        case MySQLParser.COMPRESS:
        case MySQLParser.CONCAT:
        case MySQLParser.CONCAT_WS:
        case MySQLParser.CONNECTION_ID:
        case MySQLParser.CONV:
        case MySQLParser.CONVERT_TZ:
        case MySQLParser.COS:
        case MySQLParser.COT:
        case MySQLParser.CRC32:
        case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser.CREATE_DH_PARAMETERS:
        case MySQLParser.CREATE_DIGEST:
        case MySQLParser.CROSSES:
        case MySQLParser.DATEDIFF:
        case MySQLParser.DATE_FORMAT:
        case MySQLParser.DAYNAME:
        case MySQLParser.DAYOFMONTH:
        case MySQLParser.DAYOFWEEK:
        case MySQLParser.DAYOFYEAR:
        case MySQLParser.DECODE:
        case MySQLParser.DEGREES:
        case MySQLParser.DES_DECRYPT:
        case MySQLParser.DES_ENCRYPT:
        case MySQLParser.DIMENSION:
        case MySQLParser.DISJOINT:
        case MySQLParser.ELT:
        case MySQLParser.ENCODE:
        case MySQLParser.ENCRYPT:
        case MySQLParser.ENDPOINT:
        case MySQLParser.ENVELOPE:
        case MySQLParser.EQUALS:
        case MySQLParser.EXP:
        case MySQLParser.EXPORT_SET:
        case MySQLParser.EXTERIORRING:
        case MySQLParser.EXTRACTVALUE:
        case MySQLParser.FIELD:
        case MySQLParser.FIND_IN_SET:
        case MySQLParser.FLOOR:
        case MySQLParser.FORMAT:
        case MySQLParser.FOUND_ROWS:
        case MySQLParser.FROM_BASE64:
        case MySQLParser.FROM_DAYS:
        case MySQLParser.FROM_UNIXTIME:
        case MySQLParser.GEOMCOLLFROMTEXT:
        case MySQLParser.GEOMCOLLFROMWKB:
        case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.GEOMETRYFROMTEXT:
        case MySQLParser.GEOMETRYFROMWKB:
        case MySQLParser.GEOMETRYN:
        case MySQLParser.GEOMETRYTYPE:
        case MySQLParser.GEOMFROMTEXT:
        case MySQLParser.GEOMFROMWKB:
        case MySQLParser.GET_FORMAT:
        case MySQLParser.GET_LOCK:
        case MySQLParser.GLENGTH:
        case MySQLParser.GREATEST:
        case MySQLParser.GTID_SUBSET:
        case MySQLParser.GTID_SUBTRACT:
        case MySQLParser.HEX:
        case MySQLParser.IFNULL:
        case MySQLParser.INET6_ATON:
        case MySQLParser.INET6_NTOA:
        case MySQLParser.INET_ATON:
        case MySQLParser.INET_NTOA:
        case MySQLParser.INSTR:
        case MySQLParser.INTERIORRINGN:
        case MySQLParser.INTERSECTS:
        case MySQLParser.ISCLOSED:
        case MySQLParser.ISEMPTY:
        case MySQLParser.ISNULL:
        case MySQLParser.ISSIMPLE:
        case MySQLParser.IS_FREE_LOCK:
        case MySQLParser.IS_IPV4:
        case MySQLParser.IS_IPV4_COMPAT:
        case MySQLParser.IS_IPV4_MAPPED:
        case MySQLParser.IS_IPV6:
        case MySQLParser.IS_USED_LOCK:
        case MySQLParser.LAST_INSERT_ID:
        case MySQLParser.LCASE:
        case MySQLParser.LEAST:
        case MySQLParser.LENGTH:
        case MySQLParser.LINEFROMTEXT:
        case MySQLParser.LINEFROMWKB:
        case MySQLParser.LINESTRINGFROMTEXT:
        case MySQLParser.LINESTRINGFROMWKB:
        case MySQLParser.LN:
        case MySQLParser.LOAD_FILE:
        case MySQLParser.LOCATE:
        case MySQLParser.LOG:
        case MySQLParser.LOG10:
        case MySQLParser.LOG2:
        case MySQLParser.LOWER:
        case MySQLParser.LPAD:
        case MySQLParser.LTRIM:
        case MySQLParser.MAKEDATE:
        case MySQLParser.MAKETIME:
        case MySQLParser.MAKE_SET:
        case MySQLParser.MASTER_POS_WAIT:
        case MySQLParser.MBRCONTAINS:
        case MySQLParser.MBRDISJOINT:
        case MySQLParser.MBREQUAL:
        case MySQLParser.MBRINTERSECTS:
        case MySQLParser.MBROVERLAPS:
        case MySQLParser.MBRTOUCHES:
        case MySQLParser.MBRWITHIN:
        case MySQLParser.MD5:
        case MySQLParser.MLINEFROMTEXT:
        case MySQLParser.MLINEFROMWKB:
        case MySQLParser.MONTHNAME:
        case MySQLParser.MPOINTFROMTEXT:
        case MySQLParser.MPOINTFROMWKB:
        case MySQLParser.MPOLYFROMTEXT:
        case MySQLParser.MPOLYFROMWKB:
        case MySQLParser.MULTILINESTRINGFROMTEXT:
        case MySQLParser.MULTILINESTRINGFROMWKB:
        case MySQLParser.MULTIPOINTFROMTEXT:
        case MySQLParser.MULTIPOINTFROMWKB:
        case MySQLParser.MULTIPOLYGONFROMTEXT:
        case MySQLParser.MULTIPOLYGONFROMWKB:
        case MySQLParser.NAME_CONST:
        case MySQLParser.NULLIF:
        case MySQLParser.NUMGEOMETRIES:
        case MySQLParser.NUMINTERIORRINGS:
        case MySQLParser.NUMPOINTS:
        case MySQLParser.OCT:
        case MySQLParser.OCTET_LENGTH:
        case MySQLParser.ORD:
        case MySQLParser.OVERLAPS:
        case MySQLParser.PERIOD_ADD:
        case MySQLParser.PERIOD_DIFF:
        case MySQLParser.PI:
        case MySQLParser.POINTFROMTEXT:
        case MySQLParser.POINTFROMWKB:
        case MySQLParser.POINTN:
        case MySQLParser.POLYFROMTEXT:
        case MySQLParser.POLYFROMWKB:
        case MySQLParser.POLYGONFROMTEXT:
        case MySQLParser.POLYGONFROMWKB:
        case MySQLParser.POW:
        case MySQLParser.POWER:
        case MySQLParser.QUOTE:
        case MySQLParser.RADIANS:
        case MySQLParser.RAND:
        case MySQLParser.RANDOM_BYTES:
        case MySQLParser.RELEASE_LOCK:
        case MySQLParser.REVERSE:
        case MySQLParser.ROUND:
        case MySQLParser.ROW_COUNT:
        case MySQLParser.RPAD:
        case MySQLParser.RTRIM:
        case MySQLParser.SEC_TO_TIME:
        case MySQLParser.SESSION_USER:
        case MySQLParser.SHA:
        case MySQLParser.SHA1:
        case MySQLParser.SHA2:
        case MySQLParser.SCHEMA_NAME:
        case MySQLParser.SIGN:
        case MySQLParser.SIN:
        case MySQLParser.SLEEP:
        case MySQLParser.SOUNDEX:
        case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser.SQRT:
        case MySQLParser.SRID:
        case MySQLParser.STARTPOINT:
        case MySQLParser.STRCMP:
        case MySQLParser.STR_TO_DATE:
        case MySQLParser.ST_AREA:
        case MySQLParser.ST_ASBINARY:
        case MySQLParser.ST_ASTEXT:
        case MySQLParser.ST_ASWKB:
        case MySQLParser.ST_ASWKT:
        case MySQLParser.ST_BUFFER:
        case MySQLParser.ST_CENTROID:
        case MySQLParser.ST_CONTAINS:
        case MySQLParser.ST_CROSSES:
        case MySQLParser.ST_DIFFERENCE:
        case MySQLParser.ST_DIMENSION:
        case MySQLParser.ST_DISJOINT:
        case MySQLParser.ST_DISTANCE:
        case MySQLParser.ST_ENDPOINT:
        case MySQLParser.ST_ENVELOPE:
        case MySQLParser.ST_EQUALS:
        case MySQLParser.ST_EXTERIORRING:
        case MySQLParser.ST_GEOMCOLLFROMTEXT:
        case MySQLParser.ST_GEOMCOLLFROMTXT:
        case MySQLParser.ST_GEOMCOLLFROMWKB:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.ST_GEOMETRYFROMTEXT:
        case MySQLParser.ST_GEOMETRYFROMWKB:
        case MySQLParser.ST_GEOMETRYN:
        case MySQLParser.ST_GEOMETRYTYPE:
        case MySQLParser.ST_GEOMFROMTEXT:
        case MySQLParser.ST_GEOMFROMWKB:
        case MySQLParser.ST_INTERIORRINGN:
        case MySQLParser.ST_INTERSECTION:
        case MySQLParser.ST_INTERSECTS:
        case MySQLParser.ST_ISCLOSED:
        case MySQLParser.ST_ISEMPTY:
        case MySQLParser.ST_ISSIMPLE:
        case MySQLParser.ST_LINEFROMTEXT:
        case MySQLParser.ST_LINEFROMWKB:
        case MySQLParser.ST_LINESTRINGFROMTEXT:
        case MySQLParser.ST_LINESTRINGFROMWKB:
        case MySQLParser.ST_NUMGEOMETRIES:
        case MySQLParser.ST_NUMINTERIORRING:
        case MySQLParser.ST_NUMINTERIORRINGS:
        case MySQLParser.ST_NUMPOINTS:
        case MySQLParser.ST_OVERLAPS:
        case MySQLParser.ST_POINTFROMTEXT:
        case MySQLParser.ST_POINTFROMWKB:
        case MySQLParser.ST_POINTN:
        case MySQLParser.ST_POLYFROMTEXT:
        case MySQLParser.ST_POLYFROMWKB:
        case MySQLParser.ST_POLYGONFROMTEXT:
        case MySQLParser.ST_POLYGONFROMWKB:
        case MySQLParser.ST_SRID:
        case MySQLParser.ST_STARTPOINT:
        case MySQLParser.ST_SYMDIFFERENCE:
        case MySQLParser.ST_TOUCHES:
        case MySQLParser.ST_UNION:
        case MySQLParser.ST_WITHIN:
        case MySQLParser.ST_X:
        case MySQLParser.ST_Y:
        case MySQLParser.SUBDATE:
        case MySQLParser.SUBSTRING_INDEX:
        case MySQLParser.SUBTIME:
        case MySQLParser.SYSTEM_USER:
        case MySQLParser.TAN:
        case MySQLParser.TIMEDIFF:
        case MySQLParser.TIMESTAMPADD:
        case MySQLParser.TIMESTAMPDIFF:
        case MySQLParser.TIME_FORMAT:
        case MySQLParser.TIME_TO_SEC:
        case MySQLParser.TOUCHES:
        case MySQLParser.TO_BASE64:
        case MySQLParser.TO_DAYS:
        case MySQLParser.TO_SECONDS:
        case MySQLParser.UCASE:
        case MySQLParser.UNCOMPRESS:
        case MySQLParser.UNCOMPRESSED_LENGTH:
        case MySQLParser.UNHEX:
        case MySQLParser.UNIX_TIMESTAMP:
        case MySQLParser.UPDATEXML:
        case MySQLParser.UPPER:
        case MySQLParser.UUID:
        case MySQLParser.UUID_SHORT:
        case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser.VERSION:
        case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser.WEEKDAY:
        case MySQLParser.WEEKOFYEAR:
        case MySQLParser.WEIGHT_STRING:
        case MySQLParser.WITHIN:
        case MySQLParser.YEARWEEK:
        case MySQLParser.Y_FUNCTION:
        case MySQLParser.X_FUNCTION:
        case MySQLParser.PLUS:
        case MySQLParser.MINUS:
        case MySQLParser.EXCLAMATION_SYMBOL:
        case MySQLParser.BIT_NOT_OP:
        case MySQLParser.LR_BRACKET:
        case MySQLParser.ZERO_DECIMAL:
        case MySQLParser.ONE_DECIMAL:
        case MySQLParser.TWO_DECIMAL:
        case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
        case MySQLParser.START_NATIONAL_STRING_LITERAL:
        case MySQLParser.STRING_LITERAL:
        case MySQLParser.DECIMAL_LITERAL:
        case MySQLParser.HEXADECIMAL_LITERAL:
        case MySQLParser.REAL_LITERAL:
        case MySQLParser.NULL_SPEC_LITERAL:
        case MySQLParser.BIT_STRING:
        case MySQLParser.STRING_CHARSET_NAME:
        case MySQLParser.ID:
        case MySQLParser.REVERSE_QUOTE_ID:
        case MySQLParser.LOCAL_ID:
        case MySQLParser.GLOBAL_ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 5846;
            this.expression(0);
            break;
        case MySQLParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 5847;
            this.match(MySQLParser.DEFAULT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfExistsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_ifExists;
    return this;
}

IfExistsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfExistsContext.prototype.constructor = IfExistsContext;

IfExistsContext.prototype.IF = function() {
    return this.getToken(MySQLParser.IF, 0);
};

IfExistsContext.prototype.EXISTS = function() {
    return this.getToken(MySQLParser.EXISTS, 0);
};

IfExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIfExists(this);
	}
};

IfExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIfExists(this);
	}
};

IfExistsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIfExists(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IfExistsContext = IfExistsContext;

MySQLParser.prototype.ifExists = function() {

    var localctx = new IfExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 576, MySQLParser.RULE_ifExists);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5850;
        this.match(MySQLParser.IF);
        this.state = 5851;
        this.match(MySQLParser.EXISTS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfNotExistsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_ifNotExists;
    return this;
}

IfNotExistsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfNotExistsContext.prototype.constructor = IfNotExistsContext;

IfNotExistsContext.prototype.IF = function() {
    return this.getToken(MySQLParser.IF, 0);
};

IfNotExistsContext.prototype.NOT = function() {
    return this.getToken(MySQLParser.NOT, 0);
};

IfNotExistsContext.prototype.EXISTS = function() {
    return this.getToken(MySQLParser.EXISTS, 0);
};

IfNotExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIfNotExists(this);
	}
};

IfNotExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIfNotExists(this);
	}
};

IfNotExistsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIfNotExists(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IfNotExistsContext = IfNotExistsContext;

MySQLParser.prototype.ifNotExists = function() {

    var localctx = new IfNotExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 578, MySQLParser.RULE_ifNotExists);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5853;
        this.match(MySQLParser.IF);
        this.state = 5854;
        this.match(MySQLParser.NOT);
        this.state = 5855;
        this.match(MySQLParser.EXISTS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_functionCall;
    return this;
}

FunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;


 
FunctionCallContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SpecificFunctionCallContext(parser, ctx) {
	FunctionCallContext.call(this, parser);
    FunctionCallContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SpecificFunctionCallContext.prototype = Object.create(FunctionCallContext.prototype);
SpecificFunctionCallContext.prototype.constructor = SpecificFunctionCallContext;

MySQLParser.SpecificFunctionCallContext = SpecificFunctionCallContext;

SpecificFunctionCallContext.prototype.specificFunction = function() {
    return this.getTypedRuleContext(SpecificFunctionContext,0);
};
SpecificFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSpecificFunctionCall(this);
	}
};

SpecificFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSpecificFunctionCall(this);
	}
};

SpecificFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSpecificFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PasswordFunctionCallContext(parser, ctx) {
	FunctionCallContext.call(this, parser);
    FunctionCallContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PasswordFunctionCallContext.prototype = Object.create(FunctionCallContext.prototype);
PasswordFunctionCallContext.prototype.constructor = PasswordFunctionCallContext;

MySQLParser.PasswordFunctionCallContext = PasswordFunctionCallContext;

PasswordFunctionCallContext.prototype.passwordFunctionClause = function() {
    return this.getTypedRuleContext(PasswordFunctionClauseContext,0);
};
PasswordFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPasswordFunctionCall(this);
	}
};

PasswordFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPasswordFunctionCall(this);
	}
};

PasswordFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPasswordFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UdfFunctionCallContext(parser, ctx) {
	FunctionCallContext.call(this, parser);
    FunctionCallContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UdfFunctionCallContext.prototype = Object.create(FunctionCallContext.prototype);
UdfFunctionCallContext.prototype.constructor = UdfFunctionCallContext;

MySQLParser.UdfFunctionCallContext = UdfFunctionCallContext;

UdfFunctionCallContext.prototype.fullId = function() {
    return this.getTypedRuleContext(FullIdContext,0);
};

UdfFunctionCallContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

UdfFunctionCallContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

UdfFunctionCallContext.prototype.functionArgs = function() {
    return this.getTypedRuleContext(FunctionArgsContext,0);
};
UdfFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUdfFunctionCall(this);
	}
};

UdfFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUdfFunctionCall(this);
	}
};

UdfFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUdfFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AggregateFunctionCallContext(parser, ctx) {
	FunctionCallContext.call(this, parser);
    FunctionCallContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AggregateFunctionCallContext.prototype = Object.create(FunctionCallContext.prototype);
AggregateFunctionCallContext.prototype.constructor = AggregateFunctionCallContext;

MySQLParser.AggregateFunctionCallContext = AggregateFunctionCallContext;

AggregateFunctionCallContext.prototype.aggregateWindowedFunction = function() {
    return this.getTypedRuleContext(AggregateWindowedFunctionContext,0);
};
AggregateFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAggregateFunctionCall(this);
	}
};

AggregateFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAggregateFunctionCall(this);
	}
};

AggregateFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAggregateFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ScalarFunctionCallContext(parser, ctx) {
	FunctionCallContext.call(this, parser);
    FunctionCallContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ScalarFunctionCallContext.prototype = Object.create(FunctionCallContext.prototype);
ScalarFunctionCallContext.prototype.constructor = ScalarFunctionCallContext;

MySQLParser.ScalarFunctionCallContext = ScalarFunctionCallContext;

ScalarFunctionCallContext.prototype.scalarFunctionName = function() {
    return this.getTypedRuleContext(ScalarFunctionNameContext,0);
};

ScalarFunctionCallContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

ScalarFunctionCallContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

ScalarFunctionCallContext.prototype.functionArgs = function() {
    return this.getTypedRuleContext(FunctionArgsContext,0);
};
ScalarFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterScalarFunctionCall(this);
	}
};

ScalarFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitScalarFunctionCall(this);
	}
};

ScalarFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitScalarFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.FunctionCallContext = FunctionCallContext;

MySQLParser.prototype.functionCall = function() {

    var localctx = new FunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 580, MySQLParser.RULE_functionCall);
    var _la = 0; // Token type
    try {
        this.state = 5874;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,870,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SpecificFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 5857;
            this.specificFunction();
            break;

        case 2:
            localctx = new AggregateFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 5858;
            this.aggregateWindowedFunction();
            break;

        case 3:
            localctx = new ScalarFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 5859;
            this.scalarFunctionName();
            this.state = 5860;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5862;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MySQLParser.CASE) | (1 << MySQLParser.CAST) | (1 << MySQLParser.CONVERT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.CURRENT_USER - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)) | (1 << (MySQLParser.EXISTS - 32)) | (1 << (MySQLParser.FALSE - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (MySQLParser.IF - 69)) | (1 << (MySQLParser.INSERT - 69)) | (1 << (MySQLParser.INTERVAL - 69)) | (1 << (MySQLParser.LEFT - 69)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (MySQLParser.NOT - 102)) | (1 << (MySQLParser.NULL_LITERAL - 102)) | (1 << (MySQLParser.NUMBER - 102)) | (1 << (MySQLParser.REPLACE - 102)) | (1 << (MySQLParser.RIGHT - 102)))) !== 0) || ((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (MySQLParser.STACKED - 151)) | (1 << (MySQLParser.TRUE - 151)) | (1 << (MySQLParser.VALUES - 151)))) !== 0) || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.CHAR - 199)) | (1 << (MySQLParser.BINARY - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.AVG - 233)) | (1 << (MySQLParser.BIT_AND - 233)) | (1 << (MySQLParser.BIT_OR - 233)) | (1 << (MySQLParser.BIT_XOR - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.GROUP_CONCAT - 233)) | (1 << (MySQLParser.MAX - 233)) | (1 << (MySQLParser.MIN - 233)) | (1 << (MySQLParser.STD - 233)) | (1 << (MySQLParser.STDDEV - 233)) | (1 << (MySQLParser.STDDEV_POP - 233)) | (1 << (MySQLParser.STDDEV_SAMP - 233)) | (1 << (MySQLParser.SUM - 233)) | (1 << (MySQLParser.VAR_POP - 233)) | (1 << (MySQLParser.VAR_SAMP - 233)) | (1 << (MySQLParser.VARIANCE - 233)) | (1 << (MySQLParser.CURRENT_DATE - 233)) | (1 << (MySQLParser.CURRENT_TIME - 233)) | (1 << (MySQLParser.CURRENT_TIMESTAMP - 233)) | (1 << (MySQLParser.LOCALTIME - 233)) | (1 << (MySQLParser.CURDATE - 233)) | (1 << (MySQLParser.CURTIME - 233)) | (1 << (MySQLParser.DATE_ADD - 233)) | (1 << (MySQLParser.DATE_SUB - 233)) | (1 << (MySQLParser.EXTRACT - 233)) | (1 << (MySQLParser.LOCALTIMESTAMP - 233)) | (1 << (MySQLParser.NOW - 233)) | (1 << (MySQLParser.POSITION - 233)) | (1 << (MySQLParser.SUBSTR - 233)) | (1 << (MySQLParser.SUBSTRING - 233)))) !== 0) || ((((_la - 265)) & ~0x1f) == 0 && ((1 << (_la - 265)) & ((1 << (MySQLParser.SYSDATE - 265)) | (1 << (MySQLParser.TRIM - 265)) | (1 << (MySQLParser.UTC_DATE - 265)) | (1 << (MySQLParser.UTC_TIME - 265)) | (1 << (MySQLParser.UTC_TIMESTAMP - 265)) | (1 << (MySQLParser.ACCOUNT - 265)) | (1 << (MySQLParser.ACTION - 265)) | (1 << (MySQLParser.AFTER - 265)) | (1 << (MySQLParser.AGGREGATE - 265)) | (1 << (MySQLParser.ALGORITHM - 265)) | (1 << (MySQLParser.ANY - 265)) | (1 << (MySQLParser.AT - 265)) | (1 << (MySQLParser.AUTHORS - 265)) | (1 << (MySQLParser.AUTOCOMMIT - 265)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 265)) | (1 << (MySQLParser.AUTO_INCREMENT - 265)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 265)) | (1 << (MySQLParser.BEGIN - 265)) | (1 << (MySQLParser.BINLOG - 265)) | (1 << (MySQLParser.BIT - 265)) | (1 << (MySQLParser.BLOCK - 265)) | (1 << (MySQLParser.BOOL - 265)) | (1 << (MySQLParser.BOOLEAN - 265)) | (1 << (MySQLParser.BTREE - 265)) | (1 << (MySQLParser.CACHE - 265)) | (1 << (MySQLParser.CASCADED - 265)) | (1 << (MySQLParser.CHAIN - 265)) | (1 << (MySQLParser.CHANGED - 265)) | (1 << (MySQLParser.CHANNEL - 265)) | (1 << (MySQLParser.CHECKSUM - 265)) | (1 << (MySQLParser.PAGE_CHECKSUM - 265)) | (1 << (MySQLParser.CIPHER - 265)))) !== 0) || ((((_la - 297)) & ~0x1f) == 0 && ((1 << (_la - 297)) & ((1 << (MySQLParser.CLASS_ORIGIN - 297)) | (1 << (MySQLParser.CLIENT - 297)) | (1 << (MySQLParser.CLOSE - 297)) | (1 << (MySQLParser.COALESCE - 297)) | (1 << (MySQLParser.CODE - 297)) | (1 << (MySQLParser.COLUMNS - 297)) | (1 << (MySQLParser.COLUMN_FORMAT - 297)) | (1 << (MySQLParser.COLUMN_NAME - 297)) | (1 << (MySQLParser.COMMENT - 297)) | (1 << (MySQLParser.COMMIT - 297)) | (1 << (MySQLParser.COMPACT - 297)) | (1 << (MySQLParser.COMPLETION - 297)) | (1 << (MySQLParser.COMPRESSED - 297)) | (1 << (MySQLParser.COMPRESSION - 297)) | (1 << (MySQLParser.CONCURRENT - 297)) | (1 << (MySQLParser.CONNECTION - 297)) | (1 << (MySQLParser.CONSISTENT - 297)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 297)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 297)) | (1 << (MySQLParser.CONSTRAINT_NAME - 297)) | (1 << (MySQLParser.CONTAINS - 297)) | (1 << (MySQLParser.CONTEXT - 297)) | (1 << (MySQLParser.CONTRIBUTORS - 297)) | (1 << (MySQLParser.COPY - 297)) | (1 << (MySQLParser.CPU - 297)) | (1 << (MySQLParser.CURSOR_NAME - 297)) | (1 << (MySQLParser.DATA - 297)) | (1 << (MySQLParser.DATAFILE - 297)) | (1 << (MySQLParser.DEALLOCATE - 297)) | (1 << (MySQLParser.DEFAULT_AUTH - 297)) | (1 << (MySQLParser.DEFINER - 297)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 297)))) !== 0) || ((((_la - 329)) & ~0x1f) == 0 && ((1 << (_la - 329)) & ((1 << (MySQLParser.DES_KEY_FILE - 329)) | (1 << (MySQLParser.DIRECTORY - 329)) | (1 << (MySQLParser.DISABLE - 329)) | (1 << (MySQLParser.DISCARD - 329)) | (1 << (MySQLParser.DISK - 329)) | (1 << (MySQLParser.DO - 329)) | (1 << (MySQLParser.DUMPFILE - 329)) | (1 << (MySQLParser.DUPLICATE - 329)) | (1 << (MySQLParser.DYNAMIC - 329)) | (1 << (MySQLParser.ENABLE - 329)) | (1 << (MySQLParser.ENCRYPTION - 329)) | (1 << (MySQLParser.END - 329)) | (1 << (MySQLParser.ENDS - 329)) | (1 << (MySQLParser.ENGINE - 329)) | (1 << (MySQLParser.ENGINES - 329)) | (1 << (MySQLParser.ERROR - 329)) | (1 << (MySQLParser.ERRORS - 329)) | (1 << (MySQLParser.ESCAPE - 329)) | (1 << (MySQLParser.EVEN - 329)) | (1 << (MySQLParser.EVENT - 329)) | (1 << (MySQLParser.EVENTS - 329)) | (1 << (MySQLParser.EVERY - 329)) | (1 << (MySQLParser.EXCHANGE - 329)) | (1 << (MySQLParser.EXCLUSIVE - 329)) | (1 << (MySQLParser.EXPIRE - 329)) | (1 << (MySQLParser.EXPORT - 329)) | (1 << (MySQLParser.EXTENDED - 329)) | (1 << (MySQLParser.EXTENT_SIZE - 329)) | (1 << (MySQLParser.FAST - 329)) | (1 << (MySQLParser.FAULTS - 329)) | (1 << (MySQLParser.FIELDS - 329)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 329)))) !== 0) || ((((_la - 361)) & ~0x1f) == 0 && ((1 << (_la - 361)) & ((1 << (MySQLParser.FILTER - 361)) | (1 << (MySQLParser.FIRST - 361)) | (1 << (MySQLParser.FIXED - 361)) | (1 << (MySQLParser.FLUSH - 361)) | (1 << (MySQLParser.FOLLOWS - 361)) | (1 << (MySQLParser.FOUND - 361)) | (1 << (MySQLParser.FULL - 361)) | (1 << (MySQLParser.FUNCTION - 361)) | (1 << (MySQLParser.GENERAL - 361)) | (1 << (MySQLParser.GLOBAL - 361)) | (1 << (MySQLParser.GRANTS - 361)) | (1 << (MySQLParser.GROUP_REPLICATION - 361)) | (1 << (MySQLParser.HANDLER - 361)) | (1 << (MySQLParser.HASH - 361)) | (1 << (MySQLParser.HELP - 361)) | (1 << (MySQLParser.HOST - 361)) | (1 << (MySQLParser.HOSTS - 361)) | (1 << (MySQLParser.IDENTIFIED - 361)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 361)) | (1 << (MySQLParser.IMPORT - 361)) | (1 << (MySQLParser.INDEXES - 361)) | (1 << (MySQLParser.INITIAL_SIZE - 361)) | (1 << (MySQLParser.INPLACE - 361)) | (1 << (MySQLParser.INSERT_METHOD - 361)) | (1 << (MySQLParser.INSTALL - 361)) | (1 << (MySQLParser.INSTANCE - 361)) | (1 << (MySQLParser.INVISIBLE - 361)) | (1 << (MySQLParser.INVOKER - 361)) | (1 << (MySQLParser.IO - 361)) | (1 << (MySQLParser.IO_THREAD - 361)) | (1 << (MySQLParser.IPC - 361)) | (1 << (MySQLParser.ISOLATION - 361)))) !== 0) || ((((_la - 393)) & ~0x1f) == 0 && ((1 << (_la - 393)) & ((1 << (MySQLParser.ISSUER - 393)) | (1 << (MySQLParser.JSON - 393)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 393)) | (1 << (MySQLParser.LANGUAGE - 393)) | (1 << (MySQLParser.LAST - 393)) | (1 << (MySQLParser.LEAVES - 393)) | (1 << (MySQLParser.LESS - 393)) | (1 << (MySQLParser.LEVEL - 393)) | (1 << (MySQLParser.LIST - 393)) | (1 << (MySQLParser.LOCAL - 393)) | (1 << (MySQLParser.LOGFILE - 393)) | (1 << (MySQLParser.LOGS - 393)) | (1 << (MySQLParser.MASTER - 393)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 393)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 393)) | (1 << (MySQLParser.MASTER_DELAY - 393)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 393)) | (1 << (MySQLParser.MASTER_HOST - 393)) | (1 << (MySQLParser.MASTER_LOG_FILE - 393)) | (1 << (MySQLParser.MASTER_LOG_POS - 393)) | (1 << (MySQLParser.MASTER_PASSWORD - 393)) | (1 << (MySQLParser.MASTER_PORT - 393)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 393)) | (1 << (MySQLParser.MASTER_SSL - 393)) | (1 << (MySQLParser.MASTER_SSL_CA - 393)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 393)) | (1 << (MySQLParser.MASTER_SSL_CERT - 393)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 393)) | (1 << (MySQLParser.MASTER_SSL_CRL - 393)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 393)) | (1 << (MySQLParser.MASTER_SSL_KEY - 393)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 393)))) !== 0) || ((((_la - 425)) & ~0x1f) == 0 && ((1 << (_la - 425)) & ((1 << (MySQLParser.MASTER_USER - 425)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 425)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 425)) | (1 << (MySQLParser.MAX_ROWS - 425)) | (1 << (MySQLParser.MAX_SIZE - 425)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 425)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 425)) | (1 << (MySQLParser.MEDIUM - 425)) | (1 << (MySQLParser.MERGE - 425)) | (1 << (MySQLParser.MESSAGE_TEXT - 425)) | (1 << (MySQLParser.MID - 425)) | (1 << (MySQLParser.MIGRATE - 425)) | (1 << (MySQLParser.MIN_ROWS - 425)) | (1 << (MySQLParser.MODE - 425)) | (1 << (MySQLParser.MODIFY - 425)) | (1 << (MySQLParser.MUTEX - 425)) | (1 << (MySQLParser.MYSQL - 425)) | (1 << (MySQLParser.MYSQL_ERRNO - 425)) | (1 << (MySQLParser.NAME - 425)) | (1 << (MySQLParser.NAMES - 425)) | (1 << (MySQLParser.NCHAR - 425)) | (1 << (MySQLParser.NEVER - 425)) | (1 << (MySQLParser.NEXT - 425)) | (1 << (MySQLParser.NO - 425)) | (1 << (MySQLParser.NODEGROUP - 425)) | (1 << (MySQLParser.NONE - 425)) | (1 << (MySQLParser.OFFLINE - 425)) | (1 << (MySQLParser.OFFSET - 425)) | (1 << (MySQLParser.OJ - 425)) | (1 << (MySQLParser.OLD_PASSWORD - 425)) | (1 << (MySQLParser.ONE - 425)) | (1 << (MySQLParser.ONLINE - 425)))) !== 0) || ((((_la - 457)) & ~0x1f) == 0 && ((1 << (_la - 457)) & ((1 << (MySQLParser.ONLY - 457)) | (1 << (MySQLParser.OPEN - 457)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 457)) | (1 << (MySQLParser.OPTIONS - 457)) | (1 << (MySQLParser.OWNER - 457)) | (1 << (MySQLParser.PACK_KEYS - 457)) | (1 << (MySQLParser.PAGE - 457)) | (1 << (MySQLParser.PARSER - 457)) | (1 << (MySQLParser.PARTIAL - 457)) | (1 << (MySQLParser.PARTITIONING - 457)) | (1 << (MySQLParser.PARTITIONS - 457)) | (1 << (MySQLParser.PASSWORD - 457)) | (1 << (MySQLParser.PHASE - 457)) | (1 << (MySQLParser.PLUGIN - 457)) | (1 << (MySQLParser.PLUGIN_DIR - 457)) | (1 << (MySQLParser.PLUGINS - 457)) | (1 << (MySQLParser.PORT - 457)) | (1 << (MySQLParser.PRECEDES - 457)) | (1 << (MySQLParser.PREPARE - 457)) | (1 << (MySQLParser.PRESERVE - 457)) | (1 << (MySQLParser.PREV - 457)) | (1 << (MySQLParser.PROCESSLIST - 457)) | (1 << (MySQLParser.PROFILE - 457)) | (1 << (MySQLParser.PROFILES - 457)) | (1 << (MySQLParser.PROXY - 457)) | (1 << (MySQLParser.QUERY - 457)) | (1 << (MySQLParser.QUICK - 457)) | (1 << (MySQLParser.REBUILD - 457)) | (1 << (MySQLParser.RECOVER - 457)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 457)) | (1 << (MySQLParser.REDUNDANT - 457)) | (1 << (MySQLParser.RELAY - 457)))) !== 0) || ((((_la - 489)) & ~0x1f) == 0 && ((1 << (_la - 489)) & ((1 << (MySQLParser.RELAY_LOG_FILE - 489)) | (1 << (MySQLParser.RELAY_LOG_POS - 489)) | (1 << (MySQLParser.RELAYLOG - 489)) | (1 << (MySQLParser.REMOVE - 489)) | (1 << (MySQLParser.REORGANIZE - 489)) | (1 << (MySQLParser.REPAIR - 489)) | (1 << (MySQLParser.REPLICATE_DO_DB - 489)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 489)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 489)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 489)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 489)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 489)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 489)) | (1 << (MySQLParser.REPLICATION - 489)) | (1 << (MySQLParser.RESET - 489)) | (1 << (MySQLParser.RESUME - 489)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 489)) | (1 << (MySQLParser.RETURNS - 489)) | (1 << (MySQLParser.ROLE - 489)) | (1 << (MySQLParser.ROLLBACK - 489)) | (1 << (MySQLParser.ROLLUP - 489)) | (1 << (MySQLParser.ROTATE - 489)) | (1 << (MySQLParser.ROW - 489)) | (1 << (MySQLParser.ROWS - 489)) | (1 << (MySQLParser.ROW_FORMAT - 489)) | (1 << (MySQLParser.SAVEPOINT - 489)) | (1 << (MySQLParser.SCHEDULE - 489)) | (1 << (MySQLParser.SECURITY - 489)) | (1 << (MySQLParser.SERVER - 489)) | (1 << (MySQLParser.SESSION - 489)) | (1 << (MySQLParser.SHARE - 489)) | (1 << (MySQLParser.SHARED - 489)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (MySQLParser.SIGNED - 521)) | (1 << (MySQLParser.SIMPLE - 521)) | (1 << (MySQLParser.SLAVE - 521)) | (1 << (MySQLParser.SLOW - 521)) | (1 << (MySQLParser.SNAPSHOT - 521)) | (1 << (MySQLParser.SOCKET - 521)) | (1 << (MySQLParser.SOME - 521)) | (1 << (MySQLParser.SONAME - 521)) | (1 << (MySQLParser.SOUNDS - 521)) | (1 << (MySQLParser.SOURCE - 521)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 521)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 521)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 521)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 521)) | (1 << (MySQLParser.SQL_CACHE - 521)) | (1 << (MySQLParser.SQL_NO_CACHE - 521)) | (1 << (MySQLParser.SQL_THREAD - 521)) | (1 << (MySQLParser.START - 521)) | (1 << (MySQLParser.STARTS - 521)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 521)) | (1 << (MySQLParser.STATS_PERSISTENT - 521)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 521)) | (1 << (MySQLParser.STATUS - 521)) | (1 << (MySQLParser.STOP - 521)) | (1 << (MySQLParser.STORAGE - 521)) | (1 << (MySQLParser.STRING - 521)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 521)) | (1 << (MySQLParser.SUBJECT - 521)) | (1 << (MySQLParser.SUBPARTITION - 521)) | (1 << (MySQLParser.SUBPARTITIONS - 521)) | (1 << (MySQLParser.SUSPEND - 521)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (MySQLParser.SWAPS - 553)) | (1 << (MySQLParser.SWITCHES - 553)) | (1 << (MySQLParser.TABLE_NAME - 553)) | (1 << (MySQLParser.TABLESPACE - 553)) | (1 << (MySQLParser.TEMPORARY - 553)) | (1 << (MySQLParser.TEMPTABLE - 553)) | (1 << (MySQLParser.THAN - 553)) | (1 << (MySQLParser.TRADITIONAL - 553)) | (1 << (MySQLParser.TRANSACTION - 553)) | (1 << (MySQLParser.TRANSACTIONAL - 553)) | (1 << (MySQLParser.TRIGGERS - 553)) | (1 << (MySQLParser.TRUNCATE - 553)) | (1 << (MySQLParser.UNDEFINED - 553)) | (1 << (MySQLParser.UNDOFILE - 553)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 553)) | (1 << (MySQLParser.UNINSTALL - 553)) | (1 << (MySQLParser.UNKNOWN - 553)) | (1 << (MySQLParser.UNTIL - 553)) | (1 << (MySQLParser.UPGRADE - 553)) | (1 << (MySQLParser.USER - 553)) | (1 << (MySQLParser.USE_FRM - 553)) | (1 << (MySQLParser.USER_RESOURCES - 553)) | (1 << (MySQLParser.VALIDATION - 553)) | (1 << (MySQLParser.VALUE - 553)) | (1 << (MySQLParser.VARIABLES - 553)) | (1 << (MySQLParser.VIEW - 553)) | (1 << (MySQLParser.VISIBLE - 553)) | (1 << (MySQLParser.WAIT - 553)) | (1 << (MySQLParser.WARNINGS - 553)) | (1 << (MySQLParser.WITHOUT - 553)) | (1 << (MySQLParser.WORK - 553)))) !== 0) || ((((_la - 585)) & ~0x1f) == 0 && ((1 << (_la - 585)) & ((1 << (MySQLParser.WRAPPER - 585)) | (1 << (MySQLParser.X509 - 585)) | (1 << (MySQLParser.XA - 585)) | (1 << (MySQLParser.XML - 585)) | (1 << (MySQLParser.INTERNAL - 585)) | (1 << (MySQLParser.QUARTER - 585)) | (1 << (MySQLParser.MONTH - 585)) | (1 << (MySQLParser.DAY - 585)) | (1 << (MySQLParser.HOUR - 585)) | (1 << (MySQLParser.MINUTE - 585)) | (1 << (MySQLParser.WEEK - 585)) | (1 << (MySQLParser.SECOND - 585)) | (1 << (MySQLParser.MICROSECOND - 585)) | (1 << (MySQLParser.TABLES - 585)) | (1 << (MySQLParser.ROUTINE - 585)) | (1 << (MySQLParser.EXECUTE - 585)) | (1 << (MySQLParser.FILE - 585)) | (1 << (MySQLParser.PROCESS - 585)) | (1 << (MySQLParser.RELOAD - 585)) | (1 << (MySQLParser.SHUTDOWN - 585)) | (1 << (MySQLParser.SUPER - 585)) | (1 << (MySQLParser.PRIVILEGES - 585)) | (1 << (MySQLParser.AUDIT_ADMIN - 585)) | (1 << (MySQLParser.BACKUP_ADMIN - 585)) | (1 << (MySQLParser.BINLOG_ADMIN - 585)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 585)) | (1 << (MySQLParser.CLONE_ADMIN - 585)))) !== 0) || ((((_la - 617)) & ~0x1f) == 0 && ((1 << (_la - 617)) & ((1 << (MySQLParser.CONNECTION_ADMIN - 617)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 617)) | (1 << (MySQLParser.FIREWALL_ADMIN - 617)) | (1 << (MySQLParser.FIREWALL_USER - 617)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 617)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 617)) | (1 << (MySQLParser.NDB_STORED_USER - 617)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 617)) | (1 << (MySQLParser.REPLICATION_APPLIER - 617)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 617)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 617)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 617)) | (1 << (MySQLParser.ROLE_ADMIN - 617)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 617)) | (1 << (MySQLParser.SET_USER_ID - 617)) | (1 << (MySQLParser.SHOW_ROUTINE - 617)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 617)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 617)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 617)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 617)) | (1 << (MySQLParser.ARMSCII8 - 617)) | (1 << (MySQLParser.ASCII - 617)) | (1 << (MySQLParser.BIG5 - 617)) | (1 << (MySQLParser.CP1250 - 617)) | (1 << (MySQLParser.CP1251 - 617)) | (1 << (MySQLParser.CP1256 - 617)) | (1 << (MySQLParser.CP1257 - 617)) | (1 << (MySQLParser.CP850 - 617)) | (1 << (MySQLParser.CP852 - 617)) | (1 << (MySQLParser.CP866 - 617)) | (1 << (MySQLParser.CP932 - 617)) | (1 << (MySQLParser.DEC8 - 617)))) !== 0) || ((((_la - 649)) & ~0x1f) == 0 && ((1 << (_la - 649)) & ((1 << (MySQLParser.EUCJPMS - 649)) | (1 << (MySQLParser.EUCKR - 649)) | (1 << (MySQLParser.GB2312 - 649)) | (1 << (MySQLParser.GBK - 649)) | (1 << (MySQLParser.GEOSTD8 - 649)) | (1 << (MySQLParser.GREEK - 649)) | (1 << (MySQLParser.HEBREW - 649)) | (1 << (MySQLParser.HP8 - 649)) | (1 << (MySQLParser.KEYBCS2 - 649)) | (1 << (MySQLParser.KOI8R - 649)) | (1 << (MySQLParser.KOI8U - 649)) | (1 << (MySQLParser.LATIN1 - 649)) | (1 << (MySQLParser.LATIN2 - 649)) | (1 << (MySQLParser.LATIN5 - 649)) | (1 << (MySQLParser.LATIN7 - 649)) | (1 << (MySQLParser.MACCE - 649)) | (1 << (MySQLParser.MACROMAN - 649)) | (1 << (MySQLParser.SJIS - 649)) | (1 << (MySQLParser.SWE7 - 649)) | (1 << (MySQLParser.TIS620 - 649)) | (1 << (MySQLParser.UCS2 - 649)) | (1 << (MySQLParser.UJIS - 649)) | (1 << (MySQLParser.UTF16 - 649)) | (1 << (MySQLParser.UTF16LE - 649)) | (1 << (MySQLParser.UTF32 - 649)) | (1 << (MySQLParser.UTF8 - 649)) | (1 << (MySQLParser.UTF8MB3 - 649)) | (1 << (MySQLParser.UTF8MB4 - 649)) | (1 << (MySQLParser.ARCHIVE - 649)) | (1 << (MySQLParser.BLACKHOLE - 649)) | (1 << (MySQLParser.CSV - 649)) | (1 << (MySQLParser.FEDERATED - 649)))) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & ((1 << (MySQLParser.INNODB - 681)) | (1 << (MySQLParser.MEMORY - 681)) | (1 << (MySQLParser.MRG_MYISAM - 681)) | (1 << (MySQLParser.MYISAM - 681)) | (1 << (MySQLParser.NDB - 681)) | (1 << (MySQLParser.NDBCLUSTER - 681)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 681)) | (1 << (MySQLParser.TOKUDB - 681)) | (1 << (MySQLParser.REPEATABLE - 681)) | (1 << (MySQLParser.COMMITTED - 681)) | (1 << (MySQLParser.UNCOMMITTED - 681)) | (1 << (MySQLParser.SERIALIZABLE - 681)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 681)) | (1 << (MySQLParser.LINESTRING - 681)) | (1 << (MySQLParser.MULTILINESTRING - 681)) | (1 << (MySQLParser.MULTIPOINT - 681)) | (1 << (MySQLParser.MULTIPOLYGON - 681)) | (1 << (MySQLParser.POINT - 681)) | (1 << (MySQLParser.POLYGON - 681)) | (1 << (MySQLParser.ABS - 681)) | (1 << (MySQLParser.ACOS - 681)) | (1 << (MySQLParser.ADDDATE - 681)) | (1 << (MySQLParser.ADDTIME - 681)) | (1 << (MySQLParser.AES_DECRYPT - 681)) | (1 << (MySQLParser.AES_ENCRYPT - 681)) | (1 << (MySQLParser.AREA - 681)) | (1 << (MySQLParser.ASBINARY - 681)) | (1 << (MySQLParser.ASIN - 681)) | (1 << (MySQLParser.ASTEXT - 681)) | (1 << (MySQLParser.ASWKB - 681)))) !== 0) || ((((_la - 713)) & ~0x1f) == 0 && ((1 << (_la - 713)) & ((1 << (MySQLParser.ASWKT - 713)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 713)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 713)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 713)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 713)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 713)) | (1 << (MySQLParser.ATAN - 713)) | (1 << (MySQLParser.ATAN2 - 713)) | (1 << (MySQLParser.BENCHMARK - 713)) | (1 << (MySQLParser.BIN - 713)) | (1 << (MySQLParser.BIT_COUNT - 713)) | (1 << (MySQLParser.BIT_LENGTH - 713)) | (1 << (MySQLParser.BUFFER - 713)) | (1 << (MySQLParser.CATALOG_NAME - 713)) | (1 << (MySQLParser.CEIL - 713)) | (1 << (MySQLParser.CEILING - 713)) | (1 << (MySQLParser.CENTROID - 713)) | (1 << (MySQLParser.CHARACTER_LENGTH - 713)) | (1 << (MySQLParser.CHARSET - 713)) | (1 << (MySQLParser.CHAR_LENGTH - 713)) | (1 << (MySQLParser.COERCIBILITY - 713)) | (1 << (MySQLParser.COLLATION - 713)) | (1 << (MySQLParser.COMPRESS - 713)) | (1 << (MySQLParser.CONCAT - 713)) | (1 << (MySQLParser.CONCAT_WS - 713)) | (1 << (MySQLParser.CONNECTION_ID - 713)) | (1 << (MySQLParser.CONV - 713)) | (1 << (MySQLParser.CONVERT_TZ - 713)) | (1 << (MySQLParser.COS - 713)) | (1 << (MySQLParser.COT - 713)) | (1 << (MySQLParser.CRC32 - 713)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 713)))) !== 0) || ((((_la - 745)) & ~0x1f) == 0 && ((1 << (_la - 745)) & ((1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 745)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 745)) | (1 << (MySQLParser.CREATE_DIGEST - 745)) | (1 << (MySQLParser.CROSSES - 745)) | (1 << (MySQLParser.DATEDIFF - 745)) | (1 << (MySQLParser.DATE_FORMAT - 745)) | (1 << (MySQLParser.DAYNAME - 745)) | (1 << (MySQLParser.DAYOFMONTH - 745)) | (1 << (MySQLParser.DAYOFWEEK - 745)) | (1 << (MySQLParser.DAYOFYEAR - 745)) | (1 << (MySQLParser.DECODE - 745)) | (1 << (MySQLParser.DEGREES - 745)) | (1 << (MySQLParser.DES_DECRYPT - 745)) | (1 << (MySQLParser.DES_ENCRYPT - 745)) | (1 << (MySQLParser.DIMENSION - 745)) | (1 << (MySQLParser.DISJOINT - 745)) | (1 << (MySQLParser.ELT - 745)) | (1 << (MySQLParser.ENCODE - 745)) | (1 << (MySQLParser.ENCRYPT - 745)) | (1 << (MySQLParser.ENDPOINT - 745)) | (1 << (MySQLParser.ENVELOPE - 745)) | (1 << (MySQLParser.EQUALS - 745)) | (1 << (MySQLParser.EXP - 745)) | (1 << (MySQLParser.EXPORT_SET - 745)) | (1 << (MySQLParser.EXTERIORRING - 745)) | (1 << (MySQLParser.EXTRACTVALUE - 745)) | (1 << (MySQLParser.FIELD - 745)) | (1 << (MySQLParser.FIND_IN_SET - 745)) | (1 << (MySQLParser.FLOOR - 745)) | (1 << (MySQLParser.FORMAT - 745)) | (1 << (MySQLParser.FOUND_ROWS - 745)) | (1 << (MySQLParser.FROM_BASE64 - 745)))) !== 0) || ((((_la - 777)) & ~0x1f) == 0 && ((1 << (_la - 777)) & ((1 << (MySQLParser.FROM_DAYS - 777)) | (1 << (MySQLParser.FROM_UNIXTIME - 777)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 777)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 777)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 777)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 777)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 777)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 777)) | (1 << (MySQLParser.GEOMETRYN - 777)) | (1 << (MySQLParser.GEOMETRYTYPE - 777)) | (1 << (MySQLParser.GEOMFROMTEXT - 777)) | (1 << (MySQLParser.GEOMFROMWKB - 777)) | (1 << (MySQLParser.GET_FORMAT - 777)) | (1 << (MySQLParser.GET_LOCK - 777)) | (1 << (MySQLParser.GLENGTH - 777)) | (1 << (MySQLParser.GREATEST - 777)) | (1 << (MySQLParser.GTID_SUBSET - 777)) | (1 << (MySQLParser.GTID_SUBTRACT - 777)) | (1 << (MySQLParser.HEX - 777)) | (1 << (MySQLParser.IFNULL - 777)) | (1 << (MySQLParser.INET6_ATON - 777)) | (1 << (MySQLParser.INET6_NTOA - 777)) | (1 << (MySQLParser.INET_ATON - 777)) | (1 << (MySQLParser.INET_NTOA - 777)) | (1 << (MySQLParser.INSTR - 777)) | (1 << (MySQLParser.INTERIORRINGN - 777)) | (1 << (MySQLParser.INTERSECTS - 777)) | (1 << (MySQLParser.ISCLOSED - 777)) | (1 << (MySQLParser.ISEMPTY - 777)) | (1 << (MySQLParser.ISNULL - 777)) | (1 << (MySQLParser.ISSIMPLE - 777)) | (1 << (MySQLParser.IS_FREE_LOCK - 777)))) !== 0) || ((((_la - 809)) & ~0x1f) == 0 && ((1 << (_la - 809)) & ((1 << (MySQLParser.IS_IPV4 - 809)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 809)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 809)) | (1 << (MySQLParser.IS_IPV6 - 809)) | (1 << (MySQLParser.IS_USED_LOCK - 809)) | (1 << (MySQLParser.LAST_INSERT_ID - 809)) | (1 << (MySQLParser.LCASE - 809)) | (1 << (MySQLParser.LEAST - 809)) | (1 << (MySQLParser.LENGTH - 809)) | (1 << (MySQLParser.LINEFROMTEXT - 809)) | (1 << (MySQLParser.LINEFROMWKB - 809)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 809)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 809)) | (1 << (MySQLParser.LN - 809)) | (1 << (MySQLParser.LOAD_FILE - 809)) | (1 << (MySQLParser.LOCATE - 809)) | (1 << (MySQLParser.LOG - 809)) | (1 << (MySQLParser.LOG10 - 809)) | (1 << (MySQLParser.LOG2 - 809)) | (1 << (MySQLParser.LOWER - 809)) | (1 << (MySQLParser.LPAD - 809)) | (1 << (MySQLParser.LTRIM - 809)) | (1 << (MySQLParser.MAKEDATE - 809)) | (1 << (MySQLParser.MAKETIME - 809)) | (1 << (MySQLParser.MAKE_SET - 809)) | (1 << (MySQLParser.MASTER_POS_WAIT - 809)) | (1 << (MySQLParser.MBRCONTAINS - 809)) | (1 << (MySQLParser.MBRDISJOINT - 809)) | (1 << (MySQLParser.MBREQUAL - 809)) | (1 << (MySQLParser.MBRINTERSECTS - 809)) | (1 << (MySQLParser.MBROVERLAPS - 809)) | (1 << (MySQLParser.MBRTOUCHES - 809)))) !== 0) || ((((_la - 841)) & ~0x1f) == 0 && ((1 << (_la - 841)) & ((1 << (MySQLParser.MBRWITHIN - 841)) | (1 << (MySQLParser.MD5 - 841)) | (1 << (MySQLParser.MLINEFROMTEXT - 841)) | (1 << (MySQLParser.MLINEFROMWKB - 841)) | (1 << (MySQLParser.MONTHNAME - 841)) | (1 << (MySQLParser.MPOINTFROMTEXT - 841)) | (1 << (MySQLParser.MPOINTFROMWKB - 841)) | (1 << (MySQLParser.MPOLYFROMTEXT - 841)) | (1 << (MySQLParser.MPOLYFROMWKB - 841)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 841)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 841)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 841)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 841)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 841)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 841)) | (1 << (MySQLParser.NAME_CONST - 841)) | (1 << (MySQLParser.NULLIF - 841)) | (1 << (MySQLParser.NUMGEOMETRIES - 841)) | (1 << (MySQLParser.NUMINTERIORRINGS - 841)) | (1 << (MySQLParser.NUMPOINTS - 841)) | (1 << (MySQLParser.OCT - 841)) | (1 << (MySQLParser.OCTET_LENGTH - 841)) | (1 << (MySQLParser.ORD - 841)) | (1 << (MySQLParser.OVERLAPS - 841)) | (1 << (MySQLParser.PERIOD_ADD - 841)) | (1 << (MySQLParser.PERIOD_DIFF - 841)) | (1 << (MySQLParser.PI - 841)) | (1 << (MySQLParser.POINTFROMTEXT - 841)) | (1 << (MySQLParser.POINTFROMWKB - 841)) | (1 << (MySQLParser.POINTN - 841)) | (1 << (MySQLParser.POLYFROMTEXT - 841)) | (1 << (MySQLParser.POLYFROMWKB - 841)))) !== 0) || ((((_la - 873)) & ~0x1f) == 0 && ((1 << (_la - 873)) & ((1 << (MySQLParser.POLYGONFROMTEXT - 873)) | (1 << (MySQLParser.POLYGONFROMWKB - 873)) | (1 << (MySQLParser.POW - 873)) | (1 << (MySQLParser.POWER - 873)) | (1 << (MySQLParser.QUOTE - 873)) | (1 << (MySQLParser.RADIANS - 873)) | (1 << (MySQLParser.RAND - 873)) | (1 << (MySQLParser.RANDOM_BYTES - 873)) | (1 << (MySQLParser.RELEASE_LOCK - 873)) | (1 << (MySQLParser.REVERSE - 873)) | (1 << (MySQLParser.ROUND - 873)) | (1 << (MySQLParser.ROW_COUNT - 873)) | (1 << (MySQLParser.RPAD - 873)) | (1 << (MySQLParser.RTRIM - 873)) | (1 << (MySQLParser.SEC_TO_TIME - 873)) | (1 << (MySQLParser.SESSION_USER - 873)) | (1 << (MySQLParser.SHA - 873)) | (1 << (MySQLParser.SHA1 - 873)) | (1 << (MySQLParser.SHA2 - 873)) | (1 << (MySQLParser.SCHEMA_NAME - 873)) | (1 << (MySQLParser.SIGN - 873)) | (1 << (MySQLParser.SIN - 873)) | (1 << (MySQLParser.SLEEP - 873)) | (1 << (MySQLParser.SOUNDEX - 873)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 873)) | (1 << (MySQLParser.SQRT - 873)) | (1 << (MySQLParser.SRID - 873)) | (1 << (MySQLParser.STARTPOINT - 873)) | (1 << (MySQLParser.STRCMP - 873)) | (1 << (MySQLParser.STR_TO_DATE - 873)) | (1 << (MySQLParser.ST_AREA - 873)) | (1 << (MySQLParser.ST_ASBINARY - 873)))) !== 0) || ((((_la - 905)) & ~0x1f) == 0 && ((1 << (_la - 905)) & ((1 << (MySQLParser.ST_ASTEXT - 905)) | (1 << (MySQLParser.ST_ASWKB - 905)) | (1 << (MySQLParser.ST_ASWKT - 905)) | (1 << (MySQLParser.ST_BUFFER - 905)) | (1 << (MySQLParser.ST_CENTROID - 905)) | (1 << (MySQLParser.ST_CONTAINS - 905)) | (1 << (MySQLParser.ST_CROSSES - 905)) | (1 << (MySQLParser.ST_DIFFERENCE - 905)) | (1 << (MySQLParser.ST_DIMENSION - 905)) | (1 << (MySQLParser.ST_DISJOINT - 905)) | (1 << (MySQLParser.ST_DISTANCE - 905)) | (1 << (MySQLParser.ST_ENDPOINT - 905)) | (1 << (MySQLParser.ST_ENVELOPE - 905)) | (1 << (MySQLParser.ST_EQUALS - 905)) | (1 << (MySQLParser.ST_EXTERIORRING - 905)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 905)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 905)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 905)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 905)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 905)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 905)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 905)) | (1 << (MySQLParser.ST_GEOMETRYN - 905)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 905)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 905)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 905)) | (1 << (MySQLParser.ST_INTERIORRINGN - 905)) | (1 << (MySQLParser.ST_INTERSECTION - 905)) | (1 << (MySQLParser.ST_INTERSECTS - 905)) | (1 << (MySQLParser.ST_ISCLOSED - 905)) | (1 << (MySQLParser.ST_ISEMPTY - 905)) | (1 << (MySQLParser.ST_ISSIMPLE - 905)))) !== 0) || ((((_la - 937)) & ~0x1f) == 0 && ((1 << (_la - 937)) & ((1 << (MySQLParser.ST_LINEFROMTEXT - 937)) | (1 << (MySQLParser.ST_LINEFROMWKB - 937)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 937)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 937)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 937)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 937)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 937)) | (1 << (MySQLParser.ST_NUMPOINTS - 937)) | (1 << (MySQLParser.ST_OVERLAPS - 937)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 937)) | (1 << (MySQLParser.ST_POINTFROMWKB - 937)) | (1 << (MySQLParser.ST_POINTN - 937)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 937)) | (1 << (MySQLParser.ST_POLYFROMWKB - 937)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 937)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 937)) | (1 << (MySQLParser.ST_SRID - 937)) | (1 << (MySQLParser.ST_STARTPOINT - 937)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 937)) | (1 << (MySQLParser.ST_TOUCHES - 937)) | (1 << (MySQLParser.ST_UNION - 937)) | (1 << (MySQLParser.ST_WITHIN - 937)) | (1 << (MySQLParser.ST_X - 937)) | (1 << (MySQLParser.ST_Y - 937)) | (1 << (MySQLParser.SUBDATE - 937)) | (1 << (MySQLParser.SUBSTRING_INDEX - 937)) | (1 << (MySQLParser.SUBTIME - 937)) | (1 << (MySQLParser.SYSTEM_USER - 937)) | (1 << (MySQLParser.TAN - 937)) | (1 << (MySQLParser.TIMEDIFF - 937)) | (1 << (MySQLParser.TIMESTAMPADD - 937)) | (1 << (MySQLParser.TIMESTAMPDIFF - 937)))) !== 0) || ((((_la - 969)) & ~0x1f) == 0 && ((1 << (_la - 969)) & ((1 << (MySQLParser.TIME_FORMAT - 969)) | (1 << (MySQLParser.TIME_TO_SEC - 969)) | (1 << (MySQLParser.TOUCHES - 969)) | (1 << (MySQLParser.TO_BASE64 - 969)) | (1 << (MySQLParser.TO_DAYS - 969)) | (1 << (MySQLParser.TO_SECONDS - 969)) | (1 << (MySQLParser.UCASE - 969)) | (1 << (MySQLParser.UNCOMPRESS - 969)) | (1 << (MySQLParser.UNCOMPRESSED_LENGTH - 969)) | (1 << (MySQLParser.UNHEX - 969)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 969)) | (1 << (MySQLParser.UPDATEXML - 969)) | (1 << (MySQLParser.UPPER - 969)) | (1 << (MySQLParser.UUID - 969)) | (1 << (MySQLParser.UUID_SHORT - 969)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 969)) | (1 << (MySQLParser.VERSION - 969)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 969)) | (1 << (MySQLParser.WEEKDAY - 969)) | (1 << (MySQLParser.WEEKOFYEAR - 969)) | (1 << (MySQLParser.WEIGHT_STRING - 969)) | (1 << (MySQLParser.WITHIN - 969)) | (1 << (MySQLParser.YEARWEEK - 969)) | (1 << (MySQLParser.Y_FUNCTION - 969)) | (1 << (MySQLParser.X_FUNCTION - 969)))) !== 0) || ((((_la - 1006)) & ~0x1f) == 0 && ((1 << (_la - 1006)) & ((1 << (MySQLParser.PLUS - 1006)) | (1 << (MySQLParser.MINUS - 1006)) | (1 << (MySQLParser.EXCLAMATION_SYMBOL - 1006)) | (1 << (MySQLParser.BIT_NOT_OP - 1006)) | (1 << (MySQLParser.LR_BRACKET - 1006)) | (1 << (MySQLParser.ZERO_DECIMAL - 1006)) | (1 << (MySQLParser.ONE_DECIMAL - 1006)) | (1 << (MySQLParser.TWO_DECIMAL - 1006)) | (1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1006)) | (1 << (MySQLParser.START_NATIONAL_STRING_LITERAL - 1006)) | (1 << (MySQLParser.STRING_LITERAL - 1006)) | (1 << (MySQLParser.DECIMAL_LITERAL - 1006)) | (1 << (MySQLParser.HEXADECIMAL_LITERAL - 1006)))) !== 0) || ((((_la - 1038)) & ~0x1f) == 0 && ((1 << (_la - 1038)) & ((1 << (MySQLParser.REAL_LITERAL - 1038)) | (1 << (MySQLParser.NULL_SPEC_LITERAL - 1038)) | (1 << (MySQLParser.BIT_STRING - 1038)) | (1 << (MySQLParser.STRING_CHARSET_NAME - 1038)) | (1 << (MySQLParser.ID - 1038)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1038)) | (1 << (MySQLParser.LOCAL_ID - 1038)) | (1 << (MySQLParser.GLOBAL_ID - 1038)))) !== 0)) {
                this.state = 5861;
                this.functionArgs();
            }

            this.state = 5864;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 4:
            localctx = new UdfFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 5866;
            this.fullId();
            this.state = 5867;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5869;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MySQLParser.CASE) | (1 << MySQLParser.CAST) | (1 << MySQLParser.CONVERT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (MySQLParser.CURRENT - 32)) | (1 << (MySQLParser.CURRENT_USER - 32)) | (1 << (MySQLParser.DATABASE - 32)) | (1 << (MySQLParser.DIAGNOSTICS - 32)) | (1 << (MySQLParser.EXISTS - 32)) | (1 << (MySQLParser.FALSE - 32)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (MySQLParser.IF - 69)) | (1 << (MySQLParser.INSERT - 69)) | (1 << (MySQLParser.INTERVAL - 69)) | (1 << (MySQLParser.LEFT - 69)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (MySQLParser.NOT - 102)) | (1 << (MySQLParser.NULL_LITERAL - 102)) | (1 << (MySQLParser.NUMBER - 102)) | (1 << (MySQLParser.REPLACE - 102)) | (1 << (MySQLParser.RIGHT - 102)))) !== 0) || ((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (MySQLParser.STACKED - 151)) | (1 << (MySQLParser.TRUE - 151)) | (1 << (MySQLParser.VALUES - 151)))) !== 0) || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.CHAR - 199)) | (1 << (MySQLParser.BINARY - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)) | (1 << (MySQLParser.SERIAL - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.AVG - 233)) | (1 << (MySQLParser.BIT_AND - 233)) | (1 << (MySQLParser.BIT_OR - 233)) | (1 << (MySQLParser.BIT_XOR - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.GROUP_CONCAT - 233)) | (1 << (MySQLParser.MAX - 233)) | (1 << (MySQLParser.MIN - 233)) | (1 << (MySQLParser.STD - 233)) | (1 << (MySQLParser.STDDEV - 233)) | (1 << (MySQLParser.STDDEV_POP - 233)) | (1 << (MySQLParser.STDDEV_SAMP - 233)) | (1 << (MySQLParser.SUM - 233)) | (1 << (MySQLParser.VAR_POP - 233)) | (1 << (MySQLParser.VAR_SAMP - 233)) | (1 << (MySQLParser.VARIANCE - 233)) | (1 << (MySQLParser.CURRENT_DATE - 233)) | (1 << (MySQLParser.CURRENT_TIME - 233)) | (1 << (MySQLParser.CURRENT_TIMESTAMP - 233)) | (1 << (MySQLParser.LOCALTIME - 233)) | (1 << (MySQLParser.CURDATE - 233)) | (1 << (MySQLParser.CURTIME - 233)) | (1 << (MySQLParser.DATE_ADD - 233)) | (1 << (MySQLParser.DATE_SUB - 233)) | (1 << (MySQLParser.EXTRACT - 233)) | (1 << (MySQLParser.LOCALTIMESTAMP - 233)) | (1 << (MySQLParser.NOW - 233)) | (1 << (MySQLParser.POSITION - 233)) | (1 << (MySQLParser.SUBSTR - 233)) | (1 << (MySQLParser.SUBSTRING - 233)))) !== 0) || ((((_la - 265)) & ~0x1f) == 0 && ((1 << (_la - 265)) & ((1 << (MySQLParser.SYSDATE - 265)) | (1 << (MySQLParser.TRIM - 265)) | (1 << (MySQLParser.UTC_DATE - 265)) | (1 << (MySQLParser.UTC_TIME - 265)) | (1 << (MySQLParser.UTC_TIMESTAMP - 265)) | (1 << (MySQLParser.ACCOUNT - 265)) | (1 << (MySQLParser.ACTION - 265)) | (1 << (MySQLParser.AFTER - 265)) | (1 << (MySQLParser.AGGREGATE - 265)) | (1 << (MySQLParser.ALGORITHM - 265)) | (1 << (MySQLParser.ANY - 265)) | (1 << (MySQLParser.AT - 265)) | (1 << (MySQLParser.AUTHORS - 265)) | (1 << (MySQLParser.AUTOCOMMIT - 265)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 265)) | (1 << (MySQLParser.AUTO_INCREMENT - 265)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 265)) | (1 << (MySQLParser.BEGIN - 265)) | (1 << (MySQLParser.BINLOG - 265)) | (1 << (MySQLParser.BIT - 265)) | (1 << (MySQLParser.BLOCK - 265)) | (1 << (MySQLParser.BOOL - 265)) | (1 << (MySQLParser.BOOLEAN - 265)) | (1 << (MySQLParser.BTREE - 265)) | (1 << (MySQLParser.CACHE - 265)) | (1 << (MySQLParser.CASCADED - 265)) | (1 << (MySQLParser.CHAIN - 265)) | (1 << (MySQLParser.CHANGED - 265)) | (1 << (MySQLParser.CHANNEL - 265)) | (1 << (MySQLParser.CHECKSUM - 265)) | (1 << (MySQLParser.PAGE_CHECKSUM - 265)) | (1 << (MySQLParser.CIPHER - 265)))) !== 0) || ((((_la - 297)) & ~0x1f) == 0 && ((1 << (_la - 297)) & ((1 << (MySQLParser.CLASS_ORIGIN - 297)) | (1 << (MySQLParser.CLIENT - 297)) | (1 << (MySQLParser.CLOSE - 297)) | (1 << (MySQLParser.COALESCE - 297)) | (1 << (MySQLParser.CODE - 297)) | (1 << (MySQLParser.COLUMNS - 297)) | (1 << (MySQLParser.COLUMN_FORMAT - 297)) | (1 << (MySQLParser.COLUMN_NAME - 297)) | (1 << (MySQLParser.COMMENT - 297)) | (1 << (MySQLParser.COMMIT - 297)) | (1 << (MySQLParser.COMPACT - 297)) | (1 << (MySQLParser.COMPLETION - 297)) | (1 << (MySQLParser.COMPRESSED - 297)) | (1 << (MySQLParser.COMPRESSION - 297)) | (1 << (MySQLParser.CONCURRENT - 297)) | (1 << (MySQLParser.CONNECTION - 297)) | (1 << (MySQLParser.CONSISTENT - 297)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 297)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 297)) | (1 << (MySQLParser.CONSTRAINT_NAME - 297)) | (1 << (MySQLParser.CONTAINS - 297)) | (1 << (MySQLParser.CONTEXT - 297)) | (1 << (MySQLParser.CONTRIBUTORS - 297)) | (1 << (MySQLParser.COPY - 297)) | (1 << (MySQLParser.CPU - 297)) | (1 << (MySQLParser.CURSOR_NAME - 297)) | (1 << (MySQLParser.DATA - 297)) | (1 << (MySQLParser.DATAFILE - 297)) | (1 << (MySQLParser.DEALLOCATE - 297)) | (1 << (MySQLParser.DEFAULT_AUTH - 297)) | (1 << (MySQLParser.DEFINER - 297)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 297)))) !== 0) || ((((_la - 329)) & ~0x1f) == 0 && ((1 << (_la - 329)) & ((1 << (MySQLParser.DES_KEY_FILE - 329)) | (1 << (MySQLParser.DIRECTORY - 329)) | (1 << (MySQLParser.DISABLE - 329)) | (1 << (MySQLParser.DISCARD - 329)) | (1 << (MySQLParser.DISK - 329)) | (1 << (MySQLParser.DO - 329)) | (1 << (MySQLParser.DUMPFILE - 329)) | (1 << (MySQLParser.DUPLICATE - 329)) | (1 << (MySQLParser.DYNAMIC - 329)) | (1 << (MySQLParser.ENABLE - 329)) | (1 << (MySQLParser.ENCRYPTION - 329)) | (1 << (MySQLParser.END - 329)) | (1 << (MySQLParser.ENDS - 329)) | (1 << (MySQLParser.ENGINE - 329)) | (1 << (MySQLParser.ENGINES - 329)) | (1 << (MySQLParser.ERROR - 329)) | (1 << (MySQLParser.ERRORS - 329)) | (1 << (MySQLParser.ESCAPE - 329)) | (1 << (MySQLParser.EVEN - 329)) | (1 << (MySQLParser.EVENT - 329)) | (1 << (MySQLParser.EVENTS - 329)) | (1 << (MySQLParser.EVERY - 329)) | (1 << (MySQLParser.EXCHANGE - 329)) | (1 << (MySQLParser.EXCLUSIVE - 329)) | (1 << (MySQLParser.EXPIRE - 329)) | (1 << (MySQLParser.EXPORT - 329)) | (1 << (MySQLParser.EXTENDED - 329)) | (1 << (MySQLParser.EXTENT_SIZE - 329)) | (1 << (MySQLParser.FAST - 329)) | (1 << (MySQLParser.FAULTS - 329)) | (1 << (MySQLParser.FIELDS - 329)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 329)))) !== 0) || ((((_la - 361)) & ~0x1f) == 0 && ((1 << (_la - 361)) & ((1 << (MySQLParser.FILTER - 361)) | (1 << (MySQLParser.FIRST - 361)) | (1 << (MySQLParser.FIXED - 361)) | (1 << (MySQLParser.FLUSH - 361)) | (1 << (MySQLParser.FOLLOWS - 361)) | (1 << (MySQLParser.FOUND - 361)) | (1 << (MySQLParser.FULL - 361)) | (1 << (MySQLParser.FUNCTION - 361)) | (1 << (MySQLParser.GENERAL - 361)) | (1 << (MySQLParser.GLOBAL - 361)) | (1 << (MySQLParser.GRANTS - 361)) | (1 << (MySQLParser.GROUP_REPLICATION - 361)) | (1 << (MySQLParser.HANDLER - 361)) | (1 << (MySQLParser.HASH - 361)) | (1 << (MySQLParser.HELP - 361)) | (1 << (MySQLParser.HOST - 361)) | (1 << (MySQLParser.HOSTS - 361)) | (1 << (MySQLParser.IDENTIFIED - 361)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 361)) | (1 << (MySQLParser.IMPORT - 361)) | (1 << (MySQLParser.INDEXES - 361)) | (1 << (MySQLParser.INITIAL_SIZE - 361)) | (1 << (MySQLParser.INPLACE - 361)) | (1 << (MySQLParser.INSERT_METHOD - 361)) | (1 << (MySQLParser.INSTALL - 361)) | (1 << (MySQLParser.INSTANCE - 361)) | (1 << (MySQLParser.INVISIBLE - 361)) | (1 << (MySQLParser.INVOKER - 361)) | (1 << (MySQLParser.IO - 361)) | (1 << (MySQLParser.IO_THREAD - 361)) | (1 << (MySQLParser.IPC - 361)) | (1 << (MySQLParser.ISOLATION - 361)))) !== 0) || ((((_la - 393)) & ~0x1f) == 0 && ((1 << (_la - 393)) & ((1 << (MySQLParser.ISSUER - 393)) | (1 << (MySQLParser.JSON - 393)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 393)) | (1 << (MySQLParser.LANGUAGE - 393)) | (1 << (MySQLParser.LAST - 393)) | (1 << (MySQLParser.LEAVES - 393)) | (1 << (MySQLParser.LESS - 393)) | (1 << (MySQLParser.LEVEL - 393)) | (1 << (MySQLParser.LIST - 393)) | (1 << (MySQLParser.LOCAL - 393)) | (1 << (MySQLParser.LOGFILE - 393)) | (1 << (MySQLParser.LOGS - 393)) | (1 << (MySQLParser.MASTER - 393)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 393)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 393)) | (1 << (MySQLParser.MASTER_DELAY - 393)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 393)) | (1 << (MySQLParser.MASTER_HOST - 393)) | (1 << (MySQLParser.MASTER_LOG_FILE - 393)) | (1 << (MySQLParser.MASTER_LOG_POS - 393)) | (1 << (MySQLParser.MASTER_PASSWORD - 393)) | (1 << (MySQLParser.MASTER_PORT - 393)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 393)) | (1 << (MySQLParser.MASTER_SSL - 393)) | (1 << (MySQLParser.MASTER_SSL_CA - 393)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 393)) | (1 << (MySQLParser.MASTER_SSL_CERT - 393)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 393)) | (1 << (MySQLParser.MASTER_SSL_CRL - 393)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 393)) | (1 << (MySQLParser.MASTER_SSL_KEY - 393)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 393)))) !== 0) || ((((_la - 425)) & ~0x1f) == 0 && ((1 << (_la - 425)) & ((1 << (MySQLParser.MASTER_USER - 425)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 425)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 425)) | (1 << (MySQLParser.MAX_ROWS - 425)) | (1 << (MySQLParser.MAX_SIZE - 425)) | (1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 425)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 425)) | (1 << (MySQLParser.MEDIUM - 425)) | (1 << (MySQLParser.MERGE - 425)) | (1 << (MySQLParser.MESSAGE_TEXT - 425)) | (1 << (MySQLParser.MID - 425)) | (1 << (MySQLParser.MIGRATE - 425)) | (1 << (MySQLParser.MIN_ROWS - 425)) | (1 << (MySQLParser.MODE - 425)) | (1 << (MySQLParser.MODIFY - 425)) | (1 << (MySQLParser.MUTEX - 425)) | (1 << (MySQLParser.MYSQL - 425)) | (1 << (MySQLParser.MYSQL_ERRNO - 425)) | (1 << (MySQLParser.NAME - 425)) | (1 << (MySQLParser.NAMES - 425)) | (1 << (MySQLParser.NCHAR - 425)) | (1 << (MySQLParser.NEVER - 425)) | (1 << (MySQLParser.NEXT - 425)) | (1 << (MySQLParser.NO - 425)) | (1 << (MySQLParser.NODEGROUP - 425)) | (1 << (MySQLParser.NONE - 425)) | (1 << (MySQLParser.OFFLINE - 425)) | (1 << (MySQLParser.OFFSET - 425)) | (1 << (MySQLParser.OJ - 425)) | (1 << (MySQLParser.OLD_PASSWORD - 425)) | (1 << (MySQLParser.ONE - 425)) | (1 << (MySQLParser.ONLINE - 425)))) !== 0) || ((((_la - 457)) & ~0x1f) == 0 && ((1 << (_la - 457)) & ((1 << (MySQLParser.ONLY - 457)) | (1 << (MySQLParser.OPEN - 457)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 457)) | (1 << (MySQLParser.OPTIONS - 457)) | (1 << (MySQLParser.OWNER - 457)) | (1 << (MySQLParser.PACK_KEYS - 457)) | (1 << (MySQLParser.PAGE - 457)) | (1 << (MySQLParser.PARSER - 457)) | (1 << (MySQLParser.PARTIAL - 457)) | (1 << (MySQLParser.PARTITIONING - 457)) | (1 << (MySQLParser.PARTITIONS - 457)) | (1 << (MySQLParser.PASSWORD - 457)) | (1 << (MySQLParser.PHASE - 457)) | (1 << (MySQLParser.PLUGIN - 457)) | (1 << (MySQLParser.PLUGIN_DIR - 457)) | (1 << (MySQLParser.PLUGINS - 457)) | (1 << (MySQLParser.PORT - 457)) | (1 << (MySQLParser.PRECEDES - 457)) | (1 << (MySQLParser.PREPARE - 457)) | (1 << (MySQLParser.PRESERVE - 457)) | (1 << (MySQLParser.PREV - 457)) | (1 << (MySQLParser.PROCESSLIST - 457)) | (1 << (MySQLParser.PROFILE - 457)) | (1 << (MySQLParser.PROFILES - 457)) | (1 << (MySQLParser.PROXY - 457)) | (1 << (MySQLParser.QUERY - 457)) | (1 << (MySQLParser.QUICK - 457)) | (1 << (MySQLParser.REBUILD - 457)) | (1 << (MySQLParser.RECOVER - 457)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 457)) | (1 << (MySQLParser.REDUNDANT - 457)) | (1 << (MySQLParser.RELAY - 457)))) !== 0) || ((((_la - 489)) & ~0x1f) == 0 && ((1 << (_la - 489)) & ((1 << (MySQLParser.RELAY_LOG_FILE - 489)) | (1 << (MySQLParser.RELAY_LOG_POS - 489)) | (1 << (MySQLParser.RELAYLOG - 489)) | (1 << (MySQLParser.REMOVE - 489)) | (1 << (MySQLParser.REORGANIZE - 489)) | (1 << (MySQLParser.REPAIR - 489)) | (1 << (MySQLParser.REPLICATE_DO_DB - 489)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 489)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 489)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 489)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 489)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 489)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 489)) | (1 << (MySQLParser.REPLICATION - 489)) | (1 << (MySQLParser.RESET - 489)) | (1 << (MySQLParser.RESUME - 489)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 489)) | (1 << (MySQLParser.RETURNS - 489)) | (1 << (MySQLParser.ROLE - 489)) | (1 << (MySQLParser.ROLLBACK - 489)) | (1 << (MySQLParser.ROLLUP - 489)) | (1 << (MySQLParser.ROTATE - 489)) | (1 << (MySQLParser.ROW - 489)) | (1 << (MySQLParser.ROWS - 489)) | (1 << (MySQLParser.ROW_FORMAT - 489)) | (1 << (MySQLParser.SAVEPOINT - 489)) | (1 << (MySQLParser.SCHEDULE - 489)) | (1 << (MySQLParser.SECURITY - 489)) | (1 << (MySQLParser.SERVER - 489)) | (1 << (MySQLParser.SESSION - 489)) | (1 << (MySQLParser.SHARE - 489)) | (1 << (MySQLParser.SHARED - 489)))) !== 0) || ((((_la - 521)) & ~0x1f) == 0 && ((1 << (_la - 521)) & ((1 << (MySQLParser.SIGNED - 521)) | (1 << (MySQLParser.SIMPLE - 521)) | (1 << (MySQLParser.SLAVE - 521)) | (1 << (MySQLParser.SLOW - 521)) | (1 << (MySQLParser.SNAPSHOT - 521)) | (1 << (MySQLParser.SOCKET - 521)) | (1 << (MySQLParser.SOME - 521)) | (1 << (MySQLParser.SONAME - 521)) | (1 << (MySQLParser.SOUNDS - 521)) | (1 << (MySQLParser.SOURCE - 521)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 521)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 521)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 521)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 521)) | (1 << (MySQLParser.SQL_CACHE - 521)) | (1 << (MySQLParser.SQL_NO_CACHE - 521)) | (1 << (MySQLParser.SQL_THREAD - 521)) | (1 << (MySQLParser.START - 521)) | (1 << (MySQLParser.STARTS - 521)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 521)) | (1 << (MySQLParser.STATS_PERSISTENT - 521)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 521)) | (1 << (MySQLParser.STATUS - 521)) | (1 << (MySQLParser.STOP - 521)) | (1 << (MySQLParser.STORAGE - 521)) | (1 << (MySQLParser.STRING - 521)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 521)) | (1 << (MySQLParser.SUBJECT - 521)) | (1 << (MySQLParser.SUBPARTITION - 521)) | (1 << (MySQLParser.SUBPARTITIONS - 521)) | (1 << (MySQLParser.SUSPEND - 521)))) !== 0) || ((((_la - 553)) & ~0x1f) == 0 && ((1 << (_la - 553)) & ((1 << (MySQLParser.SWAPS - 553)) | (1 << (MySQLParser.SWITCHES - 553)) | (1 << (MySQLParser.TABLE_NAME - 553)) | (1 << (MySQLParser.TABLESPACE - 553)) | (1 << (MySQLParser.TEMPORARY - 553)) | (1 << (MySQLParser.TEMPTABLE - 553)) | (1 << (MySQLParser.THAN - 553)) | (1 << (MySQLParser.TRADITIONAL - 553)) | (1 << (MySQLParser.TRANSACTION - 553)) | (1 << (MySQLParser.TRANSACTIONAL - 553)) | (1 << (MySQLParser.TRIGGERS - 553)) | (1 << (MySQLParser.TRUNCATE - 553)) | (1 << (MySQLParser.UNDEFINED - 553)) | (1 << (MySQLParser.UNDOFILE - 553)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 553)) | (1 << (MySQLParser.UNINSTALL - 553)) | (1 << (MySQLParser.UNKNOWN - 553)) | (1 << (MySQLParser.UNTIL - 553)) | (1 << (MySQLParser.UPGRADE - 553)) | (1 << (MySQLParser.USER - 553)) | (1 << (MySQLParser.USE_FRM - 553)) | (1 << (MySQLParser.USER_RESOURCES - 553)) | (1 << (MySQLParser.VALIDATION - 553)) | (1 << (MySQLParser.VALUE - 553)) | (1 << (MySQLParser.VARIABLES - 553)) | (1 << (MySQLParser.VIEW - 553)) | (1 << (MySQLParser.VISIBLE - 553)) | (1 << (MySQLParser.WAIT - 553)) | (1 << (MySQLParser.WARNINGS - 553)) | (1 << (MySQLParser.WITHOUT - 553)) | (1 << (MySQLParser.WORK - 553)))) !== 0) || ((((_la - 585)) & ~0x1f) == 0 && ((1 << (_la - 585)) & ((1 << (MySQLParser.WRAPPER - 585)) | (1 << (MySQLParser.X509 - 585)) | (1 << (MySQLParser.XA - 585)) | (1 << (MySQLParser.XML - 585)) | (1 << (MySQLParser.INTERNAL - 585)) | (1 << (MySQLParser.QUARTER - 585)) | (1 << (MySQLParser.MONTH - 585)) | (1 << (MySQLParser.DAY - 585)) | (1 << (MySQLParser.HOUR - 585)) | (1 << (MySQLParser.MINUTE - 585)) | (1 << (MySQLParser.WEEK - 585)) | (1 << (MySQLParser.SECOND - 585)) | (1 << (MySQLParser.MICROSECOND - 585)) | (1 << (MySQLParser.TABLES - 585)) | (1 << (MySQLParser.ROUTINE - 585)) | (1 << (MySQLParser.EXECUTE - 585)) | (1 << (MySQLParser.FILE - 585)) | (1 << (MySQLParser.PROCESS - 585)) | (1 << (MySQLParser.RELOAD - 585)) | (1 << (MySQLParser.SHUTDOWN - 585)) | (1 << (MySQLParser.SUPER - 585)) | (1 << (MySQLParser.PRIVILEGES - 585)) | (1 << (MySQLParser.AUDIT_ADMIN - 585)) | (1 << (MySQLParser.BACKUP_ADMIN - 585)) | (1 << (MySQLParser.BINLOG_ADMIN - 585)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 585)) | (1 << (MySQLParser.CLONE_ADMIN - 585)))) !== 0) || ((((_la - 617)) & ~0x1f) == 0 && ((1 << (_la - 617)) & ((1 << (MySQLParser.CONNECTION_ADMIN - 617)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 617)) | (1 << (MySQLParser.FIREWALL_ADMIN - 617)) | (1 << (MySQLParser.FIREWALL_USER - 617)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 617)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 617)) | (1 << (MySQLParser.NDB_STORED_USER - 617)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 617)) | (1 << (MySQLParser.REPLICATION_APPLIER - 617)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 617)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 617)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 617)) | (1 << (MySQLParser.ROLE_ADMIN - 617)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 617)) | (1 << (MySQLParser.SET_USER_ID - 617)) | (1 << (MySQLParser.SHOW_ROUTINE - 617)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 617)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 617)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 617)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 617)) | (1 << (MySQLParser.ARMSCII8 - 617)) | (1 << (MySQLParser.ASCII - 617)) | (1 << (MySQLParser.BIG5 - 617)) | (1 << (MySQLParser.CP1250 - 617)) | (1 << (MySQLParser.CP1251 - 617)) | (1 << (MySQLParser.CP1256 - 617)) | (1 << (MySQLParser.CP1257 - 617)) | (1 << (MySQLParser.CP850 - 617)) | (1 << (MySQLParser.CP852 - 617)) | (1 << (MySQLParser.CP866 - 617)) | (1 << (MySQLParser.CP932 - 617)) | (1 << (MySQLParser.DEC8 - 617)))) !== 0) || ((((_la - 649)) & ~0x1f) == 0 && ((1 << (_la - 649)) & ((1 << (MySQLParser.EUCJPMS - 649)) | (1 << (MySQLParser.EUCKR - 649)) | (1 << (MySQLParser.GB2312 - 649)) | (1 << (MySQLParser.GBK - 649)) | (1 << (MySQLParser.GEOSTD8 - 649)) | (1 << (MySQLParser.GREEK - 649)) | (1 << (MySQLParser.HEBREW - 649)) | (1 << (MySQLParser.HP8 - 649)) | (1 << (MySQLParser.KEYBCS2 - 649)) | (1 << (MySQLParser.KOI8R - 649)) | (1 << (MySQLParser.KOI8U - 649)) | (1 << (MySQLParser.LATIN1 - 649)) | (1 << (MySQLParser.LATIN2 - 649)) | (1 << (MySQLParser.LATIN5 - 649)) | (1 << (MySQLParser.LATIN7 - 649)) | (1 << (MySQLParser.MACCE - 649)) | (1 << (MySQLParser.MACROMAN - 649)) | (1 << (MySQLParser.SJIS - 649)) | (1 << (MySQLParser.SWE7 - 649)) | (1 << (MySQLParser.TIS620 - 649)) | (1 << (MySQLParser.UCS2 - 649)) | (1 << (MySQLParser.UJIS - 649)) | (1 << (MySQLParser.UTF16 - 649)) | (1 << (MySQLParser.UTF16LE - 649)) | (1 << (MySQLParser.UTF32 - 649)) | (1 << (MySQLParser.UTF8 - 649)) | (1 << (MySQLParser.UTF8MB3 - 649)) | (1 << (MySQLParser.UTF8MB4 - 649)) | (1 << (MySQLParser.ARCHIVE - 649)) | (1 << (MySQLParser.BLACKHOLE - 649)) | (1 << (MySQLParser.CSV - 649)) | (1 << (MySQLParser.FEDERATED - 649)))) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & ((1 << (MySQLParser.INNODB - 681)) | (1 << (MySQLParser.MEMORY - 681)) | (1 << (MySQLParser.MRG_MYISAM - 681)) | (1 << (MySQLParser.MYISAM - 681)) | (1 << (MySQLParser.NDB - 681)) | (1 << (MySQLParser.NDBCLUSTER - 681)) | (1 << (MySQLParser.PERFORMANCE_SCHEMA - 681)) | (1 << (MySQLParser.TOKUDB - 681)) | (1 << (MySQLParser.REPEATABLE - 681)) | (1 << (MySQLParser.COMMITTED - 681)) | (1 << (MySQLParser.UNCOMMITTED - 681)) | (1 << (MySQLParser.SERIALIZABLE - 681)) | (1 << (MySQLParser.GEOMETRYCOLLECTION - 681)) | (1 << (MySQLParser.LINESTRING - 681)) | (1 << (MySQLParser.MULTILINESTRING - 681)) | (1 << (MySQLParser.MULTIPOINT - 681)) | (1 << (MySQLParser.MULTIPOLYGON - 681)) | (1 << (MySQLParser.POINT - 681)) | (1 << (MySQLParser.POLYGON - 681)) | (1 << (MySQLParser.ABS - 681)) | (1 << (MySQLParser.ACOS - 681)) | (1 << (MySQLParser.ADDDATE - 681)) | (1 << (MySQLParser.ADDTIME - 681)) | (1 << (MySQLParser.AES_DECRYPT - 681)) | (1 << (MySQLParser.AES_ENCRYPT - 681)) | (1 << (MySQLParser.AREA - 681)) | (1 << (MySQLParser.ASBINARY - 681)) | (1 << (MySQLParser.ASIN - 681)) | (1 << (MySQLParser.ASTEXT - 681)) | (1 << (MySQLParser.ASWKB - 681)))) !== 0) || ((((_la - 713)) & ~0x1f) == 0 && ((1 << (_la - 713)) & ((1 << (MySQLParser.ASWKT - 713)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 713)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 713)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 713)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 713)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 713)) | (1 << (MySQLParser.ATAN - 713)) | (1 << (MySQLParser.ATAN2 - 713)) | (1 << (MySQLParser.BENCHMARK - 713)) | (1 << (MySQLParser.BIN - 713)) | (1 << (MySQLParser.BIT_COUNT - 713)) | (1 << (MySQLParser.BIT_LENGTH - 713)) | (1 << (MySQLParser.BUFFER - 713)) | (1 << (MySQLParser.CATALOG_NAME - 713)) | (1 << (MySQLParser.CEIL - 713)) | (1 << (MySQLParser.CEILING - 713)) | (1 << (MySQLParser.CENTROID - 713)) | (1 << (MySQLParser.CHARACTER_LENGTH - 713)) | (1 << (MySQLParser.CHARSET - 713)) | (1 << (MySQLParser.CHAR_LENGTH - 713)) | (1 << (MySQLParser.COERCIBILITY - 713)) | (1 << (MySQLParser.COLLATION - 713)) | (1 << (MySQLParser.COMPRESS - 713)) | (1 << (MySQLParser.CONCAT - 713)) | (1 << (MySQLParser.CONCAT_WS - 713)) | (1 << (MySQLParser.CONNECTION_ID - 713)) | (1 << (MySQLParser.CONV - 713)) | (1 << (MySQLParser.CONVERT_TZ - 713)) | (1 << (MySQLParser.COS - 713)) | (1 << (MySQLParser.COT - 713)) | (1 << (MySQLParser.CRC32 - 713)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 713)))) !== 0) || ((((_la - 745)) & ~0x1f) == 0 && ((1 << (_la - 745)) & ((1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 745)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 745)) | (1 << (MySQLParser.CREATE_DIGEST - 745)) | (1 << (MySQLParser.CROSSES - 745)) | (1 << (MySQLParser.DATEDIFF - 745)) | (1 << (MySQLParser.DATE_FORMAT - 745)) | (1 << (MySQLParser.DAYNAME - 745)) | (1 << (MySQLParser.DAYOFMONTH - 745)) | (1 << (MySQLParser.DAYOFWEEK - 745)) | (1 << (MySQLParser.DAYOFYEAR - 745)) | (1 << (MySQLParser.DECODE - 745)) | (1 << (MySQLParser.DEGREES - 745)) | (1 << (MySQLParser.DES_DECRYPT - 745)) | (1 << (MySQLParser.DES_ENCRYPT - 745)) | (1 << (MySQLParser.DIMENSION - 745)) | (1 << (MySQLParser.DISJOINT - 745)) | (1 << (MySQLParser.ELT - 745)) | (1 << (MySQLParser.ENCODE - 745)) | (1 << (MySQLParser.ENCRYPT - 745)) | (1 << (MySQLParser.ENDPOINT - 745)) | (1 << (MySQLParser.ENVELOPE - 745)) | (1 << (MySQLParser.EQUALS - 745)) | (1 << (MySQLParser.EXP - 745)) | (1 << (MySQLParser.EXPORT_SET - 745)) | (1 << (MySQLParser.EXTERIORRING - 745)) | (1 << (MySQLParser.EXTRACTVALUE - 745)) | (1 << (MySQLParser.FIELD - 745)) | (1 << (MySQLParser.FIND_IN_SET - 745)) | (1 << (MySQLParser.FLOOR - 745)) | (1 << (MySQLParser.FORMAT - 745)) | (1 << (MySQLParser.FOUND_ROWS - 745)) | (1 << (MySQLParser.FROM_BASE64 - 745)))) !== 0) || ((((_la - 777)) & ~0x1f) == 0 && ((1 << (_la - 777)) & ((1 << (MySQLParser.FROM_DAYS - 777)) | (1 << (MySQLParser.FROM_UNIXTIME - 777)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 777)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 777)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 777)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 777)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 777)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 777)) | (1 << (MySQLParser.GEOMETRYN - 777)) | (1 << (MySQLParser.GEOMETRYTYPE - 777)) | (1 << (MySQLParser.GEOMFROMTEXT - 777)) | (1 << (MySQLParser.GEOMFROMWKB - 777)) | (1 << (MySQLParser.GET_FORMAT - 777)) | (1 << (MySQLParser.GET_LOCK - 777)) | (1 << (MySQLParser.GLENGTH - 777)) | (1 << (MySQLParser.GREATEST - 777)) | (1 << (MySQLParser.GTID_SUBSET - 777)) | (1 << (MySQLParser.GTID_SUBTRACT - 777)) | (1 << (MySQLParser.HEX - 777)) | (1 << (MySQLParser.IFNULL - 777)) | (1 << (MySQLParser.INET6_ATON - 777)) | (1 << (MySQLParser.INET6_NTOA - 777)) | (1 << (MySQLParser.INET_ATON - 777)) | (1 << (MySQLParser.INET_NTOA - 777)) | (1 << (MySQLParser.INSTR - 777)) | (1 << (MySQLParser.INTERIORRINGN - 777)) | (1 << (MySQLParser.INTERSECTS - 777)) | (1 << (MySQLParser.ISCLOSED - 777)) | (1 << (MySQLParser.ISEMPTY - 777)) | (1 << (MySQLParser.ISNULL - 777)) | (1 << (MySQLParser.ISSIMPLE - 777)) | (1 << (MySQLParser.IS_FREE_LOCK - 777)))) !== 0) || ((((_la - 809)) & ~0x1f) == 0 && ((1 << (_la - 809)) & ((1 << (MySQLParser.IS_IPV4 - 809)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 809)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 809)) | (1 << (MySQLParser.IS_IPV6 - 809)) | (1 << (MySQLParser.IS_USED_LOCK - 809)) | (1 << (MySQLParser.LAST_INSERT_ID - 809)) | (1 << (MySQLParser.LCASE - 809)) | (1 << (MySQLParser.LEAST - 809)) | (1 << (MySQLParser.LENGTH - 809)) | (1 << (MySQLParser.LINEFROMTEXT - 809)) | (1 << (MySQLParser.LINEFROMWKB - 809)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 809)) | (1 << (MySQLParser.LINESTRINGFROMWKB - 809)) | (1 << (MySQLParser.LN - 809)) | (1 << (MySQLParser.LOAD_FILE - 809)) | (1 << (MySQLParser.LOCATE - 809)) | (1 << (MySQLParser.LOG - 809)) | (1 << (MySQLParser.LOG10 - 809)) | (1 << (MySQLParser.LOG2 - 809)) | (1 << (MySQLParser.LOWER - 809)) | (1 << (MySQLParser.LPAD - 809)) | (1 << (MySQLParser.LTRIM - 809)) | (1 << (MySQLParser.MAKEDATE - 809)) | (1 << (MySQLParser.MAKETIME - 809)) | (1 << (MySQLParser.MAKE_SET - 809)) | (1 << (MySQLParser.MASTER_POS_WAIT - 809)) | (1 << (MySQLParser.MBRCONTAINS - 809)) | (1 << (MySQLParser.MBRDISJOINT - 809)) | (1 << (MySQLParser.MBREQUAL - 809)) | (1 << (MySQLParser.MBRINTERSECTS - 809)) | (1 << (MySQLParser.MBROVERLAPS - 809)) | (1 << (MySQLParser.MBRTOUCHES - 809)))) !== 0) || ((((_la - 841)) & ~0x1f) == 0 && ((1 << (_la - 841)) & ((1 << (MySQLParser.MBRWITHIN - 841)) | (1 << (MySQLParser.MD5 - 841)) | (1 << (MySQLParser.MLINEFROMTEXT - 841)) | (1 << (MySQLParser.MLINEFROMWKB - 841)) | (1 << (MySQLParser.MONTHNAME - 841)) | (1 << (MySQLParser.MPOINTFROMTEXT - 841)) | (1 << (MySQLParser.MPOINTFROMWKB - 841)) | (1 << (MySQLParser.MPOLYFROMTEXT - 841)) | (1 << (MySQLParser.MPOLYFROMWKB - 841)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 841)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 841)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 841)) | (1 << (MySQLParser.MULTIPOINTFROMWKB - 841)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 841)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 841)) | (1 << (MySQLParser.NAME_CONST - 841)) | (1 << (MySQLParser.NULLIF - 841)) | (1 << (MySQLParser.NUMGEOMETRIES - 841)) | (1 << (MySQLParser.NUMINTERIORRINGS - 841)) | (1 << (MySQLParser.NUMPOINTS - 841)) | (1 << (MySQLParser.OCT - 841)) | (1 << (MySQLParser.OCTET_LENGTH - 841)) | (1 << (MySQLParser.ORD - 841)) | (1 << (MySQLParser.OVERLAPS - 841)) | (1 << (MySQLParser.PERIOD_ADD - 841)) | (1 << (MySQLParser.PERIOD_DIFF - 841)) | (1 << (MySQLParser.PI - 841)) | (1 << (MySQLParser.POINTFROMTEXT - 841)) | (1 << (MySQLParser.POINTFROMWKB - 841)) | (1 << (MySQLParser.POINTN - 841)) | (1 << (MySQLParser.POLYFROMTEXT - 841)) | (1 << (MySQLParser.POLYFROMWKB - 841)))) !== 0) || ((((_la - 873)) & ~0x1f) == 0 && ((1 << (_la - 873)) & ((1 << (MySQLParser.POLYGONFROMTEXT - 873)) | (1 << (MySQLParser.POLYGONFROMWKB - 873)) | (1 << (MySQLParser.POW - 873)) | (1 << (MySQLParser.POWER - 873)) | (1 << (MySQLParser.QUOTE - 873)) | (1 << (MySQLParser.RADIANS - 873)) | (1 << (MySQLParser.RAND - 873)) | (1 << (MySQLParser.RANDOM_BYTES - 873)) | (1 << (MySQLParser.RELEASE_LOCK - 873)) | (1 << (MySQLParser.REVERSE - 873)) | (1 << (MySQLParser.ROUND - 873)) | (1 << (MySQLParser.ROW_COUNT - 873)) | (1 << (MySQLParser.RPAD - 873)) | (1 << (MySQLParser.RTRIM - 873)) | (1 << (MySQLParser.SEC_TO_TIME - 873)) | (1 << (MySQLParser.SESSION_USER - 873)) | (1 << (MySQLParser.SHA - 873)) | (1 << (MySQLParser.SHA1 - 873)) | (1 << (MySQLParser.SHA2 - 873)) | (1 << (MySQLParser.SCHEMA_NAME - 873)) | (1 << (MySQLParser.SIGN - 873)) | (1 << (MySQLParser.SIN - 873)) | (1 << (MySQLParser.SLEEP - 873)) | (1 << (MySQLParser.SOUNDEX - 873)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 873)) | (1 << (MySQLParser.SQRT - 873)) | (1 << (MySQLParser.SRID - 873)) | (1 << (MySQLParser.STARTPOINT - 873)) | (1 << (MySQLParser.STRCMP - 873)) | (1 << (MySQLParser.STR_TO_DATE - 873)) | (1 << (MySQLParser.ST_AREA - 873)) | (1 << (MySQLParser.ST_ASBINARY - 873)))) !== 0) || ((((_la - 905)) & ~0x1f) == 0 && ((1 << (_la - 905)) & ((1 << (MySQLParser.ST_ASTEXT - 905)) | (1 << (MySQLParser.ST_ASWKB - 905)) | (1 << (MySQLParser.ST_ASWKT - 905)) | (1 << (MySQLParser.ST_BUFFER - 905)) | (1 << (MySQLParser.ST_CENTROID - 905)) | (1 << (MySQLParser.ST_CONTAINS - 905)) | (1 << (MySQLParser.ST_CROSSES - 905)) | (1 << (MySQLParser.ST_DIFFERENCE - 905)) | (1 << (MySQLParser.ST_DIMENSION - 905)) | (1 << (MySQLParser.ST_DISJOINT - 905)) | (1 << (MySQLParser.ST_DISTANCE - 905)) | (1 << (MySQLParser.ST_ENDPOINT - 905)) | (1 << (MySQLParser.ST_ENVELOPE - 905)) | (1 << (MySQLParser.ST_EQUALS - 905)) | (1 << (MySQLParser.ST_EXTERIORRING - 905)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 905)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 905)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 905)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 905)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 905)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 905)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 905)) | (1 << (MySQLParser.ST_GEOMETRYN - 905)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 905)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 905)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 905)) | (1 << (MySQLParser.ST_INTERIORRINGN - 905)) | (1 << (MySQLParser.ST_INTERSECTION - 905)) | (1 << (MySQLParser.ST_INTERSECTS - 905)) | (1 << (MySQLParser.ST_ISCLOSED - 905)) | (1 << (MySQLParser.ST_ISEMPTY - 905)) | (1 << (MySQLParser.ST_ISSIMPLE - 905)))) !== 0) || ((((_la - 937)) & ~0x1f) == 0 && ((1 << (_la - 937)) & ((1 << (MySQLParser.ST_LINEFROMTEXT - 937)) | (1 << (MySQLParser.ST_LINEFROMWKB - 937)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 937)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 937)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 937)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 937)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 937)) | (1 << (MySQLParser.ST_NUMPOINTS - 937)) | (1 << (MySQLParser.ST_OVERLAPS - 937)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 937)) | (1 << (MySQLParser.ST_POINTFROMWKB - 937)) | (1 << (MySQLParser.ST_POINTN - 937)) | (1 << (MySQLParser.ST_POLYFROMTEXT - 937)) | (1 << (MySQLParser.ST_POLYFROMWKB - 937)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 937)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 937)) | (1 << (MySQLParser.ST_SRID - 937)) | (1 << (MySQLParser.ST_STARTPOINT - 937)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 937)) | (1 << (MySQLParser.ST_TOUCHES - 937)) | (1 << (MySQLParser.ST_UNION - 937)) | (1 << (MySQLParser.ST_WITHIN - 937)) | (1 << (MySQLParser.ST_X - 937)) | (1 << (MySQLParser.ST_Y - 937)) | (1 << (MySQLParser.SUBDATE - 937)) | (1 << (MySQLParser.SUBSTRING_INDEX - 937)) | (1 << (MySQLParser.SUBTIME - 937)) | (1 << (MySQLParser.SYSTEM_USER - 937)) | (1 << (MySQLParser.TAN - 937)) | (1 << (MySQLParser.TIMEDIFF - 937)) | (1 << (MySQLParser.TIMESTAMPADD - 937)) | (1 << (MySQLParser.TIMESTAMPDIFF - 937)))) !== 0) || ((((_la - 969)) & ~0x1f) == 0 && ((1 << (_la - 969)) & ((1 << (MySQLParser.TIME_FORMAT - 969)) | (1 << (MySQLParser.TIME_TO_SEC - 969)) | (1 << (MySQLParser.TOUCHES - 969)) | (1 << (MySQLParser.TO_BASE64 - 969)) | (1 << (MySQLParser.TO_DAYS - 969)) | (1 << (MySQLParser.TO_SECONDS - 969)) | (1 << (MySQLParser.UCASE - 969)) | (1 << (MySQLParser.UNCOMPRESS - 969)) | (1 << (MySQLParser.UNCOMPRESSED_LENGTH - 969)) | (1 << (MySQLParser.UNHEX - 969)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 969)) | (1 << (MySQLParser.UPDATEXML - 969)) | (1 << (MySQLParser.UPPER - 969)) | (1 << (MySQLParser.UUID - 969)) | (1 << (MySQLParser.UUID_SHORT - 969)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 969)) | (1 << (MySQLParser.VERSION - 969)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 969)) | (1 << (MySQLParser.WEEKDAY - 969)) | (1 << (MySQLParser.WEEKOFYEAR - 969)) | (1 << (MySQLParser.WEIGHT_STRING - 969)) | (1 << (MySQLParser.WITHIN - 969)) | (1 << (MySQLParser.YEARWEEK - 969)) | (1 << (MySQLParser.Y_FUNCTION - 969)) | (1 << (MySQLParser.X_FUNCTION - 969)))) !== 0) || ((((_la - 1006)) & ~0x1f) == 0 && ((1 << (_la - 1006)) & ((1 << (MySQLParser.PLUS - 1006)) | (1 << (MySQLParser.MINUS - 1006)) | (1 << (MySQLParser.EXCLAMATION_SYMBOL - 1006)) | (1 << (MySQLParser.BIT_NOT_OP - 1006)) | (1 << (MySQLParser.LR_BRACKET - 1006)) | (1 << (MySQLParser.ZERO_DECIMAL - 1006)) | (1 << (MySQLParser.ONE_DECIMAL - 1006)) | (1 << (MySQLParser.TWO_DECIMAL - 1006)) | (1 << (MySQLParser.CHARSET_REVERSE_QOUTE_STRING - 1006)) | (1 << (MySQLParser.START_NATIONAL_STRING_LITERAL - 1006)) | (1 << (MySQLParser.STRING_LITERAL - 1006)) | (1 << (MySQLParser.DECIMAL_LITERAL - 1006)) | (1 << (MySQLParser.HEXADECIMAL_LITERAL - 1006)))) !== 0) || ((((_la - 1038)) & ~0x1f) == 0 && ((1 << (_la - 1038)) & ((1 << (MySQLParser.REAL_LITERAL - 1038)) | (1 << (MySQLParser.NULL_SPEC_LITERAL - 1038)) | (1 << (MySQLParser.BIT_STRING - 1038)) | (1 << (MySQLParser.STRING_CHARSET_NAME - 1038)) | (1 << (MySQLParser.ID - 1038)) | (1 << (MySQLParser.REVERSE_QUOTE_ID - 1038)) | (1 << (MySQLParser.LOCAL_ID - 1038)) | (1 << (MySQLParser.GLOBAL_ID - 1038)))) !== 0)) {
                this.state = 5868;
                this.functionArgs();
            }

            this.state = 5871;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 5:
            localctx = new PasswordFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 5873;
            this.passwordFunctionClause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SpecificFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_specificFunction;
    return this;
}

SpecificFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecificFunctionContext.prototype.constructor = SpecificFunctionContext;


 
SpecificFunctionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PositionFunctionCallContext(parser, ctx) {
	SpecificFunctionContext.call(this, parser);
    this.positionString = null; // StringLiteralContext;
    this.positionExpression = null; // ExpressionContext;
    this.inString = null; // StringLiteralContext;
    this.inExpression = null; // ExpressionContext;
    SpecificFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PositionFunctionCallContext.prototype = Object.create(SpecificFunctionContext.prototype);
PositionFunctionCallContext.prototype.constructor = PositionFunctionCallContext;

MySQLParser.PositionFunctionCallContext = PositionFunctionCallContext;

PositionFunctionCallContext.prototype.POSITION = function() {
    return this.getToken(MySQLParser.POSITION, 0);
};

PositionFunctionCallContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

PositionFunctionCallContext.prototype.IN = function() {
    return this.getToken(MySQLParser.IN, 0);
};

PositionFunctionCallContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

PositionFunctionCallContext.prototype.stringLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringLiteralContext);
    } else {
        return this.getTypedRuleContext(StringLiteralContext,i);
    }
};

PositionFunctionCallContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
PositionFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPositionFunctionCall(this);
	}
};

PositionFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPositionFunctionCall(this);
	}
};

PositionFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPositionFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TrimFunctionCallContext(parser, ctx) {
	SpecificFunctionContext.call(this, parser);
    this.positioinForm = null; // Token;
    this.sourceString = null; // StringLiteralContext;
    this.sourceExpression = null; // ExpressionContext;
    this.fromString = null; // StringLiteralContext;
    this.fromExpression = null; // ExpressionContext;
    SpecificFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TrimFunctionCallContext.prototype = Object.create(SpecificFunctionContext.prototype);
TrimFunctionCallContext.prototype.constructor = TrimFunctionCallContext;

MySQLParser.TrimFunctionCallContext = TrimFunctionCallContext;

TrimFunctionCallContext.prototype.TRIM = function() {
    return this.getToken(MySQLParser.TRIM, 0);
};

TrimFunctionCallContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

TrimFunctionCallContext.prototype.FROM = function() {
    return this.getToken(MySQLParser.FROM, 0);
};

TrimFunctionCallContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

TrimFunctionCallContext.prototype.BOTH = function() {
    return this.getToken(MySQLParser.BOTH, 0);
};

TrimFunctionCallContext.prototype.LEADING = function() {
    return this.getToken(MySQLParser.LEADING, 0);
};

TrimFunctionCallContext.prototype.TRAILING = function() {
    return this.getToken(MySQLParser.TRAILING, 0);
};

TrimFunctionCallContext.prototype.stringLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringLiteralContext);
    } else {
        return this.getTypedRuleContext(StringLiteralContext,i);
    }
};

TrimFunctionCallContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
TrimFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTrimFunctionCall(this);
	}
};

TrimFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTrimFunctionCall(this);
	}
};

TrimFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTrimFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleFunctionCallContext(parser, ctx) {
	SpecificFunctionContext.call(this, parser);
    SpecificFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleFunctionCallContext.prototype = Object.create(SpecificFunctionContext.prototype);
SimpleFunctionCallContext.prototype.constructor = SimpleFunctionCallContext;

MySQLParser.SimpleFunctionCallContext = SimpleFunctionCallContext;

SimpleFunctionCallContext.prototype.CURRENT_DATE = function() {
    return this.getToken(MySQLParser.CURRENT_DATE, 0);
};

SimpleFunctionCallContext.prototype.CURRENT_TIME = function() {
    return this.getToken(MySQLParser.CURRENT_TIME, 0);
};

SimpleFunctionCallContext.prototype.CURRENT_TIMESTAMP = function() {
    return this.getToken(MySQLParser.CURRENT_TIMESTAMP, 0);
};

SimpleFunctionCallContext.prototype.CURRENT_USER = function() {
    return this.getToken(MySQLParser.CURRENT_USER, 0);
};

SimpleFunctionCallContext.prototype.LOCALTIME = function() {
    return this.getToken(MySQLParser.LOCALTIME, 0);
};
SimpleFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSimpleFunctionCall(this);
	}
};

SimpleFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSimpleFunctionCall(this);
	}
};

SimpleFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSimpleFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CharFunctionCallContext(parser, ctx) {
	SpecificFunctionContext.call(this, parser);
    SpecificFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CharFunctionCallContext.prototype = Object.create(SpecificFunctionContext.prototype);
CharFunctionCallContext.prototype.constructor = CharFunctionCallContext;

MySQLParser.CharFunctionCallContext = CharFunctionCallContext;

CharFunctionCallContext.prototype.CHAR = function() {
    return this.getToken(MySQLParser.CHAR, 0);
};

CharFunctionCallContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

CharFunctionCallContext.prototype.functionArgs = function() {
    return this.getTypedRuleContext(FunctionArgsContext,0);
};

CharFunctionCallContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

CharFunctionCallContext.prototype.USING = function() {
    return this.getToken(MySQLParser.USING, 0);
};

CharFunctionCallContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};
CharFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCharFunctionCall(this);
	}
};

CharFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCharFunctionCall(this);
	}
};

CharFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCharFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function WeightFunctionCallContext(parser, ctx) {
	SpecificFunctionContext.call(this, parser);
    this.stringFormat = null; // Token;
    SpecificFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WeightFunctionCallContext.prototype = Object.create(SpecificFunctionContext.prototype);
WeightFunctionCallContext.prototype.constructor = WeightFunctionCallContext;

MySQLParser.WeightFunctionCallContext = WeightFunctionCallContext;

WeightFunctionCallContext.prototype.WEIGHT_STRING = function() {
    return this.getToken(MySQLParser.WEIGHT_STRING, 0);
};

WeightFunctionCallContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.LR_BRACKET);
    } else {
        return this.getToken(MySQLParser.LR_BRACKET, i);
    }
};


WeightFunctionCallContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.RR_BRACKET);
    } else {
        return this.getToken(MySQLParser.RR_BRACKET, i);
    }
};


WeightFunctionCallContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

WeightFunctionCallContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WeightFunctionCallContext.prototype.AS = function() {
    return this.getToken(MySQLParser.AS, 0);
};

WeightFunctionCallContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

WeightFunctionCallContext.prototype.levelsInWeightString = function() {
    return this.getTypedRuleContext(LevelsInWeightStringContext,0);
};

WeightFunctionCallContext.prototype.CHAR = function() {
    return this.getToken(MySQLParser.CHAR, 0);
};

WeightFunctionCallContext.prototype.BINARY = function() {
    return this.getToken(MySQLParser.BINARY, 0);
};
WeightFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterWeightFunctionCall(this);
	}
};

WeightFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitWeightFunctionCall(this);
	}
};

WeightFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitWeightFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function GetFormatFunctionCallContext(parser, ctx) {
	SpecificFunctionContext.call(this, parser);
    this.datetimeFormat = null; // Token;
    SpecificFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GetFormatFunctionCallContext.prototype = Object.create(SpecificFunctionContext.prototype);
GetFormatFunctionCallContext.prototype.constructor = GetFormatFunctionCallContext;

MySQLParser.GetFormatFunctionCallContext = GetFormatFunctionCallContext;

GetFormatFunctionCallContext.prototype.GET_FORMAT = function() {
    return this.getToken(MySQLParser.GET_FORMAT, 0);
};

GetFormatFunctionCallContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

GetFormatFunctionCallContext.prototype.COMMA = function() {
    return this.getToken(MySQLParser.COMMA, 0);
};

GetFormatFunctionCallContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

GetFormatFunctionCallContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

GetFormatFunctionCallContext.prototype.DATE = function() {
    return this.getToken(MySQLParser.DATE, 0);
};

GetFormatFunctionCallContext.prototype.TIME = function() {
    return this.getToken(MySQLParser.TIME, 0);
};

GetFormatFunctionCallContext.prototype.DATETIME = function() {
    return this.getToken(MySQLParser.DATETIME, 0);
};
GetFormatFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterGetFormatFunctionCall(this);
	}
};

GetFormatFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitGetFormatFunctionCall(this);
	}
};

GetFormatFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitGetFormatFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CaseFunctionCallContext(parser, ctx) {
	SpecificFunctionContext.call(this, parser);
    this.elseArg = null; // FunctionArgContext;
    SpecificFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CaseFunctionCallContext.prototype = Object.create(SpecificFunctionContext.prototype);
CaseFunctionCallContext.prototype.constructor = CaseFunctionCallContext;

MySQLParser.CaseFunctionCallContext = CaseFunctionCallContext;

CaseFunctionCallContext.prototype.CASE = function() {
    return this.getToken(MySQLParser.CASE, 0);
};

CaseFunctionCallContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CaseFunctionCallContext.prototype.END = function() {
    return this.getToken(MySQLParser.END, 0);
};

CaseFunctionCallContext.prototype.caseFuncAlternative = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseFuncAlternativeContext);
    } else {
        return this.getTypedRuleContext(CaseFuncAlternativeContext,i);
    }
};

CaseFunctionCallContext.prototype.ELSE = function() {
    return this.getToken(MySQLParser.ELSE, 0);
};

CaseFunctionCallContext.prototype.functionArg = function() {
    return this.getTypedRuleContext(FunctionArgContext,0);
};
CaseFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCaseFunctionCall(this);
	}
};

CaseFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCaseFunctionCall(this);
	}
};

CaseFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCaseFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExtractFunctionCallContext(parser, ctx) {
	SpecificFunctionContext.call(this, parser);
    this.sourceString = null; // StringLiteralContext;
    this.sourceExpression = null; // ExpressionContext;
    SpecificFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExtractFunctionCallContext.prototype = Object.create(SpecificFunctionContext.prototype);
ExtractFunctionCallContext.prototype.constructor = ExtractFunctionCallContext;

MySQLParser.ExtractFunctionCallContext = ExtractFunctionCallContext;

ExtractFunctionCallContext.prototype.EXTRACT = function() {
    return this.getToken(MySQLParser.EXTRACT, 0);
};

ExtractFunctionCallContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

ExtractFunctionCallContext.prototype.intervalType = function() {
    return this.getTypedRuleContext(IntervalTypeContext,0);
};

ExtractFunctionCallContext.prototype.FROM = function() {
    return this.getToken(MySQLParser.FROM, 0);
};

ExtractFunctionCallContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

ExtractFunctionCallContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

ExtractFunctionCallContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ExtractFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExtractFunctionCall(this);
	}
};

ExtractFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExtractFunctionCall(this);
	}
};

ExtractFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExtractFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DataTypeFunctionCallContext(parser, ctx) {
	SpecificFunctionContext.call(this, parser);
    this.separator = null; // Token;
    SpecificFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DataTypeFunctionCallContext.prototype = Object.create(SpecificFunctionContext.prototype);
DataTypeFunctionCallContext.prototype.constructor = DataTypeFunctionCallContext;

MySQLParser.DataTypeFunctionCallContext = DataTypeFunctionCallContext;

DataTypeFunctionCallContext.prototype.CONVERT = function() {
    return this.getToken(MySQLParser.CONVERT, 0);
};

DataTypeFunctionCallContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

DataTypeFunctionCallContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DataTypeFunctionCallContext.prototype.convertedDataType = function() {
    return this.getTypedRuleContext(ConvertedDataTypeContext,0);
};

DataTypeFunctionCallContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

DataTypeFunctionCallContext.prototype.COMMA = function() {
    return this.getToken(MySQLParser.COMMA, 0);
};

DataTypeFunctionCallContext.prototype.USING = function() {
    return this.getToken(MySQLParser.USING, 0);
};

DataTypeFunctionCallContext.prototype.charsetName = function() {
    return this.getTypedRuleContext(CharsetNameContext,0);
};

DataTypeFunctionCallContext.prototype.CAST = function() {
    return this.getToken(MySQLParser.CAST, 0);
};

DataTypeFunctionCallContext.prototype.AS = function() {
    return this.getToken(MySQLParser.AS, 0);
};
DataTypeFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDataTypeFunctionCall(this);
	}
};

DataTypeFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDataTypeFunctionCall(this);
	}
};

DataTypeFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDataTypeFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ValuesFunctionCallContext(parser, ctx) {
	SpecificFunctionContext.call(this, parser);
    SpecificFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValuesFunctionCallContext.prototype = Object.create(SpecificFunctionContext.prototype);
ValuesFunctionCallContext.prototype.constructor = ValuesFunctionCallContext;

MySQLParser.ValuesFunctionCallContext = ValuesFunctionCallContext;

ValuesFunctionCallContext.prototype.VALUES = function() {
    return this.getToken(MySQLParser.VALUES, 0);
};

ValuesFunctionCallContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

ValuesFunctionCallContext.prototype.fullColumnName = function() {
    return this.getTypedRuleContext(FullColumnNameContext,0);
};

ValuesFunctionCallContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};
ValuesFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterValuesFunctionCall(this);
	}
};

ValuesFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitValuesFunctionCall(this);
	}
};

ValuesFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitValuesFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SubstrFunctionCallContext(parser, ctx) {
	SpecificFunctionContext.call(this, parser);
    this.sourceString = null; // StringLiteralContext;
    this.sourceExpression = null; // ExpressionContext;
    this.fromDecimal = null; // DecimalLiteralContext;
    this.fromExpression = null; // ExpressionContext;
    this.forDecimal = null; // DecimalLiteralContext;
    this.forExpression = null; // ExpressionContext;
    SpecificFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubstrFunctionCallContext.prototype = Object.create(SpecificFunctionContext.prototype);
SubstrFunctionCallContext.prototype.constructor = SubstrFunctionCallContext;

MySQLParser.SubstrFunctionCallContext = SubstrFunctionCallContext;

SubstrFunctionCallContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

SubstrFunctionCallContext.prototype.FROM = function() {
    return this.getToken(MySQLParser.FROM, 0);
};

SubstrFunctionCallContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

SubstrFunctionCallContext.prototype.SUBSTR = function() {
    return this.getToken(MySQLParser.SUBSTR, 0);
};

SubstrFunctionCallContext.prototype.SUBSTRING = function() {
    return this.getToken(MySQLParser.SUBSTRING, 0);
};

SubstrFunctionCallContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

SubstrFunctionCallContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SubstrFunctionCallContext.prototype.decimalLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DecimalLiteralContext);
    } else {
        return this.getTypedRuleContext(DecimalLiteralContext,i);
    }
};

SubstrFunctionCallContext.prototype.FOR = function() {
    return this.getToken(MySQLParser.FOR, 0);
};
SubstrFunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSubstrFunctionCall(this);
	}
};

SubstrFunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSubstrFunctionCall(this);
	}
};

SubstrFunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSubstrFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.SpecificFunctionContext = SpecificFunctionContext;

MySQLParser.prototype.specificFunction = function() {

    var localctx = new SpecificFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 582, MySQLParser.RULE_specificFunction);
    var _la = 0; // Token type
    try {
        this.state = 6033;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,890,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SimpleFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 5876;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.CURRENT_USER || ((((_la - 251)) & ~0x1f) == 0 && ((1 << (_la - 251)) & ((1 << (MySQLParser.CURRENT_DATE - 251)) | (1 << (MySQLParser.CURRENT_TIME - 251)) | (1 << (MySQLParser.CURRENT_TIMESTAMP - 251)) | (1 << (MySQLParser.LOCALTIME - 251)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 2:
            localctx = new DataTypeFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 5877;
            this.match(MySQLParser.CONVERT);
            this.state = 5878;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5879;
            this.expression(0);
            this.state = 5880;
            localctx.separator = this.match(MySQLParser.COMMA);
            this.state = 5881;
            this.convertedDataType();
            this.state = 5882;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 3:
            localctx = new DataTypeFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 5884;
            this.match(MySQLParser.CONVERT);
            this.state = 5885;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5886;
            this.expression(0);
            this.state = 5887;
            this.match(MySQLParser.USING);
            this.state = 5888;
            this.charsetName();
            this.state = 5889;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 4:
            localctx = new DataTypeFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 5891;
            this.match(MySQLParser.CAST);
            this.state = 5892;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5893;
            this.expression(0);
            this.state = 5894;
            this.match(MySQLParser.AS);
            this.state = 5895;
            this.convertedDataType();
            this.state = 5896;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 5:
            localctx = new ValuesFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 5898;
            this.match(MySQLParser.VALUES);
            this.state = 5899;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5900;
            this.fullColumnName();
            this.state = 5901;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 6:
            localctx = new CaseFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 5903;
            this.match(MySQLParser.CASE);
            this.state = 5904;
            this.expression(0);
            this.state = 5906; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 5905;
                this.caseFuncAlternative();
                this.state = 5908; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===MySQLParser.WHEN);
            this.state = 5912;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ELSE) {
                this.state = 5910;
                this.match(MySQLParser.ELSE);
                this.state = 5911;
                localctx.elseArg = this.functionArg();
            }

            this.state = 5914;
            this.match(MySQLParser.END);
            break;

        case 7:
            localctx = new CaseFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 5916;
            this.match(MySQLParser.CASE);
            this.state = 5918; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 5917;
                this.caseFuncAlternative();
                this.state = 5920; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===MySQLParser.WHEN);
            this.state = 5924;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ELSE) {
                this.state = 5922;
                this.match(MySQLParser.ELSE);
                this.state = 5923;
                localctx.elseArg = this.functionArg();
            }

            this.state = 5926;
            this.match(MySQLParser.END);
            break;

        case 8:
            localctx = new CharFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 5928;
            this.match(MySQLParser.CHAR);
            this.state = 5929;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5930;
            this.functionArgs();
            this.state = 5933;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.USING) {
                this.state = 5931;
                this.match(MySQLParser.USING);
                this.state = 5932;
                this.charsetName();
            }

            this.state = 5935;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 9:
            localctx = new PositionFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 5937;
            this.match(MySQLParser.POSITION);
            this.state = 5938;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5941;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,876,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5939;
                localctx.positionString = this.stringLiteral();
                break;

            case 2:
                this.state = 5940;
                localctx.positionExpression = this.expression(0);
                break;

            }
            this.state = 5943;
            this.match(MySQLParser.IN);
            this.state = 5946;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,877,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5944;
                localctx.inString = this.stringLiteral();
                break;

            case 2:
                this.state = 5945;
                localctx.inExpression = this.expression(0);
                break;

            }
            this.state = 5948;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 10:
            localctx = new SubstrFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 5950;
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.SUBSTR || _la===MySQLParser.SUBSTRING)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5951;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5954;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,878,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5952;
                localctx.sourceString = this.stringLiteral();
                break;

            case 2:
                this.state = 5953;
                localctx.sourceExpression = this.expression(0);
                break;

            }
            this.state = 5956;
            this.match(MySQLParser.FROM);
            this.state = 5959;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,879,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5957;
                localctx.fromDecimal = this.decimalLiteral();
                break;

            case 2:
                this.state = 5958;
                localctx.fromExpression = this.expression(0);
                break;

            }
            this.state = 5966;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.FOR) {
                this.state = 5961;
                this.match(MySQLParser.FOR);
                this.state = 5964;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,880,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 5962;
                    localctx.forDecimal = this.decimalLiteral();
                    break;

                case 2:
                    this.state = 5963;
                    localctx.forExpression = this.expression(0);
                    break;

                }
            }

            this.state = 5968;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 11:
            localctx = new TrimFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 5970;
            this.match(MySQLParser.TRIM);
            this.state = 5971;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5972;
            localctx.positioinForm = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.BOTH || _la===MySQLParser.LEADING || _la===MySQLParser.TRAILING)) {
                localctx.positioinForm = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5975;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,882,this._ctx);
            if(la_===1) {
                this.state = 5973;
                localctx.sourceString = this.stringLiteral();

            } else if(la_===2) {
                this.state = 5974;
                localctx.sourceExpression = this.expression(0);

            }
            this.state = 5977;
            this.match(MySQLParser.FROM);
            this.state = 5980;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,883,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5978;
                localctx.fromString = this.stringLiteral();
                break;

            case 2:
                this.state = 5979;
                localctx.fromExpression = this.expression(0);
                break;

            }
            this.state = 5982;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 12:
            localctx = new TrimFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 5984;
            this.match(MySQLParser.TRIM);
            this.state = 5985;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 5988;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,884,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5986;
                localctx.sourceString = this.stringLiteral();
                break;

            case 2:
                this.state = 5987;
                localctx.sourceExpression = this.expression(0);
                break;

            }
            this.state = 5990;
            this.match(MySQLParser.FROM);
            this.state = 5993;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,885,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5991;
                localctx.fromString = this.stringLiteral();
                break;

            case 2:
                this.state = 5992;
                localctx.fromExpression = this.expression(0);
                break;

            }
            this.state = 5995;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 13:
            localctx = new WeightFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 5997;
            this.match(MySQLParser.WEIGHT_STRING);
            this.state = 5998;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 6001;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,886,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5999;
                this.stringLiteral();
                break;

            case 2:
                this.state = 6000;
                this.expression(0);
                break;

            }
            this.state = 6009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.AS) {
                this.state = 6003;
                this.match(MySQLParser.AS);
                this.state = 6004;
                localctx.stringFormat = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.CHAR || _la===MySQLParser.BINARY)) {
                    localctx.stringFormat = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6005;
                this.match(MySQLParser.LR_BRACKET);
                this.state = 6006;
                this.decimalLiteral();
                this.state = 6007;
                this.match(MySQLParser.RR_BRACKET);
            }

            this.state = 6012;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.LEVEL) {
                this.state = 6011;
                this.levelsInWeightString();
            }

            this.state = 6014;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 14:
            localctx = new ExtractFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 6016;
            this.match(MySQLParser.EXTRACT);
            this.state = 6017;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 6018;
            this.intervalType();
            this.state = 6019;
            this.match(MySQLParser.FROM);
            this.state = 6022;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,889,this._ctx);
            switch(la_) {
            case 1:
                this.state = 6020;
                localctx.sourceString = this.stringLiteral();
                break;

            case 2:
                this.state = 6021;
                localctx.sourceExpression = this.expression(0);
                break;

            }
            this.state = 6024;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 15:
            localctx = new GetFormatFunctionCallContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 6026;
            this.match(MySQLParser.GET_FORMAT);
            this.state = 6027;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 6028;
            localctx.datetimeFormat = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.DATETIME - 199)))) !== 0))) {
                localctx.datetimeFormat = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6029;
            this.match(MySQLParser.COMMA);
            this.state = 6030;
            this.stringLiteral();
            this.state = 6031;
            this.match(MySQLParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CaseFuncAlternativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_caseFuncAlternative;
    this.condition = null; // FunctionArgContext
    this.consequent = null; // FunctionArgContext
    return this;
}

CaseFuncAlternativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseFuncAlternativeContext.prototype.constructor = CaseFuncAlternativeContext;

CaseFuncAlternativeContext.prototype.WHEN = function() {
    return this.getToken(MySQLParser.WHEN, 0);
};

CaseFuncAlternativeContext.prototype.THEN = function() {
    return this.getToken(MySQLParser.THEN, 0);
};

CaseFuncAlternativeContext.prototype.functionArg = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionArgContext);
    } else {
        return this.getTypedRuleContext(FunctionArgContext,i);
    }
};

CaseFuncAlternativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCaseFuncAlternative(this);
	}
};

CaseFuncAlternativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCaseFuncAlternative(this);
	}
};

CaseFuncAlternativeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCaseFuncAlternative(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CaseFuncAlternativeContext = CaseFuncAlternativeContext;

MySQLParser.prototype.caseFuncAlternative = function() {

    var localctx = new CaseFuncAlternativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 584, MySQLParser.RULE_caseFuncAlternative);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6035;
        this.match(MySQLParser.WHEN);
        this.state = 6036;
        localctx.condition = this.functionArg();
        this.state = 6037;
        this.match(MySQLParser.THEN);
        this.state = 6038;
        localctx.consequent = this.functionArg();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LevelsInWeightStringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_levelsInWeightString;
    return this;
}

LevelsInWeightStringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LevelsInWeightStringContext.prototype.constructor = LevelsInWeightStringContext;


 
LevelsInWeightStringContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LevelWeightRangeContext(parser, ctx) {
	LevelsInWeightStringContext.call(this, parser);
    this.firstLevel = null; // DecimalLiteralContext;
    this.lastLevel = null; // DecimalLiteralContext;
    LevelsInWeightStringContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LevelWeightRangeContext.prototype = Object.create(LevelsInWeightStringContext.prototype);
LevelWeightRangeContext.prototype.constructor = LevelWeightRangeContext;

MySQLParser.LevelWeightRangeContext = LevelWeightRangeContext;

LevelWeightRangeContext.prototype.LEVEL = function() {
    return this.getToken(MySQLParser.LEVEL, 0);
};

LevelWeightRangeContext.prototype.MINUS = function() {
    return this.getToken(MySQLParser.MINUS, 0);
};

LevelWeightRangeContext.prototype.decimalLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DecimalLiteralContext);
    } else {
        return this.getTypedRuleContext(DecimalLiteralContext,i);
    }
};
LevelWeightRangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLevelWeightRange(this);
	}
};

LevelWeightRangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLevelWeightRange(this);
	}
};

LevelWeightRangeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLevelWeightRange(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LevelWeightListContext(parser, ctx) {
	LevelsInWeightStringContext.call(this, parser);
    LevelsInWeightStringContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LevelWeightListContext.prototype = Object.create(LevelsInWeightStringContext.prototype);
LevelWeightListContext.prototype.constructor = LevelWeightListContext;

MySQLParser.LevelWeightListContext = LevelWeightListContext;

LevelWeightListContext.prototype.LEVEL = function() {
    return this.getToken(MySQLParser.LEVEL, 0);
};

LevelWeightListContext.prototype.levelInWeightListElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LevelInWeightListElementContext);
    } else {
        return this.getTypedRuleContext(LevelInWeightListElementContext,i);
    }
};

LevelWeightListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

LevelWeightListContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLevelWeightList(this);
	}
};

LevelWeightListContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLevelWeightList(this);
	}
};

LevelWeightListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLevelWeightList(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.LevelsInWeightStringContext = LevelsInWeightStringContext;

MySQLParser.prototype.levelsInWeightString = function() {

    var localctx = new LevelsInWeightStringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 586, MySQLParser.RULE_levelsInWeightString);
    var _la = 0; // Token type
    try {
        this.state = 6054;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,892,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LevelWeightListContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 6040;
            this.match(MySQLParser.LEVEL);
            this.state = 6041;
            this.levelInWeightListElement();
            this.state = 6046;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 6042;
                this.match(MySQLParser.COMMA);
                this.state = 6043;
                this.levelInWeightListElement();
                this.state = 6048;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            localctx = new LevelWeightRangeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 6049;
            this.match(MySQLParser.LEVEL);
            this.state = 6050;
            localctx.firstLevel = this.decimalLiteral();
            this.state = 6051;
            this.match(MySQLParser.MINUS);
            this.state = 6052;
            localctx.lastLevel = this.decimalLiteral();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LevelInWeightListElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_levelInWeightListElement;
    this.orderType = null; // Token
    return this;
}

LevelInWeightListElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LevelInWeightListElementContext.prototype.constructor = LevelInWeightListElementContext;

LevelInWeightListElementContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

LevelInWeightListElementContext.prototype.ASC = function() {
    return this.getToken(MySQLParser.ASC, 0);
};

LevelInWeightListElementContext.prototype.DESC = function() {
    return this.getToken(MySQLParser.DESC, 0);
};

LevelInWeightListElementContext.prototype.REVERSE = function() {
    return this.getToken(MySQLParser.REVERSE, 0);
};

LevelInWeightListElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLevelInWeightListElement(this);
	}
};

LevelInWeightListElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLevelInWeightListElement(this);
	}
};

LevelInWeightListElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLevelInWeightListElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LevelInWeightListElementContext = LevelInWeightListElementContext;

MySQLParser.prototype.levelInWeightListElement = function() {

    var localctx = new LevelInWeightListElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 588, MySQLParser.RULE_levelInWeightListElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6056;
        this.decimalLiteral();
        this.state = 6058;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MySQLParser.ASC || _la===MySQLParser.DESC || _la===MySQLParser.REVERSE) {
            this.state = 6057;
            localctx.orderType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.ASC || _la===MySQLParser.DESC || _la===MySQLParser.REVERSE)) {
                localctx.orderType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AggregateWindowedFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_aggregateWindowedFunction;
    this.aggregator = null; // Token
    this.starArg = null; // Token
    this.separator = null; // Token
    return this;
}

AggregateWindowedFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregateWindowedFunctionContext.prototype.constructor = AggregateWindowedFunctionContext;

AggregateWindowedFunctionContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

AggregateWindowedFunctionContext.prototype.functionArg = function() {
    return this.getTypedRuleContext(FunctionArgContext,0);
};

AggregateWindowedFunctionContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

AggregateWindowedFunctionContext.prototype.AVG = function() {
    return this.getToken(MySQLParser.AVG, 0);
};

AggregateWindowedFunctionContext.prototype.MAX = function() {
    return this.getToken(MySQLParser.MAX, 0);
};

AggregateWindowedFunctionContext.prototype.MIN = function() {
    return this.getToken(MySQLParser.MIN, 0);
};

AggregateWindowedFunctionContext.prototype.SUM = function() {
    return this.getToken(MySQLParser.SUM, 0);
};

AggregateWindowedFunctionContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};

AggregateWindowedFunctionContext.prototype.DISTINCT = function() {
    return this.getToken(MySQLParser.DISTINCT, 0);
};

AggregateWindowedFunctionContext.prototype.COUNT = function() {
    return this.getToken(MySQLParser.COUNT, 0);
};

AggregateWindowedFunctionContext.prototype.STAR = function() {
    return this.getToken(MySQLParser.STAR, 0);
};

AggregateWindowedFunctionContext.prototype.functionArgs = function() {
    return this.getTypedRuleContext(FunctionArgsContext,0);
};

AggregateWindowedFunctionContext.prototype.BIT_AND = function() {
    return this.getToken(MySQLParser.BIT_AND, 0);
};

AggregateWindowedFunctionContext.prototype.BIT_OR = function() {
    return this.getToken(MySQLParser.BIT_OR, 0);
};

AggregateWindowedFunctionContext.prototype.BIT_XOR = function() {
    return this.getToken(MySQLParser.BIT_XOR, 0);
};

AggregateWindowedFunctionContext.prototype.STD = function() {
    return this.getToken(MySQLParser.STD, 0);
};

AggregateWindowedFunctionContext.prototype.STDDEV = function() {
    return this.getToken(MySQLParser.STDDEV, 0);
};

AggregateWindowedFunctionContext.prototype.STDDEV_POP = function() {
    return this.getToken(MySQLParser.STDDEV_POP, 0);
};

AggregateWindowedFunctionContext.prototype.STDDEV_SAMP = function() {
    return this.getToken(MySQLParser.STDDEV_SAMP, 0);
};

AggregateWindowedFunctionContext.prototype.VAR_POP = function() {
    return this.getToken(MySQLParser.VAR_POP, 0);
};

AggregateWindowedFunctionContext.prototype.VAR_SAMP = function() {
    return this.getToken(MySQLParser.VAR_SAMP, 0);
};

AggregateWindowedFunctionContext.prototype.VARIANCE = function() {
    return this.getToken(MySQLParser.VARIANCE, 0);
};

AggregateWindowedFunctionContext.prototype.GROUP_CONCAT = function() {
    return this.getToken(MySQLParser.GROUP_CONCAT, 0);
};

AggregateWindowedFunctionContext.prototype.ORDER = function() {
    return this.getToken(MySQLParser.ORDER, 0);
};

AggregateWindowedFunctionContext.prototype.BY = function() {
    return this.getToken(MySQLParser.BY, 0);
};

AggregateWindowedFunctionContext.prototype.orderByExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderByExpressionContext);
    } else {
        return this.getTypedRuleContext(OrderByExpressionContext,i);
    }
};

AggregateWindowedFunctionContext.prototype.SEPARATOR = function() {
    return this.getToken(MySQLParser.SEPARATOR, 0);
};

AggregateWindowedFunctionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};

AggregateWindowedFunctionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


AggregateWindowedFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterAggregateWindowedFunction(this);
	}
};

AggregateWindowedFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitAggregateWindowedFunction(this);
	}
};

AggregateWindowedFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitAggregateWindowedFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.AggregateWindowedFunctionContext = AggregateWindowedFunctionContext;

MySQLParser.prototype.aggregateWindowedFunction = function() {

    var localctx = new AggregateWindowedFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 590, MySQLParser.RULE_aggregateWindowedFunction);
    var _la = 0; // Token type
    try {
        this.state = 6116;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,902,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6060;
            _la = this._input.LA(1);
            if(!(((((_la - 235)) & ~0x1f) == 0 && ((1 << (_la - 235)) & ((1 << (MySQLParser.AVG - 235)) | (1 << (MySQLParser.MAX - 235)) | (1 << (MySQLParser.MIN - 235)) | (1 << (MySQLParser.SUM - 235)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6061;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 6063;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ALL || _la===MySQLParser.DISTINCT) {
                this.state = 6062;
                localctx.aggregator = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===MySQLParser.ALL || _la===MySQLParser.DISTINCT)) {
                    localctx.aggregator = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 6065;
            this.functionArg();
            this.state = 6066;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6068;
            this.match(MySQLParser.COUNT);
            this.state = 6069;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 6075;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MySQLParser.STAR:
                this.state = 6070;
                localctx.starArg = this.match(MySQLParser.STAR);
                break;
            case MySQLParser.ALL:
            case MySQLParser.CASE:
            case MySQLParser.CAST:
            case MySQLParser.CONVERT:
            case MySQLParser.CURRENT:
            case MySQLParser.CURRENT_USER:
            case MySQLParser.DATABASE:
            case MySQLParser.DIAGNOSTICS:
            case MySQLParser.EXISTS:
            case MySQLParser.FALSE:
            case MySQLParser.IF:
            case MySQLParser.INSERT:
            case MySQLParser.INTERVAL:
            case MySQLParser.LEFT:
            case MySQLParser.NOT:
            case MySQLParser.NULL_LITERAL:
            case MySQLParser.NUMBER:
            case MySQLParser.REPLACE:
            case MySQLParser.RIGHT:
            case MySQLParser.STACKED:
            case MySQLParser.TRUE:
            case MySQLParser.VALUES:
            case MySQLParser.DATE:
            case MySQLParser.TIME:
            case MySQLParser.TIMESTAMP:
            case MySQLParser.DATETIME:
            case MySQLParser.YEAR:
            case MySQLParser.CHAR:
            case MySQLParser.BINARY:
            case MySQLParser.TEXT:
            case MySQLParser.ENUM:
            case MySQLParser.SERIAL:
            case MySQLParser.JSON_VALID:
            case MySQLParser.JSON_SCHEMA_VALID:
            case MySQLParser.AVG:
            case MySQLParser.BIT_AND:
            case MySQLParser.BIT_OR:
            case MySQLParser.BIT_XOR:
            case MySQLParser.COUNT:
            case MySQLParser.GROUP_CONCAT:
            case MySQLParser.MAX:
            case MySQLParser.MIN:
            case MySQLParser.STD:
            case MySQLParser.STDDEV:
            case MySQLParser.STDDEV_POP:
            case MySQLParser.STDDEV_SAMP:
            case MySQLParser.SUM:
            case MySQLParser.VAR_POP:
            case MySQLParser.VAR_SAMP:
            case MySQLParser.VARIANCE:
            case MySQLParser.CURRENT_DATE:
            case MySQLParser.CURRENT_TIME:
            case MySQLParser.CURRENT_TIMESTAMP:
            case MySQLParser.LOCALTIME:
            case MySQLParser.CURDATE:
            case MySQLParser.CURTIME:
            case MySQLParser.DATE_ADD:
            case MySQLParser.DATE_SUB:
            case MySQLParser.EXTRACT:
            case MySQLParser.LOCALTIMESTAMP:
            case MySQLParser.NOW:
            case MySQLParser.POSITION:
            case MySQLParser.SUBSTR:
            case MySQLParser.SUBSTRING:
            case MySQLParser.SYSDATE:
            case MySQLParser.TRIM:
            case MySQLParser.UTC_DATE:
            case MySQLParser.UTC_TIME:
            case MySQLParser.UTC_TIMESTAMP:
            case MySQLParser.ACCOUNT:
            case MySQLParser.ACTION:
            case MySQLParser.AFTER:
            case MySQLParser.AGGREGATE:
            case MySQLParser.ALGORITHM:
            case MySQLParser.ANY:
            case MySQLParser.AT:
            case MySQLParser.AUTHORS:
            case MySQLParser.AUTOCOMMIT:
            case MySQLParser.AUTOEXTEND_SIZE:
            case MySQLParser.AUTO_INCREMENT:
            case MySQLParser.AVG_ROW_LENGTH:
            case MySQLParser.BEGIN:
            case MySQLParser.BINLOG:
            case MySQLParser.BIT:
            case MySQLParser.BLOCK:
            case MySQLParser.BOOL:
            case MySQLParser.BOOLEAN:
            case MySQLParser.BTREE:
            case MySQLParser.CACHE:
            case MySQLParser.CASCADED:
            case MySQLParser.CHAIN:
            case MySQLParser.CHANGED:
            case MySQLParser.CHANNEL:
            case MySQLParser.CHECKSUM:
            case MySQLParser.PAGE_CHECKSUM:
            case MySQLParser.CIPHER:
            case MySQLParser.CLASS_ORIGIN:
            case MySQLParser.CLIENT:
            case MySQLParser.CLOSE:
            case MySQLParser.COALESCE:
            case MySQLParser.CODE:
            case MySQLParser.COLUMNS:
            case MySQLParser.COLUMN_FORMAT:
            case MySQLParser.COLUMN_NAME:
            case MySQLParser.COMMENT:
            case MySQLParser.COMMIT:
            case MySQLParser.COMPACT:
            case MySQLParser.COMPLETION:
            case MySQLParser.COMPRESSED:
            case MySQLParser.COMPRESSION:
            case MySQLParser.CONCURRENT:
            case MySQLParser.CONNECTION:
            case MySQLParser.CONSISTENT:
            case MySQLParser.CONSTRAINT_CATALOG:
            case MySQLParser.CONSTRAINT_SCHEMA:
            case MySQLParser.CONSTRAINT_NAME:
            case MySQLParser.CONTAINS:
            case MySQLParser.CONTEXT:
            case MySQLParser.CONTRIBUTORS:
            case MySQLParser.COPY:
            case MySQLParser.CPU:
            case MySQLParser.CURSOR_NAME:
            case MySQLParser.DATA:
            case MySQLParser.DATAFILE:
            case MySQLParser.DEALLOCATE:
            case MySQLParser.DEFAULT_AUTH:
            case MySQLParser.DEFINER:
            case MySQLParser.DELAY_KEY_WRITE:
            case MySQLParser.DES_KEY_FILE:
            case MySQLParser.DIRECTORY:
            case MySQLParser.DISABLE:
            case MySQLParser.DISCARD:
            case MySQLParser.DISK:
            case MySQLParser.DO:
            case MySQLParser.DUMPFILE:
            case MySQLParser.DUPLICATE:
            case MySQLParser.DYNAMIC:
            case MySQLParser.ENABLE:
            case MySQLParser.ENCRYPTION:
            case MySQLParser.END:
            case MySQLParser.ENDS:
            case MySQLParser.ENGINE:
            case MySQLParser.ENGINES:
            case MySQLParser.ERROR:
            case MySQLParser.ERRORS:
            case MySQLParser.ESCAPE:
            case MySQLParser.EVEN:
            case MySQLParser.EVENT:
            case MySQLParser.EVENTS:
            case MySQLParser.EVERY:
            case MySQLParser.EXCHANGE:
            case MySQLParser.EXCLUSIVE:
            case MySQLParser.EXPIRE:
            case MySQLParser.EXPORT:
            case MySQLParser.EXTENDED:
            case MySQLParser.EXTENT_SIZE:
            case MySQLParser.FAST:
            case MySQLParser.FAULTS:
            case MySQLParser.FIELDS:
            case MySQLParser.FILE_BLOCK_SIZE:
            case MySQLParser.FILTER:
            case MySQLParser.FIRST:
            case MySQLParser.FIXED:
            case MySQLParser.FLUSH:
            case MySQLParser.FOLLOWS:
            case MySQLParser.FOUND:
            case MySQLParser.FULL:
            case MySQLParser.FUNCTION:
            case MySQLParser.GENERAL:
            case MySQLParser.GLOBAL:
            case MySQLParser.GRANTS:
            case MySQLParser.GROUP_REPLICATION:
            case MySQLParser.HANDLER:
            case MySQLParser.HASH:
            case MySQLParser.HELP:
            case MySQLParser.HOST:
            case MySQLParser.HOSTS:
            case MySQLParser.IDENTIFIED:
            case MySQLParser.IGNORE_SERVER_IDS:
            case MySQLParser.IMPORT:
            case MySQLParser.INDEXES:
            case MySQLParser.INITIAL_SIZE:
            case MySQLParser.INPLACE:
            case MySQLParser.INSERT_METHOD:
            case MySQLParser.INSTALL:
            case MySQLParser.INSTANCE:
            case MySQLParser.INVISIBLE:
            case MySQLParser.INVOKER:
            case MySQLParser.IO:
            case MySQLParser.IO_THREAD:
            case MySQLParser.IPC:
            case MySQLParser.ISOLATION:
            case MySQLParser.ISSUER:
            case MySQLParser.JSON:
            case MySQLParser.KEY_BLOCK_SIZE:
            case MySQLParser.LANGUAGE:
            case MySQLParser.LAST:
            case MySQLParser.LEAVES:
            case MySQLParser.LESS:
            case MySQLParser.LEVEL:
            case MySQLParser.LIST:
            case MySQLParser.LOCAL:
            case MySQLParser.LOGFILE:
            case MySQLParser.LOGS:
            case MySQLParser.MASTER:
            case MySQLParser.MASTER_AUTO_POSITION:
            case MySQLParser.MASTER_CONNECT_RETRY:
            case MySQLParser.MASTER_DELAY:
            case MySQLParser.MASTER_HEARTBEAT_PERIOD:
            case MySQLParser.MASTER_HOST:
            case MySQLParser.MASTER_LOG_FILE:
            case MySQLParser.MASTER_LOG_POS:
            case MySQLParser.MASTER_PASSWORD:
            case MySQLParser.MASTER_PORT:
            case MySQLParser.MASTER_RETRY_COUNT:
            case MySQLParser.MASTER_SSL:
            case MySQLParser.MASTER_SSL_CA:
            case MySQLParser.MASTER_SSL_CAPATH:
            case MySQLParser.MASTER_SSL_CERT:
            case MySQLParser.MASTER_SSL_CIPHER:
            case MySQLParser.MASTER_SSL_CRL:
            case MySQLParser.MASTER_SSL_CRLPATH:
            case MySQLParser.MASTER_SSL_KEY:
            case MySQLParser.MASTER_TLS_VERSION:
            case MySQLParser.MASTER_USER:
            case MySQLParser.MAX_CONNECTIONS_PER_HOUR:
            case MySQLParser.MAX_QUERIES_PER_HOUR:
            case MySQLParser.MAX_ROWS:
            case MySQLParser.MAX_SIZE:
            case MySQLParser.MAX_UPDATES_PER_HOUR:
            case MySQLParser.MAX_USER_CONNECTIONS:
            case MySQLParser.MEDIUM:
            case MySQLParser.MERGE:
            case MySQLParser.MESSAGE_TEXT:
            case MySQLParser.MID:
            case MySQLParser.MIGRATE:
            case MySQLParser.MIN_ROWS:
            case MySQLParser.MODE:
            case MySQLParser.MODIFY:
            case MySQLParser.MUTEX:
            case MySQLParser.MYSQL:
            case MySQLParser.MYSQL_ERRNO:
            case MySQLParser.NAME:
            case MySQLParser.NAMES:
            case MySQLParser.NCHAR:
            case MySQLParser.NEVER:
            case MySQLParser.NEXT:
            case MySQLParser.NO:
            case MySQLParser.NODEGROUP:
            case MySQLParser.NONE:
            case MySQLParser.OFFLINE:
            case MySQLParser.OFFSET:
            case MySQLParser.OJ:
            case MySQLParser.OLD_PASSWORD:
            case MySQLParser.ONE:
            case MySQLParser.ONLINE:
            case MySQLParser.ONLY:
            case MySQLParser.OPEN:
            case MySQLParser.OPTIMIZER_COSTS:
            case MySQLParser.OPTIONS:
            case MySQLParser.OWNER:
            case MySQLParser.PACK_KEYS:
            case MySQLParser.PAGE:
            case MySQLParser.PARSER:
            case MySQLParser.PARTIAL:
            case MySQLParser.PARTITIONING:
            case MySQLParser.PARTITIONS:
            case MySQLParser.PASSWORD:
            case MySQLParser.PHASE:
            case MySQLParser.PLUGIN:
            case MySQLParser.PLUGIN_DIR:
            case MySQLParser.PLUGINS:
            case MySQLParser.PORT:
            case MySQLParser.PRECEDES:
            case MySQLParser.PREPARE:
            case MySQLParser.PRESERVE:
            case MySQLParser.PREV:
            case MySQLParser.PROCESSLIST:
            case MySQLParser.PROFILE:
            case MySQLParser.PROFILES:
            case MySQLParser.PROXY:
            case MySQLParser.QUERY:
            case MySQLParser.QUICK:
            case MySQLParser.REBUILD:
            case MySQLParser.RECOVER:
            case MySQLParser.REDO_BUFFER_SIZE:
            case MySQLParser.REDUNDANT:
            case MySQLParser.RELAY:
            case MySQLParser.RELAY_LOG_FILE:
            case MySQLParser.RELAY_LOG_POS:
            case MySQLParser.RELAYLOG:
            case MySQLParser.REMOVE:
            case MySQLParser.REORGANIZE:
            case MySQLParser.REPAIR:
            case MySQLParser.REPLICATE_DO_DB:
            case MySQLParser.REPLICATE_DO_TABLE:
            case MySQLParser.REPLICATE_IGNORE_DB:
            case MySQLParser.REPLICATE_IGNORE_TABLE:
            case MySQLParser.REPLICATE_REWRITE_DB:
            case MySQLParser.REPLICATE_WILD_DO_TABLE:
            case MySQLParser.REPLICATE_WILD_IGNORE_TABLE:
            case MySQLParser.REPLICATION:
            case MySQLParser.RESET:
            case MySQLParser.RESUME:
            case MySQLParser.RETURNED_SQLSTATE:
            case MySQLParser.RETURNS:
            case MySQLParser.ROLE:
            case MySQLParser.ROLLBACK:
            case MySQLParser.ROLLUP:
            case MySQLParser.ROTATE:
            case MySQLParser.ROW:
            case MySQLParser.ROWS:
            case MySQLParser.ROW_FORMAT:
            case MySQLParser.SAVEPOINT:
            case MySQLParser.SCHEDULE:
            case MySQLParser.SECURITY:
            case MySQLParser.SERVER:
            case MySQLParser.SESSION:
            case MySQLParser.SHARE:
            case MySQLParser.SHARED:
            case MySQLParser.SIGNED:
            case MySQLParser.SIMPLE:
            case MySQLParser.SLAVE:
            case MySQLParser.SLOW:
            case MySQLParser.SNAPSHOT:
            case MySQLParser.SOCKET:
            case MySQLParser.SOME:
            case MySQLParser.SONAME:
            case MySQLParser.SOUNDS:
            case MySQLParser.SOURCE:
            case MySQLParser.SQL_AFTER_GTIDS:
            case MySQLParser.SQL_AFTER_MTS_GAPS:
            case MySQLParser.SQL_BEFORE_GTIDS:
            case MySQLParser.SQL_BUFFER_RESULT:
            case MySQLParser.SQL_CACHE:
            case MySQLParser.SQL_NO_CACHE:
            case MySQLParser.SQL_THREAD:
            case MySQLParser.START:
            case MySQLParser.STARTS:
            case MySQLParser.STATS_AUTO_RECALC:
            case MySQLParser.STATS_PERSISTENT:
            case MySQLParser.STATS_SAMPLE_PAGES:
            case MySQLParser.STATUS:
            case MySQLParser.STOP:
            case MySQLParser.STORAGE:
            case MySQLParser.STRING:
            case MySQLParser.SUBCLASS_ORIGIN:
            case MySQLParser.SUBJECT:
            case MySQLParser.SUBPARTITION:
            case MySQLParser.SUBPARTITIONS:
            case MySQLParser.SUSPEND:
            case MySQLParser.SWAPS:
            case MySQLParser.SWITCHES:
            case MySQLParser.TABLE_NAME:
            case MySQLParser.TABLESPACE:
            case MySQLParser.TEMPORARY:
            case MySQLParser.TEMPTABLE:
            case MySQLParser.THAN:
            case MySQLParser.TRADITIONAL:
            case MySQLParser.TRANSACTION:
            case MySQLParser.TRANSACTIONAL:
            case MySQLParser.TRIGGERS:
            case MySQLParser.TRUNCATE:
            case MySQLParser.UNDEFINED:
            case MySQLParser.UNDOFILE:
            case MySQLParser.UNDO_BUFFER_SIZE:
            case MySQLParser.UNINSTALL:
            case MySQLParser.UNKNOWN:
            case MySQLParser.UNTIL:
            case MySQLParser.UPGRADE:
            case MySQLParser.USER:
            case MySQLParser.USE_FRM:
            case MySQLParser.USER_RESOURCES:
            case MySQLParser.VALIDATION:
            case MySQLParser.VALUE:
            case MySQLParser.VARIABLES:
            case MySQLParser.VIEW:
            case MySQLParser.VISIBLE:
            case MySQLParser.WAIT:
            case MySQLParser.WARNINGS:
            case MySQLParser.WITHOUT:
            case MySQLParser.WORK:
            case MySQLParser.WRAPPER:
            case MySQLParser.X509:
            case MySQLParser.XA:
            case MySQLParser.XML:
            case MySQLParser.INTERNAL:
            case MySQLParser.QUARTER:
            case MySQLParser.MONTH:
            case MySQLParser.DAY:
            case MySQLParser.HOUR:
            case MySQLParser.MINUTE:
            case MySQLParser.WEEK:
            case MySQLParser.SECOND:
            case MySQLParser.MICROSECOND:
            case MySQLParser.TABLES:
            case MySQLParser.ROUTINE:
            case MySQLParser.EXECUTE:
            case MySQLParser.FILE:
            case MySQLParser.PROCESS:
            case MySQLParser.RELOAD:
            case MySQLParser.SHUTDOWN:
            case MySQLParser.SUPER:
            case MySQLParser.PRIVILEGES:
            case MySQLParser.AUDIT_ADMIN:
            case MySQLParser.BACKUP_ADMIN:
            case MySQLParser.BINLOG_ADMIN:
            case MySQLParser.BINLOG_ENCRYPTION_ADMIN:
            case MySQLParser.CLONE_ADMIN:
            case MySQLParser.CONNECTION_ADMIN:
            case MySQLParser.ENCRYPTION_KEY_ADMIN:
            case MySQLParser.FIREWALL_ADMIN:
            case MySQLParser.FIREWALL_USER:
            case MySQLParser.GROUP_REPLICATION_ADMIN:
            case MySQLParser.INNODB_REDO_LOG_ARCHIVE:
            case MySQLParser.NDB_STORED_USER:
            case MySQLParser.PERSIST_RO_VARIABLES_ADMIN:
            case MySQLParser.REPLICATION_APPLIER:
            case MySQLParser.REPLICATION_SLAVE_ADMIN:
            case MySQLParser.RESOURCE_GROUP_ADMIN:
            case MySQLParser.RESOURCE_GROUP_USER:
            case MySQLParser.ROLE_ADMIN:
            case MySQLParser.SESSION_VARIABLES_ADMIN:
            case MySQLParser.SET_USER_ID:
            case MySQLParser.SHOW_ROUTINE:
            case MySQLParser.SYSTEM_VARIABLES_ADMIN:
            case MySQLParser.TABLE_ENCRYPTION_ADMIN:
            case MySQLParser.VERSION_TOKEN_ADMIN:
            case MySQLParser.XA_RECOVER_ADMIN:
            case MySQLParser.ARMSCII8:
            case MySQLParser.ASCII:
            case MySQLParser.BIG5:
            case MySQLParser.CP1250:
            case MySQLParser.CP1251:
            case MySQLParser.CP1256:
            case MySQLParser.CP1257:
            case MySQLParser.CP850:
            case MySQLParser.CP852:
            case MySQLParser.CP866:
            case MySQLParser.CP932:
            case MySQLParser.DEC8:
            case MySQLParser.EUCJPMS:
            case MySQLParser.EUCKR:
            case MySQLParser.GB2312:
            case MySQLParser.GBK:
            case MySQLParser.GEOSTD8:
            case MySQLParser.GREEK:
            case MySQLParser.HEBREW:
            case MySQLParser.HP8:
            case MySQLParser.KEYBCS2:
            case MySQLParser.KOI8R:
            case MySQLParser.KOI8U:
            case MySQLParser.LATIN1:
            case MySQLParser.LATIN2:
            case MySQLParser.LATIN5:
            case MySQLParser.LATIN7:
            case MySQLParser.MACCE:
            case MySQLParser.MACROMAN:
            case MySQLParser.SJIS:
            case MySQLParser.SWE7:
            case MySQLParser.TIS620:
            case MySQLParser.UCS2:
            case MySQLParser.UJIS:
            case MySQLParser.UTF16:
            case MySQLParser.UTF16LE:
            case MySQLParser.UTF32:
            case MySQLParser.UTF8:
            case MySQLParser.UTF8MB3:
            case MySQLParser.UTF8MB4:
            case MySQLParser.ARCHIVE:
            case MySQLParser.BLACKHOLE:
            case MySQLParser.CSV:
            case MySQLParser.FEDERATED:
            case MySQLParser.INNODB:
            case MySQLParser.MEMORY:
            case MySQLParser.MRG_MYISAM:
            case MySQLParser.MYISAM:
            case MySQLParser.NDB:
            case MySQLParser.NDBCLUSTER:
            case MySQLParser.PERFORMANCE_SCHEMA:
            case MySQLParser.TOKUDB:
            case MySQLParser.REPEATABLE:
            case MySQLParser.COMMITTED:
            case MySQLParser.UNCOMMITTED:
            case MySQLParser.SERIALIZABLE:
            case MySQLParser.GEOMETRYCOLLECTION:
            case MySQLParser.LINESTRING:
            case MySQLParser.MULTILINESTRING:
            case MySQLParser.MULTIPOINT:
            case MySQLParser.MULTIPOLYGON:
            case MySQLParser.POINT:
            case MySQLParser.POLYGON:
            case MySQLParser.ABS:
            case MySQLParser.ACOS:
            case MySQLParser.ADDDATE:
            case MySQLParser.ADDTIME:
            case MySQLParser.AES_DECRYPT:
            case MySQLParser.AES_ENCRYPT:
            case MySQLParser.AREA:
            case MySQLParser.ASBINARY:
            case MySQLParser.ASIN:
            case MySQLParser.ASTEXT:
            case MySQLParser.ASWKB:
            case MySQLParser.ASWKT:
            case MySQLParser.ASYMMETRIC_DECRYPT:
            case MySQLParser.ASYMMETRIC_DERIVE:
            case MySQLParser.ASYMMETRIC_ENCRYPT:
            case MySQLParser.ASYMMETRIC_SIGN:
            case MySQLParser.ASYMMETRIC_VERIFY:
            case MySQLParser.ATAN:
            case MySQLParser.ATAN2:
            case MySQLParser.BENCHMARK:
            case MySQLParser.BIN:
            case MySQLParser.BIT_COUNT:
            case MySQLParser.BIT_LENGTH:
            case MySQLParser.BUFFER:
            case MySQLParser.CATALOG_NAME:
            case MySQLParser.CEIL:
            case MySQLParser.CEILING:
            case MySQLParser.CENTROID:
            case MySQLParser.CHARACTER_LENGTH:
            case MySQLParser.CHARSET:
            case MySQLParser.CHAR_LENGTH:
            case MySQLParser.COERCIBILITY:
            case MySQLParser.COLLATION:
            case MySQLParser.COMPRESS:
            case MySQLParser.CONCAT:
            case MySQLParser.CONCAT_WS:
            case MySQLParser.CONNECTION_ID:
            case MySQLParser.CONV:
            case MySQLParser.CONVERT_TZ:
            case MySQLParser.COS:
            case MySQLParser.COT:
            case MySQLParser.CRC32:
            case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
            case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
            case MySQLParser.CREATE_DH_PARAMETERS:
            case MySQLParser.CREATE_DIGEST:
            case MySQLParser.CROSSES:
            case MySQLParser.DATEDIFF:
            case MySQLParser.DATE_FORMAT:
            case MySQLParser.DAYNAME:
            case MySQLParser.DAYOFMONTH:
            case MySQLParser.DAYOFWEEK:
            case MySQLParser.DAYOFYEAR:
            case MySQLParser.DECODE:
            case MySQLParser.DEGREES:
            case MySQLParser.DES_DECRYPT:
            case MySQLParser.DES_ENCRYPT:
            case MySQLParser.DIMENSION:
            case MySQLParser.DISJOINT:
            case MySQLParser.ELT:
            case MySQLParser.ENCODE:
            case MySQLParser.ENCRYPT:
            case MySQLParser.ENDPOINT:
            case MySQLParser.ENVELOPE:
            case MySQLParser.EQUALS:
            case MySQLParser.EXP:
            case MySQLParser.EXPORT_SET:
            case MySQLParser.EXTERIORRING:
            case MySQLParser.EXTRACTVALUE:
            case MySQLParser.FIELD:
            case MySQLParser.FIND_IN_SET:
            case MySQLParser.FLOOR:
            case MySQLParser.FORMAT:
            case MySQLParser.FOUND_ROWS:
            case MySQLParser.FROM_BASE64:
            case MySQLParser.FROM_DAYS:
            case MySQLParser.FROM_UNIXTIME:
            case MySQLParser.GEOMCOLLFROMTEXT:
            case MySQLParser.GEOMCOLLFROMWKB:
            case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.GEOMETRYFROMTEXT:
            case MySQLParser.GEOMETRYFROMWKB:
            case MySQLParser.GEOMETRYN:
            case MySQLParser.GEOMETRYTYPE:
            case MySQLParser.GEOMFROMTEXT:
            case MySQLParser.GEOMFROMWKB:
            case MySQLParser.GET_FORMAT:
            case MySQLParser.GET_LOCK:
            case MySQLParser.GLENGTH:
            case MySQLParser.GREATEST:
            case MySQLParser.GTID_SUBSET:
            case MySQLParser.GTID_SUBTRACT:
            case MySQLParser.HEX:
            case MySQLParser.IFNULL:
            case MySQLParser.INET6_ATON:
            case MySQLParser.INET6_NTOA:
            case MySQLParser.INET_ATON:
            case MySQLParser.INET_NTOA:
            case MySQLParser.INSTR:
            case MySQLParser.INTERIORRINGN:
            case MySQLParser.INTERSECTS:
            case MySQLParser.ISCLOSED:
            case MySQLParser.ISEMPTY:
            case MySQLParser.ISNULL:
            case MySQLParser.ISSIMPLE:
            case MySQLParser.IS_FREE_LOCK:
            case MySQLParser.IS_IPV4:
            case MySQLParser.IS_IPV4_COMPAT:
            case MySQLParser.IS_IPV4_MAPPED:
            case MySQLParser.IS_IPV6:
            case MySQLParser.IS_USED_LOCK:
            case MySQLParser.LAST_INSERT_ID:
            case MySQLParser.LCASE:
            case MySQLParser.LEAST:
            case MySQLParser.LENGTH:
            case MySQLParser.LINEFROMTEXT:
            case MySQLParser.LINEFROMWKB:
            case MySQLParser.LINESTRINGFROMTEXT:
            case MySQLParser.LINESTRINGFROMWKB:
            case MySQLParser.LN:
            case MySQLParser.LOAD_FILE:
            case MySQLParser.LOCATE:
            case MySQLParser.LOG:
            case MySQLParser.LOG10:
            case MySQLParser.LOG2:
            case MySQLParser.LOWER:
            case MySQLParser.LPAD:
            case MySQLParser.LTRIM:
            case MySQLParser.MAKEDATE:
            case MySQLParser.MAKETIME:
            case MySQLParser.MAKE_SET:
            case MySQLParser.MASTER_POS_WAIT:
            case MySQLParser.MBRCONTAINS:
            case MySQLParser.MBRDISJOINT:
            case MySQLParser.MBREQUAL:
            case MySQLParser.MBRINTERSECTS:
            case MySQLParser.MBROVERLAPS:
            case MySQLParser.MBRTOUCHES:
            case MySQLParser.MBRWITHIN:
            case MySQLParser.MD5:
            case MySQLParser.MLINEFROMTEXT:
            case MySQLParser.MLINEFROMWKB:
            case MySQLParser.MONTHNAME:
            case MySQLParser.MPOINTFROMTEXT:
            case MySQLParser.MPOINTFROMWKB:
            case MySQLParser.MPOLYFROMTEXT:
            case MySQLParser.MPOLYFROMWKB:
            case MySQLParser.MULTILINESTRINGFROMTEXT:
            case MySQLParser.MULTILINESTRINGFROMWKB:
            case MySQLParser.MULTIPOINTFROMTEXT:
            case MySQLParser.MULTIPOINTFROMWKB:
            case MySQLParser.MULTIPOLYGONFROMTEXT:
            case MySQLParser.MULTIPOLYGONFROMWKB:
            case MySQLParser.NAME_CONST:
            case MySQLParser.NULLIF:
            case MySQLParser.NUMGEOMETRIES:
            case MySQLParser.NUMINTERIORRINGS:
            case MySQLParser.NUMPOINTS:
            case MySQLParser.OCT:
            case MySQLParser.OCTET_LENGTH:
            case MySQLParser.ORD:
            case MySQLParser.OVERLAPS:
            case MySQLParser.PERIOD_ADD:
            case MySQLParser.PERIOD_DIFF:
            case MySQLParser.PI:
            case MySQLParser.POINTFROMTEXT:
            case MySQLParser.POINTFROMWKB:
            case MySQLParser.POINTN:
            case MySQLParser.POLYFROMTEXT:
            case MySQLParser.POLYFROMWKB:
            case MySQLParser.POLYGONFROMTEXT:
            case MySQLParser.POLYGONFROMWKB:
            case MySQLParser.POW:
            case MySQLParser.POWER:
            case MySQLParser.QUOTE:
            case MySQLParser.RADIANS:
            case MySQLParser.RAND:
            case MySQLParser.RANDOM_BYTES:
            case MySQLParser.RELEASE_LOCK:
            case MySQLParser.REVERSE:
            case MySQLParser.ROUND:
            case MySQLParser.ROW_COUNT:
            case MySQLParser.RPAD:
            case MySQLParser.RTRIM:
            case MySQLParser.SEC_TO_TIME:
            case MySQLParser.SESSION_USER:
            case MySQLParser.SHA:
            case MySQLParser.SHA1:
            case MySQLParser.SHA2:
            case MySQLParser.SCHEMA_NAME:
            case MySQLParser.SIGN:
            case MySQLParser.SIN:
            case MySQLParser.SLEEP:
            case MySQLParser.SOUNDEX:
            case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
            case MySQLParser.SQRT:
            case MySQLParser.SRID:
            case MySQLParser.STARTPOINT:
            case MySQLParser.STRCMP:
            case MySQLParser.STR_TO_DATE:
            case MySQLParser.ST_AREA:
            case MySQLParser.ST_ASBINARY:
            case MySQLParser.ST_ASTEXT:
            case MySQLParser.ST_ASWKB:
            case MySQLParser.ST_ASWKT:
            case MySQLParser.ST_BUFFER:
            case MySQLParser.ST_CENTROID:
            case MySQLParser.ST_CONTAINS:
            case MySQLParser.ST_CROSSES:
            case MySQLParser.ST_DIFFERENCE:
            case MySQLParser.ST_DIMENSION:
            case MySQLParser.ST_DISJOINT:
            case MySQLParser.ST_DISTANCE:
            case MySQLParser.ST_ENDPOINT:
            case MySQLParser.ST_ENVELOPE:
            case MySQLParser.ST_EQUALS:
            case MySQLParser.ST_EXTERIORRING:
            case MySQLParser.ST_GEOMCOLLFROMTEXT:
            case MySQLParser.ST_GEOMCOLLFROMTXT:
            case MySQLParser.ST_GEOMCOLLFROMWKB:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
            case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
            case MySQLParser.ST_GEOMETRYFROMTEXT:
            case MySQLParser.ST_GEOMETRYFROMWKB:
            case MySQLParser.ST_GEOMETRYN:
            case MySQLParser.ST_GEOMETRYTYPE:
            case MySQLParser.ST_GEOMFROMTEXT:
            case MySQLParser.ST_GEOMFROMWKB:
            case MySQLParser.ST_INTERIORRINGN:
            case MySQLParser.ST_INTERSECTION:
            case MySQLParser.ST_INTERSECTS:
            case MySQLParser.ST_ISCLOSED:
            case MySQLParser.ST_ISEMPTY:
            case MySQLParser.ST_ISSIMPLE:
            case MySQLParser.ST_LINEFROMTEXT:
            case MySQLParser.ST_LINEFROMWKB:
            case MySQLParser.ST_LINESTRINGFROMTEXT:
            case MySQLParser.ST_LINESTRINGFROMWKB:
            case MySQLParser.ST_NUMGEOMETRIES:
            case MySQLParser.ST_NUMINTERIORRING:
            case MySQLParser.ST_NUMINTERIORRINGS:
            case MySQLParser.ST_NUMPOINTS:
            case MySQLParser.ST_OVERLAPS:
            case MySQLParser.ST_POINTFROMTEXT:
            case MySQLParser.ST_POINTFROMWKB:
            case MySQLParser.ST_POINTN:
            case MySQLParser.ST_POLYFROMTEXT:
            case MySQLParser.ST_POLYFROMWKB:
            case MySQLParser.ST_POLYGONFROMTEXT:
            case MySQLParser.ST_POLYGONFROMWKB:
            case MySQLParser.ST_SRID:
            case MySQLParser.ST_STARTPOINT:
            case MySQLParser.ST_SYMDIFFERENCE:
            case MySQLParser.ST_TOUCHES:
            case MySQLParser.ST_UNION:
            case MySQLParser.ST_WITHIN:
            case MySQLParser.ST_X:
            case MySQLParser.ST_Y:
            case MySQLParser.SUBDATE:
            case MySQLParser.SUBSTRING_INDEX:
            case MySQLParser.SUBTIME:
            case MySQLParser.SYSTEM_USER:
            case MySQLParser.TAN:
            case MySQLParser.TIMEDIFF:
            case MySQLParser.TIMESTAMPADD:
            case MySQLParser.TIMESTAMPDIFF:
            case MySQLParser.TIME_FORMAT:
            case MySQLParser.TIME_TO_SEC:
            case MySQLParser.TOUCHES:
            case MySQLParser.TO_BASE64:
            case MySQLParser.TO_DAYS:
            case MySQLParser.TO_SECONDS:
            case MySQLParser.UCASE:
            case MySQLParser.UNCOMPRESS:
            case MySQLParser.UNCOMPRESSED_LENGTH:
            case MySQLParser.UNHEX:
            case MySQLParser.UNIX_TIMESTAMP:
            case MySQLParser.UPDATEXML:
            case MySQLParser.UPPER:
            case MySQLParser.UUID:
            case MySQLParser.UUID_SHORT:
            case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
            case MySQLParser.VERSION:
            case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
            case MySQLParser.WEEKDAY:
            case MySQLParser.WEEKOFYEAR:
            case MySQLParser.WEIGHT_STRING:
            case MySQLParser.WITHIN:
            case MySQLParser.YEARWEEK:
            case MySQLParser.Y_FUNCTION:
            case MySQLParser.X_FUNCTION:
            case MySQLParser.PLUS:
            case MySQLParser.MINUS:
            case MySQLParser.EXCLAMATION_SYMBOL:
            case MySQLParser.BIT_NOT_OP:
            case MySQLParser.LR_BRACKET:
            case MySQLParser.ZERO_DECIMAL:
            case MySQLParser.ONE_DECIMAL:
            case MySQLParser.TWO_DECIMAL:
            case MySQLParser.CHARSET_REVERSE_QOUTE_STRING:
            case MySQLParser.START_NATIONAL_STRING_LITERAL:
            case MySQLParser.STRING_LITERAL:
            case MySQLParser.DECIMAL_LITERAL:
            case MySQLParser.HEXADECIMAL_LITERAL:
            case MySQLParser.REAL_LITERAL:
            case MySQLParser.NULL_SPEC_LITERAL:
            case MySQLParser.BIT_STRING:
            case MySQLParser.STRING_CHARSET_NAME:
            case MySQLParser.ID:
            case MySQLParser.REVERSE_QUOTE_ID:
            case MySQLParser.LOCAL_ID:
            case MySQLParser.GLOBAL_ID:
                this.state = 6072;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===MySQLParser.ALL) {
                    this.state = 6071;
                    localctx.aggregator = this.match(MySQLParser.ALL);
                }

                this.state = 6074;
                this.functionArg();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 6077;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 6078;
            this.match(MySQLParser.COUNT);
            this.state = 6079;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 6080;
            localctx.aggregator = this.match(MySQLParser.DISTINCT);
            this.state = 6081;
            this.functionArgs();
            this.state = 6082;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 6084;
            _la = this._input.LA(1);
            if(!(((((_la - 236)) & ~0x1f) == 0 && ((1 << (_la - 236)) & ((1 << (MySQLParser.BIT_AND - 236)) | (1 << (MySQLParser.BIT_OR - 236)) | (1 << (MySQLParser.BIT_XOR - 236)) | (1 << (MySQLParser.STD - 236)) | (1 << (MySQLParser.STDDEV - 236)) | (1 << (MySQLParser.STDDEV_POP - 236)) | (1 << (MySQLParser.STDDEV_SAMP - 236)) | (1 << (MySQLParser.VAR_POP - 236)) | (1 << (MySQLParser.VAR_SAMP - 236)) | (1 << (MySQLParser.VARIANCE - 236)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6085;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 6087;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ALL) {
                this.state = 6086;
                localctx.aggregator = this.match(MySQLParser.ALL);
            }

            this.state = 6089;
            this.functionArg();
            this.state = 6090;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 6092;
            this.match(MySQLParser.GROUP_CONCAT);
            this.state = 6093;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 6095;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.DISTINCT) {
                this.state = 6094;
                localctx.aggregator = this.match(MySQLParser.DISTINCT);
            }

            this.state = 6097;
            this.functionArgs();
            this.state = 6108;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.ORDER) {
                this.state = 6098;
                this.match(MySQLParser.ORDER);
                this.state = 6099;
                this.match(MySQLParser.BY);
                this.state = 6100;
                this.orderByExpression();
                this.state = 6105;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===MySQLParser.COMMA) {
                    this.state = 6101;
                    this.match(MySQLParser.COMMA);
                    this.state = 6102;
                    this.orderByExpression();
                    this.state = 6107;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 6112;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.SEPARATOR) {
                this.state = 6110;
                this.match(MySQLParser.SEPARATOR);
                this.state = 6111;
                localctx.separator = this.match(MySQLParser.STRING_LITERAL);
            }

            this.state = 6114;
            this.match(MySQLParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ScalarFunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_scalarFunctionName;
    return this;
}

ScalarFunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScalarFunctionNameContext.prototype.constructor = ScalarFunctionNameContext;

ScalarFunctionNameContext.prototype.functionNameBase = function() {
    return this.getTypedRuleContext(FunctionNameBaseContext,0);
};

ScalarFunctionNameContext.prototype.ASCII = function() {
    return this.getToken(MySQLParser.ASCII, 0);
};

ScalarFunctionNameContext.prototype.CURDATE = function() {
    return this.getToken(MySQLParser.CURDATE, 0);
};

ScalarFunctionNameContext.prototype.CURRENT_DATE = function() {
    return this.getToken(MySQLParser.CURRENT_DATE, 0);
};

ScalarFunctionNameContext.prototype.CURRENT_TIME = function() {
    return this.getToken(MySQLParser.CURRENT_TIME, 0);
};

ScalarFunctionNameContext.prototype.CURRENT_TIMESTAMP = function() {
    return this.getToken(MySQLParser.CURRENT_TIMESTAMP, 0);
};

ScalarFunctionNameContext.prototype.CURTIME = function() {
    return this.getToken(MySQLParser.CURTIME, 0);
};

ScalarFunctionNameContext.prototype.DATE_ADD = function() {
    return this.getToken(MySQLParser.DATE_ADD, 0);
};

ScalarFunctionNameContext.prototype.DATE_SUB = function() {
    return this.getToken(MySQLParser.DATE_SUB, 0);
};

ScalarFunctionNameContext.prototype.IF = function() {
    return this.getToken(MySQLParser.IF, 0);
};

ScalarFunctionNameContext.prototype.INSERT = function() {
    return this.getToken(MySQLParser.INSERT, 0);
};

ScalarFunctionNameContext.prototype.LOCALTIME = function() {
    return this.getToken(MySQLParser.LOCALTIME, 0);
};

ScalarFunctionNameContext.prototype.LOCALTIMESTAMP = function() {
    return this.getToken(MySQLParser.LOCALTIMESTAMP, 0);
};

ScalarFunctionNameContext.prototype.MID = function() {
    return this.getToken(MySQLParser.MID, 0);
};

ScalarFunctionNameContext.prototype.NOW = function() {
    return this.getToken(MySQLParser.NOW, 0);
};

ScalarFunctionNameContext.prototype.REPLACE = function() {
    return this.getToken(MySQLParser.REPLACE, 0);
};

ScalarFunctionNameContext.prototype.SUBSTR = function() {
    return this.getToken(MySQLParser.SUBSTR, 0);
};

ScalarFunctionNameContext.prototype.SUBSTRING = function() {
    return this.getToken(MySQLParser.SUBSTRING, 0);
};

ScalarFunctionNameContext.prototype.SYSDATE = function() {
    return this.getToken(MySQLParser.SYSDATE, 0);
};

ScalarFunctionNameContext.prototype.TRIM = function() {
    return this.getToken(MySQLParser.TRIM, 0);
};

ScalarFunctionNameContext.prototype.UTC_DATE = function() {
    return this.getToken(MySQLParser.UTC_DATE, 0);
};

ScalarFunctionNameContext.prototype.UTC_TIME = function() {
    return this.getToken(MySQLParser.UTC_TIME, 0);
};

ScalarFunctionNameContext.prototype.UTC_TIMESTAMP = function() {
    return this.getToken(MySQLParser.UTC_TIMESTAMP, 0);
};

ScalarFunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterScalarFunctionName(this);
	}
};

ScalarFunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitScalarFunctionName(this);
	}
};

ScalarFunctionNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitScalarFunctionName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ScalarFunctionNameContext = ScalarFunctionNameContext;

MySQLParser.prototype.scalarFunctionName = function() {

    var localctx = new ScalarFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 592, MySQLParser.RULE_scalarFunctionName);
    try {
        this.state = 6141;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.DATABASE:
        case MySQLParser.LEFT:
        case MySQLParser.RIGHT:
        case MySQLParser.DATE:
        case MySQLParser.TIME:
        case MySQLParser.TIMESTAMP:
        case MySQLParser.YEAR:
        case MySQLParser.JSON_VALID:
        case MySQLParser.JSON_SCHEMA_VALID:
        case MySQLParser.COUNT:
        case MySQLParser.POSITION:
        case MySQLParser.INVISIBLE:
        case MySQLParser.VISIBLE:
        case MySQLParser.QUARTER:
        case MySQLParser.MONTH:
        case MySQLParser.DAY:
        case MySQLParser.HOUR:
        case MySQLParser.MINUTE:
        case MySQLParser.WEEK:
        case MySQLParser.SECOND:
        case MySQLParser.MICROSECOND:
        case MySQLParser.SESSION_VARIABLES_ADMIN:
        case MySQLParser.GEOMETRYCOLLECTION:
        case MySQLParser.LINESTRING:
        case MySQLParser.MULTILINESTRING:
        case MySQLParser.MULTIPOINT:
        case MySQLParser.MULTIPOLYGON:
        case MySQLParser.POINT:
        case MySQLParser.POLYGON:
        case MySQLParser.ABS:
        case MySQLParser.ACOS:
        case MySQLParser.ADDDATE:
        case MySQLParser.ADDTIME:
        case MySQLParser.AES_DECRYPT:
        case MySQLParser.AES_ENCRYPT:
        case MySQLParser.AREA:
        case MySQLParser.ASBINARY:
        case MySQLParser.ASIN:
        case MySQLParser.ASTEXT:
        case MySQLParser.ASWKB:
        case MySQLParser.ASWKT:
        case MySQLParser.ASYMMETRIC_DECRYPT:
        case MySQLParser.ASYMMETRIC_DERIVE:
        case MySQLParser.ASYMMETRIC_ENCRYPT:
        case MySQLParser.ASYMMETRIC_SIGN:
        case MySQLParser.ASYMMETRIC_VERIFY:
        case MySQLParser.ATAN:
        case MySQLParser.ATAN2:
        case MySQLParser.BENCHMARK:
        case MySQLParser.BIN:
        case MySQLParser.BIT_COUNT:
        case MySQLParser.BIT_LENGTH:
        case MySQLParser.BUFFER:
        case MySQLParser.CEIL:
        case MySQLParser.CEILING:
        case MySQLParser.CENTROID:
        case MySQLParser.CHARACTER_LENGTH:
        case MySQLParser.CHARSET:
        case MySQLParser.CHAR_LENGTH:
        case MySQLParser.COERCIBILITY:
        case MySQLParser.COLLATION:
        case MySQLParser.COMPRESS:
        case MySQLParser.CONCAT:
        case MySQLParser.CONCAT_WS:
        case MySQLParser.CONNECTION_ID:
        case MySQLParser.CONV:
        case MySQLParser.CONVERT_TZ:
        case MySQLParser.COS:
        case MySQLParser.COT:
        case MySQLParser.CRC32:
        case MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY:
        case MySQLParser.CREATE_ASYMMETRIC_PUB_KEY:
        case MySQLParser.CREATE_DH_PARAMETERS:
        case MySQLParser.CREATE_DIGEST:
        case MySQLParser.CROSSES:
        case MySQLParser.DATEDIFF:
        case MySQLParser.DATE_FORMAT:
        case MySQLParser.DAYNAME:
        case MySQLParser.DAYOFMONTH:
        case MySQLParser.DAYOFWEEK:
        case MySQLParser.DAYOFYEAR:
        case MySQLParser.DECODE:
        case MySQLParser.DEGREES:
        case MySQLParser.DES_DECRYPT:
        case MySQLParser.DES_ENCRYPT:
        case MySQLParser.DIMENSION:
        case MySQLParser.DISJOINT:
        case MySQLParser.ELT:
        case MySQLParser.ENCODE:
        case MySQLParser.ENCRYPT:
        case MySQLParser.ENDPOINT:
        case MySQLParser.ENVELOPE:
        case MySQLParser.EQUALS:
        case MySQLParser.EXP:
        case MySQLParser.EXPORT_SET:
        case MySQLParser.EXTERIORRING:
        case MySQLParser.EXTRACTVALUE:
        case MySQLParser.FIELD:
        case MySQLParser.FIND_IN_SET:
        case MySQLParser.FLOOR:
        case MySQLParser.FORMAT:
        case MySQLParser.FOUND_ROWS:
        case MySQLParser.FROM_BASE64:
        case MySQLParser.FROM_DAYS:
        case MySQLParser.FROM_UNIXTIME:
        case MySQLParser.GEOMCOLLFROMTEXT:
        case MySQLParser.GEOMCOLLFROMWKB:
        case MySQLParser.GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.GEOMETRYFROMTEXT:
        case MySQLParser.GEOMETRYFROMWKB:
        case MySQLParser.GEOMETRYN:
        case MySQLParser.GEOMETRYTYPE:
        case MySQLParser.GEOMFROMTEXT:
        case MySQLParser.GEOMFROMWKB:
        case MySQLParser.GET_FORMAT:
        case MySQLParser.GET_LOCK:
        case MySQLParser.GLENGTH:
        case MySQLParser.GREATEST:
        case MySQLParser.GTID_SUBSET:
        case MySQLParser.GTID_SUBTRACT:
        case MySQLParser.HEX:
        case MySQLParser.IFNULL:
        case MySQLParser.INET6_ATON:
        case MySQLParser.INET6_NTOA:
        case MySQLParser.INET_ATON:
        case MySQLParser.INET_NTOA:
        case MySQLParser.INSTR:
        case MySQLParser.INTERIORRINGN:
        case MySQLParser.INTERSECTS:
        case MySQLParser.ISCLOSED:
        case MySQLParser.ISEMPTY:
        case MySQLParser.ISNULL:
        case MySQLParser.ISSIMPLE:
        case MySQLParser.IS_FREE_LOCK:
        case MySQLParser.IS_IPV4:
        case MySQLParser.IS_IPV4_COMPAT:
        case MySQLParser.IS_IPV4_MAPPED:
        case MySQLParser.IS_IPV6:
        case MySQLParser.IS_USED_LOCK:
        case MySQLParser.LAST_INSERT_ID:
        case MySQLParser.LCASE:
        case MySQLParser.LEAST:
        case MySQLParser.LENGTH:
        case MySQLParser.LINEFROMTEXT:
        case MySQLParser.LINEFROMWKB:
        case MySQLParser.LINESTRINGFROMTEXT:
        case MySQLParser.LINESTRINGFROMWKB:
        case MySQLParser.LN:
        case MySQLParser.LOAD_FILE:
        case MySQLParser.LOCATE:
        case MySQLParser.LOG:
        case MySQLParser.LOG10:
        case MySQLParser.LOG2:
        case MySQLParser.LOWER:
        case MySQLParser.LPAD:
        case MySQLParser.LTRIM:
        case MySQLParser.MAKEDATE:
        case MySQLParser.MAKETIME:
        case MySQLParser.MAKE_SET:
        case MySQLParser.MASTER_POS_WAIT:
        case MySQLParser.MBRCONTAINS:
        case MySQLParser.MBRDISJOINT:
        case MySQLParser.MBREQUAL:
        case MySQLParser.MBRINTERSECTS:
        case MySQLParser.MBROVERLAPS:
        case MySQLParser.MBRTOUCHES:
        case MySQLParser.MBRWITHIN:
        case MySQLParser.MD5:
        case MySQLParser.MLINEFROMTEXT:
        case MySQLParser.MLINEFROMWKB:
        case MySQLParser.MONTHNAME:
        case MySQLParser.MPOINTFROMTEXT:
        case MySQLParser.MPOINTFROMWKB:
        case MySQLParser.MPOLYFROMTEXT:
        case MySQLParser.MPOLYFROMWKB:
        case MySQLParser.MULTILINESTRINGFROMTEXT:
        case MySQLParser.MULTILINESTRINGFROMWKB:
        case MySQLParser.MULTIPOINTFROMTEXT:
        case MySQLParser.MULTIPOINTFROMWKB:
        case MySQLParser.MULTIPOLYGONFROMTEXT:
        case MySQLParser.MULTIPOLYGONFROMWKB:
        case MySQLParser.NAME_CONST:
        case MySQLParser.NULLIF:
        case MySQLParser.NUMGEOMETRIES:
        case MySQLParser.NUMINTERIORRINGS:
        case MySQLParser.NUMPOINTS:
        case MySQLParser.OCT:
        case MySQLParser.OCTET_LENGTH:
        case MySQLParser.ORD:
        case MySQLParser.OVERLAPS:
        case MySQLParser.PERIOD_ADD:
        case MySQLParser.PERIOD_DIFF:
        case MySQLParser.PI:
        case MySQLParser.POINTFROMTEXT:
        case MySQLParser.POINTFROMWKB:
        case MySQLParser.POINTN:
        case MySQLParser.POLYFROMTEXT:
        case MySQLParser.POLYFROMWKB:
        case MySQLParser.POLYGONFROMTEXT:
        case MySQLParser.POLYGONFROMWKB:
        case MySQLParser.POW:
        case MySQLParser.POWER:
        case MySQLParser.QUOTE:
        case MySQLParser.RADIANS:
        case MySQLParser.RAND:
        case MySQLParser.RANDOM_BYTES:
        case MySQLParser.RELEASE_LOCK:
        case MySQLParser.REVERSE:
        case MySQLParser.ROUND:
        case MySQLParser.ROW_COUNT:
        case MySQLParser.RPAD:
        case MySQLParser.RTRIM:
        case MySQLParser.SEC_TO_TIME:
        case MySQLParser.SESSION_USER:
        case MySQLParser.SHA:
        case MySQLParser.SHA1:
        case MySQLParser.SHA2:
        case MySQLParser.SIGN:
        case MySQLParser.SIN:
        case MySQLParser.SLEEP:
        case MySQLParser.SOUNDEX:
        case MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS:
        case MySQLParser.SQRT:
        case MySQLParser.SRID:
        case MySQLParser.STARTPOINT:
        case MySQLParser.STRCMP:
        case MySQLParser.STR_TO_DATE:
        case MySQLParser.ST_AREA:
        case MySQLParser.ST_ASBINARY:
        case MySQLParser.ST_ASTEXT:
        case MySQLParser.ST_ASWKB:
        case MySQLParser.ST_ASWKT:
        case MySQLParser.ST_BUFFER:
        case MySQLParser.ST_CENTROID:
        case MySQLParser.ST_CONTAINS:
        case MySQLParser.ST_CROSSES:
        case MySQLParser.ST_DIFFERENCE:
        case MySQLParser.ST_DIMENSION:
        case MySQLParser.ST_DISJOINT:
        case MySQLParser.ST_DISTANCE:
        case MySQLParser.ST_ENDPOINT:
        case MySQLParser.ST_ENVELOPE:
        case MySQLParser.ST_EQUALS:
        case MySQLParser.ST_EXTERIORRING:
        case MySQLParser.ST_GEOMCOLLFROMTEXT:
        case MySQLParser.ST_GEOMCOLLFROMTXT:
        case MySQLParser.ST_GEOMCOLLFROMWKB:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT:
        case MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB:
        case MySQLParser.ST_GEOMETRYFROMTEXT:
        case MySQLParser.ST_GEOMETRYFROMWKB:
        case MySQLParser.ST_GEOMETRYN:
        case MySQLParser.ST_GEOMETRYTYPE:
        case MySQLParser.ST_GEOMFROMTEXT:
        case MySQLParser.ST_GEOMFROMWKB:
        case MySQLParser.ST_INTERIORRINGN:
        case MySQLParser.ST_INTERSECTION:
        case MySQLParser.ST_INTERSECTS:
        case MySQLParser.ST_ISCLOSED:
        case MySQLParser.ST_ISEMPTY:
        case MySQLParser.ST_ISSIMPLE:
        case MySQLParser.ST_LINEFROMTEXT:
        case MySQLParser.ST_LINEFROMWKB:
        case MySQLParser.ST_LINESTRINGFROMTEXT:
        case MySQLParser.ST_LINESTRINGFROMWKB:
        case MySQLParser.ST_NUMGEOMETRIES:
        case MySQLParser.ST_NUMINTERIORRING:
        case MySQLParser.ST_NUMINTERIORRINGS:
        case MySQLParser.ST_NUMPOINTS:
        case MySQLParser.ST_OVERLAPS:
        case MySQLParser.ST_POINTFROMTEXT:
        case MySQLParser.ST_POINTFROMWKB:
        case MySQLParser.ST_POINTN:
        case MySQLParser.ST_POLYFROMTEXT:
        case MySQLParser.ST_POLYFROMWKB:
        case MySQLParser.ST_POLYGONFROMTEXT:
        case MySQLParser.ST_POLYGONFROMWKB:
        case MySQLParser.ST_SRID:
        case MySQLParser.ST_STARTPOINT:
        case MySQLParser.ST_SYMDIFFERENCE:
        case MySQLParser.ST_TOUCHES:
        case MySQLParser.ST_UNION:
        case MySQLParser.ST_WITHIN:
        case MySQLParser.ST_X:
        case MySQLParser.ST_Y:
        case MySQLParser.SUBDATE:
        case MySQLParser.SUBSTRING_INDEX:
        case MySQLParser.SUBTIME:
        case MySQLParser.SYSTEM_USER:
        case MySQLParser.TAN:
        case MySQLParser.TIMEDIFF:
        case MySQLParser.TIMESTAMPADD:
        case MySQLParser.TIMESTAMPDIFF:
        case MySQLParser.TIME_FORMAT:
        case MySQLParser.TIME_TO_SEC:
        case MySQLParser.TOUCHES:
        case MySQLParser.TO_BASE64:
        case MySQLParser.TO_DAYS:
        case MySQLParser.TO_SECONDS:
        case MySQLParser.UCASE:
        case MySQLParser.UNCOMPRESS:
        case MySQLParser.UNCOMPRESSED_LENGTH:
        case MySQLParser.UNHEX:
        case MySQLParser.UNIX_TIMESTAMP:
        case MySQLParser.UPDATEXML:
        case MySQLParser.UPPER:
        case MySQLParser.UUID:
        case MySQLParser.UUID_SHORT:
        case MySQLParser.VALIDATE_PASSWORD_STRENGTH:
        case MySQLParser.VERSION:
        case MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
        case MySQLParser.WEEKDAY:
        case MySQLParser.WEEKOFYEAR:
        case MySQLParser.WEIGHT_STRING:
        case MySQLParser.WITHIN:
        case MySQLParser.YEARWEEK:
        case MySQLParser.Y_FUNCTION:
        case MySQLParser.X_FUNCTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 6118;
            this.functionNameBase();
            break;
        case MySQLParser.ASCII:
            this.enterOuterAlt(localctx, 2);
            this.state = 6119;
            this.match(MySQLParser.ASCII);
            break;
        case MySQLParser.CURDATE:
            this.enterOuterAlt(localctx, 3);
            this.state = 6120;
            this.match(MySQLParser.CURDATE);
            break;
        case MySQLParser.CURRENT_DATE:
            this.enterOuterAlt(localctx, 4);
            this.state = 6121;
            this.match(MySQLParser.CURRENT_DATE);
            break;
        case MySQLParser.CURRENT_TIME:
            this.enterOuterAlt(localctx, 5);
            this.state = 6122;
            this.match(MySQLParser.CURRENT_TIME);
            break;
        case MySQLParser.CURRENT_TIMESTAMP:
            this.enterOuterAlt(localctx, 6);
            this.state = 6123;
            this.match(MySQLParser.CURRENT_TIMESTAMP);
            break;
        case MySQLParser.CURTIME:
            this.enterOuterAlt(localctx, 7);
            this.state = 6124;
            this.match(MySQLParser.CURTIME);
            break;
        case MySQLParser.DATE_ADD:
            this.enterOuterAlt(localctx, 8);
            this.state = 6125;
            this.match(MySQLParser.DATE_ADD);
            break;
        case MySQLParser.DATE_SUB:
            this.enterOuterAlt(localctx, 9);
            this.state = 6126;
            this.match(MySQLParser.DATE_SUB);
            break;
        case MySQLParser.IF:
            this.enterOuterAlt(localctx, 10);
            this.state = 6127;
            this.match(MySQLParser.IF);
            break;
        case MySQLParser.INSERT:
            this.enterOuterAlt(localctx, 11);
            this.state = 6128;
            this.match(MySQLParser.INSERT);
            break;
        case MySQLParser.LOCALTIME:
            this.enterOuterAlt(localctx, 12);
            this.state = 6129;
            this.match(MySQLParser.LOCALTIME);
            break;
        case MySQLParser.LOCALTIMESTAMP:
            this.enterOuterAlt(localctx, 13);
            this.state = 6130;
            this.match(MySQLParser.LOCALTIMESTAMP);
            break;
        case MySQLParser.MID:
            this.enterOuterAlt(localctx, 14);
            this.state = 6131;
            this.match(MySQLParser.MID);
            break;
        case MySQLParser.NOW:
            this.enterOuterAlt(localctx, 15);
            this.state = 6132;
            this.match(MySQLParser.NOW);
            break;
        case MySQLParser.REPLACE:
            this.enterOuterAlt(localctx, 16);
            this.state = 6133;
            this.match(MySQLParser.REPLACE);
            break;
        case MySQLParser.SUBSTR:
            this.enterOuterAlt(localctx, 17);
            this.state = 6134;
            this.match(MySQLParser.SUBSTR);
            break;
        case MySQLParser.SUBSTRING:
            this.enterOuterAlt(localctx, 18);
            this.state = 6135;
            this.match(MySQLParser.SUBSTRING);
            break;
        case MySQLParser.SYSDATE:
            this.enterOuterAlt(localctx, 19);
            this.state = 6136;
            this.match(MySQLParser.SYSDATE);
            break;
        case MySQLParser.TRIM:
            this.enterOuterAlt(localctx, 20);
            this.state = 6137;
            this.match(MySQLParser.TRIM);
            break;
        case MySQLParser.UTC_DATE:
            this.enterOuterAlt(localctx, 21);
            this.state = 6138;
            this.match(MySQLParser.UTC_DATE);
            break;
        case MySQLParser.UTC_TIME:
            this.enterOuterAlt(localctx, 22);
            this.state = 6139;
            this.match(MySQLParser.UTC_TIME);
            break;
        case MySQLParser.UTC_TIMESTAMP:
            this.enterOuterAlt(localctx, 23);
            this.state = 6140;
            this.match(MySQLParser.UTC_TIMESTAMP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PasswordFunctionClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_passwordFunctionClause;
    this.functionName = null; // Token
    return this;
}

PasswordFunctionClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PasswordFunctionClauseContext.prototype.constructor = PasswordFunctionClauseContext;

PasswordFunctionClauseContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

PasswordFunctionClauseContext.prototype.functionArg = function() {
    return this.getTypedRuleContext(FunctionArgContext,0);
};

PasswordFunctionClauseContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

PasswordFunctionClauseContext.prototype.PASSWORD = function() {
    return this.getToken(MySQLParser.PASSWORD, 0);
};

PasswordFunctionClauseContext.prototype.OLD_PASSWORD = function() {
    return this.getToken(MySQLParser.OLD_PASSWORD, 0);
};

PasswordFunctionClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPasswordFunctionClause(this);
	}
};

PasswordFunctionClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPasswordFunctionClause(this);
	}
};

PasswordFunctionClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPasswordFunctionClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PasswordFunctionClauseContext = PasswordFunctionClauseContext;

MySQLParser.prototype.passwordFunctionClause = function() {

    var localctx = new PasswordFunctionClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 594, MySQLParser.RULE_passwordFunctionClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6143;
        localctx.functionName = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.OLD_PASSWORD || _la===MySQLParser.PASSWORD)) {
            localctx.functionName = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 6144;
        this.match(MySQLParser.LR_BRACKET);
        this.state = 6145;
        this.functionArg();
        this.state = 6146;
        this.match(MySQLParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionArgsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_functionArgs;
    return this;
}

FunctionArgsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionArgsContext.prototype.constructor = FunctionArgsContext;

FunctionArgsContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

FunctionArgsContext.prototype.fullColumnName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FullColumnNameContext);
    } else {
        return this.getTypedRuleContext(FullColumnNameContext,i);
    }
};

FunctionArgsContext.prototype.functionCall = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunctionCallContext);
    } else {
        return this.getTypedRuleContext(FunctionCallContext,i);
    }
};

FunctionArgsContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FunctionArgsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};


FunctionArgsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFunctionArgs(this);
	}
};

FunctionArgsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFunctionArgs(this);
	}
};

FunctionArgsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFunctionArgs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FunctionArgsContext = FunctionArgsContext;

MySQLParser.prototype.functionArgs = function() {

    var localctx = new FunctionArgsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 596, MySQLParser.RULE_functionArgs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6152;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,904,this._ctx);
        switch(la_) {
        case 1:
            this.state = 6148;
            this.constant();
            break;

        case 2:
            this.state = 6149;
            this.fullColumnName();
            break;

        case 3:
            this.state = 6150;
            this.functionCall();
            break;

        case 4:
            this.state = 6151;
            this.expression(0);
            break;

        }
        this.state = 6163;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MySQLParser.COMMA) {
            this.state = 6154;
            this.match(MySQLParser.COMMA);
            this.state = 6159;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,905,this._ctx);
            switch(la_) {
            case 1:
                this.state = 6155;
                this.constant();
                break;

            case 2:
                this.state = 6156;
                this.fullColumnName();
                break;

            case 3:
                this.state = 6157;
                this.functionCall();
                break;

            case 4:
                this.state = 6158;
                this.expression(0);
                break;

            }
            this.state = 6165;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionArgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_functionArg;
    return this;
}

FunctionArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionArgContext.prototype.constructor = FunctionArgContext;

FunctionArgContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

FunctionArgContext.prototype.fullColumnName = function() {
    return this.getTypedRuleContext(FullColumnNameContext,0);
};

FunctionArgContext.prototype.functionCall = function() {
    return this.getTypedRuleContext(FunctionCallContext,0);
};

FunctionArgContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FunctionArgContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFunctionArg(this);
	}
};

FunctionArgContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFunctionArg(this);
	}
};

FunctionArgContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFunctionArg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FunctionArgContext = FunctionArgContext;

MySQLParser.prototype.functionArg = function() {

    var localctx = new FunctionArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 598, MySQLParser.RULE_functionArg);
    try {
        this.state = 6170;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,907,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6166;
            this.constant();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6167;
            this.fullColumnName();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 6168;
            this.functionCall();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 6169;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function IsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.testValue = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IsExpressionContext.prototype.constructor = IsExpressionContext;

MySQLParser.IsExpressionContext = IsExpressionContext;

IsExpressionContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

IsExpressionContext.prototype.IS = function() {
    return this.getToken(MySQLParser.IS, 0);
};

IsExpressionContext.prototype.TRUE = function() {
    return this.getToken(MySQLParser.TRUE, 0);
};

IsExpressionContext.prototype.FALSE = function() {
    return this.getToken(MySQLParser.FALSE, 0);
};

IsExpressionContext.prototype.UNKNOWN = function() {
    return this.getToken(MySQLParser.UNKNOWN, 0);
};

IsExpressionContext.prototype.NOT = function() {
    return this.getToken(MySQLParser.NOT, 0);
};
IsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIsExpression(this);
	}
};

IsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIsExpression(this);
	}
};

IsExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIsExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NotExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.notOperator = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotExpressionContext.prototype.constructor = NotExpressionContext;

MySQLParser.NotExpressionContext = NotExpressionContext;

NotExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NotExpressionContext.prototype.NOT = function() {
    return this.getToken(MySQLParser.NOT, 0);
};

NotExpressionContext.prototype.EXCLAMATION_SYMBOL = function() {
    return this.getToken(MySQLParser.EXCLAMATION_SYMBOL, 0);
};
NotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNotExpression(this);
	}
};

NotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNotExpression(this);
	}
};

NotExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNotExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LogicalExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalExpressionContext.prototype = Object.create(ExpressionContext.prototype);
LogicalExpressionContext.prototype.constructor = LogicalExpressionContext;

MySQLParser.LogicalExpressionContext = LogicalExpressionContext;

LogicalExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

LogicalExpressionContext.prototype.logicalOperator = function() {
    return this.getTypedRuleContext(LogicalOperatorContext,0);
};
LogicalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLogicalExpression(this);
	}
};

LogicalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLogicalExpression(this);
	}
};

LogicalExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLogicalExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PredicateExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PredicateExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PredicateExpressionContext.prototype.constructor = PredicateExpressionContext;

MySQLParser.PredicateExpressionContext = PredicateExpressionContext;

PredicateExpressionContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};
PredicateExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPredicateExpression(this);
	}
};

PredicateExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPredicateExpression(this);
	}
};

PredicateExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPredicateExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 600;
    this.enterRecursionRule(localctx, 600, MySQLParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6183;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,909,this._ctx);
        switch(la_) {
        case 1:
            localctx = new NotExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 6173;
            localctx.notOperator = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.NOT || _la===MySQLParser.EXCLAMATION_SYMBOL)) {
                localctx.notOperator = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6174;
            this.expression(4);
            break;

        case 2:
            localctx = new IsExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 6175;
            this.predicate(0);
            this.state = 6176;
            this.match(MySQLParser.IS);
            this.state = 6178;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===MySQLParser.NOT) {
                this.state = 6177;
                this.match(MySQLParser.NOT);
            }

            this.state = 6180;
            localctx.testValue = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===MySQLParser.FALSE || _la===MySQLParser.TRUE || _la===MySQLParser.UNKNOWN)) {
                localctx.testValue = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 3:
            localctx = new PredicateExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 6182;
            this.predicate(0);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 6191;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,910,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new LogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expression);
                this.state = 6185;
                if (!( this.precpred(this._ctx, 3))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                }
                this.state = 6186;
                this.logicalOperator();
                this.state = 6187;
                this.expression(4); 
            }
            this.state = 6193;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,910,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_predicate;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;


 
PredicateContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function SoundsLikePredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SoundsLikePredicateContext.prototype = Object.create(PredicateContext.prototype);
SoundsLikePredicateContext.prototype.constructor = SoundsLikePredicateContext;

MySQLParser.SoundsLikePredicateContext = SoundsLikePredicateContext;

SoundsLikePredicateContext.prototype.predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateContext);
    } else {
        return this.getTypedRuleContext(PredicateContext,i);
    }
};

SoundsLikePredicateContext.prototype.SOUNDS = function() {
    return this.getToken(MySQLParser.SOUNDS, 0);
};

SoundsLikePredicateContext.prototype.LIKE = function() {
    return this.getToken(MySQLParser.LIKE, 0);
};
SoundsLikePredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSoundsLikePredicate(this);
	}
};

SoundsLikePredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSoundsLikePredicate(this);
	}
};

SoundsLikePredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSoundsLikePredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExpressionAtomPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExpressionAtomPredicateContext.prototype = Object.create(PredicateContext.prototype);
ExpressionAtomPredicateContext.prototype.constructor = ExpressionAtomPredicateContext;

MySQLParser.ExpressionAtomPredicateContext = ExpressionAtomPredicateContext;

ExpressionAtomPredicateContext.prototype.expressionAtom = function() {
    return this.getTypedRuleContext(ExpressionAtomContext,0);
};

ExpressionAtomPredicateContext.prototype.LOCAL_ID = function() {
    return this.getToken(MySQLParser.LOCAL_ID, 0);
};

ExpressionAtomPredicateContext.prototype.VAR_ASSIGN = function() {
    return this.getToken(MySQLParser.VAR_ASSIGN, 0);
};
ExpressionAtomPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExpressionAtomPredicate(this);
	}
};

ExpressionAtomPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExpressionAtomPredicate(this);
	}
};

ExpressionAtomPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExpressionAtomPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InPredicateContext.prototype = Object.create(PredicateContext.prototype);
InPredicateContext.prototype.constructor = InPredicateContext;

MySQLParser.InPredicateContext = InPredicateContext;

InPredicateContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

InPredicateContext.prototype.IN = function() {
    return this.getToken(MySQLParser.IN, 0);
};

InPredicateContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

InPredicateContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

InPredicateContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

InPredicateContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

InPredicateContext.prototype.NOT = function() {
    return this.getToken(MySQLParser.NOT, 0);
};
InPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterInPredicate(this);
	}
};

InPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitInPredicate(this);
	}
};

InPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitInPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SubqueryComparasionPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.quantifier = null; // Token;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryComparasionPredicateContext.prototype = Object.create(PredicateContext.prototype);
SubqueryComparasionPredicateContext.prototype.constructor = SubqueryComparasionPredicateContext;

MySQLParser.SubqueryComparasionPredicateContext = SubqueryComparasionPredicateContext;

SubqueryComparasionPredicateContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

SubqueryComparasionPredicateContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

SubqueryComparasionPredicateContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

SubqueryComparasionPredicateContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

SubqueryComparasionPredicateContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

SubqueryComparasionPredicateContext.prototype.ALL = function() {
    return this.getToken(MySQLParser.ALL, 0);
};

SubqueryComparasionPredicateContext.prototype.ANY = function() {
    return this.getToken(MySQLParser.ANY, 0);
};

SubqueryComparasionPredicateContext.prototype.SOME = function() {
    return this.getToken(MySQLParser.SOME, 0);
};
SubqueryComparasionPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSubqueryComparasionPredicate(this);
	}
};

SubqueryComparasionPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSubqueryComparasionPredicate(this);
	}
};

SubqueryComparasionPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSubqueryComparasionPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BetweenPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BetweenPredicateContext.prototype = Object.create(PredicateContext.prototype);
BetweenPredicateContext.prototype.constructor = BetweenPredicateContext;

MySQLParser.BetweenPredicateContext = BetweenPredicateContext;

BetweenPredicateContext.prototype.predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateContext);
    } else {
        return this.getTypedRuleContext(PredicateContext,i);
    }
};

BetweenPredicateContext.prototype.BETWEEN = function() {
    return this.getToken(MySQLParser.BETWEEN, 0);
};

BetweenPredicateContext.prototype.AND = function() {
    return this.getToken(MySQLParser.AND, 0);
};

BetweenPredicateContext.prototype.NOT = function() {
    return this.getToken(MySQLParser.NOT, 0);
};
BetweenPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterBetweenPredicate(this);
	}
};

BetweenPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitBetweenPredicate(this);
	}
};

BetweenPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitBetweenPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BinaryComparasionPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.left = null; // PredicateContext;
    this.right = null; // PredicateContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BinaryComparasionPredicateContext.prototype = Object.create(PredicateContext.prototype);
BinaryComparasionPredicateContext.prototype.constructor = BinaryComparasionPredicateContext;

MySQLParser.BinaryComparasionPredicateContext = BinaryComparasionPredicateContext;

BinaryComparasionPredicateContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

BinaryComparasionPredicateContext.prototype.predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateContext);
    } else {
        return this.getTypedRuleContext(PredicateContext,i);
    }
};
BinaryComparasionPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterBinaryComparasionPredicate(this);
	}
};

BinaryComparasionPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitBinaryComparasionPredicate(this);
	}
};

BinaryComparasionPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitBinaryComparasionPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IsNullPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsNullPredicateContext.prototype = Object.create(PredicateContext.prototype);
IsNullPredicateContext.prototype.constructor = IsNullPredicateContext;

MySQLParser.IsNullPredicateContext = IsNullPredicateContext;

IsNullPredicateContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

IsNullPredicateContext.prototype.IS = function() {
    return this.getToken(MySQLParser.IS, 0);
};

IsNullPredicateContext.prototype.nullNotnull = function() {
    return this.getTypedRuleContext(NullNotnullContext,0);
};
IsNullPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIsNullPredicate(this);
	}
};

IsNullPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIsNullPredicate(this);
	}
};

IsNullPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIsNullPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LikePredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LikePredicateContext.prototype = Object.create(PredicateContext.prototype);
LikePredicateContext.prototype.constructor = LikePredicateContext;

MySQLParser.LikePredicateContext = LikePredicateContext;

LikePredicateContext.prototype.predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateContext);
    } else {
        return this.getTypedRuleContext(PredicateContext,i);
    }
};

LikePredicateContext.prototype.LIKE = function() {
    return this.getToken(MySQLParser.LIKE, 0);
};

LikePredicateContext.prototype.NOT = function() {
    return this.getToken(MySQLParser.NOT, 0);
};

LikePredicateContext.prototype.ESCAPE = function() {
    return this.getToken(MySQLParser.ESCAPE, 0);
};

LikePredicateContext.prototype.STRING_LITERAL = function() {
    return this.getToken(MySQLParser.STRING_LITERAL, 0);
};
LikePredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLikePredicate(this);
	}
};

LikePredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLikePredicate(this);
	}
};

LikePredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLikePredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RegexpPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.regex = null; // Token;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RegexpPredicateContext.prototype = Object.create(PredicateContext.prototype);
RegexpPredicateContext.prototype.constructor = RegexpPredicateContext;

MySQLParser.RegexpPredicateContext = RegexpPredicateContext;

RegexpPredicateContext.prototype.predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateContext);
    } else {
        return this.getTypedRuleContext(PredicateContext,i);
    }
};

RegexpPredicateContext.prototype.REGEXP = function() {
    return this.getToken(MySQLParser.REGEXP, 0);
};

RegexpPredicateContext.prototype.RLIKE = function() {
    return this.getToken(MySQLParser.RLIKE, 0);
};

RegexpPredicateContext.prototype.NOT = function() {
    return this.getToken(MySQLParser.NOT, 0);
};
RegexpPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterRegexpPredicate(this);
	}
};

RegexpPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitRegexpPredicate(this);
	}
};

RegexpPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitRegexpPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.prototype.predicate = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PredicateContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 602;
    this.enterRecursionRule(localctx, 602, MySQLParser.RULE_predicate, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new ExpressionAtomPredicateContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 6197;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,911,this._ctx);
        if(la_===1) {
            this.state = 6195;
            this.match(MySQLParser.LOCAL_ID);
            this.state = 6196;
            this.match(MySQLParser.VAR_ASSIGN);

        }
        this.state = 6199;
        this.expressionAtom(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 6258;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,919,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 6256;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,918,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new BinaryComparasionPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_predicate);
                    this.state = 6201;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 6202;
                    this.comparisonOperator();
                    this.state = 6203;
                    localctx.right = this.predicate(8);
                    break;

                case 2:
                    localctx = new BetweenPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_predicate);
                    this.state = 6205;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 6207;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===MySQLParser.NOT) {
                        this.state = 6206;
                        this.match(MySQLParser.NOT);
                    }

                    this.state = 6209;
                    this.match(MySQLParser.BETWEEN);
                    this.state = 6210;
                    this.predicate(0);
                    this.state = 6211;
                    this.match(MySQLParser.AND);
                    this.state = 6212;
                    this.predicate(6);
                    break;

                case 3:
                    localctx = new SoundsLikePredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_predicate);
                    this.state = 6214;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 6215;
                    this.match(MySQLParser.SOUNDS);
                    this.state = 6216;
                    this.match(MySQLParser.LIKE);
                    this.state = 6217;
                    this.predicate(5);
                    break;

                case 4:
                    localctx = new RegexpPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_predicate);
                    this.state = 6218;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 6220;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===MySQLParser.NOT) {
                        this.state = 6219;
                        this.match(MySQLParser.NOT);
                    }

                    this.state = 6222;
                    localctx.regex = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===MySQLParser.REGEXP || _la===MySQLParser.RLIKE)) {
                        localctx.regex = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 6223;
                    this.predicate(3);
                    break;

                case 5:
                    localctx = new InPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_predicate);
                    this.state = 6224;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 6226;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===MySQLParser.NOT) {
                        this.state = 6225;
                        this.match(MySQLParser.NOT);
                    }

                    this.state = 6228;
                    this.match(MySQLParser.IN);
                    this.state = 6229;
                    this.match(MySQLParser.LR_BRACKET);
                    this.state = 6232;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,915,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 6230;
                        this.selectStatement();
                        break;

                    case 2:
                        this.state = 6231;
                        this.expressions();
                        break;

                    }
                    this.state = 6234;
                    this.match(MySQLParser.RR_BRACKET);
                    break;

                case 6:
                    localctx = new IsNullPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_predicate);
                    this.state = 6236;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 6237;
                    this.match(MySQLParser.IS);
                    this.state = 6238;
                    this.nullNotnull();
                    break;

                case 7:
                    localctx = new SubqueryComparasionPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_predicate);
                    this.state = 6239;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 6240;
                    this.comparisonOperator();
                    this.state = 6241;
                    localctx.quantifier = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===MySQLParser.ALL || _la===MySQLParser.ANY || _la===MySQLParser.SOME)) {
                        localctx.quantifier = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 6242;
                    this.match(MySQLParser.LR_BRACKET);
                    this.state = 6243;
                    this.selectStatement();
                    this.state = 6244;
                    this.match(MySQLParser.RR_BRACKET);
                    break;

                case 8:
                    localctx = new LikePredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_predicate);
                    this.state = 6246;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 6248;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===MySQLParser.NOT) {
                        this.state = 6247;
                        this.match(MySQLParser.NOT);
                    }

                    this.state = 6250;
                    this.match(MySQLParser.LIKE);
                    this.state = 6251;
                    this.predicate(0);
                    this.state = 6254;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,917,this._ctx);
                    if(la_===1) {
                        this.state = 6252;
                        this.match(MySQLParser.ESCAPE);
                        this.state = 6253;
                        this.match(MySQLParser.STRING_LITERAL);

                    }
                    break;

                } 
            }
            this.state = 6260;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,919,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ExpressionAtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_expressionAtom;
    return this;
}

ExpressionAtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionAtomContext.prototype.constructor = ExpressionAtomContext;


 
ExpressionAtomContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function UnaryExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
UnaryExpressionAtomContext.prototype.constructor = UnaryExpressionAtomContext;

MySQLParser.UnaryExpressionAtomContext = UnaryExpressionAtomContext;

UnaryExpressionAtomContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

UnaryExpressionAtomContext.prototype.expressionAtom = function() {
    return this.getTypedRuleContext(ExpressionAtomContext,0);
};
UnaryExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUnaryExpressionAtom(this);
	}
};

UnaryExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUnaryExpressionAtom(this);
	}
};

UnaryExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUnaryExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CollateExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CollateExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
CollateExpressionAtomContext.prototype.constructor = CollateExpressionAtomContext;

MySQLParser.CollateExpressionAtomContext = CollateExpressionAtomContext;

CollateExpressionAtomContext.prototype.expressionAtom = function() {
    return this.getTypedRuleContext(ExpressionAtomContext,0);
};

CollateExpressionAtomContext.prototype.COLLATE = function() {
    return this.getToken(MySQLParser.COLLATE, 0);
};

CollateExpressionAtomContext.prototype.collationName = function() {
    return this.getTypedRuleContext(CollationNameContext,0);
};
CollateExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCollateExpressionAtom(this);
	}
};

CollateExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCollateExpressionAtom(this);
	}
};

CollateExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCollateExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SubqueryExpessionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryExpessionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
SubqueryExpessionAtomContext.prototype.constructor = SubqueryExpessionAtomContext;

MySQLParser.SubqueryExpessionAtomContext = SubqueryExpessionAtomContext;

SubqueryExpessionAtomContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

SubqueryExpessionAtomContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

SubqueryExpessionAtomContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};
SubqueryExpessionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterSubqueryExpessionAtom(this);
	}
};

SubqueryExpessionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitSubqueryExpessionAtom(this);
	}
};

SubqueryExpessionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitSubqueryExpessionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MysqlVariableExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MysqlVariableExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
MysqlVariableExpressionAtomContext.prototype.constructor = MysqlVariableExpressionAtomContext;

MySQLParser.MysqlVariableExpressionAtomContext = MysqlVariableExpressionAtomContext;

MysqlVariableExpressionAtomContext.prototype.mysqlVariable = function() {
    return this.getTypedRuleContext(MysqlVariableContext,0);
};
MysqlVariableExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterMysqlVariableExpressionAtom(this);
	}
};

MysqlVariableExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitMysqlVariableExpressionAtom(this);
	}
};

MysqlVariableExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitMysqlVariableExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NestedExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NestedExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
NestedExpressionAtomContext.prototype.constructor = NestedExpressionAtomContext;

MySQLParser.NestedExpressionAtomContext = NestedExpressionAtomContext;

NestedExpressionAtomContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

NestedExpressionAtomContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

NestedExpressionAtomContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

NestedExpressionAtomContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

NestedExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNestedExpressionAtom(this);
	}
};

NestedExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNestedExpressionAtom(this);
	}
};

NestedExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNestedExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NestedRowExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NestedRowExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
NestedRowExpressionAtomContext.prototype.constructor = NestedRowExpressionAtomContext;

MySQLParser.NestedRowExpressionAtomContext = NestedRowExpressionAtomContext;

NestedRowExpressionAtomContext.prototype.ROW = function() {
    return this.getToken(MySQLParser.ROW, 0);
};

NestedRowExpressionAtomContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

NestedRowExpressionAtomContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

NestedRowExpressionAtomContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};

NestedRowExpressionAtomContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.COMMA);
    } else {
        return this.getToken(MySQLParser.COMMA, i);
    }
};

NestedRowExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterNestedRowExpressionAtom(this);
	}
};

NestedRowExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitNestedRowExpressionAtom(this);
	}
};

NestedRowExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitNestedRowExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MathExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    this.left = null; // ExpressionAtomContext;
    this.right = null; // ExpressionAtomContext;
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MathExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
MathExpressionAtomContext.prototype.constructor = MathExpressionAtomContext;

MySQLParser.MathExpressionAtomContext = MathExpressionAtomContext;

MathExpressionAtomContext.prototype.mathOperator = function() {
    return this.getTypedRuleContext(MathOperatorContext,0);
};

MathExpressionAtomContext.prototype.expressionAtom = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionAtomContext);
    } else {
        return this.getTypedRuleContext(ExpressionAtomContext,i);
    }
};
MathExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterMathExpressionAtom(this);
	}
};

MathExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitMathExpressionAtom(this);
	}
};

MathExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitMathExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IntervalExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntervalExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
IntervalExpressionAtomContext.prototype.constructor = IntervalExpressionAtomContext;

MySQLParser.IntervalExpressionAtomContext = IntervalExpressionAtomContext;

IntervalExpressionAtomContext.prototype.INTERVAL = function() {
    return this.getToken(MySQLParser.INTERVAL, 0);
};

IntervalExpressionAtomContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IntervalExpressionAtomContext.prototype.intervalType = function() {
    return this.getTypedRuleContext(IntervalTypeContext,0);
};
IntervalExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIntervalExpressionAtom(this);
	}
};

IntervalExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIntervalExpressionAtom(this);
	}
};

IntervalExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIntervalExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExistsExpessionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExistsExpessionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
ExistsExpessionAtomContext.prototype.constructor = ExistsExpessionAtomContext;

MySQLParser.ExistsExpessionAtomContext = ExistsExpessionAtomContext;

ExistsExpessionAtomContext.prototype.EXISTS = function() {
    return this.getToken(MySQLParser.EXISTS, 0);
};

ExistsExpessionAtomContext.prototype.LR_BRACKET = function() {
    return this.getToken(MySQLParser.LR_BRACKET, 0);
};

ExistsExpessionAtomContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

ExistsExpessionAtomContext.prototype.RR_BRACKET = function() {
    return this.getToken(MySQLParser.RR_BRACKET, 0);
};
ExistsExpessionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterExistsExpessionAtom(this);
	}
};

ExistsExpessionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitExistsExpessionAtom(this);
	}
};

ExistsExpessionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitExistsExpessionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConstantExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstantExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
ConstantExpressionAtomContext.prototype.constructor = ConstantExpressionAtomContext;

MySQLParser.ConstantExpressionAtomContext = ConstantExpressionAtomContext;

ConstantExpressionAtomContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};
ConstantExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterConstantExpressionAtom(this);
	}
};

ConstantExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitConstantExpressionAtom(this);
	}
};

ConstantExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitConstantExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FunctionCallExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionCallExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
FunctionCallExpressionAtomContext.prototype.constructor = FunctionCallExpressionAtomContext;

MySQLParser.FunctionCallExpressionAtomContext = FunctionCallExpressionAtomContext;

FunctionCallExpressionAtomContext.prototype.functionCall = function() {
    return this.getTypedRuleContext(FunctionCallContext,0);
};
FunctionCallExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFunctionCallExpressionAtom(this);
	}
};

FunctionCallExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFunctionCallExpressionAtom(this);
	}
};

FunctionCallExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFunctionCallExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BinaryExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BinaryExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
BinaryExpressionAtomContext.prototype.constructor = BinaryExpressionAtomContext;

MySQLParser.BinaryExpressionAtomContext = BinaryExpressionAtomContext;

BinaryExpressionAtomContext.prototype.BINARY = function() {
    return this.getToken(MySQLParser.BINARY, 0);
};

BinaryExpressionAtomContext.prototype.expressionAtom = function() {
    return this.getTypedRuleContext(ExpressionAtomContext,0);
};
BinaryExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterBinaryExpressionAtom(this);
	}
};

BinaryExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitBinaryExpressionAtom(this);
	}
};

BinaryExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitBinaryExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FullColumnNameExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FullColumnNameExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
FullColumnNameExpressionAtomContext.prototype.constructor = FullColumnNameExpressionAtomContext;

MySQLParser.FullColumnNameExpressionAtomContext = FullColumnNameExpressionAtomContext;

FullColumnNameExpressionAtomContext.prototype.fullColumnName = function() {
    return this.getTypedRuleContext(FullColumnNameContext,0);
};
FullColumnNameExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFullColumnNameExpressionAtom(this);
	}
};

FullColumnNameExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFullColumnNameExpressionAtom(this);
	}
};

FullColumnNameExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFullColumnNameExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    this.left = null; // ExpressionAtomContext;
    this.right = null; // ExpressionAtomContext;
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
BitExpressionAtomContext.prototype.constructor = BitExpressionAtomContext;

MySQLParser.BitExpressionAtomContext = BitExpressionAtomContext;

BitExpressionAtomContext.prototype.bitOperator = function() {
    return this.getTypedRuleContext(BitOperatorContext,0);
};

BitExpressionAtomContext.prototype.expressionAtom = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionAtomContext);
    } else {
        return this.getTypedRuleContext(ExpressionAtomContext,i);
    }
};
BitExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterBitExpressionAtom(this);
	}
};

BitExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitBitExpressionAtom(this);
	}
};

BitExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitBitExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};



MySQLParser.prototype.expressionAtom = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionAtomContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 604;
    this.enterRecursionRule(localctx, 604, MySQLParser.RULE_expressionAtom, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6306;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,922,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ConstantExpressionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 6262;
            this.constant();
            break;

        case 2:
            localctx = new FullColumnNameExpressionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 6263;
            this.fullColumnName();
            break;

        case 3:
            localctx = new FunctionCallExpressionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 6264;
            this.functionCall();
            break;

        case 4:
            localctx = new MysqlVariableExpressionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 6265;
            this.mysqlVariable();
            break;

        case 5:
            localctx = new UnaryExpressionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 6266;
            this.unaryOperator();
            this.state = 6267;
            this.expressionAtom(9);
            break;

        case 6:
            localctx = new BinaryExpressionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 6269;
            this.match(MySQLParser.BINARY);
            this.state = 6270;
            this.expressionAtom(8);
            break;

        case 7:
            localctx = new NestedExpressionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 6271;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 6272;
            this.expression(0);
            this.state = 6277;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===MySQLParser.COMMA) {
                this.state = 6273;
                this.match(MySQLParser.COMMA);
                this.state = 6274;
                this.expression(0);
                this.state = 6279;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 6280;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 8:
            localctx = new NestedRowExpressionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 6282;
            this.match(MySQLParser.ROW);
            this.state = 6283;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 6284;
            this.expression(0);
            this.state = 6287; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 6285;
                this.match(MySQLParser.COMMA);
                this.state = 6286;
                this.expression(0);
                this.state = 6289; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===MySQLParser.COMMA);
            this.state = 6291;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 9:
            localctx = new ExistsExpessionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 6293;
            this.match(MySQLParser.EXISTS);
            this.state = 6294;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 6295;
            this.selectStatement();
            this.state = 6296;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 10:
            localctx = new SubqueryExpessionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 6298;
            this.match(MySQLParser.LR_BRACKET);
            this.state = 6299;
            this.selectStatement();
            this.state = 6300;
            this.match(MySQLParser.RR_BRACKET);
            break;

        case 11:
            localctx = new IntervalExpressionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 6302;
            this.match(MySQLParser.INTERVAL);
            this.state = 6303;
            this.expression(0);
            this.state = 6304;
            this.intervalType();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 6321;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,924,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 6319;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,923,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new BitExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expressionAtom);
                    this.state = 6308;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 6309;
                    this.bitOperator();
                    this.state = 6310;
                    localctx.right = this.expressionAtom(3);
                    break;

                case 2:
                    localctx = new MathExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expressionAtom);
                    this.state = 6312;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 6313;
                    this.mathOperator();
                    this.state = 6314;
                    localctx.right = this.expressionAtom(2);
                    break;

                case 3:
                    localctx = new CollateExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expressionAtom);
                    this.state = 6316;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 6317;
                    this.match(MySQLParser.COLLATE);
                    this.state = 6318;
                    this.collationName();
                    break;

                } 
            }
            this.state = 6323;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,924,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function UnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_unaryOperator;
    return this;
}

UnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOperatorContext.prototype.constructor = UnaryOperatorContext;

UnaryOperatorContext.prototype.EXCLAMATION_SYMBOL = function() {
    return this.getToken(MySQLParser.EXCLAMATION_SYMBOL, 0);
};

UnaryOperatorContext.prototype.BIT_NOT_OP = function() {
    return this.getToken(MySQLParser.BIT_NOT_OP, 0);
};

UnaryOperatorContext.prototype.PLUS = function() {
    return this.getToken(MySQLParser.PLUS, 0);
};

UnaryOperatorContext.prototype.MINUS = function() {
    return this.getToken(MySQLParser.MINUS, 0);
};

UnaryOperatorContext.prototype.NOT = function() {
    return this.getToken(MySQLParser.NOT, 0);
};

UnaryOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitUnaryOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.UnaryOperatorContext = UnaryOperatorContext;

MySQLParser.prototype.unaryOperator = function() {

    var localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 606, MySQLParser.RULE_unaryOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6324;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.NOT || ((((_la - 1006)) & ~0x1f) == 0 && ((1 << (_la - 1006)) & ((1 << (MySQLParser.PLUS - 1006)) | (1 << (MySQLParser.MINUS - 1006)) | (1 << (MySQLParser.EXCLAMATION_SYMBOL - 1006)) | (1 << (MySQLParser.BIT_NOT_OP - 1006)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparisonOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_comparisonOperator;
    return this;
}

ComparisonOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonOperatorContext.prototype.constructor = ComparisonOperatorContext;

ComparisonOperatorContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(MySQLParser.EQUAL_SYMBOL, 0);
};

ComparisonOperatorContext.prototype.GREATER_SYMBOL = function() {
    return this.getToken(MySQLParser.GREATER_SYMBOL, 0);
};

ComparisonOperatorContext.prototype.LESS_SYMBOL = function() {
    return this.getToken(MySQLParser.LESS_SYMBOL, 0);
};

ComparisonOperatorContext.prototype.EXCLAMATION_SYMBOL = function() {
    return this.getToken(MySQLParser.EXCLAMATION_SYMBOL, 0);
};

ComparisonOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitComparisonOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.ComparisonOperatorContext = ComparisonOperatorContext;

MySQLParser.prototype.comparisonOperator = function() {

    var localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 608, MySQLParser.RULE_comparisonOperator);
    try {
        this.state = 6340;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,925,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6326;
            this.match(MySQLParser.EQUAL_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6327;
            this.match(MySQLParser.GREATER_SYMBOL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 6328;
            this.match(MySQLParser.LESS_SYMBOL);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 6329;
            this.match(MySQLParser.LESS_SYMBOL);
            this.state = 6330;
            this.match(MySQLParser.EQUAL_SYMBOL);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 6331;
            this.match(MySQLParser.GREATER_SYMBOL);
            this.state = 6332;
            this.match(MySQLParser.EQUAL_SYMBOL);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 6333;
            this.match(MySQLParser.LESS_SYMBOL);
            this.state = 6334;
            this.match(MySQLParser.GREATER_SYMBOL);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 6335;
            this.match(MySQLParser.EXCLAMATION_SYMBOL);
            this.state = 6336;
            this.match(MySQLParser.EQUAL_SYMBOL);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 6337;
            this.match(MySQLParser.LESS_SYMBOL);
            this.state = 6338;
            this.match(MySQLParser.EQUAL_SYMBOL);
            this.state = 6339;
            this.match(MySQLParser.GREATER_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LogicalOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_logicalOperator;
    return this;
}

LogicalOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalOperatorContext.prototype.constructor = LogicalOperatorContext;

LogicalOperatorContext.prototype.AND = function() {
    return this.getToken(MySQLParser.AND, 0);
};

LogicalOperatorContext.prototype.BIT_AND_OP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.BIT_AND_OP);
    } else {
        return this.getToken(MySQLParser.BIT_AND_OP, i);
    }
};


LogicalOperatorContext.prototype.XOR = function() {
    return this.getToken(MySQLParser.XOR, 0);
};

LogicalOperatorContext.prototype.OR = function() {
    return this.getToken(MySQLParser.OR, 0);
};

LogicalOperatorContext.prototype.BIT_OR_OP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.BIT_OR_OP);
    } else {
        return this.getToken(MySQLParser.BIT_OR_OP, i);
    }
};


LogicalOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterLogicalOperator(this);
	}
};

LogicalOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitLogicalOperator(this);
	}
};

LogicalOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitLogicalOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.LogicalOperatorContext = LogicalOperatorContext;

MySQLParser.prototype.logicalOperator = function() {

    var localctx = new LogicalOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 610, MySQLParser.RULE_logicalOperator);
    try {
        this.state = 6349;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.AND:
            this.enterOuterAlt(localctx, 1);
            this.state = 6342;
            this.match(MySQLParser.AND);
            break;
        case MySQLParser.BIT_AND_OP:
            this.enterOuterAlt(localctx, 2);
            this.state = 6343;
            this.match(MySQLParser.BIT_AND_OP);
            this.state = 6344;
            this.match(MySQLParser.BIT_AND_OP);
            break;
        case MySQLParser.XOR:
            this.enterOuterAlt(localctx, 3);
            this.state = 6345;
            this.match(MySQLParser.XOR);
            break;
        case MySQLParser.OR:
            this.enterOuterAlt(localctx, 4);
            this.state = 6346;
            this.match(MySQLParser.OR);
            break;
        case MySQLParser.BIT_OR_OP:
            this.enterOuterAlt(localctx, 5);
            this.state = 6347;
            this.match(MySQLParser.BIT_OR_OP);
            this.state = 6348;
            this.match(MySQLParser.BIT_OR_OP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BitOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_bitOperator;
    return this;
}

BitOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitOperatorContext.prototype.constructor = BitOperatorContext;

BitOperatorContext.prototype.LESS_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.LESS_SYMBOL);
    } else {
        return this.getToken(MySQLParser.LESS_SYMBOL, i);
    }
};


BitOperatorContext.prototype.GREATER_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MySQLParser.GREATER_SYMBOL);
    } else {
        return this.getToken(MySQLParser.GREATER_SYMBOL, i);
    }
};


BitOperatorContext.prototype.BIT_AND_OP = function() {
    return this.getToken(MySQLParser.BIT_AND_OP, 0);
};

BitOperatorContext.prototype.BIT_XOR_OP = function() {
    return this.getToken(MySQLParser.BIT_XOR_OP, 0);
};

BitOperatorContext.prototype.BIT_OR_OP = function() {
    return this.getToken(MySQLParser.BIT_OR_OP, 0);
};

BitOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterBitOperator(this);
	}
};

BitOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitBitOperator(this);
	}
};

BitOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitBitOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.BitOperatorContext = BitOperatorContext;

MySQLParser.prototype.bitOperator = function() {

    var localctx = new BitOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 612, MySQLParser.RULE_bitOperator);
    try {
        this.state = 6358;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MySQLParser.LESS_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 6351;
            this.match(MySQLParser.LESS_SYMBOL);
            this.state = 6352;
            this.match(MySQLParser.LESS_SYMBOL);
            break;
        case MySQLParser.GREATER_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 6353;
            this.match(MySQLParser.GREATER_SYMBOL);
            this.state = 6354;
            this.match(MySQLParser.GREATER_SYMBOL);
            break;
        case MySQLParser.BIT_AND_OP:
            this.enterOuterAlt(localctx, 3);
            this.state = 6355;
            this.match(MySQLParser.BIT_AND_OP);
            break;
        case MySQLParser.BIT_XOR_OP:
            this.enterOuterAlt(localctx, 4);
            this.state = 6356;
            this.match(MySQLParser.BIT_XOR_OP);
            break;
        case MySQLParser.BIT_OR_OP:
            this.enterOuterAlt(localctx, 5);
            this.state = 6357;
            this.match(MySQLParser.BIT_OR_OP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_mathOperator;
    return this;
}

MathOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathOperatorContext.prototype.constructor = MathOperatorContext;

MathOperatorContext.prototype.STAR = function() {
    return this.getToken(MySQLParser.STAR, 0);
};

MathOperatorContext.prototype.DIVIDE = function() {
    return this.getToken(MySQLParser.DIVIDE, 0);
};

MathOperatorContext.prototype.MODULE = function() {
    return this.getToken(MySQLParser.MODULE, 0);
};

MathOperatorContext.prototype.DIV = function() {
    return this.getToken(MySQLParser.DIV, 0);
};

MathOperatorContext.prototype.MOD = function() {
    return this.getToken(MySQLParser.MOD, 0);
};

MathOperatorContext.prototype.PLUS = function() {
    return this.getToken(MySQLParser.PLUS, 0);
};

MathOperatorContext.prototype.MINUS = function() {
    return this.getToken(MySQLParser.MINUS, 0);
};

MathOperatorContext.prototype.MINUSMINUS = function() {
    return this.getToken(MySQLParser.MINUSMINUS, 0);
};

MathOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterMathOperator(this);
	}
};

MathOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitMathOperator(this);
	}
};

MathOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitMathOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.MathOperatorContext = MathOperatorContext;

MySQLParser.prototype.mathOperator = function() {

    var localctx = new MathOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 614, MySQLParser.RULE_mathOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6360;
        _la = this._input.LA(1);
        if(!(((((_la - 1003)) & ~0x1f) == 0 && ((1 << (_la - 1003)) & ((1 << (MySQLParser.STAR - 1003)) | (1 << (MySQLParser.DIVIDE - 1003)) | (1 << (MySQLParser.MODULE - 1003)) | (1 << (MySQLParser.PLUS - 1003)) | (1 << (MySQLParser.MINUSMINUS - 1003)) | (1 << (MySQLParser.MINUS - 1003)) | (1 << (MySQLParser.DIV - 1003)) | (1 << (MySQLParser.MOD - 1003)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CharsetNameBaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_charsetNameBase;
    return this;
}

CharsetNameBaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CharsetNameBaseContext.prototype.constructor = CharsetNameBaseContext;

CharsetNameBaseContext.prototype.ARMSCII8 = function() {
    return this.getToken(MySQLParser.ARMSCII8, 0);
};

CharsetNameBaseContext.prototype.ASCII = function() {
    return this.getToken(MySQLParser.ASCII, 0);
};

CharsetNameBaseContext.prototype.BIG5 = function() {
    return this.getToken(MySQLParser.BIG5, 0);
};

CharsetNameBaseContext.prototype.CP1250 = function() {
    return this.getToken(MySQLParser.CP1250, 0);
};

CharsetNameBaseContext.prototype.CP1251 = function() {
    return this.getToken(MySQLParser.CP1251, 0);
};

CharsetNameBaseContext.prototype.CP1256 = function() {
    return this.getToken(MySQLParser.CP1256, 0);
};

CharsetNameBaseContext.prototype.CP1257 = function() {
    return this.getToken(MySQLParser.CP1257, 0);
};

CharsetNameBaseContext.prototype.CP850 = function() {
    return this.getToken(MySQLParser.CP850, 0);
};

CharsetNameBaseContext.prototype.CP852 = function() {
    return this.getToken(MySQLParser.CP852, 0);
};

CharsetNameBaseContext.prototype.CP866 = function() {
    return this.getToken(MySQLParser.CP866, 0);
};

CharsetNameBaseContext.prototype.CP932 = function() {
    return this.getToken(MySQLParser.CP932, 0);
};

CharsetNameBaseContext.prototype.DEC8 = function() {
    return this.getToken(MySQLParser.DEC8, 0);
};

CharsetNameBaseContext.prototype.EUCJPMS = function() {
    return this.getToken(MySQLParser.EUCJPMS, 0);
};

CharsetNameBaseContext.prototype.EUCKR = function() {
    return this.getToken(MySQLParser.EUCKR, 0);
};

CharsetNameBaseContext.prototype.GB2312 = function() {
    return this.getToken(MySQLParser.GB2312, 0);
};

CharsetNameBaseContext.prototype.GBK = function() {
    return this.getToken(MySQLParser.GBK, 0);
};

CharsetNameBaseContext.prototype.GEOSTD8 = function() {
    return this.getToken(MySQLParser.GEOSTD8, 0);
};

CharsetNameBaseContext.prototype.GREEK = function() {
    return this.getToken(MySQLParser.GREEK, 0);
};

CharsetNameBaseContext.prototype.HEBREW = function() {
    return this.getToken(MySQLParser.HEBREW, 0);
};

CharsetNameBaseContext.prototype.HP8 = function() {
    return this.getToken(MySQLParser.HP8, 0);
};

CharsetNameBaseContext.prototype.KEYBCS2 = function() {
    return this.getToken(MySQLParser.KEYBCS2, 0);
};

CharsetNameBaseContext.prototype.KOI8R = function() {
    return this.getToken(MySQLParser.KOI8R, 0);
};

CharsetNameBaseContext.prototype.KOI8U = function() {
    return this.getToken(MySQLParser.KOI8U, 0);
};

CharsetNameBaseContext.prototype.LATIN1 = function() {
    return this.getToken(MySQLParser.LATIN1, 0);
};

CharsetNameBaseContext.prototype.LATIN2 = function() {
    return this.getToken(MySQLParser.LATIN2, 0);
};

CharsetNameBaseContext.prototype.LATIN5 = function() {
    return this.getToken(MySQLParser.LATIN5, 0);
};

CharsetNameBaseContext.prototype.LATIN7 = function() {
    return this.getToken(MySQLParser.LATIN7, 0);
};

CharsetNameBaseContext.prototype.MACCE = function() {
    return this.getToken(MySQLParser.MACCE, 0);
};

CharsetNameBaseContext.prototype.MACROMAN = function() {
    return this.getToken(MySQLParser.MACROMAN, 0);
};

CharsetNameBaseContext.prototype.SJIS = function() {
    return this.getToken(MySQLParser.SJIS, 0);
};

CharsetNameBaseContext.prototype.SWE7 = function() {
    return this.getToken(MySQLParser.SWE7, 0);
};

CharsetNameBaseContext.prototype.TIS620 = function() {
    return this.getToken(MySQLParser.TIS620, 0);
};

CharsetNameBaseContext.prototype.UCS2 = function() {
    return this.getToken(MySQLParser.UCS2, 0);
};

CharsetNameBaseContext.prototype.UJIS = function() {
    return this.getToken(MySQLParser.UJIS, 0);
};

CharsetNameBaseContext.prototype.UTF16 = function() {
    return this.getToken(MySQLParser.UTF16, 0);
};

CharsetNameBaseContext.prototype.UTF16LE = function() {
    return this.getToken(MySQLParser.UTF16LE, 0);
};

CharsetNameBaseContext.prototype.UTF32 = function() {
    return this.getToken(MySQLParser.UTF32, 0);
};

CharsetNameBaseContext.prototype.UTF8 = function() {
    return this.getToken(MySQLParser.UTF8, 0);
};

CharsetNameBaseContext.prototype.UTF8MB3 = function() {
    return this.getToken(MySQLParser.UTF8MB3, 0);
};

CharsetNameBaseContext.prototype.UTF8MB4 = function() {
    return this.getToken(MySQLParser.UTF8MB4, 0);
};

CharsetNameBaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterCharsetNameBase(this);
	}
};

CharsetNameBaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitCharsetNameBase(this);
	}
};

CharsetNameBaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitCharsetNameBase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.CharsetNameBaseContext = CharsetNameBaseContext;

MySQLParser.prototype.charsetNameBase = function() {

    var localctx = new CharsetNameBaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 616, MySQLParser.RULE_charsetNameBase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6362;
        _la = this._input.LA(1);
        if(!(((((_la - 637)) & ~0x1f) == 0 && ((1 << (_la - 637)) & ((1 << (MySQLParser.ARMSCII8 - 637)) | (1 << (MySQLParser.ASCII - 637)) | (1 << (MySQLParser.BIG5 - 637)) | (1 << (MySQLParser.CP1250 - 637)) | (1 << (MySQLParser.CP1251 - 637)) | (1 << (MySQLParser.CP1256 - 637)) | (1 << (MySQLParser.CP1257 - 637)) | (1 << (MySQLParser.CP850 - 637)) | (1 << (MySQLParser.CP852 - 637)) | (1 << (MySQLParser.CP866 - 637)) | (1 << (MySQLParser.CP932 - 637)) | (1 << (MySQLParser.DEC8 - 637)) | (1 << (MySQLParser.EUCJPMS - 637)) | (1 << (MySQLParser.EUCKR - 637)) | (1 << (MySQLParser.GB2312 - 637)) | (1 << (MySQLParser.GBK - 637)) | (1 << (MySQLParser.GEOSTD8 - 637)) | (1 << (MySQLParser.GREEK - 637)) | (1 << (MySQLParser.HEBREW - 637)) | (1 << (MySQLParser.HP8 - 637)) | (1 << (MySQLParser.KEYBCS2 - 637)) | (1 << (MySQLParser.KOI8R - 637)) | (1 << (MySQLParser.KOI8U - 637)) | (1 << (MySQLParser.LATIN1 - 637)) | (1 << (MySQLParser.LATIN2 - 637)) | (1 << (MySQLParser.LATIN5 - 637)) | (1 << (MySQLParser.LATIN7 - 637)) | (1 << (MySQLParser.MACCE - 637)) | (1 << (MySQLParser.MACROMAN - 637)) | (1 << (MySQLParser.SJIS - 637)) | (1 << (MySQLParser.SWE7 - 637)) | (1 << (MySQLParser.TIS620 - 637)))) !== 0) || ((((_la - 669)) & ~0x1f) == 0 && ((1 << (_la - 669)) & ((1 << (MySQLParser.UCS2 - 669)) | (1 << (MySQLParser.UJIS - 669)) | (1 << (MySQLParser.UTF16 - 669)) | (1 << (MySQLParser.UTF16LE - 669)) | (1 << (MySQLParser.UTF32 - 669)) | (1 << (MySQLParser.UTF8 - 669)) | (1 << (MySQLParser.UTF8MB3 - 669)) | (1 << (MySQLParser.UTF8MB4 - 669)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TransactionLevelBaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_transactionLevelBase;
    return this;
}

TransactionLevelBaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransactionLevelBaseContext.prototype.constructor = TransactionLevelBaseContext;

TransactionLevelBaseContext.prototype.REPEATABLE = function() {
    return this.getToken(MySQLParser.REPEATABLE, 0);
};

TransactionLevelBaseContext.prototype.COMMITTED = function() {
    return this.getToken(MySQLParser.COMMITTED, 0);
};

TransactionLevelBaseContext.prototype.UNCOMMITTED = function() {
    return this.getToken(MySQLParser.UNCOMMITTED, 0);
};

TransactionLevelBaseContext.prototype.SERIALIZABLE = function() {
    return this.getToken(MySQLParser.SERIALIZABLE, 0);
};

TransactionLevelBaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterTransactionLevelBase(this);
	}
};

TransactionLevelBaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitTransactionLevelBase(this);
	}
};

TransactionLevelBaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitTransactionLevelBase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.TransactionLevelBaseContext = TransactionLevelBaseContext;

MySQLParser.prototype.transactionLevelBase = function() {

    var localctx = new TransactionLevelBaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 618, MySQLParser.RULE_transactionLevelBase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6364;
        _la = this._input.LA(1);
        if(!(((((_la - 689)) & ~0x1f) == 0 && ((1 << (_la - 689)) & ((1 << (MySQLParser.REPEATABLE - 689)) | (1 << (MySQLParser.COMMITTED - 689)) | (1 << (MySQLParser.UNCOMMITTED - 689)) | (1 << (MySQLParser.SERIALIZABLE - 689)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrivilegesBaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_privilegesBase;
    return this;
}

PrivilegesBaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrivilegesBaseContext.prototype.constructor = PrivilegesBaseContext;

PrivilegesBaseContext.prototype.TABLES = function() {
    return this.getToken(MySQLParser.TABLES, 0);
};

PrivilegesBaseContext.prototype.ROUTINE = function() {
    return this.getToken(MySQLParser.ROUTINE, 0);
};

PrivilegesBaseContext.prototype.EXECUTE = function() {
    return this.getToken(MySQLParser.EXECUTE, 0);
};

PrivilegesBaseContext.prototype.FILE = function() {
    return this.getToken(MySQLParser.FILE, 0);
};

PrivilegesBaseContext.prototype.PROCESS = function() {
    return this.getToken(MySQLParser.PROCESS, 0);
};

PrivilegesBaseContext.prototype.RELOAD = function() {
    return this.getToken(MySQLParser.RELOAD, 0);
};

PrivilegesBaseContext.prototype.SHUTDOWN = function() {
    return this.getToken(MySQLParser.SHUTDOWN, 0);
};

PrivilegesBaseContext.prototype.SUPER = function() {
    return this.getToken(MySQLParser.SUPER, 0);
};

PrivilegesBaseContext.prototype.PRIVILEGES = function() {
    return this.getToken(MySQLParser.PRIVILEGES, 0);
};

PrivilegesBaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterPrivilegesBase(this);
	}
};

PrivilegesBaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitPrivilegesBase(this);
	}
};

PrivilegesBaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitPrivilegesBase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.PrivilegesBaseContext = PrivilegesBaseContext;

MySQLParser.prototype.privilegesBase = function() {

    var localctx = new PrivilegesBaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 620, MySQLParser.RULE_privilegesBase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6366;
        _la = this._input.LA(1);
        if(!(((((_la - 602)) & ~0x1f) == 0 && ((1 << (_la - 602)) & ((1 << (MySQLParser.TABLES - 602)) | (1 << (MySQLParser.ROUTINE - 602)) | (1 << (MySQLParser.EXECUTE - 602)) | (1 << (MySQLParser.FILE - 602)) | (1 << (MySQLParser.PROCESS - 602)) | (1 << (MySQLParser.RELOAD - 602)) | (1 << (MySQLParser.SHUTDOWN - 602)) | (1 << (MySQLParser.SUPER - 602)) | (1 << (MySQLParser.PRIVILEGES - 602)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntervalTypeBaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_intervalTypeBase;
    return this;
}

IntervalTypeBaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalTypeBaseContext.prototype.constructor = IntervalTypeBaseContext;

IntervalTypeBaseContext.prototype.QUARTER = function() {
    return this.getToken(MySQLParser.QUARTER, 0);
};

IntervalTypeBaseContext.prototype.MONTH = function() {
    return this.getToken(MySQLParser.MONTH, 0);
};

IntervalTypeBaseContext.prototype.DAY = function() {
    return this.getToken(MySQLParser.DAY, 0);
};

IntervalTypeBaseContext.prototype.HOUR = function() {
    return this.getToken(MySQLParser.HOUR, 0);
};

IntervalTypeBaseContext.prototype.MINUTE = function() {
    return this.getToken(MySQLParser.MINUTE, 0);
};

IntervalTypeBaseContext.prototype.WEEK = function() {
    return this.getToken(MySQLParser.WEEK, 0);
};

IntervalTypeBaseContext.prototype.SECOND = function() {
    return this.getToken(MySQLParser.SECOND, 0);
};

IntervalTypeBaseContext.prototype.MICROSECOND = function() {
    return this.getToken(MySQLParser.MICROSECOND, 0);
};

IntervalTypeBaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterIntervalTypeBase(this);
	}
};

IntervalTypeBaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitIntervalTypeBase(this);
	}
};

IntervalTypeBaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitIntervalTypeBase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.IntervalTypeBaseContext = IntervalTypeBaseContext;

MySQLParser.prototype.intervalTypeBase = function() {

    var localctx = new IntervalTypeBaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 622, MySQLParser.RULE_intervalTypeBase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6368;
        _la = this._input.LA(1);
        if(!(((((_la - 594)) & ~0x1f) == 0 && ((1 << (_la - 594)) & ((1 << (MySQLParser.QUARTER - 594)) | (1 << (MySQLParser.MONTH - 594)) | (1 << (MySQLParser.DAY - 594)) | (1 << (MySQLParser.HOUR - 594)) | (1 << (MySQLParser.MINUTE - 594)) | (1 << (MySQLParser.WEEK - 594)) | (1 << (MySQLParser.SECOND - 594)) | (1 << (MySQLParser.MICROSECOND - 594)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataTypeBaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_dataTypeBase;
    return this;
}

DataTypeBaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataTypeBaseContext.prototype.constructor = DataTypeBaseContext;

DataTypeBaseContext.prototype.DATE = function() {
    return this.getToken(MySQLParser.DATE, 0);
};

DataTypeBaseContext.prototype.TIME = function() {
    return this.getToken(MySQLParser.TIME, 0);
};

DataTypeBaseContext.prototype.TIMESTAMP = function() {
    return this.getToken(MySQLParser.TIMESTAMP, 0);
};

DataTypeBaseContext.prototype.DATETIME = function() {
    return this.getToken(MySQLParser.DATETIME, 0);
};

DataTypeBaseContext.prototype.YEAR = function() {
    return this.getToken(MySQLParser.YEAR, 0);
};

DataTypeBaseContext.prototype.ENUM = function() {
    return this.getToken(MySQLParser.ENUM, 0);
};

DataTypeBaseContext.prototype.TEXT = function() {
    return this.getToken(MySQLParser.TEXT, 0);
};

DataTypeBaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterDataTypeBase(this);
	}
};

DataTypeBaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitDataTypeBase(this);
	}
};

DataTypeBaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitDataTypeBase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.DataTypeBaseContext = DataTypeBaseContext;

MySQLParser.prototype.dataTypeBase = function() {

    var localctx = new DataTypeBaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 624, MySQLParser.RULE_dataTypeBase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6370;
        _la = this._input.LA(1);
        if(!(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.DATETIME - 199)) | (1 << (MySQLParser.YEAR - 199)) | (1 << (MySQLParser.TEXT - 199)) | (1 << (MySQLParser.ENUM - 199)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeywordsCanBeIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_keywordsCanBeId;
    return this;
}

KeywordsCanBeIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordsCanBeIdContext.prototype.constructor = KeywordsCanBeIdContext;

KeywordsCanBeIdContext.prototype.ACCOUNT = function() {
    return this.getToken(MySQLParser.ACCOUNT, 0);
};

KeywordsCanBeIdContext.prototype.ACTION = function() {
    return this.getToken(MySQLParser.ACTION, 0);
};

KeywordsCanBeIdContext.prototype.AFTER = function() {
    return this.getToken(MySQLParser.AFTER, 0);
};

KeywordsCanBeIdContext.prototype.AGGREGATE = function() {
    return this.getToken(MySQLParser.AGGREGATE, 0);
};

KeywordsCanBeIdContext.prototype.ALGORITHM = function() {
    return this.getToken(MySQLParser.ALGORITHM, 0);
};

KeywordsCanBeIdContext.prototype.ANY = function() {
    return this.getToken(MySQLParser.ANY, 0);
};

KeywordsCanBeIdContext.prototype.AT = function() {
    return this.getToken(MySQLParser.AT, 0);
};

KeywordsCanBeIdContext.prototype.AUDIT_ADMIN = function() {
    return this.getToken(MySQLParser.AUDIT_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.AUTHORS = function() {
    return this.getToken(MySQLParser.AUTHORS, 0);
};

KeywordsCanBeIdContext.prototype.AUTOCOMMIT = function() {
    return this.getToken(MySQLParser.AUTOCOMMIT, 0);
};

KeywordsCanBeIdContext.prototype.AUTOEXTEND_SIZE = function() {
    return this.getToken(MySQLParser.AUTOEXTEND_SIZE, 0);
};

KeywordsCanBeIdContext.prototype.AUTO_INCREMENT = function() {
    return this.getToken(MySQLParser.AUTO_INCREMENT, 0);
};

KeywordsCanBeIdContext.prototype.AVG_ROW_LENGTH = function() {
    return this.getToken(MySQLParser.AVG_ROW_LENGTH, 0);
};

KeywordsCanBeIdContext.prototype.BACKUP_ADMIN = function() {
    return this.getToken(MySQLParser.BACKUP_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.BEGIN = function() {
    return this.getToken(MySQLParser.BEGIN, 0);
};

KeywordsCanBeIdContext.prototype.BINLOG = function() {
    return this.getToken(MySQLParser.BINLOG, 0);
};

KeywordsCanBeIdContext.prototype.BINLOG_ADMIN = function() {
    return this.getToken(MySQLParser.BINLOG_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.BINLOG_ENCRYPTION_ADMIN = function() {
    return this.getToken(MySQLParser.BINLOG_ENCRYPTION_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.BIT = function() {
    return this.getToken(MySQLParser.BIT, 0);
};

KeywordsCanBeIdContext.prototype.BLOCK = function() {
    return this.getToken(MySQLParser.BLOCK, 0);
};

KeywordsCanBeIdContext.prototype.BOOL = function() {
    return this.getToken(MySQLParser.BOOL, 0);
};

KeywordsCanBeIdContext.prototype.BOOLEAN = function() {
    return this.getToken(MySQLParser.BOOLEAN, 0);
};

KeywordsCanBeIdContext.prototype.BTREE = function() {
    return this.getToken(MySQLParser.BTREE, 0);
};

KeywordsCanBeIdContext.prototype.CACHE = function() {
    return this.getToken(MySQLParser.CACHE, 0);
};

KeywordsCanBeIdContext.prototype.CASCADED = function() {
    return this.getToken(MySQLParser.CASCADED, 0);
};

KeywordsCanBeIdContext.prototype.CHAIN = function() {
    return this.getToken(MySQLParser.CHAIN, 0);
};

KeywordsCanBeIdContext.prototype.CHANGED = function() {
    return this.getToken(MySQLParser.CHANGED, 0);
};

KeywordsCanBeIdContext.prototype.CHANNEL = function() {
    return this.getToken(MySQLParser.CHANNEL, 0);
};

KeywordsCanBeIdContext.prototype.CHECKSUM = function() {
    return this.getToken(MySQLParser.CHECKSUM, 0);
};

KeywordsCanBeIdContext.prototype.PAGE_CHECKSUM = function() {
    return this.getToken(MySQLParser.PAGE_CHECKSUM, 0);
};

KeywordsCanBeIdContext.prototype.CATALOG_NAME = function() {
    return this.getToken(MySQLParser.CATALOG_NAME, 0);
};

KeywordsCanBeIdContext.prototype.CIPHER = function() {
    return this.getToken(MySQLParser.CIPHER, 0);
};

KeywordsCanBeIdContext.prototype.CLASS_ORIGIN = function() {
    return this.getToken(MySQLParser.CLASS_ORIGIN, 0);
};

KeywordsCanBeIdContext.prototype.CLIENT = function() {
    return this.getToken(MySQLParser.CLIENT, 0);
};

KeywordsCanBeIdContext.prototype.CLONE_ADMIN = function() {
    return this.getToken(MySQLParser.CLONE_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.CLOSE = function() {
    return this.getToken(MySQLParser.CLOSE, 0);
};

KeywordsCanBeIdContext.prototype.COALESCE = function() {
    return this.getToken(MySQLParser.COALESCE, 0);
};

KeywordsCanBeIdContext.prototype.CODE = function() {
    return this.getToken(MySQLParser.CODE, 0);
};

KeywordsCanBeIdContext.prototype.COLUMNS = function() {
    return this.getToken(MySQLParser.COLUMNS, 0);
};

KeywordsCanBeIdContext.prototype.COLUMN_FORMAT = function() {
    return this.getToken(MySQLParser.COLUMN_FORMAT, 0);
};

KeywordsCanBeIdContext.prototype.COLUMN_NAME = function() {
    return this.getToken(MySQLParser.COLUMN_NAME, 0);
};

KeywordsCanBeIdContext.prototype.COMMENT = function() {
    return this.getToken(MySQLParser.COMMENT, 0);
};

KeywordsCanBeIdContext.prototype.COMMIT = function() {
    return this.getToken(MySQLParser.COMMIT, 0);
};

KeywordsCanBeIdContext.prototype.COMPACT = function() {
    return this.getToken(MySQLParser.COMPACT, 0);
};

KeywordsCanBeIdContext.prototype.COMPLETION = function() {
    return this.getToken(MySQLParser.COMPLETION, 0);
};

KeywordsCanBeIdContext.prototype.COMPRESSED = function() {
    return this.getToken(MySQLParser.COMPRESSED, 0);
};

KeywordsCanBeIdContext.prototype.COMPRESSION = function() {
    return this.getToken(MySQLParser.COMPRESSION, 0);
};

KeywordsCanBeIdContext.prototype.CONCURRENT = function() {
    return this.getToken(MySQLParser.CONCURRENT, 0);
};

KeywordsCanBeIdContext.prototype.CONNECTION = function() {
    return this.getToken(MySQLParser.CONNECTION, 0);
};

KeywordsCanBeIdContext.prototype.CONNECTION_ADMIN = function() {
    return this.getToken(MySQLParser.CONNECTION_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.CONSISTENT = function() {
    return this.getToken(MySQLParser.CONSISTENT, 0);
};

KeywordsCanBeIdContext.prototype.CONSTRAINT_CATALOG = function() {
    return this.getToken(MySQLParser.CONSTRAINT_CATALOG, 0);
};

KeywordsCanBeIdContext.prototype.CONSTRAINT_NAME = function() {
    return this.getToken(MySQLParser.CONSTRAINT_NAME, 0);
};

KeywordsCanBeIdContext.prototype.CONSTRAINT_SCHEMA = function() {
    return this.getToken(MySQLParser.CONSTRAINT_SCHEMA, 0);
};

KeywordsCanBeIdContext.prototype.CONTAINS = function() {
    return this.getToken(MySQLParser.CONTAINS, 0);
};

KeywordsCanBeIdContext.prototype.CONTEXT = function() {
    return this.getToken(MySQLParser.CONTEXT, 0);
};

KeywordsCanBeIdContext.prototype.CONTRIBUTORS = function() {
    return this.getToken(MySQLParser.CONTRIBUTORS, 0);
};

KeywordsCanBeIdContext.prototype.COPY = function() {
    return this.getToken(MySQLParser.COPY, 0);
};

KeywordsCanBeIdContext.prototype.CPU = function() {
    return this.getToken(MySQLParser.CPU, 0);
};

KeywordsCanBeIdContext.prototype.CURRENT = function() {
    return this.getToken(MySQLParser.CURRENT, 0);
};

KeywordsCanBeIdContext.prototype.CURSOR_NAME = function() {
    return this.getToken(MySQLParser.CURSOR_NAME, 0);
};

KeywordsCanBeIdContext.prototype.DATA = function() {
    return this.getToken(MySQLParser.DATA, 0);
};

KeywordsCanBeIdContext.prototype.DATAFILE = function() {
    return this.getToken(MySQLParser.DATAFILE, 0);
};

KeywordsCanBeIdContext.prototype.DEALLOCATE = function() {
    return this.getToken(MySQLParser.DEALLOCATE, 0);
};

KeywordsCanBeIdContext.prototype.DEFAULT_AUTH = function() {
    return this.getToken(MySQLParser.DEFAULT_AUTH, 0);
};

KeywordsCanBeIdContext.prototype.DEFINER = function() {
    return this.getToken(MySQLParser.DEFINER, 0);
};

KeywordsCanBeIdContext.prototype.DELAY_KEY_WRITE = function() {
    return this.getToken(MySQLParser.DELAY_KEY_WRITE, 0);
};

KeywordsCanBeIdContext.prototype.DES_KEY_FILE = function() {
    return this.getToken(MySQLParser.DES_KEY_FILE, 0);
};

KeywordsCanBeIdContext.prototype.DIAGNOSTICS = function() {
    return this.getToken(MySQLParser.DIAGNOSTICS, 0);
};

KeywordsCanBeIdContext.prototype.DIRECTORY = function() {
    return this.getToken(MySQLParser.DIRECTORY, 0);
};

KeywordsCanBeIdContext.prototype.DISABLE = function() {
    return this.getToken(MySQLParser.DISABLE, 0);
};

KeywordsCanBeIdContext.prototype.DISCARD = function() {
    return this.getToken(MySQLParser.DISCARD, 0);
};

KeywordsCanBeIdContext.prototype.DISK = function() {
    return this.getToken(MySQLParser.DISK, 0);
};

KeywordsCanBeIdContext.prototype.DO = function() {
    return this.getToken(MySQLParser.DO, 0);
};

KeywordsCanBeIdContext.prototype.DUMPFILE = function() {
    return this.getToken(MySQLParser.DUMPFILE, 0);
};

KeywordsCanBeIdContext.prototype.DUPLICATE = function() {
    return this.getToken(MySQLParser.DUPLICATE, 0);
};

KeywordsCanBeIdContext.prototype.DYNAMIC = function() {
    return this.getToken(MySQLParser.DYNAMIC, 0);
};

KeywordsCanBeIdContext.prototype.ENABLE = function() {
    return this.getToken(MySQLParser.ENABLE, 0);
};

KeywordsCanBeIdContext.prototype.ENCRYPTION = function() {
    return this.getToken(MySQLParser.ENCRYPTION, 0);
};

KeywordsCanBeIdContext.prototype.ENCRYPTION_KEY_ADMIN = function() {
    return this.getToken(MySQLParser.ENCRYPTION_KEY_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.END = function() {
    return this.getToken(MySQLParser.END, 0);
};

KeywordsCanBeIdContext.prototype.ENDS = function() {
    return this.getToken(MySQLParser.ENDS, 0);
};

KeywordsCanBeIdContext.prototype.ENGINE = function() {
    return this.getToken(MySQLParser.ENGINE, 0);
};

KeywordsCanBeIdContext.prototype.ENGINES = function() {
    return this.getToken(MySQLParser.ENGINES, 0);
};

KeywordsCanBeIdContext.prototype.ERROR = function() {
    return this.getToken(MySQLParser.ERROR, 0);
};

KeywordsCanBeIdContext.prototype.ERRORS = function() {
    return this.getToken(MySQLParser.ERRORS, 0);
};

KeywordsCanBeIdContext.prototype.ESCAPE = function() {
    return this.getToken(MySQLParser.ESCAPE, 0);
};

KeywordsCanBeIdContext.prototype.EVEN = function() {
    return this.getToken(MySQLParser.EVEN, 0);
};

KeywordsCanBeIdContext.prototype.EVENT = function() {
    return this.getToken(MySQLParser.EVENT, 0);
};

KeywordsCanBeIdContext.prototype.EVENTS = function() {
    return this.getToken(MySQLParser.EVENTS, 0);
};

KeywordsCanBeIdContext.prototype.EVERY = function() {
    return this.getToken(MySQLParser.EVERY, 0);
};

KeywordsCanBeIdContext.prototype.EXCHANGE = function() {
    return this.getToken(MySQLParser.EXCHANGE, 0);
};

KeywordsCanBeIdContext.prototype.EXCLUSIVE = function() {
    return this.getToken(MySQLParser.EXCLUSIVE, 0);
};

KeywordsCanBeIdContext.prototype.EXPIRE = function() {
    return this.getToken(MySQLParser.EXPIRE, 0);
};

KeywordsCanBeIdContext.prototype.EXPORT = function() {
    return this.getToken(MySQLParser.EXPORT, 0);
};

KeywordsCanBeIdContext.prototype.EXTENDED = function() {
    return this.getToken(MySQLParser.EXTENDED, 0);
};

KeywordsCanBeIdContext.prototype.EXTENT_SIZE = function() {
    return this.getToken(MySQLParser.EXTENT_SIZE, 0);
};

KeywordsCanBeIdContext.prototype.FAST = function() {
    return this.getToken(MySQLParser.FAST, 0);
};

KeywordsCanBeIdContext.prototype.FAULTS = function() {
    return this.getToken(MySQLParser.FAULTS, 0);
};

KeywordsCanBeIdContext.prototype.FIELDS = function() {
    return this.getToken(MySQLParser.FIELDS, 0);
};

KeywordsCanBeIdContext.prototype.FILE_BLOCK_SIZE = function() {
    return this.getToken(MySQLParser.FILE_BLOCK_SIZE, 0);
};

KeywordsCanBeIdContext.prototype.FILTER = function() {
    return this.getToken(MySQLParser.FILTER, 0);
};

KeywordsCanBeIdContext.prototype.FIREWALL_ADMIN = function() {
    return this.getToken(MySQLParser.FIREWALL_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.FIREWALL_USER = function() {
    return this.getToken(MySQLParser.FIREWALL_USER, 0);
};

KeywordsCanBeIdContext.prototype.FIRST = function() {
    return this.getToken(MySQLParser.FIRST, 0);
};

KeywordsCanBeIdContext.prototype.FIXED = function() {
    return this.getToken(MySQLParser.FIXED, 0);
};

KeywordsCanBeIdContext.prototype.FLUSH = function() {
    return this.getToken(MySQLParser.FLUSH, 0);
};

KeywordsCanBeIdContext.prototype.FOLLOWS = function() {
    return this.getToken(MySQLParser.FOLLOWS, 0);
};

KeywordsCanBeIdContext.prototype.FOUND = function() {
    return this.getToken(MySQLParser.FOUND, 0);
};

KeywordsCanBeIdContext.prototype.FULL = function() {
    return this.getToken(MySQLParser.FULL, 0);
};

KeywordsCanBeIdContext.prototype.FUNCTION = function() {
    return this.getToken(MySQLParser.FUNCTION, 0);
};

KeywordsCanBeIdContext.prototype.GENERAL = function() {
    return this.getToken(MySQLParser.GENERAL, 0);
};

KeywordsCanBeIdContext.prototype.GLOBAL = function() {
    return this.getToken(MySQLParser.GLOBAL, 0);
};

KeywordsCanBeIdContext.prototype.GRANTS = function() {
    return this.getToken(MySQLParser.GRANTS, 0);
};

KeywordsCanBeIdContext.prototype.GROUP_REPLICATION = function() {
    return this.getToken(MySQLParser.GROUP_REPLICATION, 0);
};

KeywordsCanBeIdContext.prototype.GROUP_REPLICATION_ADMIN = function() {
    return this.getToken(MySQLParser.GROUP_REPLICATION_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.HANDLER = function() {
    return this.getToken(MySQLParser.HANDLER, 0);
};

KeywordsCanBeIdContext.prototype.HASH = function() {
    return this.getToken(MySQLParser.HASH, 0);
};

KeywordsCanBeIdContext.prototype.HELP = function() {
    return this.getToken(MySQLParser.HELP, 0);
};

KeywordsCanBeIdContext.prototype.HOST = function() {
    return this.getToken(MySQLParser.HOST, 0);
};

KeywordsCanBeIdContext.prototype.HOSTS = function() {
    return this.getToken(MySQLParser.HOSTS, 0);
};

KeywordsCanBeIdContext.prototype.IDENTIFIED = function() {
    return this.getToken(MySQLParser.IDENTIFIED, 0);
};

KeywordsCanBeIdContext.prototype.IGNORE_SERVER_IDS = function() {
    return this.getToken(MySQLParser.IGNORE_SERVER_IDS, 0);
};

KeywordsCanBeIdContext.prototype.IMPORT = function() {
    return this.getToken(MySQLParser.IMPORT, 0);
};

KeywordsCanBeIdContext.prototype.INDEXES = function() {
    return this.getToken(MySQLParser.INDEXES, 0);
};

KeywordsCanBeIdContext.prototype.INITIAL_SIZE = function() {
    return this.getToken(MySQLParser.INITIAL_SIZE, 0);
};

KeywordsCanBeIdContext.prototype.INNODB_REDO_LOG_ARCHIVE = function() {
    return this.getToken(MySQLParser.INNODB_REDO_LOG_ARCHIVE, 0);
};

KeywordsCanBeIdContext.prototype.INPLACE = function() {
    return this.getToken(MySQLParser.INPLACE, 0);
};

KeywordsCanBeIdContext.prototype.INSERT_METHOD = function() {
    return this.getToken(MySQLParser.INSERT_METHOD, 0);
};

KeywordsCanBeIdContext.prototype.INSTALL = function() {
    return this.getToken(MySQLParser.INSTALL, 0);
};

KeywordsCanBeIdContext.prototype.INSTANCE = function() {
    return this.getToken(MySQLParser.INSTANCE, 0);
};

KeywordsCanBeIdContext.prototype.INTERNAL = function() {
    return this.getToken(MySQLParser.INTERNAL, 0);
};

KeywordsCanBeIdContext.prototype.INVOKER = function() {
    return this.getToken(MySQLParser.INVOKER, 0);
};

KeywordsCanBeIdContext.prototype.IO = function() {
    return this.getToken(MySQLParser.IO, 0);
};

KeywordsCanBeIdContext.prototype.IO_THREAD = function() {
    return this.getToken(MySQLParser.IO_THREAD, 0);
};

KeywordsCanBeIdContext.prototype.IPC = function() {
    return this.getToken(MySQLParser.IPC, 0);
};

KeywordsCanBeIdContext.prototype.ISOLATION = function() {
    return this.getToken(MySQLParser.ISOLATION, 0);
};

KeywordsCanBeIdContext.prototype.ISSUER = function() {
    return this.getToken(MySQLParser.ISSUER, 0);
};

KeywordsCanBeIdContext.prototype.JSON = function() {
    return this.getToken(MySQLParser.JSON, 0);
};

KeywordsCanBeIdContext.prototype.KEY_BLOCK_SIZE = function() {
    return this.getToken(MySQLParser.KEY_BLOCK_SIZE, 0);
};

KeywordsCanBeIdContext.prototype.LANGUAGE = function() {
    return this.getToken(MySQLParser.LANGUAGE, 0);
};

KeywordsCanBeIdContext.prototype.LAST = function() {
    return this.getToken(MySQLParser.LAST, 0);
};

KeywordsCanBeIdContext.prototype.LEAVES = function() {
    return this.getToken(MySQLParser.LEAVES, 0);
};

KeywordsCanBeIdContext.prototype.LESS = function() {
    return this.getToken(MySQLParser.LESS, 0);
};

KeywordsCanBeIdContext.prototype.LEVEL = function() {
    return this.getToken(MySQLParser.LEVEL, 0);
};

KeywordsCanBeIdContext.prototype.LIST = function() {
    return this.getToken(MySQLParser.LIST, 0);
};

KeywordsCanBeIdContext.prototype.LOCAL = function() {
    return this.getToken(MySQLParser.LOCAL, 0);
};

KeywordsCanBeIdContext.prototype.LOGFILE = function() {
    return this.getToken(MySQLParser.LOGFILE, 0);
};

KeywordsCanBeIdContext.prototype.LOGS = function() {
    return this.getToken(MySQLParser.LOGS, 0);
};

KeywordsCanBeIdContext.prototype.MASTER = function() {
    return this.getToken(MySQLParser.MASTER, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_AUTO_POSITION = function() {
    return this.getToken(MySQLParser.MASTER_AUTO_POSITION, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_CONNECT_RETRY = function() {
    return this.getToken(MySQLParser.MASTER_CONNECT_RETRY, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_DELAY = function() {
    return this.getToken(MySQLParser.MASTER_DELAY, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_HEARTBEAT_PERIOD = function() {
    return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_HOST = function() {
    return this.getToken(MySQLParser.MASTER_HOST, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_LOG_FILE = function() {
    return this.getToken(MySQLParser.MASTER_LOG_FILE, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_LOG_POS = function() {
    return this.getToken(MySQLParser.MASTER_LOG_POS, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_PASSWORD = function() {
    return this.getToken(MySQLParser.MASTER_PASSWORD, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_PORT = function() {
    return this.getToken(MySQLParser.MASTER_PORT, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_RETRY_COUNT = function() {
    return this.getToken(MySQLParser.MASTER_RETRY_COUNT, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_SSL = function() {
    return this.getToken(MySQLParser.MASTER_SSL, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_SSL_CA = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CA, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_SSL_CAPATH = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CAPATH, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_SSL_CERT = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CERT, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_SSL_CIPHER = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CIPHER, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_SSL_CRL = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CRL, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_SSL_CRLPATH = function() {
    return this.getToken(MySQLParser.MASTER_SSL_CRLPATH, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_SSL_KEY = function() {
    return this.getToken(MySQLParser.MASTER_SSL_KEY, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_TLS_VERSION = function() {
    return this.getToken(MySQLParser.MASTER_TLS_VERSION, 0);
};

KeywordsCanBeIdContext.prototype.MASTER_USER = function() {
    return this.getToken(MySQLParser.MASTER_USER, 0);
};

KeywordsCanBeIdContext.prototype.MAX_CONNECTIONS_PER_HOUR = function() {
    return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR, 0);
};

KeywordsCanBeIdContext.prototype.MAX_QUERIES_PER_HOUR = function() {
    return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR, 0);
};

KeywordsCanBeIdContext.prototype.MAX_ROWS = function() {
    return this.getToken(MySQLParser.MAX_ROWS, 0);
};

KeywordsCanBeIdContext.prototype.MAX_SIZE = function() {
    return this.getToken(MySQLParser.MAX_SIZE, 0);
};

KeywordsCanBeIdContext.prototype.MAX_UPDATES_PER_HOUR = function() {
    return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR, 0);
};

KeywordsCanBeIdContext.prototype.MAX_USER_CONNECTIONS = function() {
    return this.getToken(MySQLParser.MAX_USER_CONNECTIONS, 0);
};

KeywordsCanBeIdContext.prototype.MEDIUM = function() {
    return this.getToken(MySQLParser.MEDIUM, 0);
};

KeywordsCanBeIdContext.prototype.MEMORY = function() {
    return this.getToken(MySQLParser.MEMORY, 0);
};

KeywordsCanBeIdContext.prototype.MERGE = function() {
    return this.getToken(MySQLParser.MERGE, 0);
};

KeywordsCanBeIdContext.prototype.MESSAGE_TEXT = function() {
    return this.getToken(MySQLParser.MESSAGE_TEXT, 0);
};

KeywordsCanBeIdContext.prototype.MID = function() {
    return this.getToken(MySQLParser.MID, 0);
};

KeywordsCanBeIdContext.prototype.MIGRATE = function() {
    return this.getToken(MySQLParser.MIGRATE, 0);
};

KeywordsCanBeIdContext.prototype.MIN_ROWS = function() {
    return this.getToken(MySQLParser.MIN_ROWS, 0);
};

KeywordsCanBeIdContext.prototype.MODE = function() {
    return this.getToken(MySQLParser.MODE, 0);
};

KeywordsCanBeIdContext.prototype.MODIFY = function() {
    return this.getToken(MySQLParser.MODIFY, 0);
};

KeywordsCanBeIdContext.prototype.MUTEX = function() {
    return this.getToken(MySQLParser.MUTEX, 0);
};

KeywordsCanBeIdContext.prototype.MYSQL = function() {
    return this.getToken(MySQLParser.MYSQL, 0);
};

KeywordsCanBeIdContext.prototype.MYSQL_ERRNO = function() {
    return this.getToken(MySQLParser.MYSQL_ERRNO, 0);
};

KeywordsCanBeIdContext.prototype.NAME = function() {
    return this.getToken(MySQLParser.NAME, 0);
};

KeywordsCanBeIdContext.prototype.NAMES = function() {
    return this.getToken(MySQLParser.NAMES, 0);
};

KeywordsCanBeIdContext.prototype.NCHAR = function() {
    return this.getToken(MySQLParser.NCHAR, 0);
};

KeywordsCanBeIdContext.prototype.NDB_STORED_USER = function() {
    return this.getToken(MySQLParser.NDB_STORED_USER, 0);
};

KeywordsCanBeIdContext.prototype.NEVER = function() {
    return this.getToken(MySQLParser.NEVER, 0);
};

KeywordsCanBeIdContext.prototype.NEXT = function() {
    return this.getToken(MySQLParser.NEXT, 0);
};

KeywordsCanBeIdContext.prototype.NO = function() {
    return this.getToken(MySQLParser.NO, 0);
};

KeywordsCanBeIdContext.prototype.NODEGROUP = function() {
    return this.getToken(MySQLParser.NODEGROUP, 0);
};

KeywordsCanBeIdContext.prototype.NONE = function() {
    return this.getToken(MySQLParser.NONE, 0);
};

KeywordsCanBeIdContext.prototype.NUMBER = function() {
    return this.getToken(MySQLParser.NUMBER, 0);
};

KeywordsCanBeIdContext.prototype.OFFLINE = function() {
    return this.getToken(MySQLParser.OFFLINE, 0);
};

KeywordsCanBeIdContext.prototype.OFFSET = function() {
    return this.getToken(MySQLParser.OFFSET, 0);
};

KeywordsCanBeIdContext.prototype.OJ = function() {
    return this.getToken(MySQLParser.OJ, 0);
};

KeywordsCanBeIdContext.prototype.OLD_PASSWORD = function() {
    return this.getToken(MySQLParser.OLD_PASSWORD, 0);
};

KeywordsCanBeIdContext.prototype.ONE = function() {
    return this.getToken(MySQLParser.ONE, 0);
};

KeywordsCanBeIdContext.prototype.ONLINE = function() {
    return this.getToken(MySQLParser.ONLINE, 0);
};

KeywordsCanBeIdContext.prototype.ONLY = function() {
    return this.getToken(MySQLParser.ONLY, 0);
};

KeywordsCanBeIdContext.prototype.OPEN = function() {
    return this.getToken(MySQLParser.OPEN, 0);
};

KeywordsCanBeIdContext.prototype.OPTIMIZER_COSTS = function() {
    return this.getToken(MySQLParser.OPTIMIZER_COSTS, 0);
};

KeywordsCanBeIdContext.prototype.OPTIONS = function() {
    return this.getToken(MySQLParser.OPTIONS, 0);
};

KeywordsCanBeIdContext.prototype.OWNER = function() {
    return this.getToken(MySQLParser.OWNER, 0);
};

KeywordsCanBeIdContext.prototype.PACK_KEYS = function() {
    return this.getToken(MySQLParser.PACK_KEYS, 0);
};

KeywordsCanBeIdContext.prototype.PAGE = function() {
    return this.getToken(MySQLParser.PAGE, 0);
};

KeywordsCanBeIdContext.prototype.PARSER = function() {
    return this.getToken(MySQLParser.PARSER, 0);
};

KeywordsCanBeIdContext.prototype.PARTIAL = function() {
    return this.getToken(MySQLParser.PARTIAL, 0);
};

KeywordsCanBeIdContext.prototype.PARTITIONING = function() {
    return this.getToken(MySQLParser.PARTITIONING, 0);
};

KeywordsCanBeIdContext.prototype.PARTITIONS = function() {
    return this.getToken(MySQLParser.PARTITIONS, 0);
};

KeywordsCanBeIdContext.prototype.PASSWORD = function() {
    return this.getToken(MySQLParser.PASSWORD, 0);
};

KeywordsCanBeIdContext.prototype.PERSIST_RO_VARIABLES_ADMIN = function() {
    return this.getToken(MySQLParser.PERSIST_RO_VARIABLES_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.PHASE = function() {
    return this.getToken(MySQLParser.PHASE, 0);
};

KeywordsCanBeIdContext.prototype.PLUGINS = function() {
    return this.getToken(MySQLParser.PLUGINS, 0);
};

KeywordsCanBeIdContext.prototype.PLUGIN_DIR = function() {
    return this.getToken(MySQLParser.PLUGIN_DIR, 0);
};

KeywordsCanBeIdContext.prototype.PLUGIN = function() {
    return this.getToken(MySQLParser.PLUGIN, 0);
};

KeywordsCanBeIdContext.prototype.PORT = function() {
    return this.getToken(MySQLParser.PORT, 0);
};

KeywordsCanBeIdContext.prototype.PRECEDES = function() {
    return this.getToken(MySQLParser.PRECEDES, 0);
};

KeywordsCanBeIdContext.prototype.PREPARE = function() {
    return this.getToken(MySQLParser.PREPARE, 0);
};

KeywordsCanBeIdContext.prototype.PRESERVE = function() {
    return this.getToken(MySQLParser.PRESERVE, 0);
};

KeywordsCanBeIdContext.prototype.PREV = function() {
    return this.getToken(MySQLParser.PREV, 0);
};

KeywordsCanBeIdContext.prototype.PROCESSLIST = function() {
    return this.getToken(MySQLParser.PROCESSLIST, 0);
};

KeywordsCanBeIdContext.prototype.PROFILE = function() {
    return this.getToken(MySQLParser.PROFILE, 0);
};

KeywordsCanBeIdContext.prototype.PROFILES = function() {
    return this.getToken(MySQLParser.PROFILES, 0);
};

KeywordsCanBeIdContext.prototype.PROXY = function() {
    return this.getToken(MySQLParser.PROXY, 0);
};

KeywordsCanBeIdContext.prototype.QUERY = function() {
    return this.getToken(MySQLParser.QUERY, 0);
};

KeywordsCanBeIdContext.prototype.QUICK = function() {
    return this.getToken(MySQLParser.QUICK, 0);
};

KeywordsCanBeIdContext.prototype.REBUILD = function() {
    return this.getToken(MySQLParser.REBUILD, 0);
};

KeywordsCanBeIdContext.prototype.RECOVER = function() {
    return this.getToken(MySQLParser.RECOVER, 0);
};

KeywordsCanBeIdContext.prototype.REDO_BUFFER_SIZE = function() {
    return this.getToken(MySQLParser.REDO_BUFFER_SIZE, 0);
};

KeywordsCanBeIdContext.prototype.REDUNDANT = function() {
    return this.getToken(MySQLParser.REDUNDANT, 0);
};

KeywordsCanBeIdContext.prototype.RELAY = function() {
    return this.getToken(MySQLParser.RELAY, 0);
};

KeywordsCanBeIdContext.prototype.RELAYLOG = function() {
    return this.getToken(MySQLParser.RELAYLOG, 0);
};

KeywordsCanBeIdContext.prototype.RELAY_LOG_FILE = function() {
    return this.getToken(MySQLParser.RELAY_LOG_FILE, 0);
};

KeywordsCanBeIdContext.prototype.RELAY_LOG_POS = function() {
    return this.getToken(MySQLParser.RELAY_LOG_POS, 0);
};

KeywordsCanBeIdContext.prototype.REMOVE = function() {
    return this.getToken(MySQLParser.REMOVE, 0);
};

KeywordsCanBeIdContext.prototype.REORGANIZE = function() {
    return this.getToken(MySQLParser.REORGANIZE, 0);
};

KeywordsCanBeIdContext.prototype.REPAIR = function() {
    return this.getToken(MySQLParser.REPAIR, 0);
};

KeywordsCanBeIdContext.prototype.REPLICATE_DO_DB = function() {
    return this.getToken(MySQLParser.REPLICATE_DO_DB, 0);
};

KeywordsCanBeIdContext.prototype.REPLICATE_DO_TABLE = function() {
    return this.getToken(MySQLParser.REPLICATE_DO_TABLE, 0);
};

KeywordsCanBeIdContext.prototype.REPLICATE_IGNORE_DB = function() {
    return this.getToken(MySQLParser.REPLICATE_IGNORE_DB, 0);
};

KeywordsCanBeIdContext.prototype.REPLICATE_IGNORE_TABLE = function() {
    return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE, 0);
};

KeywordsCanBeIdContext.prototype.REPLICATE_REWRITE_DB = function() {
    return this.getToken(MySQLParser.REPLICATE_REWRITE_DB, 0);
};

KeywordsCanBeIdContext.prototype.REPLICATE_WILD_DO_TABLE = function() {
    return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE, 0);
};

KeywordsCanBeIdContext.prototype.REPLICATE_WILD_IGNORE_TABLE = function() {
    return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE, 0);
};

KeywordsCanBeIdContext.prototype.REPLICATION = function() {
    return this.getToken(MySQLParser.REPLICATION, 0);
};

KeywordsCanBeIdContext.prototype.REPLICATION_APPLIER = function() {
    return this.getToken(MySQLParser.REPLICATION_APPLIER, 0);
};

KeywordsCanBeIdContext.prototype.REPLICATION_SLAVE_ADMIN = function() {
    return this.getToken(MySQLParser.REPLICATION_SLAVE_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.RESET = function() {
    return this.getToken(MySQLParser.RESET, 0);
};

KeywordsCanBeIdContext.prototype.RESOURCE_GROUP_ADMIN = function() {
    return this.getToken(MySQLParser.RESOURCE_GROUP_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.RESOURCE_GROUP_USER = function() {
    return this.getToken(MySQLParser.RESOURCE_GROUP_USER, 0);
};

KeywordsCanBeIdContext.prototype.RESUME = function() {
    return this.getToken(MySQLParser.RESUME, 0);
};

KeywordsCanBeIdContext.prototype.RETURNED_SQLSTATE = function() {
    return this.getToken(MySQLParser.RETURNED_SQLSTATE, 0);
};

KeywordsCanBeIdContext.prototype.RETURNS = function() {
    return this.getToken(MySQLParser.RETURNS, 0);
};

KeywordsCanBeIdContext.prototype.ROLE = function() {
    return this.getToken(MySQLParser.ROLE, 0);
};

KeywordsCanBeIdContext.prototype.ROLE_ADMIN = function() {
    return this.getToken(MySQLParser.ROLE_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.ROLLBACK = function() {
    return this.getToken(MySQLParser.ROLLBACK, 0);
};

KeywordsCanBeIdContext.prototype.ROLLUP = function() {
    return this.getToken(MySQLParser.ROLLUP, 0);
};

KeywordsCanBeIdContext.prototype.ROTATE = function() {
    return this.getToken(MySQLParser.ROTATE, 0);
};

KeywordsCanBeIdContext.prototype.ROW = function() {
    return this.getToken(MySQLParser.ROW, 0);
};

KeywordsCanBeIdContext.prototype.ROWS = function() {
    return this.getToken(MySQLParser.ROWS, 0);
};

KeywordsCanBeIdContext.prototype.ROW_FORMAT = function() {
    return this.getToken(MySQLParser.ROW_FORMAT, 0);
};

KeywordsCanBeIdContext.prototype.SAVEPOINT = function() {
    return this.getToken(MySQLParser.SAVEPOINT, 0);
};

KeywordsCanBeIdContext.prototype.SCHEDULE = function() {
    return this.getToken(MySQLParser.SCHEDULE, 0);
};

KeywordsCanBeIdContext.prototype.SCHEMA_NAME = function() {
    return this.getToken(MySQLParser.SCHEMA_NAME, 0);
};

KeywordsCanBeIdContext.prototype.SECURITY = function() {
    return this.getToken(MySQLParser.SECURITY, 0);
};

KeywordsCanBeIdContext.prototype.SERIAL = function() {
    return this.getToken(MySQLParser.SERIAL, 0);
};

KeywordsCanBeIdContext.prototype.SERVER = function() {
    return this.getToken(MySQLParser.SERVER, 0);
};

KeywordsCanBeIdContext.prototype.SESSION = function() {
    return this.getToken(MySQLParser.SESSION, 0);
};

KeywordsCanBeIdContext.prototype.SESSION_VARIABLES_ADMIN = function() {
    return this.getToken(MySQLParser.SESSION_VARIABLES_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.SET_USER_ID = function() {
    return this.getToken(MySQLParser.SET_USER_ID, 0);
};

KeywordsCanBeIdContext.prototype.SHARE = function() {
    return this.getToken(MySQLParser.SHARE, 0);
};

KeywordsCanBeIdContext.prototype.SHARED = function() {
    return this.getToken(MySQLParser.SHARED, 0);
};

KeywordsCanBeIdContext.prototype.SHOW_ROUTINE = function() {
    return this.getToken(MySQLParser.SHOW_ROUTINE, 0);
};

KeywordsCanBeIdContext.prototype.SIGNED = function() {
    return this.getToken(MySQLParser.SIGNED, 0);
};

KeywordsCanBeIdContext.prototype.SIMPLE = function() {
    return this.getToken(MySQLParser.SIMPLE, 0);
};

KeywordsCanBeIdContext.prototype.SLAVE = function() {
    return this.getToken(MySQLParser.SLAVE, 0);
};

KeywordsCanBeIdContext.prototype.SLOW = function() {
    return this.getToken(MySQLParser.SLOW, 0);
};

KeywordsCanBeIdContext.prototype.SNAPSHOT = function() {
    return this.getToken(MySQLParser.SNAPSHOT, 0);
};

KeywordsCanBeIdContext.prototype.SOCKET = function() {
    return this.getToken(MySQLParser.SOCKET, 0);
};

KeywordsCanBeIdContext.prototype.SOME = function() {
    return this.getToken(MySQLParser.SOME, 0);
};

KeywordsCanBeIdContext.prototype.SONAME = function() {
    return this.getToken(MySQLParser.SONAME, 0);
};

KeywordsCanBeIdContext.prototype.SOUNDS = function() {
    return this.getToken(MySQLParser.SOUNDS, 0);
};

KeywordsCanBeIdContext.prototype.SOURCE = function() {
    return this.getToken(MySQLParser.SOURCE, 0);
};

KeywordsCanBeIdContext.prototype.SQL_AFTER_GTIDS = function() {
    return this.getToken(MySQLParser.SQL_AFTER_GTIDS, 0);
};

KeywordsCanBeIdContext.prototype.SQL_AFTER_MTS_GAPS = function() {
    return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS, 0);
};

KeywordsCanBeIdContext.prototype.SQL_BEFORE_GTIDS = function() {
    return this.getToken(MySQLParser.SQL_BEFORE_GTIDS, 0);
};

KeywordsCanBeIdContext.prototype.SQL_BUFFER_RESULT = function() {
    return this.getToken(MySQLParser.SQL_BUFFER_RESULT, 0);
};

KeywordsCanBeIdContext.prototype.SQL_CACHE = function() {
    return this.getToken(MySQLParser.SQL_CACHE, 0);
};

KeywordsCanBeIdContext.prototype.SQL_NO_CACHE = function() {
    return this.getToken(MySQLParser.SQL_NO_CACHE, 0);
};

KeywordsCanBeIdContext.prototype.SQL_THREAD = function() {
    return this.getToken(MySQLParser.SQL_THREAD, 0);
};

KeywordsCanBeIdContext.prototype.STACKED = function() {
    return this.getToken(MySQLParser.STACKED, 0);
};

KeywordsCanBeIdContext.prototype.START = function() {
    return this.getToken(MySQLParser.START, 0);
};

KeywordsCanBeIdContext.prototype.STARTS = function() {
    return this.getToken(MySQLParser.STARTS, 0);
};

KeywordsCanBeIdContext.prototype.STATS_AUTO_RECALC = function() {
    return this.getToken(MySQLParser.STATS_AUTO_RECALC, 0);
};

KeywordsCanBeIdContext.prototype.STATS_PERSISTENT = function() {
    return this.getToken(MySQLParser.STATS_PERSISTENT, 0);
};

KeywordsCanBeIdContext.prototype.STATS_SAMPLE_PAGES = function() {
    return this.getToken(MySQLParser.STATS_SAMPLE_PAGES, 0);
};

KeywordsCanBeIdContext.prototype.STATUS = function() {
    return this.getToken(MySQLParser.STATUS, 0);
};

KeywordsCanBeIdContext.prototype.STOP = function() {
    return this.getToken(MySQLParser.STOP, 0);
};

KeywordsCanBeIdContext.prototype.STORAGE = function() {
    return this.getToken(MySQLParser.STORAGE, 0);
};

KeywordsCanBeIdContext.prototype.STRING = function() {
    return this.getToken(MySQLParser.STRING, 0);
};

KeywordsCanBeIdContext.prototype.SUBCLASS_ORIGIN = function() {
    return this.getToken(MySQLParser.SUBCLASS_ORIGIN, 0);
};

KeywordsCanBeIdContext.prototype.SUBJECT = function() {
    return this.getToken(MySQLParser.SUBJECT, 0);
};

KeywordsCanBeIdContext.prototype.SUBPARTITION = function() {
    return this.getToken(MySQLParser.SUBPARTITION, 0);
};

KeywordsCanBeIdContext.prototype.SUBPARTITIONS = function() {
    return this.getToken(MySQLParser.SUBPARTITIONS, 0);
};

KeywordsCanBeIdContext.prototype.SUSPEND = function() {
    return this.getToken(MySQLParser.SUSPEND, 0);
};

KeywordsCanBeIdContext.prototype.SWAPS = function() {
    return this.getToken(MySQLParser.SWAPS, 0);
};

KeywordsCanBeIdContext.prototype.SWITCHES = function() {
    return this.getToken(MySQLParser.SWITCHES, 0);
};

KeywordsCanBeIdContext.prototype.SYSTEM_VARIABLES_ADMIN = function() {
    return this.getToken(MySQLParser.SYSTEM_VARIABLES_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.TABLE_NAME = function() {
    return this.getToken(MySQLParser.TABLE_NAME, 0);
};

KeywordsCanBeIdContext.prototype.TABLESPACE = function() {
    return this.getToken(MySQLParser.TABLESPACE, 0);
};

KeywordsCanBeIdContext.prototype.TABLE_ENCRYPTION_ADMIN = function() {
    return this.getToken(MySQLParser.TABLE_ENCRYPTION_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.TEMPORARY = function() {
    return this.getToken(MySQLParser.TEMPORARY, 0);
};

KeywordsCanBeIdContext.prototype.TEMPTABLE = function() {
    return this.getToken(MySQLParser.TEMPTABLE, 0);
};

KeywordsCanBeIdContext.prototype.THAN = function() {
    return this.getToken(MySQLParser.THAN, 0);
};

KeywordsCanBeIdContext.prototype.TRADITIONAL = function() {
    return this.getToken(MySQLParser.TRADITIONAL, 0);
};

KeywordsCanBeIdContext.prototype.TRANSACTION = function() {
    return this.getToken(MySQLParser.TRANSACTION, 0);
};

KeywordsCanBeIdContext.prototype.TRANSACTIONAL = function() {
    return this.getToken(MySQLParser.TRANSACTIONAL, 0);
};

KeywordsCanBeIdContext.prototype.TRIGGERS = function() {
    return this.getToken(MySQLParser.TRIGGERS, 0);
};

KeywordsCanBeIdContext.prototype.TRUNCATE = function() {
    return this.getToken(MySQLParser.TRUNCATE, 0);
};

KeywordsCanBeIdContext.prototype.UNDEFINED = function() {
    return this.getToken(MySQLParser.UNDEFINED, 0);
};

KeywordsCanBeIdContext.prototype.UNDOFILE = function() {
    return this.getToken(MySQLParser.UNDOFILE, 0);
};

KeywordsCanBeIdContext.prototype.UNDO_BUFFER_SIZE = function() {
    return this.getToken(MySQLParser.UNDO_BUFFER_SIZE, 0);
};

KeywordsCanBeIdContext.prototype.UNINSTALL = function() {
    return this.getToken(MySQLParser.UNINSTALL, 0);
};

KeywordsCanBeIdContext.prototype.UNKNOWN = function() {
    return this.getToken(MySQLParser.UNKNOWN, 0);
};

KeywordsCanBeIdContext.prototype.UNTIL = function() {
    return this.getToken(MySQLParser.UNTIL, 0);
};

KeywordsCanBeIdContext.prototype.UPGRADE = function() {
    return this.getToken(MySQLParser.UPGRADE, 0);
};

KeywordsCanBeIdContext.prototype.USER = function() {
    return this.getToken(MySQLParser.USER, 0);
};

KeywordsCanBeIdContext.prototype.USE_FRM = function() {
    return this.getToken(MySQLParser.USE_FRM, 0);
};

KeywordsCanBeIdContext.prototype.USER_RESOURCES = function() {
    return this.getToken(MySQLParser.USER_RESOURCES, 0);
};

KeywordsCanBeIdContext.prototype.VALIDATION = function() {
    return this.getToken(MySQLParser.VALIDATION, 0);
};

KeywordsCanBeIdContext.prototype.VALUE = function() {
    return this.getToken(MySQLParser.VALUE, 0);
};

KeywordsCanBeIdContext.prototype.VARIABLES = function() {
    return this.getToken(MySQLParser.VARIABLES, 0);
};

KeywordsCanBeIdContext.prototype.VERSION_TOKEN_ADMIN = function() {
    return this.getToken(MySQLParser.VERSION_TOKEN_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.VIEW = function() {
    return this.getToken(MySQLParser.VIEW, 0);
};

KeywordsCanBeIdContext.prototype.WAIT = function() {
    return this.getToken(MySQLParser.WAIT, 0);
};

KeywordsCanBeIdContext.prototype.WARNINGS = function() {
    return this.getToken(MySQLParser.WARNINGS, 0);
};

KeywordsCanBeIdContext.prototype.WITHOUT = function() {
    return this.getToken(MySQLParser.WITHOUT, 0);
};

KeywordsCanBeIdContext.prototype.WORK = function() {
    return this.getToken(MySQLParser.WORK, 0);
};

KeywordsCanBeIdContext.prototype.WRAPPER = function() {
    return this.getToken(MySQLParser.WRAPPER, 0);
};

KeywordsCanBeIdContext.prototype.X509 = function() {
    return this.getToken(MySQLParser.X509, 0);
};

KeywordsCanBeIdContext.prototype.XA = function() {
    return this.getToken(MySQLParser.XA, 0);
};

KeywordsCanBeIdContext.prototype.XA_RECOVER_ADMIN = function() {
    return this.getToken(MySQLParser.XA_RECOVER_ADMIN, 0);
};

KeywordsCanBeIdContext.prototype.XML = function() {
    return this.getToken(MySQLParser.XML, 0);
};

KeywordsCanBeIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterKeywordsCanBeId(this);
	}
};

KeywordsCanBeIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitKeywordsCanBeId(this);
	}
};

KeywordsCanBeIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitKeywordsCanBeId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.KeywordsCanBeIdContext = KeywordsCanBeIdContext;

MySQLParser.prototype.keywordsCanBeId = function() {

    var localctx = new KeywordsCanBeIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 626, MySQLParser.RULE_keywordsCanBeId);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6372;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.CURRENT || _la===MySQLParser.DIAGNOSTICS || _la===MySQLParser.NUMBER || _la===MySQLParser.STACKED || _la===MySQLParser.SERIAL || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (MySQLParser.ACCOUNT - 270)) | (1 << (MySQLParser.ACTION - 270)) | (1 << (MySQLParser.AFTER - 270)) | (1 << (MySQLParser.AGGREGATE - 270)) | (1 << (MySQLParser.ALGORITHM - 270)) | (1 << (MySQLParser.ANY - 270)) | (1 << (MySQLParser.AT - 270)) | (1 << (MySQLParser.AUTHORS - 270)) | (1 << (MySQLParser.AUTOCOMMIT - 270)) | (1 << (MySQLParser.AUTOEXTEND_SIZE - 270)) | (1 << (MySQLParser.AUTO_INCREMENT - 270)) | (1 << (MySQLParser.AVG_ROW_LENGTH - 270)) | (1 << (MySQLParser.BEGIN - 270)) | (1 << (MySQLParser.BINLOG - 270)) | (1 << (MySQLParser.BIT - 270)) | (1 << (MySQLParser.BLOCK - 270)) | (1 << (MySQLParser.BOOL - 270)) | (1 << (MySQLParser.BOOLEAN - 270)) | (1 << (MySQLParser.BTREE - 270)) | (1 << (MySQLParser.CACHE - 270)) | (1 << (MySQLParser.CASCADED - 270)) | (1 << (MySQLParser.CHAIN - 270)) | (1 << (MySQLParser.CHANGED - 270)) | (1 << (MySQLParser.CHANNEL - 270)) | (1 << (MySQLParser.CHECKSUM - 270)) | (1 << (MySQLParser.PAGE_CHECKSUM - 270)) | (1 << (MySQLParser.CIPHER - 270)) | (1 << (MySQLParser.CLASS_ORIGIN - 270)) | (1 << (MySQLParser.CLIENT - 270)) | (1 << (MySQLParser.CLOSE - 270)) | (1 << (MySQLParser.COALESCE - 270)) | (1 << (MySQLParser.CODE - 270)))) !== 0) || ((((_la - 302)) & ~0x1f) == 0 && ((1 << (_la - 302)) & ((1 << (MySQLParser.COLUMNS - 302)) | (1 << (MySQLParser.COLUMN_FORMAT - 302)) | (1 << (MySQLParser.COLUMN_NAME - 302)) | (1 << (MySQLParser.COMMENT - 302)) | (1 << (MySQLParser.COMMIT - 302)) | (1 << (MySQLParser.COMPACT - 302)) | (1 << (MySQLParser.COMPLETION - 302)) | (1 << (MySQLParser.COMPRESSED - 302)) | (1 << (MySQLParser.COMPRESSION - 302)) | (1 << (MySQLParser.CONCURRENT - 302)) | (1 << (MySQLParser.CONNECTION - 302)) | (1 << (MySQLParser.CONSISTENT - 302)) | (1 << (MySQLParser.CONSTRAINT_CATALOG - 302)) | (1 << (MySQLParser.CONSTRAINT_SCHEMA - 302)) | (1 << (MySQLParser.CONSTRAINT_NAME - 302)) | (1 << (MySQLParser.CONTAINS - 302)) | (1 << (MySQLParser.CONTEXT - 302)) | (1 << (MySQLParser.CONTRIBUTORS - 302)) | (1 << (MySQLParser.COPY - 302)) | (1 << (MySQLParser.CPU - 302)) | (1 << (MySQLParser.CURSOR_NAME - 302)) | (1 << (MySQLParser.DATA - 302)) | (1 << (MySQLParser.DATAFILE - 302)) | (1 << (MySQLParser.DEALLOCATE - 302)) | (1 << (MySQLParser.DEFAULT_AUTH - 302)) | (1 << (MySQLParser.DEFINER - 302)) | (1 << (MySQLParser.DELAY_KEY_WRITE - 302)) | (1 << (MySQLParser.DES_KEY_FILE - 302)) | (1 << (MySQLParser.DIRECTORY - 302)) | (1 << (MySQLParser.DISABLE - 302)) | (1 << (MySQLParser.DISCARD - 302)) | (1 << (MySQLParser.DISK - 302)))) !== 0) || ((((_la - 334)) & ~0x1f) == 0 && ((1 << (_la - 334)) & ((1 << (MySQLParser.DO - 334)) | (1 << (MySQLParser.DUMPFILE - 334)) | (1 << (MySQLParser.DUPLICATE - 334)) | (1 << (MySQLParser.DYNAMIC - 334)) | (1 << (MySQLParser.ENABLE - 334)) | (1 << (MySQLParser.ENCRYPTION - 334)) | (1 << (MySQLParser.END - 334)) | (1 << (MySQLParser.ENDS - 334)) | (1 << (MySQLParser.ENGINE - 334)) | (1 << (MySQLParser.ENGINES - 334)) | (1 << (MySQLParser.ERROR - 334)) | (1 << (MySQLParser.ERRORS - 334)) | (1 << (MySQLParser.ESCAPE - 334)) | (1 << (MySQLParser.EVEN - 334)) | (1 << (MySQLParser.EVENT - 334)) | (1 << (MySQLParser.EVENTS - 334)) | (1 << (MySQLParser.EVERY - 334)) | (1 << (MySQLParser.EXCHANGE - 334)) | (1 << (MySQLParser.EXCLUSIVE - 334)) | (1 << (MySQLParser.EXPIRE - 334)) | (1 << (MySQLParser.EXPORT - 334)) | (1 << (MySQLParser.EXTENDED - 334)) | (1 << (MySQLParser.EXTENT_SIZE - 334)) | (1 << (MySQLParser.FAST - 334)) | (1 << (MySQLParser.FAULTS - 334)) | (1 << (MySQLParser.FIELDS - 334)) | (1 << (MySQLParser.FILE_BLOCK_SIZE - 334)) | (1 << (MySQLParser.FILTER - 334)) | (1 << (MySQLParser.FIRST - 334)) | (1 << (MySQLParser.FIXED - 334)) | (1 << (MySQLParser.FLUSH - 334)) | (1 << (MySQLParser.FOLLOWS - 334)))) !== 0) || ((((_la - 366)) & ~0x1f) == 0 && ((1 << (_la - 366)) & ((1 << (MySQLParser.FOUND - 366)) | (1 << (MySQLParser.FULL - 366)) | (1 << (MySQLParser.FUNCTION - 366)) | (1 << (MySQLParser.GENERAL - 366)) | (1 << (MySQLParser.GLOBAL - 366)) | (1 << (MySQLParser.GRANTS - 366)) | (1 << (MySQLParser.GROUP_REPLICATION - 366)) | (1 << (MySQLParser.HANDLER - 366)) | (1 << (MySQLParser.HASH - 366)) | (1 << (MySQLParser.HELP - 366)) | (1 << (MySQLParser.HOST - 366)) | (1 << (MySQLParser.HOSTS - 366)) | (1 << (MySQLParser.IDENTIFIED - 366)) | (1 << (MySQLParser.IGNORE_SERVER_IDS - 366)) | (1 << (MySQLParser.IMPORT - 366)) | (1 << (MySQLParser.INDEXES - 366)) | (1 << (MySQLParser.INITIAL_SIZE - 366)) | (1 << (MySQLParser.INPLACE - 366)) | (1 << (MySQLParser.INSERT_METHOD - 366)) | (1 << (MySQLParser.INSTALL - 366)) | (1 << (MySQLParser.INSTANCE - 366)) | (1 << (MySQLParser.INVOKER - 366)) | (1 << (MySQLParser.IO - 366)) | (1 << (MySQLParser.IO_THREAD - 366)) | (1 << (MySQLParser.IPC - 366)) | (1 << (MySQLParser.ISOLATION - 366)) | (1 << (MySQLParser.ISSUER - 366)) | (1 << (MySQLParser.JSON - 366)) | (1 << (MySQLParser.KEY_BLOCK_SIZE - 366)) | (1 << (MySQLParser.LANGUAGE - 366)) | (1 << (MySQLParser.LAST - 366)))) !== 0) || ((((_la - 398)) & ~0x1f) == 0 && ((1 << (_la - 398)) & ((1 << (MySQLParser.LEAVES - 398)) | (1 << (MySQLParser.LESS - 398)) | (1 << (MySQLParser.LEVEL - 398)) | (1 << (MySQLParser.LIST - 398)) | (1 << (MySQLParser.LOCAL - 398)) | (1 << (MySQLParser.LOGFILE - 398)) | (1 << (MySQLParser.LOGS - 398)) | (1 << (MySQLParser.MASTER - 398)) | (1 << (MySQLParser.MASTER_AUTO_POSITION - 398)) | (1 << (MySQLParser.MASTER_CONNECT_RETRY - 398)) | (1 << (MySQLParser.MASTER_DELAY - 398)) | (1 << (MySQLParser.MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (MySQLParser.MASTER_HOST - 398)) | (1 << (MySQLParser.MASTER_LOG_FILE - 398)) | (1 << (MySQLParser.MASTER_LOG_POS - 398)) | (1 << (MySQLParser.MASTER_PASSWORD - 398)) | (1 << (MySQLParser.MASTER_PORT - 398)) | (1 << (MySQLParser.MASTER_RETRY_COUNT - 398)) | (1 << (MySQLParser.MASTER_SSL - 398)) | (1 << (MySQLParser.MASTER_SSL_CA - 398)) | (1 << (MySQLParser.MASTER_SSL_CAPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_CERT - 398)) | (1 << (MySQLParser.MASTER_SSL_CIPHER - 398)) | (1 << (MySQLParser.MASTER_SSL_CRL - 398)) | (1 << (MySQLParser.MASTER_SSL_CRLPATH - 398)) | (1 << (MySQLParser.MASTER_SSL_KEY - 398)) | (1 << (MySQLParser.MASTER_TLS_VERSION - 398)) | (1 << (MySQLParser.MASTER_USER - 398)) | (1 << (MySQLParser.MAX_CONNECTIONS_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_QUERIES_PER_HOUR - 398)) | (1 << (MySQLParser.MAX_ROWS - 398)) | (1 << (MySQLParser.MAX_SIZE - 398)))) !== 0) || ((((_la - 430)) & ~0x1f) == 0 && ((1 << (_la - 430)) & ((1 << (MySQLParser.MAX_UPDATES_PER_HOUR - 430)) | (1 << (MySQLParser.MAX_USER_CONNECTIONS - 430)) | (1 << (MySQLParser.MEDIUM - 430)) | (1 << (MySQLParser.MERGE - 430)) | (1 << (MySQLParser.MESSAGE_TEXT - 430)) | (1 << (MySQLParser.MID - 430)) | (1 << (MySQLParser.MIGRATE - 430)) | (1 << (MySQLParser.MIN_ROWS - 430)) | (1 << (MySQLParser.MODE - 430)) | (1 << (MySQLParser.MODIFY - 430)) | (1 << (MySQLParser.MUTEX - 430)) | (1 << (MySQLParser.MYSQL - 430)) | (1 << (MySQLParser.MYSQL_ERRNO - 430)) | (1 << (MySQLParser.NAME - 430)) | (1 << (MySQLParser.NAMES - 430)) | (1 << (MySQLParser.NCHAR - 430)) | (1 << (MySQLParser.NEVER - 430)) | (1 << (MySQLParser.NEXT - 430)) | (1 << (MySQLParser.NO - 430)) | (1 << (MySQLParser.NODEGROUP - 430)) | (1 << (MySQLParser.NONE - 430)) | (1 << (MySQLParser.OFFLINE - 430)) | (1 << (MySQLParser.OFFSET - 430)) | (1 << (MySQLParser.OJ - 430)) | (1 << (MySQLParser.OLD_PASSWORD - 430)) | (1 << (MySQLParser.ONE - 430)) | (1 << (MySQLParser.ONLINE - 430)) | (1 << (MySQLParser.ONLY - 430)) | (1 << (MySQLParser.OPEN - 430)) | (1 << (MySQLParser.OPTIMIZER_COSTS - 430)) | (1 << (MySQLParser.OPTIONS - 430)) | (1 << (MySQLParser.OWNER - 430)))) !== 0) || ((((_la - 462)) & ~0x1f) == 0 && ((1 << (_la - 462)) & ((1 << (MySQLParser.PACK_KEYS - 462)) | (1 << (MySQLParser.PAGE - 462)) | (1 << (MySQLParser.PARSER - 462)) | (1 << (MySQLParser.PARTIAL - 462)) | (1 << (MySQLParser.PARTITIONING - 462)) | (1 << (MySQLParser.PARTITIONS - 462)) | (1 << (MySQLParser.PASSWORD - 462)) | (1 << (MySQLParser.PHASE - 462)) | (1 << (MySQLParser.PLUGIN - 462)) | (1 << (MySQLParser.PLUGIN_DIR - 462)) | (1 << (MySQLParser.PLUGINS - 462)) | (1 << (MySQLParser.PORT - 462)) | (1 << (MySQLParser.PRECEDES - 462)) | (1 << (MySQLParser.PREPARE - 462)) | (1 << (MySQLParser.PRESERVE - 462)) | (1 << (MySQLParser.PREV - 462)) | (1 << (MySQLParser.PROCESSLIST - 462)) | (1 << (MySQLParser.PROFILE - 462)) | (1 << (MySQLParser.PROFILES - 462)) | (1 << (MySQLParser.PROXY - 462)) | (1 << (MySQLParser.QUERY - 462)) | (1 << (MySQLParser.QUICK - 462)) | (1 << (MySQLParser.REBUILD - 462)) | (1 << (MySQLParser.RECOVER - 462)) | (1 << (MySQLParser.REDO_BUFFER_SIZE - 462)) | (1 << (MySQLParser.REDUNDANT - 462)) | (1 << (MySQLParser.RELAY - 462)) | (1 << (MySQLParser.RELAY_LOG_FILE - 462)) | (1 << (MySQLParser.RELAY_LOG_POS - 462)) | (1 << (MySQLParser.RELAYLOG - 462)) | (1 << (MySQLParser.REMOVE - 462)) | (1 << (MySQLParser.REORGANIZE - 462)))) !== 0) || ((((_la - 494)) & ~0x1f) == 0 && ((1 << (_la - 494)) & ((1 << (MySQLParser.REPAIR - 494)) | (1 << (MySQLParser.REPLICATE_DO_DB - 494)) | (1 << (MySQLParser.REPLICATE_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_DB - 494)) | (1 << (MySQLParser.REPLICATE_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_REWRITE_DB - 494)) | (1 << (MySQLParser.REPLICATE_WILD_DO_TABLE - 494)) | (1 << (MySQLParser.REPLICATE_WILD_IGNORE_TABLE - 494)) | (1 << (MySQLParser.REPLICATION - 494)) | (1 << (MySQLParser.RESET - 494)) | (1 << (MySQLParser.RESUME - 494)) | (1 << (MySQLParser.RETURNED_SQLSTATE - 494)) | (1 << (MySQLParser.RETURNS - 494)) | (1 << (MySQLParser.ROLE - 494)) | (1 << (MySQLParser.ROLLBACK - 494)) | (1 << (MySQLParser.ROLLUP - 494)) | (1 << (MySQLParser.ROTATE - 494)) | (1 << (MySQLParser.ROW - 494)) | (1 << (MySQLParser.ROWS - 494)) | (1 << (MySQLParser.ROW_FORMAT - 494)) | (1 << (MySQLParser.SAVEPOINT - 494)) | (1 << (MySQLParser.SCHEDULE - 494)) | (1 << (MySQLParser.SECURITY - 494)) | (1 << (MySQLParser.SERVER - 494)) | (1 << (MySQLParser.SESSION - 494)) | (1 << (MySQLParser.SHARE - 494)) | (1 << (MySQLParser.SHARED - 494)) | (1 << (MySQLParser.SIGNED - 494)) | (1 << (MySQLParser.SIMPLE - 494)) | (1 << (MySQLParser.SLAVE - 494)) | (1 << (MySQLParser.SLOW - 494)) | (1 << (MySQLParser.SNAPSHOT - 494)))) !== 0) || ((((_la - 526)) & ~0x1f) == 0 && ((1 << (_la - 526)) & ((1 << (MySQLParser.SOCKET - 526)) | (1 << (MySQLParser.SOME - 526)) | (1 << (MySQLParser.SONAME - 526)) | (1 << (MySQLParser.SOUNDS - 526)) | (1 << (MySQLParser.SOURCE - 526)) | (1 << (MySQLParser.SQL_AFTER_GTIDS - 526)) | (1 << (MySQLParser.SQL_AFTER_MTS_GAPS - 526)) | (1 << (MySQLParser.SQL_BEFORE_GTIDS - 526)) | (1 << (MySQLParser.SQL_BUFFER_RESULT - 526)) | (1 << (MySQLParser.SQL_CACHE - 526)) | (1 << (MySQLParser.SQL_NO_CACHE - 526)) | (1 << (MySQLParser.SQL_THREAD - 526)) | (1 << (MySQLParser.START - 526)) | (1 << (MySQLParser.STARTS - 526)) | (1 << (MySQLParser.STATS_AUTO_RECALC - 526)) | (1 << (MySQLParser.STATS_PERSISTENT - 526)) | (1 << (MySQLParser.STATS_SAMPLE_PAGES - 526)) | (1 << (MySQLParser.STATUS - 526)) | (1 << (MySQLParser.STOP - 526)) | (1 << (MySQLParser.STORAGE - 526)) | (1 << (MySQLParser.STRING - 526)) | (1 << (MySQLParser.SUBCLASS_ORIGIN - 526)) | (1 << (MySQLParser.SUBJECT - 526)) | (1 << (MySQLParser.SUBPARTITION - 526)) | (1 << (MySQLParser.SUBPARTITIONS - 526)) | (1 << (MySQLParser.SUSPEND - 526)) | (1 << (MySQLParser.SWAPS - 526)) | (1 << (MySQLParser.SWITCHES - 526)) | (1 << (MySQLParser.TABLE_NAME - 526)) | (1 << (MySQLParser.TABLESPACE - 526)) | (1 << (MySQLParser.TEMPORARY - 526)))) !== 0) || ((((_la - 558)) & ~0x1f) == 0 && ((1 << (_la - 558)) & ((1 << (MySQLParser.TEMPTABLE - 558)) | (1 << (MySQLParser.THAN - 558)) | (1 << (MySQLParser.TRADITIONAL - 558)) | (1 << (MySQLParser.TRANSACTION - 558)) | (1 << (MySQLParser.TRANSACTIONAL - 558)) | (1 << (MySQLParser.TRIGGERS - 558)) | (1 << (MySQLParser.TRUNCATE - 558)) | (1 << (MySQLParser.UNDEFINED - 558)) | (1 << (MySQLParser.UNDOFILE - 558)) | (1 << (MySQLParser.UNDO_BUFFER_SIZE - 558)) | (1 << (MySQLParser.UNINSTALL - 558)) | (1 << (MySQLParser.UNKNOWN - 558)) | (1 << (MySQLParser.UNTIL - 558)) | (1 << (MySQLParser.UPGRADE - 558)) | (1 << (MySQLParser.USER - 558)) | (1 << (MySQLParser.USE_FRM - 558)) | (1 << (MySQLParser.USER_RESOURCES - 558)) | (1 << (MySQLParser.VALIDATION - 558)) | (1 << (MySQLParser.VALUE - 558)) | (1 << (MySQLParser.VARIABLES - 558)) | (1 << (MySQLParser.VIEW - 558)) | (1 << (MySQLParser.WAIT - 558)) | (1 << (MySQLParser.WARNINGS - 558)) | (1 << (MySQLParser.WITHOUT - 558)) | (1 << (MySQLParser.WORK - 558)) | (1 << (MySQLParser.WRAPPER - 558)) | (1 << (MySQLParser.X509 - 558)) | (1 << (MySQLParser.XA - 558)) | (1 << (MySQLParser.XML - 558)))) !== 0) || ((((_la - 593)) & ~0x1f) == 0 && ((1 << (_la - 593)) & ((1 << (MySQLParser.INTERNAL - 593)) | (1 << (MySQLParser.AUDIT_ADMIN - 593)) | (1 << (MySQLParser.BACKUP_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ADMIN - 593)) | (1 << (MySQLParser.BINLOG_ENCRYPTION_ADMIN - 593)) | (1 << (MySQLParser.CLONE_ADMIN - 593)) | (1 << (MySQLParser.CONNECTION_ADMIN - 593)) | (1 << (MySQLParser.ENCRYPTION_KEY_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_ADMIN - 593)) | (1 << (MySQLParser.FIREWALL_USER - 593)) | (1 << (MySQLParser.GROUP_REPLICATION_ADMIN - 593)) | (1 << (MySQLParser.INNODB_REDO_LOG_ARCHIVE - 593)) | (1 << (MySQLParser.NDB_STORED_USER - 593)) | (1 << (MySQLParser.PERSIST_RO_VARIABLES_ADMIN - 593)))) !== 0) || ((((_la - 625)) & ~0x1f) == 0 && ((1 << (_la - 625)) & ((1 << (MySQLParser.REPLICATION_APPLIER - 625)) | (1 << (MySQLParser.REPLICATION_SLAVE_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_ADMIN - 625)) | (1 << (MySQLParser.RESOURCE_GROUP_USER - 625)) | (1 << (MySQLParser.ROLE_ADMIN - 625)) | (1 << (MySQLParser.SESSION_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.SET_USER_ID - 625)) | (1 << (MySQLParser.SHOW_ROUTINE - 625)) | (1 << (MySQLParser.SYSTEM_VARIABLES_ADMIN - 625)) | (1 << (MySQLParser.TABLE_ENCRYPTION_ADMIN - 625)) | (1 << (MySQLParser.VERSION_TOKEN_ADMIN - 625)) | (1 << (MySQLParser.XA_RECOVER_ADMIN - 625)))) !== 0) || _la===MySQLParser.MEMORY || _la===MySQLParser.CATALOG_NAME || _la===MySQLParser.SCHEMA_NAME)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionNameBaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MySQLParser.RULE_functionNameBase;
    return this;
}

FunctionNameBaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionNameBaseContext.prototype.constructor = FunctionNameBaseContext;

FunctionNameBaseContext.prototype.ABS = function() {
    return this.getToken(MySQLParser.ABS, 0);
};

FunctionNameBaseContext.prototype.ACOS = function() {
    return this.getToken(MySQLParser.ACOS, 0);
};

FunctionNameBaseContext.prototype.ADDDATE = function() {
    return this.getToken(MySQLParser.ADDDATE, 0);
};

FunctionNameBaseContext.prototype.ADDTIME = function() {
    return this.getToken(MySQLParser.ADDTIME, 0);
};

FunctionNameBaseContext.prototype.AES_DECRYPT = function() {
    return this.getToken(MySQLParser.AES_DECRYPT, 0);
};

FunctionNameBaseContext.prototype.AES_ENCRYPT = function() {
    return this.getToken(MySQLParser.AES_ENCRYPT, 0);
};

FunctionNameBaseContext.prototype.AREA = function() {
    return this.getToken(MySQLParser.AREA, 0);
};

FunctionNameBaseContext.prototype.ASBINARY = function() {
    return this.getToken(MySQLParser.ASBINARY, 0);
};

FunctionNameBaseContext.prototype.ASIN = function() {
    return this.getToken(MySQLParser.ASIN, 0);
};

FunctionNameBaseContext.prototype.ASTEXT = function() {
    return this.getToken(MySQLParser.ASTEXT, 0);
};

FunctionNameBaseContext.prototype.ASWKB = function() {
    return this.getToken(MySQLParser.ASWKB, 0);
};

FunctionNameBaseContext.prototype.ASWKT = function() {
    return this.getToken(MySQLParser.ASWKT, 0);
};

FunctionNameBaseContext.prototype.ASYMMETRIC_DECRYPT = function() {
    return this.getToken(MySQLParser.ASYMMETRIC_DECRYPT, 0);
};

FunctionNameBaseContext.prototype.ASYMMETRIC_DERIVE = function() {
    return this.getToken(MySQLParser.ASYMMETRIC_DERIVE, 0);
};

FunctionNameBaseContext.prototype.ASYMMETRIC_ENCRYPT = function() {
    return this.getToken(MySQLParser.ASYMMETRIC_ENCRYPT, 0);
};

FunctionNameBaseContext.prototype.ASYMMETRIC_SIGN = function() {
    return this.getToken(MySQLParser.ASYMMETRIC_SIGN, 0);
};

FunctionNameBaseContext.prototype.ASYMMETRIC_VERIFY = function() {
    return this.getToken(MySQLParser.ASYMMETRIC_VERIFY, 0);
};

FunctionNameBaseContext.prototype.ATAN = function() {
    return this.getToken(MySQLParser.ATAN, 0);
};

FunctionNameBaseContext.prototype.ATAN2 = function() {
    return this.getToken(MySQLParser.ATAN2, 0);
};

FunctionNameBaseContext.prototype.BENCHMARK = function() {
    return this.getToken(MySQLParser.BENCHMARK, 0);
};

FunctionNameBaseContext.prototype.BIN = function() {
    return this.getToken(MySQLParser.BIN, 0);
};

FunctionNameBaseContext.prototype.BIT_COUNT = function() {
    return this.getToken(MySQLParser.BIT_COUNT, 0);
};

FunctionNameBaseContext.prototype.BIT_LENGTH = function() {
    return this.getToken(MySQLParser.BIT_LENGTH, 0);
};

FunctionNameBaseContext.prototype.BUFFER = function() {
    return this.getToken(MySQLParser.BUFFER, 0);
};

FunctionNameBaseContext.prototype.CEIL = function() {
    return this.getToken(MySQLParser.CEIL, 0);
};

FunctionNameBaseContext.prototype.CEILING = function() {
    return this.getToken(MySQLParser.CEILING, 0);
};

FunctionNameBaseContext.prototype.CENTROID = function() {
    return this.getToken(MySQLParser.CENTROID, 0);
};

FunctionNameBaseContext.prototype.CHARACTER_LENGTH = function() {
    return this.getToken(MySQLParser.CHARACTER_LENGTH, 0);
};

FunctionNameBaseContext.prototype.CHARSET = function() {
    return this.getToken(MySQLParser.CHARSET, 0);
};

FunctionNameBaseContext.prototype.CHAR_LENGTH = function() {
    return this.getToken(MySQLParser.CHAR_LENGTH, 0);
};

FunctionNameBaseContext.prototype.COERCIBILITY = function() {
    return this.getToken(MySQLParser.COERCIBILITY, 0);
};

FunctionNameBaseContext.prototype.COLLATION = function() {
    return this.getToken(MySQLParser.COLLATION, 0);
};

FunctionNameBaseContext.prototype.COMPRESS = function() {
    return this.getToken(MySQLParser.COMPRESS, 0);
};

FunctionNameBaseContext.prototype.CONCAT = function() {
    return this.getToken(MySQLParser.CONCAT, 0);
};

FunctionNameBaseContext.prototype.CONCAT_WS = function() {
    return this.getToken(MySQLParser.CONCAT_WS, 0);
};

FunctionNameBaseContext.prototype.CONNECTION_ID = function() {
    return this.getToken(MySQLParser.CONNECTION_ID, 0);
};

FunctionNameBaseContext.prototype.CONV = function() {
    return this.getToken(MySQLParser.CONV, 0);
};

FunctionNameBaseContext.prototype.CONVERT_TZ = function() {
    return this.getToken(MySQLParser.CONVERT_TZ, 0);
};

FunctionNameBaseContext.prototype.COS = function() {
    return this.getToken(MySQLParser.COS, 0);
};

FunctionNameBaseContext.prototype.COT = function() {
    return this.getToken(MySQLParser.COT, 0);
};

FunctionNameBaseContext.prototype.COUNT = function() {
    return this.getToken(MySQLParser.COUNT, 0);
};

FunctionNameBaseContext.prototype.CRC32 = function() {
    return this.getToken(MySQLParser.CRC32, 0);
};

FunctionNameBaseContext.prototype.CREATE_ASYMMETRIC_PRIV_KEY = function() {
    return this.getToken(MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY, 0);
};

FunctionNameBaseContext.prototype.CREATE_ASYMMETRIC_PUB_KEY = function() {
    return this.getToken(MySQLParser.CREATE_ASYMMETRIC_PUB_KEY, 0);
};

FunctionNameBaseContext.prototype.CREATE_DH_PARAMETERS = function() {
    return this.getToken(MySQLParser.CREATE_DH_PARAMETERS, 0);
};

FunctionNameBaseContext.prototype.CREATE_DIGEST = function() {
    return this.getToken(MySQLParser.CREATE_DIGEST, 0);
};

FunctionNameBaseContext.prototype.CROSSES = function() {
    return this.getToken(MySQLParser.CROSSES, 0);
};

FunctionNameBaseContext.prototype.DATABASE = function() {
    return this.getToken(MySQLParser.DATABASE, 0);
};

FunctionNameBaseContext.prototype.DATE = function() {
    return this.getToken(MySQLParser.DATE, 0);
};

FunctionNameBaseContext.prototype.DATEDIFF = function() {
    return this.getToken(MySQLParser.DATEDIFF, 0);
};

FunctionNameBaseContext.prototype.DATE_FORMAT = function() {
    return this.getToken(MySQLParser.DATE_FORMAT, 0);
};

FunctionNameBaseContext.prototype.DAY = function() {
    return this.getToken(MySQLParser.DAY, 0);
};

FunctionNameBaseContext.prototype.DAYNAME = function() {
    return this.getToken(MySQLParser.DAYNAME, 0);
};

FunctionNameBaseContext.prototype.DAYOFMONTH = function() {
    return this.getToken(MySQLParser.DAYOFMONTH, 0);
};

FunctionNameBaseContext.prototype.DAYOFWEEK = function() {
    return this.getToken(MySQLParser.DAYOFWEEK, 0);
};

FunctionNameBaseContext.prototype.DAYOFYEAR = function() {
    return this.getToken(MySQLParser.DAYOFYEAR, 0);
};

FunctionNameBaseContext.prototype.DECODE = function() {
    return this.getToken(MySQLParser.DECODE, 0);
};

FunctionNameBaseContext.prototype.DEGREES = function() {
    return this.getToken(MySQLParser.DEGREES, 0);
};

FunctionNameBaseContext.prototype.DES_DECRYPT = function() {
    return this.getToken(MySQLParser.DES_DECRYPT, 0);
};

FunctionNameBaseContext.prototype.DES_ENCRYPT = function() {
    return this.getToken(MySQLParser.DES_ENCRYPT, 0);
};

FunctionNameBaseContext.prototype.DIMENSION = function() {
    return this.getToken(MySQLParser.DIMENSION, 0);
};

FunctionNameBaseContext.prototype.DISJOINT = function() {
    return this.getToken(MySQLParser.DISJOINT, 0);
};

FunctionNameBaseContext.prototype.ELT = function() {
    return this.getToken(MySQLParser.ELT, 0);
};

FunctionNameBaseContext.prototype.ENCODE = function() {
    return this.getToken(MySQLParser.ENCODE, 0);
};

FunctionNameBaseContext.prototype.ENCRYPT = function() {
    return this.getToken(MySQLParser.ENCRYPT, 0);
};

FunctionNameBaseContext.prototype.ENDPOINT = function() {
    return this.getToken(MySQLParser.ENDPOINT, 0);
};

FunctionNameBaseContext.prototype.ENVELOPE = function() {
    return this.getToken(MySQLParser.ENVELOPE, 0);
};

FunctionNameBaseContext.prototype.EQUALS = function() {
    return this.getToken(MySQLParser.EQUALS, 0);
};

FunctionNameBaseContext.prototype.EXP = function() {
    return this.getToken(MySQLParser.EXP, 0);
};

FunctionNameBaseContext.prototype.EXPORT_SET = function() {
    return this.getToken(MySQLParser.EXPORT_SET, 0);
};

FunctionNameBaseContext.prototype.EXTERIORRING = function() {
    return this.getToken(MySQLParser.EXTERIORRING, 0);
};

FunctionNameBaseContext.prototype.EXTRACTVALUE = function() {
    return this.getToken(MySQLParser.EXTRACTVALUE, 0);
};

FunctionNameBaseContext.prototype.FIELD = function() {
    return this.getToken(MySQLParser.FIELD, 0);
};

FunctionNameBaseContext.prototype.FIND_IN_SET = function() {
    return this.getToken(MySQLParser.FIND_IN_SET, 0);
};

FunctionNameBaseContext.prototype.FLOOR = function() {
    return this.getToken(MySQLParser.FLOOR, 0);
};

FunctionNameBaseContext.prototype.FORMAT = function() {
    return this.getToken(MySQLParser.FORMAT, 0);
};

FunctionNameBaseContext.prototype.FOUND_ROWS = function() {
    return this.getToken(MySQLParser.FOUND_ROWS, 0);
};

FunctionNameBaseContext.prototype.FROM_BASE64 = function() {
    return this.getToken(MySQLParser.FROM_BASE64, 0);
};

FunctionNameBaseContext.prototype.FROM_DAYS = function() {
    return this.getToken(MySQLParser.FROM_DAYS, 0);
};

FunctionNameBaseContext.prototype.FROM_UNIXTIME = function() {
    return this.getToken(MySQLParser.FROM_UNIXTIME, 0);
};

FunctionNameBaseContext.prototype.GEOMCOLLFROMTEXT = function() {
    return this.getToken(MySQLParser.GEOMCOLLFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.GEOMCOLLFROMWKB = function() {
    return this.getToken(MySQLParser.GEOMCOLLFROMWKB, 0);
};

FunctionNameBaseContext.prototype.GEOMETRYCOLLECTION = function() {
    return this.getToken(MySQLParser.GEOMETRYCOLLECTION, 0);
};

FunctionNameBaseContext.prototype.GEOMETRYCOLLECTIONFROMTEXT = function() {
    return this.getToken(MySQLParser.GEOMETRYCOLLECTIONFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.GEOMETRYCOLLECTIONFROMWKB = function() {
    return this.getToken(MySQLParser.GEOMETRYCOLLECTIONFROMWKB, 0);
};

FunctionNameBaseContext.prototype.GEOMETRYFROMTEXT = function() {
    return this.getToken(MySQLParser.GEOMETRYFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.GEOMETRYFROMWKB = function() {
    return this.getToken(MySQLParser.GEOMETRYFROMWKB, 0);
};

FunctionNameBaseContext.prototype.GEOMETRYN = function() {
    return this.getToken(MySQLParser.GEOMETRYN, 0);
};

FunctionNameBaseContext.prototype.GEOMETRYTYPE = function() {
    return this.getToken(MySQLParser.GEOMETRYTYPE, 0);
};

FunctionNameBaseContext.prototype.GEOMFROMTEXT = function() {
    return this.getToken(MySQLParser.GEOMFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.GEOMFROMWKB = function() {
    return this.getToken(MySQLParser.GEOMFROMWKB, 0);
};

FunctionNameBaseContext.prototype.GET_FORMAT = function() {
    return this.getToken(MySQLParser.GET_FORMAT, 0);
};

FunctionNameBaseContext.prototype.GET_LOCK = function() {
    return this.getToken(MySQLParser.GET_LOCK, 0);
};

FunctionNameBaseContext.prototype.GLENGTH = function() {
    return this.getToken(MySQLParser.GLENGTH, 0);
};

FunctionNameBaseContext.prototype.GREATEST = function() {
    return this.getToken(MySQLParser.GREATEST, 0);
};

FunctionNameBaseContext.prototype.GTID_SUBSET = function() {
    return this.getToken(MySQLParser.GTID_SUBSET, 0);
};

FunctionNameBaseContext.prototype.GTID_SUBTRACT = function() {
    return this.getToken(MySQLParser.GTID_SUBTRACT, 0);
};

FunctionNameBaseContext.prototype.HEX = function() {
    return this.getToken(MySQLParser.HEX, 0);
};

FunctionNameBaseContext.prototype.HOUR = function() {
    return this.getToken(MySQLParser.HOUR, 0);
};

FunctionNameBaseContext.prototype.IFNULL = function() {
    return this.getToken(MySQLParser.IFNULL, 0);
};

FunctionNameBaseContext.prototype.INET6_ATON = function() {
    return this.getToken(MySQLParser.INET6_ATON, 0);
};

FunctionNameBaseContext.prototype.INET6_NTOA = function() {
    return this.getToken(MySQLParser.INET6_NTOA, 0);
};

FunctionNameBaseContext.prototype.INET_ATON = function() {
    return this.getToken(MySQLParser.INET_ATON, 0);
};

FunctionNameBaseContext.prototype.INET_NTOA = function() {
    return this.getToken(MySQLParser.INET_NTOA, 0);
};

FunctionNameBaseContext.prototype.INSTR = function() {
    return this.getToken(MySQLParser.INSTR, 0);
};

FunctionNameBaseContext.prototype.INTERIORRINGN = function() {
    return this.getToken(MySQLParser.INTERIORRINGN, 0);
};

FunctionNameBaseContext.prototype.INTERSECTS = function() {
    return this.getToken(MySQLParser.INTERSECTS, 0);
};

FunctionNameBaseContext.prototype.INVISIBLE = function() {
    return this.getToken(MySQLParser.INVISIBLE, 0);
};

FunctionNameBaseContext.prototype.ISCLOSED = function() {
    return this.getToken(MySQLParser.ISCLOSED, 0);
};

FunctionNameBaseContext.prototype.ISEMPTY = function() {
    return this.getToken(MySQLParser.ISEMPTY, 0);
};

FunctionNameBaseContext.prototype.ISNULL = function() {
    return this.getToken(MySQLParser.ISNULL, 0);
};

FunctionNameBaseContext.prototype.ISSIMPLE = function() {
    return this.getToken(MySQLParser.ISSIMPLE, 0);
};

FunctionNameBaseContext.prototype.IS_FREE_LOCK = function() {
    return this.getToken(MySQLParser.IS_FREE_LOCK, 0);
};

FunctionNameBaseContext.prototype.IS_IPV4 = function() {
    return this.getToken(MySQLParser.IS_IPV4, 0);
};

FunctionNameBaseContext.prototype.IS_IPV4_COMPAT = function() {
    return this.getToken(MySQLParser.IS_IPV4_COMPAT, 0);
};

FunctionNameBaseContext.prototype.IS_IPV4_MAPPED = function() {
    return this.getToken(MySQLParser.IS_IPV4_MAPPED, 0);
};

FunctionNameBaseContext.prototype.IS_IPV6 = function() {
    return this.getToken(MySQLParser.IS_IPV6, 0);
};

FunctionNameBaseContext.prototype.IS_USED_LOCK = function() {
    return this.getToken(MySQLParser.IS_USED_LOCK, 0);
};

FunctionNameBaseContext.prototype.LAST_INSERT_ID = function() {
    return this.getToken(MySQLParser.LAST_INSERT_ID, 0);
};

FunctionNameBaseContext.prototype.LCASE = function() {
    return this.getToken(MySQLParser.LCASE, 0);
};

FunctionNameBaseContext.prototype.LEAST = function() {
    return this.getToken(MySQLParser.LEAST, 0);
};

FunctionNameBaseContext.prototype.LEFT = function() {
    return this.getToken(MySQLParser.LEFT, 0);
};

FunctionNameBaseContext.prototype.LENGTH = function() {
    return this.getToken(MySQLParser.LENGTH, 0);
};

FunctionNameBaseContext.prototype.LINEFROMTEXT = function() {
    return this.getToken(MySQLParser.LINEFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.LINEFROMWKB = function() {
    return this.getToken(MySQLParser.LINEFROMWKB, 0);
};

FunctionNameBaseContext.prototype.LINESTRING = function() {
    return this.getToken(MySQLParser.LINESTRING, 0);
};

FunctionNameBaseContext.prototype.LINESTRINGFROMTEXT = function() {
    return this.getToken(MySQLParser.LINESTRINGFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.LINESTRINGFROMWKB = function() {
    return this.getToken(MySQLParser.LINESTRINGFROMWKB, 0);
};

FunctionNameBaseContext.prototype.LN = function() {
    return this.getToken(MySQLParser.LN, 0);
};

FunctionNameBaseContext.prototype.LOAD_FILE = function() {
    return this.getToken(MySQLParser.LOAD_FILE, 0);
};

FunctionNameBaseContext.prototype.LOCATE = function() {
    return this.getToken(MySQLParser.LOCATE, 0);
};

FunctionNameBaseContext.prototype.LOG = function() {
    return this.getToken(MySQLParser.LOG, 0);
};

FunctionNameBaseContext.prototype.LOG10 = function() {
    return this.getToken(MySQLParser.LOG10, 0);
};

FunctionNameBaseContext.prototype.LOG2 = function() {
    return this.getToken(MySQLParser.LOG2, 0);
};

FunctionNameBaseContext.prototype.LOWER = function() {
    return this.getToken(MySQLParser.LOWER, 0);
};

FunctionNameBaseContext.prototype.LPAD = function() {
    return this.getToken(MySQLParser.LPAD, 0);
};

FunctionNameBaseContext.prototype.LTRIM = function() {
    return this.getToken(MySQLParser.LTRIM, 0);
};

FunctionNameBaseContext.prototype.MAKEDATE = function() {
    return this.getToken(MySQLParser.MAKEDATE, 0);
};

FunctionNameBaseContext.prototype.MAKETIME = function() {
    return this.getToken(MySQLParser.MAKETIME, 0);
};

FunctionNameBaseContext.prototype.MAKE_SET = function() {
    return this.getToken(MySQLParser.MAKE_SET, 0);
};

FunctionNameBaseContext.prototype.MASTER_POS_WAIT = function() {
    return this.getToken(MySQLParser.MASTER_POS_WAIT, 0);
};

FunctionNameBaseContext.prototype.MBRCONTAINS = function() {
    return this.getToken(MySQLParser.MBRCONTAINS, 0);
};

FunctionNameBaseContext.prototype.MBRDISJOINT = function() {
    return this.getToken(MySQLParser.MBRDISJOINT, 0);
};

FunctionNameBaseContext.prototype.MBREQUAL = function() {
    return this.getToken(MySQLParser.MBREQUAL, 0);
};

FunctionNameBaseContext.prototype.MBRINTERSECTS = function() {
    return this.getToken(MySQLParser.MBRINTERSECTS, 0);
};

FunctionNameBaseContext.prototype.MBROVERLAPS = function() {
    return this.getToken(MySQLParser.MBROVERLAPS, 0);
};

FunctionNameBaseContext.prototype.MBRTOUCHES = function() {
    return this.getToken(MySQLParser.MBRTOUCHES, 0);
};

FunctionNameBaseContext.prototype.MBRWITHIN = function() {
    return this.getToken(MySQLParser.MBRWITHIN, 0);
};

FunctionNameBaseContext.prototype.MD5 = function() {
    return this.getToken(MySQLParser.MD5, 0);
};

FunctionNameBaseContext.prototype.MICROSECOND = function() {
    return this.getToken(MySQLParser.MICROSECOND, 0);
};

FunctionNameBaseContext.prototype.MINUTE = function() {
    return this.getToken(MySQLParser.MINUTE, 0);
};

FunctionNameBaseContext.prototype.MLINEFROMTEXT = function() {
    return this.getToken(MySQLParser.MLINEFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.MLINEFROMWKB = function() {
    return this.getToken(MySQLParser.MLINEFROMWKB, 0);
};

FunctionNameBaseContext.prototype.MONTH = function() {
    return this.getToken(MySQLParser.MONTH, 0);
};

FunctionNameBaseContext.prototype.MONTHNAME = function() {
    return this.getToken(MySQLParser.MONTHNAME, 0);
};

FunctionNameBaseContext.prototype.MPOINTFROMTEXT = function() {
    return this.getToken(MySQLParser.MPOINTFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.MPOINTFROMWKB = function() {
    return this.getToken(MySQLParser.MPOINTFROMWKB, 0);
};

FunctionNameBaseContext.prototype.MPOLYFROMTEXT = function() {
    return this.getToken(MySQLParser.MPOLYFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.MPOLYFROMWKB = function() {
    return this.getToken(MySQLParser.MPOLYFROMWKB, 0);
};

FunctionNameBaseContext.prototype.MULTILINESTRING = function() {
    return this.getToken(MySQLParser.MULTILINESTRING, 0);
};

FunctionNameBaseContext.prototype.MULTILINESTRINGFROMTEXT = function() {
    return this.getToken(MySQLParser.MULTILINESTRINGFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.MULTILINESTRINGFROMWKB = function() {
    return this.getToken(MySQLParser.MULTILINESTRINGFROMWKB, 0);
};

FunctionNameBaseContext.prototype.MULTIPOINT = function() {
    return this.getToken(MySQLParser.MULTIPOINT, 0);
};

FunctionNameBaseContext.prototype.MULTIPOINTFROMTEXT = function() {
    return this.getToken(MySQLParser.MULTIPOINTFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.MULTIPOINTFROMWKB = function() {
    return this.getToken(MySQLParser.MULTIPOINTFROMWKB, 0);
};

FunctionNameBaseContext.prototype.MULTIPOLYGON = function() {
    return this.getToken(MySQLParser.MULTIPOLYGON, 0);
};

FunctionNameBaseContext.prototype.MULTIPOLYGONFROMTEXT = function() {
    return this.getToken(MySQLParser.MULTIPOLYGONFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.MULTIPOLYGONFROMWKB = function() {
    return this.getToken(MySQLParser.MULTIPOLYGONFROMWKB, 0);
};

FunctionNameBaseContext.prototype.NAME_CONST = function() {
    return this.getToken(MySQLParser.NAME_CONST, 0);
};

FunctionNameBaseContext.prototype.NULLIF = function() {
    return this.getToken(MySQLParser.NULLIF, 0);
};

FunctionNameBaseContext.prototype.NUMGEOMETRIES = function() {
    return this.getToken(MySQLParser.NUMGEOMETRIES, 0);
};

FunctionNameBaseContext.prototype.NUMINTERIORRINGS = function() {
    return this.getToken(MySQLParser.NUMINTERIORRINGS, 0);
};

FunctionNameBaseContext.prototype.NUMPOINTS = function() {
    return this.getToken(MySQLParser.NUMPOINTS, 0);
};

FunctionNameBaseContext.prototype.OCT = function() {
    return this.getToken(MySQLParser.OCT, 0);
};

FunctionNameBaseContext.prototype.OCTET_LENGTH = function() {
    return this.getToken(MySQLParser.OCTET_LENGTH, 0);
};

FunctionNameBaseContext.prototype.ORD = function() {
    return this.getToken(MySQLParser.ORD, 0);
};

FunctionNameBaseContext.prototype.OVERLAPS = function() {
    return this.getToken(MySQLParser.OVERLAPS, 0);
};

FunctionNameBaseContext.prototype.PERIOD_ADD = function() {
    return this.getToken(MySQLParser.PERIOD_ADD, 0);
};

FunctionNameBaseContext.prototype.PERIOD_DIFF = function() {
    return this.getToken(MySQLParser.PERIOD_DIFF, 0);
};

FunctionNameBaseContext.prototype.PI = function() {
    return this.getToken(MySQLParser.PI, 0);
};

FunctionNameBaseContext.prototype.POINT = function() {
    return this.getToken(MySQLParser.POINT, 0);
};

FunctionNameBaseContext.prototype.POINTFROMTEXT = function() {
    return this.getToken(MySQLParser.POINTFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.POINTFROMWKB = function() {
    return this.getToken(MySQLParser.POINTFROMWKB, 0);
};

FunctionNameBaseContext.prototype.POINTN = function() {
    return this.getToken(MySQLParser.POINTN, 0);
};

FunctionNameBaseContext.prototype.POLYFROMTEXT = function() {
    return this.getToken(MySQLParser.POLYFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.POLYFROMWKB = function() {
    return this.getToken(MySQLParser.POLYFROMWKB, 0);
};

FunctionNameBaseContext.prototype.POLYGON = function() {
    return this.getToken(MySQLParser.POLYGON, 0);
};

FunctionNameBaseContext.prototype.POLYGONFROMTEXT = function() {
    return this.getToken(MySQLParser.POLYGONFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.POLYGONFROMWKB = function() {
    return this.getToken(MySQLParser.POLYGONFROMWKB, 0);
};

FunctionNameBaseContext.prototype.POSITION = function() {
    return this.getToken(MySQLParser.POSITION, 0);
};

FunctionNameBaseContext.prototype.POW = function() {
    return this.getToken(MySQLParser.POW, 0);
};

FunctionNameBaseContext.prototype.POWER = function() {
    return this.getToken(MySQLParser.POWER, 0);
};

FunctionNameBaseContext.prototype.QUARTER = function() {
    return this.getToken(MySQLParser.QUARTER, 0);
};

FunctionNameBaseContext.prototype.QUOTE = function() {
    return this.getToken(MySQLParser.QUOTE, 0);
};

FunctionNameBaseContext.prototype.RADIANS = function() {
    return this.getToken(MySQLParser.RADIANS, 0);
};

FunctionNameBaseContext.prototype.RAND = function() {
    return this.getToken(MySQLParser.RAND, 0);
};

FunctionNameBaseContext.prototype.RANDOM_BYTES = function() {
    return this.getToken(MySQLParser.RANDOM_BYTES, 0);
};

FunctionNameBaseContext.prototype.RELEASE_LOCK = function() {
    return this.getToken(MySQLParser.RELEASE_LOCK, 0);
};

FunctionNameBaseContext.prototype.REVERSE = function() {
    return this.getToken(MySQLParser.REVERSE, 0);
};

FunctionNameBaseContext.prototype.RIGHT = function() {
    return this.getToken(MySQLParser.RIGHT, 0);
};

FunctionNameBaseContext.prototype.ROUND = function() {
    return this.getToken(MySQLParser.ROUND, 0);
};

FunctionNameBaseContext.prototype.ROW_COUNT = function() {
    return this.getToken(MySQLParser.ROW_COUNT, 0);
};

FunctionNameBaseContext.prototype.RPAD = function() {
    return this.getToken(MySQLParser.RPAD, 0);
};

FunctionNameBaseContext.prototype.RTRIM = function() {
    return this.getToken(MySQLParser.RTRIM, 0);
};

FunctionNameBaseContext.prototype.SECOND = function() {
    return this.getToken(MySQLParser.SECOND, 0);
};

FunctionNameBaseContext.prototype.SEC_TO_TIME = function() {
    return this.getToken(MySQLParser.SEC_TO_TIME, 0);
};

FunctionNameBaseContext.prototype.SESSION_USER = function() {
    return this.getToken(MySQLParser.SESSION_USER, 0);
};

FunctionNameBaseContext.prototype.SESSION_VARIABLES_ADMIN = function() {
    return this.getToken(MySQLParser.SESSION_VARIABLES_ADMIN, 0);
};

FunctionNameBaseContext.prototype.SHA = function() {
    return this.getToken(MySQLParser.SHA, 0);
};

FunctionNameBaseContext.prototype.SHA1 = function() {
    return this.getToken(MySQLParser.SHA1, 0);
};

FunctionNameBaseContext.prototype.SHA2 = function() {
    return this.getToken(MySQLParser.SHA2, 0);
};

FunctionNameBaseContext.prototype.SIGN = function() {
    return this.getToken(MySQLParser.SIGN, 0);
};

FunctionNameBaseContext.prototype.SIN = function() {
    return this.getToken(MySQLParser.SIN, 0);
};

FunctionNameBaseContext.prototype.SLEEP = function() {
    return this.getToken(MySQLParser.SLEEP, 0);
};

FunctionNameBaseContext.prototype.SOUNDEX = function() {
    return this.getToken(MySQLParser.SOUNDEX, 0);
};

FunctionNameBaseContext.prototype.SQL_THREAD_WAIT_AFTER_GTIDS = function() {
    return this.getToken(MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0);
};

FunctionNameBaseContext.prototype.SQRT = function() {
    return this.getToken(MySQLParser.SQRT, 0);
};

FunctionNameBaseContext.prototype.SRID = function() {
    return this.getToken(MySQLParser.SRID, 0);
};

FunctionNameBaseContext.prototype.STARTPOINT = function() {
    return this.getToken(MySQLParser.STARTPOINT, 0);
};

FunctionNameBaseContext.prototype.STRCMP = function() {
    return this.getToken(MySQLParser.STRCMP, 0);
};

FunctionNameBaseContext.prototype.STR_TO_DATE = function() {
    return this.getToken(MySQLParser.STR_TO_DATE, 0);
};

FunctionNameBaseContext.prototype.ST_AREA = function() {
    return this.getToken(MySQLParser.ST_AREA, 0);
};

FunctionNameBaseContext.prototype.ST_ASBINARY = function() {
    return this.getToken(MySQLParser.ST_ASBINARY, 0);
};

FunctionNameBaseContext.prototype.ST_ASTEXT = function() {
    return this.getToken(MySQLParser.ST_ASTEXT, 0);
};

FunctionNameBaseContext.prototype.ST_ASWKB = function() {
    return this.getToken(MySQLParser.ST_ASWKB, 0);
};

FunctionNameBaseContext.prototype.ST_ASWKT = function() {
    return this.getToken(MySQLParser.ST_ASWKT, 0);
};

FunctionNameBaseContext.prototype.ST_BUFFER = function() {
    return this.getToken(MySQLParser.ST_BUFFER, 0);
};

FunctionNameBaseContext.prototype.ST_CENTROID = function() {
    return this.getToken(MySQLParser.ST_CENTROID, 0);
};

FunctionNameBaseContext.prototype.ST_CONTAINS = function() {
    return this.getToken(MySQLParser.ST_CONTAINS, 0);
};

FunctionNameBaseContext.prototype.ST_CROSSES = function() {
    return this.getToken(MySQLParser.ST_CROSSES, 0);
};

FunctionNameBaseContext.prototype.ST_DIFFERENCE = function() {
    return this.getToken(MySQLParser.ST_DIFFERENCE, 0);
};

FunctionNameBaseContext.prototype.ST_DIMENSION = function() {
    return this.getToken(MySQLParser.ST_DIMENSION, 0);
};

FunctionNameBaseContext.prototype.ST_DISJOINT = function() {
    return this.getToken(MySQLParser.ST_DISJOINT, 0);
};

FunctionNameBaseContext.prototype.ST_DISTANCE = function() {
    return this.getToken(MySQLParser.ST_DISTANCE, 0);
};

FunctionNameBaseContext.prototype.ST_ENDPOINT = function() {
    return this.getToken(MySQLParser.ST_ENDPOINT, 0);
};

FunctionNameBaseContext.prototype.ST_ENVELOPE = function() {
    return this.getToken(MySQLParser.ST_ENVELOPE, 0);
};

FunctionNameBaseContext.prototype.ST_EQUALS = function() {
    return this.getToken(MySQLParser.ST_EQUALS, 0);
};

FunctionNameBaseContext.prototype.ST_EXTERIORRING = function() {
    return this.getToken(MySQLParser.ST_EXTERIORRING, 0);
};

FunctionNameBaseContext.prototype.ST_GEOMCOLLFROMTEXT = function() {
    return this.getToken(MySQLParser.ST_GEOMCOLLFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.ST_GEOMCOLLFROMTXT = function() {
    return this.getToken(MySQLParser.ST_GEOMCOLLFROMTXT, 0);
};

FunctionNameBaseContext.prototype.ST_GEOMCOLLFROMWKB = function() {
    return this.getToken(MySQLParser.ST_GEOMCOLLFROMWKB, 0);
};

FunctionNameBaseContext.prototype.ST_GEOMETRYCOLLECTIONFROMTEXT = function() {
    return this.getToken(MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.ST_GEOMETRYCOLLECTIONFROMWKB = function() {
    return this.getToken(MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0);
};

FunctionNameBaseContext.prototype.ST_GEOMETRYFROMTEXT = function() {
    return this.getToken(MySQLParser.ST_GEOMETRYFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.ST_GEOMETRYFROMWKB = function() {
    return this.getToken(MySQLParser.ST_GEOMETRYFROMWKB, 0);
};

FunctionNameBaseContext.prototype.ST_GEOMETRYN = function() {
    return this.getToken(MySQLParser.ST_GEOMETRYN, 0);
};

FunctionNameBaseContext.prototype.ST_GEOMETRYTYPE = function() {
    return this.getToken(MySQLParser.ST_GEOMETRYTYPE, 0);
};

FunctionNameBaseContext.prototype.ST_GEOMFROMTEXT = function() {
    return this.getToken(MySQLParser.ST_GEOMFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.ST_GEOMFROMWKB = function() {
    return this.getToken(MySQLParser.ST_GEOMFROMWKB, 0);
};

FunctionNameBaseContext.prototype.ST_INTERIORRINGN = function() {
    return this.getToken(MySQLParser.ST_INTERIORRINGN, 0);
};

FunctionNameBaseContext.prototype.ST_INTERSECTION = function() {
    return this.getToken(MySQLParser.ST_INTERSECTION, 0);
};

FunctionNameBaseContext.prototype.ST_INTERSECTS = function() {
    return this.getToken(MySQLParser.ST_INTERSECTS, 0);
};

FunctionNameBaseContext.prototype.ST_ISCLOSED = function() {
    return this.getToken(MySQLParser.ST_ISCLOSED, 0);
};

FunctionNameBaseContext.prototype.ST_ISEMPTY = function() {
    return this.getToken(MySQLParser.ST_ISEMPTY, 0);
};

FunctionNameBaseContext.prototype.ST_ISSIMPLE = function() {
    return this.getToken(MySQLParser.ST_ISSIMPLE, 0);
};

FunctionNameBaseContext.prototype.ST_LINEFROMTEXT = function() {
    return this.getToken(MySQLParser.ST_LINEFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.ST_LINEFROMWKB = function() {
    return this.getToken(MySQLParser.ST_LINEFROMWKB, 0);
};

FunctionNameBaseContext.prototype.ST_LINESTRINGFROMTEXT = function() {
    return this.getToken(MySQLParser.ST_LINESTRINGFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.ST_LINESTRINGFROMWKB = function() {
    return this.getToken(MySQLParser.ST_LINESTRINGFROMWKB, 0);
};

FunctionNameBaseContext.prototype.ST_NUMGEOMETRIES = function() {
    return this.getToken(MySQLParser.ST_NUMGEOMETRIES, 0);
};

FunctionNameBaseContext.prototype.ST_NUMINTERIORRING = function() {
    return this.getToken(MySQLParser.ST_NUMINTERIORRING, 0);
};

FunctionNameBaseContext.prototype.ST_NUMINTERIORRINGS = function() {
    return this.getToken(MySQLParser.ST_NUMINTERIORRINGS, 0);
};

FunctionNameBaseContext.prototype.ST_NUMPOINTS = function() {
    return this.getToken(MySQLParser.ST_NUMPOINTS, 0);
};

FunctionNameBaseContext.prototype.ST_OVERLAPS = function() {
    return this.getToken(MySQLParser.ST_OVERLAPS, 0);
};

FunctionNameBaseContext.prototype.ST_POINTFROMTEXT = function() {
    return this.getToken(MySQLParser.ST_POINTFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.ST_POINTFROMWKB = function() {
    return this.getToken(MySQLParser.ST_POINTFROMWKB, 0);
};

FunctionNameBaseContext.prototype.ST_POINTN = function() {
    return this.getToken(MySQLParser.ST_POINTN, 0);
};

FunctionNameBaseContext.prototype.ST_POLYFROMTEXT = function() {
    return this.getToken(MySQLParser.ST_POLYFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.ST_POLYFROMWKB = function() {
    return this.getToken(MySQLParser.ST_POLYFROMWKB, 0);
};

FunctionNameBaseContext.prototype.ST_POLYGONFROMTEXT = function() {
    return this.getToken(MySQLParser.ST_POLYGONFROMTEXT, 0);
};

FunctionNameBaseContext.prototype.ST_POLYGONFROMWKB = function() {
    return this.getToken(MySQLParser.ST_POLYGONFROMWKB, 0);
};

FunctionNameBaseContext.prototype.ST_SRID = function() {
    return this.getToken(MySQLParser.ST_SRID, 0);
};

FunctionNameBaseContext.prototype.ST_STARTPOINT = function() {
    return this.getToken(MySQLParser.ST_STARTPOINT, 0);
};

FunctionNameBaseContext.prototype.ST_SYMDIFFERENCE = function() {
    return this.getToken(MySQLParser.ST_SYMDIFFERENCE, 0);
};

FunctionNameBaseContext.prototype.ST_TOUCHES = function() {
    return this.getToken(MySQLParser.ST_TOUCHES, 0);
};

FunctionNameBaseContext.prototype.ST_UNION = function() {
    return this.getToken(MySQLParser.ST_UNION, 0);
};

FunctionNameBaseContext.prototype.ST_WITHIN = function() {
    return this.getToken(MySQLParser.ST_WITHIN, 0);
};

FunctionNameBaseContext.prototype.ST_X = function() {
    return this.getToken(MySQLParser.ST_X, 0);
};

FunctionNameBaseContext.prototype.ST_Y = function() {
    return this.getToken(MySQLParser.ST_Y, 0);
};

FunctionNameBaseContext.prototype.SUBDATE = function() {
    return this.getToken(MySQLParser.SUBDATE, 0);
};

FunctionNameBaseContext.prototype.SUBSTRING_INDEX = function() {
    return this.getToken(MySQLParser.SUBSTRING_INDEX, 0);
};

FunctionNameBaseContext.prototype.SUBTIME = function() {
    return this.getToken(MySQLParser.SUBTIME, 0);
};

FunctionNameBaseContext.prototype.SYSTEM_USER = function() {
    return this.getToken(MySQLParser.SYSTEM_USER, 0);
};

FunctionNameBaseContext.prototype.TAN = function() {
    return this.getToken(MySQLParser.TAN, 0);
};

FunctionNameBaseContext.prototype.TIME = function() {
    return this.getToken(MySQLParser.TIME, 0);
};

FunctionNameBaseContext.prototype.TIMEDIFF = function() {
    return this.getToken(MySQLParser.TIMEDIFF, 0);
};

FunctionNameBaseContext.prototype.TIMESTAMP = function() {
    return this.getToken(MySQLParser.TIMESTAMP, 0);
};

FunctionNameBaseContext.prototype.TIMESTAMPADD = function() {
    return this.getToken(MySQLParser.TIMESTAMPADD, 0);
};

FunctionNameBaseContext.prototype.TIMESTAMPDIFF = function() {
    return this.getToken(MySQLParser.TIMESTAMPDIFF, 0);
};

FunctionNameBaseContext.prototype.TIME_FORMAT = function() {
    return this.getToken(MySQLParser.TIME_FORMAT, 0);
};

FunctionNameBaseContext.prototype.TIME_TO_SEC = function() {
    return this.getToken(MySQLParser.TIME_TO_SEC, 0);
};

FunctionNameBaseContext.prototype.TOUCHES = function() {
    return this.getToken(MySQLParser.TOUCHES, 0);
};

FunctionNameBaseContext.prototype.TO_BASE64 = function() {
    return this.getToken(MySQLParser.TO_BASE64, 0);
};

FunctionNameBaseContext.prototype.TO_DAYS = function() {
    return this.getToken(MySQLParser.TO_DAYS, 0);
};

FunctionNameBaseContext.prototype.TO_SECONDS = function() {
    return this.getToken(MySQLParser.TO_SECONDS, 0);
};

FunctionNameBaseContext.prototype.UCASE = function() {
    return this.getToken(MySQLParser.UCASE, 0);
};

FunctionNameBaseContext.prototype.UNCOMPRESS = function() {
    return this.getToken(MySQLParser.UNCOMPRESS, 0);
};

FunctionNameBaseContext.prototype.UNCOMPRESSED_LENGTH = function() {
    return this.getToken(MySQLParser.UNCOMPRESSED_LENGTH, 0);
};

FunctionNameBaseContext.prototype.UNHEX = function() {
    return this.getToken(MySQLParser.UNHEX, 0);
};

FunctionNameBaseContext.prototype.UNIX_TIMESTAMP = function() {
    return this.getToken(MySQLParser.UNIX_TIMESTAMP, 0);
};

FunctionNameBaseContext.prototype.UPDATEXML = function() {
    return this.getToken(MySQLParser.UPDATEXML, 0);
};

FunctionNameBaseContext.prototype.UPPER = function() {
    return this.getToken(MySQLParser.UPPER, 0);
};

FunctionNameBaseContext.prototype.UUID = function() {
    return this.getToken(MySQLParser.UUID, 0);
};

FunctionNameBaseContext.prototype.UUID_SHORT = function() {
    return this.getToken(MySQLParser.UUID_SHORT, 0);
};

FunctionNameBaseContext.prototype.VALIDATE_PASSWORD_STRENGTH = function() {
    return this.getToken(MySQLParser.VALIDATE_PASSWORD_STRENGTH, 0);
};

FunctionNameBaseContext.prototype.VERSION = function() {
    return this.getToken(MySQLParser.VERSION, 0);
};

FunctionNameBaseContext.prototype.VISIBLE = function() {
    return this.getToken(MySQLParser.VISIBLE, 0);
};

FunctionNameBaseContext.prototype.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = function() {
    return this.getToken(MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0);
};

FunctionNameBaseContext.prototype.WEEK = function() {
    return this.getToken(MySQLParser.WEEK, 0);
};

FunctionNameBaseContext.prototype.WEEKDAY = function() {
    return this.getToken(MySQLParser.WEEKDAY, 0);
};

FunctionNameBaseContext.prototype.WEEKOFYEAR = function() {
    return this.getToken(MySQLParser.WEEKOFYEAR, 0);
};

FunctionNameBaseContext.prototype.WEIGHT_STRING = function() {
    return this.getToken(MySQLParser.WEIGHT_STRING, 0);
};

FunctionNameBaseContext.prototype.WITHIN = function() {
    return this.getToken(MySQLParser.WITHIN, 0);
};

FunctionNameBaseContext.prototype.YEAR = function() {
    return this.getToken(MySQLParser.YEAR, 0);
};

FunctionNameBaseContext.prototype.YEARWEEK = function() {
    return this.getToken(MySQLParser.YEARWEEK, 0);
};

FunctionNameBaseContext.prototype.Y_FUNCTION = function() {
    return this.getToken(MySQLParser.Y_FUNCTION, 0);
};

FunctionNameBaseContext.prototype.X_FUNCTION = function() {
    return this.getToken(MySQLParser.X_FUNCTION, 0);
};

FunctionNameBaseContext.prototype.JSON_VALID = function() {
    return this.getToken(MySQLParser.JSON_VALID, 0);
};

FunctionNameBaseContext.prototype.JSON_SCHEMA_VALID = function() {
    return this.getToken(MySQLParser.JSON_SCHEMA_VALID, 0);
};

FunctionNameBaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.enterFunctionNameBase(this);
	}
};

FunctionNameBaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof MySQLParserListener ) {
        listener.exitFunctionNameBase(this);
	}
};

FunctionNameBaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof MySQLParserVisitor ) {
        return visitor.visitFunctionNameBase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




MySQLParser.FunctionNameBaseContext = FunctionNameBaseContext;

MySQLParser.prototype.functionNameBase = function() {

    var localctx = new FunctionNameBaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 628, MySQLParser.RULE_functionNameBase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6374;
        _la = this._input.LA(1);
        if(!(_la===MySQLParser.DATABASE || _la===MySQLParser.LEFT || _la===MySQLParser.RIGHT || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (MySQLParser.DATE - 199)) | (1 << (MySQLParser.TIME - 199)) | (1 << (MySQLParser.TIMESTAMP - 199)) | (1 << (MySQLParser.YEAR - 199)))) !== 0) || ((((_la - 233)) & ~0x1f) == 0 && ((1 << (_la - 233)) & ((1 << (MySQLParser.JSON_VALID - 233)) | (1 << (MySQLParser.JSON_SCHEMA_VALID - 233)) | (1 << (MySQLParser.COUNT - 233)) | (1 << (MySQLParser.POSITION - 233)))) !== 0) || _la===MySQLParser.INVISIBLE || ((((_la - 580)) & ~0x1f) == 0 && ((1 << (_la - 580)) & ((1 << (MySQLParser.VISIBLE - 580)) | (1 << (MySQLParser.QUARTER - 580)) | (1 << (MySQLParser.MONTH - 580)) | (1 << (MySQLParser.DAY - 580)) | (1 << (MySQLParser.HOUR - 580)) | (1 << (MySQLParser.MINUTE - 580)) | (1 << (MySQLParser.WEEK - 580)) | (1 << (MySQLParser.SECOND - 580)) | (1 << (MySQLParser.MICROSECOND - 580)))) !== 0) || _la===MySQLParser.SESSION_VARIABLES_ADMIN || ((((_la - 693)) & ~0x1f) == 0 && ((1 << (_la - 693)) & ((1 << (MySQLParser.GEOMETRYCOLLECTION - 693)) | (1 << (MySQLParser.LINESTRING - 693)) | (1 << (MySQLParser.MULTILINESTRING - 693)) | (1 << (MySQLParser.MULTIPOINT - 693)) | (1 << (MySQLParser.MULTIPOLYGON - 693)) | (1 << (MySQLParser.POINT - 693)) | (1 << (MySQLParser.POLYGON - 693)) | (1 << (MySQLParser.ABS - 693)) | (1 << (MySQLParser.ACOS - 693)) | (1 << (MySQLParser.ADDDATE - 693)) | (1 << (MySQLParser.ADDTIME - 693)) | (1 << (MySQLParser.AES_DECRYPT - 693)) | (1 << (MySQLParser.AES_ENCRYPT - 693)) | (1 << (MySQLParser.AREA - 693)) | (1 << (MySQLParser.ASBINARY - 693)) | (1 << (MySQLParser.ASIN - 693)) | (1 << (MySQLParser.ASTEXT - 693)) | (1 << (MySQLParser.ASWKB - 693)) | (1 << (MySQLParser.ASWKT - 693)) | (1 << (MySQLParser.ASYMMETRIC_DECRYPT - 693)) | (1 << (MySQLParser.ASYMMETRIC_DERIVE - 693)) | (1 << (MySQLParser.ASYMMETRIC_ENCRYPT - 693)) | (1 << (MySQLParser.ASYMMETRIC_SIGN - 693)) | (1 << (MySQLParser.ASYMMETRIC_VERIFY - 693)) | (1 << (MySQLParser.ATAN - 693)) | (1 << (MySQLParser.ATAN2 - 693)) | (1 << (MySQLParser.BENCHMARK - 693)) | (1 << (MySQLParser.BIN - 693)) | (1 << (MySQLParser.BIT_COUNT - 693)) | (1 << (MySQLParser.BIT_LENGTH - 693)))) !== 0) || ((((_la - 725)) & ~0x1f) == 0 && ((1 << (_la - 725)) & ((1 << (MySQLParser.BUFFER - 725)) | (1 << (MySQLParser.CEIL - 725)) | (1 << (MySQLParser.CEILING - 725)) | (1 << (MySQLParser.CENTROID - 725)) | (1 << (MySQLParser.CHARACTER_LENGTH - 725)) | (1 << (MySQLParser.CHARSET - 725)) | (1 << (MySQLParser.CHAR_LENGTH - 725)) | (1 << (MySQLParser.COERCIBILITY - 725)) | (1 << (MySQLParser.COLLATION - 725)) | (1 << (MySQLParser.COMPRESS - 725)) | (1 << (MySQLParser.CONCAT - 725)) | (1 << (MySQLParser.CONCAT_WS - 725)) | (1 << (MySQLParser.CONNECTION_ID - 725)) | (1 << (MySQLParser.CONV - 725)) | (1 << (MySQLParser.CONVERT_TZ - 725)) | (1 << (MySQLParser.COS - 725)) | (1 << (MySQLParser.COT - 725)) | (1 << (MySQLParser.CRC32 - 725)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 725)) | (1 << (MySQLParser.CREATE_ASYMMETRIC_PUB_KEY - 725)) | (1 << (MySQLParser.CREATE_DH_PARAMETERS - 725)) | (1 << (MySQLParser.CREATE_DIGEST - 725)) | (1 << (MySQLParser.CROSSES - 725)) | (1 << (MySQLParser.DATEDIFF - 725)) | (1 << (MySQLParser.DATE_FORMAT - 725)) | (1 << (MySQLParser.DAYNAME - 725)) | (1 << (MySQLParser.DAYOFMONTH - 725)) | (1 << (MySQLParser.DAYOFWEEK - 725)) | (1 << (MySQLParser.DAYOFYEAR - 725)) | (1 << (MySQLParser.DECODE - 725)) | (1 << (MySQLParser.DEGREES - 725)))) !== 0) || ((((_la - 757)) & ~0x1f) == 0 && ((1 << (_la - 757)) & ((1 << (MySQLParser.DES_DECRYPT - 757)) | (1 << (MySQLParser.DES_ENCRYPT - 757)) | (1 << (MySQLParser.DIMENSION - 757)) | (1 << (MySQLParser.DISJOINT - 757)) | (1 << (MySQLParser.ELT - 757)) | (1 << (MySQLParser.ENCODE - 757)) | (1 << (MySQLParser.ENCRYPT - 757)) | (1 << (MySQLParser.ENDPOINT - 757)) | (1 << (MySQLParser.ENVELOPE - 757)) | (1 << (MySQLParser.EQUALS - 757)) | (1 << (MySQLParser.EXP - 757)) | (1 << (MySQLParser.EXPORT_SET - 757)) | (1 << (MySQLParser.EXTERIORRING - 757)) | (1 << (MySQLParser.EXTRACTVALUE - 757)) | (1 << (MySQLParser.FIELD - 757)) | (1 << (MySQLParser.FIND_IN_SET - 757)) | (1 << (MySQLParser.FLOOR - 757)) | (1 << (MySQLParser.FORMAT - 757)) | (1 << (MySQLParser.FOUND_ROWS - 757)) | (1 << (MySQLParser.FROM_BASE64 - 757)) | (1 << (MySQLParser.FROM_DAYS - 757)) | (1 << (MySQLParser.FROM_UNIXTIME - 757)) | (1 << (MySQLParser.GEOMCOLLFROMTEXT - 757)) | (1 << (MySQLParser.GEOMCOLLFROMWKB - 757)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMTEXT - 757)) | (1 << (MySQLParser.GEOMETRYCOLLECTIONFROMWKB - 757)) | (1 << (MySQLParser.GEOMETRYFROMTEXT - 757)) | (1 << (MySQLParser.GEOMETRYFROMWKB - 757)) | (1 << (MySQLParser.GEOMETRYN - 757)) | (1 << (MySQLParser.GEOMETRYTYPE - 757)) | (1 << (MySQLParser.GEOMFROMTEXT - 757)) | (1 << (MySQLParser.GEOMFROMWKB - 757)))) !== 0) || ((((_la - 789)) & ~0x1f) == 0 && ((1 << (_la - 789)) & ((1 << (MySQLParser.GET_FORMAT - 789)) | (1 << (MySQLParser.GET_LOCK - 789)) | (1 << (MySQLParser.GLENGTH - 789)) | (1 << (MySQLParser.GREATEST - 789)) | (1 << (MySQLParser.GTID_SUBSET - 789)) | (1 << (MySQLParser.GTID_SUBTRACT - 789)) | (1 << (MySQLParser.HEX - 789)) | (1 << (MySQLParser.IFNULL - 789)) | (1 << (MySQLParser.INET6_ATON - 789)) | (1 << (MySQLParser.INET6_NTOA - 789)) | (1 << (MySQLParser.INET_ATON - 789)) | (1 << (MySQLParser.INET_NTOA - 789)) | (1 << (MySQLParser.INSTR - 789)) | (1 << (MySQLParser.INTERIORRINGN - 789)) | (1 << (MySQLParser.INTERSECTS - 789)) | (1 << (MySQLParser.ISCLOSED - 789)) | (1 << (MySQLParser.ISEMPTY - 789)) | (1 << (MySQLParser.ISNULL - 789)) | (1 << (MySQLParser.ISSIMPLE - 789)) | (1 << (MySQLParser.IS_FREE_LOCK - 789)) | (1 << (MySQLParser.IS_IPV4 - 789)) | (1 << (MySQLParser.IS_IPV4_COMPAT - 789)) | (1 << (MySQLParser.IS_IPV4_MAPPED - 789)) | (1 << (MySQLParser.IS_IPV6 - 789)) | (1 << (MySQLParser.IS_USED_LOCK - 789)) | (1 << (MySQLParser.LAST_INSERT_ID - 789)) | (1 << (MySQLParser.LCASE - 789)) | (1 << (MySQLParser.LEAST - 789)) | (1 << (MySQLParser.LENGTH - 789)) | (1 << (MySQLParser.LINEFROMTEXT - 789)) | (1 << (MySQLParser.LINEFROMWKB - 789)) | (1 << (MySQLParser.LINESTRINGFROMTEXT - 789)))) !== 0) || ((((_la - 821)) & ~0x1f) == 0 && ((1 << (_la - 821)) & ((1 << (MySQLParser.LINESTRINGFROMWKB - 821)) | (1 << (MySQLParser.LN - 821)) | (1 << (MySQLParser.LOAD_FILE - 821)) | (1 << (MySQLParser.LOCATE - 821)) | (1 << (MySQLParser.LOG - 821)) | (1 << (MySQLParser.LOG10 - 821)) | (1 << (MySQLParser.LOG2 - 821)) | (1 << (MySQLParser.LOWER - 821)) | (1 << (MySQLParser.LPAD - 821)) | (1 << (MySQLParser.LTRIM - 821)) | (1 << (MySQLParser.MAKEDATE - 821)) | (1 << (MySQLParser.MAKETIME - 821)) | (1 << (MySQLParser.MAKE_SET - 821)) | (1 << (MySQLParser.MASTER_POS_WAIT - 821)) | (1 << (MySQLParser.MBRCONTAINS - 821)) | (1 << (MySQLParser.MBRDISJOINT - 821)) | (1 << (MySQLParser.MBREQUAL - 821)) | (1 << (MySQLParser.MBRINTERSECTS - 821)) | (1 << (MySQLParser.MBROVERLAPS - 821)) | (1 << (MySQLParser.MBRTOUCHES - 821)) | (1 << (MySQLParser.MBRWITHIN - 821)) | (1 << (MySQLParser.MD5 - 821)) | (1 << (MySQLParser.MLINEFROMTEXT - 821)) | (1 << (MySQLParser.MLINEFROMWKB - 821)) | (1 << (MySQLParser.MONTHNAME - 821)) | (1 << (MySQLParser.MPOINTFROMTEXT - 821)) | (1 << (MySQLParser.MPOINTFROMWKB - 821)) | (1 << (MySQLParser.MPOLYFROMTEXT - 821)) | (1 << (MySQLParser.MPOLYFROMWKB - 821)) | (1 << (MySQLParser.MULTILINESTRINGFROMTEXT - 821)) | (1 << (MySQLParser.MULTILINESTRINGFROMWKB - 821)) | (1 << (MySQLParser.MULTIPOINTFROMTEXT - 821)))) !== 0) || ((((_la - 853)) & ~0x1f) == 0 && ((1 << (_la - 853)) & ((1 << (MySQLParser.MULTIPOINTFROMWKB - 853)) | (1 << (MySQLParser.MULTIPOLYGONFROMTEXT - 853)) | (1 << (MySQLParser.MULTIPOLYGONFROMWKB - 853)) | (1 << (MySQLParser.NAME_CONST - 853)) | (1 << (MySQLParser.NULLIF - 853)) | (1 << (MySQLParser.NUMGEOMETRIES - 853)) | (1 << (MySQLParser.NUMINTERIORRINGS - 853)) | (1 << (MySQLParser.NUMPOINTS - 853)) | (1 << (MySQLParser.OCT - 853)) | (1 << (MySQLParser.OCTET_LENGTH - 853)) | (1 << (MySQLParser.ORD - 853)) | (1 << (MySQLParser.OVERLAPS - 853)) | (1 << (MySQLParser.PERIOD_ADD - 853)) | (1 << (MySQLParser.PERIOD_DIFF - 853)) | (1 << (MySQLParser.PI - 853)) | (1 << (MySQLParser.POINTFROMTEXT - 853)) | (1 << (MySQLParser.POINTFROMWKB - 853)) | (1 << (MySQLParser.POINTN - 853)) | (1 << (MySQLParser.POLYFROMTEXT - 853)) | (1 << (MySQLParser.POLYFROMWKB - 853)) | (1 << (MySQLParser.POLYGONFROMTEXT - 853)) | (1 << (MySQLParser.POLYGONFROMWKB - 853)) | (1 << (MySQLParser.POW - 853)) | (1 << (MySQLParser.POWER - 853)) | (1 << (MySQLParser.QUOTE - 853)) | (1 << (MySQLParser.RADIANS - 853)) | (1 << (MySQLParser.RAND - 853)) | (1 << (MySQLParser.RANDOM_BYTES - 853)) | (1 << (MySQLParser.RELEASE_LOCK - 853)) | (1 << (MySQLParser.REVERSE - 853)) | (1 << (MySQLParser.ROUND - 853)) | (1 << (MySQLParser.ROW_COUNT - 853)))) !== 0) || ((((_la - 885)) & ~0x1f) == 0 && ((1 << (_la - 885)) & ((1 << (MySQLParser.RPAD - 885)) | (1 << (MySQLParser.RTRIM - 885)) | (1 << (MySQLParser.SEC_TO_TIME - 885)) | (1 << (MySQLParser.SESSION_USER - 885)) | (1 << (MySQLParser.SHA - 885)) | (1 << (MySQLParser.SHA1 - 885)) | (1 << (MySQLParser.SHA2 - 885)) | (1 << (MySQLParser.SIGN - 885)) | (1 << (MySQLParser.SIN - 885)) | (1 << (MySQLParser.SLEEP - 885)) | (1 << (MySQLParser.SOUNDEX - 885)) | (1 << (MySQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 885)) | (1 << (MySQLParser.SQRT - 885)) | (1 << (MySQLParser.SRID - 885)) | (1 << (MySQLParser.STARTPOINT - 885)) | (1 << (MySQLParser.STRCMP - 885)) | (1 << (MySQLParser.STR_TO_DATE - 885)) | (1 << (MySQLParser.ST_AREA - 885)) | (1 << (MySQLParser.ST_ASBINARY - 885)) | (1 << (MySQLParser.ST_ASTEXT - 885)) | (1 << (MySQLParser.ST_ASWKB - 885)) | (1 << (MySQLParser.ST_ASWKT - 885)) | (1 << (MySQLParser.ST_BUFFER - 885)) | (1 << (MySQLParser.ST_CENTROID - 885)) | (1 << (MySQLParser.ST_CONTAINS - 885)) | (1 << (MySQLParser.ST_CROSSES - 885)) | (1 << (MySQLParser.ST_DIFFERENCE - 885)) | (1 << (MySQLParser.ST_DIMENSION - 885)) | (1 << (MySQLParser.ST_DISJOINT - 885)) | (1 << (MySQLParser.ST_DISTANCE - 885)) | (1 << (MySQLParser.ST_ENDPOINT - 885)))) !== 0) || ((((_la - 917)) & ~0x1f) == 0 && ((1 << (_la - 917)) & ((1 << (MySQLParser.ST_ENVELOPE - 917)) | (1 << (MySQLParser.ST_EQUALS - 917)) | (1 << (MySQLParser.ST_EXTERIORRING - 917)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTEXT - 917)) | (1 << (MySQLParser.ST_GEOMCOLLFROMTXT - 917)) | (1 << (MySQLParser.ST_GEOMCOLLFROMWKB - 917)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 917)) | (1 << (MySQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 917)) | (1 << (MySQLParser.ST_GEOMETRYFROMTEXT - 917)) | (1 << (MySQLParser.ST_GEOMETRYFROMWKB - 917)) | (1 << (MySQLParser.ST_GEOMETRYN - 917)) | (1 << (MySQLParser.ST_GEOMETRYTYPE - 917)) | (1 << (MySQLParser.ST_GEOMFROMTEXT - 917)) | (1 << (MySQLParser.ST_GEOMFROMWKB - 917)) | (1 << (MySQLParser.ST_INTERIORRINGN - 917)) | (1 << (MySQLParser.ST_INTERSECTION - 917)) | (1 << (MySQLParser.ST_INTERSECTS - 917)) | (1 << (MySQLParser.ST_ISCLOSED - 917)) | (1 << (MySQLParser.ST_ISEMPTY - 917)) | (1 << (MySQLParser.ST_ISSIMPLE - 917)) | (1 << (MySQLParser.ST_LINEFROMTEXT - 917)) | (1 << (MySQLParser.ST_LINEFROMWKB - 917)) | (1 << (MySQLParser.ST_LINESTRINGFROMTEXT - 917)) | (1 << (MySQLParser.ST_LINESTRINGFROMWKB - 917)) | (1 << (MySQLParser.ST_NUMGEOMETRIES - 917)) | (1 << (MySQLParser.ST_NUMINTERIORRING - 917)) | (1 << (MySQLParser.ST_NUMINTERIORRINGS - 917)) | (1 << (MySQLParser.ST_NUMPOINTS - 917)) | (1 << (MySQLParser.ST_OVERLAPS - 917)) | (1 << (MySQLParser.ST_POINTFROMTEXT - 917)) | (1 << (MySQLParser.ST_POINTFROMWKB - 917)) | (1 << (MySQLParser.ST_POINTN - 917)))) !== 0) || ((((_la - 949)) & ~0x1f) == 0 && ((1 << (_la - 949)) & ((1 << (MySQLParser.ST_POLYFROMTEXT - 949)) | (1 << (MySQLParser.ST_POLYFROMWKB - 949)) | (1 << (MySQLParser.ST_POLYGONFROMTEXT - 949)) | (1 << (MySQLParser.ST_POLYGONFROMWKB - 949)) | (1 << (MySQLParser.ST_SRID - 949)) | (1 << (MySQLParser.ST_STARTPOINT - 949)) | (1 << (MySQLParser.ST_SYMDIFFERENCE - 949)) | (1 << (MySQLParser.ST_TOUCHES - 949)) | (1 << (MySQLParser.ST_UNION - 949)) | (1 << (MySQLParser.ST_WITHIN - 949)) | (1 << (MySQLParser.ST_X - 949)) | (1 << (MySQLParser.ST_Y - 949)) | (1 << (MySQLParser.SUBDATE - 949)) | (1 << (MySQLParser.SUBSTRING_INDEX - 949)) | (1 << (MySQLParser.SUBTIME - 949)) | (1 << (MySQLParser.SYSTEM_USER - 949)) | (1 << (MySQLParser.TAN - 949)) | (1 << (MySQLParser.TIMEDIFF - 949)) | (1 << (MySQLParser.TIMESTAMPADD - 949)) | (1 << (MySQLParser.TIMESTAMPDIFF - 949)) | (1 << (MySQLParser.TIME_FORMAT - 949)) | (1 << (MySQLParser.TIME_TO_SEC - 949)) | (1 << (MySQLParser.TOUCHES - 949)) | (1 << (MySQLParser.TO_BASE64 - 949)) | (1 << (MySQLParser.TO_DAYS - 949)) | (1 << (MySQLParser.TO_SECONDS - 949)) | (1 << (MySQLParser.UCASE - 949)) | (1 << (MySQLParser.UNCOMPRESS - 949)) | (1 << (MySQLParser.UNCOMPRESSED_LENGTH - 949)) | (1 << (MySQLParser.UNHEX - 949)) | (1 << (MySQLParser.UNIX_TIMESTAMP - 949)) | (1 << (MySQLParser.UPDATEXML - 949)))) !== 0) || ((((_la - 981)) & ~0x1f) == 0 && ((1 << (_la - 981)) & ((1 << (MySQLParser.UPPER - 981)) | (1 << (MySQLParser.UUID - 981)) | (1 << (MySQLParser.UUID_SHORT - 981)) | (1 << (MySQLParser.VALIDATE_PASSWORD_STRENGTH - 981)) | (1 << (MySQLParser.VERSION - 981)) | (1 << (MySQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 981)) | (1 << (MySQLParser.WEEKDAY - 981)) | (1 << (MySQLParser.WEEKOFYEAR - 981)) | (1 << (MySQLParser.WEIGHT_STRING - 981)) | (1 << (MySQLParser.WITHIN - 981)) | (1 << (MySQLParser.YEARWEEK - 981)) | (1 << (MySQLParser.Y_FUNCTION - 981)) | (1 << (MySQLParser.X_FUNCTION - 981)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


MySQLParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 300:
			return this.expression_sempred(localctx, predIndex);
	case 301:
			return this.predicate_sempred(localctx, predIndex);
	case 302:
			return this.expressionAtom_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

MySQLParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.predicate_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 7);
		case 2:
			return this.precpred(this._ctx, 5);
		case 3:
			return this.precpred(this._ctx, 4);
		case 4:
			return this.precpred(this._ctx, 2);
		case 5:
			return this.precpred(this._ctx, 9);
		case 6:
			return this.precpred(this._ctx, 8);
		case 7:
			return this.precpred(this._ctx, 6);
		case 8:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

MySQLParser.prototype.expressionAtom_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.precpred(this._ctx, 2);
		case 10:
			return this.precpred(this._ctx, 1);
		case 11:
			return this.precpred(this._ctx, 11);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.MySQLParser = MySQLParser;
