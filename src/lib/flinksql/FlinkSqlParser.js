// Generated from /Users/erindeng/Desktop/dt-sql-parser/src/grammar/flinksql/FlinkSqlParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var FlinkSqlParserListener = require('./FlinkSqlParserListener').FlinkSqlParserListener;
var FlinkSqlParserVisitor = require('./FlinkSqlParserVisitor').FlinkSqlParserVisitor;

var grammarFileName = "FlinkSqlParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0142\u02d4\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0007\u0004\u0091\n\u0004\f\u0004\u000e\u0004\u0094\u000b",
    "\u0004\u0003\u0005\u0003\u0005\u0005\u0005\u0098\n\u0005\u0003\u0006",
    "\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0005\u0007\u00a7\n\u0007\u0003\b\u0003\b\u0005\b\u00ab\n\b\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u00b4\n\t\f",
    "\t\u000e\t\u00b7\u000b\t\u0003\t\u0003\t\u0005\t\u00bb\n\t\u0003\t\u0003",
    "\t\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0007",
    "\u000e\u00cd\n\u000e\f\u000e\u000e\u000e\u00d0\u000b\u000e\u0003\u000f",
    "\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u00d7\n",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0005",
    "\u0011\u00de\n\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u00e2\n\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u00ef\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0007\u0015\u00fa",
    "\n\u0015\f\u0015\u000e\u0015\u00fd\u000b\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017",
    "\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u010b\n",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0005",
    "\u0019\u0112\n\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0116\n\u0019",
    "\u0003\u001a\u0003\u001a\u0005\u001a\u011a\n\u001a\u0003\u001a\u0003",
    "\u001a\u0005\u001a\u011e\n\u001a\u0003\u001a\u0003\u001a\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0126\n\u001b\u0003",
    "\u001b\u0003\u001b\u0005\u001b\u012a\n\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0132\n",
    "\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0136\n\u001c\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u013d\n",
    "\u001d\f\u001d\u000e\u001d\u0140\u000b\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u0148\n",
    "\u001e\f\u001e\u000e\u001e\u014b\u000b\u001e\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0007\u001f\u0151\n\u001f\f\u001f\u000e\u001f",
    "\u0154\u000b\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003",
    " \u0005 \u015c\n \u0003!\u0003!\u0003\"\u0003\"\u0005\"\u0162\n\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0007\"\u0168\n\"\f\"\u000e\"\u016b\u000b",
    "\"\u0005\"\u016d\n\"\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0005#\u0174",
    "\n#\u0003#\u0005#\u0177\n#\u0003#\u0003#\u0003#\u0003#\u0005#\u017d",
    "\n#\u0003$\u0003$\u0003$\u0007$\u0182\n$\f$\u000e$\u0185\u000b$\u0003",
    "%\u0003%\u0003%\u0003&\u0005&\u018b\n&\u0003&\u0003&\u0003\'\u0003\'",
    "\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u0196\n(\u0005(\u0198\n(",
    "\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0007(\u01a0\n(\f(\u000e",
    "(\u01a3\u000b(\u0003)\u0005)\u01a6\n)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0005)\u01ae\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0007)\u01b5",
    "\n)\f)\u000e)\u01b8\u000b)\u0003)\u0003)\u0003)\u0005)\u01bd\n)\u0003",
    ")\u0003)\u0003)\u0005)\u01c2\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0007)\u01cc\n)\f)\u000e)\u01cf\u000b)\u0003)\u0003",
    ")\u0005)\u01d3\n)\u0003)\u0005)\u01d6\n)\u0003)\u0003)\u0003)\u0003",
    ")\u0005)\u01dc\n)\u0003)\u0003)\u0003)\u0005)\u01e1\n)\u0003)\u0003",
    ")\u0003)\u0005)\u01e6\n)\u0003)\u0003)\u0003)\u0005)\u01eb\n)\u0003",
    "*\u0003*\u0003*\u0003*\u0005*\u01f1\n*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0007*\u0206\n*\f*\u000e*\u0209\u000b",
    "*\u0003+\u0003+\u0003+\u0006+\u020e\n+\r+\u000e+\u020f\u0003+\u0003",
    "+\u0005+\u0214\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0006+\u021b\n",
    "+\r+\u000e+\u021c\u0003+\u0003+\u0005+\u0221\n+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0005+\u022a\n+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0005+\u0233\n+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0005+\u0244\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0007+\u024b\n",
    "+\f+\u000e+\u024e\u000b+\u0003,\u0005,\u0251\n,\u0003,\u0003,\u0005",
    ",\u0255\n,\u0005,\u0257\n,\u0003-\u0003-\u0003-\u0003-\u0003.\u0003",
    ".\u0003.\u0007.\u0260\n.\f.\u000e.\u0263\u000b.\u0003/\u0003/\u0003",
    "0\u00030\u00050\u0269\n0\u00031\u00031\u00032\u00032\u00032\u00032\u0003",
    "2\u00033\u00033\u00033\u00073\u0275\n3\f3\u000e3\u0278\u000b3\u0003",
    "4\u00034\u00074\u027c\n4\f4\u000e4\u027f\u000b4\u00035\u00035\u0003",
    "5\u00035\u00035\u00075\u0286\n5\f5\u000e5\u0289\u000b5\u00035\u0003",
    "5\u00036\u00036\u00036\u00036\u00037\u00037\u00037\u00038\u00038\u0003",
    "8\u00038\u00039\u00039\u00039\u00039\u00039\u00039\u00059\u029e\n9\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0005:\u02ae\n:\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0005;\u02b7\n;\u0003<\u0003<\u0003=\u0003=\u0003>\u0003",
    ">\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0005?\u02c7",
    "\n?\u0003?\u0005?\u02ca\n?\u0003@\u0003@\u0003A\u0003A\u0003B\u0003",
    "B\u0003C\u0003C\u0003C\u0003\u027d\u0005NRTD\u0002\u0004\u0006\b\n\f",
    "\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.0246",
    "8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0002\u000e",
    "\u0003\u0002\u0108\u011e\u0003\u0002\u00c0\u00c1\u0004\u0002PP\u0094",
    "\u0094\u0003\u0002\u000b\f\u0003\u0002#$\u0004\u0002\u0082\u0083\u0088",
    "\u0088\u0003\u0002\u0084\u0087\u0004\u0002\u0082\u0083\u008b\u008b\u0005",
    "\u0002\u0087\u0087\u0136\u0136\u0138\u013c\u0005\u0002\u001c\u001c\u0122",
    "\u0123\u0138\u0139\u0004\u0002\u012f\u0131\u013e\u013e\u0004\u0002\u000b",
    "\u000b\r\r\u0002\u0307\u0002\u0086\u0003\u0002\u0002\u0002\u0004\u0089",
    "\u0003\u0002\u0002\u0002\u0006\u0092\u0003\u0002\u0002\u0002\b\u0097",
    "\u0003\u0002\u0002\u0002\n\u0099\u0003\u0002\u0002\u0002\f\u00a6\u0003",
    "\u0002\u0002\u0002\u000e\u00aa\u0003\u0002\u0002\u0002\u0010\u00ac\u0003",
    "\u0002\u0002\u0002\u0012\u00be\u0003\u0002\u0002\u0002\u0014\u00c1\u0003",
    "\u0002\u0002\u0002\u0016\u00c3\u0003\u0002\u0002\u0002\u0018\u00c5\u0003",
    "\u0002\u0002\u0002\u001a\u00c9\u0003\u0002\u0002\u0002\u001c\u00d1\u0003",
    "\u0002\u0002\u0002\u001e\u00d3\u0003\u0002\u0002\u0002 \u00db\u0003",
    "\u0002\u0002\u0002\"\u00e7\u0003\u0002\u0002\u0002$\u00e9\u0003\u0002",
    "\u0002\u0002&\u00f0\u0003\u0002\u0002\u0002(\u00f4\u0003\u0002\u0002",
    "\u0002*\u0100\u0003\u0002\u0002\u0002,\u0105\u0003\u0002\u0002\u0002",
    ".\u0107\u0003\u0002\u0002\u00020\u010e\u0003\u0002\u0002\u00022\u0117",
    "\u0003\u0002\u0002\u00024\u0121\u0003\u0002\u0002\u00026\u012d\u0003",
    "\u0002\u0002\u00028\u0137\u0003\u0002\u0002\u0002:\u0143\u0003\u0002",
    "\u0002\u0002<\u014c\u0003\u0002\u0002\u0002>\u015b\u0003\u0002\u0002",
    "\u0002@\u015d\u0003\u0002\u0002\u0002B\u015f\u0003\u0002\u0002\u0002",
    "D\u017c\u0003\u0002\u0002\u0002F\u017e\u0003\u0002\u0002\u0002H\u0186",
    "\u0003\u0002\u0002\u0002J\u018a\u0003\u0002\u0002\u0002L\u018e\u0003",
    "\u0002\u0002\u0002N\u0197\u0003\u0002\u0002\u0002P\u01ea\u0003\u0002",
    "\u0002\u0002R\u01f0\u0003\u0002\u0002\u0002T\u0243\u0003\u0002\u0002",
    "\u0002V\u0256\u0003\u0002\u0002\u0002X\u0258\u0003\u0002\u0002\u0002",
    "Z\u025c\u0003\u0002\u0002\u0002\\\u0264\u0003\u0002\u0002\u0002^\u0268",
    "\u0003\u0002\u0002\u0002`\u026a\u0003\u0002\u0002\u0002b\u026c\u0003",
    "\u0002\u0002\u0002d\u0271\u0003\u0002\u0002\u0002f\u0279\u0003\u0002",
    "\u0002\u0002h\u0280\u0003\u0002\u0002\u0002j\u028c\u0003\u0002\u0002",
    "\u0002l\u0290\u0003\u0002\u0002\u0002n\u0293\u0003\u0002\u0002\u0002",
    "p\u029d\u0003\u0002\u0002\u0002r\u02ad\u0003\u0002\u0002\u0002t\u02b6",
    "\u0003\u0002\u0002\u0002v\u02b8\u0003\u0002\u0002\u0002x\u02ba\u0003",
    "\u0002\u0002\u0002z\u02bc\u0003\u0002\u0002\u0002|\u02c9\u0003\u0002",
    "\u0002\u0002~\u02cb\u0003\u0002\u0002\u0002\u0080\u02cd\u0003\u0002",
    "\u0002\u0002\u0082\u02cf\u0003\u0002\u0002\u0002\u0084\u02d1\u0003\u0002",
    "\u0002\u0002\u0086\u0087\u0005\u0004\u0003\u0002\u0087\u0088\u0007\u0002",
    "\u0002\u0003\u0088\u0003\u0003\u0002\u0002\u0002\u0089\u008a\u0005\u0006",
    "\u0004\u0002\u008a\u008b\u0007\u0002\u0002\u0003\u008b\u0005\u0003\u0002",
    "\u0002\u0002\u008c\u008d\u0005\b\u0005\u0002\u008d\u008e\u0007\u012d",
    "\u0002\u0002\u008e\u0091\u0003\u0002\u0002\u0002\u008f\u0091\u0005\n",
    "\u0006\u0002\u0090\u008c\u0003\u0002\u0002\u0002\u0090\u008f\u0003\u0002",
    "\u0002\u0002\u0091\u0094\u0003\u0002\u0002\u0002\u0092\u0090\u0003\u0002",
    "\u0002\u0002\u0092\u0093\u0003\u0002\u0002\u0002\u0093\u0007\u0003\u0002",
    "\u0002\u0002\u0094\u0092\u0003\u0002\u0002\u0002\u0095\u0098\u0005\f",
    "\u0007\u0002\u0096\u0098\u0005\u000e\b\u0002\u0097\u0095\u0003\u0002",
    "\u0002\u0002\u0097\u0096\u0003\u0002\u0002\u0002\u0098\t\u0003\u0002",
    "\u0002\u0002\u0099\u009a\u0007\u012d\u0002\u0002\u009a\u000b\u0003\u0002",
    "\u0002\u0002\u009b\u00a7\u0005\u0010\t\u0002\u009c\u00a7\u0005\u001e",
    "\u0010\u0002\u009d\u00a7\u0005 \u0011\u0002\u009e\u00a7\u0005\"\u0012",
    "\u0002\u009f\u00a7\u0005$\u0013\u0002\u00a0\u00a7\u0005*\u0016\u0002",
    "\u00a1\u00a7\u0005,\u0017\u0002\u00a2\u00a7\u0005.\u0018\u0002\u00a3",
    "\u00a7\u00050\u0019\u0002\u00a4\u00a7\u00052\u001a\u0002\u00a5\u00a7",
    "\u00054\u001b\u0002\u00a6\u009b\u0003\u0002\u0002\u0002\u00a6\u009c",
    "\u0003\u0002\u0002\u0002\u00a6\u009d\u0003\u0002\u0002\u0002\u00a6\u009e",
    "\u0003\u0002\u0002\u0002\u00a6\u009f\u0003\u0002\u0002\u0002\u00a6\u00a0",
    "\u0003\u0002\u0002\u0002\u00a6\u00a1\u0003\u0002\u0002\u0002\u00a6\u00a2",
    "\u0003\u0002\u0002\u0002\u00a6\u00a3\u0003\u0002\u0002\u0002\u00a6\u00a4",
    "\u0003\u0002\u0002\u0002\u00a6\u00a5\u0003\u0002\u0002\u0002\u00a7\r",
    "\u0003\u0002\u0002\u0002\u00a8\u00ab\u0005@!\u0002\u00a9\u00ab\u0005",
    "6\u001c\u0002\u00aa\u00a8\u0003\u0002\u0002\u0002\u00aa\u00a9\u0003",
    "\u0002\u0002\u0002\u00ab\u000f\u0003\u0002\u0002\u0002\u00ac\u00ad\u0007",
    "I\u0002\u0002\u00ad\u00ae\u0007J\u0002\u0002\u00ae\u00af\u0005f4\u0002",
    "\u00af\u00b0\u0007\u012a\u0002\u0002\u00b0\u00b5\u0005\u0012\n\u0002",
    "\u00b1\u00b2\u0007\u012c\u0002\u0002\u00b2\u00b4\u0005\u0012\n\u0002",
    "\u00b3\u00b1\u0003\u0002\u0002\u0002\u00b4\u00b7\u0003\u0002\u0002\u0002",
    "\u00b5\u00b3\u0003\u0002\u0002\u0002\u00b5\u00b6\u0003\u0002\u0002\u0002",
    "\u00b6\u00b8\u0003\u0002\u0002\u0002\u00b7\u00b5\u0003\u0002\u0002\u0002",
    "\u00b8\u00ba\u0007\u012b\u0002\u0002\u00b9\u00bb\u0005\u0018\r\u0002",
    "\u00ba\u00b9\u0003\u0002\u0002\u0002\u00ba\u00bb\u0003\u0002\u0002\u0002",
    "\u00bb\u00bc\u0003\u0002\u0002\u0002\u00bc\u00bd\u0005h5\u0002\u00bd",
    "\u0011\u0003\u0002\u0002\u0002\u00be\u00bf\u0005\u0014\u000b\u0002\u00bf",
    "\u00c0\u0005\u0016\f\u0002\u00c0\u0013\u0003\u0002\u0002\u0002\u00c1",
    "\u00c2\u0007\u0106\u0002\u0002\u00c2\u0015\u0003\u0002\u0002\u0002\u00c3",
    "\u00c4\t\u0002\u0002\u0002\u00c4\u0017\u0003\u0002\u0002\u0002\u00c5",
    "\u00c6\u0007\u00cf\u0002\u0002\u00c6\u00c7\u0007\u0010\u0002\u0002\u00c7",
    "\u00c8\u0005\u001a\u000e\u0002\u00c8\u0019\u0003\u0002\u0002\u0002\u00c9",
    "\u00ce\u0005\u001c\u000f\u0002\u00ca\u00cb\u0007\u012c\u0002\u0002\u00cb",
    "\u00cd\u0005\u001c\u000f\u0002\u00cc\u00ca\u0003\u0002\u0002\u0002\u00cd",
    "\u00d0\u0003\u0002\u0002\u0002\u00ce\u00cc\u0003\u0002\u0002\u0002\u00ce",
    "\u00cf\u0003\u0002\u0002\u0002\u00cf\u001b\u0003\u0002\u0002\u0002\u00d0",
    "\u00ce\u0003\u0002\u0002\u0002\u00d1\u00d2\u0007\u0106\u0002\u0002\u00d2",
    "\u001d\u0003\u0002\u0002\u0002\u00d3\u00d4\u0007I\u0002\u0002\u00d4",
    "\u00d6\u0007\u00c7\u0002\u0002\u00d5\u00d7\u0005j6\u0002\u00d6\u00d5",
    "\u0003\u0002\u0002\u0002\u00d6\u00d7\u0003\u0002\u0002\u0002\u00d7\u00d8",
    "\u0003\u0002\u0002\u0002\u00d8\u00d9\u0005f4\u0002\u00d9\u00da\u0005",
    "h5\u0002\u00da\u001f\u0003\u0002\u0002\u0002\u00db\u00dd\u0007I\u0002",
    "\u0002\u00dc\u00de\u0007\u00ae\u0002\u0002\u00dd\u00dc\u0003\u0002\u0002",
    "\u0002\u00dd\u00de\u0003\u0002\u0002\u0002\u00de\u00df\u0003\u0002\u0002",
    "\u0002\u00df\u00e1\u0007L\u0002\u0002\u00e0\u00e2\u0005j6\u0002\u00e1",
    "\u00e0\u0003\u0002\u0002\u0002\u00e1\u00e2\u0003\u0002\u0002\u0002\u00e2",
    "\u00e3\u0003\u0002\u0002\u0002\u00e3\u00e4\u0005f4\u0002\u00e4\u00e5",
    "\u0007\n\u0002\u0002\u00e5\u00e6\u0005B\"\u0002\u00e6!\u0003\u0002\u0002",
    "\u0002\u00e7\u00e8\u0003\u0002\u0002\u0002\u00e8#\u0003\u0002\u0002",
    "\u0002\u00e9\u00ea\u0007g\u0002\u0002\u00ea\u00eb\u0007J\u0002\u0002",
    "\u00eb\u00ee\u0005f4\u0002\u00ec\u00ef\u0005&\u0014\u0002\u00ed\u00ef",
    "\u0005(\u0015\u0002\u00ee\u00ec\u0003\u0002\u0002\u0002\u00ee\u00ed",
    "\u0003\u0002\u0002\u0002\u00ef%\u0003\u0002\u0002\u0002\u00f0\u00f1",
    "\u0007h\u0002\u0002\u00f1\u00f2\u0007d\u0002\u0002\u00f2\u00f3\u0005",
    "f4\u0002\u00f3\'\u0003\u0002\u0002\u0002\u00f4\u00f5\u0007k\u0002\u0002",
    "\u00f5\u00f6\u0007\u012a\u0002\u0002\u00f6\u00fb\u0005n8\u0002\u00f7",
    "\u00f8\u0007\u012c\u0002\u0002\u00f8\u00fa\u0005n8\u0002\u00f9\u00f7",
    "\u0003\u0002\u0002\u0002\u00fa\u00fd\u0003\u0002\u0002\u0002\u00fb\u00f9",
    "\u0003\u0002\u0002\u0002\u00fb\u00fc\u0003\u0002\u0002\u0002\u00fc\u00fe",
    "\u0003\u0002\u0002\u0002\u00fd\u00fb\u0003\u0002\u0002\u0002\u00fe\u00ff",
    "\u0007\u012b\u0002\u0002\u00ff)\u0003\u0002\u0002\u0002\u0100\u0101",
    "\u0007g\u0002\u0002\u0101\u0102\u0007\u00c7\u0002\u0002\u0102\u0103",
    "\u0005f4\u0002\u0103\u0104\u0005(\u0015\u0002\u0104+\u0003\u0002\u0002",
    "\u0002\u0105\u0106\u0003\u0002\u0002\u0002\u0106-\u0003\u0002\u0002",
    "\u0002\u0107\u0108\u0007_\u0002\u0002\u0108\u010a\u0007J\u0002\u0002",
    "\u0109\u010b\u0005l7\u0002\u010a\u0109\u0003\u0002\u0002\u0002\u010a",
    "\u010b\u0003\u0002\u0002\u0002\u010b\u010c\u0003\u0002\u0002\u0002\u010c",
    "\u010d\u0005f4\u0002\u010d/\u0003\u0002\u0002\u0002\u010e\u010f\u0007",
    "_\u0002\u0002\u010f\u0111\u0007\u00c7\u0002\u0002\u0110\u0112\u0005",
    "l7\u0002\u0111\u0110\u0003\u0002\u0002\u0002\u0111\u0112\u0003\u0002",
    "\u0002\u0002\u0112\u0113\u0003\u0002\u0002\u0002\u0113\u0115\u0005f",
    "4\u0002\u0114\u0116\t\u0003\u0002\u0002\u0115\u0114\u0003\u0002\u0002",
    "\u0002\u0115\u0116\u0003\u0002\u0002\u0002\u01161\u0003\u0002\u0002",
    "\u0002\u0117\u0119\u0007_\u0002\u0002\u0118\u011a\u0007\u00ae\u0002",
    "\u0002\u0119\u0118\u0003\u0002\u0002\u0002\u0119\u011a\u0003\u0002\u0002",
    "\u0002\u011a\u011b\u0003\u0002\u0002\u0002\u011b\u011d\u0007L\u0002",
    "\u0002\u011c\u011e\u0005l7\u0002\u011d\u011c\u0003\u0002\u0002\u0002",
    "\u011d\u011e\u0003\u0002\u0002\u0002\u011e\u011f\u0003\u0002\u0002\u0002",
    "\u011f\u0120\u0005f4\u0002\u01203\u0003\u0002\u0002\u0002\u0121\u0125",
    "\u0007_\u0002\u0002\u0122\u0126\u0007\u00ae\u0002\u0002\u0123\u0124",
    "\u0007\u00ae\u0002\u0002\u0124\u0126\u0007\u0107\u0002\u0002\u0125\u0122",
    "\u0003\u0002\u0002\u0002\u0125\u0123\u0003\u0002\u0002\u0002\u0125\u0126",
    "\u0003\u0002\u0002\u0002\u0126\u0127\u0003\u0002\u0002\u0002\u0127\u0129",
    "\u0007\u00a5\u0002\u0002\u0128\u012a\u0005l7\u0002\u0129\u0128\u0003",
    "\u0002\u0002\u0002\u0129\u012a\u0003\u0002\u0002\u0002\u012a\u012b\u0003",
    "\u0002\u0002\u0002\u012b\u012c\u0005f4\u0002\u012c5\u0003\u0002\u0002",
    "\u0002\u012d\u012e\u0007N\u0002\u0002\u012e\u012f\t\u0004\u0002\u0002",
    "\u012f\u0135\u0005f4\u0002\u0130\u0132\u00058\u001d\u0002\u0131\u0130",
    "\u0003\u0002\u0002\u0002\u0131\u0132\u0003\u0002\u0002\u0002\u0132\u0133",
    "\u0003\u0002\u0002\u0002\u0133\u0136\u0005B\"\u0002\u0134\u0136\u0005",
    ":\u001e\u0002\u0135\u0131\u0003\u0002\u0002\u0002\u0135\u0134\u0003",
    "\u0002\u0002\u0002\u01367\u0003\u0002\u0002\u0002\u0137\u0138\u0007",
    "=\u0002\u0002\u0138\u0139\u0007\u012a\u0002\u0002\u0139\u013e\u0005",
    "n8\u0002\u013a\u013b\u0007\u012c\u0002\u0002\u013b\u013d\u0005n8\u0002",
    "\u013c\u013a\u0003\u0002\u0002\u0002\u013d\u0140\u0003\u0002\u0002\u0002",
    "\u013e\u013c\u0003\u0002\u0002\u0002\u013e\u013f\u0003\u0002\u0002\u0002",
    "\u013f\u0141\u0003\u0002\u0002\u0002\u0140\u013e\u0003\u0002\u0002\u0002",
    "\u0141\u0142\u0007\u012b\u0002\u0002\u01429\u0003\u0002\u0002\u0002",
    "\u0143\u0144\u0007H\u0002\u0002\u0144\u0149\u0005<\u001f\u0002\u0145",
    "\u0146\u0007\u012c\u0002\u0002\u0146\u0148\u0005<\u001f\u0002\u0147",
    "\u0145\u0003\u0002\u0002\u0002\u0148\u014b\u0003\u0002\u0002\u0002\u0149",
    "\u0147\u0003\u0002\u0002\u0002\u0149\u014a\u0003\u0002\u0002\u0002\u014a",
    ";\u0003\u0002\u0002\u0002\u014b\u0149\u0003\u0002\u0002\u0002\u014c",
    "\u014d\u0007\u012a\u0002\u0002\u014d\u0152\u0005> \u0002\u014e\u014f",
    "\u0007\u012c\u0002\u0002\u014f\u0151\u0005> \u0002\u0150\u014e\u0003",
    "\u0002\u0002\u0002\u0151\u0154\u0003\u0002\u0002\u0002\u0152\u0150\u0003",
    "\u0002\u0002\u0002\u0152\u0153\u0003\u0002\u0002\u0002\u0153\u0155\u0003",
    "\u0002\u0002\u0002\u0154\u0152\u0003\u0002\u0002\u0002\u0155\u0156\u0007",
    "\u012b\u0002\u0002\u0156=\u0003\u0002\u0002\u0002\u0157\u015c\u0005",
    "~@\u0002\u0158\u015c\u0005\u0082B\u0002\u0159\u015c\u0007\u0142\u0002",
    "\u0002\u015a\u015c\u0007\u011e\u0002\u0002\u015b\u0157\u0003\u0002\u0002",
    "\u0002\u015b\u0158\u0003\u0002\u0002\u0002\u015b\u0159\u0003\u0002\u0002",
    "\u0002\u015b\u015a\u0003\u0002\u0002\u0002\u015c?\u0003\u0002\u0002",
    "\u0002\u015d\u015e\u0003\u0002\u0002\u0002\u015eA\u0003\u0002\u0002",
    "\u0002\u015f\u0161\u0007\u0007\u0002\u0002\u0160\u0162\u0005\u0084C",
    "\u0002\u0161\u0160\u0003\u0002\u0002\u0002\u0161\u0162\u0003\u0002\u0002",
    "\u0002\u0162\u016c\u0003\u0002\u0002\u0002\u0163\u016d\u0007\u0136\u0002",
    "\u0002\u0164\u0169\u0005D#\u0002\u0165\u0166\u0007\u012c\u0002\u0002",
    "\u0166\u0168\u0005D#\u0002\u0167\u0165\u0003\u0002\u0002\u0002\u0168",
    "\u016b\u0003\u0002\u0002\u0002\u0169\u0167\u0003\u0002\u0002\u0002\u0169",
    "\u016a\u0003\u0002\u0002\u0002\u016a\u016d\u0003\u0002\u0002\u0002\u016b",
    "\u0169\u0003\u0002\u0002\u0002\u016c\u0163\u0003\u0002\u0002\u0002\u016c",
    "\u0164\u0003\u0002\u0002\u0002\u016d\u016e\u0003\u0002\u0002\u0002\u016e",
    "\u016f\u0007\b\u0002\u0002\u016f\u0170\u0005F$\u0002\u0170C\u0003\u0002",
    "\u0002\u0002\u0171\u0176\u0005L\'\u0002\u0172\u0174\u0007\n\u0002\u0002",
    "\u0173\u0172\u0003\u0002\u0002\u0002\u0173\u0174\u0003\u0002\u0002\u0002",
    "\u0174\u0175\u0003\u0002\u0002\u0002\u0175\u0177\u0005f4\u0002\u0176",
    "\u0173\u0003\u0002\u0002\u0002\u0176\u0177\u0003\u0002\u0002\u0002\u0177",
    "\u017d\u0003\u0002\u0002\u0002\u0178\u0179\u0005f4\u0002\u0179\u017a",
    "\u0007\u0127\u0002\u0002\u017a\u017b\u0007\u0136\u0002\u0002\u017b\u017d",
    "\u0003\u0002\u0002\u0002\u017c\u0171\u0003\u0002\u0002\u0002\u017c\u0178",
    "\u0003\u0002\u0002\u0002\u017dE\u0003\u0002\u0002\u0002\u017e\u0183",
    "\u0005H%\u0002\u017f\u0180\u0007\u012c\u0002\u0002\u0180\u0182\u0005",
    "H%\u0002\u0181\u017f\u0003\u0002\u0002\u0002\u0182\u0185\u0003\u0002",
    "\u0002\u0002\u0183\u0181\u0003\u0002\u0002\u0002\u0183\u0184\u0003\u0002",
    "\u0002\u0002\u0184G\u0003\u0002\u0002\u0002\u0185\u0183\u0003\u0002",
    "\u0002\u0002\u0186\u0187\u0005J&\u0002\u0187\u0188\u0005V,\u0002\u0188",
    "I\u0003\u0002\u0002\u0002\u0189\u018b\u0007J\u0002\u0002\u018a\u0189",
    "\u0003\u0002\u0002\u0002\u018a\u018b\u0003\u0002\u0002\u0002\u018b\u018c",
    "\u0003\u0002\u0002\u0002\u018c\u018d\u0005f4\u0002\u018dK\u0003\u0002",
    "\u0002\u0002\u018e\u018f\u0005N(\u0002\u018fM\u0003\u0002\u0002\u0002",
    "\u0190\u0191\b(\u0001\u0002\u0191\u0192\u0007\u001c\u0002\u0002\u0192",
    "\u0198\u0005N(\u0006\u0193\u0195\u0005R*\u0002\u0194\u0196\u0005P)\u0002",
    "\u0195\u0194\u0003\u0002\u0002\u0002\u0195\u0196\u0003\u0002\u0002\u0002",
    "\u0196\u0198\u0003\u0002\u0002\u0002\u0197\u0190\u0003\u0002\u0002\u0002",
    "\u0197\u0193\u0003\u0002\u0002\u0002\u0198\u01a1\u0003\u0002\u0002\u0002",
    "\u0199\u019a\f\u0004\u0002\u0002\u019a\u019b\u0007\u001a\u0002\u0002",
    "\u019b\u01a0\u0005N(\u0005\u019c\u019d\f\u0003\u0002\u0002\u019d\u019e",
    "\u0007\u0019\u0002\u0002\u019e\u01a0\u0005N(\u0004\u019f\u0199\u0003",
    "\u0002\u0002\u0002\u019f\u019c\u0003\u0002\u0002\u0002\u01a0\u01a3\u0003",
    "\u0002\u0002\u0002\u01a1\u019f\u0003\u0002\u0002\u0002\u01a1\u01a2\u0003",
    "\u0002\u0002\u0002\u01a2O\u0003\u0002\u0002\u0002\u01a3\u01a1\u0003",
    "\u0002\u0002\u0002\u01a4\u01a6\u0007\u001c\u0002\u0002\u01a5\u01a4\u0003",
    "\u0002\u0002\u0002\u01a5\u01a6\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003",
    "\u0002\u0002\u0002\u01a7\u01a8\u0007\u001f\u0002\u0002\u01a8\u01a9\u0005",
    "R*\u0002\u01a9\u01aa\u0007\u001a\u0002\u0002\u01aa\u01ab\u0005R*\u0002",
    "\u01ab\u01eb\u0003\u0002\u0002\u0002\u01ac\u01ae\u0007\u001c\u0002\u0002",
    "\u01ad\u01ac\u0003\u0002\u0002\u0002\u01ad\u01ae\u0003\u0002\u0002\u0002",
    "\u01ae\u01af\u0003\u0002\u0002\u0002\u01af\u01b0\u0007\u001b\u0002\u0002",
    "\u01b0\u01b1\u0007\u012a\u0002\u0002\u01b1\u01b6\u0005L\'\u0002\u01b2",
    "\u01b3\u0007\u012c\u0002\u0002\u01b3\u01b5\u0005L\'\u0002\u01b4\u01b2",
    "\u0003\u0002\u0002\u0002\u01b5\u01b8\u0003\u0002\u0002\u0002\u01b6\u01b4",
    "\u0003\u0002\u0002\u0002\u01b6\u01b7\u0003\u0002\u0002\u0002\u01b7\u01b9",
    "\u0003\u0002\u0002\u0002\u01b8\u01b6\u0003\u0002\u0002\u0002\u01b9\u01ba",
    "\u0007\u012b\u0002\u0002\u01ba\u01eb\u0003\u0002\u0002\u0002\u01bb\u01bd",
    "\u0007\u001c\u0002\u0002\u01bc\u01bb\u0003\u0002\u0002\u0002\u01bc\u01bd",
    "\u0003\u0002\u0002\u0002\u01bd\u01be\u0003\u0002\u0002\u0002\u01be\u01bf",
    "\u0007!\u0002\u0002\u01bf\u01eb\u0005R*\u0002\u01c0\u01c2\u0007\u001c",
    "\u0002\u0002\u01c1\u01c0\u0003\u0002\u0002\u0002\u01c1\u01c2\u0003\u0002",
    "\u0002\u0002\u01c2\u01c3\u0003\u0002\u0002\u0002\u01c3\u01c4\u0007 ",
    "\u0002\u0002\u01c4\u01d2\t\u0005\u0002\u0002\u01c5\u01c6\u0007\u012a",
    "\u0002\u0002\u01c6\u01d3\u0007\u012b\u0002\u0002\u01c7\u01c8\u0007\u012a",
    "\u0002\u0002\u01c8\u01cd\u0005L\'\u0002\u01c9\u01ca\u0007\u012c\u0002",
    "\u0002\u01ca\u01cc\u0005L\'\u0002\u01cb\u01c9\u0003\u0002\u0002\u0002",
    "\u01cc\u01cf\u0003\u0002\u0002\u0002\u01cd\u01cb\u0003\u0002\u0002\u0002",
    "\u01cd\u01ce\u0003\u0002\u0002\u0002\u01ce\u01d0\u0003\u0002\u0002\u0002",
    "\u01cf\u01cd\u0003\u0002\u0002\u0002\u01d0\u01d1\u0007\u012b\u0002\u0002",
    "\u01d1\u01d3\u0003\u0002\u0002\u0002\u01d2\u01c5\u0003\u0002\u0002\u0002",
    "\u01d2\u01c7\u0003\u0002\u0002\u0002\u01d3\u01eb\u0003\u0002\u0002\u0002",
    "\u01d4\u01d6\u0007\u001c\u0002\u0002\u01d5\u01d4\u0003\u0002\u0002\u0002",
    "\u01d5\u01d6\u0003\u0002\u0002\u0002\u01d6\u01d7\u0003\u0002\u0002\u0002",
    "\u01d7\u01d8\u0007 \u0002\u0002\u01d8\u01eb\u0005R*\u0002\u01d9\u01db",
    "\u0007\"\u0002\u0002\u01da\u01dc\u0007\u001c\u0002\u0002\u01db\u01da",
    "\u0003\u0002\u0002\u0002\u01db\u01dc\u0003\u0002\u0002\u0002\u01dc\u01dd",
    "\u0003\u0002\u0002\u0002\u01dd\u01eb\u0007\u011e\u0002\u0002\u01de\u01e0",
    "\u0007\"\u0002\u0002\u01df\u01e1\u0007\u001c\u0002\u0002\u01e0\u01df",
    "\u0003\u0002\u0002\u0002\u01e0\u01e1\u0003\u0002\u0002\u0002\u01e1\u01e2",
    "\u0003\u0002\u0002\u0002\u01e2\u01eb\t\u0006\u0002\u0002\u01e3\u01e5",
    "\u0007\"\u0002\u0002\u01e4\u01e6\u0007\u001c\u0002\u0002\u01e5\u01e4",
    "\u0003\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002\u01e6\u01e7",
    "\u0003\u0002\u0002\u0002\u01e7\u01e8\u0007\r\u0002\u0002\u01e8\u01e9",
    "\u0007\b\u0002\u0002\u01e9\u01eb\u0005R*\u0002\u01ea\u01a5\u0003\u0002",
    "\u0002\u0002\u01ea\u01ad\u0003\u0002\u0002\u0002\u01ea\u01bc\u0003\u0002",
    "\u0002\u0002\u01ea\u01c1\u0003\u0002\u0002\u0002\u01ea\u01d5\u0003\u0002",
    "\u0002\u0002\u01ea\u01d9\u0003\u0002\u0002\u0002\u01ea\u01de\u0003\u0002",
    "\u0002\u0002\u01ea\u01e3\u0003\u0002\u0002\u0002\u01ebQ\u0003\u0002",
    "\u0002\u0002\u01ec\u01ed\b*\u0001\u0002\u01ed\u01f1\u0005T+\u0002\u01ee",
    "\u01ef\t\u0007\u0002\u0002\u01ef\u01f1\u0005R*\t\u01f0\u01ec\u0003\u0002",
    "\u0002\u0002\u01f0\u01ee\u0003\u0002\u0002\u0002\u01f1\u0207\u0003\u0002",
    "\u0002\u0002\u01f2\u01f3\f\b\u0002\u0002\u01f3\u01f4\t\b\u0002\u0002",
    "\u01f4\u0206\u0005R*\t\u01f5\u01f6\f\u0007\u0002\u0002\u01f6\u01f7\t",
    "\t\u0002\u0002\u01f7\u0206\u0005R*\b\u01f8\u01f9\f\u0006\u0002\u0002",
    "\u01f9\u01fa\u0007\u0089\u0002\u0002\u01fa\u0206\u0005R*\u0007\u01fb",
    "\u01fc\f\u0005\u0002\u0002\u01fc\u01fd\u0007\u008c\u0002\u0002\u01fd",
    "\u0206\u0005R*\u0006\u01fe\u01ff\f\u0004\u0002\u0002\u01ff\u0200\u0007",
    "\u008a\u0002\u0002\u0200\u0206\u0005R*\u0005\u0201\u0202\f\u0003\u0002",
    "\u0002\u0202\u0203\u0005r:\u0002\u0203\u0204\u0005R*\u0004\u0204\u0206",
    "\u0003\u0002\u0002\u0002\u0205\u01f2\u0003\u0002\u0002\u0002\u0205\u01f5",
    "\u0003\u0002\u0002\u0002\u0205\u01f8\u0003\u0002\u0002\u0002\u0205\u01fb",
    "\u0003\u0002\u0002\u0002\u0205\u01fe\u0003\u0002\u0002\u0002\u0205\u0201",
    "\u0003\u0002\u0002\u0002\u0206\u0209\u0003\u0002\u0002\u0002\u0207\u0205",
    "\u0003\u0002\u0002\u0002\u0207\u0208\u0003\u0002\u0002\u0002\u0208S",
    "\u0003\u0002\u0002\u0002\u0209\u0207\u0003\u0002\u0002\u0002\u020a\u020b",
    "\b+\u0001\u0002\u020b\u020d\u0007*\u0002\u0002\u020c\u020e\u0005b2\u0002",
    "\u020d\u020c\u0003\u0002\u0002\u0002\u020e\u020f\u0003\u0002\u0002\u0002",
    "\u020f\u020d\u0003\u0002\u0002\u0002\u020f\u0210\u0003\u0002\u0002\u0002",
    "\u0210\u0213\u0003\u0002\u0002\u0002\u0211\u0212\u0007-\u0002\u0002",
    "\u0212\u0214\u0005L\'\u0002\u0213\u0211\u0003\u0002\u0002\u0002\u0213",
    "\u0214\u0003\u0002\u0002\u0002\u0214\u0215\u0003\u0002\u0002\u0002\u0215",
    "\u0216\u0007.\u0002\u0002\u0216\u0244\u0003\u0002\u0002\u0002\u0217",
    "\u0218\u0007*\u0002\u0002\u0218\u021a\u0005L\'\u0002\u0219\u021b\u0005",
    "b2\u0002\u021a\u0219\u0003\u0002\u0002\u0002\u021b\u021c\u0003\u0002",
    "\u0002\u0002\u021c\u021a\u0003\u0002\u0002\u0002\u021c\u021d\u0003\u0002",
    "\u0002\u0002\u021d\u0220\u0003\u0002\u0002\u0002\u021e\u021f\u0007-",
    "\u0002\u0002\u021f\u0221\u0005L\'\u0002\u0220\u021e\u0003\u0002\u0002",
    "\u0002\u0220\u0221\u0003\u0002\u0002\u0002\u0221\u0222\u0003\u0002\u0002",
    "\u0002\u0222\u0223\u0007.\u0002\u0002\u0223\u0244\u0003\u0002\u0002",
    "\u0002\u0224\u0225\u0007D\u0002\u0002\u0225\u0226\u0007\u012a\u0002",
    "\u0002\u0226\u0229\u0005L\'\u0002\u0227\u0228\u0007s\u0002\u0002\u0228",
    "\u022a\u0007%\u0002\u0002\u0229\u0227\u0003\u0002\u0002\u0002\u0229",
    "\u022a\u0003\u0002\u0002\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022b",
    "\u022c\u0007\u012b\u0002\u0002\u022c\u0244\u0003\u0002\u0002\u0002\u022d",
    "\u022e\u0007F\u0002\u0002\u022e\u022f\u0007\u012a\u0002\u0002\u022f",
    "\u0232\u0005L\'\u0002\u0230\u0231\u0007s\u0002\u0002\u0231\u0233\u0007",
    "%\u0002\u0002\u0232\u0230\u0003\u0002\u0002\u0002\u0232\u0233\u0003",
    "\u0002\u0002\u0002\u0233\u0234\u0003\u0002\u0002\u0002\u0234\u0235\u0007",
    "\u012b\u0002\u0002\u0235\u0244\u0003\u0002\u0002\u0002\u0236\u0237\u0007",
    "x\u0002\u0002\u0237\u0238\u0007\u012a\u0002\u0002\u0238\u0239\u0005",
    "R*\u0002\u0239\u023a\u0007\u001b\u0002\u0002\u023a\u023b\u0005R*\u0002",
    "\u023b\u023c\u0007\u012b\u0002\u0002\u023c\u0244\u0003\u0002\u0002\u0002",
    "\u023d\u0244\u0005|?\u0002\u023e\u0244\u0007\u0084\u0002\u0002\u023f",
    "\u0240\u0007\u012a\u0002\u0002\u0240\u0241\u0005L\'\u0002\u0241\u0242",
    "\u0007\u012b\u0002\u0002\u0242\u0244\u0003\u0002\u0002\u0002\u0243\u020a",
    "\u0003\u0002\u0002\u0002\u0243\u0217\u0003\u0002\u0002\u0002\u0243\u0224",
    "\u0003\u0002\u0002\u0002\u0243\u022d\u0003\u0002\u0002\u0002\u0243\u0236",
    "\u0003\u0002\u0002\u0002\u0243\u023d\u0003\u0002\u0002\u0002\u0243\u023e",
    "\u0003\u0002\u0002\u0002\u0243\u023f\u0003\u0002\u0002\u0002\u0244\u024c",
    "\u0003\u0002\u0002\u0002\u0245\u0246\f\u0004\u0002\u0002\u0246\u0247",
    "\u0007\u0128\u0002\u0002\u0247\u0248\u0005R*\u0002\u0248\u0249\u0007",
    "\u0129\u0002\u0002\u0249\u024b\u0003\u0002\u0002\u0002\u024a\u0245\u0003",
    "\u0002\u0002\u0002\u024b\u024e\u0003\u0002\u0002\u0002\u024c\u024a\u0003",
    "\u0002\u0002\u0002\u024c\u024d\u0003\u0002\u0002\u0002\u024dU\u0003",
    "\u0002\u0002\u0002\u024e\u024c\u0003\u0002\u0002\u0002\u024f\u0251\u0007",
    "\n\u0002\u0002\u0250\u024f\u0003\u0002\u0002\u0002\u0250\u0251\u0003",
    "\u0002\u0002\u0002\u0251\u0252\u0003\u0002\u0002\u0002\u0252\u0254\u0005",
    "^0\u0002\u0253\u0255\u0005X-\u0002\u0254\u0253\u0003\u0002\u0002\u0002",
    "\u0254\u0255\u0003\u0002\u0002\u0002\u0255\u0257\u0003\u0002\u0002\u0002",
    "\u0256\u0250\u0003\u0002\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002",
    "\u0257W\u0003\u0002\u0002\u0002\u0258\u0259\u0007\u012a\u0002\u0002",
    "\u0259\u025a\u0005Z.\u0002\u025a\u025b\u0007\u012b\u0002\u0002\u025b",
    "Y\u0003\u0002\u0002\u0002\u025c\u0261\u0005\\/\u0002\u025d\u025e\u0007",
    "\u012c\u0002\u0002\u025e\u0260\u0005\\/\u0002\u025f\u025d\u0003\u0002",
    "\u0002\u0002\u0260\u0263\u0003\u0002\u0002\u0002\u0261\u025f\u0003\u0002",
    "\u0002\u0002\u0261\u0262\u0003\u0002\u0002\u0002\u0262[\u0003\u0002",
    "\u0002\u0002\u0263\u0261\u0003\u0002\u0002\u0002\u0264\u0265\u0005^",
    "0\u0002\u0265]\u0003\u0002\u0002\u0002\u0266\u0269\u0007\u0141\u0002",
    "\u0002\u0267\u0269\u0005`1\u0002\u0268\u0266\u0003\u0002\u0002\u0002",
    "\u0268\u0267\u0003\u0002\u0002\u0002\u0269_\u0003\u0002\u0002\u0002",
    "\u026a\u026b\u0007\u013d\u0002\u0002\u026ba\u0003\u0002\u0002\u0002",
    "\u026c\u026d\u0007+\u0002\u0002\u026d\u026e\u0005L\'\u0002\u026e\u026f",
    "\u0007,\u0002\u0002\u026f\u0270\u0005L\'\u0002\u0270c\u0003\u0002\u0002",
    "\u0002\u0271\u0276\u0005f4\u0002\u0272\u0273\u0007\u012c\u0002\u0002",
    "\u0273\u0275\u0005f4\u0002\u0274\u0272\u0003\u0002\u0002\u0002\u0275",
    "\u0278\u0003\u0002\u0002\u0002\u0276\u0274\u0003\u0002\u0002\u0002\u0276",
    "\u0277\u0003\u0002\u0002\u0002\u0277e\u0003\u0002\u0002\u0002\u0278",
    "\u0276\u0003\u0002\u0002\u0002\u0279\u027d\u0007\u0106\u0002\u0002\u027a",
    "\u027c\u0007\u0105\u0002\u0002\u027b\u027a\u0003\u0002\u0002\u0002\u027c",
    "\u027f\u0003\u0002\u0002\u0002\u027d\u027e\u0003\u0002\u0002\u0002\u027d",
    "\u027b\u0003\u0002\u0002\u0002\u027eg\u0003\u0002\u0002\u0002\u027f",
    "\u027d\u0003\u0002\u0002\u0002\u0280\u0281\u0007G\u0002\u0002\u0281",
    "\u0282\u0007\u012a\u0002\u0002\u0282\u0287\u0005n8\u0002\u0283\u0284",
    "\u0007\u012c\u0002\u0002\u0284\u0286\u0005n8\u0002\u0285\u0283\u0003",
    "\u0002\u0002\u0002\u0286\u0289\u0003\u0002\u0002\u0002\u0287\u0285\u0003",
    "\u0002\u0002\u0002\u0287\u0288\u0003\u0002\u0002\u0002\u0288\u028a\u0003",
    "\u0002\u0002\u0002\u0289\u0287\u0003\u0002\u0002\u0002\u028a\u028b\u0007",
    "\u012b\u0002\u0002\u028bi\u0003\u0002\u0002\u0002\u028c\u028d\u0007",
    "w\u0002\u0002\u028d\u028e\u0007\u001c\u0002\u0002\u028e\u028f\u0007",
    "\u001e\u0002\u0002\u028fk\u0003\u0002\u0002\u0002\u0290\u0291\u0007",
    "w\u0002\u0002\u0291\u0292\u0007\u001e\u0002\u0002\u0292m\u0003\u0002",
    "\u0002\u0002\u0293\u0294\u0007\u0104\u0002\u0002\u0294\u0295\u0007\u011f",
    "\u0002\u0002\u0295\u0296\u0007\u0104\u0002\u0002\u0296o\u0003\u0002",
    "\u0002\u0002\u0297\u029e\u0007\u001a\u0002\u0002\u0298\u0299\u0007\u0125",
    "\u0002\u0002\u0299\u029e\u0007\u0125\u0002\u0002\u029a\u029e\u0007\u0019",
    "\u0002\u0002\u029b\u029c\u0007\u0124\u0002\u0002\u029c\u029e\u0007\u0124",
    "\u0002\u0002\u029d\u0297\u0003\u0002\u0002\u0002\u029d\u0298\u0003\u0002",
    "\u0002\u0002\u029d\u029a\u0003\u0002\u0002\u0002\u029d\u029b\u0003\u0002",
    "\u0002\u0002\u029eq\u0003\u0002\u0002\u0002\u029f\u02ae\u0007\u011f",
    "\u0002\u0002\u02a0\u02ae\u0007\u0120\u0002\u0002\u02a1\u02ae\u0007\u0121",
    "\u0002\u0002\u02a2\u02a3\u0007\u0121\u0002\u0002\u02a3\u02ae\u0007\u011f",
    "\u0002\u0002\u02a4\u02a5\u0007\u0120\u0002\u0002\u02a5\u02ae\u0007\u011f",
    "\u0002\u0002\u02a6\u02a7\u0007\u0121\u0002\u0002\u02a7\u02ae\u0007\u0120",
    "\u0002\u0002\u02a8\u02a9\u0007\u0122\u0002\u0002\u02a9\u02ae\u0007\u011f",
    "\u0002\u0002\u02aa\u02ab\u0007\u0121\u0002\u0002\u02ab\u02ac\u0007\u011f",
    "\u0002\u0002\u02ac\u02ae\u0007\u0120\u0002\u0002\u02ad\u029f\u0003\u0002",
    "\u0002\u0002\u02ad\u02a0\u0003\u0002\u0002\u0002\u02ad\u02a1\u0003\u0002",
    "\u0002\u0002\u02ad\u02a2\u0003\u0002\u0002\u0002\u02ad\u02a4\u0003\u0002",
    "\u0002\u0002\u02ad\u02a6\u0003\u0002\u0002\u0002\u02ad\u02a8\u0003\u0002",
    "\u0002\u0002\u02ad\u02aa\u0003\u0002\u0002\u0002\u02aes\u0003\u0002",
    "\u0002\u0002\u02af\u02b0\u0007\u0121\u0002\u0002\u02b0\u02b7\u0007\u0121",
    "\u0002\u0002\u02b1\u02b2\u0007\u0120\u0002\u0002\u02b2\u02b7\u0007\u0120",
    "\u0002\u0002\u02b3\u02b7\u0007\u0125\u0002\u0002\u02b4\u02b7\u0007\u0126",
    "\u0002\u0002\u02b5\u02b7\u0007\u0124\u0002\u0002\u02b6\u02af\u0003\u0002",
    "\u0002\u0002\u02b6\u02b1\u0003\u0002\u0002\u0002\u02b6\u02b3\u0003\u0002",
    "\u0002\u0002\u02b6\u02b4\u0003\u0002\u0002\u0002\u02b6\u02b5\u0003\u0002",
    "\u0002\u0002\u02b7u\u0003\u0002\u0002\u0002\u02b8\u02b9\t\n\u0002\u0002",
    "\u02b9w\u0003\u0002\u0002\u0002\u02ba\u02bb\t\u000b\u0002\u0002\u02bb",
    "y\u0003\u0002\u0002\u0002\u02bc\u02bd\u0005f4\u0002\u02bd{\u0003\u0002",
    "\u0002\u0002\u02be\u02ca\u0005~@\u0002\u02bf\u02ca\u0005\u0080A\u0002",
    "\u02c0\u02c1\u0007\u0138\u0002\u0002\u02c1\u02ca\u0005\u0080A\u0002",
    "\u02c2\u02ca\u0005\u0082B\u0002\u02c3\u02ca\u0007\u013f\u0002\u0002",
    "\u02c4\u02ca\u0007\u0140\u0002\u0002\u02c5\u02c7\u0007\u001c\u0002\u0002",
    "\u02c6\u02c5\u0003\u0002\u0002\u0002\u02c6\u02c7\u0003\u0002\u0002\u0002",
    "\u02c7\u02c8\u0003\u0002\u0002\u0002\u02c8\u02ca\u0007\u011e\u0002\u0002",
    "\u02c9\u02be\u0003\u0002\u0002\u0002\u02c9\u02bf\u0003\u0002\u0002\u0002",
    "\u02c9\u02c0\u0003\u0002\u0002\u0002\u02c9\u02c2\u0003\u0002\u0002\u0002",
    "\u02c9\u02c3\u0003\u0002\u0002\u0002\u02c9\u02c4\u0003\u0002\u0002\u0002",
    "\u02c9\u02c6\u0003\u0002\u0002\u0002\u02ca}\u0003\u0002\u0002\u0002",
    "\u02cb\u02cc\u0007\u013d\u0002\u0002\u02cc\u007f\u0003\u0002\u0002\u0002",
    "\u02cd\u02ce\t\f\u0002\u0002\u02ce\u0081\u0003\u0002\u0002\u0002\u02cf",
    "\u02d0\t\u0006\u0002\u0002\u02d0\u0083\u0003\u0002\u0002\u0002\u02d1",
    "\u02d2\t\r\u0002\u0002\u02d2\u0085\u0003\u0002\u0002\u0002L\u0090\u0092",
    "\u0097\u00a6\u00aa\u00b5\u00ba\u00ce\u00d6\u00dd\u00e1\u00ee\u00fb\u010a",
    "\u0111\u0115\u0119\u011d\u0125\u0129\u0131\u0135\u013e\u0149\u0152\u015b",
    "\u0161\u0169\u016c\u0173\u0176\u017c\u0183\u018a\u0195\u0197\u019f\u01a1",
    "\u01a5\u01ad\u01b6\u01bc\u01c1\u01cd\u01d2\u01d5\u01db\u01e0\u01e5\u01ea",
    "\u01f0\u0205\u0207\u020f\u0213\u021c\u0220\u0229\u0232\u0243\u024c\u0250",
    "\u0254\u0256\u0261\u0268\u0276\u027d\u0287\u029d\u02ad\u02b6\u02c6\u02c9"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, "'SELECT'", "'FROM'", 
                     "'ADD'", "'AS'", "'ALL'", "'ANY'", "'DISTINCT'", "'WHERE'", 
                     "'GROUP'", "'BY'", "'GROUPING'", "'SETS'", "'CUBE'", 
                     "'ROLLUP'", "'ORDER'", "'HAVING'", "'LIMIT'", "'AT'", 
                     "'OR'", "'AND'", "'IN'", "'NOT'", "'NO'", "'EXISTS'", 
                     "'BETWEEN'", "'LIKE'", "'RLIKE'", "'IS'", "'TRUE'", 
                     "'FALSE'", "'NULLS'", "'ASC'", "'DESC'", "'FOR'", "'INTERVAL'", 
                     "'CASE'", "'WHEN'", "'THEN'", "'ELSE'", "'END'", "'JOIN'", 
                     "'CROSS'", "'OUTER'", "'INNER'", "'LEFT'", "'SEMI'", 
                     "'RIGHT'", "'FULL'", "'NATURAL'", "'ON'", "'PIVOT'", 
                     "'LATERAL'", "'WINDOW'", "'OVER'", "'PARTITION'", "'RANGE'", 
                     "'ROWS'", "'UNBOUNDED'", "'PRECEDING'", "'FOLLOWING'", 
                     "'CURRENT'", "'FIRST'", "'AFTER'", "'LAST'", "'WITH'", 
                     "'VALUES'", "'CREATE'", "'TABLE'", "'DIRECTORY'", "'VIEW'", 
                     "'REPLACE'", "'INSERT'", "'DELETE'", "'INTO'", "'DESCRIBE'", 
                     "'EXPLAIN'", "'FORMAT'", "'LOGICAL'", "'CODEGEN'", 
                     "'COST'", "'CAST'", "'SHOW'", "'TABLES'", "'COLUMNS'", 
                     "'COLUMN'", "'USE'", "'PARTITIONS'", "'FUNCTIONS'", 
                     "'DROP'", "'UNION'", "'EXCEPT'", "'SETMINUS'", "'INTERSECT'", 
                     "'TO'", "'TABLESAMPLE'", "'STRATIFY'", "'ALTER'", "'RENAME'", 
                     "'STRUCT'", "'COMMENT'", "'SET'", "'RESET'", "'DATA'", 
                     "'START'", "'TRANSACTION'", "'COMMIT'", "'ROLLBACK'", 
                     "'MACRO'", "'IGNORE'", "'BOTH'", "'LEADING'", "'TRAILING'", 
                     "'IF'", "'POSITION'", "'EXTRACT'", "'EQ'", "'NSEQ'", 
                     "'NEQ'", "'NEQJ'", "'LT'", "'LTE'", "'GT'", "'GTE'", 
                     "'PLUS'", "'MINUS'", "'ASTERISK'", "'SLASH'", "'PERCENT'", 
                     "'DIV'", "'TILDE'", "'AMPERSAND'", "'PIPE'", "'CONCAT_PIPE'", 
                     "'HAT'", "'PERCENTLIT'", "'BUCKET'", "'OUT'", "'OF'", 
                     "'SORT'", "'CLUSTER'", "'DISTRIBUTE'", "'OVERWRITE'", 
                     "'TRANSFORM'", "'REDUCE'", "'USING'", "'SERDE'", "'SERDEPROPERTIES'", 
                     "'RECORDREADER'", "'RECORDWRITER'", "'DELIMITED'", 
                     "'FIELDS'", "'TERMINATED'", "'COLLECTION'", "'ITEMS'", 
                     "'KEYS'", "'ESCAPED'", "'LINES'", "'SEPARATED'", "'FUNCTION'", 
                     "'EXTENDED'", "'REFRESH'", "'CLEAR'", "'CACHE'", "'UNCACHE'", 
                     "'LAZY'", "'FORMATTED'", "'GLOBAL'", "'TEMPORARY'", 
                     "'OPTIONS'", "'UNSET'", "'TBLPROPERTIES'", "'DBPROPERTIES'", 
                     "'BUCKETS'", "'SKEWED'", "'STORED'", "'DIRECTORIES'", 
                     "'LOCATION'", "'EXCHANGE'", "'ARCHIVE'", "'UNARCHIVE'", 
                     "'FILEFORMAT'", "'TOUCH'", "'COMPACT'", "'CONCATENATE'", 
                     "'CHANGE'", "'CASCADE'", "'RESTRICT'", "'CLUSTERED'", 
                     "'SORTED'", "'PURGE'", "'INPUTFORMAT'", "'OUTPUTFORMAT'", 
                     "'DATABASE'", "'DATABASES'", "'DFS'", "'TRUNCATE'", 
                     "'ANALYZE'", "'COMPUTE'", "'LIST'", "'STATISTICS'", 
                     "'PARTITIONED'", "'EXTERNAL'", "'DEFINED'", "'REVOKE'", 
                     "'GRANT'", "'LOCK'", "'UNLOCK'", "'MSCK'", "'REPAIR'", 
                     "'RECOVER'", "'EXPORT'", "'IMPORT'", "'LOAD'", "'ROLE'", 
                     "'ROLES'", "'COMPACTIONS'", "'PRINCIPALS'", "'TRANSACTIONS'", 
                     "'INDEX'", "'INDEXES'", "'LOCKS'", "'OPTION'", "'ANTI'", 
                     "'LOCAL'", "'INPATH'", "'WATERMARK'", "'UNNEST'", "'MATCH_RECOGNIZE'", 
                     "'MEASURES'", "'ONE'", "'PER'", "'MATCH'", "'SKIP1'", 
                     "'NEXT'", "'PAST'", "'PATTERN'", "'WITHIN'", "'DEFINE'", 
                     "'BIGINT_LITERAL'", "'SMALLINT_LITERAL'", "'TINYINT_LITERAL'", 
                     "'INTEGER_VALUE'", "'DECIMAL_VALUE'", "'DOUBLE_LITERAL'", 
                     "'BIGDECIMAL_LITERAL'", "'IDENTIFIER'", "'BACKQUOTED_IDENTIFIER'", 
                     "'SIMPLE_COMMENT'", "'BRACKETED_EMPTY_COMMENT'", "'BRACKETED_COMMENT'", 
                     "'WS'", "'UNRECOGNIZED'", null, null, null, null, "'SYSTEM'", 
                     "'STRING'", "'ARRAY'", "'MAP'", "'CHAR'", "'VARCHAR'", 
                     "'BINARY'", "'VARBINARY'", "'BYTES'", "'DECIMAL'", 
                     "'TINYINT'", "'SMALLINT'", "'INT'", "'BIGINT'", "'FLOAT'", 
                     "'DOUBLE'", "'DATE'", "'TIME'", "'TIMESTAMP'", "'MULTISET'", 
                     "'BOOLEAN'", "'RAW'", "'ROW'", "'NULL'", "'='", "'>'", 
                     "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", "'['", 
                     "']'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", 
                     "'2'", "'''", "'\"'", "'`'", "':'", "'*'", "'_'", "'-'", 
                     "'+'", "'%'", "'--'", "'/'" ];

var symbolicNames = [ null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", 
                      "LINE_COMMENT", "SELECT", "FROM", "ADD", "AS", "ALL", 
                      "ANY", "DISTINCT", "WHERE", "GROUP", "BY", "GROUPING", 
                      "SETS", "CUBE", "ROLLUP", "ORDER", "HAVING", "LIMIT", 
                      "AT", "OR", "AND", "IN", "NOT", "NO", "EXISTS", "BETWEEN", 
                      "LIKE", "RLIKE", "IS", "TRUE", "FALSE", "NULLS", "ASC", 
                      "DESC", "FOR", "INTERVAL", "CASE", "WHEN", "THEN", 
                      "ELSE", "END", "JOIN", "CROSS", "OUTER", "INNER", 
                      "LEFT", "SEMI", "RIGHT", "FULL", "NATURAL", "ON", 
                      "PIVOT", "LATERAL", "WINDOW", "OVER", "PARTITION", 
                      "RANGE", "ROWS", "UNBOUNDED", "PRECEDING", "FOLLOWING", 
                      "CURRENT", "FIRST", "AFTER", "LAST", "WITH", "VALUES", 
                      "CREATE", "TABLE", "DIRECTORY", "VIEW", "REPLACE", 
                      "INSERT", "DELETE", "INTO", "DESCRIBE", "EXPLAIN", 
                      "FORMAT", "LOGICAL", "CODEGEN", "COST", "CAST", "SHOW", 
                      "TABLES", "COLUMNS", "COLUMN", "USE", "PARTITIONS", 
                      "FUNCTIONS", "DROP", "UNION", "EXCEPT", "SETMINUS", 
                      "INTERSECT", "TO", "TABLESAMPLE", "STRATIFY", "ALTER", 
                      "RENAME", "STRUCT", "COMMENT", "SET", "RESET", "DATA", 
                      "START", "TRANSACTION", "COMMIT", "ROLLBACK", "MACRO", 
                      "IGNORE", "BOTH", "LEADING", "TRAILING", "IF", "POSITION", 
                      "EXTRACT", "EQ", "NSEQ", "NEQ", "NEQJ", "LT", "LTE", 
                      "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "DIV", "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", 
                      "HAT", "PERCENTLIT", "BUCKET", "OUT", "OF", "SORT", 
                      "CLUSTER", "DISTRIBUTE", "OVERWRITE", "TRANSFORM", 
                      "REDUCE", "USING", "SERDE", "SERDEPROPERTIES", "RECORDREADER", 
                      "RECORDWRITER", "DELIMITED", "FIELDS", "TERMINATED", 
                      "COLLECTION", "ITEMS", "KEYS", "ESCAPED", "LINES", 
                      "SEPARATED", "FUNCTION", "EXTENDED", "REFRESH", "CLEAR", 
                      "CACHE", "UNCACHE", "LAZY", "FORMATTED", "GLOBAL", 
                      "TEMPORARY", "OPTIONS", "UNSET", "TBLPROPERTIES", 
                      "DBPROPERTIES", "BUCKETS", "SKEWED", "STORED", "DIRECTORIES", 
                      "LOCATION", "EXCHANGE", "ARCHIVE", "UNARCHIVE", "FILEFORMAT", 
                      "TOUCH", "COMPACT", "CONCATENATE", "CHANGE", "CASCADE", 
                      "RESTRICT", "CLUSTERED", "SORTED", "PURGE", "INPUTFORMAT", 
                      "OUTPUTFORMAT", "DATABASE", "DATABASES", "DFS", "TRUNCATE", 
                      "ANALYZE", "COMPUTE", "LIST", "STATISTICS", "PARTITIONED", 
                      "EXTERNAL", "DEFINED", "REVOKE", "GRANT", "LOCK", 
                      "UNLOCK", "MSCK", "REPAIR", "RECOVER", "EXPORT", "IMPORT", 
                      "LOAD", "ROLE", "ROLES", "COMPACTIONS", "PRINCIPALS", 
                      "TRANSACTIONS", "INDEX", "INDEXES", "LOCKS", "OPTION", 
                      "ANTI", "LOCAL", "INPATH", "WATERMARK", "UNNEST", 
                      "MATCH_RECOGNIZE", "MEASURES", "ONE", "PER", "MATCH", 
                      "SKIP1", "NEXT", "PAST", "PATTERN", "WITHIN", "DEFINE", 
                      "BIGINT_LITERAL", "SMALLINT_LITERAL", "TINYINT_LITERAL", 
                      "INTEGER_VALUE", "DECIMAL_VALUE", "DOUBLE_LITERAL", 
                      "BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
                      "SIMPLE_COMMENT", "BRACKETED_EMPTY_COMMENT", "BRACKETED_COMMENT", 
                      "WS", "UNRECOGNIZED", "REVERSE_QUOTE_ID", "DOUBLE_QUOTE_ID", 
                      "DOT_ID", "ID", "SYSTEM", "STRING", "ARRAY", "MAP", 
                      "CHAR", "VARCHAR", "BINARY", "VARBINARY", "BYTES", 
                      "DECIMAL", "TINYINT", "SMALLINT", "INT", "BIGINT", 
                      "FLOAT", "DOUBLE", "DATE", "TIME", "TIMESTAMP", "MULTISET", 
                      "BOOLEAN", "RAW", "ROW", "NULL", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
                      "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", 
                      "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "DOT", "LS_BRACKET", 
                      "RS_BRACKET", "LR_BRACKET", "RR_BRACKET", "COMMA", 
                      "SEMICOLON", "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", 
                      "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
                      "REVERSE_QUOTE_SYMB", "COLON_SYMB", "ASTERISK_SIGN", 
                      "UNDERLINE_SIGN", "HYPNEN_SIGN", "ADD_SIGN", "PENCENT_SIGN", 
                      "DOUBLE_HYPNEN_SIGN", "SLASH_SIGN", "STRING_LITERAL", 
                      "DECIMAL_LITERAL", "REAL_LITERAL", "BIT_STRING", "IDENTIFIER_BASE", 
                      "DEC_DIGIT" ];

var ruleNames =  [ "program", "statement", "sqlStatements", "sqlStatement", 
                   "emptyStatement", "ddlStatement", "dmlStatement", "createTable", 
                   "columnOptionDefinition", "columnName", "columnType", 
                   "partitionDefinition", "partitionColumnDefinition", "partitionColumnName", 
                   "createDatabase", "createView", "createFunction", "alterTable", 
                   "renameDefinition", "setKeyValueDefinition", "alterDatabase", 
                   "alterFunction", "dropTable", "dropDatabase", "dropView", 
                   "dropFunction", "insertStatement", "insertPartitionDefinition", 
                   "valuesDefinition", "valuesRowDefinition", "allValueDifinition", 
                   "queryStatement", "selectStatement", "projectItemDefinition", 
                   "tableExpression", "tableReference", "tablePrimary", 
                   "expression", "booleanExpression", "predicate", "valueExpression", 
                   "primaryExpression", "tableAlias", "identifierList", 
                   "identifierSeq", "identifier", "strictIdentifier", "quotedIdentifier", 
                   "whenClause", "uidList", "uid", "withOption", "ifNotExists", 
                   "ifExists", "keyValueDefinition", "logicalOperator", 
                   "comparisonOperator", "bitOperator", "mathOperator", 
                   "unaryOperator", "fullColumnName", "constant", "stringLiteral", 
                   "decimalLiteral", "booleanLiteral", "setQuantifier" ];

function FlinkSqlParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

FlinkSqlParser.prototype = Object.create(antlr4.Parser.prototype);
FlinkSqlParser.prototype.constructor = FlinkSqlParser;

Object.defineProperty(FlinkSqlParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

FlinkSqlParser.EOF = antlr4.Token.EOF;
FlinkSqlParser.SPACE = 1;
FlinkSqlParser.SPEC_MYSQL_COMMENT = 2;
FlinkSqlParser.COMMENT_INPUT = 3;
FlinkSqlParser.LINE_COMMENT = 4;
FlinkSqlParser.SELECT = 5;
FlinkSqlParser.FROM = 6;
FlinkSqlParser.ADD = 7;
FlinkSqlParser.AS = 8;
FlinkSqlParser.ALL = 9;
FlinkSqlParser.ANY = 10;
FlinkSqlParser.DISTINCT = 11;
FlinkSqlParser.WHERE = 12;
FlinkSqlParser.GROUP = 13;
FlinkSqlParser.BY = 14;
FlinkSqlParser.GROUPING = 15;
FlinkSqlParser.SETS = 16;
FlinkSqlParser.CUBE = 17;
FlinkSqlParser.ROLLUP = 18;
FlinkSqlParser.ORDER = 19;
FlinkSqlParser.HAVING = 20;
FlinkSqlParser.LIMIT = 21;
FlinkSqlParser.AT = 22;
FlinkSqlParser.OR = 23;
FlinkSqlParser.AND = 24;
FlinkSqlParser.IN = 25;
FlinkSqlParser.NOT = 26;
FlinkSqlParser.NO = 27;
FlinkSqlParser.EXISTS = 28;
FlinkSqlParser.BETWEEN = 29;
FlinkSqlParser.LIKE = 30;
FlinkSqlParser.RLIKE = 31;
FlinkSqlParser.IS = 32;
FlinkSqlParser.TRUE = 33;
FlinkSqlParser.FALSE = 34;
FlinkSqlParser.NULLS = 35;
FlinkSqlParser.ASC = 36;
FlinkSqlParser.DESC = 37;
FlinkSqlParser.FOR = 38;
FlinkSqlParser.INTERVAL = 39;
FlinkSqlParser.CASE = 40;
FlinkSqlParser.WHEN = 41;
FlinkSqlParser.THEN = 42;
FlinkSqlParser.ELSE = 43;
FlinkSqlParser.END = 44;
FlinkSqlParser.JOIN = 45;
FlinkSqlParser.CROSS = 46;
FlinkSqlParser.OUTER = 47;
FlinkSqlParser.INNER = 48;
FlinkSqlParser.LEFT = 49;
FlinkSqlParser.SEMI = 50;
FlinkSqlParser.RIGHT = 51;
FlinkSqlParser.FULL = 52;
FlinkSqlParser.NATURAL = 53;
FlinkSqlParser.ON = 54;
FlinkSqlParser.PIVOT = 55;
FlinkSqlParser.LATERAL = 56;
FlinkSqlParser.WINDOW = 57;
FlinkSqlParser.OVER = 58;
FlinkSqlParser.PARTITION = 59;
FlinkSqlParser.RANGE = 60;
FlinkSqlParser.ROWS = 61;
FlinkSqlParser.UNBOUNDED = 62;
FlinkSqlParser.PRECEDING = 63;
FlinkSqlParser.FOLLOWING = 64;
FlinkSqlParser.CURRENT = 65;
FlinkSqlParser.FIRST = 66;
FlinkSqlParser.AFTER = 67;
FlinkSqlParser.LAST = 68;
FlinkSqlParser.WITH = 69;
FlinkSqlParser.VALUES = 70;
FlinkSqlParser.CREATE = 71;
FlinkSqlParser.TABLE = 72;
FlinkSqlParser.DIRECTORY = 73;
FlinkSqlParser.VIEW = 74;
FlinkSqlParser.REPLACE = 75;
FlinkSqlParser.INSERT = 76;
FlinkSqlParser.DELETE = 77;
FlinkSqlParser.INTO = 78;
FlinkSqlParser.DESCRIBE = 79;
FlinkSqlParser.EXPLAIN = 80;
FlinkSqlParser.FORMAT = 81;
FlinkSqlParser.LOGICAL = 82;
FlinkSqlParser.CODEGEN = 83;
FlinkSqlParser.COST = 84;
FlinkSqlParser.CAST = 85;
FlinkSqlParser.SHOW = 86;
FlinkSqlParser.TABLES = 87;
FlinkSqlParser.COLUMNS = 88;
FlinkSqlParser.COLUMN = 89;
FlinkSqlParser.USE = 90;
FlinkSqlParser.PARTITIONS = 91;
FlinkSqlParser.FUNCTIONS = 92;
FlinkSqlParser.DROP = 93;
FlinkSqlParser.UNION = 94;
FlinkSqlParser.EXCEPT = 95;
FlinkSqlParser.SETMINUS = 96;
FlinkSqlParser.INTERSECT = 97;
FlinkSqlParser.TO = 98;
FlinkSqlParser.TABLESAMPLE = 99;
FlinkSqlParser.STRATIFY = 100;
FlinkSqlParser.ALTER = 101;
FlinkSqlParser.RENAME = 102;
FlinkSqlParser.STRUCT = 103;
FlinkSqlParser.COMMENT = 104;
FlinkSqlParser.SET = 105;
FlinkSqlParser.RESET = 106;
FlinkSqlParser.DATA = 107;
FlinkSqlParser.START = 108;
FlinkSqlParser.TRANSACTION = 109;
FlinkSqlParser.COMMIT = 110;
FlinkSqlParser.ROLLBACK = 111;
FlinkSqlParser.MACRO = 112;
FlinkSqlParser.IGNORE = 113;
FlinkSqlParser.BOTH = 114;
FlinkSqlParser.LEADING = 115;
FlinkSqlParser.TRAILING = 116;
FlinkSqlParser.IF = 117;
FlinkSqlParser.POSITION = 118;
FlinkSqlParser.EXTRACT = 119;
FlinkSqlParser.EQ = 120;
FlinkSqlParser.NSEQ = 121;
FlinkSqlParser.NEQ = 122;
FlinkSqlParser.NEQJ = 123;
FlinkSqlParser.LT = 124;
FlinkSqlParser.LTE = 125;
FlinkSqlParser.GT = 126;
FlinkSqlParser.GTE = 127;
FlinkSqlParser.PLUS = 128;
FlinkSqlParser.MINUS = 129;
FlinkSqlParser.ASTERISK = 130;
FlinkSqlParser.SLASH = 131;
FlinkSqlParser.PERCENT = 132;
FlinkSqlParser.DIV = 133;
FlinkSqlParser.TILDE = 134;
FlinkSqlParser.AMPERSAND = 135;
FlinkSqlParser.PIPE = 136;
FlinkSqlParser.CONCAT_PIPE = 137;
FlinkSqlParser.HAT = 138;
FlinkSqlParser.PERCENTLIT = 139;
FlinkSqlParser.BUCKET = 140;
FlinkSqlParser.OUT = 141;
FlinkSqlParser.OF = 142;
FlinkSqlParser.SORT = 143;
FlinkSqlParser.CLUSTER = 144;
FlinkSqlParser.DISTRIBUTE = 145;
FlinkSqlParser.OVERWRITE = 146;
FlinkSqlParser.TRANSFORM = 147;
FlinkSqlParser.REDUCE = 148;
FlinkSqlParser.USING = 149;
FlinkSqlParser.SERDE = 150;
FlinkSqlParser.SERDEPROPERTIES = 151;
FlinkSqlParser.RECORDREADER = 152;
FlinkSqlParser.RECORDWRITER = 153;
FlinkSqlParser.DELIMITED = 154;
FlinkSqlParser.FIELDS = 155;
FlinkSqlParser.TERMINATED = 156;
FlinkSqlParser.COLLECTION = 157;
FlinkSqlParser.ITEMS = 158;
FlinkSqlParser.KEYS = 159;
FlinkSqlParser.ESCAPED = 160;
FlinkSqlParser.LINES = 161;
FlinkSqlParser.SEPARATED = 162;
FlinkSqlParser.FUNCTION = 163;
FlinkSqlParser.EXTENDED = 164;
FlinkSqlParser.REFRESH = 165;
FlinkSqlParser.CLEAR = 166;
FlinkSqlParser.CACHE = 167;
FlinkSqlParser.UNCACHE = 168;
FlinkSqlParser.LAZY = 169;
FlinkSqlParser.FORMATTED = 170;
FlinkSqlParser.GLOBAL = 171;
FlinkSqlParser.TEMPORARY = 172;
FlinkSqlParser.OPTIONS = 173;
FlinkSqlParser.UNSET = 174;
FlinkSqlParser.TBLPROPERTIES = 175;
FlinkSqlParser.DBPROPERTIES = 176;
FlinkSqlParser.BUCKETS = 177;
FlinkSqlParser.SKEWED = 178;
FlinkSqlParser.STORED = 179;
FlinkSqlParser.DIRECTORIES = 180;
FlinkSqlParser.LOCATION = 181;
FlinkSqlParser.EXCHANGE = 182;
FlinkSqlParser.ARCHIVE = 183;
FlinkSqlParser.UNARCHIVE = 184;
FlinkSqlParser.FILEFORMAT = 185;
FlinkSqlParser.TOUCH = 186;
FlinkSqlParser.COMPACT = 187;
FlinkSqlParser.CONCATENATE = 188;
FlinkSqlParser.CHANGE = 189;
FlinkSqlParser.CASCADE = 190;
FlinkSqlParser.RESTRICT = 191;
FlinkSqlParser.CLUSTERED = 192;
FlinkSqlParser.SORTED = 193;
FlinkSqlParser.PURGE = 194;
FlinkSqlParser.INPUTFORMAT = 195;
FlinkSqlParser.OUTPUTFORMAT = 196;
FlinkSqlParser.DATABASE = 197;
FlinkSqlParser.DATABASES = 198;
FlinkSqlParser.DFS = 199;
FlinkSqlParser.TRUNCATE = 200;
FlinkSqlParser.ANALYZE = 201;
FlinkSqlParser.COMPUTE = 202;
FlinkSqlParser.LIST = 203;
FlinkSqlParser.STATISTICS = 204;
FlinkSqlParser.PARTITIONED = 205;
FlinkSqlParser.EXTERNAL = 206;
FlinkSqlParser.DEFINED = 207;
FlinkSqlParser.REVOKE = 208;
FlinkSqlParser.GRANT = 209;
FlinkSqlParser.LOCK = 210;
FlinkSqlParser.UNLOCK = 211;
FlinkSqlParser.MSCK = 212;
FlinkSqlParser.REPAIR = 213;
FlinkSqlParser.RECOVER = 214;
FlinkSqlParser.EXPORT = 215;
FlinkSqlParser.IMPORT = 216;
FlinkSqlParser.LOAD = 217;
FlinkSqlParser.ROLE = 218;
FlinkSqlParser.ROLES = 219;
FlinkSqlParser.COMPACTIONS = 220;
FlinkSqlParser.PRINCIPALS = 221;
FlinkSqlParser.TRANSACTIONS = 222;
FlinkSqlParser.INDEX = 223;
FlinkSqlParser.INDEXES = 224;
FlinkSqlParser.LOCKS = 225;
FlinkSqlParser.OPTION = 226;
FlinkSqlParser.ANTI = 227;
FlinkSqlParser.LOCAL = 228;
FlinkSqlParser.INPATH = 229;
FlinkSqlParser.WATERMARK = 230;
FlinkSqlParser.UNNEST = 231;
FlinkSqlParser.MATCH_RECOGNIZE = 232;
FlinkSqlParser.MEASURES = 233;
FlinkSqlParser.ONE = 234;
FlinkSqlParser.PER = 235;
FlinkSqlParser.MATCH = 236;
FlinkSqlParser.SKIP1 = 237;
FlinkSqlParser.NEXT = 238;
FlinkSqlParser.PAST = 239;
FlinkSqlParser.PATTERN = 240;
FlinkSqlParser.WITHIN = 241;
FlinkSqlParser.DEFINE = 242;
FlinkSqlParser.BIGINT_LITERAL = 243;
FlinkSqlParser.SMALLINT_LITERAL = 244;
FlinkSqlParser.TINYINT_LITERAL = 245;
FlinkSqlParser.INTEGER_VALUE = 246;
FlinkSqlParser.DECIMAL_VALUE = 247;
FlinkSqlParser.DOUBLE_LITERAL = 248;
FlinkSqlParser.BIGDECIMAL_LITERAL = 249;
FlinkSqlParser.IDENTIFIER = 250;
FlinkSqlParser.BACKQUOTED_IDENTIFIER = 251;
FlinkSqlParser.SIMPLE_COMMENT = 252;
FlinkSqlParser.BRACKETED_EMPTY_COMMENT = 253;
FlinkSqlParser.BRACKETED_COMMENT = 254;
FlinkSqlParser.WS = 255;
FlinkSqlParser.UNRECOGNIZED = 256;
FlinkSqlParser.REVERSE_QUOTE_ID = 257;
FlinkSqlParser.DOUBLE_QUOTE_ID = 258;
FlinkSqlParser.DOT_ID = 259;
FlinkSqlParser.ID = 260;
FlinkSqlParser.SYSTEM = 261;
FlinkSqlParser.STRING = 262;
FlinkSqlParser.ARRAY = 263;
FlinkSqlParser.MAP = 264;
FlinkSqlParser.CHAR = 265;
FlinkSqlParser.VARCHAR = 266;
FlinkSqlParser.BINARY = 267;
FlinkSqlParser.VARBINARY = 268;
FlinkSqlParser.BYTES = 269;
FlinkSqlParser.DECIMAL = 270;
FlinkSqlParser.TINYINT = 271;
FlinkSqlParser.SMALLINT = 272;
FlinkSqlParser.INT = 273;
FlinkSqlParser.BIGINT = 274;
FlinkSqlParser.FLOAT = 275;
FlinkSqlParser.DOUBLE = 276;
FlinkSqlParser.DATE = 277;
FlinkSqlParser.TIME = 278;
FlinkSqlParser.TIMESTAMP = 279;
FlinkSqlParser.MULTISET = 280;
FlinkSqlParser.BOOLEAN = 281;
FlinkSqlParser.RAW = 282;
FlinkSqlParser.ROW = 283;
FlinkSqlParser.NULL = 284;
FlinkSqlParser.EQUAL_SYMBOL = 285;
FlinkSqlParser.GREATER_SYMBOL = 286;
FlinkSqlParser.LESS_SYMBOL = 287;
FlinkSqlParser.EXCLAMATION_SYMBOL = 288;
FlinkSqlParser.BIT_NOT_OP = 289;
FlinkSqlParser.BIT_OR_OP = 290;
FlinkSqlParser.BIT_AND_OP = 291;
FlinkSqlParser.BIT_XOR_OP = 292;
FlinkSqlParser.DOT = 293;
FlinkSqlParser.LS_BRACKET = 294;
FlinkSqlParser.RS_BRACKET = 295;
FlinkSqlParser.LR_BRACKET = 296;
FlinkSqlParser.RR_BRACKET = 297;
FlinkSqlParser.COMMA = 298;
FlinkSqlParser.SEMICOLON = 299;
FlinkSqlParser.AT_SIGN = 300;
FlinkSqlParser.ZERO_DECIMAL = 301;
FlinkSqlParser.ONE_DECIMAL = 302;
FlinkSqlParser.TWO_DECIMAL = 303;
FlinkSqlParser.SINGLE_QUOTE_SYMB = 304;
FlinkSqlParser.DOUBLE_QUOTE_SYMB = 305;
FlinkSqlParser.REVERSE_QUOTE_SYMB = 306;
FlinkSqlParser.COLON_SYMB = 307;
FlinkSqlParser.ASTERISK_SIGN = 308;
FlinkSqlParser.UNDERLINE_SIGN = 309;
FlinkSqlParser.HYPNEN_SIGN = 310;
FlinkSqlParser.ADD_SIGN = 311;
FlinkSqlParser.PENCENT_SIGN = 312;
FlinkSqlParser.DOUBLE_HYPNEN_SIGN = 313;
FlinkSqlParser.SLASH_SIGN = 314;
FlinkSqlParser.STRING_LITERAL = 315;
FlinkSqlParser.DECIMAL_LITERAL = 316;
FlinkSqlParser.REAL_LITERAL = 317;
FlinkSqlParser.BIT_STRING = 318;
FlinkSqlParser.IDENTIFIER_BASE = 319;
FlinkSqlParser.DEC_DIGIT = 320;

FlinkSqlParser.RULE_program = 0;
FlinkSqlParser.RULE_statement = 1;
FlinkSqlParser.RULE_sqlStatements = 2;
FlinkSqlParser.RULE_sqlStatement = 3;
FlinkSqlParser.RULE_emptyStatement = 4;
FlinkSqlParser.RULE_ddlStatement = 5;
FlinkSqlParser.RULE_dmlStatement = 6;
FlinkSqlParser.RULE_createTable = 7;
FlinkSqlParser.RULE_columnOptionDefinition = 8;
FlinkSqlParser.RULE_columnName = 9;
FlinkSqlParser.RULE_columnType = 10;
FlinkSqlParser.RULE_partitionDefinition = 11;
FlinkSqlParser.RULE_partitionColumnDefinition = 12;
FlinkSqlParser.RULE_partitionColumnName = 13;
FlinkSqlParser.RULE_createDatabase = 14;
FlinkSqlParser.RULE_createView = 15;
FlinkSqlParser.RULE_createFunction = 16;
FlinkSqlParser.RULE_alterTable = 17;
FlinkSqlParser.RULE_renameDefinition = 18;
FlinkSqlParser.RULE_setKeyValueDefinition = 19;
FlinkSqlParser.RULE_alterDatabase = 20;
FlinkSqlParser.RULE_alterFunction = 21;
FlinkSqlParser.RULE_dropTable = 22;
FlinkSqlParser.RULE_dropDatabase = 23;
FlinkSqlParser.RULE_dropView = 24;
FlinkSqlParser.RULE_dropFunction = 25;
FlinkSqlParser.RULE_insertStatement = 26;
FlinkSqlParser.RULE_insertPartitionDefinition = 27;
FlinkSqlParser.RULE_valuesDefinition = 28;
FlinkSqlParser.RULE_valuesRowDefinition = 29;
FlinkSqlParser.RULE_allValueDifinition = 30;
FlinkSqlParser.RULE_queryStatement = 31;
FlinkSqlParser.RULE_selectStatement = 32;
FlinkSqlParser.RULE_projectItemDefinition = 33;
FlinkSqlParser.RULE_tableExpression = 34;
FlinkSqlParser.RULE_tableReference = 35;
FlinkSqlParser.RULE_tablePrimary = 36;
FlinkSqlParser.RULE_expression = 37;
FlinkSqlParser.RULE_booleanExpression = 38;
FlinkSqlParser.RULE_predicate = 39;
FlinkSqlParser.RULE_valueExpression = 40;
FlinkSqlParser.RULE_primaryExpression = 41;
FlinkSqlParser.RULE_tableAlias = 42;
FlinkSqlParser.RULE_identifierList = 43;
FlinkSqlParser.RULE_identifierSeq = 44;
FlinkSqlParser.RULE_identifier = 45;
FlinkSqlParser.RULE_strictIdentifier = 46;
FlinkSqlParser.RULE_quotedIdentifier = 47;
FlinkSqlParser.RULE_whenClause = 48;
FlinkSqlParser.RULE_uidList = 49;
FlinkSqlParser.RULE_uid = 50;
FlinkSqlParser.RULE_withOption = 51;
FlinkSqlParser.RULE_ifNotExists = 52;
FlinkSqlParser.RULE_ifExists = 53;
FlinkSqlParser.RULE_keyValueDefinition = 54;
FlinkSqlParser.RULE_logicalOperator = 55;
FlinkSqlParser.RULE_comparisonOperator = 56;
FlinkSqlParser.RULE_bitOperator = 57;
FlinkSqlParser.RULE_mathOperator = 58;
FlinkSqlParser.RULE_unaryOperator = 59;
FlinkSqlParser.RULE_fullColumnName = 60;
FlinkSqlParser.RULE_constant = 61;
FlinkSqlParser.RULE_stringLiteral = 62;
FlinkSqlParser.RULE_decimalLiteral = 63;
FlinkSqlParser.RULE_booleanLiteral = 64;
FlinkSqlParser.RULE_setQuantifier = 65;


function ProgramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_program;
    return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ProgramContext.prototype.EOF = function() {
    return this.getToken(FlinkSqlParser.EOF, 0);
};

ProgramContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterProgram(this);
	}
};

ProgramContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitProgram(this);
	}
};

ProgramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitProgram(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ProgramContext = ProgramContext;

FlinkSqlParser.prototype.program = function() {

    var localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, FlinkSqlParser.RULE_program);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 132;
        this.statement();
        this.state = 133;
        this.match(FlinkSqlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.sqlStatements = function() {
    return this.getTypedRuleContext(SqlStatementsContext,0);
};

StatementContext.prototype.EOF = function() {
    return this.getToken(FlinkSqlParser.EOF, 0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitStatement(this);
	}
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.StatementContext = StatementContext;

FlinkSqlParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, FlinkSqlParser.RULE_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 135;
        this.sqlStatements();
        this.state = 136;
        this.match(FlinkSqlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SqlStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_sqlStatements;
    return this;
}

SqlStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SqlStatementsContext.prototype.constructor = SqlStatementsContext;

SqlStatementsContext.prototype.sqlStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SqlStatementContext);
    } else {
        return this.getTypedRuleContext(SqlStatementContext,i);
    }
};

SqlStatementsContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.SEMICOLON);
    } else {
        return this.getToken(FlinkSqlParser.SEMICOLON, i);
    }
};


SqlStatementsContext.prototype.emptyStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EmptyStatementContext);
    } else {
        return this.getTypedRuleContext(EmptyStatementContext,i);
    }
};

SqlStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSqlStatements(this);
	}
};

SqlStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSqlStatements(this);
	}
};

SqlStatementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSqlStatements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SqlStatementsContext = SqlStatementsContext;

FlinkSqlParser.prototype.sqlStatements = function() {

    var localctx = new SqlStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, FlinkSqlParser.RULE_sqlStatements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 144;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (FlinkSqlParser.CREATE - 71)) | (1 << (FlinkSqlParser.INSERT - 71)) | (1 << (FlinkSqlParser.DROP - 71)) | (1 << (FlinkSqlParser.ALTER - 71)))) !== 0) || _la===FlinkSqlParser.SEMICOLON) {
            this.state = 142;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
            switch(la_) {
            case 1:
                this.state = 138;
                this.sqlStatement();
                this.state = 139;
                this.match(FlinkSqlParser.SEMICOLON);
                break;

            case 2:
                this.state = 141;
                this.emptyStatement();
                break;

            }
            this.state = 146;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SqlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_sqlStatement;
    return this;
}

SqlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SqlStatementContext.prototype.constructor = SqlStatementContext;

SqlStatementContext.prototype.ddlStatement = function() {
    return this.getTypedRuleContext(DdlStatementContext,0);
};

SqlStatementContext.prototype.dmlStatement = function() {
    return this.getTypedRuleContext(DmlStatementContext,0);
};

SqlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSqlStatement(this);
	}
};

SqlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSqlStatement(this);
	}
};

SqlStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSqlStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SqlStatementContext = SqlStatementContext;

FlinkSqlParser.prototype.sqlStatement = function() {

    var localctx = new SqlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, FlinkSqlParser.RULE_sqlStatement);
    try {
        this.state = 149;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 147;
            this.ddlStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 148;
            this.dmlStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EmptyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_emptyStatement;
    return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;

EmptyStatementContext.prototype.SEMICOLON = function() {
    return this.getToken(FlinkSqlParser.SEMICOLON, 0);
};

EmptyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitEmptyStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.EmptyStatementContext = EmptyStatementContext;

FlinkSqlParser.prototype.emptyStatement = function() {

    var localctx = new EmptyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, FlinkSqlParser.RULE_emptyStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 151;
        this.match(FlinkSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DdlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_ddlStatement;
    return this;
}

DdlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DdlStatementContext.prototype.constructor = DdlStatementContext;

DdlStatementContext.prototype.createTable = function() {
    return this.getTypedRuleContext(CreateTableContext,0);
};

DdlStatementContext.prototype.createDatabase = function() {
    return this.getTypedRuleContext(CreateDatabaseContext,0);
};

DdlStatementContext.prototype.createView = function() {
    return this.getTypedRuleContext(CreateViewContext,0);
};

DdlStatementContext.prototype.createFunction = function() {
    return this.getTypedRuleContext(CreateFunctionContext,0);
};

DdlStatementContext.prototype.alterTable = function() {
    return this.getTypedRuleContext(AlterTableContext,0);
};

DdlStatementContext.prototype.alterDatabase = function() {
    return this.getTypedRuleContext(AlterDatabaseContext,0);
};

DdlStatementContext.prototype.alterFunction = function() {
    return this.getTypedRuleContext(AlterFunctionContext,0);
};

DdlStatementContext.prototype.dropTable = function() {
    return this.getTypedRuleContext(DropTableContext,0);
};

DdlStatementContext.prototype.dropDatabase = function() {
    return this.getTypedRuleContext(DropDatabaseContext,0);
};

DdlStatementContext.prototype.dropView = function() {
    return this.getTypedRuleContext(DropViewContext,0);
};

DdlStatementContext.prototype.dropFunction = function() {
    return this.getTypedRuleContext(DropFunctionContext,0);
};

DdlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDdlStatement(this);
	}
};

DdlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDdlStatement(this);
	}
};

DdlStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDdlStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DdlStatementContext = DdlStatementContext;

FlinkSqlParser.prototype.ddlStatement = function() {

    var localctx = new DdlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, FlinkSqlParser.RULE_ddlStatement);
    try {
        this.state = 164;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 153;
            this.createTable();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 154;
            this.createDatabase();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 155;
            this.createView();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 156;
            this.createFunction();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 157;
            this.alterTable();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 158;
            this.alterDatabase();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 159;
            this.alterFunction();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 160;
            this.dropTable();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 161;
            this.dropDatabase();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 162;
            this.dropView();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 163;
            this.dropFunction();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DmlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_dmlStatement;
    return this;
}

DmlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DmlStatementContext.prototype.constructor = DmlStatementContext;

DmlStatementContext.prototype.queryStatement = function() {
    return this.getTypedRuleContext(QueryStatementContext,0);
};

DmlStatementContext.prototype.insertStatement = function() {
    return this.getTypedRuleContext(InsertStatementContext,0);
};

DmlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDmlStatement(this);
	}
};

DmlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDmlStatement(this);
	}
};

DmlStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDmlStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DmlStatementContext = DmlStatementContext;

FlinkSqlParser.prototype.dmlStatement = function() {

    var localctx = new DmlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, FlinkSqlParser.RULE_dmlStatement);
    try {
        this.state = 168;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.SEMICOLON:
            this.enterOuterAlt(localctx, 1);
            this.state = 166;
            this.queryStatement();
            break;
        case FlinkSqlParser.INSERT:
            this.enterOuterAlt(localctx, 2);
            this.state = 167;
            this.insertStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_createTable;
    return this;
}

CreateTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableContext.prototype.constructor = CreateTableContext;

CreateTableContext.prototype.CREATE = function() {
    return this.getToken(FlinkSqlParser.CREATE, 0);
};

CreateTableContext.prototype.TABLE = function() {
    return this.getToken(FlinkSqlParser.TABLE, 0);
};

CreateTableContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CreateTableContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

CreateTableContext.prototype.columnOptionDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnOptionDefinitionContext);
    } else {
        return this.getTypedRuleContext(ColumnOptionDefinitionContext,i);
    }
};

CreateTableContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

CreateTableContext.prototype.withOption = function() {
    return this.getTypedRuleContext(WithOptionContext,0);
};

CreateTableContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


CreateTableContext.prototype.partitionDefinition = function() {
    return this.getTypedRuleContext(PartitionDefinitionContext,0);
};

CreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCreateTable(this);
	}
};

CreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCreateTable(this);
	}
};

CreateTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCreateTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.CreateTableContext = CreateTableContext;

FlinkSqlParser.prototype.createTable = function() {

    var localctx = new CreateTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, FlinkSqlParser.RULE_createTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 170;
        this.match(FlinkSqlParser.CREATE);
        this.state = 171;
        this.match(FlinkSqlParser.TABLE);
        this.state = 172;
        this.uid();
        this.state = 173;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 174;
        this.columnOptionDefinition();
        this.state = 179;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 175;
            this.match(FlinkSqlParser.COMMA);
            this.state = 176;
            this.columnOptionDefinition();
            this.state = 181;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 182;
        this.match(FlinkSqlParser.RR_BRACKET);
        this.state = 184;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.PARTITIONED) {
            this.state = 183;
            this.partitionDefinition();
        }

        this.state = 186;
        this.withOption();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnOptionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_columnOptionDefinition;
    return this;
}

ColumnOptionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnOptionDefinitionContext.prototype.constructor = ColumnOptionDefinitionContext;

ColumnOptionDefinitionContext.prototype.columnName = function() {
    return this.getTypedRuleContext(ColumnNameContext,0);
};

ColumnOptionDefinitionContext.prototype.columnType = function() {
    return this.getTypedRuleContext(ColumnTypeContext,0);
};

ColumnOptionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterColumnOptionDefinition(this);
	}
};

ColumnOptionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitColumnOptionDefinition(this);
	}
};

ColumnOptionDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitColumnOptionDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ColumnOptionDefinitionContext = ColumnOptionDefinitionContext;

FlinkSqlParser.prototype.columnOptionDefinition = function() {

    var localctx = new ColumnOptionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, FlinkSqlParser.RULE_columnOptionDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 188;
        this.columnName();
        this.state = 189;
        this.columnType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_columnName;
    return this;
}

ColumnNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameContext.prototype.constructor = ColumnNameContext;

ColumnNameContext.prototype.ID = function() {
    return this.getToken(FlinkSqlParser.ID, 0);
};

ColumnNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterColumnName(this);
	}
};

ColumnNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitColumnName(this);
	}
};

ColumnNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitColumnName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ColumnNameContext = ColumnNameContext;

FlinkSqlParser.prototype.columnName = function() {

    var localctx = new ColumnNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, FlinkSqlParser.RULE_columnName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 191;
        this.match(FlinkSqlParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_columnType;
    return this;
}

ColumnTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnTypeContext.prototype.constructor = ColumnTypeContext;

ColumnTypeContext.prototype.CHAR = function() {
    return this.getToken(FlinkSqlParser.CHAR, 0);
};

ColumnTypeContext.prototype.VARCHAR = function() {
    return this.getToken(FlinkSqlParser.VARCHAR, 0);
};

ColumnTypeContext.prototype.STRING = function() {
    return this.getToken(FlinkSqlParser.STRING, 0);
};

ColumnTypeContext.prototype.BINARY = function() {
    return this.getToken(FlinkSqlParser.BINARY, 0);
};

ColumnTypeContext.prototype.VARBINARY = function() {
    return this.getToken(FlinkSqlParser.VARBINARY, 0);
};

ColumnTypeContext.prototype.BYTES = function() {
    return this.getToken(FlinkSqlParser.BYTES, 0);
};

ColumnTypeContext.prototype.DECIMAL = function() {
    return this.getToken(FlinkSqlParser.DECIMAL, 0);
};

ColumnTypeContext.prototype.TINYINT = function() {
    return this.getToken(FlinkSqlParser.TINYINT, 0);
};

ColumnTypeContext.prototype.SMALLINT = function() {
    return this.getToken(FlinkSqlParser.SMALLINT, 0);
};

ColumnTypeContext.prototype.INT = function() {
    return this.getToken(FlinkSqlParser.INT, 0);
};

ColumnTypeContext.prototype.BIGINT = function() {
    return this.getToken(FlinkSqlParser.BIGINT, 0);
};

ColumnTypeContext.prototype.FLOAT = function() {
    return this.getToken(FlinkSqlParser.FLOAT, 0);
};

ColumnTypeContext.prototype.DOUBLE = function() {
    return this.getToken(FlinkSqlParser.DOUBLE, 0);
};

ColumnTypeContext.prototype.DATE = function() {
    return this.getToken(FlinkSqlParser.DATE, 0);
};

ColumnTypeContext.prototype.TIME = function() {
    return this.getToken(FlinkSqlParser.TIME, 0);
};

ColumnTypeContext.prototype.TIMESTAMP = function() {
    return this.getToken(FlinkSqlParser.TIMESTAMP, 0);
};

ColumnTypeContext.prototype.ARRAY = function() {
    return this.getToken(FlinkSqlParser.ARRAY, 0);
};

ColumnTypeContext.prototype.MAP = function() {
    return this.getToken(FlinkSqlParser.MAP, 0);
};

ColumnTypeContext.prototype.MULTISET = function() {
    return this.getToken(FlinkSqlParser.MULTISET, 0);
};

ColumnTypeContext.prototype.ROW = function() {
    return this.getToken(FlinkSqlParser.ROW, 0);
};

ColumnTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(FlinkSqlParser.BOOLEAN, 0);
};

ColumnTypeContext.prototype.RAW = function() {
    return this.getToken(FlinkSqlParser.RAW, 0);
};

ColumnTypeContext.prototype.NULL = function() {
    return this.getToken(FlinkSqlParser.NULL, 0);
};

ColumnTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterColumnType(this);
	}
};

ColumnTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitColumnType(this);
	}
};

ColumnTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitColumnType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ColumnTypeContext = ColumnTypeContext;

FlinkSqlParser.prototype.columnType = function() {

    var localctx = new ColumnTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, FlinkSqlParser.RULE_columnType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 193;
        _la = this._input.LA(1);
        if(!(((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (FlinkSqlParser.STRING - 262)) | (1 << (FlinkSqlParser.ARRAY - 262)) | (1 << (FlinkSqlParser.MAP - 262)) | (1 << (FlinkSqlParser.CHAR - 262)) | (1 << (FlinkSqlParser.VARCHAR - 262)) | (1 << (FlinkSqlParser.BINARY - 262)) | (1 << (FlinkSqlParser.VARBINARY - 262)) | (1 << (FlinkSqlParser.BYTES - 262)) | (1 << (FlinkSqlParser.DECIMAL - 262)) | (1 << (FlinkSqlParser.TINYINT - 262)) | (1 << (FlinkSqlParser.SMALLINT - 262)) | (1 << (FlinkSqlParser.INT - 262)) | (1 << (FlinkSqlParser.BIGINT - 262)) | (1 << (FlinkSqlParser.FLOAT - 262)) | (1 << (FlinkSqlParser.DOUBLE - 262)) | (1 << (FlinkSqlParser.DATE - 262)) | (1 << (FlinkSqlParser.TIME - 262)) | (1 << (FlinkSqlParser.TIMESTAMP - 262)) | (1 << (FlinkSqlParser.MULTISET - 262)) | (1 << (FlinkSqlParser.BOOLEAN - 262)) | (1 << (FlinkSqlParser.RAW - 262)) | (1 << (FlinkSqlParser.ROW - 262)) | (1 << (FlinkSqlParser.NULL - 262)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_partitionDefinition;
    return this;
}

PartitionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionDefinitionContext.prototype.constructor = PartitionDefinitionContext;

PartitionDefinitionContext.prototype.PARTITIONED = function() {
    return this.getToken(FlinkSqlParser.PARTITIONED, 0);
};

PartitionDefinitionContext.prototype.BY = function() {
    return this.getToken(FlinkSqlParser.BY, 0);
};

PartitionDefinitionContext.prototype.partitionColumnDefinition = function() {
    return this.getTypedRuleContext(PartitionColumnDefinitionContext,0);
};

PartitionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterPartitionDefinition(this);
	}
};

PartitionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitPartitionDefinition(this);
	}
};

PartitionDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitPartitionDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.PartitionDefinitionContext = PartitionDefinitionContext;

FlinkSqlParser.prototype.partitionDefinition = function() {

    var localctx = new PartitionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, FlinkSqlParser.RULE_partitionDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 195;
        this.match(FlinkSqlParser.PARTITIONED);
        this.state = 196;
        this.match(FlinkSqlParser.BY);
        this.state = 197;
        this.partitionColumnDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionColumnDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_partitionColumnDefinition;
    return this;
}

PartitionColumnDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionColumnDefinitionContext.prototype.constructor = PartitionColumnDefinitionContext;

PartitionColumnDefinitionContext.prototype.partitionColumnName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionColumnNameContext);
    } else {
        return this.getTypedRuleContext(PartitionColumnNameContext,i);
    }
};

PartitionColumnDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


PartitionColumnDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterPartitionColumnDefinition(this);
	}
};

PartitionColumnDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitPartitionColumnDefinition(this);
	}
};

PartitionColumnDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitPartitionColumnDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.PartitionColumnDefinitionContext = PartitionColumnDefinitionContext;

FlinkSqlParser.prototype.partitionColumnDefinition = function() {

    var localctx = new PartitionColumnDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, FlinkSqlParser.RULE_partitionColumnDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 199;
        this.partitionColumnName();
        this.state = 204;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 200;
            this.match(FlinkSqlParser.COMMA);
            this.state = 201;
            this.partitionColumnName();
            this.state = 206;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionColumnNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_partitionColumnName;
    return this;
}

PartitionColumnNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionColumnNameContext.prototype.constructor = PartitionColumnNameContext;

PartitionColumnNameContext.prototype.ID = function() {
    return this.getToken(FlinkSqlParser.ID, 0);
};

PartitionColumnNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterPartitionColumnName(this);
	}
};

PartitionColumnNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitPartitionColumnName(this);
	}
};

PartitionColumnNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitPartitionColumnName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.PartitionColumnNameContext = PartitionColumnNameContext;

FlinkSqlParser.prototype.partitionColumnName = function() {

    var localctx = new PartitionColumnNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, FlinkSqlParser.RULE_partitionColumnName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 207;
        this.match(FlinkSqlParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_createDatabase;
    return this;
}

CreateDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateDatabaseContext.prototype.constructor = CreateDatabaseContext;

CreateDatabaseContext.prototype.CREATE = function() {
    return this.getToken(FlinkSqlParser.CREATE, 0);
};

CreateDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(FlinkSqlParser.DATABASE, 0);
};

CreateDatabaseContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CreateDatabaseContext.prototype.withOption = function() {
    return this.getTypedRuleContext(WithOptionContext,0);
};

CreateDatabaseContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCreateDatabase(this);
	}
};

CreateDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCreateDatabase(this);
	}
};

CreateDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCreateDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.CreateDatabaseContext = CreateDatabaseContext;

FlinkSqlParser.prototype.createDatabase = function() {

    var localctx = new CreateDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, FlinkSqlParser.RULE_createDatabase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 209;
        this.match(FlinkSqlParser.CREATE);
        this.state = 210;
        this.match(FlinkSqlParser.DATABASE);
        this.state = 212;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 211;
            this.ifNotExists();
        }

        this.state = 214;
        this.uid();
        this.state = 215;
        this.withOption();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_createView;
    return this;
}

CreateViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateViewContext.prototype.constructor = CreateViewContext;

CreateViewContext.prototype.CREATE = function() {
    return this.getToken(FlinkSqlParser.CREATE, 0);
};

CreateViewContext.prototype.VIEW = function() {
    return this.getToken(FlinkSqlParser.VIEW, 0);
};

CreateViewContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CreateViewContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

CreateViewContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

CreateViewContext.prototype.TEMPORARY = function() {
    return this.getToken(FlinkSqlParser.TEMPORARY, 0);
};

CreateViewContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCreateView(this);
	}
};

CreateViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCreateView(this);
	}
};

CreateViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCreateView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.CreateViewContext = CreateViewContext;

FlinkSqlParser.prototype.createView = function() {

    var localctx = new CreateViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, FlinkSqlParser.RULE_createView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 217;
        this.match(FlinkSqlParser.CREATE);
        this.state = 219;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.TEMPORARY) {
            this.state = 218;
            this.match(FlinkSqlParser.TEMPORARY);
        }

        this.state = 221;
        this.match(FlinkSqlParser.VIEW);
        this.state = 223;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 222;
            this.ifNotExists();
        }

        this.state = 225;
        this.uid();
        this.state = 226;
        this.match(FlinkSqlParser.AS);
        this.state = 227;
        this.selectStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_createFunction;
    return this;
}

CreateFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateFunctionContext.prototype.constructor = CreateFunctionContext;


CreateFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCreateFunction(this);
	}
};

CreateFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCreateFunction(this);
	}
};

CreateFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCreateFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.CreateFunctionContext = CreateFunctionContext;

FlinkSqlParser.prototype.createFunction = function() {

    var localctx = new CreateFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, FlinkSqlParser.RULE_createFunction);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_alterTable;
    return this;
}

AlterTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableContext.prototype.constructor = AlterTableContext;

AlterTableContext.prototype.ALTER = function() {
    return this.getToken(FlinkSqlParser.ALTER, 0);
};

AlterTableContext.prototype.TABLE = function() {
    return this.getToken(FlinkSqlParser.TABLE, 0);
};

AlterTableContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterTableContext.prototype.renameDefinition = function() {
    return this.getTypedRuleContext(RenameDefinitionContext,0);
};

AlterTableContext.prototype.setKeyValueDefinition = function() {
    return this.getTypedRuleContext(SetKeyValueDefinitionContext,0);
};

AlterTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterAlterTable(this);
	}
};

AlterTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitAlterTable(this);
	}
};

AlterTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitAlterTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.AlterTableContext = AlterTableContext;

FlinkSqlParser.prototype.alterTable = function() {

    var localctx = new AlterTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, FlinkSqlParser.RULE_alterTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 231;
        this.match(FlinkSqlParser.ALTER);
        this.state = 232;
        this.match(FlinkSqlParser.TABLE);
        this.state = 233;
        this.uid();
        this.state = 236;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.RENAME:
            this.state = 234;
            this.renameDefinition();
            break;
        case FlinkSqlParser.SET:
            this.state = 235;
            this.setKeyValueDefinition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RenameDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_renameDefinition;
    return this;
}

RenameDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenameDefinitionContext.prototype.constructor = RenameDefinitionContext;

RenameDefinitionContext.prototype.RENAME = function() {
    return this.getToken(FlinkSqlParser.RENAME, 0);
};

RenameDefinitionContext.prototype.TO = function() {
    return this.getToken(FlinkSqlParser.TO, 0);
};

RenameDefinitionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

RenameDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterRenameDefinition(this);
	}
};

RenameDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitRenameDefinition(this);
	}
};

RenameDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitRenameDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.RenameDefinitionContext = RenameDefinitionContext;

FlinkSqlParser.prototype.renameDefinition = function() {

    var localctx = new RenameDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, FlinkSqlParser.RULE_renameDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 238;
        this.match(FlinkSqlParser.RENAME);
        this.state = 239;
        this.match(FlinkSqlParser.TO);
        this.state = 240;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetKeyValueDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_setKeyValueDefinition;
    return this;
}

SetKeyValueDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetKeyValueDefinitionContext.prototype.constructor = SetKeyValueDefinitionContext;

SetKeyValueDefinitionContext.prototype.SET = function() {
    return this.getToken(FlinkSqlParser.SET, 0);
};

SetKeyValueDefinitionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

SetKeyValueDefinitionContext.prototype.keyValueDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeyValueDefinitionContext);
    } else {
        return this.getTypedRuleContext(KeyValueDefinitionContext,i);
    }
};

SetKeyValueDefinitionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

SetKeyValueDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


SetKeyValueDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSetKeyValueDefinition(this);
	}
};

SetKeyValueDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSetKeyValueDefinition(this);
	}
};

SetKeyValueDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSetKeyValueDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SetKeyValueDefinitionContext = SetKeyValueDefinitionContext;

FlinkSqlParser.prototype.setKeyValueDefinition = function() {

    var localctx = new SetKeyValueDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, FlinkSqlParser.RULE_setKeyValueDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 242;
        this.match(FlinkSqlParser.SET);
        this.state = 243;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 244;
        this.keyValueDefinition();
        this.state = 249;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 245;
            this.match(FlinkSqlParser.COMMA);
            this.state = 246;
            this.keyValueDefinition();
            this.state = 251;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 252;
        this.match(FlinkSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_alterDatabase;
    return this;
}

AlterDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterDatabaseContext.prototype.constructor = AlterDatabaseContext;

AlterDatabaseContext.prototype.ALTER = function() {
    return this.getToken(FlinkSqlParser.ALTER, 0);
};

AlterDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(FlinkSqlParser.DATABASE, 0);
};

AlterDatabaseContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterDatabaseContext.prototype.setKeyValueDefinition = function() {
    return this.getTypedRuleContext(SetKeyValueDefinitionContext,0);
};

AlterDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterAlterDatabase(this);
	}
};

AlterDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitAlterDatabase(this);
	}
};

AlterDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitAlterDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.AlterDatabaseContext = AlterDatabaseContext;

FlinkSqlParser.prototype.alterDatabase = function() {

    var localctx = new AlterDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, FlinkSqlParser.RULE_alterDatabase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 254;
        this.match(FlinkSqlParser.ALTER);
        this.state = 255;
        this.match(FlinkSqlParser.DATABASE);
        this.state = 256;
        this.uid();
        this.state = 257;
        this.setKeyValueDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_alterFunction;
    return this;
}

AlterFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterFunctionContext.prototype.constructor = AlterFunctionContext;


AlterFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterAlterFunction(this);
	}
};

AlterFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitAlterFunction(this);
	}
};

AlterFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitAlterFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.AlterFunctionContext = AlterFunctionContext;

FlinkSqlParser.prototype.alterFunction = function() {

    var localctx = new AlterFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, FlinkSqlParser.RULE_alterFunction);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_dropTable;
    return this;
}

DropTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTableContext.prototype.constructor = DropTableContext;

DropTableContext.prototype.DROP = function() {
    return this.getToken(FlinkSqlParser.DROP, 0);
};

DropTableContext.prototype.TABLE = function() {
    return this.getToken(FlinkSqlParser.TABLE, 0);
};

DropTableContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropTableContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDropTable(this);
	}
};

DropTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDropTable(this);
	}
};

DropTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDropTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DropTableContext = DropTableContext;

FlinkSqlParser.prototype.dropTable = function() {

    var localctx = new DropTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, FlinkSqlParser.RULE_dropTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 261;
        this.match(FlinkSqlParser.DROP);
        this.state = 262;
        this.match(FlinkSqlParser.TABLE);
        this.state = 264;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 263;
            this.ifExists();
        }

        this.state = 266;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_dropDatabase;
    this.dropType = null; // Token
    return this;
}

DropDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropDatabaseContext.prototype.constructor = DropDatabaseContext;

DropDatabaseContext.prototype.DROP = function() {
    return this.getToken(FlinkSqlParser.DROP, 0);
};

DropDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(FlinkSqlParser.DATABASE, 0);
};

DropDatabaseContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropDatabaseContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropDatabaseContext.prototype.RESTRICT = function() {
    return this.getToken(FlinkSqlParser.RESTRICT, 0);
};

DropDatabaseContext.prototype.CASCADE = function() {
    return this.getToken(FlinkSqlParser.CASCADE, 0);
};

DropDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDropDatabase(this);
	}
};

DropDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDropDatabase(this);
	}
};

DropDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDropDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DropDatabaseContext = DropDatabaseContext;

FlinkSqlParser.prototype.dropDatabase = function() {

    var localctx = new DropDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, FlinkSqlParser.RULE_dropDatabase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 268;
        this.match(FlinkSqlParser.DROP);
        this.state = 269;
        this.match(FlinkSqlParser.DATABASE);
        this.state = 271;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 270;
            this.ifExists();
        }

        this.state = 273;
        this.uid();
        this.state = 275;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.CASCADE || _la===FlinkSqlParser.RESTRICT) {
            this.state = 274;
            localctx.dropType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.CASCADE || _la===FlinkSqlParser.RESTRICT)) {
                localctx.dropType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_dropView;
    return this;
}

DropViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropViewContext.prototype.constructor = DropViewContext;

DropViewContext.prototype.DROP = function() {
    return this.getToken(FlinkSqlParser.DROP, 0);
};

DropViewContext.prototype.VIEW = function() {
    return this.getToken(FlinkSqlParser.VIEW, 0);
};

DropViewContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropViewContext.prototype.TEMPORARY = function() {
    return this.getToken(FlinkSqlParser.TEMPORARY, 0);
};

DropViewContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDropView(this);
	}
};

DropViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDropView(this);
	}
};

DropViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDropView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DropViewContext = DropViewContext;

FlinkSqlParser.prototype.dropView = function() {

    var localctx = new DropViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, FlinkSqlParser.RULE_dropView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 277;
        this.match(FlinkSqlParser.DROP);
        this.state = 279;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.TEMPORARY) {
            this.state = 278;
            this.match(FlinkSqlParser.TEMPORARY);
        }

        this.state = 281;
        this.match(FlinkSqlParser.VIEW);
        this.state = 283;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 282;
            this.ifExists();
        }

        this.state = 285;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_dropFunction;
    return this;
}

DropFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropFunctionContext.prototype.constructor = DropFunctionContext;

DropFunctionContext.prototype.DROP = function() {
    return this.getToken(FlinkSqlParser.DROP, 0);
};

DropFunctionContext.prototype.FUNCTION = function() {
    return this.getToken(FlinkSqlParser.FUNCTION, 0);
};

DropFunctionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropFunctionContext.prototype.TEMPORARY = function() {
    return this.getToken(FlinkSqlParser.TEMPORARY, 0);
};

DropFunctionContext.prototype.SYSTEM = function() {
    return this.getToken(FlinkSqlParser.SYSTEM, 0);
};

DropFunctionContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDropFunction(this);
	}
};

DropFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDropFunction(this);
	}
};

DropFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDropFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DropFunctionContext = DropFunctionContext;

FlinkSqlParser.prototype.dropFunction = function() {

    var localctx = new DropFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, FlinkSqlParser.RULE_dropFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 287;
        this.match(FlinkSqlParser.DROP);
        this.state = 291;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        if(la_===1) {
            this.state = 288;
            this.match(FlinkSqlParser.TEMPORARY);

        } else if(la_===2) {
            this.state = 289;
            this.match(FlinkSqlParser.TEMPORARY);
            this.state = 290;
            this.match(FlinkSqlParser.SYSTEM);

        }
        this.state = 293;
        this.match(FlinkSqlParser.FUNCTION);
        this.state = 295;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 294;
            this.ifExists();
        }

        this.state = 297;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_insertStatement;
    return this;
}

InsertStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertStatementContext.prototype.constructor = InsertStatementContext;

InsertStatementContext.prototype.INSERT = function() {
    return this.getToken(FlinkSqlParser.INSERT, 0);
};

InsertStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

InsertStatementContext.prototype.INTO = function() {
    return this.getToken(FlinkSqlParser.INTO, 0);
};

InsertStatementContext.prototype.OVERWRITE = function() {
    return this.getToken(FlinkSqlParser.OVERWRITE, 0);
};

InsertStatementContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

InsertStatementContext.prototype.valuesDefinition = function() {
    return this.getTypedRuleContext(ValuesDefinitionContext,0);
};

InsertStatementContext.prototype.insertPartitionDefinition = function() {
    return this.getTypedRuleContext(InsertPartitionDefinitionContext,0);
};

InsertStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterInsertStatement(this);
	}
};

InsertStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitInsertStatement(this);
	}
};

InsertStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitInsertStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.InsertStatementContext = InsertStatementContext;

FlinkSqlParser.prototype.insertStatement = function() {

    var localctx = new InsertStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, FlinkSqlParser.RULE_insertStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 299;
        this.match(FlinkSqlParser.INSERT);
        this.state = 300;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParser.INTO || _la===FlinkSqlParser.OVERWRITE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 301;
        this.uid();
        this.state = 307;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.SELECT:
        case FlinkSqlParser.PARTITION:
            this.state = 303;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.PARTITION) {
                this.state = 302;
                this.insertPartitionDefinition();
            }

            this.state = 305;
            this.selectStatement();
            break;
        case FlinkSqlParser.VALUES:
            this.state = 306;
            this.valuesDefinition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertPartitionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_insertPartitionDefinition;
    return this;
}

InsertPartitionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertPartitionDefinitionContext.prototype.constructor = InsertPartitionDefinitionContext;

InsertPartitionDefinitionContext.prototype.PARTITION = function() {
    return this.getToken(FlinkSqlParser.PARTITION, 0);
};

InsertPartitionDefinitionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

InsertPartitionDefinitionContext.prototype.keyValueDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeyValueDefinitionContext);
    } else {
        return this.getTypedRuleContext(KeyValueDefinitionContext,i);
    }
};

InsertPartitionDefinitionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

InsertPartitionDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


InsertPartitionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterInsertPartitionDefinition(this);
	}
};

InsertPartitionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitInsertPartitionDefinition(this);
	}
};

InsertPartitionDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitInsertPartitionDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.InsertPartitionDefinitionContext = InsertPartitionDefinitionContext;

FlinkSqlParser.prototype.insertPartitionDefinition = function() {

    var localctx = new InsertPartitionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, FlinkSqlParser.RULE_insertPartitionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 309;
        this.match(FlinkSqlParser.PARTITION);
        this.state = 310;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 311;
        this.keyValueDefinition();
        this.state = 316;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 312;
            this.match(FlinkSqlParser.COMMA);
            this.state = 313;
            this.keyValueDefinition();
            this.state = 318;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 319;
        this.match(FlinkSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValuesDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_valuesDefinition;
    return this;
}

ValuesDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesDefinitionContext.prototype.constructor = ValuesDefinitionContext;

ValuesDefinitionContext.prototype.VALUES = function() {
    return this.getToken(FlinkSqlParser.VALUES, 0);
};

ValuesDefinitionContext.prototype.valuesRowDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValuesRowDefinitionContext);
    } else {
        return this.getTypedRuleContext(ValuesRowDefinitionContext,i);
    }
};

ValuesDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


ValuesDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterValuesDefinition(this);
	}
};

ValuesDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitValuesDefinition(this);
	}
};

ValuesDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitValuesDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ValuesDefinitionContext = ValuesDefinitionContext;

FlinkSqlParser.prototype.valuesDefinition = function() {

    var localctx = new ValuesDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, FlinkSqlParser.RULE_valuesDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 321;
        this.match(FlinkSqlParser.VALUES);
        this.state = 322;
        this.valuesRowDefinition();
        this.state = 327;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 323;
            this.match(FlinkSqlParser.COMMA);
            this.state = 324;
            this.valuesRowDefinition();
            this.state = 329;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValuesRowDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_valuesRowDefinition;
    return this;
}

ValuesRowDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesRowDefinitionContext.prototype.constructor = ValuesRowDefinitionContext;

ValuesRowDefinitionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

ValuesRowDefinitionContext.prototype.allValueDifinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AllValueDifinitionContext);
    } else {
        return this.getTypedRuleContext(AllValueDifinitionContext,i);
    }
};

ValuesRowDefinitionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

ValuesRowDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


ValuesRowDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterValuesRowDefinition(this);
	}
};

ValuesRowDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitValuesRowDefinition(this);
	}
};

ValuesRowDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitValuesRowDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ValuesRowDefinitionContext = ValuesRowDefinitionContext;

FlinkSqlParser.prototype.valuesRowDefinition = function() {

    var localctx = new ValuesRowDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, FlinkSqlParser.RULE_valuesRowDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 330;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 331;
        this.allValueDifinition();
        this.state = 336;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 332;
            this.match(FlinkSqlParser.COMMA);
            this.state = 333;
            this.allValueDifinition();
            this.state = 338;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 339;
        this.match(FlinkSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AllValueDifinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_allValueDifinition;
    return this;
}

AllValueDifinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AllValueDifinitionContext.prototype.constructor = AllValueDifinitionContext;

AllValueDifinitionContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

AllValueDifinitionContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

AllValueDifinitionContext.prototype.DEC_DIGIT = function() {
    return this.getToken(FlinkSqlParser.DEC_DIGIT, 0);
};

AllValueDifinitionContext.prototype.NULL = function() {
    return this.getToken(FlinkSqlParser.NULL, 0);
};

AllValueDifinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterAllValueDifinition(this);
	}
};

AllValueDifinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitAllValueDifinition(this);
	}
};

AllValueDifinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitAllValueDifinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.AllValueDifinitionContext = AllValueDifinitionContext;

FlinkSqlParser.prototype.allValueDifinition = function() {

    var localctx = new AllValueDifinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, FlinkSqlParser.RULE_allValueDifinition);
    try {
        this.state = 345;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 341;
            this.stringLiteral();
            break;
        case FlinkSqlParser.TRUE:
        case FlinkSqlParser.FALSE:
            this.enterOuterAlt(localctx, 2);
            this.state = 342;
            this.booleanLiteral();
            break;
        case FlinkSqlParser.DEC_DIGIT:
            this.enterOuterAlt(localctx, 3);
            this.state = 343;
            this.match(FlinkSqlParser.DEC_DIGIT);
            break;
        case FlinkSqlParser.NULL:
            this.enterOuterAlt(localctx, 4);
            this.state = 344;
            this.match(FlinkSqlParser.NULL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_queryStatement;
    return this;
}

QueryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryStatementContext.prototype.constructor = QueryStatementContext;


QueryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterQueryStatement(this);
	}
};

QueryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitQueryStatement(this);
	}
};

QueryStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitQueryStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.QueryStatementContext = QueryStatementContext;

FlinkSqlParser.prototype.queryStatement = function() {

    var localctx = new QueryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, FlinkSqlParser.RULE_queryStatement);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_selectStatement;
    return this;
}

SelectStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectStatementContext.prototype.constructor = SelectStatementContext;

SelectStatementContext.prototype.SELECT = function() {
    return this.getToken(FlinkSqlParser.SELECT, 0);
};

SelectStatementContext.prototype.FROM = function() {
    return this.getToken(FlinkSqlParser.FROM, 0);
};

SelectStatementContext.prototype.tableExpression = function() {
    return this.getTypedRuleContext(TableExpressionContext,0);
};

SelectStatementContext.prototype.ASTERISK_SIGN = function() {
    return this.getToken(FlinkSqlParser.ASTERISK_SIGN, 0);
};

SelectStatementContext.prototype.projectItemDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProjectItemDefinitionContext);
    } else {
        return this.getTypedRuleContext(ProjectItemDefinitionContext,i);
    }
};

SelectStatementContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};

SelectStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


SelectStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSelectStatement(this);
	}
};

SelectStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSelectStatement(this);
	}
};

SelectStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSelectStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SelectStatementContext = SelectStatementContext;

FlinkSqlParser.prototype.selectStatement = function() {

    var localctx = new SelectStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, FlinkSqlParser.RULE_selectStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 349;
        this.match(FlinkSqlParser.SELECT);
        this.state = 351;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.ALL || _la===FlinkSqlParser.DISTINCT) {
            this.state = 350;
            this.setQuantifier();
        }

        this.state = 362;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.ASTERISK_SIGN:
            this.state = 353;
            this.match(FlinkSqlParser.ASTERISK_SIGN);
            break;
        case FlinkSqlParser.NOT:
        case FlinkSqlParser.TRUE:
        case FlinkSqlParser.FALSE:
        case FlinkSqlParser.CASE:
        case FlinkSqlParser.FIRST:
        case FlinkSqlParser.LAST:
        case FlinkSqlParser.POSITION:
        case FlinkSqlParser.PLUS:
        case FlinkSqlParser.MINUS:
        case FlinkSqlParser.ASTERISK:
        case FlinkSqlParser.TILDE:
        case FlinkSqlParser.ID:
        case FlinkSqlParser.NULL:
        case FlinkSqlParser.LR_BRACKET:
        case FlinkSqlParser.ZERO_DECIMAL:
        case FlinkSqlParser.ONE_DECIMAL:
        case FlinkSqlParser.TWO_DECIMAL:
        case FlinkSqlParser.HYPNEN_SIGN:
        case FlinkSqlParser.STRING_LITERAL:
        case FlinkSqlParser.DECIMAL_LITERAL:
        case FlinkSqlParser.REAL_LITERAL:
        case FlinkSqlParser.BIT_STRING:
            this.state = 354;
            this.projectItemDefinition();
            this.state = 359;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParser.COMMA) {
                this.state = 355;
                this.match(FlinkSqlParser.COMMA);
                this.state = 356;
                this.projectItemDefinition();
                this.state = 361;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 364;
        this.match(FlinkSqlParser.FROM);
        this.state = 365;
        this.tableExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProjectItemDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_projectItemDefinition;
    return this;
}

ProjectItemDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProjectItemDefinitionContext.prototype.constructor = ProjectItemDefinitionContext;

ProjectItemDefinitionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ProjectItemDefinitionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

ProjectItemDefinitionContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

ProjectItemDefinitionContext.prototype.DOT = function() {
    return this.getToken(FlinkSqlParser.DOT, 0);
};

ProjectItemDefinitionContext.prototype.ASTERISK_SIGN = function() {
    return this.getToken(FlinkSqlParser.ASTERISK_SIGN, 0);
};

ProjectItemDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterProjectItemDefinition(this);
	}
};

ProjectItemDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitProjectItemDefinition(this);
	}
};

ProjectItemDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitProjectItemDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ProjectItemDefinitionContext = ProjectItemDefinitionContext;

FlinkSqlParser.prototype.projectItemDefinition = function() {

    var localctx = new ProjectItemDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, FlinkSqlParser.RULE_projectItemDefinition);
    var _la = 0; // Token type
    try {
        this.state = 378;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.NOT:
        case FlinkSqlParser.TRUE:
        case FlinkSqlParser.FALSE:
        case FlinkSqlParser.CASE:
        case FlinkSqlParser.FIRST:
        case FlinkSqlParser.LAST:
        case FlinkSqlParser.POSITION:
        case FlinkSqlParser.PLUS:
        case FlinkSqlParser.MINUS:
        case FlinkSqlParser.ASTERISK:
        case FlinkSqlParser.TILDE:
        case FlinkSqlParser.NULL:
        case FlinkSqlParser.LR_BRACKET:
        case FlinkSqlParser.ZERO_DECIMAL:
        case FlinkSqlParser.ONE_DECIMAL:
        case FlinkSqlParser.TWO_DECIMAL:
        case FlinkSqlParser.HYPNEN_SIGN:
        case FlinkSqlParser.STRING_LITERAL:
        case FlinkSqlParser.DECIMAL_LITERAL:
        case FlinkSqlParser.REAL_LITERAL:
        case FlinkSqlParser.BIT_STRING:
            this.enterOuterAlt(localctx, 1);
            this.state = 367;
            this.expression();
            this.state = 372;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.AS || _la===FlinkSqlParser.ID) {
                this.state = 369;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===FlinkSqlParser.AS) {
                    this.state = 368;
                    this.match(FlinkSqlParser.AS);
                }

                this.state = 371;
                this.uid();
            }

            break;
        case FlinkSqlParser.ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 374;
            this.uid();
            this.state = 375;
            this.match(FlinkSqlParser.DOT);
            this.state = 376;
            this.match(FlinkSqlParser.ASTERISK_SIGN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_tableExpression;
    return this;
}

TableExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableExpressionContext.prototype.constructor = TableExpressionContext;

TableExpressionContext.prototype.tableReference = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableReferenceContext);
    } else {
        return this.getTypedRuleContext(TableReferenceContext,i);
    }
};

TableExpressionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


TableExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTableExpression(this);
	}
};

TableExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTableExpression(this);
	}
};

TableExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTableExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.TableExpressionContext = TableExpressionContext;

FlinkSqlParser.prototype.tableExpression = function() {

    var localctx = new TableExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, FlinkSqlParser.RULE_tableExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 380;
        this.tableReference();
        this.state = 385;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 381;
            this.match(FlinkSqlParser.COMMA);
            this.state = 382;
            this.tableReference();
            this.state = 387;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_tableReference;
    return this;
}

TableReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableReferenceContext.prototype.constructor = TableReferenceContext;

TableReferenceContext.prototype.tablePrimary = function() {
    return this.getTypedRuleContext(TablePrimaryContext,0);
};

TableReferenceContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

TableReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTableReference(this);
	}
};

TableReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTableReference(this);
	}
};

TableReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTableReference(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.TableReferenceContext = TableReferenceContext;

FlinkSqlParser.prototype.tableReference = function() {

    var localctx = new TableReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, FlinkSqlParser.RULE_tableReference);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 388;
        this.tablePrimary();
        this.state = 389;
        this.tableAlias();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablePrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_tablePrimary;
    return this;
}

TablePrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePrimaryContext.prototype.constructor = TablePrimaryContext;

TablePrimaryContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

TablePrimaryContext.prototype.TABLE = function() {
    return this.getToken(FlinkSqlParser.TABLE, 0);
};

TablePrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTablePrimary(this);
	}
};

TablePrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTablePrimary(this);
	}
};

TablePrimaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTablePrimary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.TablePrimaryContext = TablePrimaryContext;

FlinkSqlParser.prototype.tablePrimary = function() {

    var localctx = new TablePrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, FlinkSqlParser.RULE_tablePrimary);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 392;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.TABLE) {
            this.state = 391;
            this.match(FlinkSqlParser.TABLE);
        }

        this.state = 394;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitExpression(this);
	}
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ExpressionContext = ExpressionContext;

FlinkSqlParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, FlinkSqlParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 396;
        this.booleanExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_booleanExpression;
    return this;
}

BooleanExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanExpressionContext.prototype.constructor = BooleanExpressionContext;


 
BooleanExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LogicalNotContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalNotContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalNotContext.prototype.constructor = LogicalNotContext;

FlinkSqlParser.LogicalNotContext = LogicalNotContext;

LogicalNotContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParser.NOT, 0);
};

LogicalNotContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};
LogicalNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLogicalNot(this);
	}
};

LogicalNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLogicalNot(this);
	}
};

LogicalNotContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLogicalNot(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PredicatedContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PredicatedContext.prototype = Object.create(BooleanExpressionContext.prototype);
PredicatedContext.prototype.constructor = PredicatedContext;

FlinkSqlParser.PredicatedContext = PredicatedContext;

PredicatedContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

PredicatedContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};
PredicatedContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterPredicated(this);
	}
};

PredicatedContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitPredicated(this);
	}
};

PredicatedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitPredicated(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LogicalBinaryContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    this.left = null; // BooleanExpressionContext;
    this.operator = null; // Token;
    this.right = null; // BooleanExpressionContext;
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalBinaryContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalBinaryContext.prototype.constructor = LogicalBinaryContext;

FlinkSqlParser.LogicalBinaryContext = LogicalBinaryContext;

LogicalBinaryContext.prototype.booleanExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanExpressionContext,i);
    }
};

LogicalBinaryContext.prototype.AND = function() {
    return this.getToken(FlinkSqlParser.AND, 0);
};

LogicalBinaryContext.prototype.OR = function() {
    return this.getToken(FlinkSqlParser.OR, 0);
};
LogicalBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLogicalBinary(this);
	}
};

LogicalBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLogicalBinary(this);
	}
};

LogicalBinaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLogicalBinary(this);
    } else {
        return visitor.visitChildren(this);
    }
};



FlinkSqlParser.prototype.booleanExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 76;
    this.enterRecursionRule(localctx, 76, FlinkSqlParser.RULE_booleanExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 405;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LogicalNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 399;
            this.match(FlinkSqlParser.NOT);
            this.state = 400;
            this.booleanExpression(4);
            break;

        case 2:
            localctx = new PredicatedContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 401;
            this.valueExpression(0);
            this.state = 403;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
            if(la_===1) {
                this.state = 402;
                this.predicate();

            }
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 415;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 413;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_booleanExpression);
                    this.state = 407;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 408;
                    localctx.operator = this.match(FlinkSqlParser.AND);
                    this.state = 409;
                    localctx.right = this.booleanExpression(3);
                    break;

                case 2:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_booleanExpression);
                    this.state = 410;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 411;
                    localctx.operator = this.match(FlinkSqlParser.OR);
                    this.state = 412;
                    localctx.right = this.booleanExpression(2);
                    break;

                } 
            }
            this.state = 417;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_predicate;
    this.kind = null; // Token
    this.lower = null; // ValueExpressionContext
    this.upper = null; // ValueExpressionContext
    this.pattern = null; // ValueExpressionContext
    this.quantifier = null; // Token
    this.right = null; // ValueExpressionContext
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;

PredicateContext.prototype.AND = function() {
    return this.getToken(FlinkSqlParser.AND, 0);
};

PredicateContext.prototype.BETWEEN = function() {
    return this.getToken(FlinkSqlParser.BETWEEN, 0);
};

PredicateContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

PredicateContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParser.NOT, 0);
};

PredicateContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

PredicateContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PredicateContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

PredicateContext.prototype.IN = function() {
    return this.getToken(FlinkSqlParser.IN, 0);
};

PredicateContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


PredicateContext.prototype.RLIKE = function() {
    return this.getToken(FlinkSqlParser.RLIKE, 0);
};

PredicateContext.prototype.LIKE = function() {
    return this.getToken(FlinkSqlParser.LIKE, 0);
};

PredicateContext.prototype.ANY = function() {
    return this.getToken(FlinkSqlParser.ANY, 0);
};

PredicateContext.prototype.ALL = function() {
    return this.getToken(FlinkSqlParser.ALL, 0);
};

PredicateContext.prototype.IS = function() {
    return this.getToken(FlinkSqlParser.IS, 0);
};

PredicateContext.prototype.NULL = function() {
    return this.getToken(FlinkSqlParser.NULL, 0);
};

PredicateContext.prototype.TRUE = function() {
    return this.getToken(FlinkSqlParser.TRUE, 0);
};

PredicateContext.prototype.FALSE = function() {
    return this.getToken(FlinkSqlParser.FALSE, 0);
};

PredicateContext.prototype.FROM = function() {
    return this.getToken(FlinkSqlParser.FROM, 0);
};

PredicateContext.prototype.DISTINCT = function() {
    return this.getToken(FlinkSqlParser.DISTINCT, 0);
};

PredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterPredicate(this);
	}
};

PredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitPredicate(this);
	}
};

PredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.PredicateContext = PredicateContext;

FlinkSqlParser.prototype.predicate = function() {

    var localctx = new PredicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, FlinkSqlParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.state = 488;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 419;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 418;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 421;
            localctx.kind = this.match(FlinkSqlParser.BETWEEN);
            this.state = 422;
            localctx.lower = this.valueExpression(0);
            this.state = 423;
            this.match(FlinkSqlParser.AND);
            this.state = 424;
            localctx.upper = this.valueExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 427;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 426;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 429;
            localctx.kind = this.match(FlinkSqlParser.IN);
            this.state = 430;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 431;
            this.expression();
            this.state = 436;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParser.COMMA) {
                this.state = 432;
                this.match(FlinkSqlParser.COMMA);
                this.state = 433;
                this.expression();
                this.state = 438;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 439;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 442;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 441;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 444;
            localctx.kind = this.match(FlinkSqlParser.RLIKE);
            this.state = 445;
            localctx.pattern = this.valueExpression(0);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 447;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 446;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 449;
            localctx.kind = this.match(FlinkSqlParser.LIKE);
            this.state = 450;
            localctx.quantifier = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.ALL || _la===FlinkSqlParser.ANY)) {
                localctx.quantifier = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 464;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
            switch(la_) {
            case 1:
                this.state = 451;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 452;
                this.match(FlinkSqlParser.RR_BRACKET);
                break;

            case 2:
                this.state = 453;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 454;
                this.expression();
                this.state = 459;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===FlinkSqlParser.COMMA) {
                    this.state = 455;
                    this.match(FlinkSqlParser.COMMA);
                    this.state = 456;
                    this.expression();
                    this.state = 461;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 462;
                this.match(FlinkSqlParser.RR_BRACKET);
                break;

            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 467;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 466;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 469;
            localctx.kind = this.match(FlinkSqlParser.LIKE);
            this.state = 470;
            localctx.pattern = this.valueExpression(0);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 471;
            this.match(FlinkSqlParser.IS);
            this.state = 473;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 472;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 475;
            localctx.kind = this.match(FlinkSqlParser.NULL);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 476;
            this.match(FlinkSqlParser.IS);
            this.state = 478;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 477;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 480;
            localctx.kind = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.TRUE || _la===FlinkSqlParser.FALSE)) {
                localctx.kind = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 481;
            this.match(FlinkSqlParser.IS);
            this.state = 483;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 482;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 485;
            localctx.kind = this.match(FlinkSqlParser.DISTINCT);
            this.state = 486;
            this.match(FlinkSqlParser.FROM);
            this.state = 487;
            localctx.right = this.valueExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_valueExpression;
    return this;
}

ValueExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueExpressionContext.prototype.constructor = ValueExpressionContext;


 
ValueExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ValueExpressionDefaultContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValueExpressionDefaultContext.prototype = Object.create(ValueExpressionContext.prototype);
ValueExpressionDefaultContext.prototype.constructor = ValueExpressionDefaultContext;

FlinkSqlParser.ValueExpressionDefaultContext = ValueExpressionDefaultContext;

ValueExpressionDefaultContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};
ValueExpressionDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterValueExpressionDefault(this);
	}
};

ValueExpressionDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitValueExpressionDefault(this);
	}
};

ValueExpressionDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitValueExpressionDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ComparisonContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComparisonContext.prototype = Object.create(ValueExpressionContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

FlinkSqlParser.ComparisonContext = ComparisonContext;

ComparisonContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

ComparisonContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};
ComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterComparison(this);
	}
};

ComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitComparison(this);
	}
};

ComparisonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitComparison(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArithmeticBinaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.operator = null; // Token;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticBinaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticBinaryContext.prototype.constructor = ArithmeticBinaryContext;

FlinkSqlParser.ArithmeticBinaryContext = ArithmeticBinaryContext;

ArithmeticBinaryContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

ArithmeticBinaryContext.prototype.ASTERISK = function() {
    return this.getToken(FlinkSqlParser.ASTERISK, 0);
};

ArithmeticBinaryContext.prototype.SLASH = function() {
    return this.getToken(FlinkSqlParser.SLASH, 0);
};

ArithmeticBinaryContext.prototype.PERCENT = function() {
    return this.getToken(FlinkSqlParser.PERCENT, 0);
};

ArithmeticBinaryContext.prototype.DIV = function() {
    return this.getToken(FlinkSqlParser.DIV, 0);
};

ArithmeticBinaryContext.prototype.PLUS = function() {
    return this.getToken(FlinkSqlParser.PLUS, 0);
};

ArithmeticBinaryContext.prototype.MINUS = function() {
    return this.getToken(FlinkSqlParser.MINUS, 0);
};

ArithmeticBinaryContext.prototype.CONCAT_PIPE = function() {
    return this.getToken(FlinkSqlParser.CONCAT_PIPE, 0);
};

ArithmeticBinaryContext.prototype.AMPERSAND = function() {
    return this.getToken(FlinkSqlParser.AMPERSAND, 0);
};

ArithmeticBinaryContext.prototype.HAT = function() {
    return this.getToken(FlinkSqlParser.HAT, 0);
};

ArithmeticBinaryContext.prototype.PIPE = function() {
    return this.getToken(FlinkSqlParser.PIPE, 0);
};
ArithmeticBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterArithmeticBinary(this);
	}
};

ArithmeticBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitArithmeticBinary(this);
	}
};

ArithmeticBinaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitArithmeticBinary(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArithmeticUnaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.operator = null; // Token;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticUnaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticUnaryContext.prototype.constructor = ArithmeticUnaryContext;

FlinkSqlParser.ArithmeticUnaryContext = ArithmeticUnaryContext;

ArithmeticUnaryContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

ArithmeticUnaryContext.prototype.MINUS = function() {
    return this.getToken(FlinkSqlParser.MINUS, 0);
};

ArithmeticUnaryContext.prototype.PLUS = function() {
    return this.getToken(FlinkSqlParser.PLUS, 0);
};

ArithmeticUnaryContext.prototype.TILDE = function() {
    return this.getToken(FlinkSqlParser.TILDE, 0);
};
ArithmeticUnaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterArithmeticUnary(this);
	}
};

ArithmeticUnaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitArithmeticUnary(this);
	}
};

ArithmeticUnaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitArithmeticUnary(this);
    } else {
        return visitor.visitChildren(this);
    }
};



FlinkSqlParser.prototype.valueExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ValueExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 80;
    this.enterRecursionRule(localctx, 80, FlinkSqlParser.RULE_valueExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 494;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.NOT:
        case FlinkSqlParser.TRUE:
        case FlinkSqlParser.FALSE:
        case FlinkSqlParser.CASE:
        case FlinkSqlParser.FIRST:
        case FlinkSqlParser.LAST:
        case FlinkSqlParser.POSITION:
        case FlinkSqlParser.ASTERISK:
        case FlinkSqlParser.NULL:
        case FlinkSqlParser.LR_BRACKET:
        case FlinkSqlParser.ZERO_DECIMAL:
        case FlinkSqlParser.ONE_DECIMAL:
        case FlinkSqlParser.TWO_DECIMAL:
        case FlinkSqlParser.HYPNEN_SIGN:
        case FlinkSqlParser.STRING_LITERAL:
        case FlinkSqlParser.DECIMAL_LITERAL:
        case FlinkSqlParser.REAL_LITERAL:
        case FlinkSqlParser.BIT_STRING:
            localctx = new ValueExpressionDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 491;
            this.primaryExpression(0);
            break;
        case FlinkSqlParser.PLUS:
        case FlinkSqlParser.MINUS:
        case FlinkSqlParser.TILDE:
            localctx = new ArithmeticUnaryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 492;
            localctx.operator = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (FlinkSqlParser.PLUS - 128)) | (1 << (FlinkSqlParser.MINUS - 128)) | (1 << (FlinkSqlParser.TILDE - 128)))) !== 0))) {
                localctx.operator = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 493;
            this.valueExpression(7);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 517;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 515;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                    this.state = 496;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 497;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (FlinkSqlParser.ASTERISK - 130)) | (1 << (FlinkSqlParser.SLASH - 130)) | (1 << (FlinkSqlParser.PERCENT - 130)) | (1 << (FlinkSqlParser.DIV - 130)))) !== 0))) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 498;
                    localctx.right = this.valueExpression(7);
                    break;

                case 2:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                    this.state = 499;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 500;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (FlinkSqlParser.PLUS - 128)) | (1 << (FlinkSqlParser.MINUS - 128)) | (1 << (FlinkSqlParser.CONCAT_PIPE - 128)))) !== 0))) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 501;
                    localctx.right = this.valueExpression(6);
                    break;

                case 3:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                    this.state = 502;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 503;
                    localctx.operator = this.match(FlinkSqlParser.AMPERSAND);
                    this.state = 504;
                    localctx.right = this.valueExpression(5);
                    break;

                case 4:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                    this.state = 505;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 506;
                    localctx.operator = this.match(FlinkSqlParser.HAT);
                    this.state = 507;
                    localctx.right = this.valueExpression(4);
                    break;

                case 5:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                    this.state = 508;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 509;
                    localctx.operator = this.match(FlinkSqlParser.PIPE);
                    this.state = 510;
                    localctx.right = this.valueExpression(3);
                    break;

                case 6:
                    localctx = new ComparisonContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                    this.state = 511;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 512;
                    this.comparisonOperator();
                    this.state = 513;
                    localctx.right = this.valueExpression(2);
                    break;

                } 
            }
            this.state = 519;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;


 
PrimaryExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function SimpleCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.value = null; // ExpressionContext;
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SimpleCaseContext.prototype.constructor = SimpleCaseContext;

FlinkSqlParser.SimpleCaseContext = SimpleCaseContext;

SimpleCaseContext.prototype.CASE = function() {
    return this.getToken(FlinkSqlParser.CASE, 0);
};

SimpleCaseContext.prototype.END = function() {
    return this.getToken(FlinkSqlParser.END, 0);
};

SimpleCaseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SimpleCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SimpleCaseContext.prototype.ELSE = function() {
    return this.getToken(FlinkSqlParser.ELSE, 0);
};
SimpleCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSimpleCase(this);
	}
};

SimpleCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSimpleCase(this);
	}
};

SimpleCaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSimpleCase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConstantDefaultContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstantDefaultContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ConstantDefaultContext.prototype.constructor = ConstantDefaultContext;

FlinkSqlParser.ConstantDefaultContext = ConstantDefaultContext;

ConstantDefaultContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};
ConstantDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterConstantDefault(this);
	}
};

ConstantDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitConstantDefault(this);
	}
};

ConstantDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitConstantDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ParenthesizedExpressionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

FlinkSqlParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

ParenthesizedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParenthesizedExpressionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};
ParenthesizedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterParenthesizedExpression(this);
	}
};

ParenthesizedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitParenthesizedExpression(this);
	}
};

ParenthesizedExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitParenthesizedExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LastContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LastContext.prototype = Object.create(PrimaryExpressionContext.prototype);
LastContext.prototype.constructor = LastContext;

FlinkSqlParser.LastContext = LastContext;

LastContext.prototype.LAST = function() {
    return this.getToken(FlinkSqlParser.LAST, 0);
};

LastContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

LastContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

LastContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

LastContext.prototype.IGNORE = function() {
    return this.getToken(FlinkSqlParser.IGNORE, 0);
};

LastContext.prototype.NULLS = function() {
    return this.getToken(FlinkSqlParser.NULLS, 0);
};
LastContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLast(this);
	}
};

LastContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLast(this);
	}
};

LastContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLast(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function StarContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StarContext.prototype = Object.create(PrimaryExpressionContext.prototype);
StarContext.prototype.constructor = StarContext;

FlinkSqlParser.StarContext = StarContext;

StarContext.prototype.ASTERISK = function() {
    return this.getToken(FlinkSqlParser.ASTERISK, 0);
};
StarContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterStar(this);
	}
};

StarContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitStar(this);
	}
};

StarContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitStar(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SubscriptContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.value = null; // PrimaryExpressionContext;
    this.index = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubscriptContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubscriptContext.prototype.constructor = SubscriptContext;

FlinkSqlParser.SubscriptContext = SubscriptContext;

SubscriptContext.prototype.LS_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LS_BRACKET, 0);
};

SubscriptContext.prototype.RS_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RS_BRACKET, 0);
};

SubscriptContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

SubscriptContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
SubscriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSubscript(this);
	}
};

SubscriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSubscript(this);
	}
};

SubscriptContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSubscript(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SearchedCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SearchedCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SearchedCaseContext.prototype.constructor = SearchedCaseContext;

FlinkSqlParser.SearchedCaseContext = SearchedCaseContext;

SearchedCaseContext.prototype.CASE = function() {
    return this.getToken(FlinkSqlParser.CASE, 0);
};

SearchedCaseContext.prototype.END = function() {
    return this.getToken(FlinkSqlParser.END, 0);
};

SearchedCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SearchedCaseContext.prototype.ELSE = function() {
    return this.getToken(FlinkSqlParser.ELSE, 0);
};

SearchedCaseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SearchedCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSearchedCase(this);
	}
};

SearchedCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSearchedCase(this);
	}
};

SearchedCaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSearchedCase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PositionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.substr = null; // ValueExpressionContext;
    this.str = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PositionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
PositionContext.prototype.constructor = PositionContext;

FlinkSqlParser.PositionContext = PositionContext;

PositionContext.prototype.POSITION = function() {
    return this.getToken(FlinkSqlParser.POSITION, 0);
};

PositionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

PositionContext.prototype.IN = function() {
    return this.getToken(FlinkSqlParser.IN, 0);
};

PositionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

PositionContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};
PositionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterPosition(this);
	}
};

PositionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitPosition(this);
	}
};

PositionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitPosition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FirstContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FirstContext.prototype = Object.create(PrimaryExpressionContext.prototype);
FirstContext.prototype.constructor = FirstContext;

FlinkSqlParser.FirstContext = FirstContext;

FirstContext.prototype.FIRST = function() {
    return this.getToken(FlinkSqlParser.FIRST, 0);
};

FirstContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

FirstContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FirstContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

FirstContext.prototype.IGNORE = function() {
    return this.getToken(FlinkSqlParser.IGNORE, 0);
};

FirstContext.prototype.NULLS = function() {
    return this.getToken(FlinkSqlParser.NULLS, 0);
};
FirstContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterFirst(this);
	}
};

FirstContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitFirst(this);
	}
};

FirstContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitFirst(this);
    } else {
        return visitor.visitChildren(this);
    }
};



FlinkSqlParser.prototype.primaryExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PrimaryExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 82;
    this.enterRecursionRule(localctx, 82, FlinkSqlParser.RULE_primaryExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 577;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SearchedCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 521;
            this.match(FlinkSqlParser.CASE);
            this.state = 523; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 522;
                this.whenClause();
                this.state = 525; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===FlinkSqlParser.WHEN);
            this.state = 529;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.ELSE) {
                this.state = 527;
                this.match(FlinkSqlParser.ELSE);
                this.state = 528;
                localctx.elseExpression = this.expression();
            }

            this.state = 531;
            this.match(FlinkSqlParser.END);
            break;

        case 2:
            localctx = new SimpleCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 533;
            this.match(FlinkSqlParser.CASE);
            this.state = 534;
            localctx.value = this.expression();
            this.state = 536; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 535;
                this.whenClause();
                this.state = 538; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===FlinkSqlParser.WHEN);
            this.state = 542;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.ELSE) {
                this.state = 540;
                this.match(FlinkSqlParser.ELSE);
                this.state = 541;
                localctx.elseExpression = this.expression();
            }

            this.state = 544;
            this.match(FlinkSqlParser.END);
            break;

        case 3:
            localctx = new FirstContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 546;
            this.match(FlinkSqlParser.FIRST);
            this.state = 547;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 548;
            this.expression();
            this.state = 551;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.IGNORE) {
                this.state = 549;
                this.match(FlinkSqlParser.IGNORE);
                this.state = 550;
                this.match(FlinkSqlParser.NULLS);
            }

            this.state = 553;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 4:
            localctx = new LastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 555;
            this.match(FlinkSqlParser.LAST);
            this.state = 556;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 557;
            this.expression();
            this.state = 560;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.IGNORE) {
                this.state = 558;
                this.match(FlinkSqlParser.IGNORE);
                this.state = 559;
                this.match(FlinkSqlParser.NULLS);
            }

            this.state = 562;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 5:
            localctx = new PositionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 564;
            this.match(FlinkSqlParser.POSITION);
            this.state = 565;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 566;
            localctx.substr = this.valueExpression(0);
            this.state = 567;
            this.match(FlinkSqlParser.IN);
            this.state = 568;
            localctx.str = this.valueExpression(0);
            this.state = 569;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 6:
            localctx = new ConstantDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 571;
            this.constant();
            break;

        case 7:
            localctx = new StarContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 572;
            this.match(FlinkSqlParser.ASTERISK);
            break;

        case 8:
            localctx = new ParenthesizedExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 573;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 574;
            this.expression();
            this.state = 575;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 586;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SubscriptContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                localctx.value = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_primaryExpression);
                this.state = 579;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 580;
                this.match(FlinkSqlParser.LS_BRACKET);
                this.state = 581;
                localctx.index = this.valueExpression(0);
                this.state = 582;
                this.match(FlinkSqlParser.RS_BRACKET); 
            }
            this.state = 588;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function TableAliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_tableAlias;
    return this;
}

TableAliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableAliasContext.prototype.constructor = TableAliasContext;

TableAliasContext.prototype.strictIdentifier = function() {
    return this.getTypedRuleContext(StrictIdentifierContext,0);
};

TableAliasContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

TableAliasContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

TableAliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTableAlias(this);
	}
};

TableAliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTableAlias(this);
	}
};

TableAliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTableAlias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.TableAliasContext = TableAliasContext;

FlinkSqlParser.prototype.tableAlias = function() {

    var localctx = new TableAliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, FlinkSqlParser.RULE_tableAlias);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 596;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.AS || _la===FlinkSqlParser.STRING_LITERAL || _la===FlinkSqlParser.IDENTIFIER_BASE) {
            this.state = 590;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.AS) {
                this.state = 589;
                this.match(FlinkSqlParser.AS);
            }

            this.state = 592;
            this.strictIdentifier();
            this.state = 594;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.LR_BRACKET) {
                this.state = 593;
                this.identifierList();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_identifierList;
    return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

IdentifierListContext.prototype.identifierSeq = function() {
    return this.getTypedRuleContext(IdentifierSeqContext,0);
};

IdentifierListContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

IdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterIdentifierList(this);
	}
};

IdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitIdentifierList(this);
	}
};

IdentifierListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitIdentifierList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.IdentifierListContext = IdentifierListContext;

FlinkSqlParser.prototype.identifierList = function() {

    var localctx = new IdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, FlinkSqlParser.RULE_identifierList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 598;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 599;
        this.identifierSeq();
        this.state = 600;
        this.match(FlinkSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierSeqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_identifierSeq;
    return this;
}

IdentifierSeqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierSeqContext.prototype.constructor = IdentifierSeqContext;

IdentifierSeqContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

IdentifierSeqContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


IdentifierSeqContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterIdentifierSeq(this);
	}
};

IdentifierSeqContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitIdentifierSeq(this);
	}
};

IdentifierSeqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitIdentifierSeq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.IdentifierSeqContext = IdentifierSeqContext;

FlinkSqlParser.prototype.identifierSeq = function() {

    var localctx = new IdentifierSeqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, FlinkSqlParser.RULE_identifierSeq);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 602;
        this.identifier();
        this.state = 607;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 603;
            this.match(FlinkSqlParser.COMMA);
            this.state = 604;
            this.identifier();
            this.state = 609;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.strictIdentifier = function() {
    return this.getTypedRuleContext(StrictIdentifierContext,0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitIdentifier(this);
	}
};

IdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.IdentifierContext = IdentifierContext;

FlinkSqlParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, FlinkSqlParser.RULE_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 610;
        this.strictIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StrictIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_strictIdentifier;
    return this;
}

StrictIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StrictIdentifierContext.prototype.constructor = StrictIdentifierContext;


 
StrictIdentifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QuotedIdentifierAlternativeContext(parser, ctx) {
	StrictIdentifierContext.call(this, parser);
    StrictIdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuotedIdentifierAlternativeContext.prototype = Object.create(StrictIdentifierContext.prototype);
QuotedIdentifierAlternativeContext.prototype.constructor = QuotedIdentifierAlternativeContext;

FlinkSqlParser.QuotedIdentifierAlternativeContext = QuotedIdentifierAlternativeContext;

QuotedIdentifierAlternativeContext.prototype.quotedIdentifier = function() {
    return this.getTypedRuleContext(QuotedIdentifierContext,0);
};
QuotedIdentifierAlternativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterQuotedIdentifierAlternative(this);
	}
};

QuotedIdentifierAlternativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitQuotedIdentifierAlternative(this);
	}
};

QuotedIdentifierAlternativeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitQuotedIdentifierAlternative(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnquotedIdentifierContext(parser, ctx) {
	StrictIdentifierContext.call(this, parser);
    StrictIdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnquotedIdentifierContext.prototype = Object.create(StrictIdentifierContext.prototype);
UnquotedIdentifierContext.prototype.constructor = UnquotedIdentifierContext;

FlinkSqlParser.UnquotedIdentifierContext = UnquotedIdentifierContext;

UnquotedIdentifierContext.prototype.IDENTIFIER_BASE = function() {
    return this.getToken(FlinkSqlParser.IDENTIFIER_BASE, 0);
};
UnquotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUnquotedIdentifier(this);
	}
};

UnquotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUnquotedIdentifier(this);
	}
};

UnquotedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUnquotedIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};



FlinkSqlParser.StrictIdentifierContext = StrictIdentifierContext;

FlinkSqlParser.prototype.strictIdentifier = function() {

    var localctx = new StrictIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, FlinkSqlParser.RULE_strictIdentifier);
    try {
        this.state = 614;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.IDENTIFIER_BASE:
            localctx = new UnquotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 612;
            this.match(FlinkSqlParser.IDENTIFIER_BASE);
            break;
        case FlinkSqlParser.STRING_LITERAL:
            localctx = new QuotedIdentifierAlternativeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 613;
            this.quotedIdentifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuotedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_quotedIdentifier;
    return this;
}

QuotedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuotedIdentifierContext.prototype.constructor = QuotedIdentifierContext;

QuotedIdentifierContext.prototype.STRING_LITERAL = function() {
    return this.getToken(FlinkSqlParser.STRING_LITERAL, 0);
};

QuotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterQuotedIdentifier(this);
	}
};

QuotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitQuotedIdentifier(this);
	}
};

QuotedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitQuotedIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.QuotedIdentifierContext = QuotedIdentifierContext;

FlinkSqlParser.prototype.quotedIdentifier = function() {

    var localctx = new QuotedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, FlinkSqlParser.RULE_quotedIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 616;
        this.match(FlinkSqlParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhenClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_whenClause;
    this.condition = null; // ExpressionContext
    this.result = null; // ExpressionContext
    return this;
}

WhenClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenClauseContext.prototype.constructor = WhenClauseContext;

WhenClauseContext.prototype.WHEN = function() {
    return this.getToken(FlinkSqlParser.WHEN, 0);
};

WhenClauseContext.prototype.THEN = function() {
    return this.getToken(FlinkSqlParser.THEN, 0);
};

WhenClauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

WhenClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterWhenClause(this);
	}
};

WhenClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitWhenClause(this);
	}
};

WhenClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitWhenClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.WhenClauseContext = WhenClauseContext;

FlinkSqlParser.prototype.whenClause = function() {

    var localctx = new WhenClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, FlinkSqlParser.RULE_whenClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 618;
        this.match(FlinkSqlParser.WHEN);
        this.state = 619;
        localctx.condition = this.expression();
        this.state = 620;
        this.match(FlinkSqlParser.THEN);
        this.state = 621;
        localctx.result = this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UidListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_uidList;
    return this;
}

UidListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UidListContext.prototype.constructor = UidListContext;

UidListContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

UidListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


UidListContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUidList(this);
	}
};

UidListContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUidList(this);
	}
};

UidListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUidList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.UidListContext = UidListContext;

FlinkSqlParser.prototype.uidList = function() {

    var localctx = new UidListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, FlinkSqlParser.RULE_uidList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 623;
        this.uid();
        this.state = 628;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 624;
            this.match(FlinkSqlParser.COMMA);
            this.state = 625;
            this.uid();
            this.state = 630;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_uid;
    return this;
}

UidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UidContext.prototype.constructor = UidContext;

UidContext.prototype.ID = function() {
    return this.getToken(FlinkSqlParser.ID, 0);
};

UidContext.prototype.DOT_ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.DOT_ID);
    } else {
        return this.getToken(FlinkSqlParser.DOT_ID, i);
    }
};


UidContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUid(this);
	}
};

UidContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUid(this);
	}
};

UidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.UidContext = UidContext;

FlinkSqlParser.prototype.uid = function() {

    var localctx = new UidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, FlinkSqlParser.RULE_uid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 631;
        this.match(FlinkSqlParser.ID);
        this.state = 635;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,67,this._ctx)
        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1+1) {
                this.state = 632;
                this.match(FlinkSqlParser.DOT_ID); 
            }
            this.state = 637;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,67,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_withOption;
    return this;
}

WithOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithOptionContext.prototype.constructor = WithOptionContext;

WithOptionContext.prototype.WITH = function() {
    return this.getToken(FlinkSqlParser.WITH, 0);
};

WithOptionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

WithOptionContext.prototype.keyValueDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeyValueDefinitionContext);
    } else {
        return this.getTypedRuleContext(KeyValueDefinitionContext,i);
    }
};

WithOptionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

WithOptionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


WithOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterWithOption(this);
	}
};

WithOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitWithOption(this);
	}
};

WithOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitWithOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.WithOptionContext = WithOptionContext;

FlinkSqlParser.prototype.withOption = function() {

    var localctx = new WithOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, FlinkSqlParser.RULE_withOption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 638;
        this.match(FlinkSqlParser.WITH);
        this.state = 639;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 640;
        this.keyValueDefinition();
        this.state = 645;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 641;
            this.match(FlinkSqlParser.COMMA);
            this.state = 642;
            this.keyValueDefinition();
            this.state = 647;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 648;
        this.match(FlinkSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfNotExistsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_ifNotExists;
    return this;
}

IfNotExistsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfNotExistsContext.prototype.constructor = IfNotExistsContext;

IfNotExistsContext.prototype.IF = function() {
    return this.getToken(FlinkSqlParser.IF, 0);
};

IfNotExistsContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParser.NOT, 0);
};

IfNotExistsContext.prototype.EXISTS = function() {
    return this.getToken(FlinkSqlParser.EXISTS, 0);
};

IfNotExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterIfNotExists(this);
	}
};

IfNotExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitIfNotExists(this);
	}
};

IfNotExistsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitIfNotExists(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.IfNotExistsContext = IfNotExistsContext;

FlinkSqlParser.prototype.ifNotExists = function() {

    var localctx = new IfNotExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, FlinkSqlParser.RULE_ifNotExists);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 650;
        this.match(FlinkSqlParser.IF);
        this.state = 651;
        this.match(FlinkSqlParser.NOT);
        this.state = 652;
        this.match(FlinkSqlParser.EXISTS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfExistsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_ifExists;
    return this;
}

IfExistsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfExistsContext.prototype.constructor = IfExistsContext;

IfExistsContext.prototype.IF = function() {
    return this.getToken(FlinkSqlParser.IF, 0);
};

IfExistsContext.prototype.EXISTS = function() {
    return this.getToken(FlinkSqlParser.EXISTS, 0);
};

IfExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterIfExists(this);
	}
};

IfExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitIfExists(this);
	}
};

IfExistsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitIfExists(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.IfExistsContext = IfExistsContext;

FlinkSqlParser.prototype.ifExists = function() {

    var localctx = new IfExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, FlinkSqlParser.RULE_ifExists);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 654;
        this.match(FlinkSqlParser.IF);
        this.state = 655;
        this.match(FlinkSqlParser.EXISTS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeyValueDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_keyValueDefinition;
    return this;
}

KeyValueDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyValueDefinitionContext.prototype.constructor = KeyValueDefinitionContext;

KeyValueDefinitionContext.prototype.DOUBLE_QUOTE_ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.DOUBLE_QUOTE_ID);
    } else {
        return this.getToken(FlinkSqlParser.DOUBLE_QUOTE_ID, i);
    }
};


KeyValueDefinitionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.EQUAL_SYMBOL, 0);
};

KeyValueDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterKeyValueDefinition(this);
	}
};

KeyValueDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitKeyValueDefinition(this);
	}
};

KeyValueDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitKeyValueDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.KeyValueDefinitionContext = KeyValueDefinitionContext;

FlinkSqlParser.prototype.keyValueDefinition = function() {

    var localctx = new KeyValueDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, FlinkSqlParser.RULE_keyValueDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 657;
        this.match(FlinkSqlParser.DOUBLE_QUOTE_ID);
        this.state = 658;
        this.match(FlinkSqlParser.EQUAL_SYMBOL);
        this.state = 659;
        this.match(FlinkSqlParser.DOUBLE_QUOTE_ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LogicalOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_logicalOperator;
    return this;
}

LogicalOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalOperatorContext.prototype.constructor = LogicalOperatorContext;

LogicalOperatorContext.prototype.AND = function() {
    return this.getToken(FlinkSqlParser.AND, 0);
};

LogicalOperatorContext.prototype.BIT_AND_OP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.BIT_AND_OP);
    } else {
        return this.getToken(FlinkSqlParser.BIT_AND_OP, i);
    }
};


LogicalOperatorContext.prototype.OR = function() {
    return this.getToken(FlinkSqlParser.OR, 0);
};

LogicalOperatorContext.prototype.BIT_OR_OP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.BIT_OR_OP);
    } else {
        return this.getToken(FlinkSqlParser.BIT_OR_OP, i);
    }
};


LogicalOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLogicalOperator(this);
	}
};

LogicalOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLogicalOperator(this);
	}
};

LogicalOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLogicalOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.LogicalOperatorContext = LogicalOperatorContext;

FlinkSqlParser.prototype.logicalOperator = function() {

    var localctx = new LogicalOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, FlinkSqlParser.RULE_logicalOperator);
    try {
        this.state = 667;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.AND:
            this.enterOuterAlt(localctx, 1);
            this.state = 661;
            this.match(FlinkSqlParser.AND);
            break;
        case FlinkSqlParser.BIT_AND_OP:
            this.enterOuterAlt(localctx, 2);
            this.state = 662;
            this.match(FlinkSqlParser.BIT_AND_OP);
            this.state = 663;
            this.match(FlinkSqlParser.BIT_AND_OP);
            break;
        case FlinkSqlParser.OR:
            this.enterOuterAlt(localctx, 3);
            this.state = 664;
            this.match(FlinkSqlParser.OR);
            break;
        case FlinkSqlParser.BIT_OR_OP:
            this.enterOuterAlt(localctx, 4);
            this.state = 665;
            this.match(FlinkSqlParser.BIT_OR_OP);
            this.state = 666;
            this.match(FlinkSqlParser.BIT_OR_OP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparisonOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_comparisonOperator;
    return this;
}

ComparisonOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonOperatorContext.prototype.constructor = ComparisonOperatorContext;

ComparisonOperatorContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.EQUAL_SYMBOL, 0);
};

ComparisonOperatorContext.prototype.GREATER_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.GREATER_SYMBOL, 0);
};

ComparisonOperatorContext.prototype.LESS_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.LESS_SYMBOL, 0);
};

ComparisonOperatorContext.prototype.EXCLAMATION_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.EXCLAMATION_SYMBOL, 0);
};

ComparisonOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitComparisonOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ComparisonOperatorContext = ComparisonOperatorContext;

FlinkSqlParser.prototype.comparisonOperator = function() {

    var localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, FlinkSqlParser.RULE_comparisonOperator);
    try {
        this.state = 683;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 669;
            this.match(FlinkSqlParser.EQUAL_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 670;
            this.match(FlinkSqlParser.GREATER_SYMBOL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 671;
            this.match(FlinkSqlParser.LESS_SYMBOL);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 672;
            this.match(FlinkSqlParser.LESS_SYMBOL);
            this.state = 673;
            this.match(FlinkSqlParser.EQUAL_SYMBOL);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 674;
            this.match(FlinkSqlParser.GREATER_SYMBOL);
            this.state = 675;
            this.match(FlinkSqlParser.EQUAL_SYMBOL);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 676;
            this.match(FlinkSqlParser.LESS_SYMBOL);
            this.state = 677;
            this.match(FlinkSqlParser.GREATER_SYMBOL);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 678;
            this.match(FlinkSqlParser.EXCLAMATION_SYMBOL);
            this.state = 679;
            this.match(FlinkSqlParser.EQUAL_SYMBOL);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 680;
            this.match(FlinkSqlParser.LESS_SYMBOL);
            this.state = 681;
            this.match(FlinkSqlParser.EQUAL_SYMBOL);
            this.state = 682;
            this.match(FlinkSqlParser.GREATER_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BitOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_bitOperator;
    return this;
}

BitOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitOperatorContext.prototype.constructor = BitOperatorContext;

BitOperatorContext.prototype.LESS_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.LESS_SYMBOL);
    } else {
        return this.getToken(FlinkSqlParser.LESS_SYMBOL, i);
    }
};


BitOperatorContext.prototype.GREATER_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.GREATER_SYMBOL);
    } else {
        return this.getToken(FlinkSqlParser.GREATER_SYMBOL, i);
    }
};


BitOperatorContext.prototype.BIT_AND_OP = function() {
    return this.getToken(FlinkSqlParser.BIT_AND_OP, 0);
};

BitOperatorContext.prototype.BIT_XOR_OP = function() {
    return this.getToken(FlinkSqlParser.BIT_XOR_OP, 0);
};

BitOperatorContext.prototype.BIT_OR_OP = function() {
    return this.getToken(FlinkSqlParser.BIT_OR_OP, 0);
};

BitOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterBitOperator(this);
	}
};

BitOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitBitOperator(this);
	}
};

BitOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitBitOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.BitOperatorContext = BitOperatorContext;

FlinkSqlParser.prototype.bitOperator = function() {

    var localctx = new BitOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, FlinkSqlParser.RULE_bitOperator);
    try {
        this.state = 692;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.LESS_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 685;
            this.match(FlinkSqlParser.LESS_SYMBOL);
            this.state = 686;
            this.match(FlinkSqlParser.LESS_SYMBOL);
            break;
        case FlinkSqlParser.GREATER_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 687;
            this.match(FlinkSqlParser.GREATER_SYMBOL);
            this.state = 688;
            this.match(FlinkSqlParser.GREATER_SYMBOL);
            break;
        case FlinkSqlParser.BIT_AND_OP:
            this.enterOuterAlt(localctx, 3);
            this.state = 689;
            this.match(FlinkSqlParser.BIT_AND_OP);
            break;
        case FlinkSqlParser.BIT_XOR_OP:
            this.enterOuterAlt(localctx, 4);
            this.state = 690;
            this.match(FlinkSqlParser.BIT_XOR_OP);
            break;
        case FlinkSqlParser.BIT_OR_OP:
            this.enterOuterAlt(localctx, 5);
            this.state = 691;
            this.match(FlinkSqlParser.BIT_OR_OP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_mathOperator;
    return this;
}

MathOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathOperatorContext.prototype.constructor = MathOperatorContext;

MathOperatorContext.prototype.ASTERISK_SIGN = function() {
    return this.getToken(FlinkSqlParser.ASTERISK_SIGN, 0);
};

MathOperatorContext.prototype.SLASH_SIGN = function() {
    return this.getToken(FlinkSqlParser.SLASH_SIGN, 0);
};

MathOperatorContext.prototype.PENCENT_SIGN = function() {
    return this.getToken(FlinkSqlParser.PENCENT_SIGN, 0);
};

MathOperatorContext.prototype.DIV = function() {
    return this.getToken(FlinkSqlParser.DIV, 0);
};

MathOperatorContext.prototype.ADD_SIGN = function() {
    return this.getToken(FlinkSqlParser.ADD_SIGN, 0);
};

MathOperatorContext.prototype.HYPNEN_SIGN = function() {
    return this.getToken(FlinkSqlParser.HYPNEN_SIGN, 0);
};

MathOperatorContext.prototype.DOUBLE_HYPNEN_SIGN = function() {
    return this.getToken(FlinkSqlParser.DOUBLE_HYPNEN_SIGN, 0);
};

MathOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterMathOperator(this);
	}
};

MathOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitMathOperator(this);
	}
};

MathOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitMathOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.MathOperatorContext = MathOperatorContext;

FlinkSqlParser.prototype.mathOperator = function() {

    var localctx = new MathOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, FlinkSqlParser.RULE_mathOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 694;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParser.DIV || ((((_la - 308)) & ~0x1f) == 0 && ((1 << (_la - 308)) & ((1 << (FlinkSqlParser.ASTERISK_SIGN - 308)) | (1 << (FlinkSqlParser.HYPNEN_SIGN - 308)) | (1 << (FlinkSqlParser.ADD_SIGN - 308)) | (1 << (FlinkSqlParser.PENCENT_SIGN - 308)) | (1 << (FlinkSqlParser.DOUBLE_HYPNEN_SIGN - 308)) | (1 << (FlinkSqlParser.SLASH_SIGN - 308)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_unaryOperator;
    return this;
}

UnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOperatorContext.prototype.constructor = UnaryOperatorContext;

UnaryOperatorContext.prototype.EXCLAMATION_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.EXCLAMATION_SYMBOL, 0);
};

UnaryOperatorContext.prototype.BIT_NOT_OP = function() {
    return this.getToken(FlinkSqlParser.BIT_NOT_OP, 0);
};

UnaryOperatorContext.prototype.ADD_SIGN = function() {
    return this.getToken(FlinkSqlParser.ADD_SIGN, 0);
};

UnaryOperatorContext.prototype.HYPNEN_SIGN = function() {
    return this.getToken(FlinkSqlParser.HYPNEN_SIGN, 0);
};

UnaryOperatorContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParser.NOT, 0);
};

UnaryOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUnaryOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.UnaryOperatorContext = UnaryOperatorContext;

FlinkSqlParser.prototype.unaryOperator = function() {

    var localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, FlinkSqlParser.RULE_unaryOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 696;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParser.NOT || ((((_la - 288)) & ~0x1f) == 0 && ((1 << (_la - 288)) & ((1 << (FlinkSqlParser.EXCLAMATION_SYMBOL - 288)) | (1 << (FlinkSqlParser.BIT_NOT_OP - 288)) | (1 << (FlinkSqlParser.HYPNEN_SIGN - 288)) | (1 << (FlinkSqlParser.ADD_SIGN - 288)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FullColumnNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_fullColumnName;
    return this;
}

FullColumnNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FullColumnNameContext.prototype.constructor = FullColumnNameContext;

FullColumnNameContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

FullColumnNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterFullColumnName(this);
	}
};

FullColumnNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitFullColumnName(this);
	}
};

FullColumnNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitFullColumnName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.FullColumnNameContext = FullColumnNameContext;

FlinkSqlParser.prototype.fullColumnName = function() {

    var localctx = new FullColumnNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, FlinkSqlParser.RULE_fullColumnName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 698;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

ConstantContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

ConstantContext.prototype.HYPNEN_SIGN = function() {
    return this.getToken(FlinkSqlParser.HYPNEN_SIGN, 0);
};

ConstantContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

ConstantContext.prototype.REAL_LITERAL = function() {
    return this.getToken(FlinkSqlParser.REAL_LITERAL, 0);
};

ConstantContext.prototype.BIT_STRING = function() {
    return this.getToken(FlinkSqlParser.BIT_STRING, 0);
};

ConstantContext.prototype.NULL = function() {
    return this.getToken(FlinkSqlParser.NULL, 0);
};

ConstantContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParser.NOT, 0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitConstant(this);
	}
};

ConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ConstantContext = ConstantContext;

FlinkSqlParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, FlinkSqlParser.RULE_constant);
    var _la = 0; // Token type
    try {
        this.state = 711;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 700;
            this.stringLiteral();
            break;
        case FlinkSqlParser.ZERO_DECIMAL:
        case FlinkSqlParser.ONE_DECIMAL:
        case FlinkSqlParser.TWO_DECIMAL:
        case FlinkSqlParser.DECIMAL_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 701;
            this.decimalLiteral();
            break;
        case FlinkSqlParser.HYPNEN_SIGN:
            this.enterOuterAlt(localctx, 3);
            this.state = 702;
            this.match(FlinkSqlParser.HYPNEN_SIGN);
            this.state = 703;
            this.decimalLiteral();
            break;
        case FlinkSqlParser.TRUE:
        case FlinkSqlParser.FALSE:
            this.enterOuterAlt(localctx, 4);
            this.state = 704;
            this.booleanLiteral();
            break;
        case FlinkSqlParser.REAL_LITERAL:
            this.enterOuterAlt(localctx, 5);
            this.state = 705;
            this.match(FlinkSqlParser.REAL_LITERAL);
            break;
        case FlinkSqlParser.BIT_STRING:
            this.enterOuterAlt(localctx, 6);
            this.state = 706;
            this.match(FlinkSqlParser.BIT_STRING);
            break;
        case FlinkSqlParser.NOT:
        case FlinkSqlParser.NULL:
            this.enterOuterAlt(localctx, 7);
            this.state = 708;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 707;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 710;
            this.match(FlinkSqlParser.NULL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_stringLiteral;
    return this;
}

StringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

StringLiteralContext.prototype.STRING_LITERAL = function() {
    return this.getToken(FlinkSqlParser.STRING_LITERAL, 0);
};

StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitStringLiteral(this);
	}
};

StringLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitStringLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.StringLiteralContext = StringLiteralContext;

FlinkSqlParser.prototype.stringLiteral = function() {

    var localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, FlinkSqlParser.RULE_stringLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 713;
        this.match(FlinkSqlParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DecimalLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_decimalLiteral;
    return this;
}

DecimalLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

DecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(FlinkSqlParser.DECIMAL_LITERAL, 0);
};

DecimalLiteralContext.prototype.ZERO_DECIMAL = function() {
    return this.getToken(FlinkSqlParser.ZERO_DECIMAL, 0);
};

DecimalLiteralContext.prototype.ONE_DECIMAL = function() {
    return this.getToken(FlinkSqlParser.ONE_DECIMAL, 0);
};

DecimalLiteralContext.prototype.TWO_DECIMAL = function() {
    return this.getToken(FlinkSqlParser.TWO_DECIMAL, 0);
};

DecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDecimalLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DecimalLiteralContext = DecimalLiteralContext;

FlinkSqlParser.prototype.decimalLiteral = function() {

    var localctx = new DecimalLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, FlinkSqlParser.RULE_decimalLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 715;
        _la = this._input.LA(1);
        if(!(((((_la - 301)) & ~0x1f) == 0 && ((1 << (_la - 301)) & ((1 << (FlinkSqlParser.ZERO_DECIMAL - 301)) | (1 << (FlinkSqlParser.ONE_DECIMAL - 301)) | (1 << (FlinkSqlParser.TWO_DECIMAL - 301)) | (1 << (FlinkSqlParser.DECIMAL_LITERAL - 301)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_booleanLiteral;
    return this;
}

BooleanLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.TRUE = function() {
    return this.getToken(FlinkSqlParser.TRUE, 0);
};

BooleanLiteralContext.prototype.FALSE = function() {
    return this.getToken(FlinkSqlParser.FALSE, 0);
};

BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitBooleanLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.BooleanLiteralContext = BooleanLiteralContext;

FlinkSqlParser.prototype.booleanLiteral = function() {

    var localctx = new BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, FlinkSqlParser.RULE_booleanLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 717;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParser.TRUE || _la===FlinkSqlParser.FALSE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetQuantifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_setQuantifier;
    return this;
}

SetQuantifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetQuantifierContext.prototype.constructor = SetQuantifierContext;

SetQuantifierContext.prototype.DISTINCT = function() {
    return this.getToken(FlinkSqlParser.DISTINCT, 0);
};

SetQuantifierContext.prototype.ALL = function() {
    return this.getToken(FlinkSqlParser.ALL, 0);
};

SetQuantifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSetQuantifier(this);
	}
};

SetQuantifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSetQuantifier(this);
	}
};

SetQuantifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSetQuantifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SetQuantifierContext = SetQuantifierContext;

FlinkSqlParser.prototype.setQuantifier = function() {

    var localctx = new SetQuantifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, FlinkSqlParser.RULE_setQuantifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 719;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParser.ALL || _la===FlinkSqlParser.DISTINCT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


FlinkSqlParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 38:
			return this.booleanExpression_sempred(localctx, predIndex);
	case 40:
			return this.valueExpression_sempred(localctx, predIndex);
	case 41:
			return this.primaryExpression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

FlinkSqlParser.prototype.booleanExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

FlinkSqlParser.prototype.valueExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 6);
		case 3:
			return this.precpred(this._ctx, 5);
		case 4:
			return this.precpred(this._ctx, 4);
		case 5:
			return this.precpred(this._ctx, 3);
		case 6:
			return this.precpred(this._ctx, 2);
		case 7:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

FlinkSqlParser.prototype.primaryExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.FlinkSqlParser = FlinkSqlParser;
