// Generated from /Users/erindeng/Desktop/dt-sql-parser/src/grammar/flinksql/FlinkSqlParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var FlinkSqlParserListener = require('./FlinkSqlParserListener').FlinkSqlParserListener;
var FlinkSqlParserVisitor = require('./FlinkSqlParserVisitor').FlinkSqlParserVisitor;

var grammarFileName = "FlinkSqlParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0139\u035c\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0007",
    "\u0004\u009b\n\u0004\f\u0004\u000e\u0004\u009e\u000b\u0004\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u00a2\n\u0005\u0003\u0006\u0003\u0006\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u00b1",
    "\n\u0007\u0003\b\u0003\b\u0005\b\u00b5\n\b\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0007\t\u00be\n\t\f\t\u000e\t\u00c1\u000b",
    "\t\u0003\t\u0003\t\u0005\t\u00c5\n\t\u0003\t\u0003\t\u0003\n\u0003\n",
    "\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u00d7\n\u000e",
    "\f\u000e\u000e\u000e\u00da\u000b\u000e\u0003\u000f\u0003\u000f\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u00e1\n\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0005\u0011\u00e8\n",
    "\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u00ec\n\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u00f9\n",
    "\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0007\u0015\u0104\n\u0015",
    "\f\u0015\u000e\u0015\u0107\u000b\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003",
    "\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0115\n\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019",
    "\u011c\n\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0120\n\u0019\u0003",
    "\u001a\u0003\u001a\u0005\u001a\u0124\n\u001a\u0003\u001a\u0003\u001a",
    "\u0005\u001a\u0128\n\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0130\n\u001b\u0003\u001b",
    "\u0003\u001b\u0005\u001b\u0134\n\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u013b\n\u001c\u0003\u001c",
    "\u0005\u001c\u013e\n\u001c\u0003\u001c\u0005\u001c\u0141\n\u001c\u0003",
    "\u001c\u0005\u001c\u0144\n\u001c\u0005\u001c\u0146\n\u001c\u0003\u001d",
    "\u0003\u001d\u0005\u001d\u014a\n\u001d\u0003\u001e\u0003\u001e\u0005",
    "\u001e\u014e\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0007\u001e\u0154\n\u001e\f\u001e\u000e\u001e\u0157\u000b\u001e\u0005",
    "\u001e\u0159\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0005\u001e\u015f\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0007\u001e\u0166\n\u001e\f\u001e\u000e\u001e\u0169",
    "\u000b\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u016d\n\u001e\u0003",
    "\u001f\u0003\u001f\u0005\u001f\u0171\n\u001f\u0003\u001f\u0005\u001f",
    "\u0174\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005",
    "\u001f\u017a\n\u001f\u0003 \u0003 \u0003 \u0003 \u0007 \u0180\n \f ",
    "\u000e \u0183\u000b \u0003 \u0003 \u0005 \u0187\n \u0003 \u0005 \u018a",
    "\n \u0003 \u0003 \u0003 \u0005 \u018f\n \u0007 \u0191\n \f \u000e \u0194",
    "\u000b \u0003!\u0003!\u0005!\u0198\n!\u0003!\u0005!\u019b\n!\u0003!",
    "\u0003!\u0003!\u0003!\u0003!\u0007!\u01a2\n!\f!\u000e!\u01a5\u000b!",
    "\u0003!\u0003!\u0005!\u01a9\n!\u0005!\u01ab\n!\u0003\"\u0003\"\u0003",
    "#\u0005#\u01b0\n#\u0003#\u0003#\u0005#\u01b4\n#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0007#\u01be\n#\f#\u000e#\u01c1",
    "\u000b#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005",
    "#\u01cb\n#\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0007%\u01d6\n%\f%\u000e%\u01d9\u000b%\u0003%\u0003%\u0005%\u01dd",
    "\n%\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0007\'\u01e8\n\'\f\'\u000e\'\u01eb\u000b\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u01f4\n\'\f\'\u000e\'\u01f7",
    "\u000b\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0007",
    "\'\u0200\n\'\f\'\u000e\'\u0203\u000b\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u020d\n\'\f\'\u000e\'\u0210",
    "\u000b\'\u0003\'\u0003\'\u0005\'\u0214\n\'\u0003(\u0003(\u0005(\u0218",
    "\n(\u0003(\u0003(\u0003(\u0003(\u0007(\u021e\n(\f(\u000e(\u0221\u000b",
    "(\u0005(\u0223\n(\u0003)\u0003)\u0005)\u0227\n)\u0003)\u0005)\u022a",
    "\n)\u0003)\u0003)\u0003)\u0003)\u0005)\u0230\n)\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0007*\u0237\n*\f*\u000e*\u023a\u000b*\u0003+\u0003",
    "+\u0003+\u0003,\u0003,\u0003,\u0005,\u0242\n,\u0003-\u0003-\u0003.\u0003",
    ".\u0003/\u0003/\u00030\u00030\u00030\u00030\u00050\u024e\n0\u00030\u0003",
    "0\u00050\u0252\n0\u00031\u00031\u00031\u00031\u00031\u00071\u0259\n",
    "1\f1\u000e1\u025c\u000b1\u00031\u00031\u00032\u00032\u00032\u00032\u0007",
    "2\u0264\n2\f2\u000e2\u0267\u000b2\u00033\u00033\u00033\u00033\u0007",
    "3\u026d\n3\f3\u000e3\u0270\u000b3\u00033\u00033\u00034\u00034\u0003",
    "4\u00034\u00054\u0278\n4\u00035\u00035\u00035\u00075\u027d\n5\f5\u000e",
    "5\u0280\u000b5\u00036\u00036\u00076\u0284\n6\f6\u000e6\u0287\u000b6",
    "\u00037\u00037\u00037\u00037\u00037\u00077\u028e\n7\f7\u000e7\u0291",
    "\u000b7\u00037\u00037\u00038\u00038\u00038\u00038\u00039\u00039\u0003",
    "9\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0007;\u02a3\n;\f",
    ";\u000e;\u02a6\u000b;\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005",
    "<\u02ae\n<\u0003<\u0003<\u0003<\u0005<\u02b3\n<\u0003<\u0003<\u0003",
    "<\u0003<\u0007<\u02b9\n<\f<\u000e<\u02bc\u000b<\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0005=\u02c7\n=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0005=\u02d0\n=\u0003=\u0003=\u0003",
    "=\u0003=\u0005=\u02d6\n=\u0003=\u0003=\u0003=\u0003=\u0005=\u02dc\n",
    "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0007",
    "=\u02e7\n=\f=\u000e=\u02ea\u000b=\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0007>\u02f8\n>\f",
    ">\u000e>\u02fb\u000b>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0006>\u0304\n>\r>\u000e>\u0305\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0005>\u0313\n>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0007>\u031d\n>\f>\u000e",
    ">\u0320\u000b>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0005?\u0328",
    "\n?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0005@\u0338\n@\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0005A\u0341\nA\u0003B\u0003B\u0003C\u0003C\u0003",
    "D\u0003D\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0005",
    "E\u0351\nE\u0003E\u0005E\u0354\nE\u0003F\u0003F\u0003G\u0003G\u0003",
    "H\u0003H\u0003H\u0003\u0285\u0006>vxzI\u0002\u0004\u0006\b\n\f\u000e",
    "\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@B",
    "DFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a",
    "\u008c\u008e\u0002\u000e\u0003\u0002\u0108\u011e\u0003\u0002\u00c0\u00c1",
    "\u0004\u0002\u000b\u000b\r\r\u0004\u00023356\u0003\u0002&\'\u0004\u0002",
    "PP\u0094\u0094\u0004\u0002\u0006\u0006\u001c\u001c\u0003\u0002#$\u0003",
    "\u0002\u000b\f\u0005\u0002\u0004\u0004\u000f\u0013\u0087\u0087\u0006",
    "\u0002\u0006\u0006\u0011\u0012\u0014\u0014\u001c\u001c\u0004\u0002\u012d",
    "\u012f\u0136\u0136\u0002\u039c\u0002\u0090\u0003\u0002\u0002\u0002\u0004",
    "\u0093\u0003\u0002\u0002\u0002\u0006\u009c\u0003\u0002\u0002\u0002\b",
    "\u00a1\u0003\u0002\u0002\u0002\n\u00a3\u0003\u0002\u0002\u0002\f\u00b0",
    "\u0003\u0002\u0002\u0002\u000e\u00b4\u0003\u0002\u0002\u0002\u0010\u00b6",
    "\u0003\u0002\u0002\u0002\u0012\u00c8\u0003\u0002\u0002\u0002\u0014\u00cb",
    "\u0003\u0002\u0002\u0002\u0016\u00cd\u0003\u0002\u0002\u0002\u0018\u00cf",
    "\u0003\u0002\u0002\u0002\u001a\u00d3\u0003\u0002\u0002\u0002\u001c\u00db",
    "\u0003\u0002\u0002\u0002\u001e\u00dd\u0003\u0002\u0002\u0002 \u00e5",
    "\u0003\u0002\u0002\u0002\"\u00f1\u0003\u0002\u0002\u0002$\u00f3\u0003",
    "\u0002\u0002\u0002&\u00fa\u0003\u0002\u0002\u0002(\u00fe\u0003\u0002",
    "\u0002\u0002*\u010a\u0003\u0002\u0002\u0002,\u010f\u0003\u0002\u0002",
    "\u0002.\u0111\u0003\u0002\u0002\u00020\u0118\u0003\u0002\u0002\u0002",
    "2\u0121\u0003\u0002\u0002\u00024\u012b\u0003\u0002\u0002\u00026\u0145",
    "\u0003\u0002\u0002\u00028\u0149\u0003\u0002\u0002\u0002:\u014b\u0003",
    "\u0002\u0002\u0002<\u0179\u0003\u0002\u0002\u0002>\u017b\u0003\u0002",
    "\u0002\u0002@\u0195\u0003\u0002\u0002\u0002B\u01ac\u0003\u0002\u0002",
    "\u0002D\u01ca\u0003\u0002\u0002\u0002F\u01cc\u0003\u0002\u0002\u0002",
    "H\u01dc\u0003\u0002\u0002\u0002J\u01de\u0003\u0002\u0002\u0002L\u0213",
    "\u0003\u0002\u0002\u0002N\u0215\u0003\u0002\u0002\u0002P\u022f\u0003",
    "\u0002\u0002\u0002R\u0231\u0003\u0002\u0002\u0002T\u023b\u0003\u0002",
    "\u0002\u0002V\u023e\u0003\u0002\u0002\u0002X\u0243\u0003\u0002\u0002",
    "\u0002Z\u0245\u0003\u0002\u0002\u0002\\\u0247\u0003\u0002\u0002\u0002",
    "^\u0249\u0003\u0002\u0002\u0002`\u0253\u0003\u0002\u0002\u0002b\u025f",
    "\u0003\u0002\u0002\u0002d\u0268\u0003\u0002\u0002\u0002f\u0277\u0003",
    "\u0002\u0002\u0002h\u0279\u0003\u0002\u0002\u0002j\u0281\u0003\u0002",
    "\u0002\u0002l\u0288\u0003\u0002\u0002\u0002n\u0294\u0003\u0002\u0002",
    "\u0002p\u0298\u0003\u0002\u0002\u0002r\u029b\u0003\u0002\u0002\u0002",
    "t\u029f\u0003\u0002\u0002\u0002v\u02b2\u0003\u0002\u0002\u0002x\u02bd",
    "\u0003\u0002\u0002\u0002z\u0312\u0003\u0002\u0002\u0002|\u0327\u0003",
    "\u0002\u0002\u0002~\u0337\u0003\u0002\u0002\u0002\u0080\u0340\u0003",
    "\u0002\u0002\u0002\u0082\u0342\u0003\u0002\u0002\u0002\u0084\u0344\u0003",
    "\u0002\u0002\u0002\u0086\u0346\u0003\u0002\u0002\u0002\u0088\u0353\u0003",
    "\u0002\u0002\u0002\u008a\u0355\u0003\u0002\u0002\u0002\u008c\u0357\u0003",
    "\u0002\u0002\u0002\u008e\u0359\u0003\u0002\u0002\u0002\u0090\u0091\u0005",
    "\u0004\u0003\u0002\u0091\u0092\u0007\u0002\u0002\u0003\u0092\u0003\u0003",
    "\u0002\u0002\u0002\u0093\u0094\u0005\u0006\u0004\u0002\u0094\u0095\u0007",
    "\u0002\u0002\u0003\u0095\u0005\u0003\u0002\u0002\u0002\u0096\u0097\u0005",
    "\b\u0005\u0002\u0097\u0098\u0007\u012b\u0002\u0002\u0098\u009b\u0003",
    "\u0002\u0002\u0002\u0099\u009b\u0005\n\u0006\u0002\u009a\u0096\u0003",
    "\u0002\u0002\u0002\u009a\u0099\u0003\u0002\u0002\u0002\u009b\u009e\u0003",
    "\u0002\u0002\u0002\u009c\u009a\u0003\u0002\u0002\u0002\u009c\u009d\u0003",
    "\u0002\u0002\u0002\u009d\u0007\u0003\u0002\u0002\u0002\u009e\u009c\u0003",
    "\u0002\u0002\u0002\u009f\u00a2\u0005\f\u0007\u0002\u00a0\u00a2\u0005",
    "\u000e\b\u0002\u00a1\u009f\u0003\u0002\u0002\u0002\u00a1\u00a0\u0003",
    "\u0002\u0002\u0002\u00a2\t\u0003\u0002\u0002\u0002\u00a3\u00a4\u0007",
    "\u012b\u0002\u0002\u00a4\u000b\u0003\u0002\u0002\u0002\u00a5\u00b1\u0005",
    "\u0010\t\u0002\u00a6\u00b1\u0005\u001e\u0010\u0002\u00a7\u00b1\u0005",
    " \u0011\u0002\u00a8\u00b1\u0005\"\u0012\u0002\u00a9\u00b1\u0005$\u0013",
    "\u0002\u00aa\u00b1\u0005*\u0016\u0002\u00ab\u00b1\u0005,\u0017\u0002",
    "\u00ac\u00b1\u0005.\u0018\u0002\u00ad\u00b1\u00050\u0019\u0002\u00ae",
    "\u00b1\u00052\u001a\u0002\u00af\u00b1\u00054\u001b\u0002\u00b0\u00a5",
    "\u0003\u0002\u0002\u0002\u00b0\u00a6\u0003\u0002\u0002\u0002\u00b0\u00a7",
    "\u0003\u0002\u0002\u0002\u00b0\u00a8\u0003\u0002\u0002\u0002\u00b0\u00a9",
    "\u0003\u0002\u0002\u0002\u00b0\u00aa\u0003\u0002\u0002\u0002\u00b0\u00ab",
    "\u0003\u0002\u0002\u0002\u00b0\u00ac\u0003\u0002\u0002\u0002\u00b0\u00ad",
    "\u0003\u0002\u0002\u0002\u00b0\u00ae\u0003\u0002\u0002\u0002\u00b0\u00af",
    "\u0003\u0002\u0002\u0002\u00b1\r\u0003\u0002\u0002\u0002\u00b2\u00b5",
    "\u00056\u001c\u0002\u00b3\u00b5\u0005^0\u0002\u00b4\u00b2\u0003\u0002",
    "\u0002\u0002\u00b4\u00b3\u0003\u0002\u0002\u0002\u00b5\u000f\u0003\u0002",
    "\u0002\u0002\u00b6\u00b7\u0007I\u0002\u0002\u00b7\u00b8\u0007J\u0002",
    "\u0002\u00b8\u00b9\u0005j6\u0002\u00b9\u00ba\u0007\u0128\u0002\u0002",
    "\u00ba\u00bf\u0005\u0012\n\u0002\u00bb\u00bc\u0007\u012a\u0002\u0002",
    "\u00bc\u00be\u0005\u0012\n\u0002\u00bd\u00bb\u0003\u0002\u0002\u0002",
    "\u00be\u00c1\u0003\u0002\u0002\u0002\u00bf\u00bd\u0003\u0002\u0002\u0002",
    "\u00bf\u00c0\u0003\u0002\u0002\u0002\u00c0\u00c2\u0003\u0002\u0002\u0002",
    "\u00c1\u00bf\u0003\u0002\u0002\u0002\u00c2\u00c4\u0007\u0129\u0002\u0002",
    "\u00c3\u00c5\u0005\u0018\r\u0002\u00c4\u00c3\u0003\u0002\u0002\u0002",
    "\u00c4\u00c5\u0003\u0002\u0002\u0002\u00c5\u00c6\u0003\u0002\u0002\u0002",
    "\u00c6\u00c7\u0005l7\u0002\u00c7\u0011\u0003\u0002\u0002\u0002\u00c8",
    "\u00c9\u0005\u0014\u000b\u0002\u00c9\u00ca\u0005\u0016\f\u0002\u00ca",
    "\u0013\u0003\u0002\u0002\u0002\u00cb\u00cc\u0007\u0106\u0002\u0002\u00cc",
    "\u0015\u0003\u0002\u0002\u0002\u00cd\u00ce\t\u0002\u0002\u0002\u00ce",
    "\u0017\u0003\u0002\u0002\u0002\u00cf\u00d0\u0007\u00cf\u0002\u0002\u00d0",
    "\u00d1\u0007\u0010\u0002\u0002\u00d1\u00d2\u0005\u001a\u000e\u0002\u00d2",
    "\u0019\u0003\u0002\u0002\u0002\u00d3\u00d8\u0005\u001c\u000f\u0002\u00d4",
    "\u00d5\u0007\u012a\u0002\u0002\u00d5\u00d7\u0005\u001c\u000f\u0002\u00d6",
    "\u00d4\u0003\u0002\u0002\u0002\u00d7\u00da\u0003\u0002\u0002\u0002\u00d8",
    "\u00d6\u0003\u0002\u0002\u0002\u00d8\u00d9\u0003\u0002\u0002\u0002\u00d9",
    "\u001b\u0003\u0002\u0002\u0002\u00da\u00d8\u0003\u0002\u0002\u0002\u00db",
    "\u00dc\u0007\u0106\u0002\u0002\u00dc\u001d\u0003\u0002\u0002\u0002\u00dd",
    "\u00de\u0007I\u0002\u0002\u00de\u00e0\u0007\u00c7\u0002\u0002\u00df",
    "\u00e1\u0005n8\u0002\u00e0\u00df\u0003\u0002\u0002\u0002\u00e0\u00e1",
    "\u0003\u0002\u0002\u0002\u00e1\u00e2\u0003\u0002\u0002\u0002\u00e2\u00e3",
    "\u0005j6\u0002\u00e3\u00e4\u0005l7\u0002\u00e4\u001f\u0003\u0002\u0002",
    "\u0002\u00e5\u00e7\u0007I\u0002\u0002\u00e6\u00e8\u0007\u00ae\u0002",
    "\u0002\u00e7\u00e6\u0003\u0002\u0002\u0002\u00e7\u00e8\u0003\u0002\u0002",
    "\u0002\u00e8\u00e9\u0003\u0002\u0002\u0002\u00e9\u00eb\u0007L\u0002",
    "\u0002\u00ea\u00ec\u0005n8\u0002\u00eb\u00ea\u0003\u0002\u0002\u0002",
    "\u00eb\u00ec\u0003\u0002\u0002\u0002\u00ec\u00ed\u0003\u0002\u0002\u0002",
    "\u00ed\u00ee\u0005j6\u0002\u00ee\u00ef\u0007\n\u0002\u0002\u00ef\u00f0",
    "\u0005:\u001e\u0002\u00f0!\u0003\u0002\u0002\u0002\u00f1\u00f2\u0003",
    "\u0002\u0002\u0002\u00f2#\u0003\u0002\u0002\u0002\u00f3\u00f4\u0007",
    "g\u0002\u0002\u00f4\u00f5\u0007J\u0002\u0002\u00f5\u00f8\u0005j6\u0002",
    "\u00f6\u00f9\u0005&\u0014\u0002\u00f7\u00f9\u0005(\u0015\u0002\u00f8",
    "\u00f6\u0003\u0002\u0002\u0002\u00f8\u00f7\u0003\u0002\u0002\u0002\u00f9",
    "%\u0003\u0002\u0002\u0002\u00fa\u00fb\u0007h\u0002\u0002\u00fb\u00fc",
    "\u0007d\u0002\u0002\u00fc\u00fd\u0005j6\u0002\u00fd\'\u0003\u0002\u0002",
    "\u0002\u00fe\u00ff\u0007k\u0002\u0002\u00ff\u0100\u0007\u0128\u0002",
    "\u0002\u0100\u0105\u0005r:\u0002\u0101\u0102\u0007\u012a\u0002\u0002",
    "\u0102\u0104\u0005r:\u0002\u0103\u0101\u0003\u0002\u0002\u0002\u0104",
    "\u0107\u0003\u0002\u0002\u0002\u0105\u0103\u0003\u0002\u0002\u0002\u0105",
    "\u0106\u0003\u0002\u0002\u0002\u0106\u0108\u0003\u0002\u0002\u0002\u0107",
    "\u0105\u0003\u0002\u0002\u0002\u0108\u0109\u0007\u0129\u0002\u0002\u0109",
    ")\u0003\u0002\u0002\u0002\u010a\u010b\u0007g\u0002\u0002\u010b\u010c",
    "\u0007\u00c7\u0002\u0002\u010c\u010d\u0005j6\u0002\u010d\u010e\u0005",
    "(\u0015\u0002\u010e+\u0003\u0002\u0002\u0002\u010f\u0110\u0003\u0002",
    "\u0002\u0002\u0110-\u0003\u0002\u0002\u0002\u0111\u0112\u0007_\u0002",
    "\u0002\u0112\u0114\u0007J\u0002\u0002\u0113\u0115\u0005p9\u0002\u0114",
    "\u0113\u0003\u0002\u0002\u0002\u0114\u0115\u0003\u0002\u0002\u0002\u0115",
    "\u0116\u0003\u0002\u0002\u0002\u0116\u0117\u0005j6\u0002\u0117/\u0003",
    "\u0002\u0002\u0002\u0118\u0119\u0007_\u0002\u0002\u0119\u011b\u0007",
    "\u00c7\u0002\u0002\u011a\u011c\u0005p9\u0002\u011b\u011a\u0003\u0002",
    "\u0002\u0002\u011b\u011c\u0003\u0002\u0002\u0002\u011c\u011d\u0003\u0002",
    "\u0002\u0002\u011d\u011f\u0005j6\u0002\u011e\u0120\t\u0003\u0002\u0002",
    "\u011f\u011e\u0003\u0002\u0002\u0002\u011f\u0120\u0003\u0002\u0002\u0002",
    "\u01201\u0003\u0002\u0002\u0002\u0121\u0123\u0007_\u0002\u0002\u0122",
    "\u0124\u0007\u00ae\u0002\u0002\u0123\u0122\u0003\u0002\u0002\u0002\u0123",
    "\u0124\u0003\u0002\u0002\u0002\u0124\u0125\u0003\u0002\u0002\u0002\u0125",
    "\u0127\u0007L\u0002\u0002\u0126\u0128\u0005p9\u0002\u0127\u0126\u0003",
    "\u0002\u0002\u0002\u0127\u0128\u0003\u0002\u0002\u0002\u0128\u0129\u0003",
    "\u0002\u0002\u0002\u0129\u012a\u0005j6\u0002\u012a3\u0003\u0002\u0002",
    "\u0002\u012b\u012f\u0007_\u0002\u0002\u012c\u0130\u0007\u00ae\u0002",
    "\u0002\u012d\u012e\u0007\u00ae\u0002\u0002\u012e\u0130\u0007\u0107\u0002",
    "\u0002\u012f\u012c\u0003\u0002\u0002\u0002\u012f\u012d\u0003\u0002\u0002",
    "\u0002\u012f\u0130\u0003\u0002\u0002\u0002\u0130\u0131\u0003\u0002\u0002",
    "\u0002\u0131\u0133\u0007\u00a5\u0002\u0002\u0132\u0134\u0005p9\u0002",
    "\u0133\u0132\u0003\u0002\u0002\u0002\u0133\u0134\u0003\u0002\u0002\u0002",
    "\u0134\u0135\u0003\u0002\u0002\u0002\u0135\u0136\u0005j6\u0002\u0136",
    "5\u0003\u0002\u0002\u0002\u0137\u0146\u0005b2\u0002\u0138\u013a\u0005",
    "8\u001d\u0002\u0139\u013b\u0005R*\u0002\u013a\u0139\u0003\u0002\u0002",
    "\u0002\u013a\u013b\u0003\u0002\u0002\u0002\u013b\u013d\u0003\u0002\u0002",
    "\u0002\u013c\u013e\u0005V,\u0002\u013d\u013c\u0003\u0002\u0002\u0002",
    "\u013d\u013e\u0003\u0002\u0002\u0002\u013e\u0140\u0003\u0002\u0002\u0002",
    "\u013f\u0141\u0005Z.\u0002\u0140\u013f\u0003\u0002\u0002\u0002\u0140",
    "\u0141\u0003\u0002\u0002\u0002\u0141\u0143\u0003\u0002\u0002\u0002\u0142",
    "\u0144\u0005\\/\u0002\u0143\u0142\u0003\u0002\u0002\u0002\u0143\u0144",
    "\u0003\u0002\u0002\u0002\u0144\u0146\u0003\u0002\u0002\u0002\u0145\u0137",
    "\u0003\u0002\u0002\u0002\u0145\u0138\u0003\u0002\u0002\u0002\u01467",
    "\u0003\u0002\u0002\u0002\u0147\u014a\u0005:\u001e\u0002\u0148\u014a",
    "\u0005N(\u0002\u0149\u0147\u0003\u0002\u0002\u0002\u0149\u0148\u0003",
    "\u0002\u0002\u0002\u014a9\u0003\u0002\u0002\u0002\u014b\u014d\u0007",
    "\u0007\u0002\u0002\u014c\u014e\t\u0004\u0002\u0002\u014d\u014c\u0003",
    "\u0002\u0002\u0002\u014d\u014e\u0003\u0002\u0002\u0002\u014e\u0158\u0003",
    "\u0002\u0002\u0002\u014f\u0159\u0007\u0134\u0002\u0002\u0150\u0155\u0005",
    "<\u001f\u0002\u0151\u0152\u0007\u012a\u0002\u0002\u0152\u0154\u0005",
    "<\u001f\u0002\u0153\u0151\u0003\u0002\u0002\u0002\u0154\u0157\u0003",
    "\u0002\u0002\u0002\u0155\u0153\u0003\u0002\u0002\u0002\u0155\u0156\u0003",
    "\u0002\u0002\u0002\u0156\u0159\u0003\u0002\u0002\u0002\u0157\u0155\u0003",
    "\u0002\u0002\u0002\u0158\u014f\u0003\u0002\u0002\u0002\u0158\u0150\u0003",
    "\u0002\u0002\u0002\u0159\u015a\u0003\u0002\u0002\u0002\u015a\u015b\u0007",
    "\b\u0002\u0002\u015b\u015e\u0005> \u0002\u015c\u015d\u0007\u000e\u0002",
    "\u0002\u015d\u015f\u0005v<\u0002\u015e\u015c\u0003\u0002\u0002\u0002",
    "\u015e\u015f\u0003\u0002\u0002\u0002\u015f\u0160\u0003\u0002\u0002\u0002",
    "\u0160\u0161\u0007\u000f\u0002\u0002\u0161\u0162\u0007\u0010\u0002\u0002",
    "\u0162\u0167\u0005L\'\u0002\u0163\u0164\u0007\u012a\u0002\u0002\u0164",
    "\u0166\u0005L\'\u0002\u0165\u0163\u0003\u0002\u0002\u0002\u0166\u0169",
    "\u0003\u0002\u0002\u0002\u0167\u0165\u0003\u0002\u0002\u0002\u0167\u0168",
    "\u0003\u0002\u0002\u0002\u0168\u016c\u0003\u0002\u0002\u0002\u0169\u0167",
    "\u0003\u0002\u0002\u0002\u016a\u016b\u0007\u0016\u0002\u0002\u016b\u016d",
    "\u0005v<\u0002\u016c\u016a\u0003\u0002\u0002\u0002\u016c\u016d\u0003",
    "\u0002\u0002\u0002\u016d;\u0003\u0002\u0002\u0002\u016e\u0173\u0005",
    "v<\u0002\u016f\u0171\u0007\n\u0002\u0002\u0170\u016f\u0003\u0002\u0002",
    "\u0002\u0170\u0171\u0003\u0002\u0002\u0002\u0171\u0172\u0003\u0002\u0002",
    "\u0002\u0172\u0174\u0005j6\u0002\u0173\u0170\u0003\u0002\u0002\u0002",
    "\u0173\u0174\u0003\u0002\u0002\u0002\u0174\u017a\u0003\u0002\u0002\u0002",
    "\u0175\u0176\u0005j6\u0002\u0176\u0177\u0007\u0003\u0002\u0002\u0177",
    "\u0178\u0007\u0004\u0002\u0002\u0178\u017a\u0003\u0002\u0002\u0002\u0179",
    "\u016e\u0003\u0002\u0002\u0002\u0179\u0175\u0003\u0002\u0002\u0002\u017a",
    "=\u0003\u0002\u0002\u0002\u017b\u017c\b \u0001\u0002\u017c\u0181\u0005",
    "@!\u0002\u017d\u017e\u0007\u012a\u0002\u0002\u017e\u0180\u0005@!\u0002",
    "\u017f\u017d\u0003\u0002\u0002\u0002\u0180\u0183\u0003\u0002\u0002\u0002",
    "\u0181\u017f\u0003\u0002\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002",
    "\u0182\u0192\u0003\u0002\u0002\u0002\u0183\u0181\u0003\u0002\u0002\u0002",
    "\u0184\u0186\f\u0003\u0002\u0002\u0185\u0187\u00077\u0002\u0002\u0186",
    "\u0185\u0003\u0002\u0002\u0002\u0186\u0187\u0003\u0002\u0002\u0002\u0187",
    "\u0189\u0003\u0002\u0002\u0002\u0188\u018a\t\u0005\u0002\u0002\u0189",
    "\u0188\u0003\u0002\u0002\u0002\u0189\u018a\u0003\u0002\u0002\u0002\u018a",
    "\u018b\u0003\u0002\u0002\u0002\u018b\u018c\u0007/\u0002\u0002\u018c",
    "\u018e\u0005> \u0002\u018d\u018f\u0005H%\u0002\u018e\u018d\u0003\u0002",
    "\u0002\u0002\u018e\u018f\u0003\u0002\u0002\u0002\u018f\u0191\u0003\u0002",
    "\u0002\u0002\u0190\u0184\u0003\u0002\u0002\u0002\u0191\u0194\u0003\u0002",
    "\u0002\u0002\u0192\u0190\u0003\u0002\u0002\u0002\u0192\u0193\u0003\u0002",
    "\u0002\u0002\u0193?\u0003\u0002\u0002\u0002\u0194\u0192\u0003\u0002",
    "\u0002\u0002\u0195\u0197\u0005D#\u0002\u0196\u0198\u0005B\"\u0002\u0197",
    "\u0196\u0003\u0002\u0002\u0002\u0197\u0198\u0003\u0002\u0002\u0002\u0198",
    "\u01aa\u0003\u0002\u0002\u0002\u0199\u019b\u0007\n\u0002\u0002\u019a",
    "\u0199\u0003\u0002\u0002\u0002\u019a\u019b\u0003\u0002\u0002\u0002\u019b",
    "\u019c\u0003\u0002\u0002\u0002\u019c\u01a8\u0005j6\u0002\u019d\u019e",
    "\u0007\u0128\u0002\u0002\u019e\u01a3\u0005j6\u0002\u019f\u01a0\u0007",
    "\u012a\u0002\u0002\u01a0\u01a2\u0005j6\u0002\u01a1\u019f\u0003\u0002",
    "\u0002\u0002\u01a2\u01a5\u0003\u0002\u0002\u0002\u01a3\u01a1\u0003\u0002",
    "\u0002\u0002\u01a3\u01a4\u0003\u0002\u0002\u0002\u01a4\u01a6\u0003\u0002",
    "\u0002\u0002\u01a5\u01a3\u0003\u0002\u0002\u0002\u01a6\u01a7\u0007\u0129",
    "\u0002\u0002\u01a7\u01a9\u0003\u0002\u0002\u0002\u01a8\u019d\u0003\u0002",
    "\u0002\u0002\u01a8\u01a9\u0003\u0002\u0002\u0002\u01a9\u01ab\u0003\u0002",
    "\u0002\u0002\u01aa\u019a\u0003\u0002\u0002\u0002\u01aa\u01ab\u0003\u0002",
    "\u0002\u0002\u01abA\u0003\u0002\u0002\u0002\u01ac\u01ad\u0003\u0002",
    "\u0002\u0002\u01adC\u0003\u0002\u0002\u0002\u01ae\u01b0\u0007J\u0002",
    "\u0002\u01af\u01ae\u0003\u0002\u0002\u0002\u01af\u01b0\u0003\u0002\u0002",
    "\u0002\u01b0\u01b1\u0003\u0002\u0002\u0002\u01b1\u01b3\u0005j6\u0002",
    "\u01b2\u01b4\u0005F$\u0002\u01b3\u01b2\u0003\u0002\u0002\u0002\u01b3",
    "\u01b4\u0003\u0002\u0002\u0002\u01b4\u01cb\u0003\u0002\u0002\u0002\u01b5",
    "\u01b6\u0007:\u0002\u0002\u01b6\u01b7\u0007J\u0002\u0002\u01b7\u01b8",
    "\u0007\u0128\u0002\u0002\u01b8\u01b9\u0005j6\u0002\u01b9\u01ba\u0007",
    "\u0128\u0002\u0002\u01ba\u01bf\u0005v<\u0002\u01bb\u01bc\u0007\u012a",
    "\u0002\u0002\u01bc\u01be\u0005v<\u0002\u01bd\u01bb\u0003\u0002\u0002",
    "\u0002\u01be\u01c1\u0003\u0002\u0002\u0002\u01bf\u01bd\u0003\u0002\u0002",
    "\u0002\u01bf\u01c0\u0003\u0002\u0002\u0002\u01c0\u01c2\u0003\u0002\u0002",
    "\u0002\u01c1\u01bf\u0003\u0002\u0002\u0002\u01c2\u01c3\u0007\u0129\u0002",
    "\u0002\u01c3\u01c4\u0007\u0129\u0002\u0002\u01c4\u01cb\u0003\u0002\u0002",
    "\u0002\u01c5\u01c6\u0007\u00e9\u0002\u0002\u01c6\u01c7\u0007\u0128\u0002",
    "\u0002\u01c7\u01c8\u0005v<\u0002\u01c8\u01c9\u0007\u0129\u0002\u0002",
    "\u01c9\u01cb\u0003\u0002\u0002\u0002\u01ca\u01af\u0003\u0002\u0002\u0002",
    "\u01ca\u01b5\u0003\u0002\u0002\u0002\u01ca\u01c5\u0003\u0002\u0002\u0002",
    "\u01cbE\u0003\u0002\u0002\u0002\u01cc\u01cd\u0003\u0002\u0002\u0002",
    "\u01cdG\u0003\u0002\u0002\u0002\u01ce\u01cf\u00078\u0002\u0002\u01cf",
    "\u01dd\u0005J&\u0002\u01d0\u01d1\u0007\u0097\u0002\u0002\u01d1\u01d2",
    "\u0007\u0128\u0002\u0002\u01d2\u01d7\u0005j6\u0002\u01d3\u01d4\u0007",
    "\u012a\u0002\u0002\u01d4\u01d6\u0005j6\u0002\u01d5\u01d3\u0003\u0002",
    "\u0002\u0002\u01d6\u01d9\u0003\u0002\u0002\u0002\u01d7\u01d5\u0003\u0002",
    "\u0002\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d8\u01da\u0003\u0002",
    "\u0002\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002\u01da\u01db\u0007\u0129",
    "\u0002\u0002\u01db\u01dd\u0003\u0002\u0002\u0002\u01dc\u01ce\u0003\u0002",
    "\u0002\u0002\u01dc\u01d0\u0003\u0002\u0002\u0002\u01ddI\u0003\u0002",
    "\u0002\u0002\u01de\u01df\u0003\u0002\u0002\u0002\u01dfK\u0003\u0002",
    "\u0002\u0002\u01e0\u0214\u0005v<\u0002\u01e1\u01e2\u0007\u0128\u0002",
    "\u0002\u01e2\u0214\u0007\u0129\u0002\u0002\u01e3\u01e4\u0007\u0128\u0002",
    "\u0002\u01e4\u01e9\u0005v<\u0002\u01e5\u01e6\u0007\u012a\u0002\u0002",
    "\u01e6\u01e8\u0005v<\u0002\u01e7\u01e5\u0003\u0002\u0002\u0002\u01e8",
    "\u01eb\u0003\u0002\u0002\u0002\u01e9\u01e7\u0003\u0002\u0002\u0002\u01e9",
    "\u01ea\u0003\u0002\u0002\u0002\u01ea\u01ec\u0003\u0002\u0002\u0002\u01eb",
    "\u01e9\u0003\u0002\u0002\u0002\u01ec\u01ed\u0007\u0129\u0002\u0002\u01ed",
    "\u0214\u0003\u0002\u0002\u0002\u01ee\u01ef\u0007\u0013\u0002\u0002\u01ef",
    "\u01f0\u0007\u0128\u0002\u0002\u01f0\u01f5\u0005v<\u0002\u01f1\u01f2",
    "\u0007\u012a\u0002\u0002\u01f2\u01f4\u0005v<\u0002\u01f3\u01f1\u0003",
    "\u0002\u0002\u0002\u01f4\u01f7\u0003\u0002\u0002\u0002\u01f5\u01f3\u0003",
    "\u0002\u0002\u0002\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6\u01f8\u0003",
    "\u0002\u0002\u0002\u01f7\u01f5\u0003\u0002\u0002\u0002\u01f8\u01f9\u0007",
    "\u0129\u0002\u0002\u01f9\u0214\u0003\u0002\u0002\u0002\u01fa\u01fb\u0007",
    "\u0014\u0002\u0002\u01fb\u01fc\u0007\u0128\u0002\u0002\u01fc\u0201\u0005",
    "v<\u0002\u01fd\u01fe\u0007\u012a\u0002\u0002\u01fe\u0200\u0005v<\u0002",
    "\u01ff\u01fd\u0003\u0002\u0002\u0002\u0200\u0203\u0003\u0002\u0002\u0002",
    "\u0201\u01ff\u0003\u0002\u0002\u0002\u0201\u0202\u0003\u0002\u0002\u0002",
    "\u0202\u0204\u0003\u0002\u0002\u0002\u0203\u0201\u0003\u0002\u0002\u0002",
    "\u0204\u0205\u0007\u0129\u0002\u0002\u0205\u0214\u0003\u0002\u0002\u0002",
    "\u0206\u0207\u0007\u0011\u0002\u0002\u0207\u0208\u0007\u0012\u0002\u0002",
    "\u0208\u0209\u0007\u0128\u0002\u0002\u0209\u020e\u0005L\'\u0002\u020a",
    "\u020b\u0007\u012a\u0002\u0002\u020b\u020d\u0005L\'\u0002\u020c\u020a",
    "\u0003\u0002\u0002\u0002\u020d\u0210\u0003\u0002\u0002\u0002\u020e\u020c",
    "\u0003\u0002\u0002\u0002\u020e\u020f\u0003\u0002\u0002\u0002\u020f\u0211",
    "\u0003\u0002\u0002\u0002\u0210\u020e\u0003\u0002\u0002\u0002\u0211\u0212",
    "\u0007\u0129\u0002\u0002\u0212\u0214\u0003\u0002\u0002\u0002\u0213\u01e0",
    "\u0003\u0002\u0002\u0002\u0213\u01e1\u0003\u0002\u0002\u0002\u0213\u01e3",
    "\u0003\u0002\u0002\u0002\u0213\u01ee\u0003\u0002\u0002\u0002\u0213\u01fa",
    "\u0003\u0002\u0002\u0002\u0213\u0206\u0003\u0002\u0002\u0002\u0214M",
    "\u0003\u0002\u0002\u0002\u0215\u0217\u0007\u0007\u0002\u0002\u0216\u0218",
    "\t\u0004\u0002\u0002\u0217\u0216\u0003\u0002\u0002\u0002\u0217\u0218",
    "\u0003\u0002\u0002\u0002\u0218\u0222\u0003\u0002\u0002\u0002\u0219\u0223",
    "\u0007\u0134\u0002\u0002\u021a\u021f\u0005P)\u0002\u021b\u021c\u0007",
    "\u012a\u0002\u0002\u021c\u021e\u0005P)\u0002\u021d\u021b\u0003\u0002",
    "\u0002\u0002\u021e\u0221\u0003\u0002\u0002\u0002\u021f\u021d\u0003\u0002",
    "\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002\u0220\u0223\u0003\u0002",
    "\u0002\u0002\u0221\u021f\u0003\u0002\u0002\u0002\u0222\u0219\u0003\u0002",
    "\u0002\u0002\u0222\u021a\u0003\u0002\u0002\u0002\u0223O\u0003\u0002",
    "\u0002\u0002\u0224\u0229\u0005v<\u0002\u0225\u0227\u0007\n\u0002\u0002",
    "\u0226\u0225\u0003\u0002\u0002\u0002\u0226\u0227\u0003\u0002\u0002\u0002",
    "\u0227\u0228\u0003\u0002\u0002\u0002\u0228\u022a\u0005j6\u0002\u0229",
    "\u0226\u0003\u0002\u0002\u0002\u0229\u022a\u0003\u0002\u0002\u0002\u022a",
    "\u0230\u0003\u0002\u0002\u0002\u022b\u022c\u0005j6\u0002\u022c\u022d",
    "\u0007\u0003\u0002\u0002\u022d\u022e\u0007\u0004\u0002\u0002\u022e\u0230",
    "\u0003\u0002\u0002\u0002\u022f\u0224\u0003\u0002\u0002\u0002\u022f\u022b",
    "\u0003\u0002\u0002\u0002\u0230Q\u0003\u0002\u0002\u0002\u0231\u0232",
    "\u0007\u0015\u0002\u0002\u0232\u0233\u0007\u0010\u0002\u0002\u0233\u0238",
    "\u0005T+\u0002\u0234\u0235\u0007\u012a\u0002\u0002\u0235\u0237\u0005",
    "T+\u0002\u0236\u0234\u0003\u0002\u0002\u0002\u0237\u023a\u0003\u0002",
    "\u0002\u0002\u0238\u0236\u0003\u0002\u0002\u0002\u0238\u0239\u0003\u0002",
    "\u0002\u0002\u0239S\u0003\u0002\u0002\u0002\u023a\u0238\u0003\u0002",
    "\u0002\u0002\u023b\u023c\u0005v<\u0002\u023c\u023d\t\u0006\u0002\u0002",
    "\u023dU\u0003\u0002\u0002\u0002\u023e\u0241\u0007\u0017\u0002\u0002",
    "\u023f\u0242\u0005X-\u0002\u0240\u0242\u0007\u000b\u0002\u0002\u0241",
    "\u023f\u0003\u0002\u0002\u0002\u0241\u0240\u0003\u0002\u0002\u0002\u0242",
    "W\u0003\u0002\u0002\u0002\u0243\u0244\u0003\u0002\u0002\u0002\u0244",
    "Y\u0003\u0002\u0002\u0002\u0245\u0246\u0003\u0002\u0002\u0002\u0246",
    "[\u0003\u0002\u0002\u0002\u0247\u0248\u0003\u0002\u0002\u0002\u0248",
    "]\u0003\u0002\u0002\u0002\u0249\u024a\u0007N\u0002\u0002\u024a\u024b",
    "\t\u0007\u0002\u0002\u024b\u0251\u0005j6\u0002\u024c\u024e\u0005`1\u0002",
    "\u024d\u024c\u0003\u0002\u0002\u0002\u024d\u024e\u0003\u0002\u0002\u0002",
    "\u024e\u024f\u0003\u0002\u0002\u0002\u024f\u0252\u0005:\u001e\u0002",
    "\u0250\u0252\u0005b2\u0002\u0251\u024d\u0003\u0002\u0002\u0002\u0251",
    "\u0250\u0003\u0002\u0002\u0002\u0252_\u0003\u0002\u0002\u0002\u0253",
    "\u0254\u0007=\u0002\u0002\u0254\u0255\u0007\u0128\u0002\u0002\u0255",
    "\u025a\u0005r:\u0002\u0256\u0257\u0007\u012a\u0002\u0002\u0257\u0259",
    "\u0005r:\u0002\u0258\u0256\u0003\u0002\u0002\u0002\u0259\u025c\u0003",
    "\u0002\u0002\u0002\u025a\u0258\u0003\u0002\u0002\u0002\u025a\u025b\u0003",
    "\u0002\u0002\u0002\u025b\u025d\u0003\u0002\u0002\u0002\u025c\u025a\u0003",
    "\u0002\u0002\u0002\u025d\u025e\u0007\u0129\u0002\u0002\u025ea\u0003",
    "\u0002\u0002\u0002\u025f\u0260\u0007H\u0002\u0002\u0260\u0265\u0005",
    "d3\u0002\u0261\u0262\u0007\u012a\u0002\u0002\u0262\u0264\u0005d3\u0002",
    "\u0263\u0261\u0003\u0002\u0002\u0002\u0264\u0267\u0003\u0002\u0002\u0002",
    "\u0265\u0263\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002\u0002\u0002",
    "\u0266c\u0003\u0002\u0002\u0002\u0267\u0265\u0003\u0002\u0002\u0002",
    "\u0268\u0269\u0007\u0128\u0002\u0002\u0269\u026e\u0005f4\u0002\u026a",
    "\u026b\u0007\u012a\u0002\u0002\u026b\u026d\u0005f4\u0002\u026c\u026a",
    "\u0003\u0002\u0002\u0002\u026d\u0270\u0003\u0002\u0002\u0002\u026e\u026c",
    "\u0003\u0002\u0002\u0002\u026e\u026f\u0003\u0002\u0002\u0002\u026f\u0271",
    "\u0003\u0002\u0002\u0002\u0270\u026e\u0003\u0002\u0002\u0002\u0271\u0272",
    "\u0007\u0129\u0002\u0002\u0272e\u0003\u0002\u0002\u0002\u0273\u0278",
    "\u0005\u008aF\u0002\u0274\u0278\u0005\u008eH\u0002\u0275\u0278\u0007",
    "\u0139\u0002\u0002\u0276\u0278\u0007\u011e\u0002\u0002\u0277\u0273\u0003",
    "\u0002\u0002\u0002\u0277\u0274\u0003\u0002\u0002\u0002\u0277\u0275\u0003",
    "\u0002\u0002\u0002\u0277\u0276\u0003\u0002\u0002\u0002\u0278g\u0003",
    "\u0002\u0002\u0002\u0279\u027e\u0005j6\u0002\u027a\u027b\u0007\u0005",
    "\u0002\u0002\u027b\u027d\u0005j6\u0002\u027c\u027a\u0003\u0002\u0002",
    "\u0002\u027d\u0280\u0003\u0002\u0002\u0002\u027e\u027c\u0003\u0002\u0002",
    "\u0002\u027e\u027f\u0003\u0002\u0002\u0002\u027fi\u0003\u0002\u0002",
    "\u0002\u0280\u027e\u0003\u0002\u0002\u0002\u0281\u0285\u0007\u0106\u0002",
    "\u0002\u0282\u0284\u0007\u0105\u0002\u0002\u0283\u0282\u0003\u0002\u0002",
    "\u0002\u0284\u0287\u0003\u0002\u0002\u0002\u0285\u0286\u0003\u0002\u0002",
    "\u0002\u0285\u0283\u0003\u0002\u0002\u0002\u0286k\u0003\u0002\u0002",
    "\u0002\u0287\u0285\u0003\u0002\u0002\u0002\u0288\u0289\u0007G\u0002",
    "\u0002\u0289\u028a\u0007\u0128\u0002\u0002\u028a\u028f\u0005r:\u0002",
    "\u028b\u028c\u0007\u012a\u0002\u0002\u028c\u028e\u0005r:\u0002\u028d",
    "\u028b\u0003\u0002\u0002\u0002\u028e\u0291\u0003\u0002\u0002\u0002\u028f",
    "\u028d\u0003\u0002\u0002\u0002\u028f\u0290\u0003\u0002\u0002\u0002\u0290",
    "\u0292\u0003\u0002\u0002\u0002\u0291\u028f\u0003\u0002\u0002\u0002\u0292",
    "\u0293\u0007\u0129\u0002\u0002\u0293m\u0003\u0002\u0002\u0002\u0294",
    "\u0295\u0007w\u0002\u0002\u0295\u0296\u0007\u001c\u0002\u0002\u0296",
    "\u0297\u0007\u001e\u0002\u0002\u0297o\u0003\u0002\u0002\u0002\u0298",
    "\u0299\u0007w\u0002\u0002\u0299\u029a\u0007\u001e\u0002\u0002\u029a",
    "q\u0003\u0002\u0002\u0002\u029b\u029c\u0007\u0104\u0002\u0002\u029c",
    "\u029d\u0007\u011f\u0002\u0002\u029d\u029e\u0007\u0104\u0002\u0002\u029e",
    "s\u0003\u0002\u0002\u0002\u029f\u02a4\u0005v<\u0002\u02a0\u02a1\u0007",
    "\u0005\u0002\u0002\u02a1\u02a3\u0005v<\u0002\u02a2\u02a0\u0003\u0002",
    "\u0002\u0002\u02a3\u02a6\u0003\u0002\u0002\u0002\u02a4\u02a2\u0003\u0002",
    "\u0002\u0002\u02a4\u02a5\u0003\u0002\u0002\u0002\u02a5u\u0003\u0002",
    "\u0002\u0002\u02a6\u02a4\u0003\u0002\u0002\u0002\u02a7\u02a8\b<\u0001",
    "\u0002\u02a8\u02a9\t\b\u0002\u0002\u02a9\u02b3\u0005v<\u0006\u02aa\u02ab",
    "\u0005x=\u0002\u02ab\u02ad\u0007\"\u0002\u0002\u02ac\u02ae\u0007\u001c",
    "\u0002\u0002\u02ad\u02ac\u0003\u0002\u0002\u0002\u02ad\u02ae\u0003\u0002",
    "\u0002\u0002\u02ae\u02af\u0003\u0002\u0002\u0002\u02af\u02b0\t\t\u0002",
    "\u0002\u02b0\u02b3\u0003\u0002\u0002\u0002\u02b1\u02b3\u0005x=\u0002",
    "\u02b2\u02a7\u0003\u0002\u0002\u0002\u02b2\u02aa\u0003\u0002\u0002\u0002",
    "\u02b2\u02b1\u0003\u0002\u0002\u0002\u02b3\u02ba\u0003\u0002\u0002\u0002",
    "\u02b4\u02b5\f\u0005\u0002\u0002\u02b5\u02b6\u0005|?\u0002\u02b6\u02b7",
    "\u0005v<\u0006\u02b7\u02b9\u0003\u0002\u0002\u0002\u02b8\u02b4\u0003",
    "\u0002\u0002\u0002\u02b9\u02bc\u0003\u0002\u0002\u0002\u02ba\u02b8\u0003",
    "\u0002\u0002\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bbw\u0003",
    "\u0002\u0002\u0002\u02bc\u02ba\u0003\u0002\u0002\u0002\u02bd\u02be\b",
    "=\u0001\u0002\u02be\u02bf\u0005z>\u0002\u02bf\u02e8\u0003\u0002\u0002",
    "\u0002\u02c0\u02c1\f\u0007\u0002\u0002\u02c1\u02c2\u0005~@\u0002\u02c2",
    "\u02c3\u0005x=\b\u02c3\u02e7\u0003\u0002\u0002\u0002\u02c4\u02c6\f\u0005",
    "\u0002\u0002\u02c5\u02c7\u0007\u001c\u0002\u0002\u02c6\u02c5\u0003\u0002",
    "\u0002\u0002\u02c6\u02c7\u0003\u0002\u0002\u0002\u02c7\u02c8\u0003\u0002",
    "\u0002\u0002\u02c8\u02c9\u0007\u001f\u0002\u0002\u02c9\u02ca\u0005x",
    "=\u0002\u02ca\u02cb\u0007\u001a\u0002\u0002\u02cb\u02cc\u0005x=\u0006",
    "\u02cc\u02e7\u0003\u0002\u0002\u0002\u02cd\u02cf\f\u0004\u0002\u0002",
    "\u02ce\u02d0\u0007\u001c\u0002\u0002\u02cf\u02ce\u0003\u0002\u0002\u0002",
    "\u02cf\u02d0\u0003\u0002\u0002\u0002\u02d0\u02d1\u0003\u0002\u0002\u0002",
    "\u02d1\u02d2\u0007 \u0002\u0002\u02d2\u02e7\u0005x=\u0005\u02d3\u02d5",
    "\f\b\u0002\u0002\u02d4\u02d6\u0007\u001c\u0002\u0002\u02d5\u02d4\u0003",
    "\u0002\u0002\u0002\u02d5\u02d6\u0003\u0002\u0002\u0002\u02d6\u02d7\u0003",
    "\u0002\u0002\u0002\u02d7\u02d8\u0007\u001b\u0002\u0002\u02d8\u02db\u0007",
    "\u0007\u0002\u0002\u02d9\u02dc\u0005:\u001e\u0002\u02da\u02dc\u0005",
    "t;\u0002\u02db\u02d9\u0003\u0002\u0002\u0002\u02db\u02da\u0003\u0002",
    "\u0002\u0002\u02dc\u02dd\u0003\u0002\u0002\u0002\u02dd\u02de\u0007\b",
    "\u0002\u0002\u02de\u02e7\u0003\u0002\u0002\u0002\u02df\u02e0\f\u0006",
    "\u0002\u0002\u02e0\u02e1\u0005~@\u0002\u02e1\u02e2\t\n\u0002\u0002\u02e2",
    "\u02e3\u0007\u0007\u0002\u0002\u02e3\u02e4\u0005:\u001e\u0002\u02e4",
    "\u02e5\u0007\b\u0002\u0002\u02e5\u02e7\u0003\u0002\u0002\u0002\u02e6",
    "\u02c0\u0003\u0002\u0002\u0002\u02e6\u02c4\u0003\u0002\u0002\u0002\u02e6",
    "\u02cd\u0003\u0002\u0002\u0002\u02e6\u02d3\u0003\u0002\u0002\u0002\u02e6",
    "\u02df\u0003\u0002\u0002\u0002\u02e7\u02ea\u0003\u0002\u0002\u0002\u02e8",
    "\u02e6\u0003\u0002\u0002\u0002\u02e8\u02e9\u0003\u0002\u0002\u0002\u02e9",
    "y\u0003\u0002\u0002\u0002\u02ea\u02e8\u0003\u0002\u0002\u0002\u02eb",
    "\u02ec\b>\u0001\u0002\u02ec\u0313\u0005\u0088E\u0002\u02ed\u0313\u0005",
    "\u0086D\u0002\u02ee\u02ef\u0005\u0084C\u0002\u02ef\u02f0\u0005z>\n\u02f0",
    "\u0313\u0003\u0002\u0002\u0002\u02f1\u02f2\u0007\u010d\u0002\u0002\u02f2",
    "\u0313\u0005z>\t\u02f3\u02f4\u0007\u0007\u0002\u0002\u02f4\u02f9\u0005",
    "v<\u0002\u02f5\u02f6\u0007\u0005\u0002\u0002\u02f6\u02f8\u0005v<\u0002",
    "\u02f7\u02f5\u0003\u0002\u0002\u0002\u02f8\u02fb\u0003\u0002\u0002\u0002",
    "\u02f9\u02f7\u0003\u0002\u0002\u0002\u02f9\u02fa\u0003\u0002\u0002\u0002",
    "\u02fa\u02fc\u0003\u0002\u0002\u0002\u02fb\u02f9\u0003\u0002\u0002\u0002",
    "\u02fc\u02fd\u0007\b\u0002\u0002\u02fd\u0313\u0003\u0002\u0002\u0002",
    "\u02fe\u02ff\u0007\u011d\u0002\u0002\u02ff\u0300\u0007\u0007\u0002\u0002",
    "\u0300\u0303\u0005v<\u0002\u0301\u0302\u0007\u0005\u0002\u0002\u0302",
    "\u0304\u0005v<\u0002\u0303\u0301\u0003\u0002\u0002\u0002\u0304\u0305",
    "\u0003\u0002\u0002\u0002\u0305\u0303\u0003\u0002\u0002\u0002\u0305\u0306",
    "\u0003\u0002\u0002\u0002\u0306\u0307\u0003\u0002\u0002\u0002\u0307\u0308",
    "\u0007\b\u0002\u0002\u0308\u0313\u0003\u0002\u0002\u0002\u0309\u030a",
    "\u0007\u001e\u0002\u0002\u030a\u030b\u0007\u0007\u0002\u0002\u030b\u030c",
    "\u0005:\u001e\u0002\u030c\u030d\u0007\b\u0002\u0002\u030d\u0313\u0003",
    "\u0002\u0002\u0002\u030e\u030f\u0007\u0007\u0002\u0002\u030f\u0310\u0005",
    ":\u001e\u0002\u0310\u0311\u0007\b\u0002\u0002\u0311\u0313\u0003\u0002",
    "\u0002\u0002\u0312\u02eb\u0003\u0002\u0002\u0002\u0312\u02ed\u0003\u0002",
    "\u0002\u0002\u0312\u02ee\u0003\u0002\u0002\u0002\u0312\u02f1\u0003\u0002",
    "\u0002\u0002\u0312\u02f3\u0003\u0002\u0002\u0002\u0312\u02fe\u0003\u0002",
    "\u0002\u0002\u0312\u0309\u0003\u0002\u0002\u0002\u0312\u030e\u0003\u0002",
    "\u0002\u0002\u0313\u031e\u0003\u0002\u0002\u0002\u0314\u0315\f\u0004",
    "\u0002\u0002\u0315\u0316\u0005\u0080A\u0002\u0316\u0317\u0005z>\u0005",
    "\u0317\u031d\u0003\u0002\u0002\u0002\u0318\u0319\f\u0003\u0002\u0002",
    "\u0319\u031a\u0005\u0082B\u0002\u031a\u031b\u0005z>\u0004\u031b\u031d",
    "\u0003\u0002\u0002\u0002\u031c\u0314\u0003\u0002\u0002\u0002\u031c\u0318",
    "\u0003\u0002\u0002\u0002\u031d\u0320\u0003\u0002\u0002\u0002\u031e\u031c",
    "\u0003\u0002\u0002\u0002\u031e\u031f\u0003\u0002\u0002\u0002\u031f{",
    "\u0003\u0002\u0002\u0002\u0320\u031e\u0003\u0002\u0002\u0002\u0321\u0328",
    "\u0007\u001a\u0002\u0002\u0322\u0323\u0007\t\u0002\u0002\u0323\u0328",
    "\u0007\t\u0002\u0002\u0324\u0328\u0007\u0019\u0002\u0002\u0325\u0326",
    "\u0007\n\u0002\u0002\u0326\u0328\u0007\n\u0002\u0002\u0327\u0321\u0003",
    "\u0002\u0002\u0002\u0327\u0322\u0003\u0002\u0002\u0002\u0327\u0324\u0003",
    "\u0002\u0002\u0002\u0327\u0325\u0003\u0002\u0002\u0002\u0328}\u0003",
    "\u0002\u0002\u0002\u0329\u0338\u0007\u000b\u0002\u0002\u032a\u0338\u0007",
    "\f\u0002\u0002\u032b\u0338\u0007\r\u0002\u0002\u032c\u032d\u0007\r\u0002",
    "\u0002\u032d\u0338\u0007\u000b\u0002\u0002\u032e\u032f\u0007\f\u0002",
    "\u0002\u032f\u0338\u0007\u000b\u0002\u0002\u0330\u0331\u0007\r\u0002",
    "\u0002\u0331\u0338\u0007\f\u0002\u0002\u0332\u0333\u0007\u0006\u0002",
    "\u0002\u0333\u0338\u0007\u000b\u0002\u0002\u0334\u0335\u0007\r\u0002",
    "\u0002\u0335\u0336\u0007\u000b\u0002\u0002\u0336\u0338\u0007\f\u0002",
    "\u0002\u0337\u0329\u0003\u0002\u0002\u0002\u0337\u032a\u0003\u0002\u0002",
    "\u0002\u0337\u032b\u0003\u0002\u0002\u0002\u0337\u032c\u0003\u0002\u0002",
    "\u0002\u0337\u032e\u0003\u0002\u0002\u0002\u0337\u0330\u0003\u0002\u0002",
    "\u0002\u0337\u0332\u0003\u0002\u0002\u0002\u0337\u0334\u0003\u0002\u0002",
    "\u0002\u0338\u007f\u0003\u0002\u0002\u0002\u0339\u033a\u0007\r\u0002",
    "\u0002\u033a\u0341\u0007\r\u0002\u0002\u033b\u033c\u0007\f\u0002\u0002",
    "\u033c\u0341\u0007\f\u0002\u0002\u033d\u0341\u0007\t\u0002\u0002\u033e",
    "\u0341\u0007\u000e\u0002\u0002\u033f\u0341\u0007\n\u0002\u0002\u0340",
    "\u0339\u0003\u0002\u0002\u0002\u0340\u033b\u0003\u0002\u0002\u0002\u0340",
    "\u033d\u0003\u0002\u0002\u0002\u0340\u033e\u0003\u0002\u0002\u0002\u0340",
    "\u033f\u0003\u0002\u0002\u0002\u0341\u0081\u0003\u0002\u0002\u0002\u0342",
    "\u0343\t\u000b\u0002\u0002\u0343\u0083\u0003\u0002\u0002\u0002\u0344",
    "\u0345\t\f\u0002\u0002\u0345\u0085\u0003\u0002\u0002\u0002\u0346\u0347",
    "\u0005j6\u0002\u0347\u0087\u0003\u0002\u0002\u0002\u0348\u0354\u0005",
    "\u008aF\u0002\u0349\u0354\u0005\u008cG\u0002\u034a\u034b\u0007\u0012",
    "\u0002\u0002\u034b\u0354\u0005\u008cG\u0002\u034c\u0354\u0005\u008e",
    "H\u0002\u034d\u0354\u0007\u0137\u0002\u0002\u034e\u0354\u0007\u0138",
    "\u0002\u0002\u034f\u0351\u0007\u001c\u0002\u0002\u0350\u034f\u0003\u0002",
    "\u0002\u0002\u0350\u0351\u0003\u0002\u0002\u0002\u0351\u0352\u0003\u0002",
    "\u0002\u0002\u0352\u0354\u0007\u011e\u0002\u0002\u0353\u0348\u0003\u0002",
    "\u0002\u0002\u0353\u0349\u0003\u0002\u0002\u0002\u0353\u034a\u0003\u0002",
    "\u0002\u0002\u0353\u034c\u0003\u0002\u0002\u0002\u0353\u034d\u0003\u0002",
    "\u0002\u0002\u0353\u034e\u0003\u0002\u0002\u0002\u0353\u0350\u0003\u0002",
    "\u0002\u0002\u0354\u0089\u0003\u0002\u0002\u0002\u0355\u0356\u0007\u0135",
    "\u0002\u0002\u0356\u008b\u0003\u0002\u0002\u0002\u0357\u0358\t\r\u0002",
    "\u0002\u0358\u008d\u0003\u0002\u0002\u0002\u0359\u035a\t\t\u0002\u0002",
    "\u035a\u008f\u0003\u0002\u0002\u0002_\u009a\u009c\u00a1\u00b0\u00b4",
    "\u00bf\u00c4\u00d8\u00e0\u00e7\u00eb\u00f8\u0105\u0114\u011b\u011f\u0123",
    "\u0127\u012f\u0133\u013a\u013d\u0140\u0143\u0145\u0149\u014d\u0155\u0158",
    "\u015e\u0167\u016c\u0170\u0173\u0179\u0181\u0186\u0189\u018e\u0192\u0197",
    "\u019a\u01a3\u01a8\u01aa\u01af\u01b3\u01bf\u01ca\u01d7\u01dc\u01e9\u01f5",
    "\u0201\u020e\u0213\u0217\u021f\u0222\u0226\u0229\u022f\u0238\u0241\u024d",
    "\u0251\u025a\u0265\u026e\u0277\u027e\u0285\u028f\u02a4\u02ad\u02b2\u02ba",
    "\u02c6\u02cf\u02d5\u02db\u02e6\u02e8\u02f9\u0305\u0312\u031c\u031e\u0327",
    "\u0337\u0340\u0350\u0353"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'.'", "'*'", "','", "'!'", "'SELECT'", "'FROM'", 
                     "'ADD'", "'AS'", "'ALL'", "'ANY'", "'DISTINCT'", "'WHERE'", 
                     "'GROUP'", "'BY'", "'GROUPING'", "'SETS'", "'CUBE'", 
                     "'ROLLUP'", "'ORDER'", "'HAVING'", "'LIMIT'", "'AT'", 
                     "'OR'", "'AND'", "'IN'", "'NOT'", "'NO'", "'EXISTS'", 
                     "'BETWEEN'", "'LIKE'", "'RLIKE'", "'IS'", "'TRUE'", 
                     "'FALSE'", "'NULLS'", "'ASC'", "'DESC'", "'FOR'", "'INTERVAL'", 
                     "'CASE'", "'WHEN'", "'THEN'", "'ELSE'", "'END'", "'JOIN'", 
                     "'CROSS'", "'OUTER'", "'INNER'", "'LEFT'", "'SEMI'", 
                     "'RIGHT'", "'FULL'", "'NATURAL'", "'ON'", "'PIVOT'", 
                     "'LATERAL'", "'WINDOW'", "'OVER'", "'PARTITION'", "'RANGE'", 
                     "'ROWS'", "'UNBOUNDED'", "'PRECEDING'", "'FOLLOWING'", 
                     "'CURRENT'", "'FIRST'", "'AFTER'", "'LAST'", "'WITH'", 
                     "'VALUES'", "'CREATE'", "'TABLE'", "'DIRECTORY'", "'VIEW'", 
                     "'REPLACE'", "'INSERT'", "'DELETE'", "'INTO'", "'DESCRIBE'", 
                     "'EXPLAIN'", "'FORMAT'", "'LOGICAL'", "'CODEGEN'", 
                     "'COST'", "'CAST'", "'SHOW'", "'TABLES'", "'COLUMNS'", 
                     "'COLUMN'", "'USE'", "'PARTITIONS'", "'FUNCTIONS'", 
                     "'DROP'", "'UNION'", "'EXCEPT'", "'SETMINUS'", "'INTERSECT'", 
                     "'TO'", "'TABLESAMPLE'", "'STRATIFY'", "'ALTER'", "'RENAME'", 
                     "'STRUCT'", "'COMMENT'", "'SET'", "'RESET'", "'DATA'", 
                     "'START'", "'TRANSACTION'", "'COMMIT'", "'ROLLBACK'", 
                     "'MACRO'", "'IGNORE'", "'BOTH'", "'LEADING'", "'TRAILING'", 
                     "'IF'", "'POSITION'", "'EXTRACT'", "'EQ'", "'NSEQ'", 
                     "'NEQ'", "'NEQJ'", "'LT'", "'LTE'", "'GT'", "'GTE'", 
                     "'PLUS'", "'MINUS'", "'ASTERISK'", "'SLASH'", "'PERCENT'", 
                     "'DIV'", "'TILDE'", "'AMPERSAND'", "'PIPE'", "'CONCAT_PIPE'", 
                     "'HAT'", "'PERCENTLIT'", "'BUCKET'", "'OUT'", "'OF'", 
                     "'SORT'", "'CLUSTER'", "'DISTRIBUTE'", "'OVERWRITE'", 
                     "'TRANSFORM'", "'REDUCE'", "'USING'", "'SERDE'", "'SERDEPROPERTIES'", 
                     "'RECORDREADER'", "'RECORDWRITER'", "'DELIMITED'", 
                     "'FIELDS'", "'TERMINATED'", "'COLLECTION'", "'ITEMS'", 
                     "'KEYS'", "'ESCAPED'", "'LINES'", "'SEPARATED'", "'FUNCTION'", 
                     "'EXTENDED'", "'REFRESH'", "'CLEAR'", "'CACHE'", "'UNCACHE'", 
                     "'LAZY'", "'FORMATTED'", "'GLOBAL'", "'TEMPORARY'", 
                     "'OPTIONS'", "'UNSET'", "'TBLPROPERTIES'", "'DBPROPERTIES'", 
                     "'BUCKETS'", "'SKEWED'", "'STORED'", "'DIRECTORIES'", 
                     "'LOCATION'", "'EXCHANGE'", "'ARCHIVE'", "'UNARCHIVE'", 
                     "'FILEFORMAT'", "'TOUCH'", "'COMPACT'", "'CONCATENATE'", 
                     "'CHANGE'", "'CASCADE'", "'RESTRICT'", "'CLUSTERED'", 
                     "'SORTED'", "'PURGE'", "'INPUTFORMAT'", "'OUTPUTFORMAT'", 
                     "'DATABASE'", "'DATABASES'", "'DFS'", "'TRUNCATE'", 
                     "'ANALYZE'", "'COMPUTE'", "'LIST'", "'STATISTICS'", 
                     "'PARTITIONED'", "'EXTERNAL'", "'DEFINED'", "'REVOKE'", 
                     "'GRANT'", "'LOCK'", "'UNLOCK'", "'MSCK'", "'REPAIR'", 
                     "'RECOVER'", "'EXPORT'", "'IMPORT'", "'LOAD'", "'ROLE'", 
                     "'ROLES'", "'COMPACTIONS'", "'PRINCIPALS'", "'TRANSACTIONS'", 
                     "'INDEX'", "'INDEXES'", "'LOCKS'", "'OPTION'", "'ANTI'", 
                     "'LOCAL'", "'INPATH'", "'WATERMARK'", "'UNNEST'", "'MATCH_RECOGNIZE'", 
                     "'MEASURES'", "'ONE'", "'PER'", "'MATCH'", "'SKIP1'", 
                     "'NEXT'", "'PAST'", "'PATTERN'", "'WITHIN'", "'DEFINE'", 
                     "'BIGINT_LITERAL'", "'SMALLINT_LITERAL'", "'TINYINT_LITERAL'", 
                     "'INTEGER_VALUE'", "'DECIMAL_VALUE'", "'DOUBLE_LITERAL'", 
                     "'BIGDECIMAL_LITERAL'", "'IDENTIFIER'", "'BACKQUOTED_IDENTIFIER'", 
                     "'SIMPLE_COMMENT'", "'BRACKETED_EMPTY_COMMENT'", "'BRACKETED_COMMENT'", 
                     "'WS'", "'UNRECOGNIZED'", null, null, null, null, "'SYSTEM'", 
                     "'STRING'", "'ARRAY'", "'MAP'", "'CHAR'", "'VARCHAR'", 
                     "'BINARY'", "'VARBINARY'", "'BYTES'", "'DECIMAL'", 
                     "'TINYINT'", "'SMALLINT'", "'INT'", "'BIGINT'", "'FLOAT'", 
                     "'DOUBLE'", "'DATE'", "'TIME'", "'TIMESTAMP'", "'MULTISET'", 
                     "'BOOLEAN'", "'RAW'", "'ROW'", "'NULL'", null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, "';'", "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", 
                     "'`'", "':'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, "ORDER", "HAVING", "LIMIT", "AT", "OR", "AND", 
                      "IN", "NOT", "NO", "EXISTS", "BETWEEN", "LIKE", "RLIKE", 
                      "IS", "TRUE", "FALSE", "NULLS", "ASC", "DESC", "FOR", 
                      "INTERVAL", "CASE", "WHEN", "THEN", "ELSE", "END", 
                      "JOIN", "CROSS", "OUTER", "INNER", "LEFT", "SEMI", 
                      "RIGHT", "FULL", "NATURAL", "ON", "PIVOT", "LATERAL", 
                      "WINDOW", "OVER", "PARTITION", "RANGE", "ROWS", "UNBOUNDED", 
                      "PRECEDING", "FOLLOWING", "CURRENT", "FIRST", "AFTER", 
                      "LAST", "WITH", "VALUES", "CREATE", "TABLE", "DIRECTORY", 
                      "VIEW", "REPLACE", "INSERT", "DELETE", "INTO", "DESCRIBE", 
                      "EXPLAIN", "FORMAT", "LOGICAL", "CODEGEN", "COST", 
                      "CAST", "SHOW", "TABLES", "COLUMNS", "COLUMN", "USE", 
                      "PARTITIONS", "FUNCTIONS", "DROP", "UNION", "EXCEPT", 
                      "SETMINUS", "INTERSECT", "TO", "TABLESAMPLE", "STRATIFY", 
                      "ALTER", "RENAME", "STRUCT", "COMMENT", "SET", "RESET", 
                      "DATA", "START", "TRANSACTION", "COMMIT", "ROLLBACK", 
                      "MACRO", "IGNORE", "BOTH", "LEADING", "TRAILING", 
                      "IF", "POSITION", "EXTRACT", "EQ", "NSEQ", "NEQ", 
                      "NEQJ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", 
                      "ASTERISK", "SLASH", "PERCENT", "DIV", "TILDE", "AMPERSAND", 
                      "PIPE", "CONCAT_PIPE", "HAT", "PERCENTLIT", "BUCKET", 
                      "OUT", "OF", "SORT", "CLUSTER", "DISTRIBUTE", "OVERWRITE", 
                      "TRANSFORM", "REDUCE", "USING", "SERDE", "SERDEPROPERTIES", 
                      "RECORDREADER", "RECORDWRITER", "DELIMITED", "FIELDS", 
                      "TERMINATED", "COLLECTION", "ITEMS", "KEYS", "ESCAPED", 
                      "LINES", "SEPARATED", "FUNCTION", "EXTENDED", "REFRESH", 
                      "CLEAR", "CACHE", "UNCACHE", "LAZY", "FORMATTED", 
                      "GLOBAL", "TEMPORARY", "OPTIONS", "UNSET", "TBLPROPERTIES", 
                      "DBPROPERTIES", "BUCKETS", "SKEWED", "STORED", "DIRECTORIES", 
                      "LOCATION", "EXCHANGE", "ARCHIVE", "UNARCHIVE", "FILEFORMAT", 
                      "TOUCH", "COMPACT", "CONCATENATE", "CHANGE", "CASCADE", 
                      "RESTRICT", "CLUSTERED", "SORTED", "PURGE", "INPUTFORMAT", 
                      "OUTPUTFORMAT", "DATABASE", "DATABASES", "DFS", "TRUNCATE", 
                      "ANALYZE", "COMPUTE", "LIST", "STATISTICS", "PARTITIONED", 
                      "EXTERNAL", "DEFINED", "REVOKE", "GRANT", "LOCK", 
                      "UNLOCK", "MSCK", "REPAIR", "RECOVER", "EXPORT", "IMPORT", 
                      "LOAD", "ROLE", "ROLES", "COMPACTIONS", "PRINCIPALS", 
                      "TRANSACTIONS", "INDEX", "INDEXES", "LOCKS", "OPTION", 
                      "ANTI", "LOCAL", "INPATH", "WATERMARK", "UNNEST", 
                      "MATCH_RECOGNIZE", "MEASURES", "ONE", "PER", "MATCH", 
                      "SKIP1", "NEXT", "PAST", "PATTERN", "WITHIN", "DEFINE", 
                      "BIGINT_LITERAL", "SMALLINT_LITERAL", "TINYINT_LITERAL", 
                      "INTEGER_VALUE", "DECIMAL_VALUE", "DOUBLE_LITERAL", 
                      "BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
                      "SIMPLE_COMMENT", "BRACKETED_EMPTY_COMMENT", "BRACKETED_COMMENT", 
                      "WS", "UNRECOGNIZED", "REVERSE_QUOTE_ID", "DOUBLE_QUOTE_ID", 
                      "DOT_ID", "ID", "SYSTEM", "STRING", "ARRAY", "MAP", 
                      "CHAR", "VARCHAR", "BINARY", "VARBINARY", "BYTES", 
                      "DECIMAL", "TINYINT", "SMALLINT", "INT", "BIGINT", 
                      "FLOAT", "DOUBLE", "DATE", "TIME", "TIMESTAMP", "MULTISET", 
                      "BOOLEAN", "RAW", "ROW", "NULL", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
                      "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", 
                      "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "DOT", "LR_BRACKET", 
                      "RR_BRACKET", "COMMA", "SEMICOLON", "AT_SIGN", "ZERO_DECIMAL", 
                      "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", 
                      "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", 
                      "ASTERISK_SIGN", "STRING_LITERAL", "DECIMAL_LITERAL", 
                      "REAL_LITERAL", "BIT_STRING", "DEC_DIGIT" ];

var ruleNames =  [ "program", "statement", "sqlStatements", "sqlStatement", 
                   "emptyStatement", "ddlStatement", "dmlStatement", "createTable", 
                   "columnOptionDefinition", "columnName", "columnType", 
                   "partitionDefinition", "partitionColumnDefinition", "partitionColumnName", 
                   "createDatabase", "createView", "createFunction", "alterTable", 
                   "renameDefinition", "setKeyValueDefinition", "alterDatabase", 
                   "alterFunction", "dropTable", "dropDatabase", "dropView", 
                   "dropFunction", "queryStatement", "selectStatements", 
                   "selectStatement", "projectItemDefinition", "tableExpression", 
                   "tableReference", "matchRecognize", "tablePrimary", "dynamicTableOptions", 
                   "joinCondition", "booleanExpression", "groupItemDefinition", 
                   "selectWithoutFromDefinition", "projectItem", "queryOrderByDefinition", 
                   "orderItemDefition", "queryLimitDefinition", "countDefinition", 
                   "queryOffsetDefinition", "queryFetchDefinition", "insertStatement", 
                   "insertPartitionDefinition", "valuesDefinition", "valuesRowDefinition", 
                   "allValueDifinition", "uidList", "uid", "withOption", 
                   "ifNotExists", "ifExists", "keyValueDefinition", "expressions", 
                   "expression", "predicate", "expressionAtom", "logicalOperator", 
                   "comparisonOperator", "bitOperator", "mathOperator", 
                   "unaryOperator", "fullColumnName", "constant", "stringLiteral", 
                   "decimalLiteral", "booleanLiteral" ];

function FlinkSqlParserParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

FlinkSqlParserParser.prototype = Object.create(antlr4.Parser.prototype);
FlinkSqlParserParser.prototype.constructor = FlinkSqlParserParser;

Object.defineProperty(FlinkSqlParserParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

FlinkSqlParserParser.EOF = antlr4.Token.EOF;
FlinkSqlParserParser.T__0 = 1;
FlinkSqlParserParser.T__1 = 2;
FlinkSqlParserParser.T__2 = 3;
FlinkSqlParserParser.T__3 = 4;
FlinkSqlParserParser.T__4 = 5;
FlinkSqlParserParser.T__5 = 6;
FlinkSqlParserParser.T__6 = 7;
FlinkSqlParserParser.T__7 = 8;
FlinkSqlParserParser.T__8 = 9;
FlinkSqlParserParser.T__9 = 10;
FlinkSqlParserParser.T__10 = 11;
FlinkSqlParserParser.T__11 = 12;
FlinkSqlParserParser.T__12 = 13;
FlinkSqlParserParser.T__13 = 14;
FlinkSqlParserParser.T__14 = 15;
FlinkSqlParserParser.T__15 = 16;
FlinkSqlParserParser.T__16 = 17;
FlinkSqlParserParser.T__17 = 18;
FlinkSqlParserParser.SPACE = 1;
FlinkSqlParserParser.SPEC_MYSQL_COMMENT = 2;
FlinkSqlParserParser.COMMENT_INPUT = 3;
FlinkSqlParserParser.LINE_COMMENT = 4;
FlinkSqlParserParser.SELECT = 5;
FlinkSqlParserParser.FROM = 6;
FlinkSqlParserParser.ADD = 7;
FlinkSqlParserParser.AS = 8;
FlinkSqlParserParser.ALL = 9;
FlinkSqlParserParser.ANY = 10;
FlinkSqlParserParser.DISTINCT = 11;
FlinkSqlParserParser.WHERE = 12;
FlinkSqlParserParser.GROUP = 13;
FlinkSqlParserParser.BY = 14;
FlinkSqlParserParser.GROUPING = 15;
FlinkSqlParserParser.SETS = 16;
FlinkSqlParserParser.CUBE = 17;
FlinkSqlParserParser.ROLLUP = 18;
FlinkSqlParserParser.ORDER = 19;
FlinkSqlParserParser.HAVING = 20;
FlinkSqlParserParser.LIMIT = 21;
FlinkSqlParserParser.AT = 22;
FlinkSqlParserParser.OR = 23;
FlinkSqlParserParser.AND = 24;
FlinkSqlParserParser.IN = 25;
FlinkSqlParserParser.NOT = 26;
FlinkSqlParserParser.NO = 27;
FlinkSqlParserParser.EXISTS = 28;
FlinkSqlParserParser.BETWEEN = 29;
FlinkSqlParserParser.LIKE = 30;
FlinkSqlParserParser.RLIKE = 31;
FlinkSqlParserParser.IS = 32;
FlinkSqlParserParser.TRUE = 33;
FlinkSqlParserParser.FALSE = 34;
FlinkSqlParserParser.NULLS = 35;
FlinkSqlParserParser.ASC = 36;
FlinkSqlParserParser.DESC = 37;
FlinkSqlParserParser.FOR = 38;
FlinkSqlParserParser.INTERVAL = 39;
FlinkSqlParserParser.CASE = 40;
FlinkSqlParserParser.WHEN = 41;
FlinkSqlParserParser.THEN = 42;
FlinkSqlParserParser.ELSE = 43;
FlinkSqlParserParser.END = 44;
FlinkSqlParserParser.JOIN = 45;
FlinkSqlParserParser.CROSS = 46;
FlinkSqlParserParser.OUTER = 47;
FlinkSqlParserParser.INNER = 48;
FlinkSqlParserParser.LEFT = 49;
FlinkSqlParserParser.SEMI = 50;
FlinkSqlParserParser.RIGHT = 51;
FlinkSqlParserParser.FULL = 52;
FlinkSqlParserParser.NATURAL = 53;
FlinkSqlParserParser.ON = 54;
FlinkSqlParserParser.PIVOT = 55;
FlinkSqlParserParser.LATERAL = 56;
FlinkSqlParserParser.WINDOW = 57;
FlinkSqlParserParser.OVER = 58;
FlinkSqlParserParser.PARTITION = 59;
FlinkSqlParserParser.RANGE = 60;
FlinkSqlParserParser.ROWS = 61;
FlinkSqlParserParser.UNBOUNDED = 62;
FlinkSqlParserParser.PRECEDING = 63;
FlinkSqlParserParser.FOLLOWING = 64;
FlinkSqlParserParser.CURRENT = 65;
FlinkSqlParserParser.FIRST = 66;
FlinkSqlParserParser.AFTER = 67;
FlinkSqlParserParser.LAST = 68;
FlinkSqlParserParser.WITH = 69;
FlinkSqlParserParser.VALUES = 70;
FlinkSqlParserParser.CREATE = 71;
FlinkSqlParserParser.TABLE = 72;
FlinkSqlParserParser.DIRECTORY = 73;
FlinkSqlParserParser.VIEW = 74;
FlinkSqlParserParser.REPLACE = 75;
FlinkSqlParserParser.INSERT = 76;
FlinkSqlParserParser.DELETE = 77;
FlinkSqlParserParser.INTO = 78;
FlinkSqlParserParser.DESCRIBE = 79;
FlinkSqlParserParser.EXPLAIN = 80;
FlinkSqlParserParser.FORMAT = 81;
FlinkSqlParserParser.LOGICAL = 82;
FlinkSqlParserParser.CODEGEN = 83;
FlinkSqlParserParser.COST = 84;
FlinkSqlParserParser.CAST = 85;
FlinkSqlParserParser.SHOW = 86;
FlinkSqlParserParser.TABLES = 87;
FlinkSqlParserParser.COLUMNS = 88;
FlinkSqlParserParser.COLUMN = 89;
FlinkSqlParserParser.USE = 90;
FlinkSqlParserParser.PARTITIONS = 91;
FlinkSqlParserParser.FUNCTIONS = 92;
FlinkSqlParserParser.DROP = 93;
FlinkSqlParserParser.UNION = 94;
FlinkSqlParserParser.EXCEPT = 95;
FlinkSqlParserParser.SETMINUS = 96;
FlinkSqlParserParser.INTERSECT = 97;
FlinkSqlParserParser.TO = 98;
FlinkSqlParserParser.TABLESAMPLE = 99;
FlinkSqlParserParser.STRATIFY = 100;
FlinkSqlParserParser.ALTER = 101;
FlinkSqlParserParser.RENAME = 102;
FlinkSqlParserParser.STRUCT = 103;
FlinkSqlParserParser.COMMENT = 104;
FlinkSqlParserParser.SET = 105;
FlinkSqlParserParser.RESET = 106;
FlinkSqlParserParser.DATA = 107;
FlinkSqlParserParser.START = 108;
FlinkSqlParserParser.TRANSACTION = 109;
FlinkSqlParserParser.COMMIT = 110;
FlinkSqlParserParser.ROLLBACK = 111;
FlinkSqlParserParser.MACRO = 112;
FlinkSqlParserParser.IGNORE = 113;
FlinkSqlParserParser.BOTH = 114;
FlinkSqlParserParser.LEADING = 115;
FlinkSqlParserParser.TRAILING = 116;
FlinkSqlParserParser.IF = 117;
FlinkSqlParserParser.POSITION = 118;
FlinkSqlParserParser.EXTRACT = 119;
FlinkSqlParserParser.EQ = 120;
FlinkSqlParserParser.NSEQ = 121;
FlinkSqlParserParser.NEQ = 122;
FlinkSqlParserParser.NEQJ = 123;
FlinkSqlParserParser.LT = 124;
FlinkSqlParserParser.LTE = 125;
FlinkSqlParserParser.GT = 126;
FlinkSqlParserParser.GTE = 127;
FlinkSqlParserParser.PLUS = 128;
FlinkSqlParserParser.MINUS = 129;
FlinkSqlParserParser.ASTERISK = 130;
FlinkSqlParserParser.SLASH = 131;
FlinkSqlParserParser.PERCENT = 132;
FlinkSqlParserParser.DIV = 133;
FlinkSqlParserParser.TILDE = 134;
FlinkSqlParserParser.AMPERSAND = 135;
FlinkSqlParserParser.PIPE = 136;
FlinkSqlParserParser.CONCAT_PIPE = 137;
FlinkSqlParserParser.HAT = 138;
FlinkSqlParserParser.PERCENTLIT = 139;
FlinkSqlParserParser.BUCKET = 140;
FlinkSqlParserParser.OUT = 141;
FlinkSqlParserParser.OF = 142;
FlinkSqlParserParser.SORT = 143;
FlinkSqlParserParser.CLUSTER = 144;
FlinkSqlParserParser.DISTRIBUTE = 145;
FlinkSqlParserParser.OVERWRITE = 146;
FlinkSqlParserParser.TRANSFORM = 147;
FlinkSqlParserParser.REDUCE = 148;
FlinkSqlParserParser.USING = 149;
FlinkSqlParserParser.SERDE = 150;
FlinkSqlParserParser.SERDEPROPERTIES = 151;
FlinkSqlParserParser.RECORDREADER = 152;
FlinkSqlParserParser.RECORDWRITER = 153;
FlinkSqlParserParser.DELIMITED = 154;
FlinkSqlParserParser.FIELDS = 155;
FlinkSqlParserParser.TERMINATED = 156;
FlinkSqlParserParser.COLLECTION = 157;
FlinkSqlParserParser.ITEMS = 158;
FlinkSqlParserParser.KEYS = 159;
FlinkSqlParserParser.ESCAPED = 160;
FlinkSqlParserParser.LINES = 161;
FlinkSqlParserParser.SEPARATED = 162;
FlinkSqlParserParser.FUNCTION = 163;
FlinkSqlParserParser.EXTENDED = 164;
FlinkSqlParserParser.REFRESH = 165;
FlinkSqlParserParser.CLEAR = 166;
FlinkSqlParserParser.CACHE = 167;
FlinkSqlParserParser.UNCACHE = 168;
FlinkSqlParserParser.LAZY = 169;
FlinkSqlParserParser.FORMATTED = 170;
FlinkSqlParserParser.GLOBAL = 171;
FlinkSqlParserParser.TEMPORARY = 172;
FlinkSqlParserParser.OPTIONS = 173;
FlinkSqlParserParser.UNSET = 174;
FlinkSqlParserParser.TBLPROPERTIES = 175;
FlinkSqlParserParser.DBPROPERTIES = 176;
FlinkSqlParserParser.BUCKETS = 177;
FlinkSqlParserParser.SKEWED = 178;
FlinkSqlParserParser.STORED = 179;
FlinkSqlParserParser.DIRECTORIES = 180;
FlinkSqlParserParser.LOCATION = 181;
FlinkSqlParserParser.EXCHANGE = 182;
FlinkSqlParserParser.ARCHIVE = 183;
FlinkSqlParserParser.UNARCHIVE = 184;
FlinkSqlParserParser.FILEFORMAT = 185;
FlinkSqlParserParser.TOUCH = 186;
FlinkSqlParserParser.COMPACT = 187;
FlinkSqlParserParser.CONCATENATE = 188;
FlinkSqlParserParser.CHANGE = 189;
FlinkSqlParserParser.CASCADE = 190;
FlinkSqlParserParser.RESTRICT = 191;
FlinkSqlParserParser.CLUSTERED = 192;
FlinkSqlParserParser.SORTED = 193;
FlinkSqlParserParser.PURGE = 194;
FlinkSqlParserParser.INPUTFORMAT = 195;
FlinkSqlParserParser.OUTPUTFORMAT = 196;
FlinkSqlParserParser.DATABASE = 197;
FlinkSqlParserParser.DATABASES = 198;
FlinkSqlParserParser.DFS = 199;
FlinkSqlParserParser.TRUNCATE = 200;
FlinkSqlParserParser.ANALYZE = 201;
FlinkSqlParserParser.COMPUTE = 202;
FlinkSqlParserParser.LIST = 203;
FlinkSqlParserParser.STATISTICS = 204;
FlinkSqlParserParser.PARTITIONED = 205;
FlinkSqlParserParser.EXTERNAL = 206;
FlinkSqlParserParser.DEFINED = 207;
FlinkSqlParserParser.REVOKE = 208;
FlinkSqlParserParser.GRANT = 209;
FlinkSqlParserParser.LOCK = 210;
FlinkSqlParserParser.UNLOCK = 211;
FlinkSqlParserParser.MSCK = 212;
FlinkSqlParserParser.REPAIR = 213;
FlinkSqlParserParser.RECOVER = 214;
FlinkSqlParserParser.EXPORT = 215;
FlinkSqlParserParser.IMPORT = 216;
FlinkSqlParserParser.LOAD = 217;
FlinkSqlParserParser.ROLE = 218;
FlinkSqlParserParser.ROLES = 219;
FlinkSqlParserParser.COMPACTIONS = 220;
FlinkSqlParserParser.PRINCIPALS = 221;
FlinkSqlParserParser.TRANSACTIONS = 222;
FlinkSqlParserParser.INDEX = 223;
FlinkSqlParserParser.INDEXES = 224;
FlinkSqlParserParser.LOCKS = 225;
FlinkSqlParserParser.OPTION = 226;
FlinkSqlParserParser.ANTI = 227;
FlinkSqlParserParser.LOCAL = 228;
FlinkSqlParserParser.INPATH = 229;
FlinkSqlParserParser.WATERMARK = 230;
FlinkSqlParserParser.UNNEST = 231;
FlinkSqlParserParser.MATCH_RECOGNIZE = 232;
FlinkSqlParserParser.MEASURES = 233;
FlinkSqlParserParser.ONE = 234;
FlinkSqlParserParser.PER = 235;
FlinkSqlParserParser.MATCH = 236;
FlinkSqlParserParser.SKIP1 = 237;
FlinkSqlParserParser.NEXT = 238;
FlinkSqlParserParser.PAST = 239;
FlinkSqlParserParser.PATTERN = 240;
FlinkSqlParserParser.WITHIN = 241;
FlinkSqlParserParser.DEFINE = 242;
FlinkSqlParserParser.BIGINT_LITERAL = 243;
FlinkSqlParserParser.SMALLINT_LITERAL = 244;
FlinkSqlParserParser.TINYINT_LITERAL = 245;
FlinkSqlParserParser.INTEGER_VALUE = 246;
FlinkSqlParserParser.DECIMAL_VALUE = 247;
FlinkSqlParserParser.DOUBLE_LITERAL = 248;
FlinkSqlParserParser.BIGDECIMAL_LITERAL = 249;
FlinkSqlParserParser.IDENTIFIER = 250;
FlinkSqlParserParser.BACKQUOTED_IDENTIFIER = 251;
FlinkSqlParserParser.SIMPLE_COMMENT = 252;
FlinkSqlParserParser.BRACKETED_EMPTY_COMMENT = 253;
FlinkSqlParserParser.BRACKETED_COMMENT = 254;
FlinkSqlParserParser.WS = 255;
FlinkSqlParserParser.UNRECOGNIZED = 256;
FlinkSqlParserParser.REVERSE_QUOTE_ID = 257;
FlinkSqlParserParser.DOUBLE_QUOTE_ID = 258;
FlinkSqlParserParser.DOT_ID = 259;
FlinkSqlParserParser.ID = 260;
FlinkSqlParserParser.SYSTEM = 261;
FlinkSqlParserParser.STRING = 262;
FlinkSqlParserParser.ARRAY = 263;
FlinkSqlParserParser.MAP = 264;
FlinkSqlParserParser.CHAR = 265;
FlinkSqlParserParser.VARCHAR = 266;
FlinkSqlParserParser.BINARY = 267;
FlinkSqlParserParser.VARBINARY = 268;
FlinkSqlParserParser.BYTES = 269;
FlinkSqlParserParser.DECIMAL = 270;
FlinkSqlParserParser.TINYINT = 271;
FlinkSqlParserParser.SMALLINT = 272;
FlinkSqlParserParser.INT = 273;
FlinkSqlParserParser.BIGINT = 274;
FlinkSqlParserParser.FLOAT = 275;
FlinkSqlParserParser.DOUBLE = 276;
FlinkSqlParserParser.DATE = 277;
FlinkSqlParserParser.TIME = 278;
FlinkSqlParserParser.TIMESTAMP = 279;
FlinkSqlParserParser.MULTISET = 280;
FlinkSqlParserParser.BOOLEAN = 281;
FlinkSqlParserParser.RAW = 282;
FlinkSqlParserParser.ROW = 283;
FlinkSqlParserParser.NULL = 284;
FlinkSqlParserParser.EQUAL_SYMBOL = 285;
FlinkSqlParserParser.GREATER_SYMBOL = 286;
FlinkSqlParserParser.LESS_SYMBOL = 287;
FlinkSqlParserParser.EXCLAMATION_SYMBOL = 288;
FlinkSqlParserParser.BIT_NOT_OP = 289;
FlinkSqlParserParser.BIT_OR_OP = 290;
FlinkSqlParserParser.BIT_AND_OP = 291;
FlinkSqlParserParser.BIT_XOR_OP = 292;
FlinkSqlParserParser.DOT = 293;
FlinkSqlParserParser.LR_BRACKET = 294;
FlinkSqlParserParser.RR_BRACKET = 295;
FlinkSqlParserParser.COMMA = 296;
FlinkSqlParserParser.SEMICOLON = 297;
FlinkSqlParserParser.AT_SIGN = 298;
FlinkSqlParserParser.ZERO_DECIMAL = 299;
FlinkSqlParserParser.ONE_DECIMAL = 300;
FlinkSqlParserParser.TWO_DECIMAL = 301;
FlinkSqlParserParser.SINGLE_QUOTE_SYMB = 302;
FlinkSqlParserParser.DOUBLE_QUOTE_SYMB = 303;
FlinkSqlParserParser.REVERSE_QUOTE_SYMB = 304;
FlinkSqlParserParser.COLON_SYMB = 305;
FlinkSqlParserParser.ASTERISK_SIGN = 306;
FlinkSqlParserParser.STRING_LITERAL = 307;
FlinkSqlParserParser.DECIMAL_LITERAL = 308;
FlinkSqlParserParser.REAL_LITERAL = 309;
FlinkSqlParserParser.BIT_STRING = 310;
FlinkSqlParserParser.DEC_DIGIT = 311;

FlinkSqlParserParser.RULE_program = 0;
FlinkSqlParserParser.RULE_statement = 1;
FlinkSqlParserParser.RULE_sqlStatements = 2;
FlinkSqlParserParser.RULE_sqlStatement = 3;
FlinkSqlParserParser.RULE_emptyStatement = 4;
FlinkSqlParserParser.RULE_ddlStatement = 5;
FlinkSqlParserParser.RULE_dmlStatement = 6;
FlinkSqlParserParser.RULE_createTable = 7;
FlinkSqlParserParser.RULE_columnOptionDefinition = 8;
FlinkSqlParserParser.RULE_columnName = 9;
FlinkSqlParserParser.RULE_columnType = 10;
FlinkSqlParserParser.RULE_partitionDefinition = 11;
FlinkSqlParserParser.RULE_partitionColumnDefinition = 12;
FlinkSqlParserParser.RULE_partitionColumnName = 13;
FlinkSqlParserParser.RULE_createDatabase = 14;
FlinkSqlParserParser.RULE_createView = 15;
FlinkSqlParserParser.RULE_createFunction = 16;
FlinkSqlParserParser.RULE_alterTable = 17;
FlinkSqlParserParser.RULE_renameDefinition = 18;
FlinkSqlParserParser.RULE_setKeyValueDefinition = 19;
FlinkSqlParserParser.RULE_alterDatabase = 20;
FlinkSqlParserParser.RULE_alterFunction = 21;
FlinkSqlParserParser.RULE_dropTable = 22;
FlinkSqlParserParser.RULE_dropDatabase = 23;
FlinkSqlParserParser.RULE_dropView = 24;
FlinkSqlParserParser.RULE_dropFunction = 25;
FlinkSqlParserParser.RULE_queryStatement = 26;
FlinkSqlParserParser.RULE_selectStatements = 27;
FlinkSqlParserParser.RULE_selectStatement = 28;
FlinkSqlParserParser.RULE_projectItemDefinition = 29;
FlinkSqlParserParser.RULE_tableExpression = 30;
FlinkSqlParserParser.RULE_tableReference = 31;
FlinkSqlParserParser.RULE_matchRecognize = 32;
FlinkSqlParserParser.RULE_tablePrimary = 33;
FlinkSqlParserParser.RULE_dynamicTableOptions = 34;
FlinkSqlParserParser.RULE_joinCondition = 35;
FlinkSqlParserParser.RULE_booleanExpression = 36;
FlinkSqlParserParser.RULE_groupItemDefinition = 37;
FlinkSqlParserParser.RULE_selectWithoutFromDefinition = 38;
FlinkSqlParserParser.RULE_projectItem = 39;
FlinkSqlParserParser.RULE_queryOrderByDefinition = 40;
FlinkSqlParserParser.RULE_orderItemDefition = 41;
FlinkSqlParserParser.RULE_queryLimitDefinition = 42;
FlinkSqlParserParser.RULE_countDefinition = 43;
FlinkSqlParserParser.RULE_queryOffsetDefinition = 44;
FlinkSqlParserParser.RULE_queryFetchDefinition = 45;
FlinkSqlParserParser.RULE_insertStatement = 46;
FlinkSqlParserParser.RULE_insertPartitionDefinition = 47;
FlinkSqlParserParser.RULE_valuesDefinition = 48;
FlinkSqlParserParser.RULE_valuesRowDefinition = 49;
FlinkSqlParserParser.RULE_allValueDifinition = 50;
FlinkSqlParserParser.RULE_uidList = 51;
FlinkSqlParserParser.RULE_uid = 52;
FlinkSqlParserParser.RULE_withOption = 53;
FlinkSqlParserParser.RULE_ifNotExists = 54;
FlinkSqlParserParser.RULE_ifExists = 55;
FlinkSqlParserParser.RULE_keyValueDefinition = 56;
FlinkSqlParserParser.RULE_expressions = 57;
FlinkSqlParserParser.RULE_expression = 58;
FlinkSqlParserParser.RULE_predicate = 59;
FlinkSqlParserParser.RULE_expressionAtom = 60;
FlinkSqlParserParser.RULE_logicalOperator = 61;
FlinkSqlParserParser.RULE_comparisonOperator = 62;
FlinkSqlParserParser.RULE_bitOperator = 63;
FlinkSqlParserParser.RULE_mathOperator = 64;
FlinkSqlParserParser.RULE_unaryOperator = 65;
FlinkSqlParserParser.RULE_fullColumnName = 66;
FlinkSqlParserParser.RULE_constant = 67;
FlinkSqlParserParser.RULE_stringLiteral = 68;
FlinkSqlParserParser.RULE_decimalLiteral = 69;
FlinkSqlParserParser.RULE_booleanLiteral = 70;


function ProgramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_program;
    return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ProgramContext.prototype.EOF = function() {
    return this.getToken(FlinkSqlParserParser.EOF, 0);
};

ProgramContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterProgram(this);
	}
};

ProgramContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitProgram(this);
	}
};

ProgramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitProgram(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.ProgramContext = ProgramContext;

FlinkSqlParserParser.prototype.program = function() {

    var localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, FlinkSqlParserParser.RULE_program);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 142;
        this.statement();
        this.state = 143;
        this.match(FlinkSqlParserParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.sqlStatements = function() {
    return this.getTypedRuleContext(SqlStatementsContext,0);
};

StatementContext.prototype.EOF = function() {
    return this.getToken(FlinkSqlParserParser.EOF, 0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitStatement(this);
	}
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.StatementContext = StatementContext;

FlinkSqlParserParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, FlinkSqlParserParser.RULE_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 145;
        this.sqlStatements();
        this.state = 146;
        this.match(FlinkSqlParserParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SqlStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_sqlStatements;
    return this;
}

SqlStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SqlStatementsContext.prototype.constructor = SqlStatementsContext;

SqlStatementsContext.prototype.sqlStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SqlStatementContext);
    } else {
        return this.getTypedRuleContext(SqlStatementContext,i);
    }
};

SqlStatementsContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.SEMICOLON);
    } else {
        return this.getToken(FlinkSqlParserParser.SEMICOLON, i);
    }
};


SqlStatementsContext.prototype.emptyStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EmptyStatementContext);
    } else {
        return this.getTypedRuleContext(EmptyStatementContext,i);
    }
};

SqlStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSqlStatements(this);
	}
};

SqlStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSqlStatements(this);
	}
};

SqlStatementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSqlStatements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.SqlStatementsContext = SqlStatementsContext;

FlinkSqlParserParser.prototype.sqlStatements = function() {

    var localctx = new SqlStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, FlinkSqlParserParser.RULE_sqlStatements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 154;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParserParser.T__4 || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (FlinkSqlParserParser.VALUES - 70)) | (1 << (FlinkSqlParserParser.CREATE - 70)) | (1 << (FlinkSqlParserParser.INSERT - 70)) | (1 << (FlinkSqlParserParser.DROP - 70)) | (1 << (FlinkSqlParserParser.ALTER - 70)))) !== 0) || _la===FlinkSqlParserParser.SEMICOLON) {
            this.state = 152;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
            switch(la_) {
            case 1:
                this.state = 148;
                this.sqlStatement();
                this.state = 149;
                this.match(FlinkSqlParserParser.SEMICOLON);
                break;

            case 2:
                this.state = 151;
                this.emptyStatement();
                break;

            }
            this.state = 156;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SqlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_sqlStatement;
    return this;
}

SqlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SqlStatementContext.prototype.constructor = SqlStatementContext;

SqlStatementContext.prototype.ddlStatement = function() {
    return this.getTypedRuleContext(DdlStatementContext,0);
};

SqlStatementContext.prototype.dmlStatement = function() {
    return this.getTypedRuleContext(DmlStatementContext,0);
};

SqlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSqlStatement(this);
	}
};

SqlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSqlStatement(this);
	}
};

SqlStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSqlStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.SqlStatementContext = SqlStatementContext;

FlinkSqlParserParser.prototype.sqlStatement = function() {

    var localctx = new SqlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, FlinkSqlParserParser.RULE_sqlStatement);
    try {
        this.state = 159;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParserParser.CREATE:
        case FlinkSqlParserParser.DROP:
        case FlinkSqlParserParser.ALTER:
        case FlinkSqlParserParser.SEMICOLON:
            this.enterOuterAlt(localctx, 1);
            this.state = 157;
            this.ddlStatement();
            break;
        case FlinkSqlParserParser.T__4:
        case FlinkSqlParserParser.VALUES:
        case FlinkSqlParserParser.INSERT:
            this.enterOuterAlt(localctx, 2);
            this.state = 158;
            this.dmlStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EmptyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_emptyStatement;
    return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;

EmptyStatementContext.prototype.SEMICOLON = function() {
    return this.getToken(FlinkSqlParserParser.SEMICOLON, 0);
};

EmptyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitEmptyStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.EmptyStatementContext = EmptyStatementContext;

FlinkSqlParserParser.prototype.emptyStatement = function() {

    var localctx = new EmptyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, FlinkSqlParserParser.RULE_emptyStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 161;
        this.match(FlinkSqlParserParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DdlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_ddlStatement;
    return this;
}

DdlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DdlStatementContext.prototype.constructor = DdlStatementContext;

DdlStatementContext.prototype.createTable = function() {
    return this.getTypedRuleContext(CreateTableContext,0);
};

DdlStatementContext.prototype.createDatabase = function() {
    return this.getTypedRuleContext(CreateDatabaseContext,0);
};

DdlStatementContext.prototype.createView = function() {
    return this.getTypedRuleContext(CreateViewContext,0);
};

DdlStatementContext.prototype.createFunction = function() {
    return this.getTypedRuleContext(CreateFunctionContext,0);
};

DdlStatementContext.prototype.alterTable = function() {
    return this.getTypedRuleContext(AlterTableContext,0);
};

DdlStatementContext.prototype.alterDatabase = function() {
    return this.getTypedRuleContext(AlterDatabaseContext,0);
};

DdlStatementContext.prototype.alterFunction = function() {
    return this.getTypedRuleContext(AlterFunctionContext,0);
};

DdlStatementContext.prototype.dropTable = function() {
    return this.getTypedRuleContext(DropTableContext,0);
};

DdlStatementContext.prototype.dropDatabase = function() {
    return this.getTypedRuleContext(DropDatabaseContext,0);
};

DdlStatementContext.prototype.dropView = function() {
    return this.getTypedRuleContext(DropViewContext,0);
};

DdlStatementContext.prototype.dropFunction = function() {
    return this.getTypedRuleContext(DropFunctionContext,0);
};

DdlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDdlStatement(this);
	}
};

DdlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDdlStatement(this);
	}
};

DdlStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDdlStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.DdlStatementContext = DdlStatementContext;

FlinkSqlParserParser.prototype.ddlStatement = function() {

    var localctx = new DdlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, FlinkSqlParserParser.RULE_ddlStatement);
    try {
        this.state = 174;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 163;
            this.createTable();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 164;
            this.createDatabase();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 165;
            this.createView();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 166;
            this.createFunction();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 167;
            this.alterTable();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 168;
            this.alterDatabase();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 169;
            this.alterFunction();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 170;
            this.dropTable();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 171;
            this.dropDatabase();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 172;
            this.dropView();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 173;
            this.dropFunction();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DmlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_dmlStatement;
    return this;
}

DmlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DmlStatementContext.prototype.constructor = DmlStatementContext;

DmlStatementContext.prototype.queryStatement = function() {
    return this.getTypedRuleContext(QueryStatementContext,0);
};

DmlStatementContext.prototype.insertStatement = function() {
    return this.getTypedRuleContext(InsertStatementContext,0);
};

DmlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDmlStatement(this);
	}
};

DmlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDmlStatement(this);
	}
};

DmlStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDmlStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.DmlStatementContext = DmlStatementContext;

FlinkSqlParserParser.prototype.dmlStatement = function() {

    var localctx = new DmlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, FlinkSqlParserParser.RULE_dmlStatement);
    try {
        this.state = 178;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParserParser.T__4:
        case FlinkSqlParserParser.VALUES:
            this.enterOuterAlt(localctx, 1);
            this.state = 176;
            this.queryStatement();
            break;
        case FlinkSqlParserParser.INSERT:
            this.enterOuterAlt(localctx, 2);
            this.state = 177;
            this.insertStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_createTable;
    return this;
}

CreateTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableContext.prototype.constructor = CreateTableContext;

CreateTableContext.prototype.CREATE = function() {
    return this.getToken(FlinkSqlParserParser.CREATE, 0);
};

CreateTableContext.prototype.TABLE = function() {
    return this.getToken(FlinkSqlParserParser.TABLE, 0);
};

CreateTableContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CreateTableContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParserParser.LR_BRACKET, 0);
};

CreateTableContext.prototype.columnOptionDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnOptionDefinitionContext);
    } else {
        return this.getTypedRuleContext(ColumnOptionDefinitionContext,i);
    }
};

CreateTableContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParserParser.RR_BRACKET, 0);
};

CreateTableContext.prototype.withOption = function() {
    return this.getTypedRuleContext(WithOptionContext,0);
};

CreateTableContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParserParser.COMMA, i);
    }
};


CreateTableContext.prototype.partitionDefinition = function() {
    return this.getTypedRuleContext(PartitionDefinitionContext,0);
};

CreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCreateTable(this);
	}
};

CreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCreateTable(this);
	}
};

CreateTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCreateTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.CreateTableContext = CreateTableContext;

FlinkSqlParserParser.prototype.createTable = function() {

    var localctx = new CreateTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, FlinkSqlParserParser.RULE_createTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 180;
        this.match(FlinkSqlParserParser.CREATE);
        this.state = 181;
        this.match(FlinkSqlParserParser.TABLE);
        this.state = 182;
        this.uid();
        this.state = 183;
        this.match(FlinkSqlParserParser.LR_BRACKET);
        this.state = 184;
        this.columnOptionDefinition();
        this.state = 189;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParserParser.COMMA) {
            this.state = 185;
            this.match(FlinkSqlParserParser.COMMA);
            this.state = 186;
            this.columnOptionDefinition();
            this.state = 191;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 192;
        this.match(FlinkSqlParserParser.RR_BRACKET);
        this.state = 194;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParserParser.PARTITIONED) {
            this.state = 193;
            this.partitionDefinition();
        }

        this.state = 196;
        this.withOption();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnOptionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_columnOptionDefinition;
    return this;
}

ColumnOptionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnOptionDefinitionContext.prototype.constructor = ColumnOptionDefinitionContext;

ColumnOptionDefinitionContext.prototype.columnName = function() {
    return this.getTypedRuleContext(ColumnNameContext,0);
};

ColumnOptionDefinitionContext.prototype.columnType = function() {
    return this.getTypedRuleContext(ColumnTypeContext,0);
};

ColumnOptionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterColumnOptionDefinition(this);
	}
};

ColumnOptionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitColumnOptionDefinition(this);
	}
};

ColumnOptionDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitColumnOptionDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.ColumnOptionDefinitionContext = ColumnOptionDefinitionContext;

FlinkSqlParserParser.prototype.columnOptionDefinition = function() {

    var localctx = new ColumnOptionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, FlinkSqlParserParser.RULE_columnOptionDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 198;
        this.columnName();
        this.state = 199;
        this.columnType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_columnName;
    return this;
}

ColumnNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameContext.prototype.constructor = ColumnNameContext;

ColumnNameContext.prototype.ID = function() {
    return this.getToken(FlinkSqlParserParser.ID, 0);
};

ColumnNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterColumnName(this);
	}
};

ColumnNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitColumnName(this);
	}
};

ColumnNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitColumnName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.ColumnNameContext = ColumnNameContext;

FlinkSqlParserParser.prototype.columnName = function() {

    var localctx = new ColumnNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, FlinkSqlParserParser.RULE_columnName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 201;
        this.match(FlinkSqlParserParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_columnType;
    return this;
}

ColumnTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnTypeContext.prototype.constructor = ColumnTypeContext;

ColumnTypeContext.prototype.CHAR = function() {
    return this.getToken(FlinkSqlParserParser.CHAR, 0);
};

ColumnTypeContext.prototype.VARCHAR = function() {
    return this.getToken(FlinkSqlParserParser.VARCHAR, 0);
};

ColumnTypeContext.prototype.STRING = function() {
    return this.getToken(FlinkSqlParserParser.STRING, 0);
};

ColumnTypeContext.prototype.BINARY = function() {
    return this.getToken(FlinkSqlParserParser.BINARY, 0);
};

ColumnTypeContext.prototype.VARBINARY = function() {
    return this.getToken(FlinkSqlParserParser.VARBINARY, 0);
};

ColumnTypeContext.prototype.BYTES = function() {
    return this.getToken(FlinkSqlParserParser.BYTES, 0);
};

ColumnTypeContext.prototype.DECIMAL = function() {
    return this.getToken(FlinkSqlParserParser.DECIMAL, 0);
};

ColumnTypeContext.prototype.TINYINT = function() {
    return this.getToken(FlinkSqlParserParser.TINYINT, 0);
};

ColumnTypeContext.prototype.SMALLINT = function() {
    return this.getToken(FlinkSqlParserParser.SMALLINT, 0);
};

ColumnTypeContext.prototype.INT = function() {
    return this.getToken(FlinkSqlParserParser.INT, 0);
};

ColumnTypeContext.prototype.BIGINT = function() {
    return this.getToken(FlinkSqlParserParser.BIGINT, 0);
};

ColumnTypeContext.prototype.FLOAT = function() {
    return this.getToken(FlinkSqlParserParser.FLOAT, 0);
};

ColumnTypeContext.prototype.DOUBLE = function() {
    return this.getToken(FlinkSqlParserParser.DOUBLE, 0);
};

ColumnTypeContext.prototype.DATE = function() {
    return this.getToken(FlinkSqlParserParser.DATE, 0);
};

ColumnTypeContext.prototype.TIME = function() {
    return this.getToken(FlinkSqlParserParser.TIME, 0);
};

ColumnTypeContext.prototype.TIMESTAMP = function() {
    return this.getToken(FlinkSqlParserParser.TIMESTAMP, 0);
};

ColumnTypeContext.prototype.ARRAY = function() {
    return this.getToken(FlinkSqlParserParser.ARRAY, 0);
};

ColumnTypeContext.prototype.MAP = function() {
    return this.getToken(FlinkSqlParserParser.MAP, 0);
};

ColumnTypeContext.prototype.MULTISET = function() {
    return this.getToken(FlinkSqlParserParser.MULTISET, 0);
};

ColumnTypeContext.prototype.ROW = function() {
    return this.getToken(FlinkSqlParserParser.ROW, 0);
};

ColumnTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(FlinkSqlParserParser.BOOLEAN, 0);
};

ColumnTypeContext.prototype.RAW = function() {
    return this.getToken(FlinkSqlParserParser.RAW, 0);
};

ColumnTypeContext.prototype.NULL = function() {
    return this.getToken(FlinkSqlParserParser.NULL, 0);
};

ColumnTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterColumnType(this);
	}
};

ColumnTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitColumnType(this);
	}
};

ColumnTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitColumnType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.ColumnTypeContext = ColumnTypeContext;

FlinkSqlParserParser.prototype.columnType = function() {

    var localctx = new ColumnTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, FlinkSqlParserParser.RULE_columnType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 203;
        _la = this._input.LA(1);
        if(!(((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (FlinkSqlParserParser.STRING - 262)) | (1 << (FlinkSqlParserParser.ARRAY - 262)) | (1 << (FlinkSqlParserParser.MAP - 262)) | (1 << (FlinkSqlParserParser.CHAR - 262)) | (1 << (FlinkSqlParserParser.VARCHAR - 262)) | (1 << (FlinkSqlParserParser.BINARY - 262)) | (1 << (FlinkSqlParserParser.VARBINARY - 262)) | (1 << (FlinkSqlParserParser.BYTES - 262)) | (1 << (FlinkSqlParserParser.DECIMAL - 262)) | (1 << (FlinkSqlParserParser.TINYINT - 262)) | (1 << (FlinkSqlParserParser.SMALLINT - 262)) | (1 << (FlinkSqlParserParser.INT - 262)) | (1 << (FlinkSqlParserParser.BIGINT - 262)) | (1 << (FlinkSqlParserParser.FLOAT - 262)) | (1 << (FlinkSqlParserParser.DOUBLE - 262)) | (1 << (FlinkSqlParserParser.DATE - 262)) | (1 << (FlinkSqlParserParser.TIME - 262)) | (1 << (FlinkSqlParserParser.TIMESTAMP - 262)) | (1 << (FlinkSqlParserParser.MULTISET - 262)) | (1 << (FlinkSqlParserParser.BOOLEAN - 262)) | (1 << (FlinkSqlParserParser.RAW - 262)) | (1 << (FlinkSqlParserParser.ROW - 262)) | (1 << (FlinkSqlParserParser.NULL - 262)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_partitionDefinition;
    return this;
}

PartitionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionDefinitionContext.prototype.constructor = PartitionDefinitionContext;

PartitionDefinitionContext.prototype.PARTITIONED = function() {
    return this.getToken(FlinkSqlParserParser.PARTITIONED, 0);
};

PartitionDefinitionContext.prototype.BY = function() {
    return this.getToken(FlinkSqlParserParser.BY, 0);
};

PartitionDefinitionContext.prototype.partitionColumnDefinition = function() {
    return this.getTypedRuleContext(PartitionColumnDefinitionContext,0);
};

PartitionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterPartitionDefinition(this);
	}
};

PartitionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitPartitionDefinition(this);
	}
};

PartitionDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitPartitionDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.PartitionDefinitionContext = PartitionDefinitionContext;

FlinkSqlParserParser.prototype.partitionDefinition = function() {

    var localctx = new PartitionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, FlinkSqlParserParser.RULE_partitionDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 205;
        this.match(FlinkSqlParserParser.PARTITIONED);
        this.state = 206;
        this.match(FlinkSqlParserParser.T__13);
        this.state = 207;
        this.partitionColumnDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionColumnDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_partitionColumnDefinition;
    return this;
}

PartitionColumnDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionColumnDefinitionContext.prototype.constructor = PartitionColumnDefinitionContext;

PartitionColumnDefinitionContext.prototype.partitionColumnName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionColumnNameContext);
    } else {
        return this.getTypedRuleContext(PartitionColumnNameContext,i);
    }
};

PartitionColumnDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParserParser.COMMA, i);
    }
};


PartitionColumnDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterPartitionColumnDefinition(this);
	}
};

PartitionColumnDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitPartitionColumnDefinition(this);
	}
};

PartitionColumnDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitPartitionColumnDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.PartitionColumnDefinitionContext = PartitionColumnDefinitionContext;

FlinkSqlParserParser.prototype.partitionColumnDefinition = function() {

    var localctx = new PartitionColumnDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, FlinkSqlParserParser.RULE_partitionColumnDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 209;
        this.partitionColumnName();
        this.state = 214;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParserParser.COMMA) {
            this.state = 210;
            this.match(FlinkSqlParserParser.COMMA);
            this.state = 211;
            this.partitionColumnName();
            this.state = 216;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionColumnNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_partitionColumnName;
    return this;
}

PartitionColumnNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionColumnNameContext.prototype.constructor = PartitionColumnNameContext;

PartitionColumnNameContext.prototype.ID = function() {
    return this.getToken(FlinkSqlParserParser.ID, 0);
};

PartitionColumnNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterPartitionColumnName(this);
	}
};

PartitionColumnNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitPartitionColumnName(this);
	}
};

PartitionColumnNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitPartitionColumnName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.PartitionColumnNameContext = PartitionColumnNameContext;

FlinkSqlParserParser.prototype.partitionColumnName = function() {

    var localctx = new PartitionColumnNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, FlinkSqlParserParser.RULE_partitionColumnName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 217;
        this.match(FlinkSqlParserParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_createDatabase;
    return this;
}

CreateDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateDatabaseContext.prototype.constructor = CreateDatabaseContext;

CreateDatabaseContext.prototype.CREATE = function() {
    return this.getToken(FlinkSqlParserParser.CREATE, 0);
};

CreateDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(FlinkSqlParserParser.DATABASE, 0);
};

CreateDatabaseContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CreateDatabaseContext.prototype.withOption = function() {
    return this.getTypedRuleContext(WithOptionContext,0);
};

CreateDatabaseContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCreateDatabase(this);
	}
};

CreateDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCreateDatabase(this);
	}
};

CreateDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCreateDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.CreateDatabaseContext = CreateDatabaseContext;

FlinkSqlParserParser.prototype.createDatabase = function() {

    var localctx = new CreateDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, FlinkSqlParserParser.RULE_createDatabase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 219;
        this.match(FlinkSqlParserParser.CREATE);
        this.state = 220;
        this.match(FlinkSqlParserParser.DATABASE);
        this.state = 222;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParserParser.IF) {
            this.state = 221;
            this.ifNotExists();
        }

        this.state = 224;
        this.uid();
        this.state = 225;
        this.withOption();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_createView;
    return this;
}

CreateViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateViewContext.prototype.constructor = CreateViewContext;

CreateViewContext.prototype.CREATE = function() {
    return this.getToken(FlinkSqlParserParser.CREATE, 0);
};

CreateViewContext.prototype.VIEW = function() {
    return this.getToken(FlinkSqlParserParser.VIEW, 0);
};

CreateViewContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CreateViewContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParserParser.AS, 0);
};

CreateViewContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

CreateViewContext.prototype.TEMPORARY = function() {
    return this.getToken(FlinkSqlParserParser.TEMPORARY, 0);
};

CreateViewContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCreateView(this);
	}
};

CreateViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCreateView(this);
	}
};

CreateViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCreateView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.CreateViewContext = CreateViewContext;

FlinkSqlParserParser.prototype.createView = function() {

    var localctx = new CreateViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, FlinkSqlParserParser.RULE_createView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 227;
        this.match(FlinkSqlParserParser.CREATE);
        this.state = 229;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParserParser.TEMPORARY) {
            this.state = 228;
            this.match(FlinkSqlParserParser.TEMPORARY);
        }

        this.state = 231;
        this.match(FlinkSqlParserParser.VIEW);
        this.state = 233;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParserParser.IF) {
            this.state = 232;
            this.ifNotExists();
        }

        this.state = 235;
        this.uid();
        this.state = 236;
        this.match(FlinkSqlParserParser.T__7);
        this.state = 237;
        this.selectStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_createFunction;
    return this;
}

CreateFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateFunctionContext.prototype.constructor = CreateFunctionContext;


CreateFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCreateFunction(this);
	}
};

CreateFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCreateFunction(this);
	}
};

CreateFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCreateFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.CreateFunctionContext = CreateFunctionContext;

FlinkSqlParserParser.prototype.createFunction = function() {

    var localctx = new CreateFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, FlinkSqlParserParser.RULE_createFunction);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_alterTable;
    return this;
}

AlterTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableContext.prototype.constructor = AlterTableContext;

AlterTableContext.prototype.ALTER = function() {
    return this.getToken(FlinkSqlParserParser.ALTER, 0);
};

AlterTableContext.prototype.TABLE = function() {
    return this.getToken(FlinkSqlParserParser.TABLE, 0);
};

AlterTableContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterTableContext.prototype.renameDefinition = function() {
    return this.getTypedRuleContext(RenameDefinitionContext,0);
};

AlterTableContext.prototype.setKeyValueDefinition = function() {
    return this.getTypedRuleContext(SetKeyValueDefinitionContext,0);
};

AlterTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterAlterTable(this);
	}
};

AlterTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitAlterTable(this);
	}
};

AlterTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitAlterTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.AlterTableContext = AlterTableContext;

FlinkSqlParserParser.prototype.alterTable = function() {

    var localctx = new AlterTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, FlinkSqlParserParser.RULE_alterTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 241;
        this.match(FlinkSqlParserParser.ALTER);
        this.state = 242;
        this.match(FlinkSqlParserParser.TABLE);
        this.state = 243;
        this.uid();
        this.state = 246;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParserParser.RENAME:
            this.state = 244;
            this.renameDefinition();
            break;
        case FlinkSqlParserParser.SET:
            this.state = 245;
            this.setKeyValueDefinition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RenameDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_renameDefinition;
    return this;
}

RenameDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenameDefinitionContext.prototype.constructor = RenameDefinitionContext;

RenameDefinitionContext.prototype.RENAME = function() {
    return this.getToken(FlinkSqlParserParser.RENAME, 0);
};

RenameDefinitionContext.prototype.TO = function() {
    return this.getToken(FlinkSqlParserParser.TO, 0);
};

RenameDefinitionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

RenameDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterRenameDefinition(this);
	}
};

RenameDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitRenameDefinition(this);
	}
};

RenameDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitRenameDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.RenameDefinitionContext = RenameDefinitionContext;

FlinkSqlParserParser.prototype.renameDefinition = function() {

    var localctx = new RenameDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, FlinkSqlParserParser.RULE_renameDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 248;
        this.match(FlinkSqlParserParser.RENAME);
        this.state = 249;
        this.match(FlinkSqlParserParser.TO);
        this.state = 250;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetKeyValueDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_setKeyValueDefinition;
    return this;
}

SetKeyValueDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetKeyValueDefinitionContext.prototype.constructor = SetKeyValueDefinitionContext;

SetKeyValueDefinitionContext.prototype.SET = function() {
    return this.getToken(FlinkSqlParserParser.SET, 0);
};

SetKeyValueDefinitionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParserParser.LR_BRACKET, 0);
};

SetKeyValueDefinitionContext.prototype.keyValueDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeyValueDefinitionContext);
    } else {
        return this.getTypedRuleContext(KeyValueDefinitionContext,i);
    }
};

SetKeyValueDefinitionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParserParser.RR_BRACKET, 0);
};

SetKeyValueDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParserParser.COMMA, i);
    }
};


SetKeyValueDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSetKeyValueDefinition(this);
	}
};

SetKeyValueDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSetKeyValueDefinition(this);
	}
};

SetKeyValueDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSetKeyValueDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.SetKeyValueDefinitionContext = SetKeyValueDefinitionContext;

FlinkSqlParserParser.prototype.setKeyValueDefinition = function() {

    var localctx = new SetKeyValueDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, FlinkSqlParserParser.RULE_setKeyValueDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 252;
        this.match(FlinkSqlParserParser.SET);
        this.state = 253;
        this.match(FlinkSqlParserParser.LR_BRACKET);
        this.state = 254;
        this.keyValueDefinition();
        this.state = 259;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParserParser.COMMA) {
            this.state = 255;
            this.match(FlinkSqlParserParser.COMMA);
            this.state = 256;
            this.keyValueDefinition();
            this.state = 261;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 262;
        this.match(FlinkSqlParserParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_alterDatabase;
    return this;
}

AlterDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterDatabaseContext.prototype.constructor = AlterDatabaseContext;

AlterDatabaseContext.prototype.ALTER = function() {
    return this.getToken(FlinkSqlParserParser.ALTER, 0);
};

AlterDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(FlinkSqlParserParser.DATABASE, 0);
};

AlterDatabaseContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterDatabaseContext.prototype.setKeyValueDefinition = function() {
    return this.getTypedRuleContext(SetKeyValueDefinitionContext,0);
};

AlterDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterAlterDatabase(this);
	}
};

AlterDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitAlterDatabase(this);
	}
};

AlterDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitAlterDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.AlterDatabaseContext = AlterDatabaseContext;

FlinkSqlParserParser.prototype.alterDatabase = function() {

    var localctx = new AlterDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, FlinkSqlParserParser.RULE_alterDatabase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 264;
        this.match(FlinkSqlParserParser.ALTER);
        this.state = 265;
        this.match(FlinkSqlParserParser.DATABASE);
        this.state = 266;
        this.uid();
        this.state = 267;
        this.setKeyValueDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_alterFunction;
    return this;
}

AlterFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterFunctionContext.prototype.constructor = AlterFunctionContext;


AlterFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterAlterFunction(this);
	}
};

AlterFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitAlterFunction(this);
	}
};

AlterFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitAlterFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.AlterFunctionContext = AlterFunctionContext;

FlinkSqlParserParser.prototype.alterFunction = function() {

    var localctx = new AlterFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, FlinkSqlParserParser.RULE_alterFunction);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_dropTable;
    return this;
}

DropTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTableContext.prototype.constructor = DropTableContext;

DropTableContext.prototype.DROP = function() {
    return this.getToken(FlinkSqlParserParser.DROP, 0);
};

DropTableContext.prototype.TABLE = function() {
    return this.getToken(FlinkSqlParserParser.TABLE, 0);
};

DropTableContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropTableContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDropTable(this);
	}
};

DropTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDropTable(this);
	}
};

DropTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDropTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.DropTableContext = DropTableContext;

FlinkSqlParserParser.prototype.dropTable = function() {

    var localctx = new DropTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, FlinkSqlParserParser.RULE_dropTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 271;
        this.match(FlinkSqlParserParser.DROP);
        this.state = 272;
        this.match(FlinkSqlParserParser.TABLE);
        this.state = 274;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParserParser.IF) {
            this.state = 273;
            this.ifExists();
        }

        this.state = 276;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_dropDatabase;
    this.dropType = null; // Token
    return this;
}

DropDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropDatabaseContext.prototype.constructor = DropDatabaseContext;

DropDatabaseContext.prototype.DROP = function() {
    return this.getToken(FlinkSqlParserParser.DROP, 0);
};

DropDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(FlinkSqlParserParser.DATABASE, 0);
};

DropDatabaseContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropDatabaseContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropDatabaseContext.prototype.RESTRICT = function() {
    return this.getToken(FlinkSqlParserParser.RESTRICT, 0);
};

DropDatabaseContext.prototype.CASCADE = function() {
    return this.getToken(FlinkSqlParserParser.CASCADE, 0);
};

DropDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDropDatabase(this);
	}
};

DropDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDropDatabase(this);
	}
};

DropDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDropDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.DropDatabaseContext = DropDatabaseContext;

FlinkSqlParserParser.prototype.dropDatabase = function() {

    var localctx = new DropDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, FlinkSqlParserParser.RULE_dropDatabase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 278;
        this.match(FlinkSqlParserParser.DROP);
        this.state = 279;
        this.match(FlinkSqlParserParser.DATABASE);
        this.state = 281;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParserParser.IF) {
            this.state = 280;
            this.ifExists();
        }

        this.state = 283;
        this.uid();
        this.state = 285;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParserParser.CASCADE || _la===FlinkSqlParserParser.RESTRICT) {
            this.state = 284;
            localctx.dropType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParserParser.CASCADE || _la===FlinkSqlParserParser.RESTRICT)) {
                localctx.dropType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_dropView;
    return this;
}

DropViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropViewContext.prototype.constructor = DropViewContext;

DropViewContext.prototype.DROP = function() {
    return this.getToken(FlinkSqlParserParser.DROP, 0);
};

DropViewContext.prototype.VIEW = function() {
    return this.getToken(FlinkSqlParserParser.VIEW, 0);
};

DropViewContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropViewContext.prototype.TEMPORARY = function() {
    return this.getToken(FlinkSqlParserParser.TEMPORARY, 0);
};

DropViewContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDropView(this);
	}
};

DropViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDropView(this);
	}
};

DropViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDropView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.DropViewContext = DropViewContext;

FlinkSqlParserParser.prototype.dropView = function() {

    var localctx = new DropViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, FlinkSqlParserParser.RULE_dropView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 287;
        this.match(FlinkSqlParserParser.DROP);
        this.state = 289;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParserParser.TEMPORARY) {
            this.state = 288;
            this.match(FlinkSqlParserParser.TEMPORARY);
        }

        this.state = 291;
        this.match(FlinkSqlParserParser.VIEW);
        this.state = 293;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParserParser.IF) {
            this.state = 292;
            this.ifExists();
        }

        this.state = 295;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_dropFunction;
    return this;
}

DropFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropFunctionContext.prototype.constructor = DropFunctionContext;

DropFunctionContext.prototype.DROP = function() {
    return this.getToken(FlinkSqlParserParser.DROP, 0);
};

DropFunctionContext.prototype.FUNCTION = function() {
    return this.getToken(FlinkSqlParserParser.FUNCTION, 0);
};

DropFunctionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropFunctionContext.prototype.TEMPORARY = function() {
    return this.getToken(FlinkSqlParserParser.TEMPORARY, 0);
};

DropFunctionContext.prototype.SYSTEM = function() {
    return this.getToken(FlinkSqlParserParser.SYSTEM, 0);
};

DropFunctionContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDropFunction(this);
	}
};

DropFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDropFunction(this);
	}
};

DropFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDropFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.DropFunctionContext = DropFunctionContext;

FlinkSqlParserParser.prototype.dropFunction = function() {

    var localctx = new DropFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, FlinkSqlParserParser.RULE_dropFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 297;
        this.match(FlinkSqlParserParser.DROP);
        this.state = 301;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        if(la_===1) {
            this.state = 298;
            this.match(FlinkSqlParserParser.TEMPORARY);

        } else if(la_===2) {
            this.state = 299;
            this.match(FlinkSqlParserParser.TEMPORARY);
            this.state = 300;
            this.match(FlinkSqlParserParser.SYSTEM);

        }
        this.state = 303;
        this.match(FlinkSqlParserParser.FUNCTION);
        this.state = 305;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParserParser.IF) {
            this.state = 304;
            this.ifExists();
        }

        this.state = 307;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_queryStatement;
    return this;
}

QueryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryStatementContext.prototype.constructor = QueryStatementContext;

QueryStatementContext.prototype.valuesDefinition = function() {
    return this.getTypedRuleContext(ValuesDefinitionContext,0);
};

QueryStatementContext.prototype.selectStatements = function() {
    return this.getTypedRuleContext(SelectStatementsContext,0);
};

QueryStatementContext.prototype.queryOrderByDefinition = function() {
    return this.getTypedRuleContext(QueryOrderByDefinitionContext,0);
};

QueryStatementContext.prototype.queryLimitDefinition = function() {
    return this.getTypedRuleContext(QueryLimitDefinitionContext,0);
};

QueryStatementContext.prototype.queryOffsetDefinition = function() {
    return this.getTypedRuleContext(QueryOffsetDefinitionContext,0);
};

QueryStatementContext.prototype.queryFetchDefinition = function() {
    return this.getTypedRuleContext(QueryFetchDefinitionContext,0);
};

QueryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterQueryStatement(this);
	}
};

QueryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitQueryStatement(this);
	}
};

QueryStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitQueryStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.QueryStatementContext = QueryStatementContext;

FlinkSqlParserParser.prototype.queryStatement = function() {

    var localctx = new QueryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, FlinkSqlParserParser.RULE_queryStatement);
    var _la = 0; // Token type
    try {
        this.state = 323;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParserParser.VALUES:
            this.enterOuterAlt(localctx, 1);
            this.state = 309;
            this.valuesDefinition();
            break;
        case FlinkSqlParserParser.T__4:
            this.enterOuterAlt(localctx, 2);
            this.state = 310;
            this.selectStatements();
            this.state = 312;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParserParser.ORDER) {
                this.state = 311;
                this.queryOrderByDefinition();
            }

            this.state = 315;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParserParser.LIMIT) {
                this.state = 314;
                this.queryLimitDefinition();
            }

            this.state = 318;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
            if(la_===1) {
                this.state = 317;
                this.queryOffsetDefinition();

            }
            this.state = 321;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
            if(la_===1) {
                this.state = 320;
                this.queryFetchDefinition();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_selectStatements;
    return this;
}

SelectStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectStatementsContext.prototype.constructor = SelectStatementsContext;

SelectStatementsContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

SelectStatementsContext.prototype.selectWithoutFromDefinition = function() {
    return this.getTypedRuleContext(SelectWithoutFromDefinitionContext,0);
};

SelectStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSelectStatements(this);
	}
};

SelectStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSelectStatements(this);
	}
};

SelectStatementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSelectStatements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.SelectStatementsContext = SelectStatementsContext;

FlinkSqlParserParser.prototype.selectStatements = function() {

    var localctx = new SelectStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, FlinkSqlParserParser.RULE_selectStatements);
    try {
        this.state = 327;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 325;
            this.selectStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 326;
            this.selectWithoutFromDefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_selectStatement;
    return this;
}

SelectStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectStatementContext.prototype.constructor = SelectStatementContext;

SelectStatementContext.prototype.SELECT = function() {
    return this.getToken(FlinkSqlParserParser.SELECT, 0);
};

SelectStatementContext.prototype.FROM = function() {
    return this.getToken(FlinkSqlParserParser.FROM, 0);
};

SelectStatementContext.prototype.tableExpression = function() {
    return this.getTypedRuleContext(TableExpressionContext,0);
};

SelectStatementContext.prototype.ASTERISK_SIGN = function() {
    return this.getToken(FlinkSqlParserParser.ASTERISK_SIGN, 0);
};

SelectStatementContext.prototype.projectItemDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProjectItemDefinitionContext);
    } else {
        return this.getTypedRuleContext(ProjectItemDefinitionContext,i);
    }
};

SelectStatementContext.prototype.GROUP = function() {
    return this.getToken(FlinkSqlParserParser.GROUP, 0);
};

SelectStatementContext.prototype.BY = function() {
    return this.getToken(FlinkSqlParserParser.BY, 0);
};

SelectStatementContext.prototype.groupItemDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupItemDefinitionContext);
    } else {
        return this.getTypedRuleContext(GroupItemDefinitionContext,i);
    }
};

SelectStatementContext.prototype.WHERE = function() {
    return this.getToken(FlinkSqlParserParser.WHERE, 0);
};

SelectStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SelectStatementContext.prototype.HAVING = function() {
    return this.getToken(FlinkSqlParserParser.HAVING, 0);
};

SelectStatementContext.prototype.ALL = function() {
    return this.getToken(FlinkSqlParserParser.ALL, 0);
};

SelectStatementContext.prototype.DISTINCT = function() {
    return this.getToken(FlinkSqlParserParser.DISTINCT, 0);
};

SelectStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParserParser.COMMA, i);
    }
};


SelectStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSelectStatement(this);
	}
};

SelectStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSelectStatement(this);
	}
};

SelectStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSelectStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.SelectStatementContext = SelectStatementContext;

FlinkSqlParserParser.prototype.selectStatement = function() {

    var localctx = new SelectStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, FlinkSqlParserParser.RULE_selectStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 329;
        this.match(FlinkSqlParserParser.T__4);
        this.state = 331;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParserParser.T__8 || _la===FlinkSqlParserParser.T__10) {
            this.state = 330;
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParserParser.T__8 || _la===FlinkSqlParserParser.T__10)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 342;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParserParser.ASTERISK_SIGN:
            this.state = 333;
            this.match(FlinkSqlParserParser.ASTERISK_SIGN);
            break;
        case FlinkSqlParserParser.T__3:
        case FlinkSqlParserParser.T__4:
        case FlinkSqlParserParser.T__14:
        case FlinkSqlParserParser.T__15:
        case FlinkSqlParserParser.T__17:
        case FlinkSqlParserParser.NOT:
        case FlinkSqlParserParser.EXISTS:
        case FlinkSqlParserParser.TRUE:
        case FlinkSqlParserParser.FALSE:
        case FlinkSqlParserParser.ID:
        case FlinkSqlParserParser.BINARY:
        case FlinkSqlParserParser.ROW:
        case FlinkSqlParserParser.NULL:
        case FlinkSqlParserParser.ZERO_DECIMAL:
        case FlinkSqlParserParser.ONE_DECIMAL:
        case FlinkSqlParserParser.TWO_DECIMAL:
        case FlinkSqlParserParser.STRING_LITERAL:
        case FlinkSqlParserParser.DECIMAL_LITERAL:
        case FlinkSqlParserParser.REAL_LITERAL:
        case FlinkSqlParserParser.BIT_STRING:
            this.state = 334;
            this.projectItemDefinition();
            this.state = 339;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParserParser.COMMA) {
                this.state = 335;
                this.match(FlinkSqlParserParser.COMMA);
                this.state = 336;
                this.projectItemDefinition();
                this.state = 341;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 344;
        this.match(FlinkSqlParserParser.T__5);
        this.state = 345;
        this.tableExpression(0);
        this.state = 348;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParserParser.T__11) {
            this.state = 346;
            this.match(FlinkSqlParserParser.T__11);
            this.state = 347;
            this.expression(0);
        }

        this.state = 350;
        this.match(FlinkSqlParserParser.T__12);
        this.state = 351;
        this.match(FlinkSqlParserParser.T__13);
        this.state = 352;
        this.groupItemDefinition();
        this.state = 357;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParserParser.COMMA) {
            this.state = 353;
            this.match(FlinkSqlParserParser.COMMA);
            this.state = 354;
            this.groupItemDefinition();
            this.state = 359;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 362;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParserParser.HAVING) {
            this.state = 360;
            this.match(FlinkSqlParserParser.HAVING);
            this.state = 361;
            this.expression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProjectItemDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_projectItemDefinition;
    return this;
}

ProjectItemDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProjectItemDefinitionContext.prototype.constructor = ProjectItemDefinitionContext;

ProjectItemDefinitionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ProjectItemDefinitionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

ProjectItemDefinitionContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParserParser.AS, 0);
};

ProjectItemDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterProjectItemDefinition(this);
	}
};

ProjectItemDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitProjectItemDefinition(this);
	}
};

ProjectItemDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitProjectItemDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.ProjectItemDefinitionContext = ProjectItemDefinitionContext;

FlinkSqlParserParser.prototype.projectItemDefinition = function() {

    var localctx = new ProjectItemDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, FlinkSqlParserParser.RULE_projectItemDefinition);
    var _la = 0; // Token type
    try {
        this.state = 375;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 364;
            this.expression(0);
            this.state = 369;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParserParser.T__7 || _la===FlinkSqlParserParser.ID) {
                this.state = 366;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===FlinkSqlParserParser.T__7) {
                    this.state = 365;
                    this.match(FlinkSqlParserParser.T__7);
                }

                this.state = 368;
                this.uid();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 371;
            this.uid();
            this.state = 372;
            this.match(FlinkSqlParserParser.T__0);
            this.state = 373;
            this.match(FlinkSqlParserParser.T__1);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_tableExpression;
    return this;
}

TableExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableExpressionContext.prototype.constructor = TableExpressionContext;

TableExpressionContext.prototype.tableReference = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableReferenceContext);
    } else {
        return this.getTypedRuleContext(TableReferenceContext,i);
    }
};

TableExpressionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParserParser.COMMA, i);
    }
};


TableExpressionContext.prototype.tableExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableExpressionContext);
    } else {
        return this.getTypedRuleContext(TableExpressionContext,i);
    }
};

TableExpressionContext.prototype.JOIN = function() {
    return this.getToken(FlinkSqlParserParser.JOIN, 0);
};

TableExpressionContext.prototype.NATURAL = function() {
    return this.getToken(FlinkSqlParserParser.NATURAL, 0);
};

TableExpressionContext.prototype.joinCondition = function() {
    return this.getTypedRuleContext(JoinConditionContext,0);
};

TableExpressionContext.prototype.LEFT = function() {
    return this.getToken(FlinkSqlParserParser.LEFT, 0);
};

TableExpressionContext.prototype.RIGHT = function() {
    return this.getToken(FlinkSqlParserParser.RIGHT, 0);
};

TableExpressionContext.prototype.FULL = function() {
    return this.getToken(FlinkSqlParserParser.FULL, 0);
};

TableExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTableExpression(this);
	}
};

TableExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTableExpression(this);
	}
};

TableExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTableExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



FlinkSqlParserParser.prototype.tableExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TableExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 60;
    this.enterRecursionRule(localctx, 60, FlinkSqlParserParser.RULE_tableExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 378;
        this.tableReference();
        this.state = 383;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 379;
                this.match(FlinkSqlParserParser.COMMA);
                this.state = 380;
                this.tableReference(); 
            }
            this.state = 385;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
        }

        this._ctx.stop = this._input.LT(-1);
        this.state = 400;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TableExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, FlinkSqlParserParser.RULE_tableExpression);
                this.state = 386;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 388;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===FlinkSqlParserParser.NATURAL) {
                    this.state = 387;
                    this.match(FlinkSqlParserParser.NATURAL);
                }

                this.state = 391;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (FlinkSqlParserParser.LEFT - 49)) | (1 << (FlinkSqlParserParser.RIGHT - 49)) | (1 << (FlinkSqlParserParser.FULL - 49)))) !== 0)) {
                    this.state = 390;
                    _la = this._input.LA(1);
                    if(!(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (FlinkSqlParserParser.LEFT - 49)) | (1 << (FlinkSqlParserParser.RIGHT - 49)) | (1 << (FlinkSqlParserParser.FULL - 49)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 393;
                this.match(FlinkSqlParserParser.JOIN);
                this.state = 394;
                this.tableExpression(0);
                this.state = 396;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
                if(la_===1) {
                    this.state = 395;
                    this.joinCondition();

                } 
            }
            this.state = 402;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function TableReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_tableReference;
    return this;
}

TableReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableReferenceContext.prototype.constructor = TableReferenceContext;

TableReferenceContext.prototype.tablePrimary = function() {
    return this.getTypedRuleContext(TablePrimaryContext,0);
};

TableReferenceContext.prototype.matchRecognize = function() {
    return this.getTypedRuleContext(MatchRecognizeContext,0);
};

TableReferenceContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

TableReferenceContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParserParser.AS, 0);
};

TableReferenceContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParserParser.LR_BRACKET, 0);
};

TableReferenceContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParserParser.RR_BRACKET, 0);
};

TableReferenceContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParserParser.COMMA, i);
    }
};


TableReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTableReference(this);
	}
};

TableReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTableReference(this);
	}
};

TableReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTableReference(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.TableReferenceContext = TableReferenceContext;

FlinkSqlParserParser.prototype.tableReference = function() {

    var localctx = new TableReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, FlinkSqlParserParser.RULE_tableReference);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 403;
        this.tablePrimary();
        this.state = 405;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        if(la_===1) {
            this.state = 404;
            this.matchRecognize();

        }
        this.state = 424;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        if(la_===1) {
            this.state = 408;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParserParser.T__7) {
                this.state = 407;
                this.match(FlinkSqlParserParser.T__7);
            }

            this.state = 410;
            this.uid();
            this.state = 422;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
            if(la_===1) {
                this.state = 411;
                this.match(FlinkSqlParserParser.LR_BRACKET);
                this.state = 412;
                this.uid();
                this.state = 417;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===FlinkSqlParserParser.COMMA) {
                    this.state = 413;
                    this.match(FlinkSqlParserParser.COMMA);
                    this.state = 414;
                    this.uid();
                    this.state = 419;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 420;
                this.match(FlinkSqlParserParser.RR_BRACKET);

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MatchRecognizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_matchRecognize;
    return this;
}

MatchRecognizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MatchRecognizeContext.prototype.constructor = MatchRecognizeContext;


MatchRecognizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterMatchRecognize(this);
	}
};

MatchRecognizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitMatchRecognize(this);
	}
};

MatchRecognizeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitMatchRecognize(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.MatchRecognizeContext = MatchRecognizeContext;

FlinkSqlParserParser.prototype.matchRecognize = function() {

    var localctx = new MatchRecognizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, FlinkSqlParserParser.RULE_matchRecognize);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablePrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_tablePrimary;
    return this;
}

TablePrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePrimaryContext.prototype.constructor = TablePrimaryContext;

TablePrimaryContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

TablePrimaryContext.prototype.TABLE = function() {
    return this.getToken(FlinkSqlParserParser.TABLE, 0);
};

TablePrimaryContext.prototype.dynamicTableOptions = function() {
    return this.getTypedRuleContext(DynamicTableOptionsContext,0);
};

TablePrimaryContext.prototype.LATERAL = function() {
    return this.getToken(FlinkSqlParserParser.LATERAL, 0);
};

TablePrimaryContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.LR_BRACKET);
    } else {
        return this.getToken(FlinkSqlParserParser.LR_BRACKET, i);
    }
};


TablePrimaryContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

TablePrimaryContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.RR_BRACKET);
    } else {
        return this.getToken(FlinkSqlParserParser.RR_BRACKET, i);
    }
};


TablePrimaryContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParserParser.COMMA, i);
    }
};


TablePrimaryContext.prototype.UNNEST = function() {
    return this.getToken(FlinkSqlParserParser.UNNEST, 0);
};

TablePrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTablePrimary(this);
	}
};

TablePrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTablePrimary(this);
	}
};

TablePrimaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTablePrimary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.TablePrimaryContext = TablePrimaryContext;

FlinkSqlParserParser.prototype.tablePrimary = function() {

    var localctx = new TablePrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, FlinkSqlParserParser.RULE_tablePrimary);
    var _la = 0; // Token type
    try {
        this.state = 456;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParserParser.TABLE:
        case FlinkSqlParserParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 429;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParserParser.TABLE) {
                this.state = 428;
                this.match(FlinkSqlParserParser.TABLE);
            }

            this.state = 431;
            this.uid();
            this.state = 433;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
            if(la_===1) {
                this.state = 432;
                this.dynamicTableOptions();

            }
            break;
        case FlinkSqlParserParser.LATERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 435;
            this.match(FlinkSqlParserParser.LATERAL);
            this.state = 436;
            this.match(FlinkSqlParserParser.TABLE);
            this.state = 437;
            this.match(FlinkSqlParserParser.LR_BRACKET);
            this.state = 438;
            this.uid();
            this.state = 439;
            this.match(FlinkSqlParserParser.LR_BRACKET);
            this.state = 440;
            this.expression(0);
            this.state = 445;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParserParser.COMMA) {
                this.state = 441;
                this.match(FlinkSqlParserParser.COMMA);
                this.state = 442;
                this.expression(0);
                this.state = 447;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 448;
            this.match(FlinkSqlParserParser.RR_BRACKET);
            this.state = 449;
            this.match(FlinkSqlParserParser.RR_BRACKET);
            break;
        case FlinkSqlParserParser.UNNEST:
            this.enterOuterAlt(localctx, 3);
            this.state = 451;
            this.match(FlinkSqlParserParser.UNNEST);
            this.state = 452;
            this.match(FlinkSqlParserParser.LR_BRACKET);
            this.state = 453;
            this.expression(0);
            this.state = 454;
            this.match(FlinkSqlParserParser.RR_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DynamicTableOptionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_dynamicTableOptions;
    return this;
}

DynamicTableOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DynamicTableOptionsContext.prototype.constructor = DynamicTableOptionsContext;


DynamicTableOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDynamicTableOptions(this);
	}
};

DynamicTableOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDynamicTableOptions(this);
	}
};

DynamicTableOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDynamicTableOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.DynamicTableOptionsContext = DynamicTableOptionsContext;

FlinkSqlParserParser.prototype.dynamicTableOptions = function() {

    var localctx = new DynamicTableOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, FlinkSqlParserParser.RULE_dynamicTableOptions);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_joinCondition;
    return this;
}

JoinConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinConditionContext.prototype.constructor = JoinConditionContext;

JoinConditionContext.prototype.ON = function() {
    return this.getToken(FlinkSqlParserParser.ON, 0);
};

JoinConditionContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

JoinConditionContext.prototype.USING = function() {
    return this.getToken(FlinkSqlParserParser.USING, 0);
};

JoinConditionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParserParser.LR_BRACKET, 0);
};

JoinConditionContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

JoinConditionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParserParser.RR_BRACKET, 0);
};

JoinConditionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParserParser.COMMA, i);
    }
};


JoinConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterJoinCondition(this);
	}
};

JoinConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitJoinCondition(this);
	}
};

JoinConditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitJoinCondition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.JoinConditionContext = JoinConditionContext;

FlinkSqlParserParser.prototype.joinCondition = function() {

    var localctx = new JoinConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, FlinkSqlParserParser.RULE_joinCondition);
    var _la = 0; // Token type
    try {
        this.state = 474;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParserParser.ON:
            this.enterOuterAlt(localctx, 1);
            this.state = 460;
            this.match(FlinkSqlParserParser.ON);
            this.state = 461;
            this.booleanExpression();
            break;
        case FlinkSqlParserParser.USING:
            this.enterOuterAlt(localctx, 2);
            this.state = 462;
            this.match(FlinkSqlParserParser.USING);
            this.state = 463;
            this.match(FlinkSqlParserParser.LR_BRACKET);
            this.state = 464;
            this.uid();
            this.state = 469;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParserParser.COMMA) {
                this.state = 465;
                this.match(FlinkSqlParserParser.COMMA);
                this.state = 466;
                this.uid();
                this.state = 471;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 472;
            this.match(FlinkSqlParserParser.RR_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_booleanExpression;
    return this;
}

BooleanExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanExpressionContext.prototype.constructor = BooleanExpressionContext;


BooleanExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterBooleanExpression(this);
	}
};

BooleanExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitBooleanExpression(this);
	}
};

BooleanExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitBooleanExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.BooleanExpressionContext = BooleanExpressionContext;

FlinkSqlParserParser.prototype.booleanExpression = function() {

    var localctx = new BooleanExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, FlinkSqlParserParser.RULE_booleanExpression);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupItemDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_groupItemDefinition;
    return this;
}

GroupItemDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupItemDefinitionContext.prototype.constructor = GroupItemDefinitionContext;

GroupItemDefinitionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

GroupItemDefinitionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParserParser.LR_BRACKET, 0);
};

GroupItemDefinitionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParserParser.RR_BRACKET, 0);
};

GroupItemDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParserParser.COMMA, i);
    }
};


GroupItemDefinitionContext.prototype.CUBE = function() {
    return this.getToken(FlinkSqlParserParser.CUBE, 0);
};

GroupItemDefinitionContext.prototype.ROLLUP = function() {
    return this.getToken(FlinkSqlParserParser.ROLLUP, 0);
};

GroupItemDefinitionContext.prototype.GROUPING = function() {
    return this.getToken(FlinkSqlParserParser.GROUPING, 0);
};

GroupItemDefinitionContext.prototype.SETS = function() {
    return this.getToken(FlinkSqlParserParser.SETS, 0);
};

GroupItemDefinitionContext.prototype.groupItemDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupItemDefinitionContext);
    } else {
        return this.getTypedRuleContext(GroupItemDefinitionContext,i);
    }
};

GroupItemDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterGroupItemDefinition(this);
	}
};

GroupItemDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitGroupItemDefinition(this);
	}
};

GroupItemDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitGroupItemDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.GroupItemDefinitionContext = GroupItemDefinitionContext;

FlinkSqlParserParser.prototype.groupItemDefinition = function() {

    var localctx = new GroupItemDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, FlinkSqlParserParser.RULE_groupItemDefinition);
    var _la = 0; // Token type
    try {
        this.state = 529;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 478;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 479;
            this.match(FlinkSqlParserParser.LR_BRACKET);
            this.state = 480;
            this.match(FlinkSqlParserParser.RR_BRACKET);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 481;
            this.match(FlinkSqlParserParser.LR_BRACKET);
            this.state = 482;
            this.expression(0);
            this.state = 487;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParserParser.COMMA) {
                this.state = 483;
                this.match(FlinkSqlParserParser.COMMA);
                this.state = 484;
                this.expression(0);
                this.state = 489;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 490;
            this.match(FlinkSqlParserParser.RR_BRACKET);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 492;
            this.match(FlinkSqlParserParser.T__16);
            this.state = 493;
            this.match(FlinkSqlParserParser.LR_BRACKET);
            this.state = 494;
            this.expression(0);
            this.state = 499;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParserParser.COMMA) {
                this.state = 495;
                this.match(FlinkSqlParserParser.COMMA);
                this.state = 496;
                this.expression(0);
                this.state = 501;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 502;
            this.match(FlinkSqlParserParser.RR_BRACKET);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 504;
            this.match(FlinkSqlParserParser.T__17);
            this.state = 505;
            this.match(FlinkSqlParserParser.LR_BRACKET);
            this.state = 506;
            this.expression(0);
            this.state = 511;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParserParser.COMMA) {
                this.state = 507;
                this.match(FlinkSqlParserParser.COMMA);
                this.state = 508;
                this.expression(0);
                this.state = 513;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 514;
            this.match(FlinkSqlParserParser.RR_BRACKET);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 516;
            this.match(FlinkSqlParserParser.T__14);
            this.state = 517;
            this.match(FlinkSqlParserParser.T__15);
            this.state = 518;
            this.match(FlinkSqlParserParser.LR_BRACKET);
            this.state = 519;
            this.groupItemDefinition();
            this.state = 524;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParserParser.COMMA) {
                this.state = 520;
                this.match(FlinkSqlParserParser.COMMA);
                this.state = 521;
                this.groupItemDefinition();
                this.state = 526;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 527;
            this.match(FlinkSqlParserParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectWithoutFromDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_selectWithoutFromDefinition;
    return this;
}

SelectWithoutFromDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectWithoutFromDefinitionContext.prototype.constructor = SelectWithoutFromDefinitionContext;

SelectWithoutFromDefinitionContext.prototype.SELECT = function() {
    return this.getToken(FlinkSqlParserParser.SELECT, 0);
};

SelectWithoutFromDefinitionContext.prototype.ASTERISK_SIGN = function() {
    return this.getToken(FlinkSqlParserParser.ASTERISK_SIGN, 0);
};

SelectWithoutFromDefinitionContext.prototype.projectItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProjectItemContext);
    } else {
        return this.getTypedRuleContext(ProjectItemContext,i);
    }
};

SelectWithoutFromDefinitionContext.prototype.ALL = function() {
    return this.getToken(FlinkSqlParserParser.ALL, 0);
};

SelectWithoutFromDefinitionContext.prototype.DISTINCT = function() {
    return this.getToken(FlinkSqlParserParser.DISTINCT, 0);
};

SelectWithoutFromDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParserParser.COMMA, i);
    }
};


SelectWithoutFromDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSelectWithoutFromDefinition(this);
	}
};

SelectWithoutFromDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSelectWithoutFromDefinition(this);
	}
};

SelectWithoutFromDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSelectWithoutFromDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.SelectWithoutFromDefinitionContext = SelectWithoutFromDefinitionContext;

FlinkSqlParserParser.prototype.selectWithoutFromDefinition = function() {

    var localctx = new SelectWithoutFromDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, FlinkSqlParserParser.RULE_selectWithoutFromDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 531;
        this.match(FlinkSqlParserParser.T__4);
        this.state = 533;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParserParser.T__8 || _la===FlinkSqlParserParser.T__10) {
            this.state = 532;
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParserParser.T__8 || _la===FlinkSqlParserParser.T__10)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 544;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParserParser.ASTERISK_SIGN:
            this.state = 535;
            this.match(FlinkSqlParserParser.ASTERISK_SIGN);
            break;
        case FlinkSqlParserParser.T__3:
        case FlinkSqlParserParser.T__4:
        case FlinkSqlParserParser.T__14:
        case FlinkSqlParserParser.T__15:
        case FlinkSqlParserParser.T__17:
        case FlinkSqlParserParser.NOT:
        case FlinkSqlParserParser.EXISTS:
        case FlinkSqlParserParser.TRUE:
        case FlinkSqlParserParser.FALSE:
        case FlinkSqlParserParser.ID:
        case FlinkSqlParserParser.BINARY:
        case FlinkSqlParserParser.ROW:
        case FlinkSqlParserParser.NULL:
        case FlinkSqlParserParser.ZERO_DECIMAL:
        case FlinkSqlParserParser.ONE_DECIMAL:
        case FlinkSqlParserParser.TWO_DECIMAL:
        case FlinkSqlParserParser.STRING_LITERAL:
        case FlinkSqlParserParser.DECIMAL_LITERAL:
        case FlinkSqlParserParser.REAL_LITERAL:
        case FlinkSqlParserParser.BIT_STRING:
            this.state = 536;
            this.projectItem();
            this.state = 541;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParserParser.COMMA) {
                this.state = 537;
                this.match(FlinkSqlParserParser.COMMA);
                this.state = 538;
                this.projectItem();
                this.state = 543;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProjectItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_projectItem;
    return this;
}

ProjectItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProjectItemContext.prototype.constructor = ProjectItemContext;

ProjectItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ProjectItemContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

ProjectItemContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParserParser.AS, 0);
};

ProjectItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterProjectItem(this);
	}
};

ProjectItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitProjectItem(this);
	}
};

ProjectItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitProjectItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.ProjectItemContext = ProjectItemContext;

FlinkSqlParserParser.prototype.projectItem = function() {

    var localctx = new ProjectItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, FlinkSqlParserParser.RULE_projectItem);
    var _la = 0; // Token type
    try {
        this.state = 557;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 546;
            this.expression(0);
            this.state = 551;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParserParser.T__7 || _la===FlinkSqlParserParser.ID) {
                this.state = 548;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===FlinkSqlParserParser.T__7) {
                    this.state = 547;
                    this.match(FlinkSqlParserParser.T__7);
                }

                this.state = 550;
                this.uid();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 553;
            this.uid();
            this.state = 554;
            this.match(FlinkSqlParserParser.T__0);
            this.state = 555;
            this.match(FlinkSqlParserParser.T__1);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryOrderByDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_queryOrderByDefinition;
    return this;
}

QueryOrderByDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryOrderByDefinitionContext.prototype.constructor = QueryOrderByDefinitionContext;

QueryOrderByDefinitionContext.prototype.ORDER = function() {
    return this.getToken(FlinkSqlParserParser.ORDER, 0);
};

QueryOrderByDefinitionContext.prototype.BY = function() {
    return this.getToken(FlinkSqlParserParser.BY, 0);
};

QueryOrderByDefinitionContext.prototype.orderItemDefition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderItemDefitionContext);
    } else {
        return this.getTypedRuleContext(OrderItemDefitionContext,i);
    }
};

QueryOrderByDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParserParser.COMMA, i);
    }
};


QueryOrderByDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterQueryOrderByDefinition(this);
	}
};

QueryOrderByDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitQueryOrderByDefinition(this);
	}
};

QueryOrderByDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitQueryOrderByDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.QueryOrderByDefinitionContext = QueryOrderByDefinitionContext;

FlinkSqlParserParser.prototype.queryOrderByDefinition = function() {

    var localctx = new QueryOrderByDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, FlinkSqlParserParser.RULE_queryOrderByDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 559;
        this.match(FlinkSqlParserParser.ORDER);
        this.state = 560;
        this.match(FlinkSqlParserParser.T__13);
        this.state = 561;
        this.orderItemDefition();
        this.state = 566;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParserParser.COMMA) {
            this.state = 562;
            this.match(FlinkSqlParserParser.COMMA);
            this.state = 563;
            this.orderItemDefition();
            this.state = 568;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderItemDefitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_orderItemDefition;
    return this;
}

OrderItemDefitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderItemDefitionContext.prototype.constructor = OrderItemDefitionContext;

OrderItemDefitionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

OrderItemDefitionContext.prototype.ASC = function() {
    return this.getToken(FlinkSqlParserParser.ASC, 0);
};

OrderItemDefitionContext.prototype.DESC = function() {
    return this.getToken(FlinkSqlParserParser.DESC, 0);
};

OrderItemDefitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterOrderItemDefition(this);
	}
};

OrderItemDefitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitOrderItemDefition(this);
	}
};

OrderItemDefitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitOrderItemDefition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.OrderItemDefitionContext = OrderItemDefitionContext;

FlinkSqlParserParser.prototype.orderItemDefition = function() {

    var localctx = new OrderItemDefitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, FlinkSqlParserParser.RULE_orderItemDefition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 569;
        this.expression(0);
        this.state = 570;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParserParser.ASC || _la===FlinkSqlParserParser.DESC)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryLimitDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_queryLimitDefinition;
    return this;
}

QueryLimitDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryLimitDefinitionContext.prototype.constructor = QueryLimitDefinitionContext;

QueryLimitDefinitionContext.prototype.LIMIT = function() {
    return this.getToken(FlinkSqlParserParser.LIMIT, 0);
};

QueryLimitDefinitionContext.prototype.countDefinition = function() {
    return this.getTypedRuleContext(CountDefinitionContext,0);
};

QueryLimitDefinitionContext.prototype.ALL = function() {
    return this.getToken(FlinkSqlParserParser.ALL, 0);
};

QueryLimitDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterQueryLimitDefinition(this);
	}
};

QueryLimitDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitQueryLimitDefinition(this);
	}
};

QueryLimitDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitQueryLimitDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.QueryLimitDefinitionContext = QueryLimitDefinitionContext;

FlinkSqlParserParser.prototype.queryLimitDefinition = function() {

    var localctx = new QueryLimitDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, FlinkSqlParserParser.RULE_queryLimitDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 572;
        this.match(FlinkSqlParserParser.LIMIT);
        this.state = 575;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParserParser.SEMICOLON:
            this.state = 573;
            this.countDefinition();
            break;
        case FlinkSqlParserParser.T__8:
            this.state = 574;
            this.match(FlinkSqlParserParser.T__8);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CountDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_countDefinition;
    return this;
}

CountDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CountDefinitionContext.prototype.constructor = CountDefinitionContext;


CountDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCountDefinition(this);
	}
};

CountDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCountDefinition(this);
	}
};

CountDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCountDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.CountDefinitionContext = CountDefinitionContext;

FlinkSqlParserParser.prototype.countDefinition = function() {

    var localctx = new CountDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, FlinkSqlParserParser.RULE_countDefinition);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryOffsetDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_queryOffsetDefinition;
    return this;
}

QueryOffsetDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryOffsetDefinitionContext.prototype.constructor = QueryOffsetDefinitionContext;


QueryOffsetDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterQueryOffsetDefinition(this);
	}
};

QueryOffsetDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitQueryOffsetDefinition(this);
	}
};

QueryOffsetDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitQueryOffsetDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.QueryOffsetDefinitionContext = QueryOffsetDefinitionContext;

FlinkSqlParserParser.prototype.queryOffsetDefinition = function() {

    var localctx = new QueryOffsetDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, FlinkSqlParserParser.RULE_queryOffsetDefinition);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryFetchDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_queryFetchDefinition;
    return this;
}

QueryFetchDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryFetchDefinitionContext.prototype.constructor = QueryFetchDefinitionContext;


QueryFetchDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterQueryFetchDefinition(this);
	}
};

QueryFetchDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitQueryFetchDefinition(this);
	}
};

QueryFetchDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitQueryFetchDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.QueryFetchDefinitionContext = QueryFetchDefinitionContext;

FlinkSqlParserParser.prototype.queryFetchDefinition = function() {

    var localctx = new QueryFetchDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, FlinkSqlParserParser.RULE_queryFetchDefinition);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_insertStatement;
    return this;
}

InsertStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertStatementContext.prototype.constructor = InsertStatementContext;

InsertStatementContext.prototype.INSERT = function() {
    return this.getToken(FlinkSqlParserParser.INSERT, 0);
};

InsertStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

InsertStatementContext.prototype.INTO = function() {
    return this.getToken(FlinkSqlParserParser.INTO, 0);
};

InsertStatementContext.prototype.OVERWRITE = function() {
    return this.getToken(FlinkSqlParserParser.OVERWRITE, 0);
};

InsertStatementContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

InsertStatementContext.prototype.valuesDefinition = function() {
    return this.getTypedRuleContext(ValuesDefinitionContext,0);
};

InsertStatementContext.prototype.insertPartitionDefinition = function() {
    return this.getTypedRuleContext(InsertPartitionDefinitionContext,0);
};

InsertStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterInsertStatement(this);
	}
};

InsertStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitInsertStatement(this);
	}
};

InsertStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitInsertStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.InsertStatementContext = InsertStatementContext;

FlinkSqlParserParser.prototype.insertStatement = function() {

    var localctx = new InsertStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, FlinkSqlParserParser.RULE_insertStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 583;
        this.match(FlinkSqlParserParser.INSERT);
        this.state = 584;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParserParser.INTO || _la===FlinkSqlParserParser.OVERWRITE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 585;
        this.uid();
        this.state = 591;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParserParser.T__4:
        case FlinkSqlParserParser.PARTITION:
            this.state = 587;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParserParser.PARTITION) {
                this.state = 586;
                this.insertPartitionDefinition();
            }

            this.state = 589;
            this.selectStatement();
            break;
        case FlinkSqlParserParser.VALUES:
            this.state = 590;
            this.valuesDefinition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertPartitionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_insertPartitionDefinition;
    return this;
}

InsertPartitionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertPartitionDefinitionContext.prototype.constructor = InsertPartitionDefinitionContext;

InsertPartitionDefinitionContext.prototype.PARTITION = function() {
    return this.getToken(FlinkSqlParserParser.PARTITION, 0);
};

InsertPartitionDefinitionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParserParser.LR_BRACKET, 0);
};

InsertPartitionDefinitionContext.prototype.keyValueDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeyValueDefinitionContext);
    } else {
        return this.getTypedRuleContext(KeyValueDefinitionContext,i);
    }
};

InsertPartitionDefinitionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParserParser.RR_BRACKET, 0);
};

InsertPartitionDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParserParser.COMMA, i);
    }
};


InsertPartitionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterInsertPartitionDefinition(this);
	}
};

InsertPartitionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitInsertPartitionDefinition(this);
	}
};

InsertPartitionDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitInsertPartitionDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.InsertPartitionDefinitionContext = InsertPartitionDefinitionContext;

FlinkSqlParserParser.prototype.insertPartitionDefinition = function() {

    var localctx = new InsertPartitionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, FlinkSqlParserParser.RULE_insertPartitionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 593;
        this.match(FlinkSqlParserParser.PARTITION);
        this.state = 594;
        this.match(FlinkSqlParserParser.LR_BRACKET);
        this.state = 595;
        this.keyValueDefinition();
        this.state = 600;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParserParser.COMMA) {
            this.state = 596;
            this.match(FlinkSqlParserParser.COMMA);
            this.state = 597;
            this.keyValueDefinition();
            this.state = 602;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 603;
        this.match(FlinkSqlParserParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValuesDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_valuesDefinition;
    return this;
}

ValuesDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesDefinitionContext.prototype.constructor = ValuesDefinitionContext;

ValuesDefinitionContext.prototype.VALUES = function() {
    return this.getToken(FlinkSqlParserParser.VALUES, 0);
};

ValuesDefinitionContext.prototype.valuesRowDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValuesRowDefinitionContext);
    } else {
        return this.getTypedRuleContext(ValuesRowDefinitionContext,i);
    }
};

ValuesDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParserParser.COMMA, i);
    }
};


ValuesDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterValuesDefinition(this);
	}
};

ValuesDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitValuesDefinition(this);
	}
};

ValuesDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitValuesDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.ValuesDefinitionContext = ValuesDefinitionContext;

FlinkSqlParserParser.prototype.valuesDefinition = function() {

    var localctx = new ValuesDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, FlinkSqlParserParser.RULE_valuesDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 605;
        this.match(FlinkSqlParserParser.VALUES);
        this.state = 606;
        this.valuesRowDefinition();
        this.state = 611;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParserParser.COMMA) {
            this.state = 607;
            this.match(FlinkSqlParserParser.COMMA);
            this.state = 608;
            this.valuesRowDefinition();
            this.state = 613;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValuesRowDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_valuesRowDefinition;
    return this;
}

ValuesRowDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesRowDefinitionContext.prototype.constructor = ValuesRowDefinitionContext;

ValuesRowDefinitionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParserParser.LR_BRACKET, 0);
};

ValuesRowDefinitionContext.prototype.allValueDifinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AllValueDifinitionContext);
    } else {
        return this.getTypedRuleContext(AllValueDifinitionContext,i);
    }
};

ValuesRowDefinitionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParserParser.RR_BRACKET, 0);
};

ValuesRowDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParserParser.COMMA, i);
    }
};


ValuesRowDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterValuesRowDefinition(this);
	}
};

ValuesRowDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitValuesRowDefinition(this);
	}
};

ValuesRowDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitValuesRowDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.ValuesRowDefinitionContext = ValuesRowDefinitionContext;

FlinkSqlParserParser.prototype.valuesRowDefinition = function() {

    var localctx = new ValuesRowDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, FlinkSqlParserParser.RULE_valuesRowDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 614;
        this.match(FlinkSqlParserParser.LR_BRACKET);
        this.state = 615;
        this.allValueDifinition();
        this.state = 620;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParserParser.COMMA) {
            this.state = 616;
            this.match(FlinkSqlParserParser.COMMA);
            this.state = 617;
            this.allValueDifinition();
            this.state = 622;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 623;
        this.match(FlinkSqlParserParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AllValueDifinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_allValueDifinition;
    return this;
}

AllValueDifinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AllValueDifinitionContext.prototype.constructor = AllValueDifinitionContext;

AllValueDifinitionContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

AllValueDifinitionContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

AllValueDifinitionContext.prototype.DEC_DIGIT = function() {
    return this.getToken(FlinkSqlParserParser.DEC_DIGIT, 0);
};

AllValueDifinitionContext.prototype.NULL = function() {
    return this.getToken(FlinkSqlParserParser.NULL, 0);
};

AllValueDifinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterAllValueDifinition(this);
	}
};

AllValueDifinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitAllValueDifinition(this);
	}
};

AllValueDifinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitAllValueDifinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.AllValueDifinitionContext = AllValueDifinitionContext;

FlinkSqlParserParser.prototype.allValueDifinition = function() {

    var localctx = new AllValueDifinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, FlinkSqlParserParser.RULE_allValueDifinition);
    try {
        this.state = 629;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParserParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 625;
            this.stringLiteral();
            break;
        case FlinkSqlParserParser.TRUE:
        case FlinkSqlParserParser.FALSE:
            this.enterOuterAlt(localctx, 2);
            this.state = 626;
            this.booleanLiteral();
            break;
        case FlinkSqlParserParser.DEC_DIGIT:
            this.enterOuterAlt(localctx, 3);
            this.state = 627;
            this.match(FlinkSqlParserParser.DEC_DIGIT);
            break;
        case FlinkSqlParserParser.NULL:
            this.enterOuterAlt(localctx, 4);
            this.state = 628;
            this.match(FlinkSqlParserParser.NULL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UidListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_uidList;
    return this;
}

UidListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UidListContext.prototype.constructor = UidListContext;

UidListContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

UidListContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUidList(this);
	}
};

UidListContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUidList(this);
	}
};

UidListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUidList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.UidListContext = UidListContext;

FlinkSqlParserParser.prototype.uidList = function() {

    var localctx = new UidListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, FlinkSqlParserParser.RULE_uidList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 631;
        this.uid();
        this.state = 636;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParserParser.T__2) {
            this.state = 632;
            this.match(FlinkSqlParserParser.T__2);
            this.state = 633;
            this.uid();
            this.state = 638;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_uid;
    return this;
}

UidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UidContext.prototype.constructor = UidContext;

UidContext.prototype.ID = function() {
    return this.getToken(FlinkSqlParserParser.ID, 0);
};

UidContext.prototype.DOT_ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.DOT_ID);
    } else {
        return this.getToken(FlinkSqlParserParser.DOT_ID, i);
    }
};


UidContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUid(this);
	}
};

UidContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUid(this);
	}
};

UidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.UidContext = UidContext;

FlinkSqlParserParser.prototype.uid = function() {

    var localctx = new UidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, FlinkSqlParserParser.RULE_uid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 639;
        this.match(FlinkSqlParserParser.ID);
        this.state = 643;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1+1) {
                this.state = 640;
                this.match(FlinkSqlParserParser.DOT_ID); 
            }
            this.state = 645;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_withOption;
    return this;
}

WithOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithOptionContext.prototype.constructor = WithOptionContext;

WithOptionContext.prototype.WITH = function() {
    return this.getToken(FlinkSqlParserParser.WITH, 0);
};

WithOptionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParserParser.LR_BRACKET, 0);
};

WithOptionContext.prototype.keyValueDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeyValueDefinitionContext);
    } else {
        return this.getTypedRuleContext(KeyValueDefinitionContext,i);
    }
};

WithOptionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParserParser.RR_BRACKET, 0);
};

WithOptionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParserParser.COMMA, i);
    }
};


WithOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterWithOption(this);
	}
};

WithOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitWithOption(this);
	}
};

WithOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitWithOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.WithOptionContext = WithOptionContext;

FlinkSqlParserParser.prototype.withOption = function() {

    var localctx = new WithOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, FlinkSqlParserParser.RULE_withOption);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 646;
        this.match(FlinkSqlParserParser.WITH);
        this.state = 647;
        this.match(FlinkSqlParserParser.LR_BRACKET);
        this.state = 648;
        this.keyValueDefinition();
        this.state = 653;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParserParser.COMMA) {
            this.state = 649;
            this.match(FlinkSqlParserParser.COMMA);
            this.state = 650;
            this.keyValueDefinition();
            this.state = 655;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 656;
        this.match(FlinkSqlParserParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfNotExistsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_ifNotExists;
    return this;
}

IfNotExistsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfNotExistsContext.prototype.constructor = IfNotExistsContext;

IfNotExistsContext.prototype.IF = function() {
    return this.getToken(FlinkSqlParserParser.IF, 0);
};

IfNotExistsContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParserParser.NOT, 0);
};

IfNotExistsContext.prototype.EXISTS = function() {
    return this.getToken(FlinkSqlParserParser.EXISTS, 0);
};

IfNotExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterIfNotExists(this);
	}
};

IfNotExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitIfNotExists(this);
	}
};

IfNotExistsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitIfNotExists(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.IfNotExistsContext = IfNotExistsContext;

FlinkSqlParserParser.prototype.ifNotExists = function() {

    var localctx = new IfNotExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, FlinkSqlParserParser.RULE_ifNotExists);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 658;
        this.match(FlinkSqlParserParser.IF);
        this.state = 659;
        this.match(FlinkSqlParserParser.NOT);
        this.state = 660;
        this.match(FlinkSqlParserParser.EXISTS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfExistsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_ifExists;
    return this;
}

IfExistsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfExistsContext.prototype.constructor = IfExistsContext;

IfExistsContext.prototype.IF = function() {
    return this.getToken(FlinkSqlParserParser.IF, 0);
};

IfExistsContext.prototype.EXISTS = function() {
    return this.getToken(FlinkSqlParserParser.EXISTS, 0);
};

IfExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterIfExists(this);
	}
};

IfExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitIfExists(this);
	}
};

IfExistsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitIfExists(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.IfExistsContext = IfExistsContext;

FlinkSqlParserParser.prototype.ifExists = function() {

    var localctx = new IfExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, FlinkSqlParserParser.RULE_ifExists);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 662;
        this.match(FlinkSqlParserParser.IF);
        this.state = 663;
        this.match(FlinkSqlParserParser.EXISTS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeyValueDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_keyValueDefinition;
    return this;
}

KeyValueDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyValueDefinitionContext.prototype.constructor = KeyValueDefinitionContext;

KeyValueDefinitionContext.prototype.DOUBLE_QUOTE_ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParserParser.DOUBLE_QUOTE_ID);
    } else {
        return this.getToken(FlinkSqlParserParser.DOUBLE_QUOTE_ID, i);
    }
};


KeyValueDefinitionContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(FlinkSqlParserParser.EQUAL_SYMBOL, 0);
};

KeyValueDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterKeyValueDefinition(this);
	}
};

KeyValueDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitKeyValueDefinition(this);
	}
};

KeyValueDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitKeyValueDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.KeyValueDefinitionContext = KeyValueDefinitionContext;

FlinkSqlParserParser.prototype.keyValueDefinition = function() {

    var localctx = new KeyValueDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, FlinkSqlParserParser.RULE_keyValueDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 665;
        this.match(FlinkSqlParserParser.DOUBLE_QUOTE_ID);
        this.state = 666;
        this.match(FlinkSqlParserParser.EQUAL_SYMBOL);
        this.state = 667;
        this.match(FlinkSqlParserParser.DOUBLE_QUOTE_ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_expressions;
    return this;
}

ExpressionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionsContext.prototype.constructor = ExpressionsContext;

ExpressionsContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterExpressions(this);
	}
};

ExpressionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitExpressions(this);
	}
};

ExpressionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitExpressions(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.ExpressionsContext = ExpressionsContext;

FlinkSqlParserParser.prototype.expressions = function() {

    var localctx = new ExpressionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, FlinkSqlParserParser.RULE_expressions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 669;
        this.expression(0);
        this.state = 674;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParserParser.T__2) {
            this.state = 670;
            this.match(FlinkSqlParserParser.T__2);
            this.state = 671;
            this.expression(0);
            this.state = 676;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function IsExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.testValue = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IsExpressionContext.prototype.constructor = IsExpressionContext;

FlinkSqlParserParser.IsExpressionContext = IsExpressionContext;

IsExpressionContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

IsExpressionContext.prototype.IS = function() {
    return this.getToken(FlinkSqlParserParser.IS, 0);
};

IsExpressionContext.prototype.TRUE = function() {
    return this.getToken(FlinkSqlParserParser.TRUE, 0);
};

IsExpressionContext.prototype.FALSE = function() {
    return this.getToken(FlinkSqlParserParser.FALSE, 0);
};

IsExpressionContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParserParser.NOT, 0);
};
IsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterIsExpression(this);
	}
};

IsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitIsExpression(this);
	}
};

IsExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitIsExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NotExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.notOperator = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NotExpressionContext.prototype.constructor = NotExpressionContext;

FlinkSqlParserParser.NotExpressionContext = NotExpressionContext;

NotExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NotExpressionContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParserParser.NOT, 0);
};
NotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterNotExpression(this);
	}
};

NotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitNotExpression(this);
	}
};

NotExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitNotExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LogicalExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalExpressionContext.prototype = Object.create(ExpressionContext.prototype);
LogicalExpressionContext.prototype.constructor = LogicalExpressionContext;

FlinkSqlParserParser.LogicalExpressionContext = LogicalExpressionContext;

LogicalExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

LogicalExpressionContext.prototype.logicalOperator = function() {
    return this.getTypedRuleContext(LogicalOperatorContext,0);
};
LogicalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLogicalExpression(this);
	}
};

LogicalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLogicalExpression(this);
	}
};

LogicalExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLogicalExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PredicateExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PredicateExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PredicateExpressionContext.prototype.constructor = PredicateExpressionContext;

FlinkSqlParserParser.PredicateExpressionContext = PredicateExpressionContext;

PredicateExpressionContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};
PredicateExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterPredicateExpression(this);
	}
};

PredicateExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitPredicateExpression(this);
	}
};

PredicateExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitPredicateExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



FlinkSqlParserParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 116;
    this.enterRecursionRule(localctx, 116, FlinkSqlParserParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 688;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        switch(la_) {
        case 1:
            localctx = new NotExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 678;
            localctx.notOperator = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParserParser.T__3 || _la===FlinkSqlParserParser.NOT)) {
                localctx.notOperator = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 679;
            this.expression(4);
            break;

        case 2:
            localctx = new IsExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 680;
            this.predicate(0);
            this.state = 681;
            this.match(FlinkSqlParserParser.IS);
            this.state = 683;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParserParser.NOT) {
                this.state = 682;
                this.match(FlinkSqlParserParser.NOT);
            }

            this.state = 685;
            localctx.testValue = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParserParser.TRUE || _la===FlinkSqlParserParser.FALSE)) {
                localctx.testValue = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 3:
            localctx = new PredicateExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 687;
            this.predicate(0);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 696;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new LogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                this.pushNewRecursionContext(localctx, _startState, FlinkSqlParserParser.RULE_expression);
                this.state = 690;
                if (!( this.precpred(this._ctx, 3))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                }
                this.state = 691;
                this.logicalOperator();
                this.state = 692;
                this.expression(4); 
            }
            this.state = 698;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_predicate;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;


 
PredicateContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ExpressionAtomPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExpressionAtomPredicateContext.prototype = Object.create(PredicateContext.prototype);
ExpressionAtomPredicateContext.prototype.constructor = ExpressionAtomPredicateContext;

FlinkSqlParserParser.ExpressionAtomPredicateContext = ExpressionAtomPredicateContext;

ExpressionAtomPredicateContext.prototype.expressionAtom = function() {
    return this.getTypedRuleContext(ExpressionAtomContext,0);
};
ExpressionAtomPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterExpressionAtomPredicate(this);
	}
};

ExpressionAtomPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitExpressionAtomPredicate(this);
	}
};

ExpressionAtomPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitExpressionAtomPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InPredicateContext.prototype = Object.create(PredicateContext.prototype);
InPredicateContext.prototype.constructor = InPredicateContext;

FlinkSqlParserParser.InPredicateContext = InPredicateContext;

InPredicateContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

InPredicateContext.prototype.IN = function() {
    return this.getToken(FlinkSqlParserParser.IN, 0);
};

InPredicateContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

InPredicateContext.prototype.expressions = function() {
    return this.getTypedRuleContext(ExpressionsContext,0);
};

InPredicateContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParserParser.NOT, 0);
};
InPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterInPredicate(this);
	}
};

InPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitInPredicate(this);
	}
};

InPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitInPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SubqueryComparasionPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.quantifier = null; // Token;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryComparasionPredicateContext.prototype = Object.create(PredicateContext.prototype);
SubqueryComparasionPredicateContext.prototype.constructor = SubqueryComparasionPredicateContext;

FlinkSqlParserParser.SubqueryComparasionPredicateContext = SubqueryComparasionPredicateContext;

SubqueryComparasionPredicateContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

SubqueryComparasionPredicateContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

SubqueryComparasionPredicateContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

SubqueryComparasionPredicateContext.prototype.ALL = function() {
    return this.getToken(FlinkSqlParserParser.ALL, 0);
};

SubqueryComparasionPredicateContext.prototype.ANY = function() {
    return this.getToken(FlinkSqlParserParser.ANY, 0);
};
SubqueryComparasionPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSubqueryComparasionPredicate(this);
	}
};

SubqueryComparasionPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSubqueryComparasionPredicate(this);
	}
};

SubqueryComparasionPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSubqueryComparasionPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BetweenPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BetweenPredicateContext.prototype = Object.create(PredicateContext.prototype);
BetweenPredicateContext.prototype.constructor = BetweenPredicateContext;

FlinkSqlParserParser.BetweenPredicateContext = BetweenPredicateContext;

BetweenPredicateContext.prototype.predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateContext);
    } else {
        return this.getTypedRuleContext(PredicateContext,i);
    }
};

BetweenPredicateContext.prototype.BETWEEN = function() {
    return this.getToken(FlinkSqlParserParser.BETWEEN, 0);
};

BetweenPredicateContext.prototype.AND = function() {
    return this.getToken(FlinkSqlParserParser.AND, 0);
};

BetweenPredicateContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParserParser.NOT, 0);
};
BetweenPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterBetweenPredicate(this);
	}
};

BetweenPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitBetweenPredicate(this);
	}
};

BetweenPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitBetweenPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BinaryComparasionPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.left = null; // PredicateContext;
    this.right = null; // PredicateContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BinaryComparasionPredicateContext.prototype = Object.create(PredicateContext.prototype);
BinaryComparasionPredicateContext.prototype.constructor = BinaryComparasionPredicateContext;

FlinkSqlParserParser.BinaryComparasionPredicateContext = BinaryComparasionPredicateContext;

BinaryComparasionPredicateContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

BinaryComparasionPredicateContext.prototype.predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateContext);
    } else {
        return this.getTypedRuleContext(PredicateContext,i);
    }
};
BinaryComparasionPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterBinaryComparasionPredicate(this);
	}
};

BinaryComparasionPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitBinaryComparasionPredicate(this);
	}
};

BinaryComparasionPredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitBinaryComparasionPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LikePredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LikePredicateContext.prototype = Object.create(PredicateContext.prototype);
LikePredicateContext.prototype.constructor = LikePredicateContext;

FlinkSqlParserParser.LikePredicateContext = LikePredicateContext;

LikePredicateContext.prototype.predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateContext);
    } else {
        return this.getTypedRuleContext(PredicateContext,i);
    }
};

LikePredicateContext.prototype.LIKE = function() {
    return this.getToken(FlinkSqlParserParser.LIKE, 0);
};

LikePredicateContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParserParser.NOT, 0);
};
LikePredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLikePredicate(this);
	}
};

LikePredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLikePredicate(this);
	}
};

LikePredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLikePredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};



FlinkSqlParserParser.prototype.predicate = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PredicateContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 118;
    this.enterRecursionRule(localctx, 118, FlinkSqlParserParser.RULE_predicate, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new ExpressionAtomPredicateContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 700;
        this.expressionAtom(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 742;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 740;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new BinaryComparasionPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParserParser.RULE_predicate);
                    this.state = 702;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 703;
                    this.comparisonOperator();
                    this.state = 704;
                    localctx.right = this.predicate(6);
                    break;

                case 2:
                    localctx = new BetweenPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParserParser.RULE_predicate);
                    this.state = 706;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 708;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===FlinkSqlParserParser.NOT) {
                        this.state = 707;
                        this.match(FlinkSqlParserParser.NOT);
                    }

                    this.state = 710;
                    this.match(FlinkSqlParserParser.BETWEEN);
                    this.state = 711;
                    this.predicate(0);
                    this.state = 712;
                    this.match(FlinkSqlParserParser.AND);
                    this.state = 713;
                    this.predicate(4);
                    break;

                case 3:
                    localctx = new LikePredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParserParser.RULE_predicate);
                    this.state = 715;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 717;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===FlinkSqlParserParser.NOT) {
                        this.state = 716;
                        this.match(FlinkSqlParserParser.NOT);
                    }

                    this.state = 719;
                    this.match(FlinkSqlParserParser.LIKE);
                    this.state = 720;
                    this.predicate(3);
                    break;

                case 4:
                    localctx = new InPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParserParser.RULE_predicate);
                    this.state = 721;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 723;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===FlinkSqlParserParser.NOT) {
                        this.state = 722;
                        this.match(FlinkSqlParserParser.NOT);
                    }

                    this.state = 725;
                    this.match(FlinkSqlParserParser.IN);
                    this.state = 726;
                    this.match(FlinkSqlParserParser.T__4);
                    this.state = 729;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 727;
                        this.selectStatement();
                        break;

                    case 2:
                        this.state = 728;
                        this.expressions();
                        break;

                    }
                    this.state = 731;
                    this.match(FlinkSqlParserParser.T__5);
                    break;

                case 5:
                    localctx = new SubqueryComparasionPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParserParser.RULE_predicate);
                    this.state = 733;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 734;
                    this.comparisonOperator();
                    this.state = 735;
                    localctx.quantifier = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===FlinkSqlParserParser.T__8 || _la===FlinkSqlParserParser.T__9)) {
                        localctx.quantifier = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 736;
                    this.match(FlinkSqlParserParser.T__4);
                    this.state = 737;
                    this.selectStatement();
                    this.state = 738;
                    this.match(FlinkSqlParserParser.T__5);
                    break;

                } 
            }
            this.state = 744;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ExpressionAtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_expressionAtom;
    return this;
}

ExpressionAtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionAtomContext.prototype.constructor = ExpressionAtomContext;


 
ExpressionAtomContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function UnaryExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
UnaryExpressionAtomContext.prototype.constructor = UnaryExpressionAtomContext;

FlinkSqlParserParser.UnaryExpressionAtomContext = UnaryExpressionAtomContext;

UnaryExpressionAtomContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

UnaryExpressionAtomContext.prototype.expressionAtom = function() {
    return this.getTypedRuleContext(ExpressionAtomContext,0);
};
UnaryExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUnaryExpressionAtom(this);
	}
};

UnaryExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUnaryExpressionAtom(this);
	}
};

UnaryExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUnaryExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SubqueryExpessionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryExpessionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
SubqueryExpessionAtomContext.prototype.constructor = SubqueryExpessionAtomContext;

FlinkSqlParserParser.SubqueryExpessionAtomContext = SubqueryExpessionAtomContext;

SubqueryExpessionAtomContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};
SubqueryExpessionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSubqueryExpessionAtom(this);
	}
};

SubqueryExpessionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSubqueryExpessionAtom(this);
	}
};

SubqueryExpessionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSubqueryExpessionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExistsExpessionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExistsExpessionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
ExistsExpessionAtomContext.prototype.constructor = ExistsExpessionAtomContext;

FlinkSqlParserParser.ExistsExpessionAtomContext = ExistsExpessionAtomContext;

ExistsExpessionAtomContext.prototype.EXISTS = function() {
    return this.getToken(FlinkSqlParserParser.EXISTS, 0);
};

ExistsExpessionAtomContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};
ExistsExpessionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterExistsExpessionAtom(this);
	}
};

ExistsExpessionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitExistsExpessionAtom(this);
	}
};

ExistsExpessionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitExistsExpessionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConstantExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstantExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
ConstantExpressionAtomContext.prototype.constructor = ConstantExpressionAtomContext;

FlinkSqlParserParser.ConstantExpressionAtomContext = ConstantExpressionAtomContext;

ConstantExpressionAtomContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};
ConstantExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterConstantExpressionAtom(this);
	}
};

ConstantExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitConstantExpressionAtom(this);
	}
};

ConstantExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitConstantExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BinaryExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BinaryExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
BinaryExpressionAtomContext.prototype.constructor = BinaryExpressionAtomContext;

FlinkSqlParserParser.BinaryExpressionAtomContext = BinaryExpressionAtomContext;

BinaryExpressionAtomContext.prototype.BINARY = function() {
    return this.getToken(FlinkSqlParserParser.BINARY, 0);
};

BinaryExpressionAtomContext.prototype.expressionAtom = function() {
    return this.getTypedRuleContext(ExpressionAtomContext,0);
};
BinaryExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterBinaryExpressionAtom(this);
	}
};

BinaryExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitBinaryExpressionAtom(this);
	}
};

BinaryExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitBinaryExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FullColumnNameExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FullColumnNameExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
FullColumnNameExpressionAtomContext.prototype.constructor = FullColumnNameExpressionAtomContext;

FlinkSqlParserParser.FullColumnNameExpressionAtomContext = FullColumnNameExpressionAtomContext;

FullColumnNameExpressionAtomContext.prototype.fullColumnName = function() {
    return this.getTypedRuleContext(FullColumnNameContext,0);
};
FullColumnNameExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterFullColumnNameExpressionAtom(this);
	}
};

FullColumnNameExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitFullColumnNameExpressionAtom(this);
	}
};

FullColumnNameExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitFullColumnNameExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    this.left = null; // ExpressionAtomContext;
    this.right = null; // ExpressionAtomContext;
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
BitExpressionAtomContext.prototype.constructor = BitExpressionAtomContext;

FlinkSqlParserParser.BitExpressionAtomContext = BitExpressionAtomContext;

BitExpressionAtomContext.prototype.bitOperator = function() {
    return this.getTypedRuleContext(BitOperatorContext,0);
};

BitExpressionAtomContext.prototype.expressionAtom = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionAtomContext);
    } else {
        return this.getTypedRuleContext(ExpressionAtomContext,i);
    }
};
BitExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterBitExpressionAtom(this);
	}
};

BitExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitBitExpressionAtom(this);
	}
};

BitExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitBitExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NestedExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NestedExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
NestedExpressionAtomContext.prototype.constructor = NestedExpressionAtomContext;

FlinkSqlParserParser.NestedExpressionAtomContext = NestedExpressionAtomContext;

NestedExpressionAtomContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NestedExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterNestedExpressionAtom(this);
	}
};

NestedExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitNestedExpressionAtom(this);
	}
};

NestedExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitNestedExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NestedRowExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NestedRowExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
NestedRowExpressionAtomContext.prototype.constructor = NestedRowExpressionAtomContext;

FlinkSqlParserParser.NestedRowExpressionAtomContext = NestedRowExpressionAtomContext;

NestedRowExpressionAtomContext.prototype.ROW = function() {
    return this.getToken(FlinkSqlParserParser.ROW, 0);
};

NestedRowExpressionAtomContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NestedRowExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterNestedRowExpressionAtom(this);
	}
};

NestedRowExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitNestedRowExpressionAtom(this);
	}
};

NestedRowExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitNestedRowExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MathExpressionAtomContext(parser, ctx) {
	ExpressionAtomContext.call(this, parser);
    this.left = null; // ExpressionAtomContext;
    this.right = null; // ExpressionAtomContext;
    ExpressionAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MathExpressionAtomContext.prototype = Object.create(ExpressionAtomContext.prototype);
MathExpressionAtomContext.prototype.constructor = MathExpressionAtomContext;

FlinkSqlParserParser.MathExpressionAtomContext = MathExpressionAtomContext;

MathExpressionAtomContext.prototype.mathOperator = function() {
    return this.getTypedRuleContext(MathOperatorContext,0);
};

MathExpressionAtomContext.prototype.expressionAtom = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionAtomContext);
    } else {
        return this.getTypedRuleContext(ExpressionAtomContext,i);
    }
};
MathExpressionAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterMathExpressionAtom(this);
	}
};

MathExpressionAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitMathExpressionAtom(this);
	}
};

MathExpressionAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitMathExpressionAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};



FlinkSqlParserParser.prototype.expressionAtom = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionAtomContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 120;
    this.enterRecursionRule(localctx, 120, FlinkSqlParserParser.RULE_expressionAtom, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 784;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ConstantExpressionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 746;
            this.constant();
            break;

        case 2:
            localctx = new FullColumnNameExpressionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 747;
            this.fullColumnName();
            break;

        case 3:
            localctx = new UnaryExpressionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 748;
            this.unaryOperator();
            this.state = 749;
            this.expressionAtom(8);
            break;

        case 4:
            localctx = new BinaryExpressionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 751;
            this.match(FlinkSqlParserParser.BINARY);
            this.state = 752;
            this.expressionAtom(7);
            break;

        case 5:
            localctx = new NestedExpressionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 753;
            this.match(FlinkSqlParserParser.T__4);
            this.state = 754;
            this.expression(0);
            this.state = 759;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParserParser.T__2) {
                this.state = 755;
                this.match(FlinkSqlParserParser.T__2);
                this.state = 756;
                this.expression(0);
                this.state = 761;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 762;
            this.match(FlinkSqlParserParser.T__5);
            break;

        case 6:
            localctx = new NestedRowExpressionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 764;
            this.match(FlinkSqlParserParser.ROW);
            this.state = 765;
            this.match(FlinkSqlParserParser.T__4);
            this.state = 766;
            this.expression(0);
            this.state = 769; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 767;
                this.match(FlinkSqlParserParser.T__2);
                this.state = 768;
                this.expression(0);
                this.state = 771; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===FlinkSqlParserParser.T__2);
            this.state = 773;
            this.match(FlinkSqlParserParser.T__5);
            break;

        case 7:
            localctx = new ExistsExpessionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 775;
            this.match(FlinkSqlParserParser.EXISTS);
            this.state = 776;
            this.match(FlinkSqlParserParser.T__4);
            this.state = 777;
            this.selectStatement();
            this.state = 778;
            this.match(FlinkSqlParserParser.T__5);
            break;

        case 8:
            localctx = new SubqueryExpessionAtomContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 780;
            this.match(FlinkSqlParserParser.T__4);
            this.state = 781;
            this.selectStatement();
            this.state = 782;
            this.match(FlinkSqlParserParser.T__5);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 796;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 794;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new BitExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParserParser.RULE_expressionAtom);
                    this.state = 786;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 787;
                    this.bitOperator();
                    this.state = 788;
                    localctx.right = this.expressionAtom(3);
                    break;

                case 2:
                    localctx = new MathExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParserParser.RULE_expressionAtom);
                    this.state = 790;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 791;
                    this.mathOperator();
                    this.state = 792;
                    localctx.right = this.expressionAtom(2);
                    break;

                } 
            }
            this.state = 798;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function LogicalOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_logicalOperator;
    return this;
}

LogicalOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalOperatorContext.prototype.constructor = LogicalOperatorContext;

LogicalOperatorContext.prototype.AND = function() {
    return this.getToken(FlinkSqlParserParser.AND, 0);
};

LogicalOperatorContext.prototype.OR = function() {
    return this.getToken(FlinkSqlParserParser.OR, 0);
};

LogicalOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLogicalOperator(this);
	}
};

LogicalOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLogicalOperator(this);
	}
};

LogicalOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLogicalOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.LogicalOperatorContext = LogicalOperatorContext;

FlinkSqlParserParser.prototype.logicalOperator = function() {

    var localctx = new LogicalOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, FlinkSqlParserParser.RULE_logicalOperator);
    try {
        this.state = 805;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParserParser.AND:
            this.enterOuterAlt(localctx, 1);
            this.state = 799;
            this.match(FlinkSqlParserParser.AND);
            break;
        case FlinkSqlParserParser.T__6:
            this.enterOuterAlt(localctx, 2);
            this.state = 800;
            this.match(FlinkSqlParserParser.T__6);
            this.state = 801;
            this.match(FlinkSqlParserParser.T__6);
            break;
        case FlinkSqlParserParser.OR:
            this.enterOuterAlt(localctx, 3);
            this.state = 802;
            this.match(FlinkSqlParserParser.OR);
            break;
        case FlinkSqlParserParser.T__7:
            this.enterOuterAlt(localctx, 4);
            this.state = 803;
            this.match(FlinkSqlParserParser.T__7);
            this.state = 804;
            this.match(FlinkSqlParserParser.T__7);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparisonOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_comparisonOperator;
    return this;
}

ComparisonOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonOperatorContext.prototype.constructor = ComparisonOperatorContext;


ComparisonOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitComparisonOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.ComparisonOperatorContext = ComparisonOperatorContext;

FlinkSqlParserParser.prototype.comparisonOperator = function() {

    var localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, FlinkSqlParserParser.RULE_comparisonOperator);
    try {
        this.state = 821;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 807;
            this.match(FlinkSqlParserParser.T__8);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 808;
            this.match(FlinkSqlParserParser.T__9);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 809;
            this.match(FlinkSqlParserParser.T__10);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 810;
            this.match(FlinkSqlParserParser.T__10);
            this.state = 811;
            this.match(FlinkSqlParserParser.T__8);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 812;
            this.match(FlinkSqlParserParser.T__9);
            this.state = 813;
            this.match(FlinkSqlParserParser.T__8);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 814;
            this.match(FlinkSqlParserParser.T__10);
            this.state = 815;
            this.match(FlinkSqlParserParser.T__9);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 816;
            this.match(FlinkSqlParserParser.T__3);
            this.state = 817;
            this.match(FlinkSqlParserParser.T__8);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 818;
            this.match(FlinkSqlParserParser.T__10);
            this.state = 819;
            this.match(FlinkSqlParserParser.T__8);
            this.state = 820;
            this.match(FlinkSqlParserParser.T__9);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BitOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_bitOperator;
    return this;
}

BitOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitOperatorContext.prototype.constructor = BitOperatorContext;


BitOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterBitOperator(this);
	}
};

BitOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitBitOperator(this);
	}
};

BitOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitBitOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.BitOperatorContext = BitOperatorContext;

FlinkSqlParserParser.prototype.bitOperator = function() {

    var localctx = new BitOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, FlinkSqlParserParser.RULE_bitOperator);
    try {
        this.state = 830;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParserParser.T__10:
            this.enterOuterAlt(localctx, 1);
            this.state = 823;
            this.match(FlinkSqlParserParser.T__10);
            this.state = 824;
            this.match(FlinkSqlParserParser.T__10);
            break;
        case FlinkSqlParserParser.T__9:
            this.enterOuterAlt(localctx, 2);
            this.state = 825;
            this.match(FlinkSqlParserParser.T__9);
            this.state = 826;
            this.match(FlinkSqlParserParser.T__9);
            break;
        case FlinkSqlParserParser.T__6:
            this.enterOuterAlt(localctx, 3);
            this.state = 827;
            this.match(FlinkSqlParserParser.T__6);
            break;
        case FlinkSqlParserParser.T__11:
            this.enterOuterAlt(localctx, 4);
            this.state = 828;
            this.match(FlinkSqlParserParser.T__11);
            break;
        case FlinkSqlParserParser.T__7:
            this.enterOuterAlt(localctx, 5);
            this.state = 829;
            this.match(FlinkSqlParserParser.T__7);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_mathOperator;
    return this;
}

MathOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathOperatorContext.prototype.constructor = MathOperatorContext;

MathOperatorContext.prototype.DIV = function() {
    return this.getToken(FlinkSqlParserParser.DIV, 0);
};

MathOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterMathOperator(this);
	}
};

MathOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitMathOperator(this);
	}
};

MathOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitMathOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.MathOperatorContext = MathOperatorContext;

FlinkSqlParserParser.prototype.mathOperator = function() {

    var localctx = new MathOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, FlinkSqlParserParser.RULE_mathOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 832;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FlinkSqlParserParser.T__1) | (1 << FlinkSqlParserParser.T__12) | (1 << FlinkSqlParserParser.T__13) | (1 << FlinkSqlParserParser.T__14) | (1 << FlinkSqlParserParser.T__15) | (1 << FlinkSqlParserParser.T__16))) !== 0) || _la===FlinkSqlParserParser.DIV)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_unaryOperator;
    return this;
}

UnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOperatorContext.prototype.constructor = UnaryOperatorContext;

UnaryOperatorContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParserParser.NOT, 0);
};

UnaryOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUnaryOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.UnaryOperatorContext = UnaryOperatorContext;

FlinkSqlParserParser.prototype.unaryOperator = function() {

    var localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, FlinkSqlParserParser.RULE_unaryOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 834;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FlinkSqlParserParser.T__3) | (1 << FlinkSqlParserParser.T__14) | (1 << FlinkSqlParserParser.T__15) | (1 << FlinkSqlParserParser.T__17) | (1 << FlinkSqlParserParser.NOT))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FullColumnNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_fullColumnName;
    return this;
}

FullColumnNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FullColumnNameContext.prototype.constructor = FullColumnNameContext;

FullColumnNameContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

FullColumnNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterFullColumnName(this);
	}
};

FullColumnNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitFullColumnName(this);
	}
};

FullColumnNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitFullColumnName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.FullColumnNameContext = FullColumnNameContext;

FlinkSqlParserParser.prototype.fullColumnName = function() {

    var localctx = new FullColumnNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, FlinkSqlParserParser.RULE_fullColumnName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 836;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

ConstantContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

ConstantContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

ConstantContext.prototype.REAL_LITERAL = function() {
    return this.getToken(FlinkSqlParserParser.REAL_LITERAL, 0);
};

ConstantContext.prototype.BIT_STRING = function() {
    return this.getToken(FlinkSqlParserParser.BIT_STRING, 0);
};

ConstantContext.prototype.NULL = function() {
    return this.getToken(FlinkSqlParserParser.NULL, 0);
};

ConstantContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParserParser.NOT, 0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitConstant(this);
	}
};

ConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.ConstantContext = ConstantContext;

FlinkSqlParserParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, FlinkSqlParserParser.RULE_constant);
    var _la = 0; // Token type
    try {
        this.state = 849;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParserParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 838;
            this.stringLiteral();
            break;
        case FlinkSqlParserParser.ZERO_DECIMAL:
        case FlinkSqlParserParser.ONE_DECIMAL:
        case FlinkSqlParserParser.TWO_DECIMAL:
        case FlinkSqlParserParser.DECIMAL_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 839;
            this.decimalLiteral();
            break;
        case FlinkSqlParserParser.T__15:
            this.enterOuterAlt(localctx, 3);
            this.state = 840;
            this.match(FlinkSqlParserParser.T__15);
            this.state = 841;
            this.decimalLiteral();
            break;
        case FlinkSqlParserParser.TRUE:
        case FlinkSqlParserParser.FALSE:
            this.enterOuterAlt(localctx, 4);
            this.state = 842;
            this.booleanLiteral();
            break;
        case FlinkSqlParserParser.REAL_LITERAL:
            this.enterOuterAlt(localctx, 5);
            this.state = 843;
            this.match(FlinkSqlParserParser.REAL_LITERAL);
            break;
        case FlinkSqlParserParser.BIT_STRING:
            this.enterOuterAlt(localctx, 6);
            this.state = 844;
            this.match(FlinkSqlParserParser.BIT_STRING);
            break;
        case FlinkSqlParserParser.NOT:
        case FlinkSqlParserParser.NULL:
            this.enterOuterAlt(localctx, 7);
            this.state = 846;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParserParser.NOT) {
                this.state = 845;
                this.match(FlinkSqlParserParser.NOT);
            }

            this.state = 848;
            this.match(FlinkSqlParserParser.NULL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_stringLiteral;
    return this;
}

StringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

StringLiteralContext.prototype.STRING_LITERAL = function() {
    return this.getToken(FlinkSqlParserParser.STRING_LITERAL, 0);
};

StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitStringLiteral(this);
	}
};

StringLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitStringLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.StringLiteralContext = StringLiteralContext;

FlinkSqlParserParser.prototype.stringLiteral = function() {

    var localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, FlinkSqlParserParser.RULE_stringLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 851;
        this.match(FlinkSqlParserParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DecimalLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_decimalLiteral;
    return this;
}

DecimalLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

DecimalLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(FlinkSqlParserParser.DECIMAL_LITERAL, 0);
};

DecimalLiteralContext.prototype.ZERO_DECIMAL = function() {
    return this.getToken(FlinkSqlParserParser.ZERO_DECIMAL, 0);
};

DecimalLiteralContext.prototype.ONE_DECIMAL = function() {
    return this.getToken(FlinkSqlParserParser.ONE_DECIMAL, 0);
};

DecimalLiteralContext.prototype.TWO_DECIMAL = function() {
    return this.getToken(FlinkSqlParserParser.TWO_DECIMAL, 0);
};

DecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDecimalLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.DecimalLiteralContext = DecimalLiteralContext;

FlinkSqlParserParser.prototype.decimalLiteral = function() {

    var localctx = new DecimalLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, FlinkSqlParserParser.RULE_decimalLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 853;
        _la = this._input.LA(1);
        if(!(((((_la - 299)) & ~0x1f) == 0 && ((1 << (_la - 299)) & ((1 << (FlinkSqlParserParser.ZERO_DECIMAL - 299)) | (1 << (FlinkSqlParserParser.ONE_DECIMAL - 299)) | (1 << (FlinkSqlParserParser.TWO_DECIMAL - 299)) | (1 << (FlinkSqlParserParser.DECIMAL_LITERAL - 299)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParserParser.RULE_booleanLiteral;
    return this;
}

BooleanLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.TRUE = function() {
    return this.getToken(FlinkSqlParserParser.TRUE, 0);
};

BooleanLiteralContext.prototype.FALSE = function() {
    return this.getToken(FlinkSqlParserParser.FALSE, 0);
};

BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitBooleanLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParserParser.BooleanLiteralContext = BooleanLiteralContext;

FlinkSqlParserParser.prototype.booleanLiteral = function() {

    var localctx = new BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, FlinkSqlParserParser.RULE_booleanLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 855;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParserParser.TRUE || _la===FlinkSqlParserParser.FALSE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


FlinkSqlParserParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 30:
			return this.tableExpression_sempred(localctx, predIndex);
	case 58:
			return this.expression_sempred(localctx, predIndex);
	case 59:
			return this.predicate_sempred(localctx, predIndex);
	case 60:
			return this.expressionAtom_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

FlinkSqlParserParser.prototype.tableExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

FlinkSqlParserParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

FlinkSqlParserParser.prototype.predicate_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 5);
		case 3:
			return this.precpred(this._ctx, 3);
		case 4:
			return this.precpred(this._ctx, 2);
		case 5:
			return this.precpred(this._ctx, 6);
		case 6:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

FlinkSqlParserParser.prototype.expressionAtom_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return this.precpred(this._ctx, 2);
		case 8:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.FlinkSqlParserParser = FlinkSqlParserParser;
